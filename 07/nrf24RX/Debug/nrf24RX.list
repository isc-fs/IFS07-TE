
nrf24RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b80  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08004d60  08004d60  00005d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e70  08004e70  00006064  2**0
                  CONTENTS
  4 .ARM          00000008  08004e70  08004e70  00005e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e78  08004e78  00006064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e78  08004e78  00005e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e7c  08004e7c  00005e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08004e80  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  20000064  08004ee4  00006064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000034c  08004ee4  0000634c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e774  00000000  00000000  00006094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002092  00000000  00000000  00014808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  000168a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000966  00000000  00000000  000174d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d9a0  00000000  00000000  00017e3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef78  00000000  00000000  000357de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b992f  00000000  00000000  00044756  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fe085  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036d0  00000000  00000000  000fe0c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00101798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000064 	.word	0x20000064
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004d48 	.word	0x08004d48

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000068 	.word	0x20000068
 800021c:	08004d48 	.word	0x08004d48

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b96a 	b.w	80005bc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	460c      	mov	r4, r1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14e      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030c:	4694      	mov	ip, r2
 800030e:	458c      	cmp	ip, r1
 8000310:	4686      	mov	lr, r0
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	d962      	bls.n	80003de <__udivmoddi4+0xde>
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0320 	rsb	r3, r2, #32
 800031e:	4091      	lsls	r1, r2
 8000320:	fa20 f303 	lsr.w	r3, r0, r3
 8000324:	fa0c fc02 	lsl.w	ip, ip, r2
 8000328:	4319      	orrs	r1, r3
 800032a:	fa00 fe02 	lsl.w	lr, r0, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f f68c 	uxth.w	r6, ip
 8000336:	fbb1 f4f7 	udiv	r4, r1, r7
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb07 1114 	mls	r1, r7, r4, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb04 f106 	mul.w	r1, r4, r6
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f104 30ff 	add.w	r0, r4, #4294967295
 8000356:	f080 8112 	bcs.w	800057e <__udivmoddi4+0x27e>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 810f 	bls.w	800057e <__udivmoddi4+0x27e>
 8000360:	3c02      	subs	r4, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb1 f0f7 	udiv	r0, r1, r7
 800036e:	fb07 1110 	mls	r1, r7, r0, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb00 f606 	mul.w	r6, r0, r6
 800037a:	429e      	cmp	r6, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x94>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 31ff 	add.w	r1, r0, #4294967295
 8000386:	f080 80fc 	bcs.w	8000582 <__udivmoddi4+0x282>
 800038a:	429e      	cmp	r6, r3
 800038c:	f240 80f9 	bls.w	8000582 <__udivmoddi4+0x282>
 8000390:	4463      	add	r3, ip
 8000392:	3802      	subs	r0, #2
 8000394:	1b9b      	subs	r3, r3, r6
 8000396:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039a:	2100      	movs	r1, #0
 800039c:	b11d      	cbz	r5, 80003a6 <__udivmoddi4+0xa6>
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	e9c5 3200 	strd	r3, r2, [r5]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d905      	bls.n	80003ba <__udivmoddi4+0xba>
 80003ae:	b10d      	cbz	r5, 80003b4 <__udivmoddi4+0xb4>
 80003b0:	e9c5 0100 	strd	r0, r1, [r5]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4608      	mov	r0, r1
 80003b8:	e7f5      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003ba:	fab3 f183 	clz	r1, r3
 80003be:	2900      	cmp	r1, #0
 80003c0:	d146      	bne.n	8000450 <__udivmoddi4+0x150>
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xcc>
 80003c6:	4290      	cmp	r0, r2
 80003c8:	f0c0 80f0 	bcc.w	80005ac <__udivmoddi4+0x2ac>
 80003cc:	1a86      	subs	r6, r0, r2
 80003ce:	eb64 0303 	sbc.w	r3, r4, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d0e6      	beq.n	80003a6 <__udivmoddi4+0xa6>
 80003d8:	e9c5 6300 	strd	r6, r3, [r5]
 80003dc:	e7e3      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	f040 8090 	bne.w	8000504 <__udivmoddi4+0x204>
 80003e4:	eba1 040c 	sub.w	r4, r1, ip
 80003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ec:	fa1f f78c 	uxth.w	r7, ip
 80003f0:	2101      	movs	r1, #1
 80003f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fa:	fb08 4416 	mls	r4, r8, r6, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb07 f006 	mul.w	r0, r7, r6
 8000406:	4298      	cmp	r0, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x11c>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x11a>
 8000414:	4298      	cmp	r0, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 800041a:	4626      	mov	r6, r4
 800041c:	1a1c      	subs	r4, r3, r0
 800041e:	fa1f f38e 	uxth.w	r3, lr
 8000422:	fbb4 f0f8 	udiv	r0, r4, r8
 8000426:	fb08 4410 	mls	r4, r8, r0, r4
 800042a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800042e:	fb00 f707 	mul.w	r7, r0, r7
 8000432:	429f      	cmp	r7, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x148>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x146>
 8000440:	429f      	cmp	r7, r3
 8000442:	f200 80b0 	bhi.w	80005a6 <__udivmoddi4+0x2a6>
 8000446:	4620      	mov	r0, r4
 8000448:	1bdb      	subs	r3, r3, r7
 800044a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044e:	e7a5      	b.n	800039c <__udivmoddi4+0x9c>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 f706 	lsr.w	r7, r2, r6
 800045a:	431f      	orrs	r7, r3
 800045c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000460:	fa04 f301 	lsl.w	r3, r4, r1
 8000464:	ea43 030c 	orr.w	r3, r3, ip
 8000468:	40f4      	lsrs	r4, r6
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000474:	fbb4 fef0 	udiv	lr, r4, r0
 8000478:	fa1f fc87 	uxth.w	ip, r7
 800047c:	fb00 441e 	mls	r4, r0, lr, r4
 8000480:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000484:	fb0e f90c 	mul.w	r9, lr, ip
 8000488:	45a1      	cmp	r9, r4
 800048a:	fa02 f201 	lsl.w	r2, r2, r1
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x1a6>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000496:	f080 8084 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800049a:	45a1      	cmp	r9, r4
 800049c:	f240 8081 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 80004a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	eba4 0409 	sub.w	r4, r4, r9
 80004aa:	fa1f f983 	uxth.w	r9, r3
 80004ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b2:	fb00 4413 	mls	r4, r0, r3, r4
 80004b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	45a4      	cmp	ip, r4
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x1d2>
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004c8:	d267      	bcs.n	800059a <__udivmoddi4+0x29a>
 80004ca:	45a4      	cmp	ip, r4
 80004cc:	d965      	bls.n	800059a <__udivmoddi4+0x29a>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004d6:	fba0 9302 	umull	r9, r3, r0, r2
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	429c      	cmp	r4, r3
 80004e0:	46ce      	mov	lr, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	d351      	bcc.n	800058a <__udivmoddi4+0x28a>
 80004e6:	d04e      	beq.n	8000586 <__udivmoddi4+0x286>
 80004e8:	b155      	cbz	r5, 8000500 <__udivmoddi4+0x200>
 80004ea:	ebb8 030e 	subs.w	r3, r8, lr
 80004ee:	eb64 040c 	sbc.w	r4, r4, ip
 80004f2:	fa04 f606 	lsl.w	r6, r4, r6
 80004f6:	40cb      	lsrs	r3, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e750      	b.n	80003a6 <__udivmoddi4+0xa6>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f103 	lsr.w	r1, r0, r3
 800050c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000510:	fa24 f303 	lsr.w	r3, r4, r3
 8000514:	4094      	lsls	r4, r2
 8000516:	430c      	orrs	r4, r1
 8000518:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800051c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000520:	fa1f f78c 	uxth.w	r7, ip
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3110 	mls	r1, r8, r0, r3
 800052c:	0c23      	lsrs	r3, r4, #16
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	fb00 f107 	mul.w	r1, r0, r7
 8000536:	4299      	cmp	r1, r3
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x24c>
 800053a:	eb1c 0303 	adds.w	r3, ip, r3
 800053e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000542:	d22c      	bcs.n	800059e <__udivmoddi4+0x29e>
 8000544:	4299      	cmp	r1, r3
 8000546:	d92a      	bls.n	800059e <__udivmoddi4+0x29e>
 8000548:	3802      	subs	r0, #2
 800054a:	4463      	add	r3, ip
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb3 f1f8 	udiv	r1, r3, r8
 8000554:	fb08 3311 	mls	r3, r8, r1, r3
 8000558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800055c:	fb01 f307 	mul.w	r3, r1, r7
 8000560:	42a3      	cmp	r3, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x276>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f101 36ff 	add.w	r6, r1, #4294967295
 800056c:	d213      	bcs.n	8000596 <__udivmoddi4+0x296>
 800056e:	42a3      	cmp	r3, r4
 8000570:	d911      	bls.n	8000596 <__udivmoddi4+0x296>
 8000572:	3902      	subs	r1, #2
 8000574:	4464      	add	r4, ip
 8000576:	1ae4      	subs	r4, r4, r3
 8000578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800057c:	e739      	b.n	80003f2 <__udivmoddi4+0xf2>
 800057e:	4604      	mov	r4, r0
 8000580:	e6f0      	b.n	8000364 <__udivmoddi4+0x64>
 8000582:	4608      	mov	r0, r1
 8000584:	e706      	b.n	8000394 <__udivmoddi4+0x94>
 8000586:	45c8      	cmp	r8, r9
 8000588:	d2ae      	bcs.n	80004e8 <__udivmoddi4+0x1e8>
 800058a:	ebb9 0e02 	subs.w	lr, r9, r2
 800058e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000592:	3801      	subs	r0, #1
 8000594:	e7a8      	b.n	80004e8 <__udivmoddi4+0x1e8>
 8000596:	4631      	mov	r1, r6
 8000598:	e7ed      	b.n	8000576 <__udivmoddi4+0x276>
 800059a:	4603      	mov	r3, r0
 800059c:	e799      	b.n	80004d2 <__udivmoddi4+0x1d2>
 800059e:	4630      	mov	r0, r6
 80005a0:	e7d4      	b.n	800054c <__udivmoddi4+0x24c>
 80005a2:	46d6      	mov	lr, sl
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1a6>
 80005a6:	4463      	add	r3, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e74d      	b.n	8000448 <__udivmoddi4+0x148>
 80005ac:	4606      	mov	r6, r0
 80005ae:	4623      	mov	r3, r4
 80005b0:	4608      	mov	r0, r1
 80005b2:	e70f      	b.n	80003d4 <__udivmoddi4+0xd4>
 80005b4:	3e02      	subs	r6, #2
 80005b6:	4463      	add	r3, ip
 80005b8:	e730      	b.n	800041c <__udivmoddi4+0x11c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <print>:
void printAddress(uint8_t *address, uint8_t size);
void printPayload(float *data, uint8_t size);
void floatToString(float value, char *buffer);
/* USER CODE END PFP */

void print(const char *uart_buffer) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
    sprintf(uart_msg, "%s\n\r", uart_buffer);
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	4909      	ldr	r1, [pc, #36]	@ (80005f0 <print+0x30>)
 80005cc:	4809      	ldr	r0, [pc, #36]	@ (80005f4 <print+0x34>)
 80005ce:	f003 ff1b 	bl	8004408 <siprintf>
    HAL_UART_Transmit(&hlpuart1, (uint8_t*)uart_msg, strlen(uart_msg), HAL_MAX_DELAY);
 80005d2:	4808      	ldr	r0, [pc, #32]	@ (80005f4 <print+0x34>)
 80005d4:	f7ff fe24 	bl	8000220 <strlen>
 80005d8:	4603      	mov	r3, r0
 80005da:	b29a      	uxth	r2, r3
 80005dc:	f04f 33ff 	mov.w	r3, #4294967295
 80005e0:	4904      	ldr	r1, [pc, #16]	@ (80005f4 <print+0x34>)
 80005e2:	4805      	ldr	r0, [pc, #20]	@ (80005f8 <print+0x38>)
 80005e4:	f003 f894 	bl	8003710 <HAL_UART_Transmit>
}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	08004d60 	.word	0x08004d60
 80005f4:	20000178 	.word	0x20000178
 80005f8:	20000080 	.word	0x20000080

080005fc <printHex>:

void printHex(uint8_t value) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
    sprintf(uart_msg, "%02X ", value);
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	461a      	mov	r2, r3
 800060a:	4909      	ldr	r1, [pc, #36]	@ (8000630 <printHex+0x34>)
 800060c:	4809      	ldr	r0, [pc, #36]	@ (8000634 <printHex+0x38>)
 800060e:	f003 fefb 	bl	8004408 <siprintf>
    HAL_UART_Transmit(&hlpuart1, (uint8_t*)uart_msg, strlen(uart_msg), HAL_MAX_DELAY);
 8000612:	4808      	ldr	r0, [pc, #32]	@ (8000634 <printHex+0x38>)
 8000614:	f7ff fe04 	bl	8000220 <strlen>
 8000618:	4603      	mov	r3, r0
 800061a:	b29a      	uxth	r2, r3
 800061c:	f04f 33ff 	mov.w	r3, #4294967295
 8000620:	4904      	ldr	r1, [pc, #16]	@ (8000634 <printHex+0x38>)
 8000622:	4805      	ldr	r0, [pc, #20]	@ (8000638 <printHex+0x3c>)
 8000624:	f003 f874 	bl	8003710 <HAL_UART_Transmit>
}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	08004d68 	.word	0x08004d68
 8000634:	20000178 	.word	0x20000178
 8000638:	20000080 	.word	0x20000080

0800063c <printAddress>:

void printAddress(uint8_t *address, uint8_t size) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	460b      	mov	r3, r1
 8000646:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < size; i++) {
 8000648:	2300      	movs	r3, #0
 800064a:	73fb      	strb	r3, [r7, #15]
 800064c:	e009      	b.n	8000662 <printAddress+0x26>
        printHex(address[i]);
 800064e:	7bfb      	ldrb	r3, [r7, #15]
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	4413      	add	r3, r2
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff ffd0 	bl	80005fc <printHex>
    for (uint8_t i = 0; i < size; i++) {
 800065c:	7bfb      	ldrb	r3, [r7, #15]
 800065e:	3301      	adds	r3, #1
 8000660:	73fb      	strb	r3, [r7, #15]
 8000662:	7bfa      	ldrb	r2, [r7, #15]
 8000664:	78fb      	ldrb	r3, [r7, #3]
 8000666:	429a      	cmp	r2, r3
 8000668:	d3f1      	bcc.n	800064e <printAddress+0x12>
    }
    print("");
 800066a:	4803      	ldr	r0, [pc, #12]	@ (8000678 <printAddress+0x3c>)
 800066c:	f7ff ffa8 	bl	80005c0 <print>
}
 8000670:	bf00      	nop
 8000672:	3710      	adds	r7, #16
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	08004d70 	.word	0x08004d70

0800067c <floatToString>:

void floatToString(float value, char *buffer) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	ed87 0a01 	vstr	s0, [r7, #4]
 8000686:	6038      	str	r0, [r7, #0]
    if(value < 0) {
 8000688:	edd7 7a01 	vldr	s15, [r7, #4]
 800068c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000694:	d50a      	bpl.n	80006ac <floatToString+0x30>
        *buffer++ = '-';
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	1c5a      	adds	r2, r3, #1
 800069a:	603a      	str	r2, [r7, #0]
 800069c:	222d      	movs	r2, #45	@ 0x2d
 800069e:	701a      	strb	r2, [r3, #0]
        value = -value;
 80006a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80006a4:	eef1 7a67 	vneg.f32	s15, s15
 80006a8:	edc7 7a01 	vstr	s15, [r7, #4]
    }
    int intPart = (int)value;
 80006ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80006b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006b4:	ee17 3a90 	vmov	r3, s15
 80006b8:	60fb      	str	r3, [r7, #12]
    int fracPart = (int)((value - intPart) * 100);
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	ee07 3a90 	vmov	s15, r3
 80006c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006c4:	ed97 7a01 	vldr	s14, [r7, #4]
 80006c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006cc:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80006f4 <floatToString+0x78>
 80006d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006d8:	ee17 3a90 	vmov	r3, s15
 80006dc:	60bb      	str	r3, [r7, #8]
    sprintf(buffer, "%d.%02d", intPart, fracPart);
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	68fa      	ldr	r2, [r7, #12]
 80006e2:	4905      	ldr	r1, [pc, #20]	@ (80006f8 <floatToString+0x7c>)
 80006e4:	6838      	ldr	r0, [r7, #0]
 80006e6:	f003 fe8f 	bl	8004408 <siprintf>
}
 80006ea:	bf00      	nop
 80006ec:	3710      	adds	r7, #16
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	42c80000 	.word	0x42c80000
 80006f8:	08004d74 	.word	0x08004d74

080006fc <printPayload>:

void printPayload(float *data, uint8_t size) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b088      	sub	sp, #32
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	460b      	mov	r3, r1
 8000706:	70fb      	strb	r3, [r7, #3]
    char floatStr[20];
    for (uint8_t i = 0; i < size; i++) {
 8000708:	2300      	movs	r3, #0
 800070a:	77fb      	strb	r3, [r7, #31]
 800070c:	e021      	b.n	8000752 <printPayload+0x56>
        floatToString(data[i], floatStr);
 800070e:	7ffb      	ldrb	r3, [r7, #31]
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	4413      	add	r3, r2
 8000716:	edd3 7a00 	vldr	s15, [r3]
 800071a:	f107 0308 	add.w	r3, r7, #8
 800071e:	4618      	mov	r0, r3
 8000720:	eeb0 0a67 	vmov.f32	s0, s15
 8000724:	f7ff ffaa 	bl	800067c <floatToString>
        sprintf(uart_msg, "Data[%d]: %s\n\r", i, floatStr);
 8000728:	7ffa      	ldrb	r2, [r7, #31]
 800072a:	f107 0308 	add.w	r3, r7, #8
 800072e:	490d      	ldr	r1, [pc, #52]	@ (8000764 <printPayload+0x68>)
 8000730:	480d      	ldr	r0, [pc, #52]	@ (8000768 <printPayload+0x6c>)
 8000732:	f003 fe69 	bl	8004408 <siprintf>
        HAL_UART_Transmit(&hlpuart1, (uint8_t*)uart_msg, strlen(uart_msg), HAL_MAX_DELAY);
 8000736:	480c      	ldr	r0, [pc, #48]	@ (8000768 <printPayload+0x6c>)
 8000738:	f7ff fd72 	bl	8000220 <strlen>
 800073c:	4603      	mov	r3, r0
 800073e:	b29a      	uxth	r2, r3
 8000740:	f04f 33ff 	mov.w	r3, #4294967295
 8000744:	4908      	ldr	r1, [pc, #32]	@ (8000768 <printPayload+0x6c>)
 8000746:	4809      	ldr	r0, [pc, #36]	@ (800076c <printPayload+0x70>)
 8000748:	f002 ffe2 	bl	8003710 <HAL_UART_Transmit>
    for (uint8_t i = 0; i < size; i++) {
 800074c:	7ffb      	ldrb	r3, [r7, #31]
 800074e:	3301      	adds	r3, #1
 8000750:	77fb      	strb	r3, [r7, #31]
 8000752:	7ffa      	ldrb	r2, [r7, #31]
 8000754:	78fb      	ldrb	r3, [r7, #3]
 8000756:	429a      	cmp	r2, r3
 8000758:	d3d9      	bcc.n	800070e <printPayload+0x12>
    }
}
 800075a:	bf00      	nop
 800075c:	bf00      	nop
 800075e:	3720      	adds	r7, #32
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	08004d7c 	.word	0x08004d7c
 8000768:	20000178 	.word	0x20000178
 800076c:	20000080 	.word	0x20000080

08000770 <main>:

int main(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
    HAL_Init();
 8000776:	f000 fd4a 	bl	800120e <HAL_Init>
    SystemClock_Config();
 800077a:	f000 f873 	bl	8000864 <SystemClock_Config>
    MX_GPIO_Init();
 800077e:	f000 f945 	bl	8000a0c <MX_GPIO_Init>
    MX_LPUART1_UART_Init();
 8000782:	f000 f8bb 	bl	80008fc <MX_LPUART1_UART_Init>
    MX_SPI2_Init();
 8000786:	f000 f903 	bl	8000990 <MX_SPI2_Init>

    NRF24_Init();
 800078a:	f000 fb1f 	bl	8000dcc <NRF24_Init>
    NRF24_RxMode(RxAddress, 100);
 800078e:	2164      	movs	r1, #100	@ 0x64
 8000790:	482b      	ldr	r0, [pc, #172]	@ (8000840 <main+0xd0>)
 8000792:	f000 fb52 	bl	8000e3a <NRF24_RxMode>

    print("Receiver Address:");
 8000796:	482b      	ldr	r0, [pc, #172]	@ (8000844 <main+0xd4>)
 8000798:	f7ff ff12 	bl	80005c0 <print>
    printAddress(RxAddress, 5);
 800079c:	2105      	movs	r1, #5
 800079e:	4828      	ldr	r0, [pc, #160]	@ (8000840 <main+0xd0>)
 80007a0:	f7ff ff4c 	bl	800063c <printAddress>

    while (1)
    {
        uint8_t status = nrf24_ReadReg(STATUS);
 80007a4:	2007      	movs	r0, #7
 80007a6:	f000 fa35 	bl	8000c14 <nrf24_ReadReg>
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
        sprintf(uart_msg, "Status: %02X\n\r", status);
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	461a      	mov	r2, r3
 80007b2:	4925      	ldr	r1, [pc, #148]	@ (8000848 <main+0xd8>)
 80007b4:	4825      	ldr	r0, [pc, #148]	@ (800084c <main+0xdc>)
 80007b6:	f003 fe27 	bl	8004408 <siprintf>
        HAL_UART_Transmit(&hlpuart1, (uint8_t*)uart_msg, strlen(uart_msg), HAL_MAX_DELAY);
 80007ba:	4824      	ldr	r0, [pc, #144]	@ (800084c <main+0xdc>)
 80007bc:	f7ff fd30 	bl	8000220 <strlen>
 80007c0:	4603      	mov	r3, r0
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	f04f 33ff 	mov.w	r3, #4294967295
 80007c8:	4920      	ldr	r1, [pc, #128]	@ (800084c <main+0xdc>)
 80007ca:	4821      	ldr	r0, [pc, #132]	@ (8000850 <main+0xe0>)
 80007cc:	f002 ffa0 	bl	8003710 <HAL_UART_Transmit>

        uint8_t pipe_number = (status >> 1) & 0x07;
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	085b      	lsrs	r3, r3, #1
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	f003 0307 	and.w	r3, r3, #7
 80007da:	71bb      	strb	r3, [r7, #6]
        sprintf(uart_msg, "Pipe number: %d\n\r", pipe_number);
 80007dc:	79bb      	ldrb	r3, [r7, #6]
 80007de:	461a      	mov	r2, r3
 80007e0:	491c      	ldr	r1, [pc, #112]	@ (8000854 <main+0xe4>)
 80007e2:	481a      	ldr	r0, [pc, #104]	@ (800084c <main+0xdc>)
 80007e4:	f003 fe10 	bl	8004408 <siprintf>
        HAL_UART_Transmit(&hlpuart1, (uint8_t*)uart_msg, strlen(uart_msg), HAL_MAX_DELAY);
 80007e8:	4818      	ldr	r0, [pc, #96]	@ (800084c <main+0xdc>)
 80007ea:	f7ff fd19 	bl	8000220 <strlen>
 80007ee:	4603      	mov	r3, r0
 80007f0:	b29a      	uxth	r2, r3
 80007f2:	f04f 33ff 	mov.w	r3, #4294967295
 80007f6:	4915      	ldr	r1, [pc, #84]	@ (800084c <main+0xdc>)
 80007f8:	4815      	ldr	r0, [pc, #84]	@ (8000850 <main+0xe0>)
 80007fa:	f002 ff89 	bl	8003710 <HAL_UART_Transmit>

        if (isDataAvailable(2))
 80007fe:	2002      	movs	r0, #2
 8000800:	f000 fb5a 	bl	8000eb8 <isDataAvailable>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d013      	beq.n	8000832 <main+0xc2>
        {
            NRF24_Receive((uint8_t*)receivedData);
 800080a:	4813      	ldr	r0, [pc, #76]	@ (8000858 <main+0xe8>)
 800080c:	f000 fb74 	bl	8000ef8 <NRF24_Receive>
            print("Received Payload:");
 8000810:	4812      	ldr	r0, [pc, #72]	@ (800085c <main+0xec>)
 8000812:	f7ff fed5 	bl	80005c0 <print>
            printPayload(receivedData, 8);
 8000816:	2108      	movs	r1, #8
 8000818:	480f      	ldr	r0, [pc, #60]	@ (8000858 <main+0xe8>)
 800081a:	f7ff ff6f 	bl	80006fc <printPayload>
            nrf24_WriteReg(STATUS, (1 << 6));
 800081e:	2140      	movs	r1, #64	@ 0x40
 8000820:	2007      	movs	r0, #7
 8000822:	f000 f9af 	bl	8000b84 <nrf24_WriteReg>
            HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000826:	2120      	movs	r1, #32
 8000828:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800082c:	f001 f800 	bl	8001830 <HAL_GPIO_TogglePin>
 8000830:	e002      	b.n	8000838 <main+0xc8>
        }
        else
        {
            print("No data available");
 8000832:	480b      	ldr	r0, [pc, #44]	@ (8000860 <main+0xf0>)
 8000834:	f7ff fec4 	bl	80005c0 <print>
        }

        HAL_Delay(100);
 8000838:	2064      	movs	r0, #100	@ 0x64
 800083a:	f000 fd59 	bl	80012f0 <HAL_Delay>
    {
 800083e:	e7b1      	b.n	80007a4 <main+0x34>
 8000840:	20000000 	.word	0x20000000
 8000844:	08004d8c 	.word	0x08004d8c
 8000848:	08004da0 	.word	0x08004da0
 800084c:	20000178 	.word	0x20000178
 8000850:	20000080 	.word	0x20000080
 8000854:	08004db0 	.word	0x08004db0
 8000858:	200001dc 	.word	0x200001dc
 800085c:	08004dc4 	.word	0x08004dc4
 8000860:	08004dd8 	.word	0x08004dd8

08000864 <SystemClock_Config>:
    }
}

void SystemClock_Config(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b094      	sub	sp, #80	@ 0x50
 8000868:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086a:	f107 0318 	add.w	r3, r7, #24
 800086e:	2238      	movs	r2, #56	@ 0x38
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f003 fde8 	bl	8004448 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000878:	1d3b      	adds	r3, r7, #4
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]

    HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000886:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800088a:	f000 ffeb 	bl	8001864 <HAL_PWREx_ControlVoltageScaling>

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800088e:	2302      	movs	r3, #2
 8000890:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000892:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000896:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000898:	2340      	movs	r3, #64	@ 0x40
 800089a:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800089c:	2302      	movs	r3, #2
 800089e:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008a0:	2302      	movs	r3, #2
 80008a2:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80008a4:	2301      	movs	r3, #1
 80008a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLN = 16;
 80008a8:	2310      	movs	r3, #16
 80008aa:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008ac:	2302      	movs	r3, #2
 80008ae:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008b0:	2302      	movs	r3, #2
 80008b2:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008b4:	2302      	movs	r3, #2
 80008b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80008b8:	f107 0318 	add.w	r3, r7, #24
 80008bc:	4618      	mov	r0, r3
 80008be:	f001 f885 	bl	80019cc <HAL_RCC_OscConfig>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <SystemClock_Config+0x68>
        Error_Handler();
 80008c8:	f000 f926 	bl	8000b18 <Error_Handler>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK |
 80008cc:	230f      	movs	r3, #15
 80008ce:	607b      	str	r3, [r7, #4]
                                  RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d0:	2303      	movs	r3, #3
 80008d2:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008d8:	2300      	movs	r3, #0
 80008da:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008dc:	2300      	movs	r3, #0
 80008de:	617b      	str	r3, [r7, #20]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80008e0:	1d3b      	adds	r3, r7, #4
 80008e2:	2104      	movs	r1, #4
 80008e4:	4618      	mov	r0, r3
 80008e6:	f001 fb83 	bl	8001ff0 <HAL_RCC_ClockConfig>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SystemClock_Config+0x90>
        Error_Handler();
 80008f0:	f000 f912 	bl	8000b18 <Error_Handler>
    }
}
 80008f4:	bf00      	nop
 80008f6:	3750      	adds	r7, #80	@ 0x50
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}

080008fc <MX_LPUART1_UART_Init>:

static void MX_LPUART1_UART_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
    hlpuart1.Instance = LPUART1;
 8000900:	4b21      	ldr	r3, [pc, #132]	@ (8000988 <MX_LPUART1_UART_Init+0x8c>)
 8000902:	4a22      	ldr	r2, [pc, #136]	@ (800098c <MX_LPUART1_UART_Init+0x90>)
 8000904:	601a      	str	r2, [r3, #0]
    hlpuart1.Init.BaudRate = 115200;
 8000906:	4b20      	ldr	r3, [pc, #128]	@ (8000988 <MX_LPUART1_UART_Init+0x8c>)
 8000908:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800090c:	605a      	str	r2, [r3, #4]
    hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800090e:	4b1e      	ldr	r3, [pc, #120]	@ (8000988 <MX_LPUART1_UART_Init+0x8c>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
    hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000914:	4b1c      	ldr	r3, [pc, #112]	@ (8000988 <MX_LPUART1_UART_Init+0x8c>)
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
    hlpuart1.Init.Parity = UART_PARITY_NONE;
 800091a:	4b1b      	ldr	r3, [pc, #108]	@ (8000988 <MX_LPUART1_UART_Init+0x8c>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
    hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000920:	4b19      	ldr	r3, [pc, #100]	@ (8000988 <MX_LPUART1_UART_Init+0x8c>)
 8000922:	220c      	movs	r2, #12
 8000924:	615a      	str	r2, [r3, #20]
    hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000926:	4b18      	ldr	r3, [pc, #96]	@ (8000988 <MX_LPUART1_UART_Init+0x8c>)
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]
    hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800092c:	4b16      	ldr	r3, [pc, #88]	@ (8000988 <MX_LPUART1_UART_Init+0x8c>)
 800092e:	2200      	movs	r2, #0
 8000930:	621a      	str	r2, [r3, #32]
    hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000932:	4b15      	ldr	r3, [pc, #84]	@ (8000988 <MX_LPUART1_UART_Init+0x8c>)
 8000934:	2200      	movs	r2, #0
 8000936:	625a      	str	r2, [r3, #36]	@ 0x24
    hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000938:	4b13      	ldr	r3, [pc, #76]	@ (8000988 <MX_LPUART1_UART_Init+0x8c>)
 800093a:	2200      	movs	r2, #0
 800093c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_UART_Init(&hlpuart1) != HAL_OK) {
 800093e:	4812      	ldr	r0, [pc, #72]	@ (8000988 <MX_LPUART1_UART_Init+0x8c>)
 8000940:	f002 fe96 	bl	8003670 <HAL_UART_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_LPUART1_UART_Init+0x52>
        Error_Handler();
 800094a:	f000 f8e5 	bl	8000b18 <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK) {
 800094e:	2100      	movs	r1, #0
 8000950:	480d      	ldr	r0, [pc, #52]	@ (8000988 <MX_LPUART1_UART_Init+0x8c>)
 8000952:	f003 fc8f 	bl	8004274 <HAL_UARTEx_SetTxFifoThreshold>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_LPUART1_UART_Init+0x64>
        Error_Handler();
 800095c:	f000 f8dc 	bl	8000b18 <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK) {
 8000960:	2100      	movs	r1, #0
 8000962:	4809      	ldr	r0, [pc, #36]	@ (8000988 <MX_LPUART1_UART_Init+0x8c>)
 8000964:	f003 fcc4 	bl	80042f0 <HAL_UARTEx_SetRxFifoThreshold>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_LPUART1_UART_Init+0x76>
        Error_Handler();
 800096e:	f000 f8d3 	bl	8000b18 <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK) {
 8000972:	4805      	ldr	r0, [pc, #20]	@ (8000988 <MX_LPUART1_UART_Init+0x8c>)
 8000974:	f003 fc45 	bl	8004202 <HAL_UARTEx_DisableFifoMode>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_LPUART1_UART_Init+0x86>
        Error_Handler();
 800097e:	f000 f8cb 	bl	8000b18 <Error_Handler>
    }
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000080 	.word	0x20000080
 800098c:	40008000 	.word	0x40008000

08000990 <MX_SPI2_Init>:

static void MX_SPI2_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
    hspi2.Instance = SPI2;
 8000994:	4b1b      	ldr	r3, [pc, #108]	@ (8000a04 <MX_SPI2_Init+0x74>)
 8000996:	4a1c      	ldr	r2, [pc, #112]	@ (8000a08 <MX_SPI2_Init+0x78>)
 8000998:	601a      	str	r2, [r3, #0]
    hspi2.Init.Mode = SPI_MODE_MASTER;
 800099a:	4b1a      	ldr	r3, [pc, #104]	@ (8000a04 <MX_SPI2_Init+0x74>)
 800099c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009a0:	605a      	str	r2, [r3, #4]
    hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009a2:	4b18      	ldr	r3, [pc, #96]	@ (8000a04 <MX_SPI2_Init+0x74>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
    hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80009a8:	4b16      	ldr	r3, [pc, #88]	@ (8000a04 <MX_SPI2_Init+0x74>)
 80009aa:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80009ae:	60da      	str	r2, [r3, #12]
    hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009b0:	4b14      	ldr	r3, [pc, #80]	@ (8000a04 <MX_SPI2_Init+0x74>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
    hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009b6:	4b13      	ldr	r3, [pc, #76]	@ (8000a04 <MX_SPI2_Init+0x74>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	615a      	str	r2, [r3, #20]
    hspi2.Init.NSS = SPI_NSS_SOFT;
 80009bc:	4b11      	ldr	r3, [pc, #68]	@ (8000a04 <MX_SPI2_Init+0x74>)
 80009be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009c2:	619a      	str	r2, [r3, #24]
    hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80009c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a04 <MX_SPI2_Init+0x74>)
 80009c6:	2218      	movs	r2, #24
 80009c8:	61da      	str	r2, [r3, #28]
    hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000a04 <MX_SPI2_Init+0x74>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]
    hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000a04 <MX_SPI2_Init+0x74>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000a04 <MX_SPI2_Init+0x74>)
 80009d8:	2200      	movs	r2, #0
 80009da:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi2.Init.CRCPolynomial = 7;
 80009dc:	4b09      	ldr	r3, [pc, #36]	@ (8000a04 <MX_SPI2_Init+0x74>)
 80009de:	2207      	movs	r2, #7
 80009e0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009e2:	4b08      	ldr	r3, [pc, #32]	@ (8000a04 <MX_SPI2_Init+0x74>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009e8:	4b06      	ldr	r3, [pc, #24]	@ (8000a04 <MX_SPI2_Init+0x74>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 80009ee:	4805      	ldr	r0, [pc, #20]	@ (8000a04 <MX_SPI2_Init+0x74>)
 80009f0:	f001 ff0a 	bl	8002808 <HAL_SPI_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_SPI2_Init+0x6e>
        Error_Handler();
 80009fa:	f000 f88d 	bl	8000b18 <Error_Handler>
    }
}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000114 	.word	0x20000114
 8000a08:	40003800 	.word	0x40003800

08000a0c <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	@ 0x28
 8000a10:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]
 8000a1e:	60da      	str	r2, [r3, #12]
 8000a20:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a22:	4b3b      	ldr	r3, [pc, #236]	@ (8000b10 <MX_GPIO_Init+0x104>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a26:	4a3a      	ldr	r2, [pc, #232]	@ (8000b10 <MX_GPIO_Init+0x104>)
 8000a28:	f043 0304 	orr.w	r3, r3, #4
 8000a2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a2e:	4b38      	ldr	r3, [pc, #224]	@ (8000b10 <MX_GPIO_Init+0x104>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a32:	f003 0304 	and.w	r3, r3, #4
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a3a:	4b35      	ldr	r3, [pc, #212]	@ (8000b10 <MX_GPIO_Init+0x104>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a3e:	4a34      	ldr	r2, [pc, #208]	@ (8000b10 <MX_GPIO_Init+0x104>)
 8000a40:	f043 0320 	orr.w	r3, r3, #32
 8000a44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a46:	4b32      	ldr	r3, [pc, #200]	@ (8000b10 <MX_GPIO_Init+0x104>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4a:	f003 0320 	and.w	r3, r3, #32
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	4b2f      	ldr	r3, [pc, #188]	@ (8000b10 <MX_GPIO_Init+0x104>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a56:	4a2e      	ldr	r2, [pc, #184]	@ (8000b10 <MX_GPIO_Init+0x104>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a5e:	4b2c      	ldr	r3, [pc, #176]	@ (8000b10 <MX_GPIO_Init+0x104>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6a:	4b29      	ldr	r3, [pc, #164]	@ (8000b10 <MX_GPIO_Init+0x104>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a6e:	4a28      	ldr	r2, [pc, #160]	@ (8000b10 <MX_GPIO_Init+0x104>)
 8000a70:	f043 0302 	orr.w	r3, r3, #2
 8000a74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a76:	4b26      	ldr	r3, [pc, #152]	@ (8000b10 <MX_GPIO_Init+0x104>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a7a:	f003 0302 	and.w	r3, r3, #2
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]

    HAL_GPIO_WritePin(GPIOC, CSN_Pin|CE_Pin, GPIO_PIN_RESET);
 8000a82:	2200      	movs	r2, #0
 8000a84:	210c      	movs	r1, #12
 8000a86:	4823      	ldr	r0, [pc, #140]	@ (8000b14 <MX_GPIO_Init+0x108>)
 8000a88:	f000 feba 	bl	8001800 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2120      	movs	r1, #32
 8000a90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a94:	f000 feb4 	bl	8001800 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = B1_Pin;
 8000a98:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a9e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	4819      	ldr	r0, [pc, #100]	@ (8000b14 <MX_GPIO_Init+0x108>)
 8000ab0:	f000 fd24 	bl	80014fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ab8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4812      	ldr	r0, [pc, #72]	@ (8000b14 <MX_GPIO_Init+0x108>)
 8000aca:	f000 fd17 	bl	80014fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CSN_Pin|CE_Pin;
 8000ace:	230c      	movs	r3, #12
 8000ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ada:	2303      	movs	r3, #3
 8000adc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ade:	f107 0314 	add.w	r3, r7, #20
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	480b      	ldr	r0, [pc, #44]	@ (8000b14 <MX_GPIO_Init+0x108>)
 8000ae6:	f000 fd09 	bl	80014fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LD2_Pin;
 8000aea:	2320      	movs	r3, #32
 8000aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aee:	2301      	movs	r3, #1
 8000af0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	4619      	mov	r1, r3
 8000b00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b04:	f000 fcfa 	bl	80014fc <HAL_GPIO_Init>
}
 8000b08:	bf00      	nop
 8000b0a:	3728      	adds	r7, #40	@ 0x28
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40021000 	.word	0x40021000
 8000b14:	48000800 	.word	0x48000800

08000b18 <Error_Handler>:

void Error_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b1c:	b672      	cpsid	i
}
 8000b1e:	bf00      	nop
    __disable_irq();
    while (1) {}
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <Error_Handler+0x8>

08000b24 <CS_Select>:
#define NRF24_CSN_PORT   GPIOC
#define NRF24_CSN_PIN    GPIO_PIN_2


void CS_Select (void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2104      	movs	r1, #4
 8000b2c:	4802      	ldr	r0, [pc, #8]	@ (8000b38 <CS_Select+0x14>)
 8000b2e:	f000 fe67 	bl	8001800 <HAL_GPIO_WritePin>
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	48000800 	.word	0x48000800

08000b3c <CS_UnSelect>:

void CS_UnSelect (void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 8000b40:	2201      	movs	r2, #1
 8000b42:	2104      	movs	r1, #4
 8000b44:	4802      	ldr	r0, [pc, #8]	@ (8000b50 <CS_UnSelect+0x14>)
 8000b46:	f000 fe5b 	bl	8001800 <HAL_GPIO_WritePin>
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	48000800 	.word	0x48000800

08000b54 <CE_Enable>:


void CE_Enable (void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8000b58:	2201      	movs	r2, #1
 8000b5a:	2108      	movs	r1, #8
 8000b5c:	4802      	ldr	r0, [pc, #8]	@ (8000b68 <CE_Enable+0x14>)
 8000b5e:	f000 fe4f 	bl	8001800 <HAL_GPIO_WritePin>
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	48000800 	.word	0x48000800

08000b6c <CE_Disable>:

void CE_Disable (void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2108      	movs	r1, #8
 8000b74:	4802      	ldr	r0, [pc, #8]	@ (8000b80 <CE_Disable+0x14>)
 8000b76:	f000 fe43 	bl	8001800 <HAL_GPIO_WritePin>
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	48000800 	.word	0x48000800

08000b84 <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	460a      	mov	r2, r1
 8000b8e:	71fb      	strb	r3, [r7, #7]
 8000b90:	4613      	mov	r3, r2
 8000b92:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	f043 0320 	orr.w	r3, r3, #32
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 8000b9e:	79bb      	ldrb	r3, [r7, #6]
 8000ba0:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000ba2:	f7ff ffbf 	bl	8000b24 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 8000ba6:	f107 010c 	add.w	r1, r7, #12
 8000baa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bae:	2202      	movs	r2, #2
 8000bb0:	4804      	ldr	r0, [pc, #16]	@ (8000bc4 <nrf24_WriteReg+0x40>)
 8000bb2:	f001 fed4 	bl	800295e <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000bb6:	f7ff ffc1 	bl	8000b3c <CS_UnSelect>
}
 8000bba:	bf00      	nop
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000114 	.word	0x20000114

08000bc8 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
 8000bd4:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8000bd6:	7bfb      	ldrb	r3, [r7, #15]
 8000bd8:	f043 0320 	orr.w	r3, r3, #32
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000be0:	f7ff ffa0 	bl	8000b24 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 8000be4:	f107 0114 	add.w	r1, r7, #20
 8000be8:	2364      	movs	r3, #100	@ 0x64
 8000bea:	2201      	movs	r2, #1
 8000bec:	4808      	ldr	r0, [pc, #32]	@ (8000c10 <nrf24_WriteRegMulti+0x48>)
 8000bee:	f001 feb6 	bl	800295e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	b29a      	uxth	r2, r3
 8000bf6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bfa:	68b9      	ldr	r1, [r7, #8]
 8000bfc:	4804      	ldr	r0, [pc, #16]	@ (8000c10 <nrf24_WriteRegMulti+0x48>)
 8000bfe:	f001 feae 	bl	800295e <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000c02:	f7ff ff9b 	bl	8000b3c <CS_UnSelect>
}
 8000c06:	bf00      	nop
 8000c08:	3718      	adds	r7, #24
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000114 	.word	0x20000114

08000c14 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000c22:	f7ff ff7f 	bl	8000b24 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8000c26:	1df9      	adds	r1, r7, #7
 8000c28:	2364      	movs	r3, #100	@ 0x64
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	4808      	ldr	r0, [pc, #32]	@ (8000c50 <nrf24_ReadReg+0x3c>)
 8000c2e:	f001 fe96 	bl	800295e <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 8000c32:	f107 010f 	add.w	r1, r7, #15
 8000c36:	2364      	movs	r3, #100	@ 0x64
 8000c38:	2201      	movs	r2, #1
 8000c3a:	4805      	ldr	r0, [pc, #20]	@ (8000c50 <nrf24_ReadReg+0x3c>)
 8000c3c:	f002 f805 	bl	8002c4a <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000c40:	f7ff ff7c 	bl	8000b3c <CS_UnSelect>

	return data;
 8000c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3710      	adds	r7, #16
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000114 	.word	0x20000114

08000c54 <nrfsendCmd>:
}


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000c5e:	f7ff ff61 	bl	8000b24 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 8000c62:	1df9      	adds	r1, r7, #7
 8000c64:	2364      	movs	r3, #100	@ 0x64
 8000c66:	2201      	movs	r2, #1
 8000c68:	4804      	ldr	r0, [pc, #16]	@ (8000c7c <nrfsendCmd+0x28>)
 8000c6a:	f001 fe78 	bl	800295e <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000c6e:	f7ff ff65 	bl	8000b3c <CS_UnSelect>
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000114 	.word	0x20000114

08000c80 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b088      	sub	sp, #32
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	2b07      	cmp	r3, #7
 8000c8e:	d104      	bne.n	8000c9a <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 8000c90:	2100      	movs	r1, #0
 8000c92:	2007      	movs	r0, #7
 8000c94:	f7ff ff76 	bl	8000b84 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 8000c98:	e090      	b.n	8000dbc <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	2b17      	cmp	r3, #23
 8000c9e:	d104      	bne.n	8000caa <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 8000ca0:	2111      	movs	r1, #17
 8000ca2:	2017      	movs	r0, #23
 8000ca4:	f7ff ff6e 	bl	8000b84 <nrf24_WriteReg>
}
 8000ca8:	e088      	b.n	8000dbc <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 8000caa:	2108      	movs	r1, #8
 8000cac:	2000      	movs	r0, #0
 8000cae:	f7ff ff69 	bl	8000b84 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 8000cb2:	213f      	movs	r1, #63	@ 0x3f
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	f7ff ff65 	bl	8000b84 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 8000cba:	2103      	movs	r1, #3
 8000cbc:	2002      	movs	r0, #2
 8000cbe:	f7ff ff61 	bl	8000b84 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 8000cc2:	2103      	movs	r1, #3
 8000cc4:	2003      	movs	r0, #3
 8000cc6:	f7ff ff5d 	bl	8000b84 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 8000cca:	2103      	movs	r1, #3
 8000ccc:	2004      	movs	r0, #4
 8000cce:	f7ff ff59 	bl	8000b84 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 8000cd2:	2102      	movs	r1, #2
 8000cd4:	2005      	movs	r0, #5
 8000cd6:	f7ff ff55 	bl	8000b84 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 8000cda:	210e      	movs	r1, #14
 8000cdc:	2006      	movs	r0, #6
 8000cde:	f7ff ff51 	bl	8000b84 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);// este
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	2007      	movs	r0, #7
 8000ce6:	f7ff ff4d 	bl	8000b84 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 8000cea:	2100      	movs	r1, #0
 8000cec:	2008      	movs	r0, #8
 8000cee:	f7ff ff49 	bl	8000b84 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);// este
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	2009      	movs	r0, #9
 8000cf6:	f7ff ff45 	bl	8000b84 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000cfa:	4a32      	ldr	r2, [pc, #200]	@ (8000dc4 <nrf24_reset+0x144>)
 8000cfc:	f107 0318 	add.w	r3, r7, #24
 8000d00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d04:	6018      	str	r0, [r3, #0]
 8000d06:	3304      	adds	r3, #4
 8000d08:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 8000d0a:	f107 0318 	add.w	r3, r7, #24
 8000d0e:	2205      	movs	r2, #5
 8000d10:	4619      	mov	r1, r3
 8000d12:	200a      	movs	r0, #10
 8000d14:	f7ff ff58 	bl	8000bc8 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};// este
 8000d18:	4a2b      	ldr	r2, [pc, #172]	@ (8000dc8 <nrf24_reset+0x148>)
 8000d1a:	f107 0310 	add.w	r3, r7, #16
 8000d1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d22:	6018      	str	r0, [r3, #0]
 8000d24:	3304      	adds	r3, #4
 8000d26:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 8000d28:	f107 0310 	add.w	r3, r7, #16
 8000d2c:	2205      	movs	r2, #5
 8000d2e:	4619      	mov	r1, r3
 8000d30:	200b      	movs	r0, #11
 8000d32:	f7ff ff49 	bl	8000bc8 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 8000d36:	21c3      	movs	r1, #195	@ 0xc3
 8000d38:	200c      	movs	r0, #12
 8000d3a:	f7ff ff23 	bl	8000b84 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 8000d3e:	21c4      	movs	r1, #196	@ 0xc4
 8000d40:	200d      	movs	r0, #13
 8000d42:	f7ff ff1f 	bl	8000b84 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 8000d46:	21c5      	movs	r1, #197	@ 0xc5
 8000d48:	200e      	movs	r0, #14
 8000d4a:	f7ff ff1b 	bl	8000b84 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 8000d4e:	21c6      	movs	r1, #198	@ 0xc6
 8000d50:	200f      	movs	r0, #15
 8000d52:	f7ff ff17 	bl	8000b84 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000d56:	4a1b      	ldr	r2, [pc, #108]	@ (8000dc4 <nrf24_reset+0x144>)
 8000d58:	f107 0308 	add.w	r3, r7, #8
 8000d5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d60:	6018      	str	r0, [r3, #0]
 8000d62:	3304      	adds	r3, #4
 8000d64:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 8000d66:	f107 0308 	add.w	r3, r7, #8
 8000d6a:	2205      	movs	r2, #5
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	2010      	movs	r0, #16
 8000d70:	f7ff ff2a 	bl	8000bc8 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 8000d74:	2100      	movs	r1, #0
 8000d76:	2011      	movs	r0, #17
 8000d78:	f7ff ff04 	bl	8000b84 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	2012      	movs	r0, #18
 8000d80:	f7ff ff00 	bl	8000b84 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 8000d84:	2100      	movs	r1, #0
 8000d86:	2013      	movs	r0, #19
 8000d88:	f7ff fefc 	bl	8000b84 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	2014      	movs	r0, #20
 8000d90:	f7ff fef8 	bl	8000b84 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 8000d94:	2100      	movs	r1, #0
 8000d96:	2015      	movs	r0, #21
 8000d98:	f7ff fef4 	bl	8000b84 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	2016      	movs	r0, #22
 8000da0:	f7ff fef0 	bl	8000b84 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 8000da4:	2111      	movs	r1, #17
 8000da6:	2017      	movs	r0, #23
 8000da8:	f7ff feec 	bl	8000b84 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 8000dac:	2100      	movs	r1, #0
 8000dae:	201c      	movs	r0, #28
 8000db0:	f7ff fee8 	bl	8000b84 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 8000db4:	2100      	movs	r1, #0
 8000db6:	201d      	movs	r0, #29
 8000db8:	f7ff fee4 	bl	8000b84 <nrf24_WriteReg>
}
 8000dbc:	bf00      	nop
 8000dbe:	3720      	adds	r7, #32
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	08004dec 	.word	0x08004dec
 8000dc8:	08004df4 	.word	0x08004df4

08000dcc <NRF24_Init>:




void NRF24_Init (void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 8000dd0:	f7ff fecc 	bl	8000b6c <CE_Disable>


	// reset everything
	nrf24_reset (0);
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	f7ff ff53 	bl	8000c80 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 8000dda:	2100      	movs	r1, #0
 8000ddc:	2000      	movs	r0, #0
 8000dde:	f7ff fed1 	bl	8000b84 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0x3F);  // No Auto ACK 0011 1111
 8000de2:	213f      	movs	r1, #63	@ 0x3f
 8000de4:	2001      	movs	r0, #1
 8000de6:	f7ff fecd 	bl	8000b84 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0x03);  // P0:on P1:on P2:off P3:off P4:off P5:off
 8000dea:	2103      	movs	r1, #3
 8000dec:	2002      	movs	r0, #2
 8000dee:	f7ff fec9 	bl	8000b84 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 8000df2:	2103      	movs	r1, #3
 8000df4:	2003      	movs	r0, #3
 8000df6:	f7ff fec5 	bl	8000b84 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0x1F);   // retry delay 500 us, retries 15
 8000dfa:	211f      	movs	r1, #31
 8000dfc:	2004      	movs	r0, #4
 8000dfe:	f7ff fec1 	bl	8000b84 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 8000e02:	2100      	movs	r1, #0
 8000e04:	2005      	movs	r0, #5
 8000e06:	f7ff febd 	bl	8000b84 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x09);   // no continuous carrier, no force PLL lock, 2 Mbps, -18 dBm Él último es un don t care pero quien sabe...
 8000e0a:	2109      	movs	r1, #9
 8000e0c:	2006      	movs	r0, #6
 8000e0e:	f7ff feb9 	bl	8000b84 <nrf24_WriteReg>

	nrf24_WriteReg (FIFO_STATUS, 0x11);
 8000e12:	2111      	movs	r1, #17
 8000e14:	2017      	movs	r0, #23
 8000e16:	f7ff feb5 	bl	8000b84 <nrf24_WriteReg>

	nrf24_WriteReg (STATUS, 0x70); // no RX data, no TX, TX retries ok, no pipe data, TX FIFO not full
 8000e1a:	2170      	movs	r1, #112	@ 0x70
 8000e1c:	2007      	movs	r0, #7
 8000e1e:	f7ff feb1 	bl	8000b84 <nrf24_WriteReg>

	nrf24_WriteReg(DYNPD, 0x03); //P0:off P1:on P2:off P3:off P4:off P5:off estaba solo dos
 8000e22:	2103      	movs	r1, #3
 8000e24:	201c      	movs	r0, #28
 8000e26:	f7ff fead 	bl	8000b84 <nrf24_WriteReg>

	nrf24_WriteReg(FEATURE, 0x04);
 8000e2a:	2104      	movs	r1, #4
 8000e2c:	201d      	movs	r0, #29
 8000e2e:	f7ff fea9 	bl	8000b84 <nrf24_WriteReg>


	// Enable the chip after configuring the device
	CE_Enable();
 8000e32:	f7ff fe8f 	bl	8000b54 <CE_Enable>

}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <NRF24_RxMode>:
	return 0;
}


void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b084      	sub	sp, #16
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
 8000e42:	460b      	mov	r3, r1
 8000e44:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 8000e46:	f7ff fe91 	bl	8000b6c <CE_Disable>

	nrf24_reset (STATUS);
 8000e4a:	2007      	movs	r0, #7
 8000e4c:	f7ff ff18 	bl	8000c80 <nrf24_reset>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 8000e50:	78fb      	ldrb	r3, [r7, #3]
 8000e52:	4619      	mov	r1, r3
 8000e54:	2005      	movs	r0, #5
 8000e56:	f7ff fe95 	bl	8000b84 <nrf24_WriteReg>

	// select data pipe 2
	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
 8000e5a:	2002      	movs	r0, #2
 8000e5c:	f7ff feda 	bl	8000c14 <nrf24_ReadReg>
 8000e60:	4603      	mov	r3, r0
 8000e62:	73fb      	strb	r3, [r7, #15]
	en_rxaddr = en_rxaddr | (1<<2);
 8000e64:	7bfb      	ldrb	r3, [r7, #15]
 8000e66:	f043 0304 	orr.w	r3, r3, #4
 8000e6a:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 8000e6c:	7bfb      	ldrb	r3, [r7, #15]
 8000e6e:	4619      	mov	r1, r3
 8000e70:	2002      	movs	r0, #2
 8000e72:	f7ff fe87 	bl	8000b84 <nrf24_WriteReg>
	 * Pipe 1 ADDR = 0xAABBCCDD11
	 * Pipe 2 ADDR = 0xAABBCCDD22
	 * Pipe 3 ADDR = 0xAABBCCDD33
	 *
	 */
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);  // Write the Pipe1 address
 8000e76:	2205      	movs	r2, #5
 8000e78:	6879      	ldr	r1, [r7, #4]
 8000e7a:	200b      	movs	r0, #11
 8000e7c:	f7ff fea4 	bl	8000bc8 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xEE);  // Write the Pipe2 LSB address
 8000e80:	21ee      	movs	r1, #238	@ 0xee
 8000e82:	200c      	movs	r0, #12
 8000e84:	f7ff fe7e 	bl	8000b84 <nrf24_WriteReg>

	nrf24_WriteReg (RX_PW_P2, 32);   // 32 bit payload size for pipe 2
 8000e88:	2120      	movs	r1, #32
 8000e8a:	2013      	movs	r0, #19
 8000e8c:	f7ff fe7a 	bl	8000b84 <nrf24_WriteReg>


	// power up the device in Rx mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 8000e90:	2000      	movs	r0, #0
 8000e92:	f7ff febf 	bl	8000c14 <nrf24_ReadReg>
 8000e96:	4603      	mov	r3, r0
 8000e98:	73bb      	strb	r3, [r7, #14]
	config = config | (1<<1) | (1<<0);
 8000e9a:	7bbb      	ldrb	r3, [r7, #14]
 8000e9c:	f043 0303 	orr.w	r3, r3, #3
 8000ea0:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg (CONFIG, config);
 8000ea2:	7bbb      	ldrb	r3, [r7, #14]
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	f7ff fe6c 	bl	8000b84 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8000eac:	f7ff fe52 	bl	8000b54 <CE_Enable>
}
 8000eb0:	bf00      	nop
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <isDataAvailable>:


uint8_t isDataAvailable (int pipenum)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf24_ReadReg(STATUS);
 8000ec0:	2007      	movs	r0, #7
 8000ec2:	f7ff fea7 	bl	8000c14 <nrf24_ReadReg>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	73fb      	strb	r3, [r7, #15]


	if ((status&(1<<6))&&(status&(pipenum<<1)))
 8000eca:	7bfb      	ldrb	r3, [r7, #15]
 8000ecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d00b      	beq.n	8000eec <isDataAvailable+0x34>
 8000ed4:	7bfa      	ldrb	r2, [r7, #15]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	4013      	ands	r3, r2
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d005      	beq.n	8000eec <isDataAvailable+0x34>
	{

		nrf24_WriteReg(STATUS, (1<<6));
 8000ee0:	2140      	movs	r1, #64	@ 0x40
 8000ee2:	2007      	movs	r0, #7
 8000ee4:	f7ff fe4e 	bl	8000b84 <nrf24_WriteReg>

		return 1;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e000      	b.n	8000eee <isDataAvailable+0x36>
	}

	return 0;
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <NRF24_Receive>:


void NRF24_Receive (uint8_t *data)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	73fb      	strb	r3, [r7, #15]

	// select the device
	CS_Select();
 8000f04:	f7ff fe0e 	bl	8000b24 <CS_Select>

	// payload command
	cmdtosend = R_RX_PAYLOAD;
 8000f08:	2361      	movs	r3, #97	@ 0x61
 8000f0a:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 8000f0c:	f107 010f 	add.w	r1, r7, #15
 8000f10:	2364      	movs	r3, #100	@ 0x64
 8000f12:	2201      	movs	r2, #1
 8000f14:	480c      	ldr	r0, [pc, #48]	@ (8000f48 <NRF24_Receive+0x50>)
 8000f16:	f001 fd22 	bl	800295e <HAL_SPI_Transmit>

	// Receive the payload
	HAL_SPI_Receive(NRF24_SPI, data, 32, 1000);
 8000f1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f1e:	2220      	movs	r2, #32
 8000f20:	6879      	ldr	r1, [r7, #4]
 8000f22:	4809      	ldr	r0, [pc, #36]	@ (8000f48 <NRF24_Receive+0x50>)
 8000f24:	f001 fe91 	bl	8002c4a <HAL_SPI_Receive>

	// Unselect the device
	CS_UnSelect();
 8000f28:	f7ff fe08 	bl	8000b3c <CS_UnSelect>

	HAL_Delay(1);
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	f000 f9df 	bl	80012f0 <HAL_Delay>

	cmdtosend = FLUSH_RX;
 8000f32:	23e2      	movs	r3, #226	@ 0xe2
 8000f34:	73fb      	strb	r3, [r7, #15]
	nrfsendCmd(cmdtosend);
 8000f36:	7bfb      	ldrb	r3, [r7, #15]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff fe8b 	bl	8000c54 <nrfsendCmd>
}
 8000f3e:	bf00      	nop
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000114 	.word	0x20000114

08000f4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f52:	4b0f      	ldr	r3, [pc, #60]	@ (8000f90 <HAL_MspInit+0x44>)
 8000f54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f56:	4a0e      	ldr	r2, [pc, #56]	@ (8000f90 <HAL_MspInit+0x44>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f90 <HAL_MspInit+0x44>)
 8000f60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6a:	4b09      	ldr	r3, [pc, #36]	@ (8000f90 <HAL_MspInit+0x44>)
 8000f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f6e:	4a08      	ldr	r2, [pc, #32]	@ (8000f90 <HAL_MspInit+0x44>)
 8000f70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f74:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f76:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <HAL_MspInit+0x44>)
 8000f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f7e:	603b      	str	r3, [r7, #0]
 8000f80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000f82:	f000 fd13 	bl	80019ac <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40021000 	.word	0x40021000

08000f94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b09a      	sub	sp, #104	@ 0x68
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fac:	f107 0310 	add.w	r3, r7, #16
 8000fb0:	2244      	movs	r2, #68	@ 0x44
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f003 fa47 	bl	8004448 <memset>
  if(huart->Instance==LPUART1)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a1f      	ldr	r2, [pc, #124]	@ (800103c <HAL_UART_MspInit+0xa8>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d136      	bne.n	8001032 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000fc4:	2320      	movs	r3, #32
 8000fc6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fcc:	f107 0310 	add.w	r3, r7, #16
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f001 fa29 	bl	8002428 <HAL_RCCEx_PeriphCLKConfig>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000fdc:	f7ff fd9c 	bl	8000b18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000fe0:	4b17      	ldr	r3, [pc, #92]	@ (8001040 <HAL_UART_MspInit+0xac>)
 8000fe2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fe4:	4a16      	ldr	r2, [pc, #88]	@ (8001040 <HAL_UART_MspInit+0xac>)
 8000fe6:	f043 0301 	orr.w	r3, r3, #1
 8000fea:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000fec:	4b14      	ldr	r3, [pc, #80]	@ (8001040 <HAL_UART_MspInit+0xac>)
 8000fee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ff0:	f003 0301 	and.w	r3, r3, #1
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff8:	4b11      	ldr	r3, [pc, #68]	@ (8001040 <HAL_UART_MspInit+0xac>)
 8000ffa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffc:	4a10      	ldr	r2, [pc, #64]	@ (8001040 <HAL_UART_MspInit+0xac>)
 8000ffe:	f043 0301 	orr.w	r3, r3, #1
 8001002:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001004:	4b0e      	ldr	r3, [pc, #56]	@ (8001040 <HAL_UART_MspInit+0xac>)
 8001006:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001010:	230c      	movs	r3, #12
 8001012:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001014:	2302      	movs	r3, #2
 8001016:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101c:	2300      	movs	r3, #0
 800101e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001020:	230c      	movs	r3, #12
 8001022:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001024:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001028:	4619      	mov	r1, r3
 800102a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800102e:	f000 fa65 	bl	80014fc <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8001032:	bf00      	nop
 8001034:	3768      	adds	r7, #104	@ 0x68
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40008000 	.word	0x40008000
 8001040:	40021000 	.word	0x40021000

08001044 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	@ 0x28
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a17      	ldr	r2, [pc, #92]	@ (80010c0 <HAL_SPI_MspInit+0x7c>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d128      	bne.n	80010b8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001066:	4b17      	ldr	r3, [pc, #92]	@ (80010c4 <HAL_SPI_MspInit+0x80>)
 8001068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800106a:	4a16      	ldr	r2, [pc, #88]	@ (80010c4 <HAL_SPI_MspInit+0x80>)
 800106c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001070:	6593      	str	r3, [r2, #88]	@ 0x58
 8001072:	4b14      	ldr	r3, [pc, #80]	@ (80010c4 <HAL_SPI_MspInit+0x80>)
 8001074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001076:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800107e:	4b11      	ldr	r3, [pc, #68]	@ (80010c4 <HAL_SPI_MspInit+0x80>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001082:	4a10      	ldr	r2, [pc, #64]	@ (80010c4 <HAL_SPI_MspInit+0x80>)
 8001084:	f043 0302 	orr.w	r3, r3, #2
 8001088:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800108a:	4b0e      	ldr	r3, [pc, #56]	@ (80010c4 <HAL_SPI_MspInit+0x80>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001096:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800109a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109c:	2302      	movs	r3, #2
 800109e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a4:	2303      	movs	r3, #3
 80010a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010a8:	2305      	movs	r3, #5
 80010aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	4619      	mov	r1, r3
 80010b2:	4805      	ldr	r0, [pc, #20]	@ (80010c8 <HAL_SPI_MspInit+0x84>)
 80010b4:	f000 fa22 	bl	80014fc <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80010b8:	bf00      	nop
 80010ba:	3728      	adds	r7, #40	@ 0x28
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40003800 	.word	0x40003800
 80010c4:	40021000 	.word	0x40021000
 80010c8:	48000400 	.word	0x48000400

080010cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010d0:	bf00      	nop
 80010d2:	e7fd      	b.n	80010d0 <NMI_Handler+0x4>

080010d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d8:	bf00      	nop
 80010da:	e7fd      	b.n	80010d8 <HardFault_Handler+0x4>

080010dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e0:	bf00      	nop
 80010e2:	e7fd      	b.n	80010e0 <MemManage_Handler+0x4>

080010e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010e8:	bf00      	nop
 80010ea:	e7fd      	b.n	80010e8 <BusFault_Handler+0x4>

080010ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f0:	bf00      	nop
 80010f2:	e7fd      	b.n	80010f0 <UsageFault_Handler+0x4>

080010f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001122:	f000 f8c7 	bl	80012b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001134:	4a14      	ldr	r2, [pc, #80]	@ (8001188 <_sbrk+0x5c>)
 8001136:	4b15      	ldr	r3, [pc, #84]	@ (800118c <_sbrk+0x60>)
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001140:	4b13      	ldr	r3, [pc, #76]	@ (8001190 <_sbrk+0x64>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d102      	bne.n	800114e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001148:	4b11      	ldr	r3, [pc, #68]	@ (8001190 <_sbrk+0x64>)
 800114a:	4a12      	ldr	r2, [pc, #72]	@ (8001194 <_sbrk+0x68>)
 800114c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800114e:	4b10      	ldr	r3, [pc, #64]	@ (8001190 <_sbrk+0x64>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4413      	add	r3, r2
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	429a      	cmp	r2, r3
 800115a:	d207      	bcs.n	800116c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800115c:	f003 f97c 	bl	8004458 <__errno>
 8001160:	4603      	mov	r3, r0
 8001162:	220c      	movs	r2, #12
 8001164:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001166:	f04f 33ff 	mov.w	r3, #4294967295
 800116a:	e009      	b.n	8001180 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800116c:	4b08      	ldr	r3, [pc, #32]	@ (8001190 <_sbrk+0x64>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001172:	4b07      	ldr	r3, [pc, #28]	@ (8001190 <_sbrk+0x64>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4413      	add	r3, r2
 800117a:	4a05      	ldr	r2, [pc, #20]	@ (8001190 <_sbrk+0x64>)
 800117c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800117e:	68fb      	ldr	r3, [r7, #12]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3718      	adds	r7, #24
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20008000 	.word	0x20008000
 800118c:	00000400 	.word	0x00000400
 8001190:	200001fc 	.word	0x200001fc
 8001194:	20000350 	.word	0x20000350

08001198 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800119c:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <SystemInit+0x20>)
 800119e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011a2:	4a05      	ldr	r2, [pc, #20]	@ (80011b8 <SystemInit+0x20>)
 80011a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011bc:	480d      	ldr	r0, [pc, #52]	@ (80011f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011be:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80011c0:	f7ff ffea 	bl	8001198 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011c4:	480c      	ldr	r0, [pc, #48]	@ (80011f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80011c6:	490d      	ldr	r1, [pc, #52]	@ (80011fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80011c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001200 <LoopForever+0xe>)
  movs r3, #0
 80011ca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80011cc:	e002      	b.n	80011d4 <LoopCopyDataInit>

080011ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011d2:	3304      	adds	r3, #4

080011d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d8:	d3f9      	bcc.n	80011ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011da:	4a0a      	ldr	r2, [pc, #40]	@ (8001204 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001208 <LoopForever+0x16>)
  movs r3, #0
 80011de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e0:	e001      	b.n	80011e6 <LoopFillZerobss>

080011e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e4:	3204      	adds	r2, #4

080011e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e8:	d3fb      	bcc.n	80011e2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80011ea:	f003 f93b 	bl	8004464 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011ee:	f7ff fabf 	bl	8000770 <main>

080011f2 <LoopForever>:

LoopForever:
    b LoopForever
 80011f2:	e7fe      	b.n	80011f2 <LoopForever>
  ldr   r0, =_estack
 80011f4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80011f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011fc:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001200:	08004e80 	.word	0x08004e80
  ldr r2, =_sbss
 8001204:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001208:	2000034c 	.word	0x2000034c

0800120c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800120c:	e7fe      	b.n	800120c <ADC1_2_IRQHandler>

0800120e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001214:	2300      	movs	r3, #0
 8001216:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001218:	2003      	movs	r0, #3
 800121a:	f000 f93d 	bl	8001498 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800121e:	2000      	movs	r0, #0
 8001220:	f000 f80e 	bl	8001240 <HAL_InitTick>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d002      	beq.n	8001230 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	71fb      	strb	r3, [r7, #7]
 800122e:	e001      	b.n	8001234 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001230:	f7ff fe8c 	bl	8000f4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001234:	79fb      	ldrb	r3, [r7, #7]

}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001248:	2300      	movs	r3, #0
 800124a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800124c:	4b16      	ldr	r3, [pc, #88]	@ (80012a8 <HAL_InitTick+0x68>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d022      	beq.n	800129a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001254:	4b15      	ldr	r3, [pc, #84]	@ (80012ac <HAL_InitTick+0x6c>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	4b13      	ldr	r3, [pc, #76]	@ (80012a8 <HAL_InitTick+0x68>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001260:	fbb1 f3f3 	udiv	r3, r1, r3
 8001264:	fbb2 f3f3 	udiv	r3, r2, r3
 8001268:	4618      	mov	r0, r3
 800126a:	f000 f93a 	bl	80014e2 <HAL_SYSTICK_Config>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d10f      	bne.n	8001294 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2b0f      	cmp	r3, #15
 8001278:	d809      	bhi.n	800128e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800127a:	2200      	movs	r2, #0
 800127c:	6879      	ldr	r1, [r7, #4]
 800127e:	f04f 30ff 	mov.w	r0, #4294967295
 8001282:	f000 f914 	bl	80014ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001286:	4a0a      	ldr	r2, [pc, #40]	@ (80012b0 <HAL_InitTick+0x70>)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6013      	str	r3, [r2, #0]
 800128c:	e007      	b.n	800129e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	73fb      	strb	r3, [r7, #15]
 8001292:	e004      	b.n	800129e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	73fb      	strb	r3, [r7, #15]
 8001298:	e001      	b.n	800129e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800129e:	7bfb      	ldrb	r3, [r7, #15]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000010 	.word	0x20000010
 80012ac:	20000008 	.word	0x20000008
 80012b0:	2000000c 	.word	0x2000000c

080012b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012b8:	4b05      	ldr	r3, [pc, #20]	@ (80012d0 <HAL_IncTick+0x1c>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4b05      	ldr	r3, [pc, #20]	@ (80012d4 <HAL_IncTick+0x20>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4413      	add	r3, r2
 80012c2:	4a03      	ldr	r2, [pc, #12]	@ (80012d0 <HAL_IncTick+0x1c>)
 80012c4:	6013      	str	r3, [r2, #0]
}
 80012c6:	bf00      	nop
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	20000200 	.word	0x20000200
 80012d4:	20000010 	.word	0x20000010

080012d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  return uwTick;
 80012dc:	4b03      	ldr	r3, [pc, #12]	@ (80012ec <HAL_GetTick+0x14>)
 80012de:	681b      	ldr	r3, [r3, #0]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	20000200 	.word	0x20000200

080012f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012f8:	f7ff ffee 	bl	80012d8 <HAL_GetTick>
 80012fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001308:	d004      	beq.n	8001314 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800130a:	4b09      	ldr	r3, [pc, #36]	@ (8001330 <HAL_Delay+0x40>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	68fa      	ldr	r2, [r7, #12]
 8001310:	4413      	add	r3, r2
 8001312:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001314:	bf00      	nop
 8001316:	f7ff ffdf 	bl	80012d8 <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	68fa      	ldr	r2, [r7, #12]
 8001322:	429a      	cmp	r2, r3
 8001324:	d8f7      	bhi.n	8001316 <HAL_Delay+0x26>
  {
  }
}
 8001326:	bf00      	nop
 8001328:	bf00      	nop
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000010 	.word	0x20000010

08001334 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001344:	4b0c      	ldr	r3, [pc, #48]	@ (8001378 <__NVIC_SetPriorityGrouping+0x44>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800134a:	68ba      	ldr	r2, [r7, #8]
 800134c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001350:	4013      	ands	r3, r2
 8001352:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800135c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001360:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001364:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001366:	4a04      	ldr	r2, [pc, #16]	@ (8001378 <__NVIC_SetPriorityGrouping+0x44>)
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	60d3      	str	r3, [r2, #12]
}
 800136c:	bf00      	nop
 800136e:	3714      	adds	r7, #20
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001380:	4b04      	ldr	r3, [pc, #16]	@ (8001394 <__NVIC_GetPriorityGrouping+0x18>)
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	0a1b      	lsrs	r3, r3, #8
 8001386:	f003 0307 	and.w	r3, r3, #7
}
 800138a:	4618      	mov	r0, r3
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	6039      	str	r1, [r7, #0]
 80013a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	db0a      	blt.n	80013c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	490c      	ldr	r1, [pc, #48]	@ (80013e4 <__NVIC_SetPriority+0x4c>)
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	0112      	lsls	r2, r2, #4
 80013b8:	b2d2      	uxtb	r2, r2
 80013ba:	440b      	add	r3, r1
 80013bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013c0:	e00a      	b.n	80013d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	4908      	ldr	r1, [pc, #32]	@ (80013e8 <__NVIC_SetPriority+0x50>)
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	f003 030f 	and.w	r3, r3, #15
 80013ce:	3b04      	subs	r3, #4
 80013d0:	0112      	lsls	r2, r2, #4
 80013d2:	b2d2      	uxtb	r2, r2
 80013d4:	440b      	add	r3, r1
 80013d6:	761a      	strb	r2, [r3, #24]
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	e000e100 	.word	0xe000e100
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b089      	sub	sp, #36	@ 0x24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	f1c3 0307 	rsb	r3, r3, #7
 8001406:	2b04      	cmp	r3, #4
 8001408:	bf28      	it	cs
 800140a:	2304      	movcs	r3, #4
 800140c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	3304      	adds	r3, #4
 8001412:	2b06      	cmp	r3, #6
 8001414:	d902      	bls.n	800141c <NVIC_EncodePriority+0x30>
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	3b03      	subs	r3, #3
 800141a:	e000      	b.n	800141e <NVIC_EncodePriority+0x32>
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001420:	f04f 32ff 	mov.w	r2, #4294967295
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43da      	mvns	r2, r3
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	401a      	ands	r2, r3
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001434:	f04f 31ff 	mov.w	r1, #4294967295
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	fa01 f303 	lsl.w	r3, r1, r3
 800143e:	43d9      	mvns	r1, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001444:	4313      	orrs	r3, r2
         );
}
 8001446:	4618      	mov	r0, r3
 8001448:	3724      	adds	r7, #36	@ 0x24
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
	...

08001454 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3b01      	subs	r3, #1
 8001460:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001464:	d301      	bcc.n	800146a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001466:	2301      	movs	r3, #1
 8001468:	e00f      	b.n	800148a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800146a:	4a0a      	ldr	r2, [pc, #40]	@ (8001494 <SysTick_Config+0x40>)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3b01      	subs	r3, #1
 8001470:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001472:	210f      	movs	r1, #15
 8001474:	f04f 30ff 	mov.w	r0, #4294967295
 8001478:	f7ff ff8e 	bl	8001398 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800147c:	4b05      	ldr	r3, [pc, #20]	@ (8001494 <SysTick_Config+0x40>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001482:	4b04      	ldr	r3, [pc, #16]	@ (8001494 <SysTick_Config+0x40>)
 8001484:	2207      	movs	r2, #7
 8001486:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	e000e010 	.word	0xe000e010

08001498 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f7ff ff47 	bl	8001334 <__NVIC_SetPriorityGrouping>
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b086      	sub	sp, #24
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	4603      	mov	r3, r0
 80014b6:	60b9      	str	r1, [r7, #8]
 80014b8:	607a      	str	r2, [r7, #4]
 80014ba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014bc:	f7ff ff5e 	bl	800137c <__NVIC_GetPriorityGrouping>
 80014c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	68b9      	ldr	r1, [r7, #8]
 80014c6:	6978      	ldr	r0, [r7, #20]
 80014c8:	f7ff ff90 	bl	80013ec <NVIC_EncodePriority>
 80014cc:	4602      	mov	r2, r0
 80014ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d2:	4611      	mov	r1, r2
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff5f 	bl	8001398 <__NVIC_SetPriority>
}
 80014da:	bf00      	nop
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff ffb2 	bl	8001454 <SysTick_Config>
 80014f0:	4603      	mov	r3, r0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
	...

080014fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b087      	sub	sp, #28
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800150a:	e15a      	b.n	80017c2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	2101      	movs	r1, #1
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	fa01 f303 	lsl.w	r3, r1, r3
 8001518:	4013      	ands	r3, r2
 800151a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2b00      	cmp	r3, #0
 8001520:	f000 814c 	beq.w	80017bc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 0303 	and.w	r3, r3, #3
 800152c:	2b01      	cmp	r3, #1
 800152e:	d005      	beq.n	800153c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001538:	2b02      	cmp	r3, #2
 800153a:	d130      	bne.n	800159e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	2203      	movs	r2, #3
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4013      	ands	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	68da      	ldr	r2, [r3, #12]
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	4313      	orrs	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001572:	2201      	movs	r2, #1
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43db      	mvns	r3, r3
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	4013      	ands	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	091b      	lsrs	r3, r3, #4
 8001588:	f003 0201 	and.w	r2, r3, #1
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	4313      	orrs	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f003 0303 	and.w	r3, r3, #3
 80015a6:	2b03      	cmp	r3, #3
 80015a8:	d017      	beq.n	80015da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	2203      	movs	r2, #3
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43db      	mvns	r3, r3
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	4013      	ands	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	689a      	ldr	r2, [r3, #8]
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f003 0303 	and.w	r3, r3, #3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d123      	bne.n	800162e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	08da      	lsrs	r2, r3, #3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	3208      	adds	r2, #8
 80015ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	220f      	movs	r2, #15
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43db      	mvns	r3, r3
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	4013      	ands	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	691a      	ldr	r2, [r3, #16]
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	f003 0307 	and.w	r3, r3, #7
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	4313      	orrs	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	08da      	lsrs	r2, r3, #3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3208      	adds	r2, #8
 8001628:	6939      	ldr	r1, [r7, #16]
 800162a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	2203      	movs	r2, #3
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	43db      	mvns	r3, r3
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	4013      	ands	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f003 0203 	and.w	r2, r3, #3
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4313      	orrs	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800166a:	2b00      	cmp	r3, #0
 800166c:	f000 80a6 	beq.w	80017bc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001670:	4b5b      	ldr	r3, [pc, #364]	@ (80017e0 <HAL_GPIO_Init+0x2e4>)
 8001672:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001674:	4a5a      	ldr	r2, [pc, #360]	@ (80017e0 <HAL_GPIO_Init+0x2e4>)
 8001676:	f043 0301 	orr.w	r3, r3, #1
 800167a:	6613      	str	r3, [r2, #96]	@ 0x60
 800167c:	4b58      	ldr	r3, [pc, #352]	@ (80017e0 <HAL_GPIO_Init+0x2e4>)
 800167e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	60bb      	str	r3, [r7, #8]
 8001686:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001688:	4a56      	ldr	r2, [pc, #344]	@ (80017e4 <HAL_GPIO_Init+0x2e8>)
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	089b      	lsrs	r3, r3, #2
 800168e:	3302      	adds	r3, #2
 8001690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001694:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	f003 0303 	and.w	r3, r3, #3
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	220f      	movs	r2, #15
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	4013      	ands	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80016b2:	d01f      	beq.n	80016f4 <HAL_GPIO_Init+0x1f8>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4a4c      	ldr	r2, [pc, #304]	@ (80017e8 <HAL_GPIO_Init+0x2ec>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d019      	beq.n	80016f0 <HAL_GPIO_Init+0x1f4>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4a4b      	ldr	r2, [pc, #300]	@ (80017ec <HAL_GPIO_Init+0x2f0>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d013      	beq.n	80016ec <HAL_GPIO_Init+0x1f0>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4a4a      	ldr	r2, [pc, #296]	@ (80017f0 <HAL_GPIO_Init+0x2f4>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d00d      	beq.n	80016e8 <HAL_GPIO_Init+0x1ec>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4a49      	ldr	r2, [pc, #292]	@ (80017f4 <HAL_GPIO_Init+0x2f8>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d007      	beq.n	80016e4 <HAL_GPIO_Init+0x1e8>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4a48      	ldr	r2, [pc, #288]	@ (80017f8 <HAL_GPIO_Init+0x2fc>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d101      	bne.n	80016e0 <HAL_GPIO_Init+0x1e4>
 80016dc:	2305      	movs	r3, #5
 80016de:	e00a      	b.n	80016f6 <HAL_GPIO_Init+0x1fa>
 80016e0:	2306      	movs	r3, #6
 80016e2:	e008      	b.n	80016f6 <HAL_GPIO_Init+0x1fa>
 80016e4:	2304      	movs	r3, #4
 80016e6:	e006      	b.n	80016f6 <HAL_GPIO_Init+0x1fa>
 80016e8:	2303      	movs	r3, #3
 80016ea:	e004      	b.n	80016f6 <HAL_GPIO_Init+0x1fa>
 80016ec:	2302      	movs	r3, #2
 80016ee:	e002      	b.n	80016f6 <HAL_GPIO_Init+0x1fa>
 80016f0:	2301      	movs	r3, #1
 80016f2:	e000      	b.n	80016f6 <HAL_GPIO_Init+0x1fa>
 80016f4:	2300      	movs	r3, #0
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	f002 0203 	and.w	r2, r2, #3
 80016fc:	0092      	lsls	r2, r2, #2
 80016fe:	4093      	lsls	r3, r2
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	4313      	orrs	r3, r2
 8001704:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001706:	4937      	ldr	r1, [pc, #220]	@ (80017e4 <HAL_GPIO_Init+0x2e8>)
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	089b      	lsrs	r3, r3, #2
 800170c:	3302      	adds	r3, #2
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001714:	4b39      	ldr	r3, [pc, #228]	@ (80017fc <HAL_GPIO_Init+0x300>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	43db      	mvns	r3, r3
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	4013      	ands	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d003      	beq.n	8001738 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	4313      	orrs	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001738:	4a30      	ldr	r2, [pc, #192]	@ (80017fc <HAL_GPIO_Init+0x300>)
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800173e:	4b2f      	ldr	r3, [pc, #188]	@ (80017fc <HAL_GPIO_Init+0x300>)
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	43db      	mvns	r3, r3
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	4013      	ands	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4313      	orrs	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001762:	4a26      	ldr	r2, [pc, #152]	@ (80017fc <HAL_GPIO_Init+0x300>)
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001768:	4b24      	ldr	r3, [pc, #144]	@ (80017fc <HAL_GPIO_Init+0x300>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	43db      	mvns	r3, r3
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	4013      	ands	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d003      	beq.n	800178c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	4313      	orrs	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800178c:	4a1b      	ldr	r2, [pc, #108]	@ (80017fc <HAL_GPIO_Init+0x300>)
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001792:	4b1a      	ldr	r3, [pc, #104]	@ (80017fc <HAL_GPIO_Init+0x300>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	43db      	mvns	r3, r3
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	4013      	ands	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d003      	beq.n	80017b6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017b6:	4a11      	ldr	r2, [pc, #68]	@ (80017fc <HAL_GPIO_Init+0x300>)
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	3301      	adds	r3, #1
 80017c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	fa22 f303 	lsr.w	r3, r2, r3
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f47f ae9d 	bne.w	800150c <HAL_GPIO_Init+0x10>
  }
}
 80017d2:	bf00      	nop
 80017d4:	bf00      	nop
 80017d6:	371c      	adds	r7, #28
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	40021000 	.word	0x40021000
 80017e4:	40010000 	.word	0x40010000
 80017e8:	48000400 	.word	0x48000400
 80017ec:	48000800 	.word	0x48000800
 80017f0:	48000c00 	.word	0x48000c00
 80017f4:	48001000 	.word	0x48001000
 80017f8:	48001400 	.word	0x48001400
 80017fc:	40010400 	.word	0x40010400

08001800 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	460b      	mov	r3, r1
 800180a:	807b      	strh	r3, [r7, #2]
 800180c:	4613      	mov	r3, r2
 800180e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001810:	787b      	ldrb	r3, [r7, #1]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001816:	887a      	ldrh	r2, [r7, #2]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800181c:	e002      	b.n	8001824 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800181e:	887a      	ldrh	r2, [r7, #2]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	460b      	mov	r3, r1
 800183a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	695b      	ldr	r3, [r3, #20]
 8001840:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001842:	887a      	ldrh	r2, [r7, #2]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	4013      	ands	r3, r2
 8001848:	041a      	lsls	r2, r3, #16
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	43d9      	mvns	r1, r3
 800184e:	887b      	ldrh	r3, [r7, #2]
 8001850:	400b      	ands	r3, r1
 8001852:	431a      	orrs	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	619a      	str	r2, [r3, #24]
}
 8001858:	bf00      	nop
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d141      	bne.n	80018f6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001872:	4b4b      	ldr	r3, [pc, #300]	@ (80019a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800187a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800187e:	d131      	bne.n	80018e4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001880:	4b47      	ldr	r3, [pc, #284]	@ (80019a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001882:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001886:	4a46      	ldr	r2, [pc, #280]	@ (80019a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001888:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800188c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001890:	4b43      	ldr	r3, [pc, #268]	@ (80019a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001898:	4a41      	ldr	r2, [pc, #260]	@ (80019a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800189a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800189e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018a0:	4b40      	ldr	r3, [pc, #256]	@ (80019a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2232      	movs	r2, #50	@ 0x32
 80018a6:	fb02 f303 	mul.w	r3, r2, r3
 80018aa:	4a3f      	ldr	r2, [pc, #252]	@ (80019a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80018ac:	fba2 2303 	umull	r2, r3, r2, r3
 80018b0:	0c9b      	lsrs	r3, r3, #18
 80018b2:	3301      	adds	r3, #1
 80018b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018b6:	e002      	b.n	80018be <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	3b01      	subs	r3, #1
 80018bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018be:	4b38      	ldr	r3, [pc, #224]	@ (80019a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018ca:	d102      	bne.n	80018d2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f2      	bne.n	80018b8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018d2:	4b33      	ldr	r3, [pc, #204]	@ (80019a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018d4:	695b      	ldr	r3, [r3, #20]
 80018d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018de:	d158      	bne.n	8001992 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e057      	b.n	8001994 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018e4:	4b2e      	ldr	r3, [pc, #184]	@ (80019a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80018ea:	4a2d      	ldr	r2, [pc, #180]	@ (80019a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80018f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80018f4:	e04d      	b.n	8001992 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80018fc:	d141      	bne.n	8001982 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80018fe:	4b28      	ldr	r3, [pc, #160]	@ (80019a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001906:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800190a:	d131      	bne.n	8001970 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800190c:	4b24      	ldr	r3, [pc, #144]	@ (80019a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800190e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001912:	4a23      	ldr	r2, [pc, #140]	@ (80019a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001914:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001918:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800191c:	4b20      	ldr	r3, [pc, #128]	@ (80019a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001924:	4a1e      	ldr	r2, [pc, #120]	@ (80019a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001926:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800192a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800192c:	4b1d      	ldr	r3, [pc, #116]	@ (80019a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2232      	movs	r2, #50	@ 0x32
 8001932:	fb02 f303 	mul.w	r3, r2, r3
 8001936:	4a1c      	ldr	r2, [pc, #112]	@ (80019a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001938:	fba2 2303 	umull	r2, r3, r2, r3
 800193c:	0c9b      	lsrs	r3, r3, #18
 800193e:	3301      	adds	r3, #1
 8001940:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001942:	e002      	b.n	800194a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	3b01      	subs	r3, #1
 8001948:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800194a:	4b15      	ldr	r3, [pc, #84]	@ (80019a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001952:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001956:	d102      	bne.n	800195e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1f2      	bne.n	8001944 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800195e:	4b10      	ldr	r3, [pc, #64]	@ (80019a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001966:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800196a:	d112      	bne.n	8001992 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e011      	b.n	8001994 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001970:	4b0b      	ldr	r3, [pc, #44]	@ (80019a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001972:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001976:	4a0a      	ldr	r2, [pc, #40]	@ (80019a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001978:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800197c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001980:	e007      	b.n	8001992 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001982:	4b07      	ldr	r3, [pc, #28]	@ (80019a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800198a:	4a05      	ldr	r2, [pc, #20]	@ (80019a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800198c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001990:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	40007000 	.word	0x40007000
 80019a4:	20000008 	.word	0x20000008
 80019a8:	431bde83 	.word	0x431bde83

080019ac <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80019b0:	4b05      	ldr	r3, [pc, #20]	@ (80019c8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	4a04      	ldr	r2, [pc, #16]	@ (80019c8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80019b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019ba:	6093      	str	r3, [r2, #8]
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	40007000 	.word	0x40007000

080019cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b088      	sub	sp, #32
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e2fe      	b.n	8001fdc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d075      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019ea:	4b97      	ldr	r3, [pc, #604]	@ (8001c48 <HAL_RCC_OscConfig+0x27c>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 030c 	and.w	r3, r3, #12
 80019f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019f4:	4b94      	ldr	r3, [pc, #592]	@ (8001c48 <HAL_RCC_OscConfig+0x27c>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	f003 0303 	and.w	r3, r3, #3
 80019fc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	2b0c      	cmp	r3, #12
 8001a02:	d102      	bne.n	8001a0a <HAL_RCC_OscConfig+0x3e>
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	2b03      	cmp	r3, #3
 8001a08:	d002      	beq.n	8001a10 <HAL_RCC_OscConfig+0x44>
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	2b08      	cmp	r3, #8
 8001a0e:	d10b      	bne.n	8001a28 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a10:	4b8d      	ldr	r3, [pc, #564]	@ (8001c48 <HAL_RCC_OscConfig+0x27c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d05b      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x108>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d157      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e2d9      	b.n	8001fdc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a30:	d106      	bne.n	8001a40 <HAL_RCC_OscConfig+0x74>
 8001a32:	4b85      	ldr	r3, [pc, #532]	@ (8001c48 <HAL_RCC_OscConfig+0x27c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a84      	ldr	r2, [pc, #528]	@ (8001c48 <HAL_RCC_OscConfig+0x27c>)
 8001a38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a3c:	6013      	str	r3, [r2, #0]
 8001a3e:	e01d      	b.n	8001a7c <HAL_RCC_OscConfig+0xb0>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a48:	d10c      	bne.n	8001a64 <HAL_RCC_OscConfig+0x98>
 8001a4a:	4b7f      	ldr	r3, [pc, #508]	@ (8001c48 <HAL_RCC_OscConfig+0x27c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a7e      	ldr	r2, [pc, #504]	@ (8001c48 <HAL_RCC_OscConfig+0x27c>)
 8001a50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a54:	6013      	str	r3, [r2, #0]
 8001a56:	4b7c      	ldr	r3, [pc, #496]	@ (8001c48 <HAL_RCC_OscConfig+0x27c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a7b      	ldr	r2, [pc, #492]	@ (8001c48 <HAL_RCC_OscConfig+0x27c>)
 8001a5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a60:	6013      	str	r3, [r2, #0]
 8001a62:	e00b      	b.n	8001a7c <HAL_RCC_OscConfig+0xb0>
 8001a64:	4b78      	ldr	r3, [pc, #480]	@ (8001c48 <HAL_RCC_OscConfig+0x27c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a77      	ldr	r2, [pc, #476]	@ (8001c48 <HAL_RCC_OscConfig+0x27c>)
 8001a6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a6e:	6013      	str	r3, [r2, #0]
 8001a70:	4b75      	ldr	r3, [pc, #468]	@ (8001c48 <HAL_RCC_OscConfig+0x27c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a74      	ldr	r2, [pc, #464]	@ (8001c48 <HAL_RCC_OscConfig+0x27c>)
 8001a76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d013      	beq.n	8001aac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a84:	f7ff fc28 	bl	80012d8 <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a8c:	f7ff fc24 	bl	80012d8 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b64      	cmp	r3, #100	@ 0x64
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e29e      	b.n	8001fdc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a9e:	4b6a      	ldr	r3, [pc, #424]	@ (8001c48 <HAL_RCC_OscConfig+0x27c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d0f0      	beq.n	8001a8c <HAL_RCC_OscConfig+0xc0>
 8001aaa:	e014      	b.n	8001ad6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aac:	f7ff fc14 	bl	80012d8 <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ab4:	f7ff fc10 	bl	80012d8 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b64      	cmp	r3, #100	@ 0x64
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e28a      	b.n	8001fdc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ac6:	4b60      	ldr	r3, [pc, #384]	@ (8001c48 <HAL_RCC_OscConfig+0x27c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1f0      	bne.n	8001ab4 <HAL_RCC_OscConfig+0xe8>
 8001ad2:	e000      	b.n	8001ad6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d075      	beq.n	8001bce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ae2:	4b59      	ldr	r3, [pc, #356]	@ (8001c48 <HAL_RCC_OscConfig+0x27c>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f003 030c 	and.w	r3, r3, #12
 8001aea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001aec:	4b56      	ldr	r3, [pc, #344]	@ (8001c48 <HAL_RCC_OscConfig+0x27c>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	f003 0303 	and.w	r3, r3, #3
 8001af4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	2b0c      	cmp	r3, #12
 8001afa:	d102      	bne.n	8001b02 <HAL_RCC_OscConfig+0x136>
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d002      	beq.n	8001b08 <HAL_RCC_OscConfig+0x13c>
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	2b04      	cmp	r3, #4
 8001b06:	d11f      	bne.n	8001b48 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b08:	4b4f      	ldr	r3, [pc, #316]	@ (8001c48 <HAL_RCC_OscConfig+0x27c>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d005      	beq.n	8001b20 <HAL_RCC_OscConfig+0x154>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d101      	bne.n	8001b20 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e25d      	b.n	8001fdc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b20:	4b49      	ldr	r3, [pc, #292]	@ (8001c48 <HAL_RCC_OscConfig+0x27c>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	061b      	lsls	r3, r3, #24
 8001b2e:	4946      	ldr	r1, [pc, #280]	@ (8001c48 <HAL_RCC_OscConfig+0x27c>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001b34:	4b45      	ldr	r3, [pc, #276]	@ (8001c4c <HAL_RCC_OscConfig+0x280>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff fb81 	bl	8001240 <HAL_InitTick>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d043      	beq.n	8001bcc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e249      	b.n	8001fdc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d023      	beq.n	8001b98 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b50:	4b3d      	ldr	r3, [pc, #244]	@ (8001c48 <HAL_RCC_OscConfig+0x27c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a3c      	ldr	r2, [pc, #240]	@ (8001c48 <HAL_RCC_OscConfig+0x27c>)
 8001b56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5c:	f7ff fbbc 	bl	80012d8 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b64:	f7ff fbb8 	bl	80012d8 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e232      	b.n	8001fdc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b76:	4b34      	ldr	r3, [pc, #208]	@ (8001c48 <HAL_RCC_OscConfig+0x27c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d0f0      	beq.n	8001b64 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b82:	4b31      	ldr	r3, [pc, #196]	@ (8001c48 <HAL_RCC_OscConfig+0x27c>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	061b      	lsls	r3, r3, #24
 8001b90:	492d      	ldr	r1, [pc, #180]	@ (8001c48 <HAL_RCC_OscConfig+0x27c>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	604b      	str	r3, [r1, #4]
 8001b96:	e01a      	b.n	8001bce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b98:	4b2b      	ldr	r3, [pc, #172]	@ (8001c48 <HAL_RCC_OscConfig+0x27c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a2a      	ldr	r2, [pc, #168]	@ (8001c48 <HAL_RCC_OscConfig+0x27c>)
 8001b9e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ba2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba4:	f7ff fb98 	bl	80012d8 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bac:	f7ff fb94 	bl	80012d8 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e20e      	b.n	8001fdc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bbe:	4b22      	ldr	r3, [pc, #136]	@ (8001c48 <HAL_RCC_OscConfig+0x27c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1f0      	bne.n	8001bac <HAL_RCC_OscConfig+0x1e0>
 8001bca:	e000      	b.n	8001bce <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bcc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d041      	beq.n	8001c5e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d01c      	beq.n	8001c1c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001be2:	4b19      	ldr	r3, [pc, #100]	@ (8001c48 <HAL_RCC_OscConfig+0x27c>)
 8001be4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001be8:	4a17      	ldr	r2, [pc, #92]	@ (8001c48 <HAL_RCC_OscConfig+0x27c>)
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf2:	f7ff fb71 	bl	80012d8 <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bfa:	f7ff fb6d 	bl	80012d8 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e1e7      	b.n	8001fdc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c0c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c48 <HAL_RCC_OscConfig+0x27c>)
 8001c0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0ef      	beq.n	8001bfa <HAL_RCC_OscConfig+0x22e>
 8001c1a:	e020      	b.n	8001c5e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c48 <HAL_RCC_OscConfig+0x27c>)
 8001c1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c22:	4a09      	ldr	r2, [pc, #36]	@ (8001c48 <HAL_RCC_OscConfig+0x27c>)
 8001c24:	f023 0301 	bic.w	r3, r3, #1
 8001c28:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c2c:	f7ff fb54 	bl	80012d8 <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c32:	e00d      	b.n	8001c50 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c34:	f7ff fb50 	bl	80012d8 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d906      	bls.n	8001c50 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e1ca      	b.n	8001fdc <HAL_RCC_OscConfig+0x610>
 8001c46:	bf00      	nop
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c50:	4b8c      	ldr	r3, [pc, #560]	@ (8001e84 <HAL_RCC_OscConfig+0x4b8>)
 8001c52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1ea      	bne.n	8001c34 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0304 	and.w	r3, r3, #4
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f000 80a6 	beq.w	8001db8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001c70:	4b84      	ldr	r3, [pc, #528]	@ (8001e84 <HAL_RCC_OscConfig+0x4b8>)
 8001c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d101      	bne.n	8001c80 <HAL_RCC_OscConfig+0x2b4>
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e000      	b.n	8001c82 <HAL_RCC_OscConfig+0x2b6>
 8001c80:	2300      	movs	r3, #0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00d      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c86:	4b7f      	ldr	r3, [pc, #508]	@ (8001e84 <HAL_RCC_OscConfig+0x4b8>)
 8001c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c8a:	4a7e      	ldr	r2, [pc, #504]	@ (8001e84 <HAL_RCC_OscConfig+0x4b8>)
 8001c8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c90:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c92:	4b7c      	ldr	r3, [pc, #496]	@ (8001e84 <HAL_RCC_OscConfig+0x4b8>)
 8001c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ca2:	4b79      	ldr	r3, [pc, #484]	@ (8001e88 <HAL_RCC_OscConfig+0x4bc>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d118      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cae:	4b76      	ldr	r3, [pc, #472]	@ (8001e88 <HAL_RCC_OscConfig+0x4bc>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a75      	ldr	r2, [pc, #468]	@ (8001e88 <HAL_RCC_OscConfig+0x4bc>)
 8001cb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cba:	f7ff fb0d 	bl	80012d8 <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cc2:	f7ff fb09 	bl	80012d8 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e183      	b.n	8001fdc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cd4:	4b6c      	ldr	r3, [pc, #432]	@ (8001e88 <HAL_RCC_OscConfig+0x4bc>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d0f0      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d108      	bne.n	8001cfa <HAL_RCC_OscConfig+0x32e>
 8001ce8:	4b66      	ldr	r3, [pc, #408]	@ (8001e84 <HAL_RCC_OscConfig+0x4b8>)
 8001cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cee:	4a65      	ldr	r2, [pc, #404]	@ (8001e84 <HAL_RCC_OscConfig+0x4b8>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001cf8:	e024      	b.n	8001d44 <HAL_RCC_OscConfig+0x378>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	2b05      	cmp	r3, #5
 8001d00:	d110      	bne.n	8001d24 <HAL_RCC_OscConfig+0x358>
 8001d02:	4b60      	ldr	r3, [pc, #384]	@ (8001e84 <HAL_RCC_OscConfig+0x4b8>)
 8001d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d08:	4a5e      	ldr	r2, [pc, #376]	@ (8001e84 <HAL_RCC_OscConfig+0x4b8>)
 8001d0a:	f043 0304 	orr.w	r3, r3, #4
 8001d0e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d12:	4b5c      	ldr	r3, [pc, #368]	@ (8001e84 <HAL_RCC_OscConfig+0x4b8>)
 8001d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d18:	4a5a      	ldr	r2, [pc, #360]	@ (8001e84 <HAL_RCC_OscConfig+0x4b8>)
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d22:	e00f      	b.n	8001d44 <HAL_RCC_OscConfig+0x378>
 8001d24:	4b57      	ldr	r3, [pc, #348]	@ (8001e84 <HAL_RCC_OscConfig+0x4b8>)
 8001d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d2a:	4a56      	ldr	r2, [pc, #344]	@ (8001e84 <HAL_RCC_OscConfig+0x4b8>)
 8001d2c:	f023 0301 	bic.w	r3, r3, #1
 8001d30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d34:	4b53      	ldr	r3, [pc, #332]	@ (8001e84 <HAL_RCC_OscConfig+0x4b8>)
 8001d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d3a:	4a52      	ldr	r2, [pc, #328]	@ (8001e84 <HAL_RCC_OscConfig+0x4b8>)
 8001d3c:	f023 0304 	bic.w	r3, r3, #4
 8001d40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d016      	beq.n	8001d7a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d4c:	f7ff fac4 	bl	80012d8 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d52:	e00a      	b.n	8001d6a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d54:	f7ff fac0 	bl	80012d8 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e138      	b.n	8001fdc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d6a:	4b46      	ldr	r3, [pc, #280]	@ (8001e84 <HAL_RCC_OscConfig+0x4b8>)
 8001d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d0ed      	beq.n	8001d54 <HAL_RCC_OscConfig+0x388>
 8001d78:	e015      	b.n	8001da6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d7a:	f7ff faad 	bl	80012d8 <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d80:	e00a      	b.n	8001d98 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d82:	f7ff faa9 	bl	80012d8 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e121      	b.n	8001fdc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d98:	4b3a      	ldr	r3, [pc, #232]	@ (8001e84 <HAL_RCC_OscConfig+0x4b8>)
 8001d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1ed      	bne.n	8001d82 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001da6:	7ffb      	ldrb	r3, [r7, #31]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d105      	bne.n	8001db8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dac:	4b35      	ldr	r3, [pc, #212]	@ (8001e84 <HAL_RCC_OscConfig+0x4b8>)
 8001dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db0:	4a34      	ldr	r2, [pc, #208]	@ (8001e84 <HAL_RCC_OscConfig+0x4b8>)
 8001db2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001db6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0320 	and.w	r3, r3, #32
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d03c      	beq.n	8001e3e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d01c      	beq.n	8001e06 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001dcc:	4b2d      	ldr	r3, [pc, #180]	@ (8001e84 <HAL_RCC_OscConfig+0x4b8>)
 8001dce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001dd2:	4a2c      	ldr	r2, [pc, #176]	@ (8001e84 <HAL_RCC_OscConfig+0x4b8>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ddc:	f7ff fa7c 	bl	80012d8 <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001de4:	f7ff fa78 	bl	80012d8 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e0f2      	b.n	8001fdc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001df6:	4b23      	ldr	r3, [pc, #140]	@ (8001e84 <HAL_RCC_OscConfig+0x4b8>)
 8001df8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0ef      	beq.n	8001de4 <HAL_RCC_OscConfig+0x418>
 8001e04:	e01b      	b.n	8001e3e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e06:	4b1f      	ldr	r3, [pc, #124]	@ (8001e84 <HAL_RCC_OscConfig+0x4b8>)
 8001e08:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001e0c:	4a1d      	ldr	r2, [pc, #116]	@ (8001e84 <HAL_RCC_OscConfig+0x4b8>)
 8001e0e:	f023 0301 	bic.w	r3, r3, #1
 8001e12:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e16:	f7ff fa5f 	bl	80012d8 <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e1e:	f7ff fa5b 	bl	80012d8 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e0d5      	b.n	8001fdc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e30:	4b14      	ldr	r3, [pc, #80]	@ (8001e84 <HAL_RCC_OscConfig+0x4b8>)
 8001e32:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1ef      	bne.n	8001e1e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f000 80c9 	beq.w	8001fda <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e48:	4b0e      	ldr	r3, [pc, #56]	@ (8001e84 <HAL_RCC_OscConfig+0x4b8>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f003 030c 	and.w	r3, r3, #12
 8001e50:	2b0c      	cmp	r3, #12
 8001e52:	f000 8083 	beq.w	8001f5c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d15e      	bne.n	8001f1c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e5e:	4b09      	ldr	r3, [pc, #36]	@ (8001e84 <HAL_RCC_OscConfig+0x4b8>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a08      	ldr	r2, [pc, #32]	@ (8001e84 <HAL_RCC_OscConfig+0x4b8>)
 8001e64:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6a:	f7ff fa35 	bl	80012d8 <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e70:	e00c      	b.n	8001e8c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e72:	f7ff fa31 	bl	80012d8 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d905      	bls.n	8001e8c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e0ab      	b.n	8001fdc <HAL_RCC_OscConfig+0x610>
 8001e84:	40021000 	.word	0x40021000
 8001e88:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e8c:	4b55      	ldr	r3, [pc, #340]	@ (8001fe4 <HAL_RCC_OscConfig+0x618>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1ec      	bne.n	8001e72 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e98:	4b52      	ldr	r3, [pc, #328]	@ (8001fe4 <HAL_RCC_OscConfig+0x618>)
 8001e9a:	68da      	ldr	r2, [r3, #12]
 8001e9c:	4b52      	ldr	r3, [pc, #328]	@ (8001fe8 <HAL_RCC_OscConfig+0x61c>)
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	6a11      	ldr	r1, [r2, #32]
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ea8:	3a01      	subs	r2, #1
 8001eaa:	0112      	lsls	r2, r2, #4
 8001eac:	4311      	orrs	r1, r2
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001eb2:	0212      	lsls	r2, r2, #8
 8001eb4:	4311      	orrs	r1, r2
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001eba:	0852      	lsrs	r2, r2, #1
 8001ebc:	3a01      	subs	r2, #1
 8001ebe:	0552      	lsls	r2, r2, #21
 8001ec0:	4311      	orrs	r1, r2
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001ec6:	0852      	lsrs	r2, r2, #1
 8001ec8:	3a01      	subs	r2, #1
 8001eca:	0652      	lsls	r2, r2, #25
 8001ecc:	4311      	orrs	r1, r2
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001ed2:	06d2      	lsls	r2, r2, #27
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	4943      	ldr	r1, [pc, #268]	@ (8001fe4 <HAL_RCC_OscConfig+0x618>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001edc:	4b41      	ldr	r3, [pc, #260]	@ (8001fe4 <HAL_RCC_OscConfig+0x618>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a40      	ldr	r2, [pc, #256]	@ (8001fe4 <HAL_RCC_OscConfig+0x618>)
 8001ee2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ee6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ee8:	4b3e      	ldr	r3, [pc, #248]	@ (8001fe4 <HAL_RCC_OscConfig+0x618>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	4a3d      	ldr	r2, [pc, #244]	@ (8001fe4 <HAL_RCC_OscConfig+0x618>)
 8001eee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ef2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef4:	f7ff f9f0 	bl	80012d8 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001efc:	f7ff f9ec 	bl	80012d8 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e066      	b.n	8001fdc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f0e:	4b35      	ldr	r3, [pc, #212]	@ (8001fe4 <HAL_RCC_OscConfig+0x618>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d0f0      	beq.n	8001efc <HAL_RCC_OscConfig+0x530>
 8001f1a:	e05e      	b.n	8001fda <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f1c:	4b31      	ldr	r3, [pc, #196]	@ (8001fe4 <HAL_RCC_OscConfig+0x618>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a30      	ldr	r2, [pc, #192]	@ (8001fe4 <HAL_RCC_OscConfig+0x618>)
 8001f22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f28:	f7ff f9d6 	bl	80012d8 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f30:	f7ff f9d2 	bl	80012d8 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e04c      	b.n	8001fdc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f42:	4b28      	ldr	r3, [pc, #160]	@ (8001fe4 <HAL_RCC_OscConfig+0x618>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1f0      	bne.n	8001f30 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001f4e:	4b25      	ldr	r3, [pc, #148]	@ (8001fe4 <HAL_RCC_OscConfig+0x618>)
 8001f50:	68da      	ldr	r2, [r3, #12]
 8001f52:	4924      	ldr	r1, [pc, #144]	@ (8001fe4 <HAL_RCC_OscConfig+0x618>)
 8001f54:	4b25      	ldr	r3, [pc, #148]	@ (8001fec <HAL_RCC_OscConfig+0x620>)
 8001f56:	4013      	ands	r3, r2
 8001f58:	60cb      	str	r3, [r1, #12]
 8001f5a:	e03e      	b.n	8001fda <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	69db      	ldr	r3, [r3, #28]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d101      	bne.n	8001f68 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e039      	b.n	8001fdc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001f68:	4b1e      	ldr	r3, [pc, #120]	@ (8001fe4 <HAL_RCC_OscConfig+0x618>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f003 0203 	and.w	r2, r3, #3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d12c      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f86:	3b01      	subs	r3, #1
 8001f88:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d123      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f98:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d11b      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fa8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d113      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb8:	085b      	lsrs	r3, r3, #1
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d109      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fcc:	085b      	lsrs	r3, r3, #1
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d001      	beq.n	8001fda <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e000      	b.n	8001fdc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3720      	adds	r7, #32
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	019f800c 	.word	0x019f800c
 8001fec:	feeefffc 	.word	0xfeeefffc

08001ff0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e11e      	b.n	8002246 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002008:	4b91      	ldr	r3, [pc, #580]	@ (8002250 <HAL_RCC_ClockConfig+0x260>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 030f 	and.w	r3, r3, #15
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	429a      	cmp	r2, r3
 8002014:	d910      	bls.n	8002038 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002016:	4b8e      	ldr	r3, [pc, #568]	@ (8002250 <HAL_RCC_ClockConfig+0x260>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f023 020f 	bic.w	r2, r3, #15
 800201e:	498c      	ldr	r1, [pc, #560]	@ (8002250 <HAL_RCC_ClockConfig+0x260>)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	4313      	orrs	r3, r2
 8002024:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002026:	4b8a      	ldr	r3, [pc, #552]	@ (8002250 <HAL_RCC_ClockConfig+0x260>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 030f 	and.w	r3, r3, #15
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	429a      	cmp	r2, r3
 8002032:	d001      	beq.n	8002038 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e106      	b.n	8002246 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	2b00      	cmp	r3, #0
 8002042:	d073      	beq.n	800212c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	2b03      	cmp	r3, #3
 800204a:	d129      	bne.n	80020a0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800204c:	4b81      	ldr	r3, [pc, #516]	@ (8002254 <HAL_RCC_ClockConfig+0x264>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d101      	bne.n	800205c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e0f4      	b.n	8002246 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800205c:	f000 f99e 	bl	800239c <RCC_GetSysClockFreqFromPLLSource>
 8002060:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	4a7c      	ldr	r2, [pc, #496]	@ (8002258 <HAL_RCC_ClockConfig+0x268>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d93f      	bls.n	80020ea <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800206a:	4b7a      	ldr	r3, [pc, #488]	@ (8002254 <HAL_RCC_ClockConfig+0x264>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d009      	beq.n	800208a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800207e:	2b00      	cmp	r3, #0
 8002080:	d033      	beq.n	80020ea <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002086:	2b00      	cmp	r3, #0
 8002088:	d12f      	bne.n	80020ea <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800208a:	4b72      	ldr	r3, [pc, #456]	@ (8002254 <HAL_RCC_ClockConfig+0x264>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002092:	4a70      	ldr	r2, [pc, #448]	@ (8002254 <HAL_RCC_ClockConfig+0x264>)
 8002094:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002098:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800209a:	2380      	movs	r3, #128	@ 0x80
 800209c:	617b      	str	r3, [r7, #20]
 800209e:	e024      	b.n	80020ea <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d107      	bne.n	80020b8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020a8:	4b6a      	ldr	r3, [pc, #424]	@ (8002254 <HAL_RCC_ClockConfig+0x264>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d109      	bne.n	80020c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e0c6      	b.n	8002246 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020b8:	4b66      	ldr	r3, [pc, #408]	@ (8002254 <HAL_RCC_ClockConfig+0x264>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d101      	bne.n	80020c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e0be      	b.n	8002246 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80020c8:	f000 f8ce 	bl	8002268 <HAL_RCC_GetSysClockFreq>
 80020cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	4a61      	ldr	r2, [pc, #388]	@ (8002258 <HAL_RCC_ClockConfig+0x268>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d909      	bls.n	80020ea <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80020d6:	4b5f      	ldr	r3, [pc, #380]	@ (8002254 <HAL_RCC_ClockConfig+0x264>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80020de:	4a5d      	ldr	r2, [pc, #372]	@ (8002254 <HAL_RCC_ClockConfig+0x264>)
 80020e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020e4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80020e6:	2380      	movs	r3, #128	@ 0x80
 80020e8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020ea:	4b5a      	ldr	r3, [pc, #360]	@ (8002254 <HAL_RCC_ClockConfig+0x264>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f023 0203 	bic.w	r2, r3, #3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	4957      	ldr	r1, [pc, #348]	@ (8002254 <HAL_RCC_ClockConfig+0x264>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020fc:	f7ff f8ec 	bl	80012d8 <HAL_GetTick>
 8002100:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002102:	e00a      	b.n	800211a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002104:	f7ff f8e8 	bl	80012d8 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002112:	4293      	cmp	r3, r2
 8002114:	d901      	bls.n	800211a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e095      	b.n	8002246 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800211a:	4b4e      	ldr	r3, [pc, #312]	@ (8002254 <HAL_RCC_ClockConfig+0x264>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f003 020c 	and.w	r2, r3, #12
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	429a      	cmp	r2, r3
 800212a:	d1eb      	bne.n	8002104 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d023      	beq.n	8002180 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	2b00      	cmp	r3, #0
 8002142:	d005      	beq.n	8002150 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002144:	4b43      	ldr	r3, [pc, #268]	@ (8002254 <HAL_RCC_ClockConfig+0x264>)
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	4a42      	ldr	r2, [pc, #264]	@ (8002254 <HAL_RCC_ClockConfig+0x264>)
 800214a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800214e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0308 	and.w	r3, r3, #8
 8002158:	2b00      	cmp	r3, #0
 800215a:	d007      	beq.n	800216c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800215c:	4b3d      	ldr	r3, [pc, #244]	@ (8002254 <HAL_RCC_ClockConfig+0x264>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002164:	4a3b      	ldr	r2, [pc, #236]	@ (8002254 <HAL_RCC_ClockConfig+0x264>)
 8002166:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800216a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800216c:	4b39      	ldr	r3, [pc, #228]	@ (8002254 <HAL_RCC_ClockConfig+0x264>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	4936      	ldr	r1, [pc, #216]	@ (8002254 <HAL_RCC_ClockConfig+0x264>)
 800217a:	4313      	orrs	r3, r2
 800217c:	608b      	str	r3, [r1, #8]
 800217e:	e008      	b.n	8002192 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	2b80      	cmp	r3, #128	@ 0x80
 8002184:	d105      	bne.n	8002192 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002186:	4b33      	ldr	r3, [pc, #204]	@ (8002254 <HAL_RCC_ClockConfig+0x264>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	4a32      	ldr	r2, [pc, #200]	@ (8002254 <HAL_RCC_ClockConfig+0x264>)
 800218c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002190:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002192:	4b2f      	ldr	r3, [pc, #188]	@ (8002250 <HAL_RCC_ClockConfig+0x260>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 030f 	and.w	r3, r3, #15
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	429a      	cmp	r2, r3
 800219e:	d21d      	bcs.n	80021dc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021a0:	4b2b      	ldr	r3, [pc, #172]	@ (8002250 <HAL_RCC_ClockConfig+0x260>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f023 020f 	bic.w	r2, r3, #15
 80021a8:	4929      	ldr	r1, [pc, #164]	@ (8002250 <HAL_RCC_ClockConfig+0x260>)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80021b0:	f7ff f892 	bl	80012d8 <HAL_GetTick>
 80021b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021b6:	e00a      	b.n	80021ce <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b8:	f7ff f88e 	bl	80012d8 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e03b      	b.n	8002246 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ce:	4b20      	ldr	r3, [pc, #128]	@ (8002250 <HAL_RCC_ClockConfig+0x260>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 030f 	and.w	r3, r3, #15
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d1ed      	bne.n	80021b8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d008      	beq.n	80021fa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002254 <HAL_RCC_ClockConfig+0x264>)
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	4917      	ldr	r1, [pc, #92]	@ (8002254 <HAL_RCC_ClockConfig+0x264>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	2b00      	cmp	r3, #0
 8002204:	d009      	beq.n	800221a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002206:	4b13      	ldr	r3, [pc, #76]	@ (8002254 <HAL_RCC_ClockConfig+0x264>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	490f      	ldr	r1, [pc, #60]	@ (8002254 <HAL_RCC_ClockConfig+0x264>)
 8002216:	4313      	orrs	r3, r2
 8002218:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800221a:	f000 f825 	bl	8002268 <HAL_RCC_GetSysClockFreq>
 800221e:	4602      	mov	r2, r0
 8002220:	4b0c      	ldr	r3, [pc, #48]	@ (8002254 <HAL_RCC_ClockConfig+0x264>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	091b      	lsrs	r3, r3, #4
 8002226:	f003 030f 	and.w	r3, r3, #15
 800222a:	490c      	ldr	r1, [pc, #48]	@ (800225c <HAL_RCC_ClockConfig+0x26c>)
 800222c:	5ccb      	ldrb	r3, [r1, r3]
 800222e:	f003 031f 	and.w	r3, r3, #31
 8002232:	fa22 f303 	lsr.w	r3, r2, r3
 8002236:	4a0a      	ldr	r2, [pc, #40]	@ (8002260 <HAL_RCC_ClockConfig+0x270>)
 8002238:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800223a:	4b0a      	ldr	r3, [pc, #40]	@ (8002264 <HAL_RCC_ClockConfig+0x274>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f7fe fffe 	bl	8001240 <HAL_InitTick>
 8002244:	4603      	mov	r3, r0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3718      	adds	r7, #24
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40022000 	.word	0x40022000
 8002254:	40021000 	.word	0x40021000
 8002258:	04c4b400 	.word	0x04c4b400
 800225c:	08004dfc 	.word	0x08004dfc
 8002260:	20000008 	.word	0x20000008
 8002264:	2000000c 	.word	0x2000000c

08002268 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002268:	b480      	push	{r7}
 800226a:	b087      	sub	sp, #28
 800226c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800226e:	4b2c      	ldr	r3, [pc, #176]	@ (8002320 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f003 030c 	and.w	r3, r3, #12
 8002276:	2b04      	cmp	r3, #4
 8002278:	d102      	bne.n	8002280 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800227a:	4b2a      	ldr	r3, [pc, #168]	@ (8002324 <HAL_RCC_GetSysClockFreq+0xbc>)
 800227c:	613b      	str	r3, [r7, #16]
 800227e:	e047      	b.n	8002310 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002280:	4b27      	ldr	r3, [pc, #156]	@ (8002320 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 030c 	and.w	r3, r3, #12
 8002288:	2b08      	cmp	r3, #8
 800228a:	d102      	bne.n	8002292 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800228c:	4b26      	ldr	r3, [pc, #152]	@ (8002328 <HAL_RCC_GetSysClockFreq+0xc0>)
 800228e:	613b      	str	r3, [r7, #16]
 8002290:	e03e      	b.n	8002310 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002292:	4b23      	ldr	r3, [pc, #140]	@ (8002320 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 030c 	and.w	r3, r3, #12
 800229a:	2b0c      	cmp	r3, #12
 800229c:	d136      	bne.n	800230c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800229e:	4b20      	ldr	r3, [pc, #128]	@ (8002320 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	f003 0303 	and.w	r3, r3, #3
 80022a6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002320 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	091b      	lsrs	r3, r3, #4
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	3301      	adds	r3, #1
 80022b4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2b03      	cmp	r3, #3
 80022ba:	d10c      	bne.n	80022d6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022bc:	4a1a      	ldr	r2, [pc, #104]	@ (8002328 <HAL_RCC_GetSysClockFreq+0xc0>)
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c4:	4a16      	ldr	r2, [pc, #88]	@ (8002320 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022c6:	68d2      	ldr	r2, [r2, #12]
 80022c8:	0a12      	lsrs	r2, r2, #8
 80022ca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80022ce:	fb02 f303 	mul.w	r3, r2, r3
 80022d2:	617b      	str	r3, [r7, #20]
      break;
 80022d4:	e00c      	b.n	80022f0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022d6:	4a13      	ldr	r2, [pc, #76]	@ (8002324 <HAL_RCC_GetSysClockFreq+0xbc>)
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	fbb2 f3f3 	udiv	r3, r2, r3
 80022de:	4a10      	ldr	r2, [pc, #64]	@ (8002320 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022e0:	68d2      	ldr	r2, [r2, #12]
 80022e2:	0a12      	lsrs	r2, r2, #8
 80022e4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80022e8:	fb02 f303 	mul.w	r3, r2, r3
 80022ec:	617b      	str	r3, [r7, #20]
      break;
 80022ee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002320 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	0e5b      	lsrs	r3, r3, #25
 80022f6:	f003 0303 	and.w	r3, r3, #3
 80022fa:	3301      	adds	r3, #1
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	fbb2 f3f3 	udiv	r3, r2, r3
 8002308:	613b      	str	r3, [r7, #16]
 800230a:	e001      	b.n	8002310 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800230c:	2300      	movs	r3, #0
 800230e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002310:	693b      	ldr	r3, [r7, #16]
}
 8002312:	4618      	mov	r0, r3
 8002314:	371c      	adds	r7, #28
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	40021000 	.word	0x40021000
 8002324:	00f42400 	.word	0x00f42400
 8002328:	016e3600 	.word	0x016e3600

0800232c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002330:	4b03      	ldr	r3, [pc, #12]	@ (8002340 <HAL_RCC_GetHCLKFreq+0x14>)
 8002332:	681b      	ldr	r3, [r3, #0]
}
 8002334:	4618      	mov	r0, r3
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	20000008 	.word	0x20000008

08002344 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002348:	f7ff fff0 	bl	800232c <HAL_RCC_GetHCLKFreq>
 800234c:	4602      	mov	r2, r0
 800234e:	4b06      	ldr	r3, [pc, #24]	@ (8002368 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	0a1b      	lsrs	r3, r3, #8
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	4904      	ldr	r1, [pc, #16]	@ (800236c <HAL_RCC_GetPCLK1Freq+0x28>)
 800235a:	5ccb      	ldrb	r3, [r1, r3]
 800235c:	f003 031f 	and.w	r3, r3, #31
 8002360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002364:	4618      	mov	r0, r3
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40021000 	.word	0x40021000
 800236c:	08004e0c 	.word	0x08004e0c

08002370 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002374:	f7ff ffda 	bl	800232c <HAL_RCC_GetHCLKFreq>
 8002378:	4602      	mov	r2, r0
 800237a:	4b06      	ldr	r3, [pc, #24]	@ (8002394 <HAL_RCC_GetPCLK2Freq+0x24>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	0adb      	lsrs	r3, r3, #11
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	4904      	ldr	r1, [pc, #16]	@ (8002398 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002386:	5ccb      	ldrb	r3, [r1, r3]
 8002388:	f003 031f 	and.w	r3, r3, #31
 800238c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002390:	4618      	mov	r0, r3
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40021000 	.word	0x40021000
 8002398:	08004e0c 	.word	0x08004e0c

0800239c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800239c:	b480      	push	{r7}
 800239e:	b087      	sub	sp, #28
 80023a0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023a2:	4b1e      	ldr	r3, [pc, #120]	@ (800241c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023ac:	4b1b      	ldr	r3, [pc, #108]	@ (800241c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	091b      	lsrs	r3, r3, #4
 80023b2:	f003 030f 	and.w	r3, r3, #15
 80023b6:	3301      	adds	r3, #1
 80023b8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	2b03      	cmp	r3, #3
 80023be:	d10c      	bne.n	80023da <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023c0:	4a17      	ldr	r2, [pc, #92]	@ (8002420 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c8:	4a14      	ldr	r2, [pc, #80]	@ (800241c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80023ca:	68d2      	ldr	r2, [r2, #12]
 80023cc:	0a12      	lsrs	r2, r2, #8
 80023ce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80023d2:	fb02 f303 	mul.w	r3, r2, r3
 80023d6:	617b      	str	r3, [r7, #20]
    break;
 80023d8:	e00c      	b.n	80023f4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023da:	4a12      	ldr	r2, [pc, #72]	@ (8002424 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e2:	4a0e      	ldr	r2, [pc, #56]	@ (800241c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80023e4:	68d2      	ldr	r2, [r2, #12]
 80023e6:	0a12      	lsrs	r2, r2, #8
 80023e8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80023ec:	fb02 f303 	mul.w	r3, r2, r3
 80023f0:	617b      	str	r3, [r7, #20]
    break;
 80023f2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023f4:	4b09      	ldr	r3, [pc, #36]	@ (800241c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	0e5b      	lsrs	r3, r3, #25
 80023fa:	f003 0303 	and.w	r3, r3, #3
 80023fe:	3301      	adds	r3, #1
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	fbb2 f3f3 	udiv	r3, r2, r3
 800240c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800240e:	687b      	ldr	r3, [r7, #4]
}
 8002410:	4618      	mov	r0, r3
 8002412:	371c      	adds	r7, #28
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	40021000 	.word	0x40021000
 8002420:	016e3600 	.word	0x016e3600
 8002424:	00f42400 	.word	0x00f42400

08002428 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002430:	2300      	movs	r3, #0
 8002432:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002434:	2300      	movs	r3, #0
 8002436:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002440:	2b00      	cmp	r3, #0
 8002442:	f000 8098 	beq.w	8002576 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002446:	2300      	movs	r3, #0
 8002448:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800244a:	4b43      	ldr	r3, [pc, #268]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800244c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800244e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10d      	bne.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002456:	4b40      	ldr	r3, [pc, #256]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800245a:	4a3f      	ldr	r2, [pc, #252]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800245c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002460:	6593      	str	r3, [r2, #88]	@ 0x58
 8002462:	4b3d      	ldr	r3, [pc, #244]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002466:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800246a:	60bb      	str	r3, [r7, #8]
 800246c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800246e:	2301      	movs	r3, #1
 8002470:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002472:	4b3a      	ldr	r3, [pc, #232]	@ (800255c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a39      	ldr	r2, [pc, #228]	@ (800255c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002478:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800247c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800247e:	f7fe ff2b 	bl	80012d8 <HAL_GetTick>
 8002482:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002484:	e009      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002486:	f7fe ff27 	bl	80012d8 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d902      	bls.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	74fb      	strb	r3, [r7, #19]
        break;
 8002498:	e005      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800249a:	4b30      	ldr	r3, [pc, #192]	@ (800255c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d0ef      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80024a6:	7cfb      	ldrb	r3, [r7, #19]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d159      	bne.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80024ac:	4b2a      	ldr	r3, [pc, #168]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024b6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d01e      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d019      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80024c8:	4b23      	ldr	r3, [pc, #140]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80024d4:	4b20      	ldr	r3, [pc, #128]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024da:	4a1f      	ldr	r2, [pc, #124]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024e4:	4b1c      	ldr	r3, [pc, #112]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024ea:	4a1b      	ldr	r2, [pc, #108]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024f4:	4a18      	ldr	r2, [pc, #96]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b00      	cmp	r3, #0
 8002504:	d016      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002506:	f7fe fee7 	bl	80012d8 <HAL_GetTick>
 800250a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800250c:	e00b      	b.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800250e:	f7fe fee3 	bl	80012d8 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	f241 3288 	movw	r2, #5000	@ 0x1388
 800251c:	4293      	cmp	r3, r2
 800251e:	d902      	bls.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	74fb      	strb	r3, [r7, #19]
            break;
 8002524:	e006      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002526:	4b0c      	ldr	r3, [pc, #48]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002528:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d0ec      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002534:	7cfb      	ldrb	r3, [r7, #19]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10b      	bne.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800253a:	4b07      	ldr	r3, [pc, #28]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800253c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002540:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002548:	4903      	ldr	r1, [pc, #12]	@ (8002558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800254a:	4313      	orrs	r3, r2
 800254c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002550:	e008      	b.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002552:	7cfb      	ldrb	r3, [r7, #19]
 8002554:	74bb      	strb	r3, [r7, #18]
 8002556:	e005      	b.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002558:	40021000 	.word	0x40021000
 800255c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002560:	7cfb      	ldrb	r3, [r7, #19]
 8002562:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002564:	7c7b      	ldrb	r3, [r7, #17]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d105      	bne.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800256a:	4ba6      	ldr	r3, [pc, #664]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800256c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800256e:	4aa5      	ldr	r2, [pc, #660]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002570:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002574:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00a      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002582:	4ba0      	ldr	r3, [pc, #640]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002584:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002588:	f023 0203 	bic.w	r2, r3, #3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	499c      	ldr	r1, [pc, #624]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002592:	4313      	orrs	r3, r2
 8002594:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d00a      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025a4:	4b97      	ldr	r3, [pc, #604]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025aa:	f023 020c 	bic.w	r2, r3, #12
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	4994      	ldr	r1, [pc, #592]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0304 	and.w	r3, r3, #4
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00a      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025c6:	4b8f      	ldr	r3, [pc, #572]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025cc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	498b      	ldr	r1, [pc, #556]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0308 	and.w	r3, r3, #8
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00a      	beq.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025e8:	4b86      	ldr	r3, [pc, #536]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	4983      	ldr	r1, [pc, #524]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0320 	and.w	r3, r3, #32
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00a      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800260a:	4b7e      	ldr	r3, [pc, #504]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800260c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002610:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	695b      	ldr	r3, [r3, #20]
 8002618:	497a      	ldr	r1, [pc, #488]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800261a:	4313      	orrs	r3, r2
 800261c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00a      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800262c:	4b75      	ldr	r3, [pc, #468]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800262e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002632:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	4972      	ldr	r1, [pc, #456]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800263c:	4313      	orrs	r3, r2
 800263e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00a      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800264e:	4b6d      	ldr	r3, [pc, #436]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002650:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002654:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	69db      	ldr	r3, [r3, #28]
 800265c:	4969      	ldr	r1, [pc, #420]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800265e:	4313      	orrs	r3, r2
 8002660:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800266c:	2b00      	cmp	r3, #0
 800266e:	d00a      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002670:	4b64      	ldr	r3, [pc, #400]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002676:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	4961      	ldr	r1, [pc, #388]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002680:	4313      	orrs	r3, r2
 8002682:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00a      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002692:	4b5c      	ldr	r3, [pc, #368]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002694:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002698:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a0:	4958      	ldr	r1, [pc, #352]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d015      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026b4:	4b53      	ldr	r3, [pc, #332]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026c2:	4950      	ldr	r1, [pc, #320]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80026d2:	d105      	bne.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026d4:	4b4b      	ldr	r3, [pc, #300]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	4a4a      	ldr	r2, [pc, #296]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026de:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d015      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026ec:	4b45      	ldr	r3, [pc, #276]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026f2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026fa:	4942      	ldr	r1, [pc, #264]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002706:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800270a:	d105      	bne.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800270c:	4b3d      	ldr	r3, [pc, #244]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	4a3c      	ldr	r2, [pc, #240]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002712:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002716:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d015      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002724:	4b37      	ldr	r3, [pc, #220]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800272a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002732:	4934      	ldr	r1, [pc, #208]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002734:	4313      	orrs	r3, r2
 8002736:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002742:	d105      	bne.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002744:	4b2f      	ldr	r3, [pc, #188]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	4a2e      	ldr	r2, [pc, #184]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800274a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800274e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d015      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800275c:	4b29      	ldr	r3, [pc, #164]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800275e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002762:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800276a:	4926      	ldr	r1, [pc, #152]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800276c:	4313      	orrs	r3, r2
 800276e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002776:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800277a:	d105      	bne.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800277c:	4b21      	ldr	r3, [pc, #132]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	4a20      	ldr	r2, [pc, #128]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002782:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002786:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d015      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002794:	4b1b      	ldr	r3, [pc, #108]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800279a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027a2:	4918      	ldr	r1, [pc, #96]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027b2:	d105      	bne.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027b4:	4b13      	ldr	r3, [pc, #76]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	4a12      	ldr	r2, [pc, #72]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027be:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d015      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80027cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027d2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027da:	490a      	ldr	r1, [pc, #40]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80027ea:	d105      	bne.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027ec:	4b05      	ldr	r3, [pc, #20]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	4a04      	ldr	r2, [pc, #16]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027f6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80027f8:	7cbb      	ldrb	r3, [r7, #18]
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3718      	adds	r7, #24
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40021000 	.word	0x40021000

08002808 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e09d      	b.n	8002956 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281e:	2b00      	cmp	r3, #0
 8002820:	d108      	bne.n	8002834 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800282a:	d009      	beq.n	8002840 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	61da      	str	r2, [r3, #28]
 8002832:	e005      	b.n	8002840 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d106      	bne.n	8002860 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7fe fbf2 	bl	8001044 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2202      	movs	r2, #2
 8002864:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002876:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002880:	d902      	bls.n	8002888 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002882:	2300      	movs	r3, #0
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	e002      	b.n	800288e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002888:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800288c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002896:	d007      	beq.n	80028a8 <HAL_SPI_Init+0xa0>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80028a0:	d002      	beq.n	80028a8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80028b8:	431a      	orrs	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	431a      	orrs	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028d6:	431a      	orrs	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	69db      	ldr	r3, [r3, #28]
 80028dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028e0:	431a      	orrs	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ea:	ea42 0103 	orr.w	r1, r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	0c1b      	lsrs	r3, r3, #16
 8002904:	f003 0204 	and.w	r2, r3, #4
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290c:	f003 0310 	and.w	r3, r3, #16
 8002910:	431a      	orrs	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002916:	f003 0308 	and.w	r3, r3, #8
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002924:	ea42 0103 	orr.w	r1, r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	430a      	orrs	r2, r1
 8002934:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	69da      	ldr	r2, [r3, #28]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002944:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b088      	sub	sp, #32
 8002962:	af00      	add	r7, sp, #0
 8002964:	60f8      	str	r0, [r7, #12]
 8002966:	60b9      	str	r1, [r7, #8]
 8002968:	603b      	str	r3, [r7, #0]
 800296a:	4613      	mov	r3, r2
 800296c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800296e:	f7fe fcb3 	bl	80012d8 <HAL_GetTick>
 8002972:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002974:	88fb      	ldrh	r3, [r7, #6]
 8002976:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b01      	cmp	r3, #1
 8002982:	d001      	beq.n	8002988 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002984:	2302      	movs	r3, #2
 8002986:	e15c      	b.n	8002c42 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d002      	beq.n	8002994 <HAL_SPI_Transmit+0x36>
 800298e:	88fb      	ldrh	r3, [r7, #6]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e154      	b.n	8002c42 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d101      	bne.n	80029a6 <HAL_SPI_Transmit+0x48>
 80029a2:	2302      	movs	r3, #2
 80029a4:	e14d      	b.n	8002c42 <HAL_SPI_Transmit+0x2e4>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2203      	movs	r2, #3
 80029b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	88fa      	ldrh	r2, [r7, #6]
 80029c6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	88fa      	ldrh	r2, [r7, #6]
 80029cc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029f8:	d10f      	bne.n	8002a1a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a08:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a18:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a24:	2b40      	cmp	r3, #64	@ 0x40
 8002a26:	d007      	beq.n	8002a38 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002a40:	d952      	bls.n	8002ae8 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d002      	beq.n	8002a50 <HAL_SPI_Transmit+0xf2>
 8002a4a:	8b7b      	ldrh	r3, [r7, #26]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d145      	bne.n	8002adc <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a54:	881a      	ldrh	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a60:	1c9a      	adds	r2, r3, #2
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a74:	e032      	b.n	8002adc <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d112      	bne.n	8002aaa <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a88:	881a      	ldrh	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a94:	1c9a      	adds	r2, r3, #2
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002aa8:	e018      	b.n	8002adc <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002aaa:	f7fe fc15 	bl	80012d8 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d803      	bhi.n	8002ac2 <HAL_SPI_Transmit+0x164>
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac0:	d102      	bne.n	8002ac8 <HAL_SPI_Transmit+0x16a>
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d109      	bne.n	8002adc <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e0b2      	b.n	8002c42 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1c7      	bne.n	8002a76 <HAL_SPI_Transmit+0x118>
 8002ae6:	e083      	b.n	8002bf0 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d002      	beq.n	8002af6 <HAL_SPI_Transmit+0x198>
 8002af0:	8b7b      	ldrh	r3, [r7, #26]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d177      	bne.n	8002be6 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d912      	bls.n	8002b26 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b04:	881a      	ldrh	r2, [r3, #0]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b10:	1c9a      	adds	r2, r3, #2
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	3b02      	subs	r3, #2
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002b24:	e05f      	b.n	8002be6 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	330c      	adds	r3, #12
 8002b30:	7812      	ldrb	r2, [r2, #0]
 8002b32:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b38:	1c5a      	adds	r2, r3, #1
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	3b01      	subs	r3, #1
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002b4c:	e04b      	b.n	8002be6 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d12b      	bne.n	8002bb4 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d912      	bls.n	8002b8c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b6a:	881a      	ldrh	r2, [r3, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b76:	1c9a      	adds	r2, r3, #2
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	3b02      	subs	r3, #2
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002b8a:	e02c      	b.n	8002be6 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	330c      	adds	r3, #12
 8002b96:	7812      	ldrb	r2, [r2, #0]
 8002b98:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b9e:	1c5a      	adds	r2, r3, #1
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	3b01      	subs	r3, #1
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002bb2:	e018      	b.n	8002be6 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bb4:	f7fe fb90 	bl	80012d8 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d803      	bhi.n	8002bcc <HAL_SPI_Transmit+0x26e>
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bca:	d102      	bne.n	8002bd2 <HAL_SPI_Transmit+0x274>
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d109      	bne.n	8002be6 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e02d      	b.n	8002c42 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1ae      	bne.n	8002b4e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002bf0:	69fa      	ldr	r2, [r7, #28]
 8002bf2:	6839      	ldr	r1, [r7, #0]
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f000 fcf5 	bl	80035e4 <SPI_EndRxTxTransaction>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d002      	beq.n	8002c06 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2220      	movs	r2, #32
 8002c04:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10a      	bne.n	8002c24 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c0e:	2300      	movs	r3, #0
 8002c10:	617b      	str	r3, [r7, #20]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	617b      	str	r3, [r7, #20]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	617b      	str	r3, [r7, #20]
 8002c22:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e000      	b.n	8002c42 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8002c40:	2300      	movs	r3, #0
  }
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3720      	adds	r7, #32
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b088      	sub	sp, #32
 8002c4e:	af02      	add	r7, sp, #8
 8002c50:	60f8      	str	r0, [r7, #12]
 8002c52:	60b9      	str	r1, [r7, #8]
 8002c54:	603b      	str	r3, [r7, #0]
 8002c56:	4613      	mov	r3, r2
 8002c58:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d001      	beq.n	8002c6a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002c66:	2302      	movs	r3, #2
 8002c68:	e123      	b.n	8002eb2 <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d002      	beq.n	8002c76 <HAL_SPI_Receive+0x2c>
 8002c70:	88fb      	ldrh	r3, [r7, #6]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e11b      	b.n	8002eb2 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c82:	d112      	bne.n	8002caa <HAL_SPI_Receive+0x60>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10e      	bne.n	8002caa <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2204      	movs	r2, #4
 8002c90:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002c94:	88fa      	ldrh	r2, [r7, #6]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	9300      	str	r3, [sp, #0]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	68ba      	ldr	r2, [r7, #8]
 8002c9e:	68b9      	ldr	r1, [r7, #8]
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f000 f90a 	bl	8002eba <HAL_SPI_TransmitReceive>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	e103      	b.n	8002eb2 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002caa:	f7fe fb15 	bl	80012d8 <HAL_GetTick>
 8002cae:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d101      	bne.n	8002cbe <HAL_SPI_Receive+0x74>
 8002cba:	2302      	movs	r3, #2
 8002cbc:	e0f9      	b.n	8002eb2 <HAL_SPI_Receive+0x268>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2204      	movs	r2, #4
 8002cca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	88fa      	ldrh	r2, [r7, #6]
 8002cde:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	88fa      	ldrh	r2, [r7, #6]
 8002ce6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002d10:	d908      	bls.n	8002d24 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002d20:	605a      	str	r2, [r3, #4]
 8002d22:	e007      	b.n	8002d34 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002d32:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d3c:	d10f      	bne.n	8002d5e <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d4c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002d5c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d68:	2b40      	cmp	r3, #64	@ 0x40
 8002d6a:	d007      	beq.n	8002d7c <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d7a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002d84:	d875      	bhi.n	8002e72 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002d86:	e037      	b.n	8002df8 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d117      	bne.n	8002dc6 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f103 020c 	add.w	r2, r3, #12
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da2:	7812      	ldrb	r2, [r2, #0]
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dac:	1c5a      	adds	r2, r3, #1
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002dc4:	e018      	b.n	8002df8 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002dc6:	f7fe fa87 	bl	80012d8 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d803      	bhi.n	8002dde <HAL_SPI_Receive+0x194>
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ddc:	d102      	bne.n	8002de4 <HAL_SPI_Receive+0x19a>
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d109      	bne.n	8002df8 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e05c      	b.n	8002eb2 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1c1      	bne.n	8002d88 <HAL_SPI_Receive+0x13e>
 8002e04:	e03b      	b.n	8002e7e <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d115      	bne.n	8002e40 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68da      	ldr	r2, [r3, #12]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1e:	b292      	uxth	r2, r2
 8002e20:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e26:	1c9a      	adds	r2, r3, #2
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	3b01      	subs	r3, #1
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002e3e:	e018      	b.n	8002e72 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e40:	f7fe fa4a 	bl	80012d8 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d803      	bhi.n	8002e58 <HAL_SPI_Receive+0x20e>
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e56:	d102      	bne.n	8002e5e <HAL_SPI_Receive+0x214>
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d109      	bne.n	8002e72 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e01f      	b.n	8002eb2 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1c3      	bne.n	8002e06 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	6839      	ldr	r1, [r7, #0]
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f000 fb56 	bl	8003534 <SPI_EndRxTransaction>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d002      	beq.n	8002e94 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2220      	movs	r2, #32
 8002e92:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e000      	b.n	8002eb2 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
  }
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3718      	adds	r7, #24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b08a      	sub	sp, #40	@ 0x28
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	60f8      	str	r0, [r7, #12]
 8002ec2:	60b9      	str	r1, [r7, #8]
 8002ec4:	607a      	str	r2, [r7, #4]
 8002ec6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ecc:	f7fe fa04 	bl	80012d8 <HAL_GetTick>
 8002ed0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002ed8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002ee0:	887b      	ldrh	r3, [r7, #2]
 8002ee2:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8002ee4:	887b      	ldrh	r3, [r7, #2]
 8002ee6:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002ee8:	7ffb      	ldrb	r3, [r7, #31]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d00c      	beq.n	8002f08 <HAL_SPI_TransmitReceive+0x4e>
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ef4:	d106      	bne.n	8002f04 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d102      	bne.n	8002f04 <HAL_SPI_TransmitReceive+0x4a>
 8002efe:	7ffb      	ldrb	r3, [r7, #31]
 8002f00:	2b04      	cmp	r3, #4
 8002f02:	d001      	beq.n	8002f08 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002f04:	2302      	movs	r3, #2
 8002f06:	e1f3      	b.n	80032f0 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d005      	beq.n	8002f1a <HAL_SPI_TransmitReceive+0x60>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d002      	beq.n	8002f1a <HAL_SPI_TransmitReceive+0x60>
 8002f14:	887b      	ldrh	r3, [r7, #2]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e1e8      	b.n	80032f0 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d101      	bne.n	8002f2c <HAL_SPI_TransmitReceive+0x72>
 8002f28:	2302      	movs	r3, #2
 8002f2a:	e1e1      	b.n	80032f0 <HAL_SPI_TransmitReceive+0x436>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b04      	cmp	r3, #4
 8002f3e:	d003      	beq.n	8002f48 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2205      	movs	r2, #5
 8002f44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	887a      	ldrh	r2, [r7, #2]
 8002f58:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	887a      	ldrh	r2, [r7, #2]
 8002f60:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	68ba      	ldr	r2, [r7, #8]
 8002f68:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	887a      	ldrh	r2, [r7, #2]
 8002f6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	887a      	ldrh	r2, [r7, #2]
 8002f74:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f8a:	d802      	bhi.n	8002f92 <HAL_SPI_TransmitReceive+0xd8>
 8002f8c:	8abb      	ldrh	r3, [r7, #20]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d908      	bls.n	8002fa4 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685a      	ldr	r2, [r3, #4]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002fa0:	605a      	str	r2, [r3, #4]
 8002fa2:	e007      	b.n	8002fb4 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002fb2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fbe:	2b40      	cmp	r3, #64	@ 0x40
 8002fc0:	d007      	beq.n	8002fd2 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002fd0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002fda:	f240 8083 	bls.w	80030e4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d002      	beq.n	8002fec <HAL_SPI_TransmitReceive+0x132>
 8002fe6:	8afb      	ldrh	r3, [r7, #22]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d16f      	bne.n	80030cc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff0:	881a      	ldrh	r2, [r3, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ffc:	1c9a      	adds	r2, r3, #2
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003006:	b29b      	uxth	r3, r3
 8003008:	3b01      	subs	r3, #1
 800300a:	b29a      	uxth	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003010:	e05c      	b.n	80030cc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b02      	cmp	r3, #2
 800301e:	d11b      	bne.n	8003058 <HAL_SPI_TransmitReceive+0x19e>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003024:	b29b      	uxth	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d016      	beq.n	8003058 <HAL_SPI_TransmitReceive+0x19e>
 800302a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302c:	2b01      	cmp	r3, #1
 800302e:	d113      	bne.n	8003058 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003034:	881a      	ldrh	r2, [r3, #0]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003040:	1c9a      	adds	r2, r3, #2
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800304a:	b29b      	uxth	r3, r3
 800304c:	3b01      	subs	r3, #1
 800304e:	b29a      	uxth	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003054:	2300      	movs	r3, #0
 8003056:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b01      	cmp	r3, #1
 8003064:	d11c      	bne.n	80030a0 <HAL_SPI_TransmitReceive+0x1e6>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800306c:	b29b      	uxth	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d016      	beq.n	80030a0 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68da      	ldr	r2, [r3, #12]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307c:	b292      	uxth	r2, r2
 800307e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003084:	1c9a      	adds	r2, r3, #2
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003090:	b29b      	uxth	r3, r3
 8003092:	3b01      	subs	r3, #1
 8003094:	b29a      	uxth	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800309c:	2301      	movs	r3, #1
 800309e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80030a0:	f7fe f91a 	bl	80012d8 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	6a3b      	ldr	r3, [r7, #32]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d80d      	bhi.n	80030cc <HAL_SPI_TransmitReceive+0x212>
 80030b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b6:	d009      	beq.n	80030cc <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e111      	b.n	80032f0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d19d      	bne.n	8003012 <HAL_SPI_TransmitReceive+0x158>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80030dc:	b29b      	uxth	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d197      	bne.n	8003012 <HAL_SPI_TransmitReceive+0x158>
 80030e2:	e0e5      	b.n	80032b0 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d003      	beq.n	80030f4 <HAL_SPI_TransmitReceive+0x23a>
 80030ec:	8afb      	ldrh	r3, [r7, #22]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	f040 80d1 	bne.w	8003296 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d912      	bls.n	8003124 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003102:	881a      	ldrh	r2, [r3, #0]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800310e:	1c9a      	adds	r2, r3, #2
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003118:	b29b      	uxth	r3, r3
 800311a:	3b02      	subs	r3, #2
 800311c:	b29a      	uxth	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003122:	e0b8      	b.n	8003296 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	330c      	adds	r3, #12
 800312e:	7812      	ldrb	r2, [r2, #0]
 8003130:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003136:	1c5a      	adds	r2, r3, #1
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003140:	b29b      	uxth	r3, r3
 8003142:	3b01      	subs	r3, #1
 8003144:	b29a      	uxth	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800314a:	e0a4      	b.n	8003296 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b02      	cmp	r3, #2
 8003158:	d134      	bne.n	80031c4 <HAL_SPI_TransmitReceive+0x30a>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800315e:	b29b      	uxth	r3, r3
 8003160:	2b00      	cmp	r3, #0
 8003162:	d02f      	beq.n	80031c4 <HAL_SPI_TransmitReceive+0x30a>
 8003164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003166:	2b01      	cmp	r3, #1
 8003168:	d12c      	bne.n	80031c4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800316e:	b29b      	uxth	r3, r3
 8003170:	2b01      	cmp	r3, #1
 8003172:	d912      	bls.n	800319a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003178:	881a      	ldrh	r2, [r3, #0]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003184:	1c9a      	adds	r2, r3, #2
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800318e:	b29b      	uxth	r3, r3
 8003190:	3b02      	subs	r3, #2
 8003192:	b29a      	uxth	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003198:	e012      	b.n	80031c0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	330c      	adds	r3, #12
 80031a4:	7812      	ldrb	r2, [r2, #0]
 80031a6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ac:	1c5a      	adds	r2, r3, #1
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	3b01      	subs	r3, #1
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d148      	bne.n	8003264 <HAL_SPI_TransmitReceive+0x3aa>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80031d8:	b29b      	uxth	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d042      	beq.n	8003264 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d923      	bls.n	8003232 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68da      	ldr	r2, [r3, #12]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f4:	b292      	uxth	r2, r2
 80031f6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fc:	1c9a      	adds	r2, r3, #2
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003208:	b29b      	uxth	r3, r3
 800320a:	3b02      	subs	r3, #2
 800320c:	b29a      	uxth	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800321a:	b29b      	uxth	r3, r3
 800321c:	2b01      	cmp	r3, #1
 800321e:	d81f      	bhi.n	8003260 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800322e:	605a      	str	r2, [r3, #4]
 8003230:	e016      	b.n	8003260 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f103 020c 	add.w	r2, r3, #12
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323e:	7812      	ldrb	r2, [r2, #0]
 8003240:	b2d2      	uxtb	r2, r2
 8003242:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003248:	1c5a      	adds	r2, r3, #1
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003254:	b29b      	uxth	r3, r3
 8003256:	3b01      	subs	r3, #1
 8003258:	b29a      	uxth	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003260:	2301      	movs	r3, #1
 8003262:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003264:	f7fe f838 	bl	80012d8 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	6a3b      	ldr	r3, [r7, #32]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003270:	429a      	cmp	r2, r3
 8003272:	d803      	bhi.n	800327c <HAL_SPI_TransmitReceive+0x3c2>
 8003274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800327a:	d102      	bne.n	8003282 <HAL_SPI_TransmitReceive+0x3c8>
 800327c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800327e:	2b00      	cmp	r3, #0
 8003280:	d109      	bne.n	8003296 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e02c      	b.n	80032f0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800329a:	b29b      	uxth	r3, r3
 800329c:	2b00      	cmp	r3, #0
 800329e:	f47f af55 	bne.w	800314c <HAL_SPI_TransmitReceive+0x292>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f47f af4e 	bne.w	800314c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032b0:	6a3a      	ldr	r2, [r7, #32]
 80032b2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f000 f995 	bl	80035e4 <SPI_EndRxTxTransaction>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d008      	beq.n	80032d2 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2220      	movs	r2, #32
 80032c4:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e00e      	b.n	80032f0 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e000      	b.n	80032f0 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80032ee:	2300      	movs	r3, #0
  }
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3728      	adds	r7, #40	@ 0x28
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b088      	sub	sp, #32
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	603b      	str	r3, [r7, #0]
 8003304:	4613      	mov	r3, r2
 8003306:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003308:	f7fd ffe6 	bl	80012d8 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003310:	1a9b      	subs	r3, r3, r2
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	4413      	add	r3, r2
 8003316:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003318:	f7fd ffde 	bl	80012d8 <HAL_GetTick>
 800331c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800331e:	4b39      	ldr	r3, [pc, #228]	@ (8003404 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	015b      	lsls	r3, r3, #5
 8003324:	0d1b      	lsrs	r3, r3, #20
 8003326:	69fa      	ldr	r2, [r7, #28]
 8003328:	fb02 f303 	mul.w	r3, r2, r3
 800332c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800332e:	e054      	b.n	80033da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003336:	d050      	beq.n	80033da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003338:	f7fd ffce 	bl	80012d8 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	69fa      	ldr	r2, [r7, #28]
 8003344:	429a      	cmp	r2, r3
 8003346:	d902      	bls.n	800334e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d13d      	bne.n	80033ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800335c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003366:	d111      	bne.n	800338c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003370:	d004      	beq.n	800337c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800337a:	d107      	bne.n	800338c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800338a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003390:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003394:	d10f      	bne.n	80033b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e017      	b.n	80033fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	3b01      	subs	r3, #1
 80033d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	4013      	ands	r3, r2
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	bf0c      	ite	eq
 80033ea:	2301      	moveq	r3, #1
 80033ec:	2300      	movne	r3, #0
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	461a      	mov	r2, r3
 80033f2:	79fb      	ldrb	r3, [r7, #7]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d19b      	bne.n	8003330 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3720      	adds	r7, #32
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	20000008 	.word	0x20000008

08003408 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b08a      	sub	sp, #40	@ 0x28
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
 8003414:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003416:	2300      	movs	r3, #0
 8003418:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800341a:	f7fd ff5d 	bl	80012d8 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003422:	1a9b      	subs	r3, r3, r2
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	4413      	add	r3, r2
 8003428:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800342a:	f7fd ff55 	bl	80012d8 <HAL_GetTick>
 800342e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	330c      	adds	r3, #12
 8003436:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003438:	4b3d      	ldr	r3, [pc, #244]	@ (8003530 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	4613      	mov	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4413      	add	r3, r2
 8003442:	00da      	lsls	r2, r3, #3
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	0d1b      	lsrs	r3, r3, #20
 8003448:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800344a:	fb02 f303 	mul.w	r3, r2, r3
 800344e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003450:	e060      	b.n	8003514 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003458:	d107      	bne.n	800346a <SPI_WaitFifoStateUntilTimeout+0x62>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d104      	bne.n	800346a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	b2db      	uxtb	r3, r3
 8003466:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003468:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003470:	d050      	beq.n	8003514 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003472:	f7fd ff31 	bl	80012d8 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	6a3b      	ldr	r3, [r7, #32]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800347e:	429a      	cmp	r2, r3
 8003480:	d902      	bls.n	8003488 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003484:	2b00      	cmp	r3, #0
 8003486:	d13d      	bne.n	8003504 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003496:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034a0:	d111      	bne.n	80034c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034aa:	d004      	beq.n	80034b6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034b4:	d107      	bne.n	80034c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034ce:	d10f      	bne.n	80034f0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e010      	b.n	8003526 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800350a:	2300      	movs	r3, #0
 800350c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	3b01      	subs	r3, #1
 8003512:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689a      	ldr	r2, [r3, #8]
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	4013      	ands	r3, r2
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	429a      	cmp	r2, r3
 8003522:	d196      	bne.n	8003452 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3728      	adds	r7, #40	@ 0x28
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	20000008 	.word	0x20000008

08003534 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af02      	add	r7, sp, #8
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003548:	d111      	bne.n	800356e <SPI_EndRxTransaction+0x3a>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003552:	d004      	beq.n	800355e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800355c:	d107      	bne.n	800356e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800356c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	2200      	movs	r2, #0
 8003576:	2180      	movs	r1, #128	@ 0x80
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f7ff febd 	bl	80032f8 <SPI_WaitFlagStateUntilTimeout>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d007      	beq.n	8003594 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003588:	f043 0220 	orr.w	r2, r3, #32
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e023      	b.n	80035dc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800359c:	d11d      	bne.n	80035da <SPI_EndRxTransaction+0xa6>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035a6:	d004      	beq.n	80035b2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035b0:	d113      	bne.n	80035da <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f7ff ff22 	bl	8003408 <SPI_WaitFifoStateUntilTimeout>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d007      	beq.n	80035da <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035ce:	f043 0220 	orr.w	r2, r3, #32
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e000      	b.n	80035dc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af02      	add	r7, sp, #8
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f7ff ff03 	bl	8003408 <SPI_WaitFifoStateUntilTimeout>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d007      	beq.n	8003618 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800360c:	f043 0220 	orr.w	r2, r3, #32
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e027      	b.n	8003668 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	2200      	movs	r2, #0
 8003620:	2180      	movs	r1, #128	@ 0x80
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f7ff fe68 	bl	80032f8 <SPI_WaitFlagStateUntilTimeout>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d007      	beq.n	800363e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003632:	f043 0220 	orr.w	r2, r3, #32
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e014      	b.n	8003668 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	2200      	movs	r2, #0
 8003646:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f7ff fedc 	bl	8003408 <SPI_WaitFifoStateUntilTimeout>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d007      	beq.n	8003666 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800365a:	f043 0220 	orr.w	r2, r3, #32
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e000      	b.n	8003668 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e042      	b.n	8003708 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003688:	2b00      	cmp	r3, #0
 800368a:	d106      	bne.n	800369a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f7fd fc7d 	bl	8000f94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2224      	movs	r2, #36	@ 0x24
 800369e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 0201 	bic.w	r2, r2, #1
 80036b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d002      	beq.n	80036c0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 fb82 	bl	8003dc4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 f8b3 	bl	800382c <UART_SetConfig>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d101      	bne.n	80036d0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e01b      	b.n	8003708 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80036de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	689a      	ldr	r2, [r3, #8]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f042 0201 	orr.w	r2, r2, #1
 80036fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 fc01 	bl	8003f08 <UART_CheckIdleState>
 8003706:	4603      	mov	r3, r0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b08a      	sub	sp, #40	@ 0x28
 8003714:	af02      	add	r7, sp, #8
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	603b      	str	r3, [r7, #0]
 800371c:	4613      	mov	r3, r2
 800371e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003726:	2b20      	cmp	r3, #32
 8003728:	d17b      	bne.n	8003822 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d002      	beq.n	8003736 <HAL_UART_Transmit+0x26>
 8003730:	88fb      	ldrh	r3, [r7, #6]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e074      	b.n	8003824 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2221      	movs	r2, #33	@ 0x21
 8003746:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800374a:	f7fd fdc5 	bl	80012d8 <HAL_GetTick>
 800374e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	88fa      	ldrh	r2, [r7, #6]
 8003754:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	88fa      	ldrh	r2, [r7, #6]
 800375c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003768:	d108      	bne.n	800377c <HAL_UART_Transmit+0x6c>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d104      	bne.n	800377c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003772:	2300      	movs	r3, #0
 8003774:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	61bb      	str	r3, [r7, #24]
 800377a:	e003      	b.n	8003784 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003780:	2300      	movs	r3, #0
 8003782:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003784:	e030      	b.n	80037e8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	2200      	movs	r2, #0
 800378e:	2180      	movs	r1, #128	@ 0x80
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f000 fc63 	bl	800405c <UART_WaitOnFlagUntilTimeout>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d005      	beq.n	80037a8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2220      	movs	r2, #32
 80037a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e03d      	b.n	8003824 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d10b      	bne.n	80037c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	881b      	ldrh	r3, [r3, #0]
 80037b2:	461a      	mov	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037bc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	3302      	adds	r3, #2
 80037c2:	61bb      	str	r3, [r7, #24]
 80037c4:	e007      	b.n	80037d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	781a      	ldrb	r2, [r3, #0]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	3301      	adds	r3, #1
 80037d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80037dc:	b29b      	uxth	r3, r3
 80037de:	3b01      	subs	r3, #1
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1c8      	bne.n	8003786 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	2200      	movs	r2, #0
 80037fc:	2140      	movs	r1, #64	@ 0x40
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f000 fc2c 	bl	800405c <UART_WaitOnFlagUntilTimeout>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d005      	beq.n	8003816 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2220      	movs	r2, #32
 800380e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e006      	b.n	8003824 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2220      	movs	r2, #32
 800381a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800381e:	2300      	movs	r3, #0
 8003820:	e000      	b.n	8003824 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003822:	2302      	movs	r3, #2
  }
}
 8003824:	4618      	mov	r0, r3
 8003826:	3720      	adds	r7, #32
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800382c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003830:	b08c      	sub	sp, #48	@ 0x30
 8003832:	af00      	add	r7, sp, #0
 8003834:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003836:	2300      	movs	r3, #0
 8003838:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	689a      	ldr	r2, [r3, #8]
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	431a      	orrs	r2, r3
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	431a      	orrs	r2, r3
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	69db      	ldr	r3, [r3, #28]
 8003850:	4313      	orrs	r3, r2
 8003852:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	4bab      	ldr	r3, [pc, #684]	@ (8003b08 <UART_SetConfig+0x2dc>)
 800385c:	4013      	ands	r3, r2
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	6812      	ldr	r2, [r2, #0]
 8003862:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003864:	430b      	orrs	r3, r1
 8003866:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	68da      	ldr	r2, [r3, #12]
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	430a      	orrs	r2, r1
 800387c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4aa0      	ldr	r2, [pc, #640]	@ (8003b0c <UART_SetConfig+0x2e0>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d004      	beq.n	8003898 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003894:	4313      	orrs	r3, r2
 8003896:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80038a2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	6812      	ldr	r2, [r2, #0]
 80038aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80038ac:	430b      	orrs	r3, r1
 80038ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b6:	f023 010f 	bic.w	r1, r3, #15
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a91      	ldr	r2, [pc, #580]	@ (8003b10 <UART_SetConfig+0x2e4>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d125      	bne.n	800391c <UART_SetConfig+0xf0>
 80038d0:	4b90      	ldr	r3, [pc, #576]	@ (8003b14 <UART_SetConfig+0x2e8>)
 80038d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038d6:	f003 0303 	and.w	r3, r3, #3
 80038da:	2b03      	cmp	r3, #3
 80038dc:	d81a      	bhi.n	8003914 <UART_SetConfig+0xe8>
 80038de:	a201      	add	r2, pc, #4	@ (adr r2, 80038e4 <UART_SetConfig+0xb8>)
 80038e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e4:	080038f5 	.word	0x080038f5
 80038e8:	08003905 	.word	0x08003905
 80038ec:	080038fd 	.word	0x080038fd
 80038f0:	0800390d 	.word	0x0800390d
 80038f4:	2301      	movs	r3, #1
 80038f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038fa:	e0d6      	b.n	8003aaa <UART_SetConfig+0x27e>
 80038fc:	2302      	movs	r3, #2
 80038fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003902:	e0d2      	b.n	8003aaa <UART_SetConfig+0x27e>
 8003904:	2304      	movs	r3, #4
 8003906:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800390a:	e0ce      	b.n	8003aaa <UART_SetConfig+0x27e>
 800390c:	2308      	movs	r3, #8
 800390e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003912:	e0ca      	b.n	8003aaa <UART_SetConfig+0x27e>
 8003914:	2310      	movs	r3, #16
 8003916:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800391a:	e0c6      	b.n	8003aaa <UART_SetConfig+0x27e>
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a7d      	ldr	r2, [pc, #500]	@ (8003b18 <UART_SetConfig+0x2ec>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d138      	bne.n	8003998 <UART_SetConfig+0x16c>
 8003926:	4b7b      	ldr	r3, [pc, #492]	@ (8003b14 <UART_SetConfig+0x2e8>)
 8003928:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800392c:	f003 030c 	and.w	r3, r3, #12
 8003930:	2b0c      	cmp	r3, #12
 8003932:	d82d      	bhi.n	8003990 <UART_SetConfig+0x164>
 8003934:	a201      	add	r2, pc, #4	@ (adr r2, 800393c <UART_SetConfig+0x110>)
 8003936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800393a:	bf00      	nop
 800393c:	08003971 	.word	0x08003971
 8003940:	08003991 	.word	0x08003991
 8003944:	08003991 	.word	0x08003991
 8003948:	08003991 	.word	0x08003991
 800394c:	08003981 	.word	0x08003981
 8003950:	08003991 	.word	0x08003991
 8003954:	08003991 	.word	0x08003991
 8003958:	08003991 	.word	0x08003991
 800395c:	08003979 	.word	0x08003979
 8003960:	08003991 	.word	0x08003991
 8003964:	08003991 	.word	0x08003991
 8003968:	08003991 	.word	0x08003991
 800396c:	08003989 	.word	0x08003989
 8003970:	2300      	movs	r3, #0
 8003972:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003976:	e098      	b.n	8003aaa <UART_SetConfig+0x27e>
 8003978:	2302      	movs	r3, #2
 800397a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800397e:	e094      	b.n	8003aaa <UART_SetConfig+0x27e>
 8003980:	2304      	movs	r3, #4
 8003982:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003986:	e090      	b.n	8003aaa <UART_SetConfig+0x27e>
 8003988:	2308      	movs	r3, #8
 800398a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800398e:	e08c      	b.n	8003aaa <UART_SetConfig+0x27e>
 8003990:	2310      	movs	r3, #16
 8003992:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003996:	e088      	b.n	8003aaa <UART_SetConfig+0x27e>
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a5f      	ldr	r2, [pc, #380]	@ (8003b1c <UART_SetConfig+0x2f0>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d125      	bne.n	80039ee <UART_SetConfig+0x1c2>
 80039a2:	4b5c      	ldr	r3, [pc, #368]	@ (8003b14 <UART_SetConfig+0x2e8>)
 80039a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039a8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80039ac:	2b30      	cmp	r3, #48	@ 0x30
 80039ae:	d016      	beq.n	80039de <UART_SetConfig+0x1b2>
 80039b0:	2b30      	cmp	r3, #48	@ 0x30
 80039b2:	d818      	bhi.n	80039e6 <UART_SetConfig+0x1ba>
 80039b4:	2b20      	cmp	r3, #32
 80039b6:	d00a      	beq.n	80039ce <UART_SetConfig+0x1a2>
 80039b8:	2b20      	cmp	r3, #32
 80039ba:	d814      	bhi.n	80039e6 <UART_SetConfig+0x1ba>
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d002      	beq.n	80039c6 <UART_SetConfig+0x19a>
 80039c0:	2b10      	cmp	r3, #16
 80039c2:	d008      	beq.n	80039d6 <UART_SetConfig+0x1aa>
 80039c4:	e00f      	b.n	80039e6 <UART_SetConfig+0x1ba>
 80039c6:	2300      	movs	r3, #0
 80039c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039cc:	e06d      	b.n	8003aaa <UART_SetConfig+0x27e>
 80039ce:	2302      	movs	r3, #2
 80039d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039d4:	e069      	b.n	8003aaa <UART_SetConfig+0x27e>
 80039d6:	2304      	movs	r3, #4
 80039d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039dc:	e065      	b.n	8003aaa <UART_SetConfig+0x27e>
 80039de:	2308      	movs	r3, #8
 80039e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039e4:	e061      	b.n	8003aaa <UART_SetConfig+0x27e>
 80039e6:	2310      	movs	r3, #16
 80039e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039ec:	e05d      	b.n	8003aaa <UART_SetConfig+0x27e>
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a4b      	ldr	r2, [pc, #300]	@ (8003b20 <UART_SetConfig+0x2f4>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d125      	bne.n	8003a44 <UART_SetConfig+0x218>
 80039f8:	4b46      	ldr	r3, [pc, #280]	@ (8003b14 <UART_SetConfig+0x2e8>)
 80039fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039fe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003a02:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a04:	d016      	beq.n	8003a34 <UART_SetConfig+0x208>
 8003a06:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a08:	d818      	bhi.n	8003a3c <UART_SetConfig+0x210>
 8003a0a:	2b80      	cmp	r3, #128	@ 0x80
 8003a0c:	d00a      	beq.n	8003a24 <UART_SetConfig+0x1f8>
 8003a0e:	2b80      	cmp	r3, #128	@ 0x80
 8003a10:	d814      	bhi.n	8003a3c <UART_SetConfig+0x210>
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d002      	beq.n	8003a1c <UART_SetConfig+0x1f0>
 8003a16:	2b40      	cmp	r3, #64	@ 0x40
 8003a18:	d008      	beq.n	8003a2c <UART_SetConfig+0x200>
 8003a1a:	e00f      	b.n	8003a3c <UART_SetConfig+0x210>
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a22:	e042      	b.n	8003aaa <UART_SetConfig+0x27e>
 8003a24:	2302      	movs	r3, #2
 8003a26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a2a:	e03e      	b.n	8003aaa <UART_SetConfig+0x27e>
 8003a2c:	2304      	movs	r3, #4
 8003a2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a32:	e03a      	b.n	8003aaa <UART_SetConfig+0x27e>
 8003a34:	2308      	movs	r3, #8
 8003a36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a3a:	e036      	b.n	8003aaa <UART_SetConfig+0x27e>
 8003a3c:	2310      	movs	r3, #16
 8003a3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a42:	e032      	b.n	8003aaa <UART_SetConfig+0x27e>
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a30      	ldr	r2, [pc, #192]	@ (8003b0c <UART_SetConfig+0x2e0>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d12a      	bne.n	8003aa4 <UART_SetConfig+0x278>
 8003a4e:	4b31      	ldr	r3, [pc, #196]	@ (8003b14 <UART_SetConfig+0x2e8>)
 8003a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a54:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003a58:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003a5c:	d01a      	beq.n	8003a94 <UART_SetConfig+0x268>
 8003a5e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003a62:	d81b      	bhi.n	8003a9c <UART_SetConfig+0x270>
 8003a64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a68:	d00c      	beq.n	8003a84 <UART_SetConfig+0x258>
 8003a6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a6e:	d815      	bhi.n	8003a9c <UART_SetConfig+0x270>
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d003      	beq.n	8003a7c <UART_SetConfig+0x250>
 8003a74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a78:	d008      	beq.n	8003a8c <UART_SetConfig+0x260>
 8003a7a:	e00f      	b.n	8003a9c <UART_SetConfig+0x270>
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a82:	e012      	b.n	8003aaa <UART_SetConfig+0x27e>
 8003a84:	2302      	movs	r3, #2
 8003a86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a8a:	e00e      	b.n	8003aaa <UART_SetConfig+0x27e>
 8003a8c:	2304      	movs	r3, #4
 8003a8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a92:	e00a      	b.n	8003aaa <UART_SetConfig+0x27e>
 8003a94:	2308      	movs	r3, #8
 8003a96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a9a:	e006      	b.n	8003aaa <UART_SetConfig+0x27e>
 8003a9c:	2310      	movs	r3, #16
 8003a9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003aa2:	e002      	b.n	8003aaa <UART_SetConfig+0x27e>
 8003aa4:	2310      	movs	r3, #16
 8003aa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a17      	ldr	r2, [pc, #92]	@ (8003b0c <UART_SetConfig+0x2e0>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	f040 80a8 	bne.w	8003c06 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ab6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003aba:	2b08      	cmp	r3, #8
 8003abc:	d834      	bhi.n	8003b28 <UART_SetConfig+0x2fc>
 8003abe:	a201      	add	r2, pc, #4	@ (adr r2, 8003ac4 <UART_SetConfig+0x298>)
 8003ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac4:	08003ae9 	.word	0x08003ae9
 8003ac8:	08003b29 	.word	0x08003b29
 8003acc:	08003af1 	.word	0x08003af1
 8003ad0:	08003b29 	.word	0x08003b29
 8003ad4:	08003af7 	.word	0x08003af7
 8003ad8:	08003b29 	.word	0x08003b29
 8003adc:	08003b29 	.word	0x08003b29
 8003ae0:	08003b29 	.word	0x08003b29
 8003ae4:	08003aff 	.word	0x08003aff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ae8:	f7fe fc2c 	bl	8002344 <HAL_RCC_GetPCLK1Freq>
 8003aec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003aee:	e021      	b.n	8003b34 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003af0:	4b0c      	ldr	r3, [pc, #48]	@ (8003b24 <UART_SetConfig+0x2f8>)
 8003af2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003af4:	e01e      	b.n	8003b34 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003af6:	f7fe fbb7 	bl	8002268 <HAL_RCC_GetSysClockFreq>
 8003afa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003afc:	e01a      	b.n	8003b34 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003afe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003b04:	e016      	b.n	8003b34 <UART_SetConfig+0x308>
 8003b06:	bf00      	nop
 8003b08:	cfff69f3 	.word	0xcfff69f3
 8003b0c:	40008000 	.word	0x40008000
 8003b10:	40013800 	.word	0x40013800
 8003b14:	40021000 	.word	0x40021000
 8003b18:	40004400 	.word	0x40004400
 8003b1c:	40004800 	.word	0x40004800
 8003b20:	40004c00 	.word	0x40004c00
 8003b24:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003b32:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f000 812a 	beq.w	8003d90 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b40:	4a9e      	ldr	r2, [pc, #632]	@ (8003dbc <UART_SetConfig+0x590>)
 8003b42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b46:	461a      	mov	r2, r3
 8003b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b4e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	4613      	mov	r3, r2
 8003b56:	005b      	lsls	r3, r3, #1
 8003b58:	4413      	add	r3, r2
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d305      	bcc.n	8003b6c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d903      	bls.n	8003b74 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003b72:	e10d      	b.n	8003d90 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b76:	2200      	movs	r2, #0
 8003b78:	60bb      	str	r3, [r7, #8]
 8003b7a:	60fa      	str	r2, [r7, #12]
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b80:	4a8e      	ldr	r2, [pc, #568]	@ (8003dbc <UART_SetConfig+0x590>)
 8003b82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	2200      	movs	r2, #0
 8003b8a:	603b      	str	r3, [r7, #0]
 8003b8c:	607a      	str	r2, [r7, #4]
 8003b8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003b96:	f7fc fb9b 	bl	80002d0 <__aeabi_uldivmod>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	4610      	mov	r0, r2
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	f04f 0200 	mov.w	r2, #0
 8003ba6:	f04f 0300 	mov.w	r3, #0
 8003baa:	020b      	lsls	r3, r1, #8
 8003bac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003bb0:	0202      	lsls	r2, r0, #8
 8003bb2:	6979      	ldr	r1, [r7, #20]
 8003bb4:	6849      	ldr	r1, [r1, #4]
 8003bb6:	0849      	lsrs	r1, r1, #1
 8003bb8:	2000      	movs	r0, #0
 8003bba:	460c      	mov	r4, r1
 8003bbc:	4605      	mov	r5, r0
 8003bbe:	eb12 0804 	adds.w	r8, r2, r4
 8003bc2:	eb43 0905 	adc.w	r9, r3, r5
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	469a      	mov	sl, r3
 8003bce:	4693      	mov	fp, r2
 8003bd0:	4652      	mov	r2, sl
 8003bd2:	465b      	mov	r3, fp
 8003bd4:	4640      	mov	r0, r8
 8003bd6:	4649      	mov	r1, r9
 8003bd8:	f7fc fb7a 	bl	80002d0 <__aeabi_uldivmod>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	460b      	mov	r3, r1
 8003be0:	4613      	mov	r3, r2
 8003be2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003be4:	6a3b      	ldr	r3, [r7, #32]
 8003be6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bea:	d308      	bcc.n	8003bfe <UART_SetConfig+0x3d2>
 8003bec:	6a3b      	ldr	r3, [r7, #32]
 8003bee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003bf2:	d204      	bcs.n	8003bfe <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6a3a      	ldr	r2, [r7, #32]
 8003bfa:	60da      	str	r2, [r3, #12]
 8003bfc:	e0c8      	b.n	8003d90 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003c04:	e0c4      	b.n	8003d90 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c0e:	d167      	bne.n	8003ce0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003c10:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003c14:	2b08      	cmp	r3, #8
 8003c16:	d828      	bhi.n	8003c6a <UART_SetConfig+0x43e>
 8003c18:	a201      	add	r2, pc, #4	@ (adr r2, 8003c20 <UART_SetConfig+0x3f4>)
 8003c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c1e:	bf00      	nop
 8003c20:	08003c45 	.word	0x08003c45
 8003c24:	08003c4d 	.word	0x08003c4d
 8003c28:	08003c55 	.word	0x08003c55
 8003c2c:	08003c6b 	.word	0x08003c6b
 8003c30:	08003c5b 	.word	0x08003c5b
 8003c34:	08003c6b 	.word	0x08003c6b
 8003c38:	08003c6b 	.word	0x08003c6b
 8003c3c:	08003c6b 	.word	0x08003c6b
 8003c40:	08003c63 	.word	0x08003c63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c44:	f7fe fb7e 	bl	8002344 <HAL_RCC_GetPCLK1Freq>
 8003c48:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c4a:	e014      	b.n	8003c76 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c4c:	f7fe fb90 	bl	8002370 <HAL_RCC_GetPCLK2Freq>
 8003c50:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c52:	e010      	b.n	8003c76 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c54:	4b5a      	ldr	r3, [pc, #360]	@ (8003dc0 <UART_SetConfig+0x594>)
 8003c56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003c58:	e00d      	b.n	8003c76 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c5a:	f7fe fb05 	bl	8002268 <HAL_RCC_GetSysClockFreq>
 8003c5e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c60:	e009      	b.n	8003c76 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003c68:	e005      	b.n	8003c76 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003c74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 8089 	beq.w	8003d90 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c82:	4a4e      	ldr	r2, [pc, #312]	@ (8003dbc <UART_SetConfig+0x590>)
 8003c84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c88:	461a      	mov	r2, r3
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c90:	005a      	lsls	r2, r3, #1
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	085b      	lsrs	r3, r3, #1
 8003c98:	441a      	add	r2, r3
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ca4:	6a3b      	ldr	r3, [r7, #32]
 8003ca6:	2b0f      	cmp	r3, #15
 8003ca8:	d916      	bls.n	8003cd8 <UART_SetConfig+0x4ac>
 8003caa:	6a3b      	ldr	r3, [r7, #32]
 8003cac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cb0:	d212      	bcs.n	8003cd8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cb2:	6a3b      	ldr	r3, [r7, #32]
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	f023 030f 	bic.w	r3, r3, #15
 8003cba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003cbc:	6a3b      	ldr	r3, [r7, #32]
 8003cbe:	085b      	lsrs	r3, r3, #1
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	f003 0307 	and.w	r3, r3, #7
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	8bfb      	ldrh	r3, [r7, #30]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	8bfa      	ldrh	r2, [r7, #30]
 8003cd4:	60da      	str	r2, [r3, #12]
 8003cd6:	e05b      	b.n	8003d90 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003cde:	e057      	b.n	8003d90 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ce0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003ce4:	2b08      	cmp	r3, #8
 8003ce6:	d828      	bhi.n	8003d3a <UART_SetConfig+0x50e>
 8003ce8:	a201      	add	r2, pc, #4	@ (adr r2, 8003cf0 <UART_SetConfig+0x4c4>)
 8003cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cee:	bf00      	nop
 8003cf0:	08003d15 	.word	0x08003d15
 8003cf4:	08003d1d 	.word	0x08003d1d
 8003cf8:	08003d25 	.word	0x08003d25
 8003cfc:	08003d3b 	.word	0x08003d3b
 8003d00:	08003d2b 	.word	0x08003d2b
 8003d04:	08003d3b 	.word	0x08003d3b
 8003d08:	08003d3b 	.word	0x08003d3b
 8003d0c:	08003d3b 	.word	0x08003d3b
 8003d10:	08003d33 	.word	0x08003d33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d14:	f7fe fb16 	bl	8002344 <HAL_RCC_GetPCLK1Freq>
 8003d18:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003d1a:	e014      	b.n	8003d46 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d1c:	f7fe fb28 	bl	8002370 <HAL_RCC_GetPCLK2Freq>
 8003d20:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003d22:	e010      	b.n	8003d46 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d24:	4b26      	ldr	r3, [pc, #152]	@ (8003dc0 <UART_SetConfig+0x594>)
 8003d26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003d28:	e00d      	b.n	8003d46 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d2a:	f7fe fa9d 	bl	8002268 <HAL_RCC_GetSysClockFreq>
 8003d2e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003d30:	e009      	b.n	8003d46 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003d38:	e005      	b.n	8003d46 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003d44:	bf00      	nop
    }

    if (pclk != 0U)
 8003d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d021      	beq.n	8003d90 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d50:	4a1a      	ldr	r2, [pc, #104]	@ (8003dbc <UART_SetConfig+0x590>)
 8003d52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d56:	461a      	mov	r2, r3
 8003d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5a:	fbb3 f2f2 	udiv	r2, r3, r2
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	085b      	lsrs	r3, r3, #1
 8003d64:	441a      	add	r2, r3
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d6e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d70:	6a3b      	ldr	r3, [r7, #32]
 8003d72:	2b0f      	cmp	r3, #15
 8003d74:	d909      	bls.n	8003d8a <UART_SetConfig+0x55e>
 8003d76:	6a3b      	ldr	r3, [r7, #32]
 8003d78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d7c:	d205      	bcs.n	8003d8a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d7e:	6a3b      	ldr	r3, [r7, #32]
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	60da      	str	r2, [r3, #12]
 8003d88:	e002      	b.n	8003d90 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	2200      	movs	r2, #0
 8003da4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	2200      	movs	r2, #0
 8003daa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003dac:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3730      	adds	r7, #48	@ 0x30
 8003db4:	46bd      	mov	sp, r7
 8003db6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dba:	bf00      	nop
 8003dbc:	08004e14 	.word	0x08004e14
 8003dc0:	00f42400 	.word	0x00f42400

08003dc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd0:	f003 0308 	and.w	r3, r3, #8
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00a      	beq.n	8003dee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00a      	beq.n	8003e10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00a      	beq.n	8003e32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e36:	f003 0304 	and.w	r3, r3, #4
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00a      	beq.n	8003e54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	430a      	orrs	r2, r1
 8003e52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e58:	f003 0310 	and.w	r3, r3, #16
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00a      	beq.n	8003e76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	430a      	orrs	r2, r1
 8003e74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e7a:	f003 0320 	and.w	r3, r3, #32
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00a      	beq.n	8003e98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	430a      	orrs	r2, r1
 8003e96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d01a      	beq.n	8003eda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ebe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ec2:	d10a      	bne.n	8003eda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ede:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00a      	beq.n	8003efc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	605a      	str	r2, [r3, #4]
  }
}
 8003efc:	bf00      	nop
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b098      	sub	sp, #96	@ 0x60
 8003f0c:	af02      	add	r7, sp, #8
 8003f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f18:	f7fd f9de 	bl	80012d8 <HAL_GetTick>
 8003f1c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0308 	and.w	r3, r3, #8
 8003f28:	2b08      	cmp	r3, #8
 8003f2a:	d12f      	bne.n	8003f8c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003f30:	9300      	str	r3, [sp, #0]
 8003f32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f34:	2200      	movs	r2, #0
 8003f36:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f88e 	bl	800405c <UART_WaitOnFlagUntilTimeout>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d022      	beq.n	8003f8c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f4e:	e853 3f00 	ldrex	r3, [r3]
 8003f52:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	461a      	mov	r2, r3
 8003f62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f64:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f66:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f6c:	e841 2300 	strex	r3, r2, [r1]
 8003f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1e6      	bne.n	8003f46 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e063      	b.n	8004054 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0304 	and.w	r3, r3, #4
 8003f96:	2b04      	cmp	r3, #4
 8003f98:	d149      	bne.n	800402e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f9a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 f857 	bl	800405c <UART_WaitOnFlagUntilTimeout>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d03c      	beq.n	800402e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fbc:	e853 3f00 	ldrex	r3, [r3]
 8003fc0:	623b      	str	r3, [r7, #32]
   return(result);
 8003fc2:	6a3b      	ldr	r3, [r7, #32]
 8003fc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003fc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	461a      	mov	r2, r3
 8003fd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fd2:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003fd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fda:	e841 2300 	strex	r3, r2, [r1]
 8003fde:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1e6      	bne.n	8003fb4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	3308      	adds	r3, #8
 8003fec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	e853 3f00 	ldrex	r3, [r3]
 8003ff4:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f023 0301 	bic.w	r3, r3, #1
 8003ffc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	3308      	adds	r3, #8
 8004004:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004006:	61fa      	str	r2, [r7, #28]
 8004008:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400a:	69b9      	ldr	r1, [r7, #24]
 800400c:	69fa      	ldr	r2, [r7, #28]
 800400e:	e841 2300 	strex	r3, r2, [r1]
 8004012:	617b      	str	r3, [r7, #20]
   return(result);
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1e5      	bne.n	8003fe6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2220      	movs	r2, #32
 800401e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e012      	b.n	8004054 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2220      	movs	r2, #32
 8004032:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2220      	movs	r2, #32
 800403a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3758      	adds	r7, #88	@ 0x58
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	603b      	str	r3, [r7, #0]
 8004068:	4613      	mov	r3, r2
 800406a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800406c:	e04f      	b.n	800410e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004074:	d04b      	beq.n	800410e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004076:	f7fd f92f 	bl	80012d8 <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	429a      	cmp	r2, r3
 8004084:	d302      	bcc.n	800408c <UART_WaitOnFlagUntilTimeout+0x30>
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d101      	bne.n	8004090 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e04e      	b.n	800412e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0304 	and.w	r3, r3, #4
 800409a:	2b00      	cmp	r3, #0
 800409c:	d037      	beq.n	800410e <UART_WaitOnFlagUntilTimeout+0xb2>
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	2b80      	cmp	r3, #128	@ 0x80
 80040a2:	d034      	beq.n	800410e <UART_WaitOnFlagUntilTimeout+0xb2>
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	2b40      	cmp	r3, #64	@ 0x40
 80040a8:	d031      	beq.n	800410e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	69db      	ldr	r3, [r3, #28]
 80040b0:	f003 0308 	and.w	r3, r3, #8
 80040b4:	2b08      	cmp	r3, #8
 80040b6:	d110      	bne.n	80040da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2208      	movs	r2, #8
 80040be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f000 f838 	bl	8004136 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2208      	movs	r2, #8
 80040ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e029      	b.n	800412e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040e8:	d111      	bne.n	800410e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80040f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f000 f81e 	bl	8004136 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2220      	movs	r2, #32
 80040fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e00f      	b.n	800412e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	69da      	ldr	r2, [r3, #28]
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	4013      	ands	r3, r2
 8004118:	68ba      	ldr	r2, [r7, #8]
 800411a:	429a      	cmp	r2, r3
 800411c:	bf0c      	ite	eq
 800411e:	2301      	moveq	r3, #1
 8004120:	2300      	movne	r3, #0
 8004122:	b2db      	uxtb	r3, r3
 8004124:	461a      	mov	r2, r3
 8004126:	79fb      	ldrb	r3, [r7, #7]
 8004128:	429a      	cmp	r2, r3
 800412a:	d0a0      	beq.n	800406e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3710      	adds	r7, #16
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004136:	b480      	push	{r7}
 8004138:	b095      	sub	sp, #84	@ 0x54
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004144:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004146:	e853 3f00 	ldrex	r3, [r3]
 800414a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800414c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800414e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004152:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	461a      	mov	r2, r3
 800415a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800415c:	643b      	str	r3, [r7, #64]	@ 0x40
 800415e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004160:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004162:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004164:	e841 2300 	strex	r3, r2, [r1]
 8004168:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800416a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1e6      	bne.n	800413e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	3308      	adds	r3, #8
 8004176:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004178:	6a3b      	ldr	r3, [r7, #32]
 800417a:	e853 3f00 	ldrex	r3, [r3]
 800417e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004186:	f023 0301 	bic.w	r3, r3, #1
 800418a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	3308      	adds	r3, #8
 8004192:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004194:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004196:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004198:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800419a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800419c:	e841 2300 	strex	r3, r2, [r1]
 80041a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80041a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1e3      	bne.n	8004170 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d118      	bne.n	80041e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	e853 3f00 	ldrex	r3, [r3]
 80041bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	f023 0310 	bic.w	r3, r3, #16
 80041c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	461a      	mov	r2, r3
 80041cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041ce:	61bb      	str	r3, [r7, #24]
 80041d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d2:	6979      	ldr	r1, [r7, #20]
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	e841 2300 	strex	r3, r2, [r1]
 80041da:	613b      	str	r3, [r7, #16]
   return(result);
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1e6      	bne.n	80041b0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2220      	movs	r2, #32
 80041e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80041f6:	bf00      	nop
 80041f8:	3754      	adds	r7, #84	@ 0x54
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004202:	b480      	push	{r7}
 8004204:	b085      	sub	sp, #20
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004210:	2b01      	cmp	r3, #1
 8004212:	d101      	bne.n	8004218 <HAL_UARTEx_DisableFifoMode+0x16>
 8004214:	2302      	movs	r3, #2
 8004216:	e027      	b.n	8004268 <HAL_UARTEx_DisableFifoMode+0x66>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2224      	movs	r2, #36	@ 0x24
 8004224:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f022 0201 	bic.w	r2, r2, #1
 800423e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004246:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2220      	movs	r2, #32
 800425a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3714      	adds	r7, #20
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004284:	2b01      	cmp	r3, #1
 8004286:	d101      	bne.n	800428c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004288:	2302      	movs	r3, #2
 800428a:	e02d      	b.n	80042e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2224      	movs	r2, #36	@ 0x24
 8004298:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f022 0201 	bic.w	r2, r2, #1
 80042b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	430a      	orrs	r2, r1
 80042c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 f84f 	bl	800436c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2220      	movs	r2, #32
 80042da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3710      	adds	r7, #16
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004300:	2b01      	cmp	r3, #1
 8004302:	d101      	bne.n	8004308 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004304:	2302      	movs	r3, #2
 8004306:	e02d      	b.n	8004364 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2224      	movs	r2, #36	@ 0x24
 8004314:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f022 0201 	bic.w	r2, r2, #1
 800432e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	683a      	ldr	r2, [r7, #0]
 8004340:	430a      	orrs	r2, r1
 8004342:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 f811 	bl	800436c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2220      	movs	r2, #32
 8004356:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3710      	adds	r7, #16
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004378:	2b00      	cmp	r3, #0
 800437a:	d108      	bne.n	800438e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800438c:	e031      	b.n	80043f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800438e:	2308      	movs	r3, #8
 8004390:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004392:	2308      	movs	r3, #8
 8004394:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	0e5b      	lsrs	r3, r3, #25
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	f003 0307 	and.w	r3, r3, #7
 80043a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	0f5b      	lsrs	r3, r3, #29
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	f003 0307 	and.w	r3, r3, #7
 80043b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80043b6:	7bbb      	ldrb	r3, [r7, #14]
 80043b8:	7b3a      	ldrb	r2, [r7, #12]
 80043ba:	4911      	ldr	r1, [pc, #68]	@ (8004400 <UARTEx_SetNbDataToProcess+0x94>)
 80043bc:	5c8a      	ldrb	r2, [r1, r2]
 80043be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80043c2:	7b3a      	ldrb	r2, [r7, #12]
 80043c4:	490f      	ldr	r1, [pc, #60]	@ (8004404 <UARTEx_SetNbDataToProcess+0x98>)
 80043c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80043c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80043d4:	7bfb      	ldrb	r3, [r7, #15]
 80043d6:	7b7a      	ldrb	r2, [r7, #13]
 80043d8:	4909      	ldr	r1, [pc, #36]	@ (8004400 <UARTEx_SetNbDataToProcess+0x94>)
 80043da:	5c8a      	ldrb	r2, [r1, r2]
 80043dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80043e0:	7b7a      	ldrb	r2, [r7, #13]
 80043e2:	4908      	ldr	r1, [pc, #32]	@ (8004404 <UARTEx_SetNbDataToProcess+0x98>)
 80043e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80043e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80043f2:	bf00      	nop
 80043f4:	3714      	adds	r7, #20
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	08004e2c 	.word	0x08004e2c
 8004404:	08004e34 	.word	0x08004e34

08004408 <siprintf>:
 8004408:	b40e      	push	{r1, r2, r3}
 800440a:	b500      	push	{lr}
 800440c:	b09c      	sub	sp, #112	@ 0x70
 800440e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004410:	9002      	str	r0, [sp, #8]
 8004412:	9006      	str	r0, [sp, #24]
 8004414:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004418:	4809      	ldr	r0, [pc, #36]	@ (8004440 <siprintf+0x38>)
 800441a:	9107      	str	r1, [sp, #28]
 800441c:	9104      	str	r1, [sp, #16]
 800441e:	4909      	ldr	r1, [pc, #36]	@ (8004444 <siprintf+0x3c>)
 8004420:	f853 2b04 	ldr.w	r2, [r3], #4
 8004424:	9105      	str	r1, [sp, #20]
 8004426:	6800      	ldr	r0, [r0, #0]
 8004428:	9301      	str	r3, [sp, #4]
 800442a:	a902      	add	r1, sp, #8
 800442c:	f000 f994 	bl	8004758 <_svfiprintf_r>
 8004430:	9b02      	ldr	r3, [sp, #8]
 8004432:	2200      	movs	r2, #0
 8004434:	701a      	strb	r2, [r3, #0]
 8004436:	b01c      	add	sp, #112	@ 0x70
 8004438:	f85d eb04 	ldr.w	lr, [sp], #4
 800443c:	b003      	add	sp, #12
 800443e:	4770      	bx	lr
 8004440:	20000014 	.word	0x20000014
 8004444:	ffff0208 	.word	0xffff0208

08004448 <memset>:
 8004448:	4402      	add	r2, r0
 800444a:	4603      	mov	r3, r0
 800444c:	4293      	cmp	r3, r2
 800444e:	d100      	bne.n	8004452 <memset+0xa>
 8004450:	4770      	bx	lr
 8004452:	f803 1b01 	strb.w	r1, [r3], #1
 8004456:	e7f9      	b.n	800444c <memset+0x4>

08004458 <__errno>:
 8004458:	4b01      	ldr	r3, [pc, #4]	@ (8004460 <__errno+0x8>)
 800445a:	6818      	ldr	r0, [r3, #0]
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	20000014 	.word	0x20000014

08004464 <__libc_init_array>:
 8004464:	b570      	push	{r4, r5, r6, lr}
 8004466:	4d0d      	ldr	r5, [pc, #52]	@ (800449c <__libc_init_array+0x38>)
 8004468:	4c0d      	ldr	r4, [pc, #52]	@ (80044a0 <__libc_init_array+0x3c>)
 800446a:	1b64      	subs	r4, r4, r5
 800446c:	10a4      	asrs	r4, r4, #2
 800446e:	2600      	movs	r6, #0
 8004470:	42a6      	cmp	r6, r4
 8004472:	d109      	bne.n	8004488 <__libc_init_array+0x24>
 8004474:	4d0b      	ldr	r5, [pc, #44]	@ (80044a4 <__libc_init_array+0x40>)
 8004476:	4c0c      	ldr	r4, [pc, #48]	@ (80044a8 <__libc_init_array+0x44>)
 8004478:	f000 fc66 	bl	8004d48 <_init>
 800447c:	1b64      	subs	r4, r4, r5
 800447e:	10a4      	asrs	r4, r4, #2
 8004480:	2600      	movs	r6, #0
 8004482:	42a6      	cmp	r6, r4
 8004484:	d105      	bne.n	8004492 <__libc_init_array+0x2e>
 8004486:	bd70      	pop	{r4, r5, r6, pc}
 8004488:	f855 3b04 	ldr.w	r3, [r5], #4
 800448c:	4798      	blx	r3
 800448e:	3601      	adds	r6, #1
 8004490:	e7ee      	b.n	8004470 <__libc_init_array+0xc>
 8004492:	f855 3b04 	ldr.w	r3, [r5], #4
 8004496:	4798      	blx	r3
 8004498:	3601      	adds	r6, #1
 800449a:	e7f2      	b.n	8004482 <__libc_init_array+0x1e>
 800449c:	08004e78 	.word	0x08004e78
 80044a0:	08004e78 	.word	0x08004e78
 80044a4:	08004e78 	.word	0x08004e78
 80044a8:	08004e7c 	.word	0x08004e7c

080044ac <__retarget_lock_acquire_recursive>:
 80044ac:	4770      	bx	lr

080044ae <__retarget_lock_release_recursive>:
 80044ae:	4770      	bx	lr

080044b0 <_free_r>:
 80044b0:	b538      	push	{r3, r4, r5, lr}
 80044b2:	4605      	mov	r5, r0
 80044b4:	2900      	cmp	r1, #0
 80044b6:	d041      	beq.n	800453c <_free_r+0x8c>
 80044b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044bc:	1f0c      	subs	r4, r1, #4
 80044be:	2b00      	cmp	r3, #0
 80044c0:	bfb8      	it	lt
 80044c2:	18e4      	addlt	r4, r4, r3
 80044c4:	f000 f8e0 	bl	8004688 <__malloc_lock>
 80044c8:	4a1d      	ldr	r2, [pc, #116]	@ (8004540 <_free_r+0x90>)
 80044ca:	6813      	ldr	r3, [r2, #0]
 80044cc:	b933      	cbnz	r3, 80044dc <_free_r+0x2c>
 80044ce:	6063      	str	r3, [r4, #4]
 80044d0:	6014      	str	r4, [r2, #0]
 80044d2:	4628      	mov	r0, r5
 80044d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044d8:	f000 b8dc 	b.w	8004694 <__malloc_unlock>
 80044dc:	42a3      	cmp	r3, r4
 80044de:	d908      	bls.n	80044f2 <_free_r+0x42>
 80044e0:	6820      	ldr	r0, [r4, #0]
 80044e2:	1821      	adds	r1, r4, r0
 80044e4:	428b      	cmp	r3, r1
 80044e6:	bf01      	itttt	eq
 80044e8:	6819      	ldreq	r1, [r3, #0]
 80044ea:	685b      	ldreq	r3, [r3, #4]
 80044ec:	1809      	addeq	r1, r1, r0
 80044ee:	6021      	streq	r1, [r4, #0]
 80044f0:	e7ed      	b.n	80044ce <_free_r+0x1e>
 80044f2:	461a      	mov	r2, r3
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	b10b      	cbz	r3, 80044fc <_free_r+0x4c>
 80044f8:	42a3      	cmp	r3, r4
 80044fa:	d9fa      	bls.n	80044f2 <_free_r+0x42>
 80044fc:	6811      	ldr	r1, [r2, #0]
 80044fe:	1850      	adds	r0, r2, r1
 8004500:	42a0      	cmp	r0, r4
 8004502:	d10b      	bne.n	800451c <_free_r+0x6c>
 8004504:	6820      	ldr	r0, [r4, #0]
 8004506:	4401      	add	r1, r0
 8004508:	1850      	adds	r0, r2, r1
 800450a:	4283      	cmp	r3, r0
 800450c:	6011      	str	r1, [r2, #0]
 800450e:	d1e0      	bne.n	80044d2 <_free_r+0x22>
 8004510:	6818      	ldr	r0, [r3, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	6053      	str	r3, [r2, #4]
 8004516:	4408      	add	r0, r1
 8004518:	6010      	str	r0, [r2, #0]
 800451a:	e7da      	b.n	80044d2 <_free_r+0x22>
 800451c:	d902      	bls.n	8004524 <_free_r+0x74>
 800451e:	230c      	movs	r3, #12
 8004520:	602b      	str	r3, [r5, #0]
 8004522:	e7d6      	b.n	80044d2 <_free_r+0x22>
 8004524:	6820      	ldr	r0, [r4, #0]
 8004526:	1821      	adds	r1, r4, r0
 8004528:	428b      	cmp	r3, r1
 800452a:	bf04      	itt	eq
 800452c:	6819      	ldreq	r1, [r3, #0]
 800452e:	685b      	ldreq	r3, [r3, #4]
 8004530:	6063      	str	r3, [r4, #4]
 8004532:	bf04      	itt	eq
 8004534:	1809      	addeq	r1, r1, r0
 8004536:	6021      	streq	r1, [r4, #0]
 8004538:	6054      	str	r4, [r2, #4]
 800453a:	e7ca      	b.n	80044d2 <_free_r+0x22>
 800453c:	bd38      	pop	{r3, r4, r5, pc}
 800453e:	bf00      	nop
 8004540:	20000348 	.word	0x20000348

08004544 <sbrk_aligned>:
 8004544:	b570      	push	{r4, r5, r6, lr}
 8004546:	4e0f      	ldr	r6, [pc, #60]	@ (8004584 <sbrk_aligned+0x40>)
 8004548:	460c      	mov	r4, r1
 800454a:	6831      	ldr	r1, [r6, #0]
 800454c:	4605      	mov	r5, r0
 800454e:	b911      	cbnz	r1, 8004556 <sbrk_aligned+0x12>
 8004550:	f000 fba6 	bl	8004ca0 <_sbrk_r>
 8004554:	6030      	str	r0, [r6, #0]
 8004556:	4621      	mov	r1, r4
 8004558:	4628      	mov	r0, r5
 800455a:	f000 fba1 	bl	8004ca0 <_sbrk_r>
 800455e:	1c43      	adds	r3, r0, #1
 8004560:	d103      	bne.n	800456a <sbrk_aligned+0x26>
 8004562:	f04f 34ff 	mov.w	r4, #4294967295
 8004566:	4620      	mov	r0, r4
 8004568:	bd70      	pop	{r4, r5, r6, pc}
 800456a:	1cc4      	adds	r4, r0, #3
 800456c:	f024 0403 	bic.w	r4, r4, #3
 8004570:	42a0      	cmp	r0, r4
 8004572:	d0f8      	beq.n	8004566 <sbrk_aligned+0x22>
 8004574:	1a21      	subs	r1, r4, r0
 8004576:	4628      	mov	r0, r5
 8004578:	f000 fb92 	bl	8004ca0 <_sbrk_r>
 800457c:	3001      	adds	r0, #1
 800457e:	d1f2      	bne.n	8004566 <sbrk_aligned+0x22>
 8004580:	e7ef      	b.n	8004562 <sbrk_aligned+0x1e>
 8004582:	bf00      	nop
 8004584:	20000344 	.word	0x20000344

08004588 <_malloc_r>:
 8004588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800458c:	1ccd      	adds	r5, r1, #3
 800458e:	f025 0503 	bic.w	r5, r5, #3
 8004592:	3508      	adds	r5, #8
 8004594:	2d0c      	cmp	r5, #12
 8004596:	bf38      	it	cc
 8004598:	250c      	movcc	r5, #12
 800459a:	2d00      	cmp	r5, #0
 800459c:	4606      	mov	r6, r0
 800459e:	db01      	blt.n	80045a4 <_malloc_r+0x1c>
 80045a0:	42a9      	cmp	r1, r5
 80045a2:	d904      	bls.n	80045ae <_malloc_r+0x26>
 80045a4:	230c      	movs	r3, #12
 80045a6:	6033      	str	r3, [r6, #0]
 80045a8:	2000      	movs	r0, #0
 80045aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004684 <_malloc_r+0xfc>
 80045b2:	f000 f869 	bl	8004688 <__malloc_lock>
 80045b6:	f8d8 3000 	ldr.w	r3, [r8]
 80045ba:	461c      	mov	r4, r3
 80045bc:	bb44      	cbnz	r4, 8004610 <_malloc_r+0x88>
 80045be:	4629      	mov	r1, r5
 80045c0:	4630      	mov	r0, r6
 80045c2:	f7ff ffbf 	bl	8004544 <sbrk_aligned>
 80045c6:	1c43      	adds	r3, r0, #1
 80045c8:	4604      	mov	r4, r0
 80045ca:	d158      	bne.n	800467e <_malloc_r+0xf6>
 80045cc:	f8d8 4000 	ldr.w	r4, [r8]
 80045d0:	4627      	mov	r7, r4
 80045d2:	2f00      	cmp	r7, #0
 80045d4:	d143      	bne.n	800465e <_malloc_r+0xd6>
 80045d6:	2c00      	cmp	r4, #0
 80045d8:	d04b      	beq.n	8004672 <_malloc_r+0xea>
 80045da:	6823      	ldr	r3, [r4, #0]
 80045dc:	4639      	mov	r1, r7
 80045de:	4630      	mov	r0, r6
 80045e0:	eb04 0903 	add.w	r9, r4, r3
 80045e4:	f000 fb5c 	bl	8004ca0 <_sbrk_r>
 80045e8:	4581      	cmp	r9, r0
 80045ea:	d142      	bne.n	8004672 <_malloc_r+0xea>
 80045ec:	6821      	ldr	r1, [r4, #0]
 80045ee:	1a6d      	subs	r5, r5, r1
 80045f0:	4629      	mov	r1, r5
 80045f2:	4630      	mov	r0, r6
 80045f4:	f7ff ffa6 	bl	8004544 <sbrk_aligned>
 80045f8:	3001      	adds	r0, #1
 80045fa:	d03a      	beq.n	8004672 <_malloc_r+0xea>
 80045fc:	6823      	ldr	r3, [r4, #0]
 80045fe:	442b      	add	r3, r5
 8004600:	6023      	str	r3, [r4, #0]
 8004602:	f8d8 3000 	ldr.w	r3, [r8]
 8004606:	685a      	ldr	r2, [r3, #4]
 8004608:	bb62      	cbnz	r2, 8004664 <_malloc_r+0xdc>
 800460a:	f8c8 7000 	str.w	r7, [r8]
 800460e:	e00f      	b.n	8004630 <_malloc_r+0xa8>
 8004610:	6822      	ldr	r2, [r4, #0]
 8004612:	1b52      	subs	r2, r2, r5
 8004614:	d420      	bmi.n	8004658 <_malloc_r+0xd0>
 8004616:	2a0b      	cmp	r2, #11
 8004618:	d917      	bls.n	800464a <_malloc_r+0xc2>
 800461a:	1961      	adds	r1, r4, r5
 800461c:	42a3      	cmp	r3, r4
 800461e:	6025      	str	r5, [r4, #0]
 8004620:	bf18      	it	ne
 8004622:	6059      	strne	r1, [r3, #4]
 8004624:	6863      	ldr	r3, [r4, #4]
 8004626:	bf08      	it	eq
 8004628:	f8c8 1000 	streq.w	r1, [r8]
 800462c:	5162      	str	r2, [r4, r5]
 800462e:	604b      	str	r3, [r1, #4]
 8004630:	4630      	mov	r0, r6
 8004632:	f000 f82f 	bl	8004694 <__malloc_unlock>
 8004636:	f104 000b 	add.w	r0, r4, #11
 800463a:	1d23      	adds	r3, r4, #4
 800463c:	f020 0007 	bic.w	r0, r0, #7
 8004640:	1ac2      	subs	r2, r0, r3
 8004642:	bf1c      	itt	ne
 8004644:	1a1b      	subne	r3, r3, r0
 8004646:	50a3      	strne	r3, [r4, r2]
 8004648:	e7af      	b.n	80045aa <_malloc_r+0x22>
 800464a:	6862      	ldr	r2, [r4, #4]
 800464c:	42a3      	cmp	r3, r4
 800464e:	bf0c      	ite	eq
 8004650:	f8c8 2000 	streq.w	r2, [r8]
 8004654:	605a      	strne	r2, [r3, #4]
 8004656:	e7eb      	b.n	8004630 <_malloc_r+0xa8>
 8004658:	4623      	mov	r3, r4
 800465a:	6864      	ldr	r4, [r4, #4]
 800465c:	e7ae      	b.n	80045bc <_malloc_r+0x34>
 800465e:	463c      	mov	r4, r7
 8004660:	687f      	ldr	r7, [r7, #4]
 8004662:	e7b6      	b.n	80045d2 <_malloc_r+0x4a>
 8004664:	461a      	mov	r2, r3
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	42a3      	cmp	r3, r4
 800466a:	d1fb      	bne.n	8004664 <_malloc_r+0xdc>
 800466c:	2300      	movs	r3, #0
 800466e:	6053      	str	r3, [r2, #4]
 8004670:	e7de      	b.n	8004630 <_malloc_r+0xa8>
 8004672:	230c      	movs	r3, #12
 8004674:	6033      	str	r3, [r6, #0]
 8004676:	4630      	mov	r0, r6
 8004678:	f000 f80c 	bl	8004694 <__malloc_unlock>
 800467c:	e794      	b.n	80045a8 <_malloc_r+0x20>
 800467e:	6005      	str	r5, [r0, #0]
 8004680:	e7d6      	b.n	8004630 <_malloc_r+0xa8>
 8004682:	bf00      	nop
 8004684:	20000348 	.word	0x20000348

08004688 <__malloc_lock>:
 8004688:	4801      	ldr	r0, [pc, #4]	@ (8004690 <__malloc_lock+0x8>)
 800468a:	f7ff bf0f 	b.w	80044ac <__retarget_lock_acquire_recursive>
 800468e:	bf00      	nop
 8004690:	20000340 	.word	0x20000340

08004694 <__malloc_unlock>:
 8004694:	4801      	ldr	r0, [pc, #4]	@ (800469c <__malloc_unlock+0x8>)
 8004696:	f7ff bf0a 	b.w	80044ae <__retarget_lock_release_recursive>
 800469a:	bf00      	nop
 800469c:	20000340 	.word	0x20000340

080046a0 <__ssputs_r>:
 80046a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046a4:	688e      	ldr	r6, [r1, #8]
 80046a6:	461f      	mov	r7, r3
 80046a8:	42be      	cmp	r6, r7
 80046aa:	680b      	ldr	r3, [r1, #0]
 80046ac:	4682      	mov	sl, r0
 80046ae:	460c      	mov	r4, r1
 80046b0:	4690      	mov	r8, r2
 80046b2:	d82d      	bhi.n	8004710 <__ssputs_r+0x70>
 80046b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80046b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80046bc:	d026      	beq.n	800470c <__ssputs_r+0x6c>
 80046be:	6965      	ldr	r5, [r4, #20]
 80046c0:	6909      	ldr	r1, [r1, #16]
 80046c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80046c6:	eba3 0901 	sub.w	r9, r3, r1
 80046ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80046ce:	1c7b      	adds	r3, r7, #1
 80046d0:	444b      	add	r3, r9
 80046d2:	106d      	asrs	r5, r5, #1
 80046d4:	429d      	cmp	r5, r3
 80046d6:	bf38      	it	cc
 80046d8:	461d      	movcc	r5, r3
 80046da:	0553      	lsls	r3, r2, #21
 80046dc:	d527      	bpl.n	800472e <__ssputs_r+0x8e>
 80046de:	4629      	mov	r1, r5
 80046e0:	f7ff ff52 	bl	8004588 <_malloc_r>
 80046e4:	4606      	mov	r6, r0
 80046e6:	b360      	cbz	r0, 8004742 <__ssputs_r+0xa2>
 80046e8:	6921      	ldr	r1, [r4, #16]
 80046ea:	464a      	mov	r2, r9
 80046ec:	f000 fae8 	bl	8004cc0 <memcpy>
 80046f0:	89a3      	ldrh	r3, [r4, #12]
 80046f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80046f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046fa:	81a3      	strh	r3, [r4, #12]
 80046fc:	6126      	str	r6, [r4, #16]
 80046fe:	6165      	str	r5, [r4, #20]
 8004700:	444e      	add	r6, r9
 8004702:	eba5 0509 	sub.w	r5, r5, r9
 8004706:	6026      	str	r6, [r4, #0]
 8004708:	60a5      	str	r5, [r4, #8]
 800470a:	463e      	mov	r6, r7
 800470c:	42be      	cmp	r6, r7
 800470e:	d900      	bls.n	8004712 <__ssputs_r+0x72>
 8004710:	463e      	mov	r6, r7
 8004712:	6820      	ldr	r0, [r4, #0]
 8004714:	4632      	mov	r2, r6
 8004716:	4641      	mov	r1, r8
 8004718:	f000 faa8 	bl	8004c6c <memmove>
 800471c:	68a3      	ldr	r3, [r4, #8]
 800471e:	1b9b      	subs	r3, r3, r6
 8004720:	60a3      	str	r3, [r4, #8]
 8004722:	6823      	ldr	r3, [r4, #0]
 8004724:	4433      	add	r3, r6
 8004726:	6023      	str	r3, [r4, #0]
 8004728:	2000      	movs	r0, #0
 800472a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800472e:	462a      	mov	r2, r5
 8004730:	f000 fad4 	bl	8004cdc <_realloc_r>
 8004734:	4606      	mov	r6, r0
 8004736:	2800      	cmp	r0, #0
 8004738:	d1e0      	bne.n	80046fc <__ssputs_r+0x5c>
 800473a:	6921      	ldr	r1, [r4, #16]
 800473c:	4650      	mov	r0, sl
 800473e:	f7ff feb7 	bl	80044b0 <_free_r>
 8004742:	230c      	movs	r3, #12
 8004744:	f8ca 3000 	str.w	r3, [sl]
 8004748:	89a3      	ldrh	r3, [r4, #12]
 800474a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800474e:	81a3      	strh	r3, [r4, #12]
 8004750:	f04f 30ff 	mov.w	r0, #4294967295
 8004754:	e7e9      	b.n	800472a <__ssputs_r+0x8a>
	...

08004758 <_svfiprintf_r>:
 8004758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800475c:	4698      	mov	r8, r3
 800475e:	898b      	ldrh	r3, [r1, #12]
 8004760:	061b      	lsls	r3, r3, #24
 8004762:	b09d      	sub	sp, #116	@ 0x74
 8004764:	4607      	mov	r7, r0
 8004766:	460d      	mov	r5, r1
 8004768:	4614      	mov	r4, r2
 800476a:	d510      	bpl.n	800478e <_svfiprintf_r+0x36>
 800476c:	690b      	ldr	r3, [r1, #16]
 800476e:	b973      	cbnz	r3, 800478e <_svfiprintf_r+0x36>
 8004770:	2140      	movs	r1, #64	@ 0x40
 8004772:	f7ff ff09 	bl	8004588 <_malloc_r>
 8004776:	6028      	str	r0, [r5, #0]
 8004778:	6128      	str	r0, [r5, #16]
 800477a:	b930      	cbnz	r0, 800478a <_svfiprintf_r+0x32>
 800477c:	230c      	movs	r3, #12
 800477e:	603b      	str	r3, [r7, #0]
 8004780:	f04f 30ff 	mov.w	r0, #4294967295
 8004784:	b01d      	add	sp, #116	@ 0x74
 8004786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800478a:	2340      	movs	r3, #64	@ 0x40
 800478c:	616b      	str	r3, [r5, #20]
 800478e:	2300      	movs	r3, #0
 8004790:	9309      	str	r3, [sp, #36]	@ 0x24
 8004792:	2320      	movs	r3, #32
 8004794:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004798:	f8cd 800c 	str.w	r8, [sp, #12]
 800479c:	2330      	movs	r3, #48	@ 0x30
 800479e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800493c <_svfiprintf_r+0x1e4>
 80047a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80047a6:	f04f 0901 	mov.w	r9, #1
 80047aa:	4623      	mov	r3, r4
 80047ac:	469a      	mov	sl, r3
 80047ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047b2:	b10a      	cbz	r2, 80047b8 <_svfiprintf_r+0x60>
 80047b4:	2a25      	cmp	r2, #37	@ 0x25
 80047b6:	d1f9      	bne.n	80047ac <_svfiprintf_r+0x54>
 80047b8:	ebba 0b04 	subs.w	fp, sl, r4
 80047bc:	d00b      	beq.n	80047d6 <_svfiprintf_r+0x7e>
 80047be:	465b      	mov	r3, fp
 80047c0:	4622      	mov	r2, r4
 80047c2:	4629      	mov	r1, r5
 80047c4:	4638      	mov	r0, r7
 80047c6:	f7ff ff6b 	bl	80046a0 <__ssputs_r>
 80047ca:	3001      	adds	r0, #1
 80047cc:	f000 80a7 	beq.w	800491e <_svfiprintf_r+0x1c6>
 80047d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80047d2:	445a      	add	r2, fp
 80047d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80047d6:	f89a 3000 	ldrb.w	r3, [sl]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	f000 809f 	beq.w	800491e <_svfiprintf_r+0x1c6>
 80047e0:	2300      	movs	r3, #0
 80047e2:	f04f 32ff 	mov.w	r2, #4294967295
 80047e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047ea:	f10a 0a01 	add.w	sl, sl, #1
 80047ee:	9304      	str	r3, [sp, #16]
 80047f0:	9307      	str	r3, [sp, #28]
 80047f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80047f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80047f8:	4654      	mov	r4, sl
 80047fa:	2205      	movs	r2, #5
 80047fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004800:	484e      	ldr	r0, [pc, #312]	@ (800493c <_svfiprintf_r+0x1e4>)
 8004802:	f7fb fd15 	bl	8000230 <memchr>
 8004806:	9a04      	ldr	r2, [sp, #16]
 8004808:	b9d8      	cbnz	r0, 8004842 <_svfiprintf_r+0xea>
 800480a:	06d0      	lsls	r0, r2, #27
 800480c:	bf44      	itt	mi
 800480e:	2320      	movmi	r3, #32
 8004810:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004814:	0711      	lsls	r1, r2, #28
 8004816:	bf44      	itt	mi
 8004818:	232b      	movmi	r3, #43	@ 0x2b
 800481a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800481e:	f89a 3000 	ldrb.w	r3, [sl]
 8004822:	2b2a      	cmp	r3, #42	@ 0x2a
 8004824:	d015      	beq.n	8004852 <_svfiprintf_r+0xfa>
 8004826:	9a07      	ldr	r2, [sp, #28]
 8004828:	4654      	mov	r4, sl
 800482a:	2000      	movs	r0, #0
 800482c:	f04f 0c0a 	mov.w	ip, #10
 8004830:	4621      	mov	r1, r4
 8004832:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004836:	3b30      	subs	r3, #48	@ 0x30
 8004838:	2b09      	cmp	r3, #9
 800483a:	d94b      	bls.n	80048d4 <_svfiprintf_r+0x17c>
 800483c:	b1b0      	cbz	r0, 800486c <_svfiprintf_r+0x114>
 800483e:	9207      	str	r2, [sp, #28]
 8004840:	e014      	b.n	800486c <_svfiprintf_r+0x114>
 8004842:	eba0 0308 	sub.w	r3, r0, r8
 8004846:	fa09 f303 	lsl.w	r3, r9, r3
 800484a:	4313      	orrs	r3, r2
 800484c:	9304      	str	r3, [sp, #16]
 800484e:	46a2      	mov	sl, r4
 8004850:	e7d2      	b.n	80047f8 <_svfiprintf_r+0xa0>
 8004852:	9b03      	ldr	r3, [sp, #12]
 8004854:	1d19      	adds	r1, r3, #4
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	9103      	str	r1, [sp, #12]
 800485a:	2b00      	cmp	r3, #0
 800485c:	bfbb      	ittet	lt
 800485e:	425b      	neglt	r3, r3
 8004860:	f042 0202 	orrlt.w	r2, r2, #2
 8004864:	9307      	strge	r3, [sp, #28]
 8004866:	9307      	strlt	r3, [sp, #28]
 8004868:	bfb8      	it	lt
 800486a:	9204      	strlt	r2, [sp, #16]
 800486c:	7823      	ldrb	r3, [r4, #0]
 800486e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004870:	d10a      	bne.n	8004888 <_svfiprintf_r+0x130>
 8004872:	7863      	ldrb	r3, [r4, #1]
 8004874:	2b2a      	cmp	r3, #42	@ 0x2a
 8004876:	d132      	bne.n	80048de <_svfiprintf_r+0x186>
 8004878:	9b03      	ldr	r3, [sp, #12]
 800487a:	1d1a      	adds	r2, r3, #4
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	9203      	str	r2, [sp, #12]
 8004880:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004884:	3402      	adds	r4, #2
 8004886:	9305      	str	r3, [sp, #20]
 8004888:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800494c <_svfiprintf_r+0x1f4>
 800488c:	7821      	ldrb	r1, [r4, #0]
 800488e:	2203      	movs	r2, #3
 8004890:	4650      	mov	r0, sl
 8004892:	f7fb fccd 	bl	8000230 <memchr>
 8004896:	b138      	cbz	r0, 80048a8 <_svfiprintf_r+0x150>
 8004898:	9b04      	ldr	r3, [sp, #16]
 800489a:	eba0 000a 	sub.w	r0, r0, sl
 800489e:	2240      	movs	r2, #64	@ 0x40
 80048a0:	4082      	lsls	r2, r0
 80048a2:	4313      	orrs	r3, r2
 80048a4:	3401      	adds	r4, #1
 80048a6:	9304      	str	r3, [sp, #16]
 80048a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048ac:	4824      	ldr	r0, [pc, #144]	@ (8004940 <_svfiprintf_r+0x1e8>)
 80048ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80048b2:	2206      	movs	r2, #6
 80048b4:	f7fb fcbc 	bl	8000230 <memchr>
 80048b8:	2800      	cmp	r0, #0
 80048ba:	d036      	beq.n	800492a <_svfiprintf_r+0x1d2>
 80048bc:	4b21      	ldr	r3, [pc, #132]	@ (8004944 <_svfiprintf_r+0x1ec>)
 80048be:	bb1b      	cbnz	r3, 8004908 <_svfiprintf_r+0x1b0>
 80048c0:	9b03      	ldr	r3, [sp, #12]
 80048c2:	3307      	adds	r3, #7
 80048c4:	f023 0307 	bic.w	r3, r3, #7
 80048c8:	3308      	adds	r3, #8
 80048ca:	9303      	str	r3, [sp, #12]
 80048cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048ce:	4433      	add	r3, r6
 80048d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80048d2:	e76a      	b.n	80047aa <_svfiprintf_r+0x52>
 80048d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80048d8:	460c      	mov	r4, r1
 80048da:	2001      	movs	r0, #1
 80048dc:	e7a8      	b.n	8004830 <_svfiprintf_r+0xd8>
 80048de:	2300      	movs	r3, #0
 80048e0:	3401      	adds	r4, #1
 80048e2:	9305      	str	r3, [sp, #20]
 80048e4:	4619      	mov	r1, r3
 80048e6:	f04f 0c0a 	mov.w	ip, #10
 80048ea:	4620      	mov	r0, r4
 80048ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048f0:	3a30      	subs	r2, #48	@ 0x30
 80048f2:	2a09      	cmp	r2, #9
 80048f4:	d903      	bls.n	80048fe <_svfiprintf_r+0x1a6>
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d0c6      	beq.n	8004888 <_svfiprintf_r+0x130>
 80048fa:	9105      	str	r1, [sp, #20]
 80048fc:	e7c4      	b.n	8004888 <_svfiprintf_r+0x130>
 80048fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8004902:	4604      	mov	r4, r0
 8004904:	2301      	movs	r3, #1
 8004906:	e7f0      	b.n	80048ea <_svfiprintf_r+0x192>
 8004908:	ab03      	add	r3, sp, #12
 800490a:	9300      	str	r3, [sp, #0]
 800490c:	462a      	mov	r2, r5
 800490e:	4b0e      	ldr	r3, [pc, #56]	@ (8004948 <_svfiprintf_r+0x1f0>)
 8004910:	a904      	add	r1, sp, #16
 8004912:	4638      	mov	r0, r7
 8004914:	f3af 8000 	nop.w
 8004918:	1c42      	adds	r2, r0, #1
 800491a:	4606      	mov	r6, r0
 800491c:	d1d6      	bne.n	80048cc <_svfiprintf_r+0x174>
 800491e:	89ab      	ldrh	r3, [r5, #12]
 8004920:	065b      	lsls	r3, r3, #25
 8004922:	f53f af2d 	bmi.w	8004780 <_svfiprintf_r+0x28>
 8004926:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004928:	e72c      	b.n	8004784 <_svfiprintf_r+0x2c>
 800492a:	ab03      	add	r3, sp, #12
 800492c:	9300      	str	r3, [sp, #0]
 800492e:	462a      	mov	r2, r5
 8004930:	4b05      	ldr	r3, [pc, #20]	@ (8004948 <_svfiprintf_r+0x1f0>)
 8004932:	a904      	add	r1, sp, #16
 8004934:	4638      	mov	r0, r7
 8004936:	f000 f879 	bl	8004a2c <_printf_i>
 800493a:	e7ed      	b.n	8004918 <_svfiprintf_r+0x1c0>
 800493c:	08004e3c 	.word	0x08004e3c
 8004940:	08004e46 	.word	0x08004e46
 8004944:	00000000 	.word	0x00000000
 8004948:	080046a1 	.word	0x080046a1
 800494c:	08004e42 	.word	0x08004e42

08004950 <_printf_common>:
 8004950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004954:	4616      	mov	r6, r2
 8004956:	4698      	mov	r8, r3
 8004958:	688a      	ldr	r2, [r1, #8]
 800495a:	690b      	ldr	r3, [r1, #16]
 800495c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004960:	4293      	cmp	r3, r2
 8004962:	bfb8      	it	lt
 8004964:	4613      	movlt	r3, r2
 8004966:	6033      	str	r3, [r6, #0]
 8004968:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800496c:	4607      	mov	r7, r0
 800496e:	460c      	mov	r4, r1
 8004970:	b10a      	cbz	r2, 8004976 <_printf_common+0x26>
 8004972:	3301      	adds	r3, #1
 8004974:	6033      	str	r3, [r6, #0]
 8004976:	6823      	ldr	r3, [r4, #0]
 8004978:	0699      	lsls	r1, r3, #26
 800497a:	bf42      	ittt	mi
 800497c:	6833      	ldrmi	r3, [r6, #0]
 800497e:	3302      	addmi	r3, #2
 8004980:	6033      	strmi	r3, [r6, #0]
 8004982:	6825      	ldr	r5, [r4, #0]
 8004984:	f015 0506 	ands.w	r5, r5, #6
 8004988:	d106      	bne.n	8004998 <_printf_common+0x48>
 800498a:	f104 0a19 	add.w	sl, r4, #25
 800498e:	68e3      	ldr	r3, [r4, #12]
 8004990:	6832      	ldr	r2, [r6, #0]
 8004992:	1a9b      	subs	r3, r3, r2
 8004994:	42ab      	cmp	r3, r5
 8004996:	dc26      	bgt.n	80049e6 <_printf_common+0x96>
 8004998:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800499c:	6822      	ldr	r2, [r4, #0]
 800499e:	3b00      	subs	r3, #0
 80049a0:	bf18      	it	ne
 80049a2:	2301      	movne	r3, #1
 80049a4:	0692      	lsls	r2, r2, #26
 80049a6:	d42b      	bmi.n	8004a00 <_printf_common+0xb0>
 80049a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80049ac:	4641      	mov	r1, r8
 80049ae:	4638      	mov	r0, r7
 80049b0:	47c8      	blx	r9
 80049b2:	3001      	adds	r0, #1
 80049b4:	d01e      	beq.n	80049f4 <_printf_common+0xa4>
 80049b6:	6823      	ldr	r3, [r4, #0]
 80049b8:	6922      	ldr	r2, [r4, #16]
 80049ba:	f003 0306 	and.w	r3, r3, #6
 80049be:	2b04      	cmp	r3, #4
 80049c0:	bf02      	ittt	eq
 80049c2:	68e5      	ldreq	r5, [r4, #12]
 80049c4:	6833      	ldreq	r3, [r6, #0]
 80049c6:	1aed      	subeq	r5, r5, r3
 80049c8:	68a3      	ldr	r3, [r4, #8]
 80049ca:	bf0c      	ite	eq
 80049cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049d0:	2500      	movne	r5, #0
 80049d2:	4293      	cmp	r3, r2
 80049d4:	bfc4      	itt	gt
 80049d6:	1a9b      	subgt	r3, r3, r2
 80049d8:	18ed      	addgt	r5, r5, r3
 80049da:	2600      	movs	r6, #0
 80049dc:	341a      	adds	r4, #26
 80049de:	42b5      	cmp	r5, r6
 80049e0:	d11a      	bne.n	8004a18 <_printf_common+0xc8>
 80049e2:	2000      	movs	r0, #0
 80049e4:	e008      	b.n	80049f8 <_printf_common+0xa8>
 80049e6:	2301      	movs	r3, #1
 80049e8:	4652      	mov	r2, sl
 80049ea:	4641      	mov	r1, r8
 80049ec:	4638      	mov	r0, r7
 80049ee:	47c8      	blx	r9
 80049f0:	3001      	adds	r0, #1
 80049f2:	d103      	bne.n	80049fc <_printf_common+0xac>
 80049f4:	f04f 30ff 	mov.w	r0, #4294967295
 80049f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049fc:	3501      	adds	r5, #1
 80049fe:	e7c6      	b.n	800498e <_printf_common+0x3e>
 8004a00:	18e1      	adds	r1, r4, r3
 8004a02:	1c5a      	adds	r2, r3, #1
 8004a04:	2030      	movs	r0, #48	@ 0x30
 8004a06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004a0a:	4422      	add	r2, r4
 8004a0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004a10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004a14:	3302      	adds	r3, #2
 8004a16:	e7c7      	b.n	80049a8 <_printf_common+0x58>
 8004a18:	2301      	movs	r3, #1
 8004a1a:	4622      	mov	r2, r4
 8004a1c:	4641      	mov	r1, r8
 8004a1e:	4638      	mov	r0, r7
 8004a20:	47c8      	blx	r9
 8004a22:	3001      	adds	r0, #1
 8004a24:	d0e6      	beq.n	80049f4 <_printf_common+0xa4>
 8004a26:	3601      	adds	r6, #1
 8004a28:	e7d9      	b.n	80049de <_printf_common+0x8e>
	...

08004a2c <_printf_i>:
 8004a2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a30:	7e0f      	ldrb	r7, [r1, #24]
 8004a32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004a34:	2f78      	cmp	r7, #120	@ 0x78
 8004a36:	4691      	mov	r9, r2
 8004a38:	4680      	mov	r8, r0
 8004a3a:	460c      	mov	r4, r1
 8004a3c:	469a      	mov	sl, r3
 8004a3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004a42:	d807      	bhi.n	8004a54 <_printf_i+0x28>
 8004a44:	2f62      	cmp	r7, #98	@ 0x62
 8004a46:	d80a      	bhi.n	8004a5e <_printf_i+0x32>
 8004a48:	2f00      	cmp	r7, #0
 8004a4a:	f000 80d2 	beq.w	8004bf2 <_printf_i+0x1c6>
 8004a4e:	2f58      	cmp	r7, #88	@ 0x58
 8004a50:	f000 80b9 	beq.w	8004bc6 <_printf_i+0x19a>
 8004a54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004a5c:	e03a      	b.n	8004ad4 <_printf_i+0xa8>
 8004a5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004a62:	2b15      	cmp	r3, #21
 8004a64:	d8f6      	bhi.n	8004a54 <_printf_i+0x28>
 8004a66:	a101      	add	r1, pc, #4	@ (adr r1, 8004a6c <_printf_i+0x40>)
 8004a68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a6c:	08004ac5 	.word	0x08004ac5
 8004a70:	08004ad9 	.word	0x08004ad9
 8004a74:	08004a55 	.word	0x08004a55
 8004a78:	08004a55 	.word	0x08004a55
 8004a7c:	08004a55 	.word	0x08004a55
 8004a80:	08004a55 	.word	0x08004a55
 8004a84:	08004ad9 	.word	0x08004ad9
 8004a88:	08004a55 	.word	0x08004a55
 8004a8c:	08004a55 	.word	0x08004a55
 8004a90:	08004a55 	.word	0x08004a55
 8004a94:	08004a55 	.word	0x08004a55
 8004a98:	08004bd9 	.word	0x08004bd9
 8004a9c:	08004b03 	.word	0x08004b03
 8004aa0:	08004b93 	.word	0x08004b93
 8004aa4:	08004a55 	.word	0x08004a55
 8004aa8:	08004a55 	.word	0x08004a55
 8004aac:	08004bfb 	.word	0x08004bfb
 8004ab0:	08004a55 	.word	0x08004a55
 8004ab4:	08004b03 	.word	0x08004b03
 8004ab8:	08004a55 	.word	0x08004a55
 8004abc:	08004a55 	.word	0x08004a55
 8004ac0:	08004b9b 	.word	0x08004b9b
 8004ac4:	6833      	ldr	r3, [r6, #0]
 8004ac6:	1d1a      	adds	r2, r3, #4
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	6032      	str	r2, [r6, #0]
 8004acc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ad0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e09d      	b.n	8004c14 <_printf_i+0x1e8>
 8004ad8:	6833      	ldr	r3, [r6, #0]
 8004ada:	6820      	ldr	r0, [r4, #0]
 8004adc:	1d19      	adds	r1, r3, #4
 8004ade:	6031      	str	r1, [r6, #0]
 8004ae0:	0606      	lsls	r6, r0, #24
 8004ae2:	d501      	bpl.n	8004ae8 <_printf_i+0xbc>
 8004ae4:	681d      	ldr	r5, [r3, #0]
 8004ae6:	e003      	b.n	8004af0 <_printf_i+0xc4>
 8004ae8:	0645      	lsls	r5, r0, #25
 8004aea:	d5fb      	bpl.n	8004ae4 <_printf_i+0xb8>
 8004aec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004af0:	2d00      	cmp	r5, #0
 8004af2:	da03      	bge.n	8004afc <_printf_i+0xd0>
 8004af4:	232d      	movs	r3, #45	@ 0x2d
 8004af6:	426d      	negs	r5, r5
 8004af8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004afc:	4859      	ldr	r0, [pc, #356]	@ (8004c64 <_printf_i+0x238>)
 8004afe:	230a      	movs	r3, #10
 8004b00:	e011      	b.n	8004b26 <_printf_i+0xfa>
 8004b02:	6821      	ldr	r1, [r4, #0]
 8004b04:	6833      	ldr	r3, [r6, #0]
 8004b06:	0608      	lsls	r0, r1, #24
 8004b08:	f853 5b04 	ldr.w	r5, [r3], #4
 8004b0c:	d402      	bmi.n	8004b14 <_printf_i+0xe8>
 8004b0e:	0649      	lsls	r1, r1, #25
 8004b10:	bf48      	it	mi
 8004b12:	b2ad      	uxthmi	r5, r5
 8004b14:	2f6f      	cmp	r7, #111	@ 0x6f
 8004b16:	4853      	ldr	r0, [pc, #332]	@ (8004c64 <_printf_i+0x238>)
 8004b18:	6033      	str	r3, [r6, #0]
 8004b1a:	bf14      	ite	ne
 8004b1c:	230a      	movne	r3, #10
 8004b1e:	2308      	moveq	r3, #8
 8004b20:	2100      	movs	r1, #0
 8004b22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004b26:	6866      	ldr	r6, [r4, #4]
 8004b28:	60a6      	str	r6, [r4, #8]
 8004b2a:	2e00      	cmp	r6, #0
 8004b2c:	bfa2      	ittt	ge
 8004b2e:	6821      	ldrge	r1, [r4, #0]
 8004b30:	f021 0104 	bicge.w	r1, r1, #4
 8004b34:	6021      	strge	r1, [r4, #0]
 8004b36:	b90d      	cbnz	r5, 8004b3c <_printf_i+0x110>
 8004b38:	2e00      	cmp	r6, #0
 8004b3a:	d04b      	beq.n	8004bd4 <_printf_i+0x1a8>
 8004b3c:	4616      	mov	r6, r2
 8004b3e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b42:	fb03 5711 	mls	r7, r3, r1, r5
 8004b46:	5dc7      	ldrb	r7, [r0, r7]
 8004b48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b4c:	462f      	mov	r7, r5
 8004b4e:	42bb      	cmp	r3, r7
 8004b50:	460d      	mov	r5, r1
 8004b52:	d9f4      	bls.n	8004b3e <_printf_i+0x112>
 8004b54:	2b08      	cmp	r3, #8
 8004b56:	d10b      	bne.n	8004b70 <_printf_i+0x144>
 8004b58:	6823      	ldr	r3, [r4, #0]
 8004b5a:	07df      	lsls	r7, r3, #31
 8004b5c:	d508      	bpl.n	8004b70 <_printf_i+0x144>
 8004b5e:	6923      	ldr	r3, [r4, #16]
 8004b60:	6861      	ldr	r1, [r4, #4]
 8004b62:	4299      	cmp	r1, r3
 8004b64:	bfde      	ittt	le
 8004b66:	2330      	movle	r3, #48	@ 0x30
 8004b68:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b6c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004b70:	1b92      	subs	r2, r2, r6
 8004b72:	6122      	str	r2, [r4, #16]
 8004b74:	f8cd a000 	str.w	sl, [sp]
 8004b78:	464b      	mov	r3, r9
 8004b7a:	aa03      	add	r2, sp, #12
 8004b7c:	4621      	mov	r1, r4
 8004b7e:	4640      	mov	r0, r8
 8004b80:	f7ff fee6 	bl	8004950 <_printf_common>
 8004b84:	3001      	adds	r0, #1
 8004b86:	d14a      	bne.n	8004c1e <_printf_i+0x1f2>
 8004b88:	f04f 30ff 	mov.w	r0, #4294967295
 8004b8c:	b004      	add	sp, #16
 8004b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b92:	6823      	ldr	r3, [r4, #0]
 8004b94:	f043 0320 	orr.w	r3, r3, #32
 8004b98:	6023      	str	r3, [r4, #0]
 8004b9a:	4833      	ldr	r0, [pc, #204]	@ (8004c68 <_printf_i+0x23c>)
 8004b9c:	2778      	movs	r7, #120	@ 0x78
 8004b9e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004ba2:	6823      	ldr	r3, [r4, #0]
 8004ba4:	6831      	ldr	r1, [r6, #0]
 8004ba6:	061f      	lsls	r7, r3, #24
 8004ba8:	f851 5b04 	ldr.w	r5, [r1], #4
 8004bac:	d402      	bmi.n	8004bb4 <_printf_i+0x188>
 8004bae:	065f      	lsls	r7, r3, #25
 8004bb0:	bf48      	it	mi
 8004bb2:	b2ad      	uxthmi	r5, r5
 8004bb4:	6031      	str	r1, [r6, #0]
 8004bb6:	07d9      	lsls	r1, r3, #31
 8004bb8:	bf44      	itt	mi
 8004bba:	f043 0320 	orrmi.w	r3, r3, #32
 8004bbe:	6023      	strmi	r3, [r4, #0]
 8004bc0:	b11d      	cbz	r5, 8004bca <_printf_i+0x19e>
 8004bc2:	2310      	movs	r3, #16
 8004bc4:	e7ac      	b.n	8004b20 <_printf_i+0xf4>
 8004bc6:	4827      	ldr	r0, [pc, #156]	@ (8004c64 <_printf_i+0x238>)
 8004bc8:	e7e9      	b.n	8004b9e <_printf_i+0x172>
 8004bca:	6823      	ldr	r3, [r4, #0]
 8004bcc:	f023 0320 	bic.w	r3, r3, #32
 8004bd0:	6023      	str	r3, [r4, #0]
 8004bd2:	e7f6      	b.n	8004bc2 <_printf_i+0x196>
 8004bd4:	4616      	mov	r6, r2
 8004bd6:	e7bd      	b.n	8004b54 <_printf_i+0x128>
 8004bd8:	6833      	ldr	r3, [r6, #0]
 8004bda:	6825      	ldr	r5, [r4, #0]
 8004bdc:	6961      	ldr	r1, [r4, #20]
 8004bde:	1d18      	adds	r0, r3, #4
 8004be0:	6030      	str	r0, [r6, #0]
 8004be2:	062e      	lsls	r6, r5, #24
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	d501      	bpl.n	8004bec <_printf_i+0x1c0>
 8004be8:	6019      	str	r1, [r3, #0]
 8004bea:	e002      	b.n	8004bf2 <_printf_i+0x1c6>
 8004bec:	0668      	lsls	r0, r5, #25
 8004bee:	d5fb      	bpl.n	8004be8 <_printf_i+0x1bc>
 8004bf0:	8019      	strh	r1, [r3, #0]
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	6123      	str	r3, [r4, #16]
 8004bf6:	4616      	mov	r6, r2
 8004bf8:	e7bc      	b.n	8004b74 <_printf_i+0x148>
 8004bfa:	6833      	ldr	r3, [r6, #0]
 8004bfc:	1d1a      	adds	r2, r3, #4
 8004bfe:	6032      	str	r2, [r6, #0]
 8004c00:	681e      	ldr	r6, [r3, #0]
 8004c02:	6862      	ldr	r2, [r4, #4]
 8004c04:	2100      	movs	r1, #0
 8004c06:	4630      	mov	r0, r6
 8004c08:	f7fb fb12 	bl	8000230 <memchr>
 8004c0c:	b108      	cbz	r0, 8004c12 <_printf_i+0x1e6>
 8004c0e:	1b80      	subs	r0, r0, r6
 8004c10:	6060      	str	r0, [r4, #4]
 8004c12:	6863      	ldr	r3, [r4, #4]
 8004c14:	6123      	str	r3, [r4, #16]
 8004c16:	2300      	movs	r3, #0
 8004c18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c1c:	e7aa      	b.n	8004b74 <_printf_i+0x148>
 8004c1e:	6923      	ldr	r3, [r4, #16]
 8004c20:	4632      	mov	r2, r6
 8004c22:	4649      	mov	r1, r9
 8004c24:	4640      	mov	r0, r8
 8004c26:	47d0      	blx	sl
 8004c28:	3001      	adds	r0, #1
 8004c2a:	d0ad      	beq.n	8004b88 <_printf_i+0x15c>
 8004c2c:	6823      	ldr	r3, [r4, #0]
 8004c2e:	079b      	lsls	r3, r3, #30
 8004c30:	d413      	bmi.n	8004c5a <_printf_i+0x22e>
 8004c32:	68e0      	ldr	r0, [r4, #12]
 8004c34:	9b03      	ldr	r3, [sp, #12]
 8004c36:	4298      	cmp	r0, r3
 8004c38:	bfb8      	it	lt
 8004c3a:	4618      	movlt	r0, r3
 8004c3c:	e7a6      	b.n	8004b8c <_printf_i+0x160>
 8004c3e:	2301      	movs	r3, #1
 8004c40:	4632      	mov	r2, r6
 8004c42:	4649      	mov	r1, r9
 8004c44:	4640      	mov	r0, r8
 8004c46:	47d0      	blx	sl
 8004c48:	3001      	adds	r0, #1
 8004c4a:	d09d      	beq.n	8004b88 <_printf_i+0x15c>
 8004c4c:	3501      	adds	r5, #1
 8004c4e:	68e3      	ldr	r3, [r4, #12]
 8004c50:	9903      	ldr	r1, [sp, #12]
 8004c52:	1a5b      	subs	r3, r3, r1
 8004c54:	42ab      	cmp	r3, r5
 8004c56:	dcf2      	bgt.n	8004c3e <_printf_i+0x212>
 8004c58:	e7eb      	b.n	8004c32 <_printf_i+0x206>
 8004c5a:	2500      	movs	r5, #0
 8004c5c:	f104 0619 	add.w	r6, r4, #25
 8004c60:	e7f5      	b.n	8004c4e <_printf_i+0x222>
 8004c62:	bf00      	nop
 8004c64:	08004e4d 	.word	0x08004e4d
 8004c68:	08004e5e 	.word	0x08004e5e

08004c6c <memmove>:
 8004c6c:	4288      	cmp	r0, r1
 8004c6e:	b510      	push	{r4, lr}
 8004c70:	eb01 0402 	add.w	r4, r1, r2
 8004c74:	d902      	bls.n	8004c7c <memmove+0x10>
 8004c76:	4284      	cmp	r4, r0
 8004c78:	4623      	mov	r3, r4
 8004c7a:	d807      	bhi.n	8004c8c <memmove+0x20>
 8004c7c:	1e43      	subs	r3, r0, #1
 8004c7e:	42a1      	cmp	r1, r4
 8004c80:	d008      	beq.n	8004c94 <memmove+0x28>
 8004c82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c8a:	e7f8      	b.n	8004c7e <memmove+0x12>
 8004c8c:	4402      	add	r2, r0
 8004c8e:	4601      	mov	r1, r0
 8004c90:	428a      	cmp	r2, r1
 8004c92:	d100      	bne.n	8004c96 <memmove+0x2a>
 8004c94:	bd10      	pop	{r4, pc}
 8004c96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c9e:	e7f7      	b.n	8004c90 <memmove+0x24>

08004ca0 <_sbrk_r>:
 8004ca0:	b538      	push	{r3, r4, r5, lr}
 8004ca2:	4d06      	ldr	r5, [pc, #24]	@ (8004cbc <_sbrk_r+0x1c>)
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	4604      	mov	r4, r0
 8004ca8:	4608      	mov	r0, r1
 8004caa:	602b      	str	r3, [r5, #0]
 8004cac:	f7fc fa3e 	bl	800112c <_sbrk>
 8004cb0:	1c43      	adds	r3, r0, #1
 8004cb2:	d102      	bne.n	8004cba <_sbrk_r+0x1a>
 8004cb4:	682b      	ldr	r3, [r5, #0]
 8004cb6:	b103      	cbz	r3, 8004cba <_sbrk_r+0x1a>
 8004cb8:	6023      	str	r3, [r4, #0]
 8004cba:	bd38      	pop	{r3, r4, r5, pc}
 8004cbc:	2000033c 	.word	0x2000033c

08004cc0 <memcpy>:
 8004cc0:	440a      	add	r2, r1
 8004cc2:	4291      	cmp	r1, r2
 8004cc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004cc8:	d100      	bne.n	8004ccc <memcpy+0xc>
 8004cca:	4770      	bx	lr
 8004ccc:	b510      	push	{r4, lr}
 8004cce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cd6:	4291      	cmp	r1, r2
 8004cd8:	d1f9      	bne.n	8004cce <memcpy+0xe>
 8004cda:	bd10      	pop	{r4, pc}

08004cdc <_realloc_r>:
 8004cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ce0:	4680      	mov	r8, r0
 8004ce2:	4615      	mov	r5, r2
 8004ce4:	460c      	mov	r4, r1
 8004ce6:	b921      	cbnz	r1, 8004cf2 <_realloc_r+0x16>
 8004ce8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cec:	4611      	mov	r1, r2
 8004cee:	f7ff bc4b 	b.w	8004588 <_malloc_r>
 8004cf2:	b92a      	cbnz	r2, 8004d00 <_realloc_r+0x24>
 8004cf4:	f7ff fbdc 	bl	80044b0 <_free_r>
 8004cf8:	2400      	movs	r4, #0
 8004cfa:	4620      	mov	r0, r4
 8004cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d00:	f000 f81a 	bl	8004d38 <_malloc_usable_size_r>
 8004d04:	4285      	cmp	r5, r0
 8004d06:	4606      	mov	r6, r0
 8004d08:	d802      	bhi.n	8004d10 <_realloc_r+0x34>
 8004d0a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004d0e:	d8f4      	bhi.n	8004cfa <_realloc_r+0x1e>
 8004d10:	4629      	mov	r1, r5
 8004d12:	4640      	mov	r0, r8
 8004d14:	f7ff fc38 	bl	8004588 <_malloc_r>
 8004d18:	4607      	mov	r7, r0
 8004d1a:	2800      	cmp	r0, #0
 8004d1c:	d0ec      	beq.n	8004cf8 <_realloc_r+0x1c>
 8004d1e:	42b5      	cmp	r5, r6
 8004d20:	462a      	mov	r2, r5
 8004d22:	4621      	mov	r1, r4
 8004d24:	bf28      	it	cs
 8004d26:	4632      	movcs	r2, r6
 8004d28:	f7ff ffca 	bl	8004cc0 <memcpy>
 8004d2c:	4621      	mov	r1, r4
 8004d2e:	4640      	mov	r0, r8
 8004d30:	f7ff fbbe 	bl	80044b0 <_free_r>
 8004d34:	463c      	mov	r4, r7
 8004d36:	e7e0      	b.n	8004cfa <_realloc_r+0x1e>

08004d38 <_malloc_usable_size_r>:
 8004d38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d3c:	1f18      	subs	r0, r3, #4
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	bfbc      	itt	lt
 8004d42:	580b      	ldrlt	r3, [r1, r0]
 8004d44:	18c0      	addlt	r0, r0, r3
 8004d46:	4770      	bx	lr

08004d48 <_init>:
 8004d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d4a:	bf00      	nop
 8004d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d4e:	bc08      	pop	{r3}
 8004d50:	469e      	mov	lr, r3
 8004d52:	4770      	bx	lr

08004d54 <_fini>:
 8004d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d56:	bf00      	nop
 8004d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d5a:	bc08      	pop	{r3}
 8004d5c:	469e      	mov	lr, r3
 8004d5e:	4770      	bx	lr
