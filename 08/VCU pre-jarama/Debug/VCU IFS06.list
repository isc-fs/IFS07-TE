
VCU IFS06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000141d0  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000540  080144a0  080144a0  000154a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080149e0  080149e0  000159e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080149e8  080149e8  000159e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080149ec  080149ec  000159ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  24000000  080149f0  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000a40  24000084  08014a74  00016084  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000ac4  08014a74  00016ac4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00016084  2**0
                  CONTENTS, READONLY
 10 .debug_info   00028a84  00000000  00000000  000160b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000042aa  00000000  00000000  0003eb36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002050  00000000  00000000  00042de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001926  00000000  00000000  00044e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a51f  00000000  00000000  00046756  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002a134  00000000  00000000  00080c75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017daee  00000000  00000000  000aada9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00228897  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000092ac  00000000  00000000  002288dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000084  00000000  00000000  00231b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000084 	.word	0x24000084
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08014488 	.word	0x08014488

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000088 	.word	0x24000088
 800030c:	08014488 	.word	0x08014488

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b988 	b.w	80006e8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	468e      	mov	lr, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	4688      	mov	r8, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d962      	bls.n	80004cc <__udivmoddi4+0xdc>
 8000406:	fab2 f682 	clz	r6, r2
 800040a:	b14e      	cbz	r6, 8000420 <__udivmoddi4+0x30>
 800040c:	f1c6 0320 	rsb	r3, r6, #32
 8000410:	fa01 f806 	lsl.w	r8, r1, r6
 8000414:	fa20 f303 	lsr.w	r3, r0, r3
 8000418:	40b7      	lsls	r7, r6
 800041a:	ea43 0808 	orr.w	r8, r3, r8
 800041e:	40b4      	lsls	r4, r6
 8000420:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000424:	fa1f fc87 	uxth.w	ip, r7
 8000428:	fbb8 f1fe 	udiv	r1, r8, lr
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fb01 f20c 	mul.w	r2, r1, ip
 800043a:	429a      	cmp	r2, r3
 800043c:	d909      	bls.n	8000452 <__udivmoddi4+0x62>
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	f101 30ff 	add.w	r0, r1, #4294967295
 8000444:	f080 80ea 	bcs.w	800061c <__udivmoddi4+0x22c>
 8000448:	429a      	cmp	r2, r3
 800044a:	f240 80e7 	bls.w	800061c <__udivmoddi4+0x22c>
 800044e:	3902      	subs	r1, #2
 8000450:	443b      	add	r3, r7
 8000452:	1a9a      	subs	r2, r3, r2
 8000454:	b2a3      	uxth	r3, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000462:	fb00 fc0c 	mul.w	ip, r0, ip
 8000466:	459c      	cmp	ip, r3
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x8e>
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000470:	f080 80d6 	bcs.w	8000620 <__udivmoddi4+0x230>
 8000474:	459c      	cmp	ip, r3
 8000476:	f240 80d3 	bls.w	8000620 <__udivmoddi4+0x230>
 800047a:	443b      	add	r3, r7
 800047c:	3802      	subs	r0, #2
 800047e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000482:	eba3 030c 	sub.w	r3, r3, ip
 8000486:	2100      	movs	r1, #0
 8000488:	b11d      	cbz	r5, 8000492 <__udivmoddi4+0xa2>
 800048a:	40f3      	lsrs	r3, r6
 800048c:	2200      	movs	r2, #0
 800048e:	e9c5 3200 	strd	r3, r2, [r5]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d905      	bls.n	80004a6 <__udivmoddi4+0xb6>
 800049a:	b10d      	cbz	r5, 80004a0 <__udivmoddi4+0xb0>
 800049c:	e9c5 0100 	strd	r0, r1, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	4608      	mov	r0, r1
 80004a4:	e7f5      	b.n	8000492 <__udivmoddi4+0xa2>
 80004a6:	fab3 f183 	clz	r1, r3
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d146      	bne.n	800053c <__udivmoddi4+0x14c>
 80004ae:	4573      	cmp	r3, lr
 80004b0:	d302      	bcc.n	80004b8 <__udivmoddi4+0xc8>
 80004b2:	4282      	cmp	r2, r0
 80004b4:	f200 8105 	bhi.w	80006c2 <__udivmoddi4+0x2d2>
 80004b8:	1a84      	subs	r4, r0, r2
 80004ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80004be:	2001      	movs	r0, #1
 80004c0:	4690      	mov	r8, r2
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d0e5      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004c6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ca:	e7e2      	b.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f000 8090 	beq.w	80005f2 <__udivmoddi4+0x202>
 80004d2:	fab2 f682 	clz	r6, r2
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	f040 80a4 	bne.w	8000624 <__udivmoddi4+0x234>
 80004dc:	1a8a      	subs	r2, r1, r2
 80004de:	0c03      	lsrs	r3, r0, #16
 80004e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e4:	b280      	uxth	r0, r0
 80004e6:	b2bc      	uxth	r4, r7
 80004e8:	2101      	movs	r1, #1
 80004ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80004f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004f6:	fb04 f20c 	mul.w	r2, r4, ip
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x11e>
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x11c>
 8000506:	429a      	cmp	r2, r3
 8000508:	f200 80e0 	bhi.w	80006cc <__udivmoddi4+0x2dc>
 800050c:	46c4      	mov	ip, r8
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	fbb3 f2fe 	udiv	r2, r3, lr
 8000514:	fb0e 3312 	mls	r3, lr, r2, r3
 8000518:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800051c:	fb02 f404 	mul.w	r4, r2, r4
 8000520:	429c      	cmp	r4, r3
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x144>
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	f102 30ff 	add.w	r0, r2, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x142>
 800052c:	429c      	cmp	r4, r3
 800052e:	f200 80ca 	bhi.w	80006c6 <__udivmoddi4+0x2d6>
 8000532:	4602      	mov	r2, r0
 8000534:	1b1b      	subs	r3, r3, r4
 8000536:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800053a:	e7a5      	b.n	8000488 <__udivmoddi4+0x98>
 800053c:	f1c1 0620 	rsb	r6, r1, #32
 8000540:	408b      	lsls	r3, r1
 8000542:	fa22 f706 	lsr.w	r7, r2, r6
 8000546:	431f      	orrs	r7, r3
 8000548:	fa0e f401 	lsl.w	r4, lr, r1
 800054c:	fa20 f306 	lsr.w	r3, r0, r6
 8000550:	fa2e fe06 	lsr.w	lr, lr, r6
 8000554:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000558:	4323      	orrs	r3, r4
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	fa1f fc87 	uxth.w	ip, r7
 8000562:	fbbe f0f9 	udiv	r0, lr, r9
 8000566:	0c1c      	lsrs	r4, r3, #16
 8000568:	fb09 ee10 	mls	lr, r9, r0, lr
 800056c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000570:	fb00 fe0c 	mul.w	lr, r0, ip
 8000574:	45a6      	cmp	lr, r4
 8000576:	fa02 f201 	lsl.w	r2, r2, r1
 800057a:	d909      	bls.n	8000590 <__udivmoddi4+0x1a0>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000582:	f080 809c 	bcs.w	80006be <__udivmoddi4+0x2ce>
 8000586:	45a6      	cmp	lr, r4
 8000588:	f240 8099 	bls.w	80006be <__udivmoddi4+0x2ce>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	eba4 040e 	sub.w	r4, r4, lr
 8000594:	fa1f fe83 	uxth.w	lr, r3
 8000598:	fbb4 f3f9 	udiv	r3, r4, r9
 800059c:	fb09 4413 	mls	r4, r9, r3, r4
 80005a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005a8:	45a4      	cmp	ip, r4
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x1ce>
 80005ac:	193c      	adds	r4, r7, r4
 80005ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80005b2:	f080 8082 	bcs.w	80006ba <__udivmoddi4+0x2ca>
 80005b6:	45a4      	cmp	ip, r4
 80005b8:	d97f      	bls.n	80006ba <__udivmoddi4+0x2ca>
 80005ba:	3b02      	subs	r3, #2
 80005bc:	443c      	add	r4, r7
 80005be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005c2:	eba4 040c 	sub.w	r4, r4, ip
 80005c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ca:	4564      	cmp	r4, ip
 80005cc:	4673      	mov	r3, lr
 80005ce:	46e1      	mov	r9, ip
 80005d0:	d362      	bcc.n	8000698 <__udivmoddi4+0x2a8>
 80005d2:	d05f      	beq.n	8000694 <__udivmoddi4+0x2a4>
 80005d4:	b15d      	cbz	r5, 80005ee <__udivmoddi4+0x1fe>
 80005d6:	ebb8 0203 	subs.w	r2, r8, r3
 80005da:	eb64 0409 	sbc.w	r4, r4, r9
 80005de:	fa04 f606 	lsl.w	r6, r4, r6
 80005e2:	fa22 f301 	lsr.w	r3, r2, r1
 80005e6:	431e      	orrs	r6, r3
 80005e8:	40cc      	lsrs	r4, r1
 80005ea:	e9c5 6400 	strd	r6, r4, [r5]
 80005ee:	2100      	movs	r1, #0
 80005f0:	e74f      	b.n	8000492 <__udivmoddi4+0xa2>
 80005f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005f6:	0c01      	lsrs	r1, r0, #16
 80005f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005fc:	b280      	uxth	r0, r0
 80005fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000602:	463b      	mov	r3, r7
 8000604:	4638      	mov	r0, r7
 8000606:	463c      	mov	r4, r7
 8000608:	46b8      	mov	r8, r7
 800060a:	46be      	mov	lr, r7
 800060c:	2620      	movs	r6, #32
 800060e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000612:	eba2 0208 	sub.w	r2, r2, r8
 8000616:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800061a:	e766      	b.n	80004ea <__udivmoddi4+0xfa>
 800061c:	4601      	mov	r1, r0
 800061e:	e718      	b.n	8000452 <__udivmoddi4+0x62>
 8000620:	4610      	mov	r0, r2
 8000622:	e72c      	b.n	800047e <__udivmoddi4+0x8e>
 8000624:	f1c6 0220 	rsb	r2, r6, #32
 8000628:	fa2e f302 	lsr.w	r3, lr, r2
 800062c:	40b7      	lsls	r7, r6
 800062e:	40b1      	lsls	r1, r6
 8000630:	fa20 f202 	lsr.w	r2, r0, r2
 8000634:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000638:	430a      	orrs	r2, r1
 800063a:	fbb3 f8fe 	udiv	r8, r3, lr
 800063e:	b2bc      	uxth	r4, r7
 8000640:	fb0e 3318 	mls	r3, lr, r8, r3
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800064a:	fb08 f904 	mul.w	r9, r8, r4
 800064e:	40b0      	lsls	r0, r6
 8000650:	4589      	cmp	r9, r1
 8000652:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000656:	b280      	uxth	r0, r0
 8000658:	d93e      	bls.n	80006d8 <__udivmoddi4+0x2e8>
 800065a:	1879      	adds	r1, r7, r1
 800065c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000660:	d201      	bcs.n	8000666 <__udivmoddi4+0x276>
 8000662:	4589      	cmp	r9, r1
 8000664:	d81f      	bhi.n	80006a6 <__udivmoddi4+0x2b6>
 8000666:	eba1 0109 	sub.w	r1, r1, r9
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	fb0e 1119 	mls	r1, lr, r9, r1
 8000676:	b292      	uxth	r2, r2
 8000678:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800067c:	4542      	cmp	r2, r8
 800067e:	d229      	bcs.n	80006d4 <__udivmoddi4+0x2e4>
 8000680:	18ba      	adds	r2, r7, r2
 8000682:	f109 31ff 	add.w	r1, r9, #4294967295
 8000686:	d2c4      	bcs.n	8000612 <__udivmoddi4+0x222>
 8000688:	4542      	cmp	r2, r8
 800068a:	d2c2      	bcs.n	8000612 <__udivmoddi4+0x222>
 800068c:	f1a9 0102 	sub.w	r1, r9, #2
 8000690:	443a      	add	r2, r7
 8000692:	e7be      	b.n	8000612 <__udivmoddi4+0x222>
 8000694:	45f0      	cmp	r8, lr
 8000696:	d29d      	bcs.n	80005d4 <__udivmoddi4+0x1e4>
 8000698:	ebbe 0302 	subs.w	r3, lr, r2
 800069c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006a0:	3801      	subs	r0, #1
 80006a2:	46e1      	mov	r9, ip
 80006a4:	e796      	b.n	80005d4 <__udivmoddi4+0x1e4>
 80006a6:	eba7 0909 	sub.w	r9, r7, r9
 80006aa:	4449      	add	r1, r9
 80006ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80006b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b4:	fb09 f804 	mul.w	r8, r9, r4
 80006b8:	e7db      	b.n	8000672 <__udivmoddi4+0x282>
 80006ba:	4673      	mov	r3, lr
 80006bc:	e77f      	b.n	80005be <__udivmoddi4+0x1ce>
 80006be:	4650      	mov	r0, sl
 80006c0:	e766      	b.n	8000590 <__udivmoddi4+0x1a0>
 80006c2:	4608      	mov	r0, r1
 80006c4:	e6fd      	b.n	80004c2 <__udivmoddi4+0xd2>
 80006c6:	443b      	add	r3, r7
 80006c8:	3a02      	subs	r2, #2
 80006ca:	e733      	b.n	8000534 <__udivmoddi4+0x144>
 80006cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006d0:	443b      	add	r3, r7
 80006d2:	e71c      	b.n	800050e <__udivmoddi4+0x11e>
 80006d4:	4649      	mov	r1, r9
 80006d6:	e79c      	b.n	8000612 <__udivmoddi4+0x222>
 80006d8:	eba1 0109 	sub.w	r1, r1, r9
 80006dc:	46c4      	mov	ip, r8
 80006de:	fbb1 f9fe 	udiv	r9, r1, lr
 80006e2:	fb09 f804 	mul.w	r8, r9, r4
 80006e6:	e7c4      	b.n	8000672 <__udivmoddi4+0x282>

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ee:	b0df      	sub	sp, #380	@ 0x17c
 80006f0:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f2:	f003 f961 	bl	80039b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f6:	f000 fbad 	bl	8000e54 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006fa:	f000 fc19 	bl	8000f30 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fe:	f001 f8d3 	bl	80018a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000702:	f001 f8b1 	bl	8001868 <MX_DMA_Init>
  MX_ADC1_Init();
 8000706:	f000 fc45 	bl	8000f94 <MX_ADC1_Init>
  MX_ADC2_Init();
 800070a:	f000 fcdf 	bl	80010cc <MX_ADC2_Init>
  MX_FDCAN1_Init();
 800070e:	f000 fd45 	bl	800119c <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000712:	f000 fdc1 	bl	8001298 <MX_FDCAN2_Init>
  MX_TIM1_Init();
 8000716:	f000 ff2f 	bl	8001578 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800071a:	f001 f859 	bl	80017d0 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 800071e:	f000 ffe3 	bl	80016e8 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 8000722:	f001 f809 	bl	8001738 <MX_USART1_UART_Init>
  MX_SDMMC1_SD_Init();
 8000726:	f000 feb3 	bl	8001490 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800072a:	f012 ff33 	bl	8013594 <MX_FATFS_Init>
  MX_FDCAN3_Init();
 800072e:	f000 fe31 	bl	8001394 <MX_FDCAN3_Init>
  MX_SPI1_Init();
 8000732:	f000 fecb 	bl	80014cc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	// Inicializar tarjeta microSD
	//SDCard_start();
	//HAL_Delay(2000)
  /* USER CODE BEGIN 2 */
  HAL_Delay(5);  // let rails settle
 8000736:	2005      	movs	r0, #5
 8000738:	f003 f9d0 	bl	8003adc <HAL_Delay>

  // --- Keep radio idle while configuring ---
  HAL_GPIO_WritePin(NRF24_CE_PORT,  NRF24_CE_PIN,  GPIO_PIN_RESET); // CE low
 800073c:	2200      	movs	r2, #0
 800073e:	2140      	movs	r1, #64	@ 0x40
 8000740:	48c2      	ldr	r0, [pc, #776]	@ (8000a4c <main+0x360>)
 8000742:	f009 fb5f 	bl	8009e04 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);   // CSN high
 8000746:	2201      	movs	r2, #1
 8000748:	2108      	movs	r1, #8
 800074a:	48c1      	ldr	r0, [pc, #772]	@ (8000a50 <main+0x364>)
 800074c:	f009 fb5a 	bl	8009e04 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000750:	2001      	movs	r0, #1
 8000752:	f003 f9c3 	bl	8003adc <HAL_Delay>

  // ---- IMPORTANT for BK24xx/nRF24 clones: ACTIVATE 0x73 ----
  // Must be done once after power-up so register writes stick (FEATURE/DYNPD/CONFIG etc.)
  uint8_t act[2] = { 0x50, 0x73 };  // 0x50 = ACTIVATE, payload = 0x73
 8000756:	f247 3350 	movw	r3, #29520	@ 0x7350
 800075a:	f8a7 3150 	strh.w	r3, [r7, #336]	@ 0x150
  CSN_LOW();
 800075e:	2200      	movs	r2, #0
 8000760:	2108      	movs	r1, #8
 8000762:	48bb      	ldr	r0, [pc, #748]	@ (8000a50 <main+0x364>)
 8000764:	f009 fb4e 	bl	8009e04 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, act, 2, 100);
 8000768:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 800076c:	2364      	movs	r3, #100	@ 0x64
 800076e:	2202      	movs	r2, #2
 8000770:	48b8      	ldr	r0, [pc, #736]	@ (8000a54 <main+0x368>)
 8000772:	f00e fc6f 	bl	800f054 <HAL_SPI_Transmit>
  CSN_HIGH();
 8000776:	2201      	movs	r2, #1
 8000778:	2108      	movs	r1, #8
 800077a:	48b5      	ldr	r0, [pc, #724]	@ (8000a50 <main+0x364>)
 800077c:	f009 fb42 	bl	8009e04 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000780:	2001      	movs	r0, #1
 8000782:	f003 f9ab 	bl	8003adc <HAL_Delay>

  // Sanity: write CONFIG=0x0B and read it back
  uint8_t w_cfg[2] = { (uint8_t)(0x20 | 0x00), 0x0B }; // W_REGISTER|CONFIG = 0x0B
 8000786:	f44f 6332 	mov.w	r3, #2848	@ 0xb20
 800078a:	f8a7 314c 	strh.w	r3, [r7, #332]	@ 0x14c
  uint8_t r_cfg[2] = { 0x00, 0xFF };                   // R_REGISTER|CONFIG, dummy
 800078e:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8000792:	f8a7 3148 	strh.w	r3, [r7, #328]	@ 0x148
  uint8_t rxw[2] = {0}, rxr[2] = {0};
 8000796:	2300      	movs	r3, #0
 8000798:	f8a7 3144 	strh.w	r3, [r7, #324]	@ 0x144
 800079c:	2300      	movs	r3, #0
 800079e:	f8a7 3140 	strh.w	r3, [r7, #320]	@ 0x140

  CSN_LOW();  HAL_SPI_TransmitReceive(&hspi1, w_cfg, rxw, 2, 100);  CSN_HIGH();
 80007a2:	2200      	movs	r2, #0
 80007a4:	2108      	movs	r1, #8
 80007a6:	48aa      	ldr	r0, [pc, #680]	@ (8000a50 <main+0x364>)
 80007a8:	f009 fb2c 	bl	8009e04 <HAL_GPIO_WritePin>
 80007ac:	f507 72a2 	add.w	r2, r7, #324	@ 0x144
 80007b0:	f507 71a6 	add.w	r1, r7, #332	@ 0x14c
 80007b4:	2364      	movs	r3, #100	@ 0x64
 80007b6:	9300      	str	r3, [sp, #0]
 80007b8:	2302      	movs	r3, #2
 80007ba:	48a6      	ldr	r0, [pc, #664]	@ (8000a54 <main+0x368>)
 80007bc:	f00f f8aa 	bl	800f914 <HAL_SPI_TransmitReceive>
 80007c0:	2201      	movs	r2, #1
 80007c2:	2108      	movs	r1, #8
 80007c4:	48a2      	ldr	r0, [pc, #648]	@ (8000a50 <main+0x364>)
 80007c6:	f009 fb1d 	bl	8009e04 <HAL_GPIO_WritePin>
  CSN_LOW();  HAL_SPI_TransmitReceive(&hspi1, r_cfg, rxr, 2, 100);  CSN_HIGH();
 80007ca:	2200      	movs	r2, #0
 80007cc:	2108      	movs	r1, #8
 80007ce:	48a0      	ldr	r0, [pc, #640]	@ (8000a50 <main+0x364>)
 80007d0:	f009 fb18 	bl	8009e04 <HAL_GPIO_WritePin>
 80007d4:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80007d8:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 80007dc:	2364      	movs	r3, #100	@ 0x64
 80007de:	9300      	str	r3, [sp, #0]
 80007e0:	2302      	movs	r3, #2
 80007e2:	489c      	ldr	r0, [pc, #624]	@ (8000a54 <main+0x368>)
 80007e4:	f00f f896 	bl	800f914 <HAL_SPI_TransmitReceive>
 80007e8:	2201      	movs	r2, #1
 80007ea:	2108      	movs	r1, #8
 80007ec:	4898      	ldr	r0, [pc, #608]	@ (8000a50 <main+0x364>)
 80007ee:	f009 fb09 	bl	8009e04 <HAL_GPIO_WritePin>

  char dbg[96];
  snprintf(dbg, sizeof dbg, "[POST-ACTIVATE] status_w=%02X cfg=%02X\r\n", rxw[0], rxr[1]);
 80007f2:	f897 3144 	ldrb.w	r3, [r7, #324]	@ 0x144
 80007f6:	461a      	mov	r2, r3
 80007f8:	f897 3141 	ldrb.w	r3, [r7, #321]	@ 0x141
 80007fc:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 8000800:	9300      	str	r3, [sp, #0]
 8000802:	4613      	mov	r3, r2
 8000804:	4a94      	ldr	r2, [pc, #592]	@ (8000a58 <main+0x36c>)
 8000806:	2160      	movs	r1, #96	@ 0x60
 8000808:	f013 f968 	bl	8013adc <sniprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)dbg, strlen(dbg), HAL_MAX_DELAY);
 800080c:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff fd7d 	bl	8000310 <strlen>
 8000816:	4603      	mov	r3, r0
 8000818:	b29a      	uxth	r2, r3
 800081a:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 800081e:	f04f 33ff 	mov.w	r3, #4294967295
 8000822:	488e      	ldr	r0, [pc, #568]	@ (8000a5c <main+0x370>)
 8000824:	f010 fece 	bl	80115c4 <HAL_UART_Transmit>

  // ---- proceed with your driver now ----
  NRF24_Init();                             // will now be able to touch FEATURE/DYNPD
 8000828:	f002 f8dc 	bl	80029e4 <NRF24_Init>
  HAL_Delay(5);
 800082c:	2005      	movs	r0, #5
 800082e:	f003 f955 	bl	8003adc <HAL_Delay>
  uint8_t st = NRF24_StatusNOP();
 8000832:	f002 fa87 	bl	8002d44 <NRF24_StatusNOP>
 8000836:	4603      	mov	r3, r0
 8000838:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
  char m[64];
  snprintf(m,sizeof(m),"[NRF] STATUS via NOP = 0x%02X\r\n", st);
 800083c:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
 8000840:	f107 00a0 	add.w	r0, r7, #160	@ 0xa0
 8000844:	4a86      	ldr	r2, [pc, #536]	@ (8000a60 <main+0x374>)
 8000846:	2140      	movs	r1, #64	@ 0x40
 8000848:	f013 f948 	bl	8013adc <sniprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)m,strlen(m),HAL_MAX_DELAY);
 800084c:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff fd5d 	bl	8000310 <strlen>
 8000856:	4603      	mov	r3, r0
 8000858:	b29a      	uxth	r2, r3
 800085a:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 800085e:	f04f 33ff 	mov.w	r3, #4294967295
 8000862:	487e      	ldr	r0, [pc, #504]	@ (8000a5c <main+0x370>)
 8000864:	f010 feae 	bl	80115c4 <HAL_UART_Transmit>

  NRF24_TxMode(rf_addr, TEL_CHAN);
 8000868:	214c      	movs	r1, #76	@ 0x4c
 800086a:	487e      	ldr	r0, [pc, #504]	@ (8000a64 <main+0x378>)
 800086c:	f002 f8ed 	bl	8002a4a <NRF24_TxMode>
  NRF24_Dump();
 8000870:	f002 f9e2 	bl	8002c38 <NRF24_Dump>
  uint8_t cfg = nrf24_ReadReg(CONFIG);
 8000874:	2000      	movs	r0, #0
 8000876:	f001 ffbd 	bl	80027f4 <nrf24_ReadReg>
 800087a:	4603      	mov	r3, r0
 800087c:	f887 3156 	strb.w	r3, [r7, #342]	@ 0x156
  uint8_t rf  = nrf24_ReadReg(RF_SETUP);
 8000880:	2006      	movs	r0, #6
 8000882:	f001 ffb7 	bl	80027f4 <nrf24_ReadReg>
 8000886:	4603      	mov	r3, r0
 8000888:	f887 3155 	strb.w	r3, [r7, #341]	@ 0x155
  uint8_t ch  = nrf24_ReadReg(RF_CH);
 800088c:	2005      	movs	r0, #5
 800088e:	f001 ffb1 	bl	80027f4 <nrf24_ReadReg>
 8000892:	4603      	mov	r3, r0
 8000894:	f887 3154 	strb.w	r3, [r7, #340]	@ 0x154
  char info[64];
  snprintf(info, sizeof(info), "[NRF] CFG=%02X RF=%02X CH=%u\r\n", cfg, rf, ch);
 8000898:	f897 1156 	ldrb.w	r1, [r7, #342]	@ 0x156
 800089c:	f897 3155 	ldrb.w	r3, [r7, #341]	@ 0x155
 80008a0:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80008a4:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 80008a8:	9201      	str	r2, [sp, #4]
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	460b      	mov	r3, r1
 80008ae:	4a6e      	ldr	r2, [pc, #440]	@ (8000a68 <main+0x37c>)
 80008b0:	2140      	movs	r1, #64	@ 0x40
 80008b2:	f013 f913 	bl	8013adc <sniprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 80008b6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff fd28 	bl	8000310 <strlen>
 80008c0:	4603      	mov	r3, r0
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 80008c8:	f04f 33ff 	mov.w	r3, #4294967295
 80008cc:	4863      	ldr	r0, [pc, #396]	@ (8000a5c <main+0x370>)
 80008ce:	f010 fe79 	bl	80115c4 <HAL_UART_Transmit>




  // ---- nRF24 bring-up ----
  NRF24_Init();
 80008d2:	f002 f887 	bl	80029e4 <NRF24_Init>
  //Comentar para uso real
  //dummy transmission, comentar para CAN ID
  for (int i = 0; i < 10; ++i) {
 80008d6:	2300      	movs	r3, #0
 80008d8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 80008dc:	e027      	b.n	800092e <main+0x242>
    float pkt[8] = {0};
 80008de:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80008e2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80008e6:	4618      	mov	r0, r3
 80008e8:	2320      	movs	r3, #32
 80008ea:	461a      	mov	r2, r3
 80008ec:	2100      	movs	r1, #0
 80008ee:	f013 f94d 	bl	8013b8c <memset>
    pkt[0] = 0x600;          // ID
 80008f2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80008f6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80008fa:	4a5c      	ldr	r2, [pc, #368]	@ (8000a6c <main+0x380>)
 80008fc:	601a      	str	r2, [r3, #0]
    pkt[1] = 321.0f;     // some dummy values
 80008fe:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000902:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8000906:	4a5a      	ldr	r2, [pc, #360]	@ (8000a70 <main+0x384>)
 8000908:	605a      	str	r2, [r3, #4]
    pkt[2] = 1234.0f;
 800090a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800090e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8000912:	4a58      	ldr	r2, [pc, #352]	@ (8000a74 <main+0x388>)
 8000914:	609a      	str	r2, [r3, #8]
    NRF24_Transmit((uint8_t*)pkt);
 8000916:	463b      	mov	r3, r7
 8000918:	4618      	mov	r0, r3
 800091a:	f002 f8bb 	bl	8002a94 <NRF24_Transmit>
    HAL_Delay(100);
 800091e:	2064      	movs	r0, #100	@ 0x64
 8000920:	f003 f8dc 	bl	8003adc <HAL_Delay>
  for (int i = 0; i < 10; ++i) {
 8000924:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8000928:	3301      	adds	r3, #1
 800092a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 800092e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8000932:	2b09      	cmp	r3, #9
 8000934:	ddd3      	ble.n	80008de <main+0x1f2>
	//sprintf(buffer, "%u,1test,1test1,1test2\n", (unsigned)time(NULL));
	//SDCard_write("data.csv", "1test,1test1,1test2\n", 0); // el modo 0 asume que existe el archivo y añade datos
	//print(buffer);

	// HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)buffer_adc, 3) != HAL_OK)
 8000936:	2203      	movs	r2, #3
 8000938:	494f      	ldr	r1, [pc, #316]	@ (8000a78 <main+0x38c>)
 800093a:	4850      	ldr	r0, [pc, #320]	@ (8000a7c <main+0x390>)
 800093c:	f004 f828 	bl	8004990 <HAL_ADC_Start_DMA>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d004      	beq.n	8000950 <main+0x264>
	{
#if DEBUG
		print("Error al inicializar ADC_DMA");
 8000946:	484e      	ldr	r0, [pc, #312]	@ (8000a80 <main+0x394>)
 8000948:	f001 f8ae 	bl	8001aa8 <print>
#endif
		Error_Handler();
 800094c:	f001 feb6 	bl	80026bc <Error_Handler>
	//LPF_EMA_Init(&s1_filt, 0.2f);
	//LPF_EMA_Init(&s2_filt, 0.2f);

	// Inicialización de buses CAN
	// Inversor
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8000950:	484c      	ldr	r0, [pc, #304]	@ (8000a84 <main+0x398>)
 8000952:	f008 f929 	bl	8008ba8 <HAL_FDCAN_Start>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d004      	beq.n	8000966 <main+0x27a>
	{
#if DEBUG
		print("Error al inicializar CAN_INV");
 800095c:	484a      	ldr	r0, [pc, #296]	@ (8000a88 <main+0x39c>)
 800095e:	f001 f8a3 	bl	8001aa8 <print>
#endif
		Error_Handler();
 8000962:	f001 feab 	bl	80026bc <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000966:	2200      	movs	r2, #0
 8000968:	2101      	movs	r1, #1
 800096a:	4846      	ldr	r0, [pc, #280]	@ (8000a84 <main+0x398>)
 800096c:	f008 fb0e 	bl	8008f8c <HAL_FDCAN_ActivateNotification>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d004      	beq.n	8000980 <main+0x294>
									   0) != HAL_OK)
	{

#if DEBUG
		print("Error al activar NOTIFICACION CAN_INV");
 8000976:	4845      	ldr	r0, [pc, #276]	@ (8000a8c <main+0x3a0>)
 8000978:	f001 f896 	bl	8001aa8 <print>
#endif
		Error_Handler();
 800097c:	f001 fe9e 	bl	80026bc <Error_Handler>
#endif
		Error_Handler();
	}*/

	// Acumulador
	if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK)
 8000980:	4843      	ldr	r0, [pc, #268]	@ (8000a90 <main+0x3a4>)
 8000982:	f008 f911 	bl	8008ba8 <HAL_FDCAN_Start>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d004      	beq.n	8000996 <main+0x2aa>
	{

#if DEBUG
		print("Error al inicializar CAN_ACU");
 800098c:	4841      	ldr	r0, [pc, #260]	@ (8000a94 <main+0x3a8>)
 800098e:	f001 f88b 	bl	8001aa8 <print>

#endif
		Error_Handler();
 8000992:	f001 fe93 	bl	80026bc <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000996:	2200      	movs	r2, #0
 8000998:	2101      	movs	r1, #1
 800099a:	483d      	ldr	r0, [pc, #244]	@ (8000a90 <main+0x3a4>)
 800099c:	f008 faf6 	bl	8008f8c <HAL_FDCAN_ActivateNotification>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d004      	beq.n	80009b0 <main+0x2c4>
									   0) != HAL_OK)
	{

#if DEBUG
		print("Error al activar NOTIFICATION CAN_ACU");
 80009a6:	483c      	ldr	r0, [pc, #240]	@ (8000a98 <main+0x3ac>)
 80009a8:	f001 f87e 	bl	8001aa8 <print>
#endif
		Error_Handler();
 80009ac:	f001 fe86 	bl	80026bc <Error_Handler>
	}

	//Dash
	if (HAL_FDCAN_Start(&hfdcan3) != HAL_OK)
 80009b0:	483a      	ldr	r0, [pc, #232]	@ (8000a9c <main+0x3b0>)
 80009b2:	f008 f8f9 	bl	8008ba8 <HAL_FDCAN_Start>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d004      	beq.n	80009c6 <main+0x2da>
	{

#if DEBUG
		print("Error al inicializar CAN_DASH");
 80009bc:	4838      	ldr	r0, [pc, #224]	@ (8000aa0 <main+0x3b4>)
 80009be:	f001 f873 	bl	8001aa8 <print>

#endif
		Error_Handler();
 80009c2:	f001 fe7b 	bl	80026bc <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan3, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 80009c6:	2200      	movs	r2, #0
 80009c8:	2101      	movs	r1, #1
 80009ca:	4834      	ldr	r0, [pc, #208]	@ (8000a9c <main+0x3b0>)
 80009cc:	f008 fade 	bl	8008f8c <HAL_FDCAN_ActivateNotification>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d004      	beq.n	80009e0 <main+0x2f4>
									   0) != HAL_OK)
	{

#if DEBUG
		print("Error al activar NOTIFICATION CAN_DASH");
 80009d6:	4833      	ldr	r0, [pc, #204]	@ (8000aa4 <main+0x3b8>)
 80009d8:	f001 f866 	bl	8001aa8 <print>
#endif
		Error_Handler();
 80009dc:	f001 fe6e 	bl	80026bc <Error_Handler>
	}

	//---------- SECUENCIA DE ARRANQUE ----------
#if (DEBUG)
	print("Solicitar tensión inversor");
 80009e0:	4831      	ldr	r0, [pc, #196]	@ (8000aa8 <main+0x3bc>)
 80009e2:	f001 f861 	bl	8001aa8 <print>
	config_inv_lectura_v = 1;
#endif

	// Espera ACK inversor (DC bus)
	//Comentar para CAN ID
	HAL_TIM_Base_Start_IT(&htim16);
 80009e6:	4831      	ldr	r0, [pc, #196]	@ (8000aac <main+0x3c0>)
 80009e8:	f00f fc0e 	bl	8010208 <HAL_TIM_Base_Start_IT>
	uint32_t _last_req_log = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
	while (config_inv_lectura_v == 0)
 80009f2:	e026      	b.n	8000a42 <main+0x356>
	{
		if ((HAL_GetTick() - _last_req_log) >= 1000) {
 80009f4:	f003 f866 	bl	8003ac4 <HAL_GetTick>
 80009f8:	4602      	mov	r2, r0
 80009fa:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80009fe:	1ad3      	subs	r3, r2, r3
 8000a00:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000a04:	d306      	bcc.n	8000a14 <main+0x328>
		        _last_req_log = HAL_GetTick();
 8000a06:	f003 f85d 	bl	8003ac4 <HAL_GetTick>
 8000a0a:	f8c7 0158 	str.w	r0, [r7, #344]	@ 0x158
		        print("Solicitar tensión inversor");
 8000a0e:	4826      	ldr	r0, [pc, #152]	@ (8000aa8 <main+0x3bc>)
 8000a10:	f001 f84a 	bl	8001aa8 <print>
		    }
		static uint32_t last = 0;
		    if (HAL_GetTick() - last >= 500) {
 8000a14:	f003 f856 	bl	8003ac4 <HAL_GetTick>
 8000a18:	4602      	mov	r2, r0
 8000a1a:	4b25      	ldr	r3, [pc, #148]	@ (8000ab0 <main+0x3c4>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	1ad3      	subs	r3, r2, r3
 8000a20:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000a24:	d306      	bcc.n	8000a34 <main+0x348>
		        last = HAL_GetTick();
 8000a26:	f003 f84d 	bl	8003ac4 <HAL_GetTick>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	4a20      	ldr	r2, [pc, #128]	@ (8000ab0 <main+0x3c4>)
 8000a2e:	6013      	str	r3, [r2, #0]
		        tel_send_now();   // sends one 32-byte frame
 8000a30:	f001 fd6e 	bl	8002510 <tel_send_now>
		    }
		if (config_inv_lectura_v == 1)
 8000a34:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab4 <main+0x3c8>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d102      	bne.n	8000a42 <main+0x356>
		{

#if DEBUG
			print("CAN_INV: Lectura de DC_BUS_VOLTAGE correctamente");
 8000a3c:	481e      	ldr	r0, [pc, #120]	@ (8000ab8 <main+0x3cc>)
 8000a3e:	f001 f833 	bl	8001aa8 <print>
	while (config_inv_lectura_v == 0)
 8000a42:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab4 <main+0x3c8>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d0d4      	beq.n	80009f4 <main+0x308>
	}

#if !CALIBRATION

	// PRE-CHARGE
	while (precarga_inv == 0 && inv_dc_bus_voltage < 300)
 8000a4a:	e08e      	b.n	8000b6a <main+0x47e>
 8000a4c:	58020800 	.word	0x58020800
 8000a50:	58021800 	.word	0x58021800
 8000a54:	24000460 	.word	0x24000460
 8000a58:	080144a0 	.word	0x080144a0
 8000a5c:	24000614 	.word	0x24000614
 8000a60:	080144cc 	.word	0x080144cc
 8000a64:	24000008 	.word	0x24000008
 8000a68:	080144ec 	.word	0x080144ec
 8000a6c:	44c00000 	.word	0x44c00000
 8000a70:	43a08000 	.word	0x43a08000
 8000a74:	449a4000 	.word	0x449a4000
 8000a78:	240007ac 	.word	0x240007ac
 8000a7c:	240000ac 	.word	0x240000ac
 8000a80:	0801450c 	.word	0x0801450c
 8000a84:	24000204 	.word	0x24000204
 8000a88:	0801452c 	.word	0x0801452c
 8000a8c:	0801454c 	.word	0x0801454c
 8000a90:	240002a4 	.word	0x240002a4
 8000a94:	08014574 	.word	0x08014574
 8000a98:	08014594 	.word	0x08014594
 8000a9c:	24000344 	.word	0x24000344
 8000aa0:	080145bc 	.word	0x080145bc
 8000aa4:	080145dc 	.word	0x080145dc
 8000aa8:	08014604 	.word	0x08014604
 8000aac:	24000534 	.word	0x24000534
 8000ab0:	24000940 	.word	0x24000940
 8000ab4:	240000a4 	.word	0x240000a4
 8000ab8:	08014620 	.word	0x08014620
	{

#if DEBUG
		sprintf(TxBuffer, "DC_BUS_VOLTAGE: %i V\r\n", inv_dc_bus_voltage);
 8000abc:	4b9e      	ldr	r3, [pc, #632]	@ (8000d38 <main+0x64c>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	499e      	ldr	r1, [pc, #632]	@ (8000d3c <main+0x650>)
 8000ac4:	489e      	ldr	r0, [pc, #632]	@ (8000d40 <main+0x654>)
 8000ac6:	f013 f83f 	bl	8013b48 <siprintf>
		//print(TxBuffer);
		// printValue((int) ((byte1_voltage << 8) | byte0_voltage));
#endif

		// Reenvío DC_BUS_VOLTAGE al AMS por CAN_ACU
		TxHeader_Acu.Identifier = ID_dc_bus_voltage;
 8000aca:	4b9e      	ldr	r3, [pc, #632]	@ (8000d44 <main+0x658>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a9e      	ldr	r2, [pc, #632]	@ (8000d48 <main+0x65c>)
 8000ad0:	6013      	str	r3, [r2, #0]
		TxHeader_Acu.DataLength = 2;
 8000ad2:	4b9d      	ldr	r3, [pc, #628]	@ (8000d48 <main+0x65c>)
 8000ad4:	2202      	movs	r2, #2
 8000ad6:	60da      	str	r2, [r3, #12]
		TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 8000ad8:	4b9b      	ldr	r3, [pc, #620]	@ (8000d48 <main+0x65c>)
 8000ada:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ade:	605a      	str	r2, [r3, #4]
		TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 8000ae0:	4b99      	ldr	r3, [pc, #612]	@ (8000d48 <main+0x65c>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	619a      	str	r2, [r3, #24]
		TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 8000ae6:	4b98      	ldr	r3, [pc, #608]	@ (8000d48 <main+0x65c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]

		/*		TxData_Acu[0] = byte0_voltage;
		 TxData_Acu[1] = byte1_voltage;*/
		TxData_Acu[0] = inv_dc_bus_voltage & 0xFF;
 8000aec:	4b92      	ldr	r3, [pc, #584]	@ (8000d38 <main+0x64c>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	b2da      	uxtb	r2, r3
 8000af2:	4b96      	ldr	r3, [pc, #600]	@ (8000d4c <main+0x660>)
 8000af4:	701a      	strb	r2, [r3, #0]
		TxData_Acu[1] = (inv_dc_bus_voltage >> 8) & 0xFF;
 8000af6:	4b90      	ldr	r3, [pc, #576]	@ (8000d38 <main+0x64c>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	121b      	asrs	r3, r3, #8
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	4b93      	ldr	r3, [pc, #588]	@ (8000d4c <main+0x660>)
 8000b00:	705a      	strb	r2, [r3, #1]
		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK)
 8000b02:	4a92      	ldr	r2, [pc, #584]	@ (8000d4c <main+0x660>)
 8000b04:	4990      	ldr	r1, [pc, #576]	@ (8000d48 <main+0x65c>)
 8000b06:	4892      	ldr	r0, [pc, #584]	@ (8000d50 <main+0x664>)
 8000b08:	f008 f879 	bl	8008bfe <HAL_FDCAN_AddMessageToTxFifoQ>
#if DEBUG
			//print("CAN_ACU: DC_BUS_VOLTAGE enviado a AMS");
#endif
		}

		precharge_button = HAL_GPIO_ReadPin(START_BUTTON_GPIO_Port,
 8000b0c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b10:	4890      	ldr	r0, [pc, #576]	@ (8000d54 <main+0x668>)
 8000b12:	f009 f95f 	bl	8009dd4 <HAL_GPIO_ReadPin>
 8000b16:	4603      	mov	r3, r0
 8000b18:	461a      	mov	r2, r3
 8000b1a:	4b8f      	ldr	r3, [pc, #572]	@ (8000d58 <main+0x66c>)
 8000b1c:	601a      	str	r2, [r3, #0]
											START_BUTTON_Pin);
		if (precharge_button == 1){
 8000b1e:	4b8e      	ldr	r3, [pc, #568]	@ (8000d58 <main+0x66c>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d11a      	bne.n	8000b5c <main+0x470>
			TxHeader_Acu.Identifier = 0x600;
 8000b26:	4b88      	ldr	r3, [pc, #544]	@ (8000d48 <main+0x65c>)
 8000b28:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8000b2c:	601a      	str	r2, [r3, #0]
			TxHeader_Acu.DataLength = 2;
 8000b2e:	4b86      	ldr	r3, [pc, #536]	@ (8000d48 <main+0x65c>)
 8000b30:	2202      	movs	r2, #2
 8000b32:	60da      	str	r2, [r3, #12]
			TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 8000b34:	4b84      	ldr	r3, [pc, #528]	@ (8000d48 <main+0x65c>)
 8000b36:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b3a:	605a      	str	r2, [r3, #4]
			TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 8000b3c:	4b82      	ldr	r3, [pc, #520]	@ (8000d48 <main+0x65c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	619a      	str	r2, [r3, #24]
			TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 8000b42:	4b81      	ldr	r3, [pc, #516]	@ (8000d48 <main+0x65c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]


			TxData_Acu[0] = precharge_button;
 8000b48:	4b83      	ldr	r3, [pc, #524]	@ (8000d58 <main+0x66c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	b2da      	uxtb	r2, r3
 8000b4e:	4b7f      	ldr	r3, [pc, #508]	@ (8000d4c <main+0x660>)
 8000b50:	701a      	strb	r2, [r3, #0]

			if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK)
 8000b52:	4a7e      	ldr	r2, [pc, #504]	@ (8000d4c <main+0x660>)
 8000b54:	497c      	ldr	r1, [pc, #496]	@ (8000d48 <main+0x65c>)
 8000b56:	487e      	ldr	r0, [pc, #504]	@ (8000d50 <main+0x664>)
 8000b58:	f008 f851 	bl	8008bfe <HAL_FDCAN_AddMessageToTxFifoQ>
			}
		}



		if (precarga_inv == 1)
 8000b5c:	4b7f      	ldr	r3, [pc, #508]	@ (8000d5c <main+0x670>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d102      	bne.n	8000b6a <main+0x47e>
		{
#if DEBUG
			print("CAN_ACU: Precarga correcta");
 8000b64:	487e      	ldr	r0, [pc, #504]	@ (8000d60 <main+0x674>)
 8000b66:	f000 ff9f 	bl	8001aa8 <print>
	while (precarga_inv == 0 && inv_dc_bus_voltage < 300)
 8000b6a:	4b7c      	ldr	r3, [pc, #496]	@ (8000d5c <main+0x670>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d104      	bne.n	8000b7c <main+0x490>
 8000b72:	4b71      	ldr	r3, [pc, #452]	@ (8000d38 <main+0x64c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000b7a:	db9f      	blt.n	8000abc <main+0x3d0>
#endif
		}

	}

	TxHeader_Acu.Identifier = ID_dc_bus_voltage;
 8000b7c:	4b71      	ldr	r3, [pc, #452]	@ (8000d44 <main+0x658>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a71      	ldr	r2, [pc, #452]	@ (8000d48 <main+0x65c>)
 8000b82:	6013      	str	r3, [r2, #0]
	TxHeader_Acu.DataLength = 2;
 8000b84:	4b70      	ldr	r3, [pc, #448]	@ (8000d48 <main+0x65c>)
 8000b86:	2202      	movs	r2, #2
 8000b88:	60da      	str	r2, [r3, #12]
	TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 8000b8a:	4b6f      	ldr	r3, [pc, #444]	@ (8000d48 <main+0x65c>)
 8000b8c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b90:	605a      	str	r2, [r3, #4]
	TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 8000b92:	4b6d      	ldr	r3, [pc, #436]	@ (8000d48 <main+0x65c>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	619a      	str	r2, [r3, #24]
	TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 8000b98:	4b6b      	ldr	r3, [pc, #428]	@ (8000d48 <main+0x65c>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]

	TxData_Acu[0] = inv_dc_bus_voltage & 0xFF;
 8000b9e:	4b66      	ldr	r3, [pc, #408]	@ (8000d38 <main+0x64c>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	4b69      	ldr	r3, [pc, #420]	@ (8000d4c <main+0x660>)
 8000ba6:	701a      	strb	r2, [r3, #0]
	TxData_Acu[1] = (inv_dc_bus_voltage >> 8) & 0xFF;
 8000ba8:	4b63      	ldr	r3, [pc, #396]	@ (8000d38 <main+0x64c>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	121b      	asrs	r3, r3, #8
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	4b66      	ldr	r3, [pc, #408]	@ (8000d4c <main+0x660>)
 8000bb2:	705a      	strb	r2, [r3, #1]
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK)
 8000bb4:	4a65      	ldr	r2, [pc, #404]	@ (8000d4c <main+0x660>)
 8000bb6:	4964      	ldr	r1, [pc, #400]	@ (8000d48 <main+0x65c>)
 8000bb8:	4865      	ldr	r0, [pc, #404]	@ (8000d50 <main+0x664>)
 8000bba:	f008 f820 	bl	8008bfe <HAL_FDCAN_AddMessageToTxFifoQ>
	//HAL_TIM_Base_Start_IT(&htim16);
#endif

#if 1
	// Espera a que se pulse el botón de arranque mientras se pisa el freno
	while (boton_arranque == 0)
 8000bbe:	e033      	b.n	8000c28 <main+0x53c>
	{

		HAL_ADC_Start(&hadc1);
 8000bc0:	4868      	ldr	r0, [pc, #416]	@ (8000d64 <main+0x678>)
 8000bc2:	f003 fcf3 	bl	80045ac <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000bc6:	f04f 31ff 	mov.w	r1, #4294967295
 8000bca:	4866      	ldr	r0, [pc, #408]	@ (8000d64 <main+0x678>)
 8000bcc:	f003 fdec 	bl	80047a8 <HAL_ADC_PollForConversion>

		s_freno = HAL_ADC_GetValue(&hadc1);
 8000bd0:	4864      	ldr	r0, [pc, #400]	@ (8000d64 <main+0x678>)
 8000bd2:	f003 ffb9 	bl	8004b48 <HAL_ADC_GetValue>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b63      	ldr	r3, [pc, #396]	@ (8000d68 <main+0x67c>)
 8000bdc:	601a      	str	r2, [r3, #0]

		HAL_ADC_Stop(&hadc1);
 8000bde:	4861      	ldr	r0, [pc, #388]	@ (8000d64 <main+0x678>)
 8000be0:	f003 fdae 	bl	8004740 <HAL_ADC_Stop>

		//printValue(s_freno);
		print("Pulsa botón");
 8000be4:	4861      	ldr	r0, [pc, #388]	@ (8000d6c <main+0x680>)
 8000be6:	f000 ff5f 	bl	8001aa8 <print>

		start_button_act = HAL_GPIO_ReadPin(START_BUTTON_GPIO_Port,
 8000bea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bee:	4859      	ldr	r0, [pc, #356]	@ (8000d54 <main+0x668>)
 8000bf0:	f009 f8f0 	bl	8009dd4 <HAL_GPIO_ReadPin>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	4b5d      	ldr	r3, [pc, #372]	@ (8000d70 <main+0x684>)
 8000bfa:	601a      	str	r2, [r3, #0]
											START_BUTTON_Pin);

		if (start_button_act == 1)
 8000bfc:	4b5c      	ldr	r3, [pc, #368]	@ (8000d70 <main+0x684>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d111      	bne.n	8000c28 <main+0x53c>
		{

#if DEBUG
			//printValue(s_freno);
			print("Pulsa freno");
 8000c04:	485b      	ldr	r0, [pc, #364]	@ (8000d74 <main+0x688>)
 8000c06:	f000 ff4f 	bl	8001aa8 <print>
#endif
			if (s_freno > 900)
 8000c0a:	4b57      	ldr	r3, [pc, #348]	@ (8000d68 <main+0x67c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8000c12:	dd06      	ble.n	8000c22 <main+0x536>
			{
				boton_arranque = 1;
 8000c14:	4b58      	ldr	r3, [pc, #352]	@ (8000d78 <main+0x68c>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	601a      	str	r2, [r3, #0]
#if DEBUG
				print("Coche arrancado correctamente");
 8000c1a:	4858      	ldr	r0, [pc, #352]	@ (8000d7c <main+0x690>)
 8000c1c:	f000 ff44 	bl	8001aa8 <print>
 8000c20:	e002      	b.n	8000c28 <main+0x53c>
#endif
			}
			else
			{
#if DEBUG
				print("Pulsar freno para arrancar");
 8000c22:	4857      	ldr	r0, [pc, #348]	@ (8000d80 <main+0x694>)
 8000c24:	f000 ff40 	bl	8001aa8 <print>
	while (boton_arranque == 0)
 8000c28:	4b53      	ldr	r3, [pc, #332]	@ (8000d78 <main+0x68c>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d0c7      	beq.n	8000bc0 <main+0x4d4>
	}
#endif

	// Activar READY-TO-DRIVE-SOUND (RTDS) durante 2s
#if DEBUG
	print("RTDS sonando");
 8000c30:	4854      	ldr	r0, [pc, #336]	@ (8000d84 <main+0x698>)
 8000c32:	f000 ff39 	bl	8001aa8 <print>
#endif
#if !CALIBRATION

	flag_r2d = 1;
 8000c36:	4b54      	ldr	r3, [pc, #336]	@ (8000d88 <main+0x69c>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(RTDS_GPIO_Port, RTDS_Pin, GPIO_PIN_SET); // Enciende RTDS
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	2102      	movs	r1, #2
 8000c40:	4852      	ldr	r0, [pc, #328]	@ (8000d8c <main+0x6a0>)
 8000c42:	f009 f8df 	bl	8009e04 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 8000c46:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000c4a:	f002 ff47 	bl	8003adc <HAL_Delay>
	HAL_GPIO_WritePin(RTDS_GPIO_Port, RTDS_Pin, GPIO_PIN_RESET); // Apaga RTDS
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2102      	movs	r1, #2
 8000c52:	484e      	ldr	r0, [pc, #312]	@ (8000d8c <main+0x6a0>)
 8000c54:	f009 f8d6 	bl	8009e04 <HAL_GPIO_WritePin>

#endif

#if DEBUG
	print("RTDS apagado");
 8000c58:	484d      	ldr	r0, [pc, #308]	@ (8000d90 <main+0x6a4>)
 8000c5a:	f000 ff25 	bl	8001aa8 <print>
#endif

	// Estado STAND BY inversor
	while (state != 3)
 8000c5e:	e006      	b.n	8000c6e <main+0x582>
	{
		if (state == 3)
 8000c60:	4b4c      	ldr	r3, [pc, #304]	@ (8000d94 <main+0x6a8>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b03      	cmp	r3, #3
 8000c66:	d102      	bne.n	8000c6e <main+0x582>
		{
#if DEBUG
			print("Precarga");
 8000c68:	484b      	ldr	r0, [pc, #300]	@ (8000d98 <main+0x6ac>)
 8000c6a:	f000 ff1d 	bl	8001aa8 <print>
	while (state != 3)
 8000c6e:	4b49      	ldr	r3, [pc, #292]	@ (8000d94 <main+0x6a8>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b03      	cmp	r3, #3
 8000c74:	d1f4      	bne.n	8000c60 <main+0x574>
#endif
		}
	}

#if DEBUG
	print("state : stand by");
 8000c76:	4849      	ldr	r0, [pc, #292]	@ (8000d9c <main+0x6b0>)
 8000c78:	f000 ff16 	bl	8001aa8 <print>
#endif

	while (state != 4)
 8000c7c:	e037      	b.n	8000cee <main+0x602>
	{
		// Estado READY inversor
		TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8000c7e:	4b48      	ldr	r3, [pc, #288]	@ (8000da0 <main+0x6b4>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a48      	ldr	r2, [pc, #288]	@ (8000da4 <main+0x6b8>)
 8000c84:	6013      	str	r3, [r2, #0]
		TxHeader_Inv.DataLength = 3;
 8000c86:	4b47      	ldr	r3, [pc, #284]	@ (8000da4 <main+0x6b8>)
 8000c88:	2203      	movs	r2, #3
 8000c8a:	60da      	str	r2, [r3, #12]
		TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8000c8c:	4b45      	ldr	r3, [pc, #276]	@ (8000da4 <main+0x6b8>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	605a      	str	r2, [r3, #4]

		TxData_Inv[0] = 0x0;
 8000c92:	4b45      	ldr	r3, [pc, #276]	@ (8000da8 <main+0x6bc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	701a      	strb	r2, [r3, #0]
		TxData_Inv[1] = 0x0;
 8000c98:	4b43      	ldr	r3, [pc, #268]	@ (8000da8 <main+0x6bc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	705a      	strb	r2, [r3, #1]
		TxData_Inv[2] = 0x4;
 8000c9e:	4b42      	ldr	r3, [pc, #264]	@ (8000da8 <main+0x6bc>)
 8000ca0:	2204      	movs	r2, #4
 8000ca2:	709a      	strb	r2, [r3, #2]
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8000ca4:	4a40      	ldr	r2, [pc, #256]	@ (8000da8 <main+0x6bc>)
 8000ca6:	493f      	ldr	r1, [pc, #252]	@ (8000da4 <main+0x6b8>)
 8000ca8:	4840      	ldr	r0, [pc, #256]	@ (8000dac <main+0x6c0>)
 8000caa:	f007 ffa8 	bl	8008bfe <HAL_FDCAN_AddMessageToTxFifoQ>

		TxHeader_Inv.Identifier = 0x362;
 8000cae:	4b3d      	ldr	r3, [pc, #244]	@ (8000da4 <main+0x6b8>)
 8000cb0:	f240 3262 	movw	r2, #866	@ 0x362
 8000cb4:	601a      	str	r2, [r3, #0]
		TxHeader_Inv.DataLength = 4;
 8000cb6:	4b3b      	ldr	r3, [pc, #236]	@ (8000da4 <main+0x6b8>)
 8000cb8:	2204      	movs	r2, #4
 8000cba:	60da      	str	r2, [r3, #12]

		real_torque = 0;
 8000cbc:	4b3c      	ldr	r3, [pc, #240]	@ (8000db0 <main+0x6c4>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	801a      	strh	r2, [r3, #0]

		TxData_Inv[0] = 0x0;
 8000cc2:	4b39      	ldr	r3, [pc, #228]	@ (8000da8 <main+0x6bc>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	701a      	strb	r2, [r3, #0]
		TxData_Inv[1] = 0x0;
 8000cc8:	4b37      	ldr	r3, [pc, #220]	@ (8000da8 <main+0x6bc>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	705a      	strb	r2, [r3, #1]
		TxData_Inv[2] = real_torque;
 8000cce:	4b38      	ldr	r3, [pc, #224]	@ (8000db0 <main+0x6c4>)
 8000cd0:	881b      	ldrh	r3, [r3, #0]
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	4b34      	ldr	r3, [pc, #208]	@ (8000da8 <main+0x6bc>)
 8000cd6:	709a      	strb	r2, [r3, #2]
		TxData_Inv[3] = 0x0;
 8000cd8:	4b33      	ldr	r3, [pc, #204]	@ (8000da8 <main+0x6bc>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	70da      	strb	r2, [r3, #3]
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8000cde:	4a32      	ldr	r2, [pc, #200]	@ (8000da8 <main+0x6bc>)
 8000ce0:	4930      	ldr	r1, [pc, #192]	@ (8000da4 <main+0x6b8>)
 8000ce2:	4832      	ldr	r0, [pc, #200]	@ (8000dac <main+0x6c0>)
 8000ce4:	f007 ff8b 	bl	8008bfe <HAL_FDCAN_AddMessageToTxFifoQ>
		HAL_Delay(10);
 8000ce8:	200a      	movs	r0, #10
 8000cea:	f002 fef7 	bl	8003adc <HAL_Delay>
	while (state != 4)
 8000cee:	4b29      	ldr	r3, [pc, #164]	@ (8000d94 <main+0x6a8>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b04      	cmp	r3, #4
 8000cf4:	d1c3      	bne.n	8000c7e <main+0x592>

	}

#if DEBUG
	print("state: ready");
 8000cf6:	482f      	ldr	r0, [pc, #188]	@ (8000db4 <main+0x6c8>)
 8000cf8:	f000 fed6 	bl	8001aa8 <print>
	{

		// Envío datos telemetría
		static uint32_t last_1s = 0;
		static uint32_t last_irq_seen = 0;
		if (HAL_GetTick() - last_1s >= 1000) {
 8000cfc:	f002 fee2 	bl	8003ac4 <HAL_GetTick>
 8000d00:	4602      	mov	r2, r0
 8000d02:	4b2d      	ldr	r3, [pc, #180]	@ (8000db8 <main+0x6cc>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	1ad3      	subs	r3, r2, r3
 8000d08:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000d0c:	f0c0 8084 	bcc.w	8000e18 <main+0x72c>
		    last_1s = HAL_GetTick();
 8000d10:	f002 fed8 	bl	8003ac4 <HAL_GetTick>
 8000d14:	4603      	mov	r3, r0
 8000d16:	4a28      	ldr	r2, [pc, #160]	@ (8000db8 <main+0x6cc>)
 8000d18:	6013      	str	r3, [r2, #0]
		    char hb[96];
		    snprintf(hb, sizeof(hb),
 8000d1a:	4b28      	ldr	r3, [pc, #160]	@ (8000dbc <main+0x6d0>)
 8000d1c:	681e      	ldr	r6, [r3, #0]
 8000d1e:	4b28      	ldr	r3, [pc, #160]	@ (8000dc0 <main+0x6d4>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a28      	ldr	r2, [pc, #160]	@ (8000dc4 <main+0x6d8>)
 8000d24:	6812      	ldr	r2, [r2, #0]
		             "[TEL] irq=%lu sent=%lu fail=%lu%s  Vdc=%d  rpm=%d  state=%u\r\n",
		             (unsigned long)tel_irq_cnt,
		             (unsigned long)tel_sent_ok,
		             (unsigned long)tel_sent_fail,
		             (tel_irq_cnt == last_irq_seen) ? " (NO NEW IRQ!)" : "",
 8000d26:	4925      	ldr	r1, [pc, #148]	@ (8000dbc <main+0x6d0>)
 8000d28:	6808      	ldr	r0, [r1, #0]
 8000d2a:	4927      	ldr	r1, [pc, #156]	@ (8000dc8 <main+0x6dc>)
 8000d2c:	6809      	ldr	r1, [r1, #0]
		    snprintf(hb, sizeof(hb),
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d14e      	bne.n	8000dd0 <main+0x6e4>
 8000d32:	4926      	ldr	r1, [pc, #152]	@ (8000dcc <main+0x6e0>)
 8000d34:	e04d      	b.n	8000dd2 <main+0x6e6>
 8000d36:	bf00      	nop
 8000d38:	240007a4 	.word	0x240007a4
 8000d3c:	08014654 	.word	0x08014654
 8000d40:	24000840 	.word	0x24000840
 8000d44:	24000004 	.word	0x24000004
 8000d48:	24000704 	.word	0x24000704
 8000d4c:	24000788 	.word	0x24000788
 8000d50:	240002a4 	.word	0x240002a4
 8000d54:	58021400 	.word	0x58021400
 8000d58:	240007d8 	.word	0x240007d8
 8000d5c:	240000a0 	.word	0x240000a0
 8000d60:	0801466c 	.word	0x0801466c
 8000d64:	240000ac 	.word	0x240000ac
 8000d68:	240007bc 	.word	0x240007bc
 8000d6c:	08014688 	.word	0x08014688
 8000d70:	240007a0 	.word	0x240007a0
 8000d74:	08014698 	.word	0x08014698
 8000d78:	240000a8 	.word	0x240000a8
 8000d7c:	080146a4 	.word	0x080146a4
 8000d80:	080146c4 	.word	0x080146c4
 8000d84:	080146e0 	.word	0x080146e0
 8000d88:	2400093c 	.word	0x2400093c
 8000d8c:	58020800 	.word	0x58020800
 8000d90:	080146f0 	.word	0x080146f0
 8000d94:	240007ca 	.word	0x240007ca
 8000d98:	08014700 	.word	0x08014700
 8000d9c:	0801470c 	.word	0x0801470c
 8000da0:	24000000 	.word	0x24000000
 8000da4:	240006b8 	.word	0x240006b8
 8000da8:	24000778 	.word	0x24000778
 8000dac:	24000204 	.word	0x24000204
 8000db0:	240007c8 	.word	0x240007c8
 8000db4:	08014720 	.word	0x08014720
 8000db8:	24000944 	.word	0x24000944
 8000dbc:	240006ac 	.word	0x240006ac
 8000dc0:	240006b0 	.word	0x240006b0
 8000dc4:	240006b4 	.word	0x240006b4
 8000dc8:	24000948 	.word	0x24000948
 8000dcc:	08014730 	.word	0x08014730
 8000dd0:	4917      	ldr	r1, [pc, #92]	@ (8000e30 <main+0x744>)
 8000dd2:	4818      	ldr	r0, [pc, #96]	@ (8000e34 <main+0x748>)
 8000dd4:	6800      	ldr	r0, [r0, #0]
 8000dd6:	4c18      	ldr	r4, [pc, #96]	@ (8000e38 <main+0x74c>)
 8000dd8:	6824      	ldr	r4, [r4, #0]
 8000dda:	4d18      	ldr	r5, [pc, #96]	@ (8000e3c <main+0x750>)
 8000ddc:	782d      	ldrb	r5, [r5, #0]
 8000dde:	46bc      	mov	ip, r7
 8000de0:	9505      	str	r5, [sp, #20]
 8000de2:	9404      	str	r4, [sp, #16]
 8000de4:	9003      	str	r0, [sp, #12]
 8000de6:	9102      	str	r1, [sp, #8]
 8000de8:	9201      	str	r2, [sp, #4]
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	4633      	mov	r3, r6
 8000dee:	4a14      	ldr	r2, [pc, #80]	@ (8000e40 <main+0x754>)
 8000df0:	2160      	movs	r1, #96	@ 0x60
 8000df2:	4660      	mov	r0, ip
 8000df4:	f012 fe72 	bl	8013adc <sniprintf>
		             inv_dc_bus_voltage, e_machine_rpm, state);
		    HAL_UART_Transmit(&huart2, (uint8_t*)hb, strlen(hb), HAL_MAX_DELAY);
 8000df8:	463b      	mov	r3, r7
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff fa88 	bl	8000310 <strlen>
 8000e00:	4603      	mov	r3, r0
 8000e02:	b29a      	uxth	r2, r3
 8000e04:	4639      	mov	r1, r7
 8000e06:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0a:	480e      	ldr	r0, [pc, #56]	@ (8000e44 <main+0x758>)
 8000e0c:	f010 fbda 	bl	80115c4 <HAL_UART_Transmit>
		    last_irq_seen = tel_irq_cnt;
 8000e10:	4b0d      	ldr	r3, [pc, #52]	@ (8000e48 <main+0x75c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a0d      	ldr	r2, [pc, #52]	@ (8000e4c <main+0x760>)
 8000e16:	6013      	str	r3, [r2, #0]

		}

		if (tel_tick >= 500) {
 8000e18:	4b0d      	ldr	r3, [pc, #52]	@ (8000e50 <main+0x764>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000e20:	f4ff af6c 	bcc.w	8000cfc <main+0x610>
		        tel_tick = 0;          // consume the tick
 8000e24:	4b0a      	ldr	r3, [pc, #40]	@ (8000e50 <main+0x764>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
		        tel_send_now();        // SPI + UART OK here (foreground)
 8000e2a:	f001 fb71 	bl	8002510 <tel_send_now>
	{
 8000e2e:	e765      	b.n	8000cfc <main+0x610>
 8000e30:	08014740 	.word	0x08014740
 8000e34:	240007a4 	.word	0x240007a4
 8000e38:	240007a8 	.word	0x240007a8
 8000e3c:	240007ca 	.word	0x240007ca
 8000e40:	08014744 	.word	0x08014744
 8000e44:	24000614 	.word	0x24000614
 8000e48:	240006ac 	.word	0x240006ac
 8000e4c:	24000948 	.word	0x24000948
 8000e50:	240006a8 	.word	0x240006a8

08000e54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b09c      	sub	sp, #112	@ 0x70
 8000e58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e5e:	224c      	movs	r2, #76	@ 0x4c
 8000e60:	2100      	movs	r1, #0
 8000e62:	4618      	mov	r0, r3
 8000e64:	f012 fe92 	bl	8013b8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e68:	1d3b      	adds	r3, r7, #4
 8000e6a:	2220      	movs	r2, #32
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f012 fe8c 	bl	8013b8c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000e74:	2002      	movs	r0, #2
 8000e76:	f008 ffdf 	bl	8009e38 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	603b      	str	r3, [r7, #0]
 8000e7e:	4b2b      	ldr	r3, [pc, #172]	@ (8000f2c <SystemClock_Config+0xd8>)
 8000e80:	699b      	ldr	r3, [r3, #24]
 8000e82:	4a2a      	ldr	r2, [pc, #168]	@ (8000f2c <SystemClock_Config+0xd8>)
 8000e84:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000e88:	6193      	str	r3, [r2, #24]
 8000e8a:	4b28      	ldr	r3, [pc, #160]	@ (8000f2c <SystemClock_Config+0xd8>)
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e92:	603b      	str	r3, [r7, #0]
 8000e94:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e96:	bf00      	nop
 8000e98:	4b24      	ldr	r3, [pc, #144]	@ (8000f2c <SystemClock_Config+0xd8>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ea0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ea4:	d1f8      	bne.n	8000e98 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000eaa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000eae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8000ebc:	232c      	movs	r3, #44	@ 0x2c
 8000ebe:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ec4:	2304      	movs	r3, #4
 8000ec6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ecc:	230c      	movs	r3, #12
 8000ece:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000edc:	4618      	mov	r0, r3
 8000ede:	f008 ffe5 	bl	8009eac <HAL_RCC_OscConfig>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ee8:	f001 fbe8 	bl	80026bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eec:	233f      	movs	r3, #63	@ 0x3f
 8000eee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ef8:	2308      	movs	r3, #8
 8000efa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000efc:	2340      	movs	r3, #64	@ 0x40
 8000efe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f00:	2340      	movs	r3, #64	@ 0x40
 8000f02:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f08:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f0a:	2340      	movs	r3, #64	@ 0x40
 8000f0c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	2103      	movs	r1, #3
 8000f12:	4618      	mov	r0, r3
 8000f14:	f009 fba4 	bl	800a660 <HAL_RCC_ClockConfig>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000f1e:	f001 fbcd 	bl	80026bc <Error_Handler>
  }
}
 8000f22:	bf00      	nop
 8000f24:	3770      	adds	r7, #112	@ 0x70
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	58024800 	.word	0x58024800

08000f30 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b0ae      	sub	sp, #184	@ 0xb8
 8000f34:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f36:	463b      	mov	r3, r7
 8000f38:	22b8      	movs	r2, #184	@ 0xb8
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f012 fe25 	bl	8013b8c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SDMMC;
 8000f42:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8000f46:	f04f 0300 	mov.w	r3, #0
 8000f4a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000f52:	2310      	movs	r3, #16
 8000f54:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000f56:	2302      	movs	r3, #2
 8000f58:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 1;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000f62:	23c0      	movs	r3, #192	@ 0xc0
 8000f64:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000f66:	2300      	movs	r3, #0
 8000f68:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000f6e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f72:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000f74:	2300      	movs	r3, #0
 8000f76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f7a:	463b      	mov	r3, r7
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f009 fefb 	bl	800ad78 <HAL_RCCEx_PeriphCLKConfig>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8000f88:	f001 fb98 	bl	80026bc <Error_Handler>
  }
}
 8000f8c:	bf00      	nop
 8000f8e:	37b8      	adds	r7, #184	@ 0xb8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08c      	sub	sp, #48	@ 0x30
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fa6:	463b      	mov	r3, r7
 8000fa8:	2224      	movs	r2, #36	@ 0x24
 8000faa:	2100      	movs	r1, #0
 8000fac:	4618      	mov	r0, r3
 8000fae:	f012 fded 	bl	8013b8c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fb2:	4b41      	ldr	r3, [pc, #260]	@ (80010b8 <MX_ADC1_Init+0x124>)
 8000fb4:	4a41      	ldr	r2, [pc, #260]	@ (80010bc <MX_ADC1_Init+0x128>)
 8000fb6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000fb8:	4b3f      	ldr	r3, [pc, #252]	@ (80010b8 <MX_ADC1_Init+0x124>)
 8000fba:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000fbe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fc0:	4b3d      	ldr	r3, [pc, #244]	@ (80010b8 <MX_ADC1_Init+0x124>)
 8000fc2:	2208      	movs	r2, #8
 8000fc4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000fc6:	4b3c      	ldr	r3, [pc, #240]	@ (80010b8 <MX_ADC1_Init+0x124>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000fcc:	4b3a      	ldr	r3, [pc, #232]	@ (80010b8 <MX_ADC1_Init+0x124>)
 8000fce:	2208      	movs	r2, #8
 8000fd0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fd2:	4b39      	ldr	r3, [pc, #228]	@ (80010b8 <MX_ADC1_Init+0x124>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000fd8:	4b37      	ldr	r3, [pc, #220]	@ (80010b8 <MX_ADC1_Init+0x124>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8000fde:	4b36      	ldr	r3, [pc, #216]	@ (80010b8 <MX_ADC1_Init+0x124>)
 8000fe0:	2203      	movs	r2, #3
 8000fe2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fe4:	4b34      	ldr	r3, [pc, #208]	@ (80010b8 <MX_ADC1_Init+0x124>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fec:	4b32      	ldr	r3, [pc, #200]	@ (80010b8 <MX_ADC1_Init+0x124>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ff2:	4b31      	ldr	r3, [pc, #196]	@ (80010b8 <MX_ADC1_Init+0x124>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000ff8:	4b2f      	ldr	r3, [pc, #188]	@ (80010b8 <MX_ADC1_Init+0x124>)
 8000ffa:	2203      	movs	r2, #3
 8000ffc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ffe:	4b2e      	ldr	r3, [pc, #184]	@ (80010b8 <MX_ADC1_Init+0x124>)
 8001000:	2200      	movs	r2, #0
 8001002:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001004:	4b2c      	ldr	r3, [pc, #176]	@ (80010b8 <MX_ADC1_Init+0x124>)
 8001006:	2200      	movs	r2, #0
 8001008:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 800100a:	4b2b      	ldr	r3, [pc, #172]	@ (80010b8 <MX_ADC1_Init+0x124>)
 800100c:	2200      	movs	r2, #0
 800100e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8001012:	4b29      	ldr	r3, [pc, #164]	@ (80010b8 <MX_ADC1_Init+0x124>)
 8001014:	2201      	movs	r2, #1
 8001016:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001018:	4827      	ldr	r0, [pc, #156]	@ (80010b8 <MX_ADC1_Init+0x124>)
 800101a:	f003 f8bf 	bl	800419c <HAL_ADC_Init>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001024:	f001 fb4a 	bl	80026bc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001028:	2300      	movs	r3, #0
 800102a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800102c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001030:	4619      	mov	r1, r3
 8001032:	4821      	ldr	r0, [pc, #132]	@ (80010b8 <MX_ADC1_Init+0x124>)
 8001034:	f005 f89e 	bl	8006174 <HAL_ADCEx_MultiModeConfigChannel>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800103e:	f001 fb3d 	bl	80026bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001042:	4b1f      	ldr	r3, [pc, #124]	@ (80010c0 <MX_ADC1_Init+0x12c>)
 8001044:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001046:	2306      	movs	r3, #6
 8001048:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 800104a:	2305      	movs	r3, #5
 800104c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800104e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001052:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001054:	2304      	movs	r3, #4
 8001056:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800105c:	2300      	movs	r3, #0
 800105e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001062:	463b      	mov	r3, r7
 8001064:	4619      	mov	r1, r3
 8001066:	4814      	ldr	r0, [pc, #80]	@ (80010b8 <MX_ADC1_Init+0x124>)
 8001068:	f003 ffd4 	bl	8005014 <HAL_ADC_ConfigChannel>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001072:	f001 fb23 	bl	80026bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001076:	4b13      	ldr	r3, [pc, #76]	@ (80010c4 <MX_ADC1_Init+0x130>)
 8001078:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800107a:	230c      	movs	r3, #12
 800107c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800107e:	463b      	mov	r3, r7
 8001080:	4619      	mov	r1, r3
 8001082:	480d      	ldr	r0, [pc, #52]	@ (80010b8 <MX_ADC1_Init+0x124>)
 8001084:	f003 ffc6 	bl	8005014 <HAL_ADC_ConfigChannel>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800108e:	f001 fb15 	bl	80026bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001092:	4b0d      	ldr	r3, [pc, #52]	@ (80010c8 <MX_ADC1_Init+0x134>)
 8001094:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001096:	2312      	movs	r3, #18
 8001098:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800109a:	463b      	mov	r3, r7
 800109c:	4619      	mov	r1, r3
 800109e:	4806      	ldr	r0, [pc, #24]	@ (80010b8 <MX_ADC1_Init+0x124>)
 80010a0:	f003 ffb8 	bl	8005014 <HAL_ADC_ConfigChannel>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 80010aa:	f001 fb07 	bl	80026bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010ae:	bf00      	nop
 80010b0:	3730      	adds	r7, #48	@ 0x30
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	240000ac 	.word	0x240000ac
 80010bc:	40022000 	.word	0x40022000
 80010c0:	10c00010 	.word	0x10c00010
 80010c4:	14f00020 	.word	0x14f00020
 80010c8:	08600004 	.word	0x08600004

080010cc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	@ 0x28
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	2224      	movs	r2, #36	@ 0x24
 80010d6:	2100      	movs	r1, #0
 80010d8:	4618      	mov	r0, r3
 80010da:	f012 fd57 	bl	8013b8c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80010de:	4b2c      	ldr	r3, [pc, #176]	@ (8001190 <MX_ADC2_Init+0xc4>)
 80010e0:	4a2c      	ldr	r2, [pc, #176]	@ (8001194 <MX_ADC2_Init+0xc8>)
 80010e2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80010e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001190 <MX_ADC2_Init+0xc4>)
 80010e6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80010ea:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80010ec:	4b28      	ldr	r3, [pc, #160]	@ (8001190 <MX_ADC2_Init+0xc4>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010f2:	4b27      	ldr	r3, [pc, #156]	@ (8001190 <MX_ADC2_Init+0xc4>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010f8:	4b25      	ldr	r3, [pc, #148]	@ (8001190 <MX_ADC2_Init+0xc4>)
 80010fa:	2204      	movs	r2, #4
 80010fc:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80010fe:	4b24      	ldr	r3, [pc, #144]	@ (8001190 <MX_ADC2_Init+0xc4>)
 8001100:	2200      	movs	r2, #0
 8001102:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001104:	4b22      	ldr	r3, [pc, #136]	@ (8001190 <MX_ADC2_Init+0xc4>)
 8001106:	2200      	movs	r2, #0
 8001108:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 800110a:	4b21      	ldr	r3, [pc, #132]	@ (8001190 <MX_ADC2_Init+0xc4>)
 800110c:	2201      	movs	r2, #1
 800110e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001110:	4b1f      	ldr	r3, [pc, #124]	@ (8001190 <MX_ADC2_Init+0xc4>)
 8001112:	2200      	movs	r2, #0
 8001114:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001118:	4b1d      	ldr	r3, [pc, #116]	@ (8001190 <MX_ADC2_Init+0xc4>)
 800111a:	2200      	movs	r2, #0
 800111c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800111e:	4b1c      	ldr	r3, [pc, #112]	@ (8001190 <MX_ADC2_Init+0xc4>)
 8001120:	2200      	movs	r2, #0
 8001122:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001124:	4b1a      	ldr	r3, [pc, #104]	@ (8001190 <MX_ADC2_Init+0xc4>)
 8001126:	2200      	movs	r2, #0
 8001128:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800112a:	4b19      	ldr	r3, [pc, #100]	@ (8001190 <MX_ADC2_Init+0xc4>)
 800112c:	2200      	movs	r2, #0
 800112e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001130:	4b17      	ldr	r3, [pc, #92]	@ (8001190 <MX_ADC2_Init+0xc4>)
 8001132:	2200      	movs	r2, #0
 8001134:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8001136:	4b16      	ldr	r3, [pc, #88]	@ (8001190 <MX_ADC2_Init+0xc4>)
 8001138:	2200      	movs	r2, #0
 800113a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 800113e:	4b14      	ldr	r3, [pc, #80]	@ (8001190 <MX_ADC2_Init+0xc4>)
 8001140:	2201      	movs	r2, #1
 8001142:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001144:	4812      	ldr	r0, [pc, #72]	@ (8001190 <MX_ADC2_Init+0xc4>)
 8001146:	f003 f829 	bl	800419c <HAL_ADC_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8001150:	f001 fab4 	bl	80026bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001154:	4b10      	ldr	r3, [pc, #64]	@ (8001198 <MX_ADC2_Init+0xcc>)
 8001156:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001158:	2306      	movs	r3, #6
 800115a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800115c:	2300      	movs	r3, #0
 800115e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001160:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001164:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001166:	2304      	movs	r3, #4
 8001168:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800116e:	2300      	movs	r3, #0
 8001170:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001174:	1d3b      	adds	r3, r7, #4
 8001176:	4619      	mov	r1, r3
 8001178:	4805      	ldr	r0, [pc, #20]	@ (8001190 <MX_ADC2_Init+0xc4>)
 800117a:	f003 ff4b 	bl	8005014 <HAL_ADC_ConfigChannel>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_ADC2_Init+0xbc>
  {
    Error_Handler();
 8001184:	f001 fa9a 	bl	80026bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001188:	bf00      	nop
 800118a:	3728      	adds	r7, #40	@ 0x28
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	2400011c 	.word	0x2400011c
 8001194:	40022100 	.word	0x40022100
 8001198:	25b00200 	.word	0x25b00200

0800119c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b088      	sub	sp, #32
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80011a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001290 <MX_FDCAN1_Init+0xf4>)
 80011a4:	4a3b      	ldr	r2, [pc, #236]	@ (8001294 <MX_FDCAN1_Init+0xf8>)
 80011a6:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80011a8:	4b39      	ldr	r3, [pc, #228]	@ (8001290 <MX_FDCAN1_Init+0xf4>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80011ae:	4b38      	ldr	r3, [pc, #224]	@ (8001290 <MX_FDCAN1_Init+0xf4>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80011b4:	4b36      	ldr	r3, [pc, #216]	@ (8001290 <MX_FDCAN1_Init+0xf4>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80011ba:	4b35      	ldr	r3, [pc, #212]	@ (8001290 <MX_FDCAN1_Init+0xf4>)
 80011bc:	2200      	movs	r2, #0
 80011be:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80011c0:	4b33      	ldr	r3, [pc, #204]	@ (8001290 <MX_FDCAN1_Init+0xf4>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 6;
 80011c6:	4b32      	ldr	r3, [pc, #200]	@ (8001290 <MX_FDCAN1_Init+0xf4>)
 80011c8:	2206      	movs	r2, #6
 80011ca:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80011cc:	4b30      	ldr	r3, [pc, #192]	@ (8001290 <MX_FDCAN1_Init+0xf4>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 80011d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001290 <MX_FDCAN1_Init+0xf4>)
 80011d4:	2202      	movs	r2, #2
 80011d6:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 80011d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001290 <MX_FDCAN1_Init+0xf4>)
 80011da:	2205      	movs	r2, #5
 80011dc:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80011de:	4b2c      	ldr	r3, [pc, #176]	@ (8001290 <MX_FDCAN1_Init+0xf4>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80011e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001290 <MX_FDCAN1_Init+0xf4>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80011ea:	4b29      	ldr	r3, [pc, #164]	@ (8001290 <MX_FDCAN1_Init+0xf4>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80011f0:	4b27      	ldr	r3, [pc, #156]	@ (8001290 <MX_FDCAN1_Init+0xf4>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80011f6:	4b26      	ldr	r3, [pc, #152]	@ (8001290 <MX_FDCAN1_Init+0xf4>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 80011fc:	4b24      	ldr	r3, [pc, #144]	@ (8001290 <MX_FDCAN1_Init+0xf4>)
 80011fe:	2201      	movs	r2, #1
 8001200:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 1;
 8001202:	4b23      	ldr	r3, [pc, #140]	@ (8001290 <MX_FDCAN1_Init+0xf4>)
 8001204:	2201      	movs	r2, #1
 8001206:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 8001208:	4b21      	ldr	r3, [pc, #132]	@ (8001290 <MX_FDCAN1_Init+0xf4>)
 800120a:	2220      	movs	r2, #32
 800120c:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800120e:	4b20      	ldr	r3, [pc, #128]	@ (8001290 <MX_FDCAN1_Init+0xf4>)
 8001210:	2204      	movs	r2, #4
 8001212:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 8001214:	4b1e      	ldr	r3, [pc, #120]	@ (8001290 <MX_FDCAN1_Init+0xf4>)
 8001216:	2220      	movs	r2, #32
 8001218:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800121a:	4b1d      	ldr	r3, [pc, #116]	@ (8001290 <MX_FDCAN1_Init+0xf4>)
 800121c:	2204      	movs	r2, #4
 800121e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8001220:	4b1b      	ldr	r3, [pc, #108]	@ (8001290 <MX_FDCAN1_Init+0xf4>)
 8001222:	2200      	movs	r2, #0
 8001224:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001226:	4b1a      	ldr	r3, [pc, #104]	@ (8001290 <MX_FDCAN1_Init+0xf4>)
 8001228:	2204      	movs	r2, #4
 800122a:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800122c:	4b18      	ldr	r3, [pc, #96]	@ (8001290 <MX_FDCAN1_Init+0xf4>)
 800122e:	2200      	movs	r2, #0
 8001230:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001232:	4b17      	ldr	r3, [pc, #92]	@ (8001290 <MX_FDCAN1_Init+0xf4>)
 8001234:	2200      	movs	r2, #0
 8001236:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 8001238:	4b15      	ldr	r3, [pc, #84]	@ (8001290 <MX_FDCAN1_Init+0xf4>)
 800123a:	2220      	movs	r2, #32
 800123c:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800123e:	4b14      	ldr	r3, [pc, #80]	@ (8001290 <MX_FDCAN1_Init+0xf4>)
 8001240:	2200      	movs	r2, #0
 8001242:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001244:	4b12      	ldr	r3, [pc, #72]	@ (8001290 <MX_FDCAN1_Init+0xf4>)
 8001246:	2204      	movs	r2, #4
 8001248:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800124a:	4811      	ldr	r0, [pc, #68]	@ (8001290 <MX_FDCAN1_Init+0xf4>)
 800124c:	f007 fa58 	bl	8008700 <HAL_FDCAN_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8001256:	f001 fa31 	bl	80026bc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800125a:	2300      	movs	r3, #0
 800125c:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001262:	2302      	movs	r3, #2
 8001264:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001266:	2301      	movs	r3, #1
 8001268:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8001272:	463b      	mov	r3, r7
 8001274:	4619      	mov	r1, r3
 8001276:	4806      	ldr	r0, [pc, #24]	@ (8001290 <MX_FDCAN1_Init+0xf4>)
 8001278:	f007 fc20 	bl	8008abc <HAL_FDCAN_ConfigFilter>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_FDCAN1_Init+0xea>
	{
		Error_Handler();
 8001282:	f001 fa1b 	bl	80026bc <Error_Handler>
	}
  /* USER CODE END FDCAN1_Init 2 */

}
 8001286:	bf00      	nop
 8001288:	3720      	adds	r7, #32
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	24000204 	.word	0x24000204
 8001294:	4000a000 	.word	0x4000a000

08001298 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b088      	sub	sp, #32
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 800129e:	4b3b      	ldr	r3, [pc, #236]	@ (800138c <MX_FDCAN2_Init+0xf4>)
 80012a0:	4a3b      	ldr	r2, [pc, #236]	@ (8001390 <MX_FDCAN2_Init+0xf8>)
 80012a2:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80012a4:	4b39      	ldr	r3, [pc, #228]	@ (800138c <MX_FDCAN2_Init+0xf4>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80012aa:	4b38      	ldr	r3, [pc, #224]	@ (800138c <MX_FDCAN2_Init+0xf4>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80012b0:	4b36      	ldr	r3, [pc, #216]	@ (800138c <MX_FDCAN2_Init+0xf4>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80012b6:	4b35      	ldr	r3, [pc, #212]	@ (800138c <MX_FDCAN2_Init+0xf4>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80012bc:	4b33      	ldr	r3, [pc, #204]	@ (800138c <MX_FDCAN2_Init+0xf4>)
 80012be:	2200      	movs	r2, #0
 80012c0:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 6;
 80012c2:	4b32      	ldr	r3, [pc, #200]	@ (800138c <MX_FDCAN2_Init+0xf4>)
 80012c4:	2206      	movs	r2, #6
 80012c6:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80012c8:	4b30      	ldr	r3, [pc, #192]	@ (800138c <MX_FDCAN2_Init+0xf4>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 80012ce:	4b2f      	ldr	r3, [pc, #188]	@ (800138c <MX_FDCAN2_Init+0xf4>)
 80012d0:	2202      	movs	r2, #2
 80012d2:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 5;
 80012d4:	4b2d      	ldr	r3, [pc, #180]	@ (800138c <MX_FDCAN2_Init+0xf4>)
 80012d6:	2205      	movs	r2, #5
 80012d8:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80012da:	4b2c      	ldr	r3, [pc, #176]	@ (800138c <MX_FDCAN2_Init+0xf4>)
 80012dc:	2201      	movs	r2, #1
 80012de:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80012e0:	4b2a      	ldr	r3, [pc, #168]	@ (800138c <MX_FDCAN2_Init+0xf4>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80012e6:	4b29      	ldr	r3, [pc, #164]	@ (800138c <MX_FDCAN2_Init+0xf4>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80012ec:	4b27      	ldr	r3, [pc, #156]	@ (800138c <MX_FDCAN2_Init+0xf4>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 80012f2:	4b26      	ldr	r3, [pc, #152]	@ (800138c <MX_FDCAN2_Init+0xf4>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 1;
 80012f8:	4b24      	ldr	r3, [pc, #144]	@ (800138c <MX_FDCAN2_Init+0xf4>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 1;
 80012fe:	4b23      	ldr	r3, [pc, #140]	@ (800138c <MX_FDCAN2_Init+0xf4>)
 8001300:	2201      	movs	r2, #1
 8001302:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 16;
 8001304:	4b21      	ldr	r3, [pc, #132]	@ (800138c <MX_FDCAN2_Init+0xf4>)
 8001306:	2210      	movs	r2, #16
 8001308:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800130a:	4b20      	ldr	r3, [pc, #128]	@ (800138c <MX_FDCAN2_Init+0xf4>)
 800130c:	2204      	movs	r2, #4
 800130e:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 16;
 8001310:	4b1e      	ldr	r3, [pc, #120]	@ (800138c <MX_FDCAN2_Init+0xf4>)
 8001312:	2210      	movs	r2, #16
 8001314:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001316:	4b1d      	ldr	r3, [pc, #116]	@ (800138c <MX_FDCAN2_Init+0xf4>)
 8001318:	2204      	movs	r2, #4
 800131a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 800131c:	4b1b      	ldr	r3, [pc, #108]	@ (800138c <MX_FDCAN2_Init+0xf4>)
 800131e:	2200      	movs	r2, #0
 8001320:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001322:	4b1a      	ldr	r3, [pc, #104]	@ (800138c <MX_FDCAN2_Init+0xf4>)
 8001324:	2204      	movs	r2, #4
 8001326:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8001328:	4b18      	ldr	r3, [pc, #96]	@ (800138c <MX_FDCAN2_Init+0xf4>)
 800132a:	2200      	movs	r2, #0
 800132c:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 800132e:	4b17      	ldr	r3, [pc, #92]	@ (800138c <MX_FDCAN2_Init+0xf4>)
 8001330:	2200      	movs	r2, #0
 8001332:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 16;
 8001334:	4b15      	ldr	r3, [pc, #84]	@ (800138c <MX_FDCAN2_Init+0xf4>)
 8001336:	2210      	movs	r2, #16
 8001338:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800133a:	4b14      	ldr	r3, [pc, #80]	@ (800138c <MX_FDCAN2_Init+0xf4>)
 800133c:	2200      	movs	r2, #0
 800133e:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001340:	4b12      	ldr	r3, [pc, #72]	@ (800138c <MX_FDCAN2_Init+0xf4>)
 8001342:	2204      	movs	r2, #4
 8001344:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001346:	4811      	ldr	r0, [pc, #68]	@ (800138c <MX_FDCAN2_Init+0xf4>)
 8001348:	f007 f9da 	bl	8008700 <HAL_FDCAN_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_FDCAN2_Init+0xbe>
  {
    Error_Handler();
 8001352:	f001 f9b3 	bl	80026bc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8001356:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800135a:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001360:	2302      	movs	r3, #2
 8001362:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001364:	2301      	movs	r3, #1
 8001366:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 8001368:	2300      	movs	r3, #0
 800136a:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 8001370:	463b      	mov	r3, r7
 8001372:	4619      	mov	r1, r3
 8001374:	4805      	ldr	r0, [pc, #20]	@ (800138c <MX_FDCAN2_Init+0xf4>)
 8001376:	f007 fba1 	bl	8008abc <HAL_FDCAN_ConfigFilter>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_FDCAN2_Init+0xec>
	{
		Error_Handler();
 8001380:	f001 f99c 	bl	80026bc <Error_Handler>
	}
  /* USER CODE END FDCAN2_Init 2 */

}
 8001384:	bf00      	nop
 8001386:	3720      	adds	r7, #32
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	240002a4 	.word	0x240002a4
 8001390:	4000a400 	.word	0x4000a400

08001394 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 800139a:	4b3b      	ldr	r3, [pc, #236]	@ (8001488 <MX_FDCAN3_Init+0xf4>)
 800139c:	4a3b      	ldr	r2, [pc, #236]	@ (800148c <MX_FDCAN3_Init+0xf8>)
 800139e:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80013a0:	4b39      	ldr	r3, [pc, #228]	@ (8001488 <MX_FDCAN3_Init+0xf4>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 80013a6:	4b38      	ldr	r3, [pc, #224]	@ (8001488 <MX_FDCAN3_Init+0xf4>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 80013ac:	4b36      	ldr	r3, [pc, #216]	@ (8001488 <MX_FDCAN3_Init+0xf4>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 80013b2:	4b35      	ldr	r3, [pc, #212]	@ (8001488 <MX_FDCAN3_Init+0xf4>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 80013b8:	4b33      	ldr	r3, [pc, #204]	@ (8001488 <MX_FDCAN3_Init+0xf4>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 6;
 80013be:	4b32      	ldr	r3, [pc, #200]	@ (8001488 <MX_FDCAN3_Init+0xf4>)
 80013c0:	2206      	movs	r2, #6
 80013c2:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 80013c4:	4b30      	ldr	r3, [pc, #192]	@ (8001488 <MX_FDCAN3_Init+0xf4>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 80013ca:	4b2f      	ldr	r3, [pc, #188]	@ (8001488 <MX_FDCAN3_Init+0xf4>)
 80013cc:	2202      	movs	r2, #2
 80013ce:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 5;
 80013d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001488 <MX_FDCAN3_Init+0xf4>)
 80013d2:	2205      	movs	r2, #5
 80013d4:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 80013d6:	4b2c      	ldr	r3, [pc, #176]	@ (8001488 <MX_FDCAN3_Init+0xf4>)
 80013d8:	2201      	movs	r2, #1
 80013da:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 80013dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001488 <MX_FDCAN3_Init+0xf4>)
 80013de:	2201      	movs	r2, #1
 80013e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 80013e2:	4b29      	ldr	r3, [pc, #164]	@ (8001488 <MX_FDCAN3_Init+0xf4>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 80013e8:	4b27      	ldr	r3, [pc, #156]	@ (8001488 <MX_FDCAN3_Init+0xf4>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 80013ee:	4b26      	ldr	r3, [pc, #152]	@ (8001488 <MX_FDCAN3_Init+0xf4>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan3.Init.StdFiltersNbr = 1;
 80013f4:	4b24      	ldr	r3, [pc, #144]	@ (8001488 <MX_FDCAN3_Init+0xf4>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan3.Init.ExtFiltersNbr = 1;
 80013fa:	4b23      	ldr	r3, [pc, #140]	@ (8001488 <MX_FDCAN3_Init+0xf4>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 16;
 8001400:	4b21      	ldr	r3, [pc, #132]	@ (8001488 <MX_FDCAN3_Init+0xf4>)
 8001402:	2210      	movs	r2, #16
 8001404:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001406:	4b20      	ldr	r3, [pc, #128]	@ (8001488 <MX_FDCAN3_Init+0xf4>)
 8001408:	2204      	movs	r2, #4
 800140a:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 16;
 800140c:	4b1e      	ldr	r3, [pc, #120]	@ (8001488 <MX_FDCAN3_Init+0xf4>)
 800140e:	2210      	movs	r2, #16
 8001410:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001412:	4b1d      	ldr	r3, [pc, #116]	@ (8001488 <MX_FDCAN3_Init+0xf4>)
 8001414:	2204      	movs	r2, #4
 8001416:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8001418:	4b1b      	ldr	r3, [pc, #108]	@ (8001488 <MX_FDCAN3_Init+0xf4>)
 800141a:	2200      	movs	r2, #0
 800141c:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800141e:	4b1a      	ldr	r3, [pc, #104]	@ (8001488 <MX_FDCAN3_Init+0xf4>)
 8001420:	2204      	movs	r2, #4
 8001422:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8001424:	4b18      	ldr	r3, [pc, #96]	@ (8001488 <MX_FDCAN3_Init+0xf4>)
 8001426:	2200      	movs	r2, #0
 8001428:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 800142a:	4b17      	ldr	r3, [pc, #92]	@ (8001488 <MX_FDCAN3_Init+0xf4>)
 800142c:	2200      	movs	r2, #0
 800142e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 16;
 8001430:	4b15      	ldr	r3, [pc, #84]	@ (8001488 <MX_FDCAN3_Init+0xf4>)
 8001432:	2210      	movs	r2, #16
 8001434:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001436:	4b14      	ldr	r3, [pc, #80]	@ (8001488 <MX_FDCAN3_Init+0xf4>)
 8001438:	2200      	movs	r2, #0
 800143a:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800143c:	4b12      	ldr	r3, [pc, #72]	@ (8001488 <MX_FDCAN3_Init+0xf4>)
 800143e:	2204      	movs	r2, #4
 8001440:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8001442:	4811      	ldr	r0, [pc, #68]	@ (8001488 <MX_FDCAN3_Init+0xf4>)
 8001444:	f007 f95c 	bl	8008700 <HAL_FDCAN_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_FDCAN3_Init+0xbe>
  {
    Error_Handler();
 800144e:	f001 f935 	bl	80026bc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8001452:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001456:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800145c:	2302      	movs	r3, #2
 800145e:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001460:	2301      	movs	r3, #1
 8001462:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 8001464:	2300      	movs	r3, #0
 8001466:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan3, &sFilterConfig) != HAL_OK)
 800146c:	463b      	mov	r3, r7
 800146e:	4619      	mov	r1, r3
 8001470:	4805      	ldr	r0, [pc, #20]	@ (8001488 <MX_FDCAN3_Init+0xf4>)
 8001472:	f007 fb23 	bl	8008abc <HAL_FDCAN_ConfigFilter>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_FDCAN3_Init+0xec>
	{
		Error_Handler();
 800147c:	f001 f91e 	bl	80026bc <Error_Handler>
	}

  /* USER CODE END FDCAN3_Init 2 */

}
 8001480:	bf00      	nop
 8001482:	3720      	adds	r7, #32
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	24000344 	.word	0x24000344
 800148c:	4000d400 	.word	0x4000d400

08001490 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001494:	4b0b      	ldr	r3, [pc, #44]	@ (80014c4 <MX_SDMMC1_SD_Init+0x34>)
 8001496:	4a0c      	ldr	r2, [pc, #48]	@ (80014c8 <MX_SDMMC1_SD_Init+0x38>)
 8001498:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800149a:	4b0a      	ldr	r3, [pc, #40]	@ (80014c4 <MX_SDMMC1_SD_Init+0x34>)
 800149c:	2200      	movs	r2, #0
 800149e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80014a0:	4b08      	ldr	r3, [pc, #32]	@ (80014c4 <MX_SDMMC1_SD_Init+0x34>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80014a6:	4b07      	ldr	r3, [pc, #28]	@ (80014c4 <MX_SDMMC1_SD_Init+0x34>)
 80014a8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014ac:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80014ae:	4b05      	ldr	r3, [pc, #20]	@ (80014c4 <MX_SDMMC1_SD_Init+0x34>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 2;
 80014b4:	4b03      	ldr	r3, [pc, #12]	@ (80014c4 <MX_SDMMC1_SD_Init+0x34>)
 80014b6:	2202      	movs	r2, #2
 80014b8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80014ba:	bf00      	nop
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	240003e4 	.word	0x240003e4
 80014c8:	52007000 	.word	0x52007000

080014cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014d0:	4b27      	ldr	r3, [pc, #156]	@ (8001570 <MX_SPI1_Init+0xa4>)
 80014d2:	4a28      	ldr	r2, [pc, #160]	@ (8001574 <MX_SPI1_Init+0xa8>)
 80014d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014d6:	4b26      	ldr	r3, [pc, #152]	@ (8001570 <MX_SPI1_Init+0xa4>)
 80014d8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80014dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014de:	4b24      	ldr	r3, [pc, #144]	@ (8001570 <MX_SPI1_Init+0xa4>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014e4:	4b22      	ldr	r3, [pc, #136]	@ (8001570 <MX_SPI1_Init+0xa4>)
 80014e6:	2207      	movs	r2, #7
 80014e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014ea:	4b21      	ldr	r3, [pc, #132]	@ (8001570 <MX_SPI1_Init+0xa4>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001570 <MX_SPI1_Init+0xa4>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001570 <MX_SPI1_Init+0xa4>)
 80014f8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80014fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80014fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001570 <MX_SPI1_Init+0xa4>)
 8001500:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001504:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001506:	4b1a      	ldr	r3, [pc, #104]	@ (8001570 <MX_SPI1_Init+0xa4>)
 8001508:	2200      	movs	r2, #0
 800150a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800150c:	4b18      	ldr	r3, [pc, #96]	@ (8001570 <MX_SPI1_Init+0xa4>)
 800150e:	2200      	movs	r2, #0
 8001510:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001512:	4b17      	ldr	r3, [pc, #92]	@ (8001570 <MX_SPI1_Init+0xa4>)
 8001514:	2200      	movs	r2, #0
 8001516:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001518:	4b15      	ldr	r3, [pc, #84]	@ (8001570 <MX_SPI1_Init+0xa4>)
 800151a:	2200      	movs	r2, #0
 800151c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800151e:	4b14      	ldr	r3, [pc, #80]	@ (8001570 <MX_SPI1_Init+0xa4>)
 8001520:	2200      	movs	r2, #0
 8001522:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001524:	4b12      	ldr	r3, [pc, #72]	@ (8001570 <MX_SPI1_Init+0xa4>)
 8001526:	2200      	movs	r2, #0
 8001528:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800152a:	4b11      	ldr	r3, [pc, #68]	@ (8001570 <MX_SPI1_Init+0xa4>)
 800152c:	2200      	movs	r2, #0
 800152e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001530:	4b0f      	ldr	r3, [pc, #60]	@ (8001570 <MX_SPI1_Init+0xa4>)
 8001532:	2200      	movs	r2, #0
 8001534:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001536:	4b0e      	ldr	r3, [pc, #56]	@ (8001570 <MX_SPI1_Init+0xa4>)
 8001538:	2200      	movs	r2, #0
 800153a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800153c:	4b0c      	ldr	r3, [pc, #48]	@ (8001570 <MX_SPI1_Init+0xa4>)
 800153e:	2200      	movs	r2, #0
 8001540:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001542:	4b0b      	ldr	r3, [pc, #44]	@ (8001570 <MX_SPI1_Init+0xa4>)
 8001544:	2200      	movs	r2, #0
 8001546:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001548:	4b09      	ldr	r3, [pc, #36]	@ (8001570 <MX_SPI1_Init+0xa4>)
 800154a:	2200      	movs	r2, #0
 800154c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800154e:	4b08      	ldr	r3, [pc, #32]	@ (8001570 <MX_SPI1_Init+0xa4>)
 8001550:	2200      	movs	r2, #0
 8001552:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001554:	4b06      	ldr	r3, [pc, #24]	@ (8001570 <MX_SPI1_Init+0xa4>)
 8001556:	2200      	movs	r2, #0
 8001558:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800155a:	4805      	ldr	r0, [pc, #20]	@ (8001570 <MX_SPI1_Init+0xa4>)
 800155c:	f00d fc56 	bl	800ee0c <HAL_SPI_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8001566:	f001 f8a9 	bl	80026bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	24000460 	.word	0x24000460
 8001574:	40013000 	.word	0x40013000

08001578 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b09c      	sub	sp, #112	@ 0x70
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800157e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800158c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001598:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]
 80015a8:	615a      	str	r2, [r3, #20]
 80015aa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	2234      	movs	r2, #52	@ 0x34
 80015b0:	2100      	movs	r1, #0
 80015b2:	4618      	mov	r0, r3
 80015b4:	f012 faea 	bl	8013b8c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015b8:	4b49      	ldr	r3, [pc, #292]	@ (80016e0 <MX_TIM1_Init+0x168>)
 80015ba:	4a4a      	ldr	r2, [pc, #296]	@ (80016e4 <MX_TIM1_Init+0x16c>)
 80015bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80015be:	4b48      	ldr	r3, [pc, #288]	@ (80016e0 <MX_TIM1_Init+0x168>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c4:	4b46      	ldr	r3, [pc, #280]	@ (80016e0 <MX_TIM1_Init+0x168>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80015ca:	4b45      	ldr	r3, [pc, #276]	@ (80016e0 <MX_TIM1_Init+0x168>)
 80015cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d2:	4b43      	ldr	r3, [pc, #268]	@ (80016e0 <MX_TIM1_Init+0x168>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015d8:	4b41      	ldr	r3, [pc, #260]	@ (80016e0 <MX_TIM1_Init+0x168>)
 80015da:	2200      	movs	r2, #0
 80015dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015de:	4b40      	ldr	r3, [pc, #256]	@ (80016e0 <MX_TIM1_Init+0x168>)
 80015e0:	2280      	movs	r2, #128	@ 0x80
 80015e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015e4:	483e      	ldr	r0, [pc, #248]	@ (80016e0 <MX_TIM1_Init+0x168>)
 80015e6:	f00e fdb8 	bl	801015a <HAL_TIM_Base_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80015f0:	f001 f864 	bl	80026bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015f8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015fa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80015fe:	4619      	mov	r1, r3
 8001600:	4837      	ldr	r0, [pc, #220]	@ (80016e0 <MX_TIM1_Init+0x168>)
 8001602:	f00f f903 	bl	801080c <HAL_TIM_ConfigClockSource>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800160c:	f001 f856 	bl	80026bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001610:	4833      	ldr	r0, [pc, #204]	@ (80016e0 <MX_TIM1_Init+0x168>)
 8001612:	f00e fe7f 	bl	8010314 <HAL_TIM_PWM_Init>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800161c:	f001 f84e 	bl	80026bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001620:	2300      	movs	r3, #0
 8001622:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001624:	2300      	movs	r3, #0
 8001626:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001628:	2300      	movs	r3, #0
 800162a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800162c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001630:	4619      	mov	r1, r3
 8001632:	482b      	ldr	r0, [pc, #172]	@ (80016e0 <MX_TIM1_Init+0x168>)
 8001634:	f00f fe30 	bl	8011298 <HAL_TIMEx_MasterConfigSynchronization>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800163e:	f001 f83d 	bl	80026bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001642:	2360      	movs	r3, #96	@ 0x60
 8001644:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800164a:	2300      	movs	r3, #0
 800164c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800164e:	2300      	movs	r3, #0
 8001650:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001652:	2300      	movs	r3, #0
 8001654:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001656:	2300      	movs	r3, #0
 8001658:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800165a:	2300      	movs	r3, #0
 800165c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800165e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001662:	2200      	movs	r2, #0
 8001664:	4619      	mov	r1, r3
 8001666:	481e      	ldr	r0, [pc, #120]	@ (80016e0 <MX_TIM1_Init+0x168>)
 8001668:	f00e ffbc 	bl	80105e4 <HAL_TIM_PWM_ConfigChannel>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001672:	f001 f823 	bl	80026bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001676:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800167a:	2204      	movs	r2, #4
 800167c:	4619      	mov	r1, r3
 800167e:	4818      	ldr	r0, [pc, #96]	@ (80016e0 <MX_TIM1_Init+0x168>)
 8001680:	f00e ffb0 	bl	80105e4 <HAL_TIM_PWM_ConfigChannel>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800168a:	f001 f817 	bl	80026bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800168e:	2300      	movs	r3, #0
 8001690:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001692:	2300      	movs	r3, #0
 8001694:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016a6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80016ac:	2300      	movs	r3, #0
 80016ae:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80016b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80016b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016ba:	2300      	movs	r3, #0
 80016bc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016be:	1d3b      	adds	r3, r7, #4
 80016c0:	4619      	mov	r1, r3
 80016c2:	4807      	ldr	r0, [pc, #28]	@ (80016e0 <MX_TIM1_Init+0x168>)
 80016c4:	f00f fe84 	bl	80113d0 <HAL_TIMEx_ConfigBreakDeadTime>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80016ce:	f000 fff5 	bl	80026bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80016d2:	4803      	ldr	r0, [pc, #12]	@ (80016e0 <MX_TIM1_Init+0x168>)
 80016d4:	f001 ff2a 	bl	800352c <HAL_TIM_MspPostInit>

}
 80016d8:	bf00      	nop
 80016da:	3770      	adds	r7, #112	@ 0x70
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	240004e8 	.word	0x240004e8
 80016e4:	40010000 	.word	0x40010000

080016e8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80016ec:	4b10      	ldr	r3, [pc, #64]	@ (8001730 <MX_TIM16_Init+0x48>)
 80016ee:	4a11      	ldr	r2, [pc, #68]	@ (8001734 <MX_TIM16_Init+0x4c>)
 80016f0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 528;
 80016f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001730 <MX_TIM16_Init+0x48>)
 80016f4:	f44f 7204 	mov.w	r2, #528	@ 0x210
 80016f8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001730 <MX_TIM16_Init+0x48>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000 - 1;
 8001700:	4b0b      	ldr	r3, [pc, #44]	@ (8001730 <MX_TIM16_Init+0x48>)
 8001702:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001706:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001708:	4b09      	ldr	r3, [pc, #36]	@ (8001730 <MX_TIM16_Init+0x48>)
 800170a:	2200      	movs	r2, #0
 800170c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800170e:	4b08      	ldr	r3, [pc, #32]	@ (8001730 <MX_TIM16_Init+0x48>)
 8001710:	2200      	movs	r2, #0
 8001712:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001714:	4b06      	ldr	r3, [pc, #24]	@ (8001730 <MX_TIM16_Init+0x48>)
 8001716:	2200      	movs	r2, #0
 8001718:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800171a:	4805      	ldr	r0, [pc, #20]	@ (8001730 <MX_TIM16_Init+0x48>)
 800171c:	f00e fd1d 	bl	801015a <HAL_TIM_Base_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001726:	f000 ffc9 	bl	80026bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	24000534 	.word	0x24000534
 8001734:	40014400 	.word	0x40014400

08001738 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800173c:	4b22      	ldr	r3, [pc, #136]	@ (80017c8 <MX_USART1_UART_Init+0x90>)
 800173e:	4a23      	ldr	r2, [pc, #140]	@ (80017cc <MX_USART1_UART_Init+0x94>)
 8001740:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001742:	4b21      	ldr	r3, [pc, #132]	@ (80017c8 <MX_USART1_UART_Init+0x90>)
 8001744:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001748:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800174a:	4b1f      	ldr	r3, [pc, #124]	@ (80017c8 <MX_USART1_UART_Init+0x90>)
 800174c:	2200      	movs	r2, #0
 800174e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001750:	4b1d      	ldr	r3, [pc, #116]	@ (80017c8 <MX_USART1_UART_Init+0x90>)
 8001752:	2200      	movs	r2, #0
 8001754:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001756:	4b1c      	ldr	r3, [pc, #112]	@ (80017c8 <MX_USART1_UART_Init+0x90>)
 8001758:	2200      	movs	r2, #0
 800175a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800175c:	4b1a      	ldr	r3, [pc, #104]	@ (80017c8 <MX_USART1_UART_Init+0x90>)
 800175e:	220c      	movs	r2, #12
 8001760:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001762:	4b19      	ldr	r3, [pc, #100]	@ (80017c8 <MX_USART1_UART_Init+0x90>)
 8001764:	2200      	movs	r2, #0
 8001766:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001768:	4b17      	ldr	r3, [pc, #92]	@ (80017c8 <MX_USART1_UART_Init+0x90>)
 800176a:	2200      	movs	r2, #0
 800176c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800176e:	4b16      	ldr	r3, [pc, #88]	@ (80017c8 <MX_USART1_UART_Init+0x90>)
 8001770:	2200      	movs	r2, #0
 8001772:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001774:	4b14      	ldr	r3, [pc, #80]	@ (80017c8 <MX_USART1_UART_Init+0x90>)
 8001776:	2200      	movs	r2, #0
 8001778:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800177a:	4b13      	ldr	r3, [pc, #76]	@ (80017c8 <MX_USART1_UART_Init+0x90>)
 800177c:	2200      	movs	r2, #0
 800177e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001780:	4811      	ldr	r0, [pc, #68]	@ (80017c8 <MX_USART1_UART_Init+0x90>)
 8001782:	f00f fecf 	bl	8011524 <HAL_UART_Init>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800178c:	f000 ff96 	bl	80026bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001790:	2100      	movs	r1, #0
 8001792:	480d      	ldr	r0, [pc, #52]	@ (80017c8 <MX_USART1_UART_Init+0x90>)
 8001794:	f011 f869 	bl	801286a <HAL_UARTEx_SetTxFifoThreshold>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800179e:	f000 ff8d 	bl	80026bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017a2:	2100      	movs	r1, #0
 80017a4:	4808      	ldr	r0, [pc, #32]	@ (80017c8 <MX_USART1_UART_Init+0x90>)
 80017a6:	f011 f89e 	bl	80128e6 <HAL_UARTEx_SetRxFifoThreshold>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80017b0:	f000 ff84 	bl	80026bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80017b4:	4804      	ldr	r0, [pc, #16]	@ (80017c8 <MX_USART1_UART_Init+0x90>)
 80017b6:	f011 f81f 	bl	80127f8 <HAL_UARTEx_DisableFifoMode>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80017c0:	f000 ff7c 	bl	80026bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	24000580 	.word	0x24000580
 80017cc:	40011000 	.word	0x40011000

080017d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017d4:	4b22      	ldr	r3, [pc, #136]	@ (8001860 <MX_USART2_UART_Init+0x90>)
 80017d6:	4a23      	ldr	r2, [pc, #140]	@ (8001864 <MX_USART2_UART_Init+0x94>)
 80017d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017da:	4b21      	ldr	r3, [pc, #132]	@ (8001860 <MX_USART2_UART_Init+0x90>)
 80017dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001860 <MX_USART2_UART_Init+0x90>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001860 <MX_USART2_UART_Init+0x90>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001860 <MX_USART2_UART_Init+0x90>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001860 <MX_USART2_UART_Init+0x90>)
 80017f6:	220c      	movs	r2, #12
 80017f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017fa:	4b19      	ldr	r3, [pc, #100]	@ (8001860 <MX_USART2_UART_Init+0x90>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001800:	4b17      	ldr	r3, [pc, #92]	@ (8001860 <MX_USART2_UART_Init+0x90>)
 8001802:	2200      	movs	r2, #0
 8001804:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001806:	4b16      	ldr	r3, [pc, #88]	@ (8001860 <MX_USART2_UART_Init+0x90>)
 8001808:	2200      	movs	r2, #0
 800180a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800180c:	4b14      	ldr	r3, [pc, #80]	@ (8001860 <MX_USART2_UART_Init+0x90>)
 800180e:	2200      	movs	r2, #0
 8001810:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001812:	4b13      	ldr	r3, [pc, #76]	@ (8001860 <MX_USART2_UART_Init+0x90>)
 8001814:	2200      	movs	r2, #0
 8001816:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001818:	4811      	ldr	r0, [pc, #68]	@ (8001860 <MX_USART2_UART_Init+0x90>)
 800181a:	f00f fe83 	bl	8011524 <HAL_UART_Init>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001824:	f000 ff4a 	bl	80026bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001828:	2100      	movs	r1, #0
 800182a:	480d      	ldr	r0, [pc, #52]	@ (8001860 <MX_USART2_UART_Init+0x90>)
 800182c:	f011 f81d 	bl	801286a <HAL_UARTEx_SetTxFifoThreshold>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001836:	f000 ff41 	bl	80026bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800183a:	2100      	movs	r1, #0
 800183c:	4808      	ldr	r0, [pc, #32]	@ (8001860 <MX_USART2_UART_Init+0x90>)
 800183e:	f011 f852 	bl	80128e6 <HAL_UARTEx_SetRxFifoThreshold>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001848:	f000 ff38 	bl	80026bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800184c:	4804      	ldr	r0, [pc, #16]	@ (8001860 <MX_USART2_UART_Init+0x90>)
 800184e:	f010 ffd3 	bl	80127f8 <HAL_UARTEx_DisableFifoMode>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001858:	f000 ff30 	bl	80026bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}
 8001860:	24000614 	.word	0x24000614
 8001864:	40004400 	.word	0x40004400

08001868 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800186e:	4b0d      	ldr	r3, [pc, #52]	@ (80018a4 <MX_DMA_Init+0x3c>)
 8001870:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001874:	4a0b      	ldr	r2, [pc, #44]	@ (80018a4 <MX_DMA_Init+0x3c>)
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800187e:	4b09      	ldr	r3, [pc, #36]	@ (80018a4 <MX_DMA_Init+0x3c>)
 8001880:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	607b      	str	r3, [r7, #4]
 800188a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800188c:	2200      	movs	r2, #0
 800188e:	2100      	movs	r1, #0
 8001890:	200b      	movs	r0, #11
 8001892:	f004 fe2c 	bl	80064ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001896:	200b      	movs	r0, #11
 8001898:	f004 fe43 	bl	8006522 <HAL_NVIC_EnableIRQ>

}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	58024400 	.word	0x58024400

080018a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08e      	sub	sp, #56	@ 0x38
 80018ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	605a      	str	r2, [r3, #4]
 80018b8:	609a      	str	r2, [r3, #8]
 80018ba:	60da      	str	r2, [r3, #12]
 80018bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018be:	4b75      	ldr	r3, [pc, #468]	@ (8001a94 <MX_GPIO_Init+0x1ec>)
 80018c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018c4:	4a73      	ldr	r2, [pc, #460]	@ (8001a94 <MX_GPIO_Init+0x1ec>)
 80018c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018ce:	4b71      	ldr	r3, [pc, #452]	@ (8001a94 <MX_GPIO_Init+0x1ec>)
 80018d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018d8:	623b      	str	r3, [r7, #32]
 80018da:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018dc:	4b6d      	ldr	r3, [pc, #436]	@ (8001a94 <MX_GPIO_Init+0x1ec>)
 80018de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018e2:	4a6c      	ldr	r2, [pc, #432]	@ (8001a94 <MX_GPIO_Init+0x1ec>)
 80018e4:	f043 0304 	orr.w	r3, r3, #4
 80018e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018ec:	4b69      	ldr	r3, [pc, #420]	@ (8001a94 <MX_GPIO_Init+0x1ec>)
 80018ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018f2:	f003 0304 	and.w	r3, r3, #4
 80018f6:	61fb      	str	r3, [r7, #28]
 80018f8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fa:	4b66      	ldr	r3, [pc, #408]	@ (8001a94 <MX_GPIO_Init+0x1ec>)
 80018fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001900:	4a64      	ldr	r2, [pc, #400]	@ (8001a94 <MX_GPIO_Init+0x1ec>)
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800190a:	4b62      	ldr	r3, [pc, #392]	@ (8001a94 <MX_GPIO_Init+0x1ec>)
 800190c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	61bb      	str	r3, [r7, #24]
 8001916:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001918:	4b5e      	ldr	r3, [pc, #376]	@ (8001a94 <MX_GPIO_Init+0x1ec>)
 800191a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800191e:	4a5d      	ldr	r2, [pc, #372]	@ (8001a94 <MX_GPIO_Init+0x1ec>)
 8001920:	f043 0302 	orr.w	r3, r3, #2
 8001924:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001928:	4b5a      	ldr	r3, [pc, #360]	@ (8001a94 <MX_GPIO_Init+0x1ec>)
 800192a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001936:	4b57      	ldr	r3, [pc, #348]	@ (8001a94 <MX_GPIO_Init+0x1ec>)
 8001938:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800193c:	4a55      	ldr	r2, [pc, #340]	@ (8001a94 <MX_GPIO_Init+0x1ec>)
 800193e:	f043 0320 	orr.w	r3, r3, #32
 8001942:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001946:	4b53      	ldr	r3, [pc, #332]	@ (8001a94 <MX_GPIO_Init+0x1ec>)
 8001948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800194c:	f003 0320 	and.w	r3, r3, #32
 8001950:	613b      	str	r3, [r7, #16]
 8001952:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001954:	4b4f      	ldr	r3, [pc, #316]	@ (8001a94 <MX_GPIO_Init+0x1ec>)
 8001956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800195a:	4a4e      	ldr	r2, [pc, #312]	@ (8001a94 <MX_GPIO_Init+0x1ec>)
 800195c:	f043 0310 	orr.w	r3, r3, #16
 8001960:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001964:	4b4b      	ldr	r3, [pc, #300]	@ (8001a94 <MX_GPIO_Init+0x1ec>)
 8001966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800196a:	f003 0310 	and.w	r3, r3, #16
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001972:	4b48      	ldr	r3, [pc, #288]	@ (8001a94 <MX_GPIO_Init+0x1ec>)
 8001974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001978:	4a46      	ldr	r2, [pc, #280]	@ (8001a94 <MX_GPIO_Init+0x1ec>)
 800197a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800197e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001982:	4b44      	ldr	r3, [pc, #272]	@ (8001a94 <MX_GPIO_Init+0x1ec>)
 8001984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001988:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800198c:	60bb      	str	r3, [r7, #8]
 800198e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001990:	4b40      	ldr	r3, [pc, #256]	@ (8001a94 <MX_GPIO_Init+0x1ec>)
 8001992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001996:	4a3f      	ldr	r2, [pc, #252]	@ (8001a94 <MX_GPIO_Init+0x1ec>)
 8001998:	f043 0308 	orr.w	r3, r3, #8
 800199c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019a0:	4b3c      	ldr	r3, [pc, #240]	@ (8001a94 <MX_GPIO_Init+0x1ec>)
 80019a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019a6:	f003 0308 	and.w	r3, r3, #8
 80019aa:	607b      	str	r3, [r7, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, START_BUTTON_LED_Pin|RTDS_Pin, GPIO_PIN_RESET);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2103      	movs	r1, #3
 80019b2:	4839      	ldr	r0, [pc, #228]	@ (8001a98 <MX_GPIO_Init+0x1f0>)
 80019b4:	f008 fa26 	bl	8009e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS18B20_Data_GPIO_Port, DS18B20_Data_Pin, GPIO_PIN_RESET);
 80019b8:	2200      	movs	r2, #0
 80019ba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019be:	4837      	ldr	r0, [pc, #220]	@ (8001a9c <MX_GPIO_Init+0x1f4>)
 80019c0:	f008 fa20 	bl	8009e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : START_BUTTON_LED_Pin RTDS_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_LED_Pin|RTDS_Pin;
 80019c4:	2303      	movs	r3, #3
 80019c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c8:	2301      	movs	r3, #1
 80019ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d0:	2300      	movs	r3, #0
 80019d2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019d8:	4619      	mov	r1, r3
 80019da:	482f      	ldr	r0, [pc, #188]	@ (8001a98 <MX_GPIO_Init+0x1f0>)
 80019dc:	f008 f852 	bl	8009a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 80019e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019e6:	2300      	movs	r3, #0
 80019e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019ea:	2302      	movs	r3, #2
 80019ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80019ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019f2:	4619      	mov	r1, r3
 80019f4:	482a      	ldr	r0, [pc, #168]	@ (8001aa0 <MX_GPIO_Init+0x1f8>)
 80019f6:	f008 f845 	bl	8009a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : MICROSD_DET_Pin */
  GPIO_InitStruct.Pin = MICROSD_DET_Pin;
 80019fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80019fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a00:	2300      	movs	r3, #0
 8001a02:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(MICROSD_DET_GPIO_Port, &GPIO_InitStruct);
 8001a08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4824      	ldr	r0, [pc, #144]	@ (8001aa0 <MX_GPIO_Init+0x1f8>)
 8001a10:	f008 f838 	bl	8009a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : DS18B20_Data_Pin */
  GPIO_InitStruct.Pin = DS18B20_Data_Pin;
 8001a14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a22:	2300      	movs	r3, #0
 8001a24:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(DS18B20_Data_GPIO_Port, &GPIO_InitStruct);
 8001a26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	481b      	ldr	r0, [pc, #108]	@ (8001a9c <MX_GPIO_Init+0x1f4>)
 8001a2e:	f008 f829 	bl	8009a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON1_Pin */
  GPIO_InitStruct.Pin = START_BUTTON1_Pin;
 8001a32:	2380      	movs	r3, #128	@ 0x80
 8001a34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a36:	2300      	movs	r3, #0
 8001a38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(START_BUTTON1_GPIO_Port, &GPIO_InitStruct);
 8001a3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a42:	4619      	mov	r1, r3
 8001a44:	4817      	ldr	r0, [pc, #92]	@ (8001aa4 <MX_GPIO_Init+0x1fc>)
 8001a46:	f008 f81d 	bl	8009a84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  /* --- nRF24 CE/CSN pins (PG3=CSN idle HIGH, PC6=CE idle LOW) --- */

  // Idle levels
  HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);   // CSN idle HIGH
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	2108      	movs	r1, #8
 8001a4e:	4815      	ldr	r0, [pc, #84]	@ (8001aa4 <MX_GPIO_Init+0x1fc>)
 8001a50:	f008 f9d8 	bl	8009e04 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(NRF24_CE_PORT,  NRF24_CE_PIN,  GPIO_PIN_RESET); // CE  idle LOW
 8001a54:	2200      	movs	r2, #0
 8001a56:	2140      	movs	r1, #64	@ 0x40
 8001a58:	480f      	ldr	r0, [pc, #60]	@ (8001a98 <MX_GPIO_Init+0x1f0>)
 8001a5a:	f008 f9d3 	bl	8009e04 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a66:	2303      	movs	r3, #3
 8001a68:	633b      	str	r3, [r7, #48]	@ 0x30

  GPIO_InitStruct.Pin = NRF24_CSN_PIN;
 8001a6a:	2308      	movs	r3, #8
 8001a6c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(NRF24_CSN_PORT, &GPIO_InitStruct);
 8001a6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a72:	4619      	mov	r1, r3
 8001a74:	480b      	ldr	r0, [pc, #44]	@ (8001aa4 <MX_GPIO_Init+0x1fc>)
 8001a76:	f008 f805 	bl	8009a84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = NRF24_CE_PIN;
 8001a7a:	2340      	movs	r3, #64	@ 0x40
 8001a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(NRF24_CE_PORT, &GPIO_InitStruct);
 8001a7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a82:	4619      	mov	r1, r3
 8001a84:	4804      	ldr	r0, [pc, #16]	@ (8001a98 <MX_GPIO_Init+0x1f0>)
 8001a86:	f007 fffd 	bl	8009a84 <HAL_GPIO_Init>



/* USER CODE END MX_GPIO_Init_2 */
}
 8001a8a:	bf00      	nop
 8001a8c:	3738      	adds	r7, #56	@ 0x38
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	58024400 	.word	0x58024400
 8001a98:	58020800 	.word	0x58020800
 8001a9c:	58021000 	.word	0x58021000
 8001aa0:	58021400 	.word	0x58021400
 8001aa4:	58021800 	.word	0x58021800

08001aa8 <print>:

/* USER CODE BEGIN 4 */
void print(char uart_buffer[])
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s \n\r", uart_buffer);
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	4909      	ldr	r1, [pc, #36]	@ (8001ad8 <print+0x30>)
 8001ab4:	4809      	ldr	r0, [pc, #36]	@ (8001adc <print+0x34>)
 8001ab6:	f012 f847 	bl	8013b48 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_msg, strlen(uart_msg),
 8001aba:	4808      	ldr	r0, [pc, #32]	@ (8001adc <print+0x34>)
 8001abc:	f7fe fc28 	bl	8000310 <strlen>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac8:	4904      	ldr	r1, [pc, #16]	@ (8001adc <print+0x34>)
 8001aca:	4805      	ldr	r0, [pc, #20]	@ (8001ae0 <print+0x38>)
 8001acc:	f00f fd7a 	bl	80115c4 <HAL_UART_Transmit>
					  HAL_MAX_DELAY);
}
 8001ad0:	bf00      	nop
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	08014784 	.word	0x08014784
 8001adc:	240007dc 	.word	0x240007dc
 8001ae0:	24000614 	.word	0x24000614

08001ae4 <printValue>:

void printValue(int value)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%hu \n\r", value);
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	4909      	ldr	r1, [pc, #36]	@ (8001b14 <printValue+0x30>)
 8001af0:	4809      	ldr	r0, [pc, #36]	@ (8001b18 <printValue+0x34>)
 8001af2:	f012 f829 	bl	8013b48 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_msg, strlen(uart_msg),
 8001af6:	4808      	ldr	r0, [pc, #32]	@ (8001b18 <printValue+0x34>)
 8001af8:	f7fe fc0a 	bl	8000310 <strlen>
 8001afc:	4603      	mov	r3, r0
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	f04f 33ff 	mov.w	r3, #4294967295
 8001b04:	4904      	ldr	r1, [pc, #16]	@ (8001b18 <printValue+0x34>)
 8001b06:	4805      	ldr	r0, [pc, #20]	@ (8001b1c <printValue+0x38>)
 8001b08:	f00f fd5c 	bl	80115c4 <HAL_UART_Transmit>
					  HAL_MAX_DELAY);
}
 8001b0c:	bf00      	nop
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	0801478c 	.word	0x0801478c
 8001b18:	240007dc 	.word	0x240007dc
 8001b1c:	24000614 	.word	0x24000614

08001b20 <HAL_ADC_ConvCpltCallback>:
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_msg, strlen(uart_msg),
					  HAL_MAX_DELAY);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
	//s1_aceleracion = buffer_adc[0];
	//s2_aceleracion = buffer_adc[1];
	//s_freno = buffer_adc[2];
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <HAL_FDCAN_RxFifo0Callback>:
		Error_Handler();
	}
}

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f000 80cc 	beq.w	8001ce2 <HAL_FDCAN_RxFifo0Callback+0x1ae>
	{
		/* Retreive Rx messages from RX FIFO0 */

		if (hfdcan->Instance == FDCAN1)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a67      	ldr	r2, [pc, #412]	@ (8001cec <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d164      	bne.n	8001c1e <HAL_FDCAN_RxFifo0Callback+0xea>
		{
			if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader_Inv,
 8001b54:	4b66      	ldr	r3, [pc, #408]	@ (8001cf0 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001b56:	4a67      	ldr	r2, [pc, #412]	@ (8001cf4 <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 8001b58:	2140      	movs	r1, #64	@ 0x40
 8001b5a:	4867      	ldr	r0, [pc, #412]	@ (8001cf8 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 8001b5c:	f007 f8aa 	bl	8008cb4 <HAL_FDCAN_GetRxMessage>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f040 80bd 	bne.w	8001ce2 <HAL_FDCAN_RxFifo0Callback+0x1ae>
									   RxData_Inv) == HAL_OK)
			{
				switch (RxHeader_Inv.Identifier)
 8001b68:	4b62      	ldr	r3, [pc, #392]	@ (8001cf4 <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f240 4266 	movw	r2, #1126	@ 0x466
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d03c      	beq.n	8001bee <HAL_FDCAN_RxFifo0Callback+0xba>
 8001b74:	f240 4266 	movw	r2, #1126	@ 0x466
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	f200 80b2 	bhi.w	8001ce2 <HAL_FDCAN_RxFifo0Callback+0x1ae>
 8001b7e:	f240 4261 	movw	r2, #1121	@ 0x461
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d004      	beq.n	8001b90 <HAL_FDCAN_RxFifo0Callback+0x5c>
 8001b86:	f240 4263 	movw	r2, #1123	@ 0x463
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d015      	beq.n	8001bba <HAL_FDCAN_RxFifo0Callback+0x86>

				}
			}
		}
	}
}
 8001b8e:	e0a8      	b.n	8001ce2 <HAL_FDCAN_RxFifo0Callback+0x1ae>
					state = RxData_Inv[4] & 0xF;
 8001b90:	4b57      	ldr	r3, [pc, #348]	@ (8001cf0 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001b92:	791b      	ldrb	r3, [r3, #4]
 8001b94:	f003 030f 	and.w	r3, r3, #15
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	4b58      	ldr	r3, [pc, #352]	@ (8001cfc <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 8001b9c:	701a      	strb	r2, [r3, #0]
					if (state == 10 || state == 11)
 8001b9e:	4b57      	ldr	r3, [pc, #348]	@ (8001cfc <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b0a      	cmp	r3, #10
 8001ba4:	d004      	beq.n	8001bb0 <HAL_FDCAN_RxFifo0Callback+0x7c>
 8001ba6:	4b55      	ldr	r3, [pc, #340]	@ (8001cfc <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	2b0b      	cmp	r3, #11
 8001bac:	f040 8092 	bne.w	8001cd4 <HAL_FDCAN_RxFifo0Callback+0x1a0>
						error = RxData_Inv[2];
 8001bb0:	4b4f      	ldr	r3, [pc, #316]	@ (8001cf0 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001bb2:	789a      	ldrb	r2, [r3, #2]
 8001bb4:	4b52      	ldr	r3, [pc, #328]	@ (8001d00 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 8001bb6:	701a      	strb	r2, [r3, #0]
					break;
 8001bb8:	e08c      	b.n	8001cd4 <HAL_FDCAN_RxFifo0Callback+0x1a0>
					e_machine_rpm = (RxData_Inv[7] & 0x0F << 16) | RxData_Inv[8] << 8 | RxData_Inv[5];
 8001bba:	4b4d      	ldr	r3, [pc, #308]	@ (8001cf0 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001bbc:	79db      	ldrb	r3, [r3, #7]
 8001bbe:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 8001bc2:	4b4b      	ldr	r3, [pc, #300]	@ (8001cf0 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001bc4:	7a1b      	ldrb	r3, [r3, #8]
 8001bc6:	021b      	lsls	r3, r3, #8
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	4a49      	ldr	r2, [pc, #292]	@ (8001cf0 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001bcc:	7952      	ldrb	r2, [r2, #5]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	4a4c      	ldr	r2, [pc, #304]	@ (8001d04 <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 8001bd2:	6013      	str	r3, [r2, #0]
					if (e_machine_rpm & 0x80000)
 8001bd4:	4b4b      	ldr	r3, [pc, #300]	@ (8001d04 <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d07b      	beq.n	8001cd8 <HAL_FDCAN_RxFifo0Callback+0x1a4>
						e_machine_rpm |= 0xFFF0000;
 8001be0:	4b48      	ldr	r3, [pc, #288]	@ (8001d04 <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	4b48      	ldr	r3, [pc, #288]	@ (8001d08 <HAL_FDCAN_RxFifo0Callback+0x1d4>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	4a46      	ldr	r2, [pc, #280]	@ (8001d04 <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 8001bea:	6013      	str	r3, [r2, #0]
					break;
 8001bec:	e074      	b.n	8001cd8 <HAL_FDCAN_RxFifo0Callback+0x1a4>
					if (RxHeader_Inv.DataLength == 6)
 8001bee:	4b41      	ldr	r3, [pc, #260]	@ (8001cf4 <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	2b06      	cmp	r3, #6
 8001bf4:	d172      	bne.n	8001cdc <HAL_FDCAN_RxFifo0Callback+0x1a8>
						if (config_inv_lectura_v == 0)
 8001bf6:	4b45      	ldr	r3, [pc, #276]	@ (8001d0c <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d102      	bne.n	8001c04 <HAL_FDCAN_RxFifo0Callback+0xd0>
							config_inv_lectura_v = 1;
 8001bfe:	4b43      	ldr	r3, [pc, #268]	@ (8001d0c <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 8001c00:	2201      	movs	r2, #1
 8001c02:	601a      	str	r2, [r3, #0]
						if (config_inv_lectura_v == 1)
 8001c04:	4b41      	ldr	r3, [pc, #260]	@ (8001d0c <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d167      	bne.n	8001cdc <HAL_FDCAN_RxFifo0Callback+0x1a8>
							inv_dc_bus_voltage = RxData_Inv[3] << 8 | RxData_Inv[2];
 8001c0c:	4b38      	ldr	r3, [pc, #224]	@ (8001cf0 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001c0e:	78db      	ldrb	r3, [r3, #3]
 8001c10:	021b      	lsls	r3, r3, #8
 8001c12:	4a37      	ldr	r2, [pc, #220]	@ (8001cf0 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001c14:	7892      	ldrb	r2, [r2, #2]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	4a3d      	ldr	r2, [pc, #244]	@ (8001d10 <HAL_FDCAN_RxFifo0Callback+0x1dc>)
 8001c1a:	6013      	str	r3, [r2, #0]
					break;
 8001c1c:	e05e      	b.n	8001cdc <HAL_FDCAN_RxFifo0Callback+0x1a8>
		else if (hfdcan->Instance == FDCAN2)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a3c      	ldr	r2, [pc, #240]	@ (8001d14 <HAL_FDCAN_RxFifo0Callback+0x1e0>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d126      	bne.n	8001c76 <HAL_FDCAN_RxFifo0Callback+0x142>
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_Acu,
 8001c28:	4b3b      	ldr	r3, [pc, #236]	@ (8001d18 <HAL_FDCAN_RxFifo0Callback+0x1e4>)
 8001c2a:	4a3c      	ldr	r2, [pc, #240]	@ (8001d1c <HAL_FDCAN_RxFifo0Callback+0x1e8>)
 8001c2c:	2140      	movs	r1, #64	@ 0x40
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f007 f840 	bl	8008cb4 <HAL_FDCAN_GetRxMessage>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d153      	bne.n	8001ce2 <HAL_FDCAN_RxFifo0Callback+0x1ae>
				switch (RxHeader_Acu.Identifier)
 8001c3a:	4b38      	ldr	r3, [pc, #224]	@ (8001d1c <HAL_FDCAN_RxFifo0Callback+0x1e8>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2b20      	cmp	r3, #32
 8001c40:	d003      	beq.n	8001c4a <HAL_FDCAN_RxFifo0Callback+0x116>
 8001c42:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001c46:	d008      	beq.n	8001c5a <HAL_FDCAN_RxFifo0Callback+0x126>
}
 8001c48:	e04b      	b.n	8001ce2 <HAL_FDCAN_RxFifo0Callback+0x1ae>
					if (RxData_Acu[0] == 0)
 8001c4a:	4b33      	ldr	r3, [pc, #204]	@ (8001d18 <HAL_FDCAN_RxFifo0Callback+0x1e4>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d146      	bne.n	8001ce0 <HAL_FDCAN_RxFifo0Callback+0x1ac>
						precarga_inv = 1;
 8001c52:	4b33      	ldr	r3, [pc, #204]	@ (8001d20 <HAL_FDCAN_RxFifo0Callback+0x1ec>)
 8001c54:	2201      	movs	r2, #1
 8001c56:	601a      	str	r2, [r3, #0]
					break;
 8001c58:	e042      	b.n	8001ce0 <HAL_FDCAN_RxFifo0Callback+0x1ac>
					v_celda_min = (int)(RxData_Acu[0] << 8 | RxData_Acu[1]);
 8001c5a:	4b2f      	ldr	r3, [pc, #188]	@ (8001d18 <HAL_FDCAN_RxFifo0Callback+0x1e4>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	021b      	lsls	r3, r3, #8
 8001c60:	4a2d      	ldr	r2, [pc, #180]	@ (8001d18 <HAL_FDCAN_RxFifo0Callback+0x1e4>)
 8001c62:	7852      	ldrb	r2, [r2, #1]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	ee07 3a90 	vmov	s15, r3
 8001c6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c6e:	4b2d      	ldr	r3, [pc, #180]	@ (8001d24 <HAL_FDCAN_RxFifo0Callback+0x1f0>)
 8001c70:	edc3 7a00 	vstr	s15, [r3]
					break;
 8001c74:	e035      	b.n	8001ce2 <HAL_FDCAN_RxFifo0Callback+0x1ae>
		else if (hfdcan->Instance == FDCAN3)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a2b      	ldr	r2, [pc, #172]	@ (8001d28 <HAL_FDCAN_RxFifo0Callback+0x1f4>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d130      	bne.n	8001ce2 <HAL_FDCAN_RxFifo0Callback+0x1ae>
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_Dash,
 8001c80:	4b2a      	ldr	r3, [pc, #168]	@ (8001d2c <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 8001c82:	4a2b      	ldr	r2, [pc, #172]	@ (8001d30 <HAL_FDCAN_RxFifo0Callback+0x1fc>)
 8001c84:	2140      	movs	r1, #64	@ 0x40
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f007 f814 	bl	8008cb4 <HAL_FDCAN_GetRxMessage>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d127      	bne.n	8001ce2 <HAL_FDCAN_RxFifo0Callback+0x1ae>
				switch (RxHeader_Dash.Identifier)
 8001c92:	4b27      	ldr	r3, [pc, #156]	@ (8001d30 <HAL_FDCAN_RxFifo0Callback+0x1fc>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f240 1233 	movw	r2, #307	@ 0x133
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d121      	bne.n	8001ce2 <HAL_FDCAN_RxFifo0Callback+0x1ae>
					s1_aceleracion = ((uint16_t)RxData_Dash[0] << 8) | RxData_Dash[1];
 8001c9e:	4b23      	ldr	r3, [pc, #140]	@ (8001d2c <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	b21b      	sxth	r3, r3
 8001ca4:	021b      	lsls	r3, r3, #8
 8001ca6:	b21a      	sxth	r2, r3
 8001ca8:	4b20      	ldr	r3, [pc, #128]	@ (8001d2c <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 8001caa:	785b      	ldrb	r3, [r3, #1]
 8001cac:	b21b      	sxth	r3, r3
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	b21b      	sxth	r3, r3
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d34 <HAL_FDCAN_RxFifo0Callback+0x200>)
 8001cb6:	801a      	strh	r2, [r3, #0]
					s2_aceleracion = ((uint16_t)RxData_Dash[2] << 8) | RxData_Dash[3];
 8001cb8:	4b1c      	ldr	r3, [pc, #112]	@ (8001d2c <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 8001cba:	789b      	ldrb	r3, [r3, #2]
 8001cbc:	b21b      	sxth	r3, r3
 8001cbe:	021b      	lsls	r3, r3, #8
 8001cc0:	b21a      	sxth	r2, r3
 8001cc2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d2c <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 8001cc4:	78db      	ldrb	r3, [r3, #3]
 8001cc6:	b21b      	sxth	r3, r3
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	b21b      	sxth	r3, r3
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	4b1a      	ldr	r3, [pc, #104]	@ (8001d38 <HAL_FDCAN_RxFifo0Callback+0x204>)
 8001cd0:	801a      	strh	r2, [r3, #0]
}
 8001cd2:	e006      	b.n	8001ce2 <HAL_FDCAN_RxFifo0Callback+0x1ae>
					break;
 8001cd4:	bf00      	nop
 8001cd6:	e004      	b.n	8001ce2 <HAL_FDCAN_RxFifo0Callback+0x1ae>
					break;
 8001cd8:	bf00      	nop
 8001cda:	e002      	b.n	8001ce2 <HAL_FDCAN_RxFifo0Callback+0x1ae>
					break;
 8001cdc:	bf00      	nop
 8001cde:	e000      	b.n	8001ce2 <HAL_FDCAN_RxFifo0Callback+0x1ae>
					break;
 8001ce0:	bf00      	nop
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	4000a000 	.word	0x4000a000
 8001cf0:	24000780 	.word	0x24000780
 8001cf4:	240006dc 	.word	0x240006dc
 8001cf8:	24000204 	.word	0x24000204
 8001cfc:	240007ca 	.word	0x240007ca
 8001d00:	2400093a 	.word	0x2400093a
 8001d04:	240007a8 	.word	0x240007a8
 8001d08:	0fff0000 	.word	0x0fff0000
 8001d0c:	240000a4 	.word	0x240000a4
 8001d10:	240007a4 	.word	0x240007a4
 8001d14:	4000a400 	.word	0x4000a400
 8001d18:	24000790 	.word	0x24000790
 8001d1c:	24000728 	.word	0x24000728
 8001d20:	240000a0 	.word	0x240000a0
 8001d24:	24000010 	.word	0x24000010
 8001d28:	4000d400 	.word	0x4000d400
 8001d2c:	24000798 	.word	0x24000798
 8001d30:	24000750 	.word	0x24000750
 8001d34:	240007b2 	.word	0x240007b2
 8001d38:	240007b4 	.word	0x240007b4

08001d3c <HAL_FDCAN_ErrorStatusCallback>:

void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs) {
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
	if (hfdcan == &hfdcan2) {
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a03      	ldr	r2, [pc, #12]	@ (8001d58 <HAL_FDCAN_ErrorStatusCallback+0x1c>)
 8001d4a:	4293      	cmp	r3, r2
		if ((ErrorStatusITs & FDCAN_IT_BUS_OFF) != RESET) {
			//CAN_bus_off_check_reset(hfdcan);
		}
	}
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	240002a4 	.word	0x240002a4
 8001d5c:	00000000 	.word	0x00000000

08001d60 <setTorque>:
	}
	return sum / N_LECTURAS;
}*/

uint16_t setTorque()
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
	print("Sensor freno: ");
	printValue(s_freno);
#endif

	// Calculamos % torque  en función de la posición de los sensores
	s1_aceleracion_aux = (s1_aceleracion - 2050) / (29.5 - 20.5);
 8001d66:	4b90      	ldr	r3, [pc, #576]	@ (8001fa8 <setTorque+0x248>)
 8001d68:	881b      	ldrh	r3, [r3, #0]
 8001d6a:	f6a3 0302 	subw	r3, r3, #2050	@ 0x802
 8001d6e:	ee07 3a90 	vmov	s15, r3
 8001d72:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001d76:	eeb2 5b02 	vmov.f64	d5, #34	@ 0x41100000  9.0
 8001d7a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001d7e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d82:	ee17 3a90 	vmov	r3, s15
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	4b88      	ldr	r3, [pc, #544]	@ (8001fac <setTorque+0x24c>)
 8001d8a:	801a      	strh	r2, [r3, #0]
	if (s1_aceleracion_aux < 0)
	{
		s1_aceleracion_aux = 0;
	}
	else if (s1_aceleracion_aux > 100)
 8001d8c:	4b87      	ldr	r3, [pc, #540]	@ (8001fac <setTorque+0x24c>)
 8001d8e:	881b      	ldrh	r3, [r3, #0]
 8001d90:	2b64      	cmp	r3, #100	@ 0x64
 8001d92:	d902      	bls.n	8001d9a <setTorque+0x3a>
	{
		s1_aceleracion_aux = 100;
 8001d94:	4b85      	ldr	r3, [pc, #532]	@ (8001fac <setTorque+0x24c>)
 8001d96:	2264      	movs	r2, #100	@ 0x64
 8001d98:	801a      	strh	r2, [r3, #0]
	}

	s2_aceleracion_aux = (s2_aceleracion - 1915) / (25.70 - 19.15);
 8001d9a:	4b85      	ldr	r3, [pc, #532]	@ (8001fb0 <setTorque+0x250>)
 8001d9c:	881b      	ldrh	r3, [r3, #0]
 8001d9e:	f2a3 737b 	subw	r3, r3, #1915	@ 0x77b
 8001da2:	ee07 3a90 	vmov	s15, r3
 8001da6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001daa:	ed9f 5b75 	vldr	d5, [pc, #468]	@ 8001f80 <setTorque+0x220>
 8001dae:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001db2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001db6:	ee17 3a90 	vmov	r3, s15
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	4b7d      	ldr	r3, [pc, #500]	@ (8001fb4 <setTorque+0x254>)
 8001dbe:	801a      	strh	r2, [r3, #0]
	if (s2_aceleracion_aux < 0)
	{
		s2_aceleracion_aux = 0;
	}
	else if (s2_aceleracion_aux > 100)
 8001dc0:	4b7c      	ldr	r3, [pc, #496]	@ (8001fb4 <setTorque+0x254>)
 8001dc2:	881b      	ldrh	r3, [r3, #0]
 8001dc4:	2b64      	cmp	r3, #100	@ 0x64
 8001dc6:	d902      	bls.n	8001dce <setTorque+0x6e>
	{
		s2_aceleracion_aux = 100;
 8001dc8:	4b7a      	ldr	r3, [pc, #488]	@ (8001fb4 <setTorque+0x254>)
 8001dca:	2264      	movs	r2, #100	@ 0x64
 8001dcc:	801a      	strh	r2, [r3, #0]
	printValue(s2_aceleracion_aux);
	print("");
#endif

	// Torque enviado es la media de los dos sensores
	if (s1_aceleracion_aux > 8 && s2_aceleracion_aux > 8)
 8001dce:	4b77      	ldr	r3, [pc, #476]	@ (8001fac <setTorque+0x24c>)
 8001dd0:	881b      	ldrh	r3, [r3, #0]
 8001dd2:	2b08      	cmp	r3, #8
 8001dd4:	d911      	bls.n	8001dfa <setTorque+0x9a>
 8001dd6:	4b77      	ldr	r3, [pc, #476]	@ (8001fb4 <setTorque+0x254>)
 8001dd8:	881b      	ldrh	r3, [r3, #0]
 8001dda:	2b08      	cmp	r3, #8
 8001ddc:	d90d      	bls.n	8001dfa <setTorque+0x9a>
	{
		torque_total = (s1_aceleracion_aux + s2_aceleracion_aux) / 2;
 8001dde:	4b73      	ldr	r3, [pc, #460]	@ (8001fac <setTorque+0x24c>)
 8001de0:	881b      	ldrh	r3, [r3, #0]
 8001de2:	461a      	mov	r2, r3
 8001de4:	4b73      	ldr	r3, [pc, #460]	@ (8001fb4 <setTorque+0x254>)
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	4413      	add	r3, r2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	da00      	bge.n	8001df0 <setTorque+0x90>
 8001dee:	3301      	adds	r3, #1
 8001df0:	105b      	asrs	r3, r3, #1
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	4b70      	ldr	r3, [pc, #448]	@ (8001fb8 <setTorque+0x258>)
 8001df6:	801a      	strh	r2, [r3, #0]
 8001df8:	e002      	b.n	8001e00 <setTorque+0xa0>
	}
	else
	{
		torque_total = 0;
 8001dfa:	4b6f      	ldr	r3, [pc, #444]	@ (8001fb8 <setTorque+0x258>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	801a      	strh	r2, [r3, #0]
	}

	// Por debajo de un 10% no acelera y por encima de un 90% esta a tope
	if (torque_total < 10)
 8001e00:	4b6d      	ldr	r3, [pc, #436]	@ (8001fb8 <setTorque+0x258>)
 8001e02:	881b      	ldrh	r3, [r3, #0]
 8001e04:	2b09      	cmp	r3, #9
 8001e06:	d803      	bhi.n	8001e10 <setTorque+0xb0>
	{
		torque_total = 0;
 8001e08:	4b6b      	ldr	r3, [pc, #428]	@ (8001fb8 <setTorque+0x258>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	801a      	strh	r2, [r3, #0]
 8001e0e:	e006      	b.n	8001e1e <setTorque+0xbe>
	}
	else if (torque_total > 90)
 8001e10:	4b69      	ldr	r3, [pc, #420]	@ (8001fb8 <setTorque+0x258>)
 8001e12:	881b      	ldrh	r3, [r3, #0]
 8001e14:	2b5a      	cmp	r3, #90	@ 0x5a
 8001e16:	d902      	bls.n	8001e1e <setTorque+0xbe>
	{
		torque_total = 100;
 8001e18:	4b67      	ldr	r3, [pc, #412]	@ (8001fb8 <setTorque+0x258>)
 8001e1a:	2264      	movs	r2, #100	@ 0x64
 8001e1c:	801a      	strh	r2, [r3, #0]
	}

	// Comprobamos EV 2.3 APPS/Brake Pedal Plausibility Check
	// En caso de que se esté pisando el freno y mas de un 25% del pedal para. Se resetea
	// solo si el acelerador vuelve por debajo del 5%
	if (s_freno > UMBRAL_FRENO_APPS && torque_total > 25)
 8001e1e:	4b67      	ldr	r3, [pc, #412]	@ (8001fbc <setTorque+0x25c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001e26:	4293      	cmp	r3, r2
 8001e28:	dd0a      	ble.n	8001e40 <setTorque+0xe0>
 8001e2a:	4b63      	ldr	r3, [pc, #396]	@ (8001fb8 <setTorque+0x258>)
 8001e2c:	881b      	ldrh	r3, [r3, #0]
 8001e2e:	2b19      	cmp	r3, #25
 8001e30:	d906      	bls.n	8001e40 <setTorque+0xe0>
	{
		print("EV_2_3");
 8001e32:	4863      	ldr	r0, [pc, #396]	@ (8001fc0 <setTorque+0x260>)
 8001e34:	f7ff fe38 	bl	8001aa8 <print>
		flag_EV_2_3 = 1;
 8001e38:	4b62      	ldr	r3, [pc, #392]	@ (8001fc4 <setTorque+0x264>)
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	e00c      	b.n	8001e5a <setTorque+0xfa>
	}
	else if (s_freno < UMBRAL_FRENO_APPS && torque_total < 5)
 8001e40:	4b5e      	ldr	r3, [pc, #376]	@ (8001fbc <setTorque+0x25c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	dc06      	bgt.n	8001e5a <setTorque+0xfa>
 8001e4c:	4b5a      	ldr	r3, [pc, #360]	@ (8001fb8 <setTorque+0x258>)
 8001e4e:	881b      	ldrh	r3, [r3, #0]
 8001e50:	2b04      	cmp	r3, #4
 8001e52:	d802      	bhi.n	8001e5a <setTorque+0xfa>
	{
		flag_EV_2_3 = 0;
 8001e54:	4b5b      	ldr	r3, [pc, #364]	@ (8001fc4 <setTorque+0x264>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
	}
	// If an implausibility occurs between the values of the APPSs and persists for more than
	// 100ms The power to the motor(s) must be immediately shut down completely
	// T11.8.9 Implausibility is defined as a deviation of more than ten percentage points
	// pedal travel between any of the used APPSs
	if (abs(s1_aceleracion_aux - s2_aceleracion_aux) > 10)
 8001e5a:	4b54      	ldr	r3, [pc, #336]	@ (8001fac <setTorque+0x24c>)
 8001e5c:	881b      	ldrh	r3, [r3, #0]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	4b54      	ldr	r3, [pc, #336]	@ (8001fb4 <setTorque+0x254>)
 8001e62:	881b      	ldrh	r3, [r3, #0]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	bfb8      	it	lt
 8001e6a:	425b      	neglt	r3, r3
 8001e6c:	2b0a      	cmp	r3, #10
 8001e6e:	dd06      	ble.n	8001e7e <setTorque+0x11e>
	{

		// if (HAL_GetTick() - last_time_t_11_8 > 100) {
		print("T11.8.9");
 8001e70:	4855      	ldr	r0, [pc, #340]	@ (8001fc8 <setTorque+0x268>)
 8001e72:	f7ff fe19 	bl	8001aa8 <print>
		flag_T11_8_9 = 1;
 8001e76:	4b55      	ldr	r3, [pc, #340]	@ (8001fcc <setTorque+0x26c>)
 8001e78:	2201      	movs	r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	e007      	b.n	8001e8e <setTorque+0x12e>
		//}
	}
	else
	{
		last_time_t_11_8 = HAL_GetTick();
 8001e7e:	f001 fe21 	bl	8003ac4 <HAL_GetTick>
 8001e82:	4603      	mov	r3, r0
 8001e84:	4a52      	ldr	r2, [pc, #328]	@ (8001fd0 <setTorque+0x270>)
 8001e86:	6013      	str	r3, [r2, #0]
		flag_T11_8_9 = 0;
 8001e88:	4b50      	ldr	r3, [pc, #320]	@ (8001fcc <setTorque+0x26c>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
	}

	if (flag_EV_2_3 || flag_T11_8_9)
 8001e8e:	4b4d      	ldr	r3, [pc, #308]	@ (8001fc4 <setTorque+0x264>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d103      	bne.n	8001e9e <setTorque+0x13e>
 8001e96:	4b4d      	ldr	r3, [pc, #308]	@ (8001fcc <setTorque+0x26c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d002      	beq.n	8001ea4 <setTorque+0x144>
	{
		torque_total = 0;
 8001e9e:	4b46      	ldr	r3, [pc, #280]	@ (8001fb8 <setTorque+0x258>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	801a      	strh	r2, [r3, #0]
	print("Torque total solicitado: ");
	printValue(torque_total);
#endif

	// Limitación del torque en función de la carga
	if (v_celda_min < 3500)
 8001ea4:	4b4b      	ldr	r3, [pc, #300]	@ (8001fd4 <setTorque+0x274>)
 8001ea6:	edd3 7a00 	vldr	s15, [r3]
 8001eaa:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8001fd8 <setTorque+0x278>
 8001eae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb6:	d53a      	bpl.n	8001f2e <setTorque+0x1ce>
	{
		if (v_celda_min > 2800)
 8001eb8:	4b46      	ldr	r3, [pc, #280]	@ (8001fd4 <setTorque+0x274>)
 8001eba:	edd3 7a00 	vldr	s15, [r3]
 8001ebe:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001fdc <setTorque+0x27c>
 8001ec2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eca:	dd1f      	ble.n	8001f0c <setTorque+0x1ac>
		{
			torque_limitado = torque_total * (1.357 * v_celda_min - 3750) / 1000;
 8001ecc:	4b3a      	ldr	r3, [pc, #232]	@ (8001fb8 <setTorque+0x258>)
 8001ece:	881b      	ldrh	r3, [r3, #0]
 8001ed0:	ee07 3a90 	vmov	s15, r3
 8001ed4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001ed8:	4b3e      	ldr	r3, [pc, #248]	@ (8001fd4 <setTorque+0x274>)
 8001eda:	edd3 7a00 	vldr	s15, [r3]
 8001ede:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ee2:	ed9f 5b29 	vldr	d5, [pc, #164]	@ 8001f88 <setTorque+0x228>
 8001ee6:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001eea:	ed9f 5b29 	vldr	d5, [pc, #164]	@ 8001f90 <setTorque+0x230>
 8001eee:	ee37 7b45 	vsub.f64	d7, d7, d5
 8001ef2:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001ef6:	ed9f 5b28 	vldr	d5, [pc, #160]	@ 8001f98 <setTorque+0x238>
 8001efa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001efe:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001f02:	ee17 2a90 	vmov	r2, s15
 8001f06:	4b36      	ldr	r3, [pc, #216]	@ (8001fe0 <setTorque+0x280>)
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	e015      	b.n	8001f38 <setTorque+0x1d8>
		}
		else
		{
			torque_limitado = torque_total * 0.05;
 8001f0c:	4b2a      	ldr	r3, [pc, #168]	@ (8001fb8 <setTorque+0x258>)
 8001f0e:	881b      	ldrh	r3, [r3, #0]
 8001f10:	ee07 3a90 	vmov	s15, r3
 8001f14:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001f18:	ed9f 6b21 	vldr	d6, [pc, #132]	@ 8001fa0 <setTorque+0x240>
 8001f1c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f20:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001f24:	ee17 2a90 	vmov	r2, s15
 8001f28:	4b2d      	ldr	r3, [pc, #180]	@ (8001fe0 <setTorque+0x280>)
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	e004      	b.n	8001f38 <setTorque+0x1d8>
		}
	}
	else
	{
		torque_limitado = torque_total;
 8001f2e:	4b22      	ldr	r3, [pc, #136]	@ (8001fb8 <setTorque+0x258>)
 8001f30:	881b      	ldrh	r3, [r3, #0]
 8001f32:	461a      	mov	r2, r3
 8001f34:	4b2a      	ldr	r3, [pc, #168]	@ (8001fe0 <setTorque+0x280>)
 8001f36:	601a      	str	r2, [r3, #0]
print("Torque limitado en: ");
printValue(torque_limitado);
#endif

	// torque_total = torque_total * 240 / 100;
	if (torque_total >= 10)
 8001f38:	4b1f      	ldr	r3, [pc, #124]	@ (8001fb8 <setTorque+0x258>)
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	2b09      	cmp	r3, #9
 8001f3e:	d912      	bls.n	8001f66 <setTorque+0x206>
	{
		torque_total = (torque_total * 240 / 90 - 2400 / 90) * (100 / 100);
 8001f40:	4b1d      	ldr	r3, [pc, #116]	@ (8001fb8 <setTorque+0x258>)
 8001f42:	881b      	ldrh	r3, [r3, #0]
 8001f44:	461a      	mov	r2, r3
 8001f46:	4613      	mov	r3, r2
 8001f48:	011b      	lsls	r3, r3, #4
 8001f4a:	1a9b      	subs	r3, r3, r2
 8001f4c:	011b      	lsls	r3, r3, #4
 8001f4e:	4a25      	ldr	r2, [pc, #148]	@ (8001fe4 <setTorque+0x284>)
 8001f50:	fb82 1203 	smull	r1, r2, r2, r3
 8001f54:	441a      	add	r2, r3
 8001f56:	1192      	asrs	r2, r2, #6
 8001f58:	17db      	asrs	r3, r3, #31
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	3b1a      	subs	r3, #26
 8001f60:	b29a      	uxth	r2, r3
 8001f62:	4b15      	ldr	r3, [pc, #84]	@ (8001fb8 <setTorque+0x258>)
 8001f64:	801a      	strh	r2, [r3, #0]
	/*if(torque_total < 0){
		torque_total = 0;
	}*/

	// Invertir todos los bits (complemento a uno)
	uint16_t complement_one = ~torque_total;
 8001f66:	4b14      	ldr	r3, [pc, #80]	@ (8001fb8 <setTorque+0x258>)
 8001f68:	881b      	ldrh	r3, [r3, #0]
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	80fb      	strh	r3, [r7, #6]

	// Sumar 1 para obtener el complemento a dos
	uint16_t torque_real = complement_one + 1;
 8001f6e:	88fb      	ldrh	r3, [r7, #6]
 8001f70:	3301      	adds	r3, #1
 8001f72:	80bb      	strh	r3, [r7, #4]

#if 0
	print("Torque mandado al inversor: ");
	printHex(torque_real);
#endif
	return torque_real;
 8001f74:	88bb      	ldrh	r3, [r7, #4]
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	33333334 	.word	0x33333334
 8001f84:	401a3333 	.word	0x401a3333
 8001f88:	a1cac083 	.word	0xa1cac083
 8001f8c:	3ff5b645 	.word	0x3ff5b645
 8001f90:	00000000 	.word	0x00000000
 8001f94:	40ad4c00 	.word	0x40ad4c00
 8001f98:	00000000 	.word	0x00000000
 8001f9c:	408f4000 	.word	0x408f4000
 8001fa0:	9999999a 	.word	0x9999999a
 8001fa4:	3fa99999 	.word	0x3fa99999
 8001fa8:	240007b2 	.word	0x240007b2
 8001fac:	240007b6 	.word	0x240007b6
 8001fb0:	240007b4 	.word	0x240007b4
 8001fb4:	240007b8 	.word	0x240007b8
 8001fb8:	240007c0 	.word	0x240007c0
 8001fbc:	240007bc 	.word	0x240007bc
 8001fc0:	080147a0 	.word	0x080147a0
 8001fc4:	240007d0 	.word	0x240007d0
 8001fc8:	080147a8 	.word	0x080147a8
 8001fcc:	240007d4 	.word	0x240007d4
 8001fd0:	240007cc 	.word	0x240007cc
 8001fd4:	24000010 	.word	0x24000010
 8001fd8:	455ac000 	.word	0x455ac000
 8001fdc:	452f0000 	.word	0x452f0000
 8001fe0:	240007c4 	.word	0x240007c4
 8001fe4:	b60b60b7 	.word	0xb60b60b7

08001fe8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]

	if (htim == &htim16)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4aa3      	ldr	r2, [pc, #652]	@ (8002280 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	f040 81f3 	bne.w	80023e0 <HAL_TIM_PeriodElapsedCallback+0x3f8>
	{
		// Reenvío DC_BUS_VOLTAGE al AMS por CAN_ACU
		TxHeader_Acu.Identifier = ID_dc_bus_voltage;
 8001ffa:	4ba2      	ldr	r3, [pc, #648]	@ (8002284 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4aa2      	ldr	r2, [pc, #648]	@ (8002288 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002000:	6013      	str	r3, [r2, #0]
		TxHeader_Acu.DataLength = 2;
 8002002:	4ba1      	ldr	r3, [pc, #644]	@ (8002288 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002004:	2202      	movs	r2, #2
 8002006:	60da      	str	r2, [r3, #12]
		TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 8002008:	4b9f      	ldr	r3, [pc, #636]	@ (8002288 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800200a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800200e:	605a      	str	r2, [r3, #4]
		TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 8002010:	4b9d      	ldr	r3, [pc, #628]	@ (8002288 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002012:	2200      	movs	r2, #0
 8002014:	619a      	str	r2, [r3, #24]
		TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 8002016:	4b9c      	ldr	r3, [pc, #624]	@ (8002288 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002018:	2200      	movs	r2, #0
 800201a:	609a      	str	r2, [r3, #8]

		/*		TxData_Acu[0] = byte0_voltage;
		 TxData_Acu[1] = byte1_voltage;*/
		TxData_Acu[0] = inv_dc_bus_voltage & 0xFF;
 800201c:	4b9b      	ldr	r3, [pc, #620]	@ (800228c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	b2da      	uxtb	r2, r3
 8002022:	4b9b      	ldr	r3, [pc, #620]	@ (8002290 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002024:	701a      	strb	r2, [r3, #0]
		TxData_Acu[1] = (inv_dc_bus_voltage >> 8) & 0xFF;
 8002026:	4b99      	ldr	r3, [pc, #612]	@ (800228c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	121b      	asrs	r3, r3, #8
 800202c:	b2da      	uxtb	r2, r3
 800202e:	4b98      	ldr	r3, [pc, #608]	@ (8002290 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002030:	705a      	strb	r2, [r3, #1]
		//printValue(inv_dc_bus_voltage);
		/* --- Telemetry tick: 10ms base --- */
		    tel_irq_cnt++;                // <--- ADD
 8002032:	4b98      	ldr	r3, [pc, #608]	@ (8002294 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	3301      	adds	r3, #1
 8002038:	4a96      	ldr	r2, [pc, #600]	@ (8002294 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800203a:	6013      	str	r3, [r2, #0]
		    tel_tick += 10;
 800203c:	4b96      	ldr	r3, [pc, #600]	@ (8002298 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	330a      	adds	r3, #10
 8002042:	4a95      	ldr	r2, [pc, #596]	@ (8002298 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8002044:	6013      	str	r3, [r2, #0]

		    (void)HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu);
 8002046:	4a92      	ldr	r2, [pc, #584]	@ (8002290 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002048:	498f      	ldr	r1, [pc, #572]	@ (8002288 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800204a:	4894      	ldr	r0, [pc, #592]	@ (800229c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800204c:	f006 fdd7 	bl	8008bfe <HAL_FDCAN_AddMessageToTxFifoQ>

		    precharge_button = HAL_GPIO_ReadPin(START_BUTTON_GPIO_Port, START_BUTTON_Pin);
 8002050:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002054:	4892      	ldr	r0, [pc, #584]	@ (80022a0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002056:	f007 febd 	bl	8009dd4 <HAL_GPIO_ReadPin>
 800205a:	4603      	mov	r3, r0
 800205c:	461a      	mov	r2, r3
 800205e:	4b91      	ldr	r3, [pc, #580]	@ (80022a4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002060:	601a      	str	r2, [r3, #0]

		    TxHeader_Acu.Identifier = 0x600;
 8002062:	4b89      	ldr	r3, [pc, #548]	@ (8002288 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002064:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8002068:	601a      	str	r2, [r3, #0]
		    TxHeader_Acu.DataLength = 2;
 800206a:	4b87      	ldr	r3, [pc, #540]	@ (8002288 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800206c:	2202      	movs	r2, #2
 800206e:	60da      	str	r2, [r3, #12]
		    TxHeader_Acu.IdType     = FDCAN_EXTENDED_ID;
 8002070:	4b85      	ldr	r3, [pc, #532]	@ (8002288 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002072:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002076:	605a      	str	r2, [r3, #4]
		    TxHeader_Acu.FDFormat   = FDCAN_CLASSIC_CAN;
 8002078:	4b83      	ldr	r3, [pc, #524]	@ (8002288 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800207a:	2200      	movs	r2, #0
 800207c:	619a      	str	r2, [r3, #24]
		    TxHeader_Acu.TxFrameType= FDCAN_DATA_FRAME;
 800207e:	4b82      	ldr	r3, [pc, #520]	@ (8002288 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002080:	2200      	movs	r2, #0
 8002082:	609a      	str	r2, [r3, #8]
		    TxData_Acu[0] = precharge_button;
 8002084:	4b87      	ldr	r3, [pc, #540]	@ (80022a4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	b2da      	uxtb	r2, r3
 800208a:	4b81      	ldr	r3, [pc, #516]	@ (8002290 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800208c:	701a      	strb	r2, [r3, #0]

		    /* REMOVE noisy ISR print:
		       printValue(TxData_Acu[0]);  // <-- delete this (no UART in ISR) */

		    (void)HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu);
 800208e:	4a80      	ldr	r2, [pc, #512]	@ (8002290 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002090:	497d      	ldr	r1, [pc, #500]	@ (8002288 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002092:	4882      	ldr	r0, [pc, #520]	@ (800229c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002094:	f006 fdb3 	bl	8008bfe <HAL_FDCAN_AddMessageToTxFifoQ>

		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK)
 8002098:	4a7d      	ldr	r2, [pc, #500]	@ (8002290 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800209a:	497b      	ldr	r1, [pc, #492]	@ (8002288 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800209c:	487f      	ldr	r0, [pc, #508]	@ (800229c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800209e:	f006 fdae 	bl	8008bfe <HAL_FDCAN_AddMessageToTxFifoQ>
#if DEBUG
			//print("CAN_ACU: DC_BUS_VOLTAGE enviado a AMS");
#endif
		}

		precharge_button = HAL_GPIO_ReadPin(START_BUTTON_GPIO_Port, START_BUTTON_Pin);
 80020a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80020a6:	487e      	ldr	r0, [pc, #504]	@ (80022a0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80020a8:	f007 fe94 	bl	8009dd4 <HAL_GPIO_ReadPin>
 80020ac:	4603      	mov	r3, r0
 80020ae:	461a      	mov	r2, r3
 80020b0:	4b7c      	ldr	r3, [pc, #496]	@ (80022a4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80020b2:	601a      	str	r2, [r3, #0]

		TxHeader_Acu.Identifier = 0x600;
 80020b4:	4b74      	ldr	r3, [pc, #464]	@ (8002288 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80020b6:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80020ba:	601a      	str	r2, [r3, #0]
		TxHeader_Acu.DataLength = 2;
 80020bc:	4b72      	ldr	r3, [pc, #456]	@ (8002288 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80020be:	2202      	movs	r2, #2
 80020c0:	60da      	str	r2, [r3, #12]
		TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 80020c2:	4b71      	ldr	r3, [pc, #452]	@ (8002288 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80020c4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80020c8:	605a      	str	r2, [r3, #4]
		TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 80020ca:	4b6f      	ldr	r3, [pc, #444]	@ (8002288 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	619a      	str	r2, [r3, #24]
		TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 80020d0:	4b6d      	ldr	r3, [pc, #436]	@ (8002288 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	609a      	str	r2, [r3, #8]


		TxData_Acu[0] = precharge_button;
 80020d6:	4b73      	ldr	r3, [pc, #460]	@ (80022a4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	b2da      	uxtb	r2, r3
 80020dc:	4b6c      	ldr	r3, [pc, #432]	@ (8002290 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80020de:	701a      	strb	r2, [r3, #0]
		printValue(TxData_Acu[0]);
 80020e0:	4b6b      	ldr	r3, [pc, #428]	@ (8002290 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff fcfd 	bl	8001ae4 <printValue>

		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK)
 80020ea:	4a69      	ldr	r2, [pc, #420]	@ (8002290 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80020ec:	4966      	ldr	r1, [pc, #408]	@ (8002288 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80020ee:	486b      	ldr	r0, [pc, #428]	@ (800229c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80020f0:	f006 fd85 	bl	8008bfe <HAL_FDCAN_AddMessageToTxFifoQ>

		// ---------- CONTROL DEL INVERSOR ----------

		//printHex(state);
		// Estado TORQUE
		if ((state == 4 || state == 6) && flag_r2d == 1)
 80020f4:	4b6c      	ldr	r3, [pc, #432]	@ (80022a8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	d003      	beq.n	8002104 <HAL_TIM_PeriodElapsedCallback+0x11c>
 80020fc:	4b6a      	ldr	r3, [pc, #424]	@ (80022a8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b06      	cmp	r3, #6
 8002102:	d11b      	bne.n	800213c <HAL_TIM_PeriodElapsedCallback+0x154>
 8002104:	4b69      	ldr	r3, [pc, #420]	@ (80022ac <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d117      	bne.n	800213c <HAL_TIM_PeriodElapsedCallback+0x154>
		{ // Si no hay que reactivar el coche manda siempre torque

			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 800210c:	4b68      	ldr	r3, [pc, #416]	@ (80022b0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a68      	ldr	r2, [pc, #416]	@ (80022b4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002112:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8002114:	4b67      	ldr	r3, [pc, #412]	@ (80022b4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002116:	2203      	movs	r2, #3
 8002118:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 800211a:	4b66      	ldr	r3, [pc, #408]	@ (80022b4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800211c:	2200      	movs	r2, #0
 800211e:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8002120:	4b65      	ldr	r3, [pc, #404]	@ (80022b8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002122:	2200      	movs	r2, #0
 8002124:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8002126:	4b64      	ldr	r3, [pc, #400]	@ (80022b8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002128:	2200      	movs	r2, #0
 800212a:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0x6;
 800212c:	4b62      	ldr	r3, [pc, #392]	@ (80022b8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800212e:	2206      	movs	r2, #6
 8002130:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8002132:	4a61      	ldr	r2, [pc, #388]	@ (80022b8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002134:	495f      	ldr	r1, [pc, #380]	@ (80022b4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002136:	4861      	ldr	r0, [pc, #388]	@ (80022bc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002138:	f006 fd61 	bl	8008bfe <HAL_FDCAN_AddMessageToTxFifoQ>
		}

		if(flag_r2d == 1){
 800213c:	4b5b      	ldr	r3, [pc, #364]	@ (80022ac <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b01      	cmp	r3, #1
 8002142:	f040 814d 	bne.w	80023e0 <HAL_TIM_PeriodElapsedCallback+0x3f8>
			switch (state)
 8002146:	4b58      	ldr	r3, [pc, #352]	@ (80022a8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	2b0d      	cmp	r3, #13
 800214c:	f200 8148 	bhi.w	80023e0 <HAL_TIM_PeriodElapsedCallback+0x3f8>
 8002150:	a201      	add	r2, pc, #4	@ (adr r2, 8002158 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8002152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002156:	bf00      	nop
 8002158:	08002191 	.word	0x08002191
 800215c:	080023e1 	.word	0x080023e1
 8002160:	080023e1 	.word	0x080023e1
 8002164:	080021c1 	.word	0x080021c1
 8002168:	080021f7 	.word	0x080021f7
 800216c:	080023e1 	.word	0x080023e1
 8002170:	080022cd 	.word	0x080022cd
 8002174:	080023e1 	.word	0x080023e1
 8002178:	080023e1 	.word	0x080023e1
 800217c:	080023e1 	.word	0x080023e1
 8002180:	0800232d 	.word	0x0800232d
 8002184:	0800236d 	.word	0x0800236d
 8002188:	080023e1 	.word	0x080023e1
 800218c:	080023a9 	.word	0x080023a9
			{
			case 0:
				TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8002190:	4b47      	ldr	r3, [pc, #284]	@ (80022b0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a47      	ldr	r2, [pc, #284]	@ (80022b4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002196:	6013      	str	r3, [r2, #0]
				TxHeader_Inv.DataLength = 3;
 8002198:	4b46      	ldr	r3, [pc, #280]	@ (80022b4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800219a:	2203      	movs	r2, #3
 800219c:	60da      	str	r2, [r3, #12]
				TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 800219e:	4b45      	ldr	r3, [pc, #276]	@ (80022b4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	605a      	str	r2, [r3, #4]

				TxData_Inv[0] = 0x0;
 80021a4:	4b44      	ldr	r3, [pc, #272]	@ (80022b8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	701a      	strb	r2, [r3, #0]
				TxData_Inv[1] = 0x0;
 80021aa:	4b43      	ldr	r3, [pc, #268]	@ (80022b8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	705a      	strb	r2, [r3, #1]
				TxData_Inv[2] = 0x1;
 80021b0:	4b41      	ldr	r3, [pc, #260]	@ (80022b8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80021b2:	2201      	movs	r2, #1
 80021b4:	709a      	strb	r2, [r3, #2]
				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 80021b6:	4a40      	ldr	r2, [pc, #256]	@ (80022b8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80021b8:	493e      	ldr	r1, [pc, #248]	@ (80022b4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80021ba:	4840      	ldr	r0, [pc, #256]	@ (80022bc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80021bc:	f006 fd1f 	bl	8008bfe <HAL_FDCAN_AddMessageToTxFifoQ>

			case 3:
	#if DEBUG
				//print("state: standby");
	#endif
				flag_react = 0;
 80021c0:	4b3f      	ldr	r3, [pc, #252]	@ (80022c0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	701a      	strb	r2, [r3, #0]
				// Estado READY inversor
				TxHeader_Inv.Identifier = RX_SETPOINT_1;
 80021c6:	4b3a      	ldr	r3, [pc, #232]	@ (80022b0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a3a      	ldr	r2, [pc, #232]	@ (80022b4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80021cc:	6013      	str	r3, [r2, #0]
				TxHeader_Inv.DataLength = 3;
 80021ce:	4b39      	ldr	r3, [pc, #228]	@ (80022b4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80021d0:	2203      	movs	r2, #3
 80021d2:	60da      	str	r2, [r3, #12]
				TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 80021d4:	4b37      	ldr	r3, [pc, #220]	@ (80022b4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	605a      	str	r2, [r3, #4]

				TxData_Inv[0] = 0x0;
 80021da:	4b37      	ldr	r3, [pc, #220]	@ (80022b8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80021dc:	2200      	movs	r2, #0
 80021de:	701a      	strb	r2, [r3, #0]
				TxData_Inv[1] = 0x0;
 80021e0:	4b35      	ldr	r3, [pc, #212]	@ (80022b8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	705a      	strb	r2, [r3, #1]
				TxData_Inv[2] = 0x4;
 80021e6:	4b34      	ldr	r3, [pc, #208]	@ (80022b8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80021e8:	2204      	movs	r2, #4
 80021ea:	709a      	strb	r2, [r3, #2]
				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 80021ec:	4a32      	ldr	r2, [pc, #200]	@ (80022b8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80021ee:	4931      	ldr	r1, [pc, #196]	@ (80022b4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80021f0:	4832      	ldr	r0, [pc, #200]	@ (80022bc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80021f2:	f006 fd04 	bl	8008bfe <HAL_FDCAN_AddMessageToTxFifoQ>
				//}

			case 4:

	#if DEBUG
				print("state: ready");
 80021f6:	4833      	ldr	r0, [pc, #204]	@ (80022c4 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80021f8:	f7ff fc56 	bl	8001aa8 <print>
	#endif
				if (flag_r2d == 1){
 80021fc:	4b2b      	ldr	r3, [pc, #172]	@ (80022ac <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d120      	bne.n	8002246 <HAL_TIM_PeriodElapsedCallback+0x25e>
					TxHeader_Inv.Identifier = 0x362;
 8002204:	4b2b      	ldr	r3, [pc, #172]	@ (80022b4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002206:	f240 3262 	movw	r2, #866	@ 0x362
 800220a:	601a      	str	r2, [r3, #0]
					TxHeader_Inv.DataLength = 4;
 800220c:	4b29      	ldr	r3, [pc, #164]	@ (80022b4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800220e:	2204      	movs	r2, #4
 8002210:	60da      	str	r2, [r3, #12]

					real_torque = 0;
 8002212:	4b2d      	ldr	r3, [pc, #180]	@ (80022c8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002214:	2200      	movs	r2, #0
 8002216:	801a      	strh	r2, [r3, #0]

					TxData_Inv[0] = 0x0;
 8002218:	4b27      	ldr	r3, [pc, #156]	@ (80022b8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800221a:	2200      	movs	r2, #0
 800221c:	701a      	strb	r2, [r3, #0]
					TxData_Inv[1] = 0x0;
 800221e:	4b26      	ldr	r3, [pc, #152]	@ (80022b8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002220:	2200      	movs	r2, #0
 8002222:	705a      	strb	r2, [r3, #1]
					TxData_Inv[2] = real_torque;
 8002224:	4b28      	ldr	r3, [pc, #160]	@ (80022c8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002226:	881b      	ldrh	r3, [r3, #0]
 8002228:	b2da      	uxtb	r2, r3
 800222a:	4b23      	ldr	r3, [pc, #140]	@ (80022b8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800222c:	709a      	strb	r2, [r3, #2]
					TxData_Inv[3] = 0x0;
 800222e:	4b22      	ldr	r3, [pc, #136]	@ (80022b8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002230:	2200      	movs	r2, #0
 8002232:	70da      	strb	r2, [r3, #3]
					HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8002234:	4a20      	ldr	r2, [pc, #128]	@ (80022b8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002236:	491f      	ldr	r1, [pc, #124]	@ (80022b4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002238:	4820      	ldr	r0, [pc, #128]	@ (80022bc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800223a:	f006 fce0 	bl	8008bfe <HAL_FDCAN_AddMessageToTxFifoQ>
					flag_react = 0; // Reactivado
 800223e:	4b20      	ldr	r3, [pc, #128]	@ (80022c0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002240:	2200      	movs	r2, #0
 8002242:	701a      	strb	r2, [r3, #0]
					TxData_Inv[1] = 0x0;
					TxData_Inv[2] = 0x4;
					HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
				}

				break;
 8002244:	e0cc      	b.n	80023e0 <HAL_TIM_PeriodElapsedCallback+0x3f8>
					flag_react = 0;
 8002246:	4b1e      	ldr	r3, [pc, #120]	@ (80022c0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002248:	2200      	movs	r2, #0
 800224a:	701a      	strb	r2, [r3, #0]
					TxHeader_Inv.Identifier = RX_SETPOINT_1;
 800224c:	4b18      	ldr	r3, [pc, #96]	@ (80022b0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a18      	ldr	r2, [pc, #96]	@ (80022b4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002252:	6013      	str	r3, [r2, #0]
					TxHeader_Inv.DataLength = 3;
 8002254:	4b17      	ldr	r3, [pc, #92]	@ (80022b4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002256:	2203      	movs	r2, #3
 8002258:	60da      	str	r2, [r3, #12]
					TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 800225a:	4b16      	ldr	r3, [pc, #88]	@ (80022b4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800225c:	2200      	movs	r2, #0
 800225e:	605a      	str	r2, [r3, #4]
					TxData_Inv[0] = 0x0;
 8002260:	4b15      	ldr	r3, [pc, #84]	@ (80022b8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002262:	2200      	movs	r2, #0
 8002264:	701a      	strb	r2, [r3, #0]
					TxData_Inv[1] = 0x0;
 8002266:	4b14      	ldr	r3, [pc, #80]	@ (80022b8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002268:	2200      	movs	r2, #0
 800226a:	705a      	strb	r2, [r3, #1]
					TxData_Inv[2] = 0x4;
 800226c:	4b12      	ldr	r3, [pc, #72]	@ (80022b8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800226e:	2204      	movs	r2, #4
 8002270:	709a      	strb	r2, [r3, #2]
					HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8002272:	4a11      	ldr	r2, [pc, #68]	@ (80022b8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002274:	490f      	ldr	r1, [pc, #60]	@ (80022b4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002276:	4811      	ldr	r0, [pc, #68]	@ (80022bc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002278:	f006 fcc1 	bl	8008bfe <HAL_FDCAN_AddMessageToTxFifoQ>
				break;
 800227c:	e0b0      	b.n	80023e0 <HAL_TIM_PeriodElapsedCallback+0x3f8>
 800227e:	bf00      	nop
 8002280:	24000534 	.word	0x24000534
 8002284:	24000004 	.word	0x24000004
 8002288:	24000704 	.word	0x24000704
 800228c:	240007a4 	.word	0x240007a4
 8002290:	24000788 	.word	0x24000788
 8002294:	240006ac 	.word	0x240006ac
 8002298:	240006a8 	.word	0x240006a8
 800229c:	240002a4 	.word	0x240002a4
 80022a0:	58021400 	.word	0x58021400
 80022a4:	240007d8 	.word	0x240007d8
 80022a8:	240007ca 	.word	0x240007ca
 80022ac:	2400093c 	.word	0x2400093c
 80022b0:	24000000 	.word	0x24000000
 80022b4:	240006b8 	.word	0x240006b8
 80022b8:	24000778 	.word	0x24000778
 80022bc:	24000204 	.word	0x24000204
 80022c0:	2400093b 	.word	0x2400093b
 80022c4:	08014720 	.word	0x08014720
 80022c8:	240007c8 	.word	0x240007c8
			case 6:
				print("state: torque");
 80022cc:	4846      	ldr	r0, [pc, #280]	@ (80023e8 <HAL_TIM_PeriodElapsedCallback+0x400>)
 80022ce:	f7ff fbeb 	bl	8001aa8 <print>

				// Request TORQUE inversor

				// flag_react = 1;

				real_torque = setTorque();
 80022d2:	f7ff fd45 	bl	8001d60 <setTorque>
 80022d6:	4603      	mov	r3, r0
 80022d8:	461a      	mov	r2, r3
 80022da:	4b44      	ldr	r3, [pc, #272]	@ (80023ec <HAL_TIM_PeriodElapsedCallback+0x404>)
 80022dc:	801a      	strh	r2, [r3, #0]

				TxHeader_Inv.Identifier = 0x362;
 80022de:	4b44      	ldr	r3, [pc, #272]	@ (80023f0 <HAL_TIM_PeriodElapsedCallback+0x408>)
 80022e0:	f240 3262 	movw	r2, #866	@ 0x362
 80022e4:	601a      	str	r2, [r3, #0]
				TxHeader_Inv.DataLength = 4;
 80022e6:	4b42      	ldr	r3, [pc, #264]	@ (80023f0 <HAL_TIM_PeriodElapsedCallback+0x408>)
 80022e8:	2204      	movs	r2, #4
 80022ea:	60da      	str	r2, [r3, #12]

				// real_torque = 0;
				byte_torque_1 = real_torque & 0xFF;
 80022ec:	4b3f      	ldr	r3, [pc, #252]	@ (80023ec <HAL_TIM_PeriodElapsedCallback+0x404>)
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	4b40      	ldr	r3, [pc, #256]	@ (80023f4 <HAL_TIM_PeriodElapsedCallback+0x40c>)
 80022f4:	701a      	strb	r2, [r3, #0]
				byte_torque_2 = (real_torque >> 8) & 0xFF;
 80022f6:	4b3d      	ldr	r3, [pc, #244]	@ (80023ec <HAL_TIM_PeriodElapsedCallback+0x404>)
 80022f8:	881b      	ldrh	r3, [r3, #0]
 80022fa:	0a1b      	lsrs	r3, r3, #8
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	4b3d      	ldr	r3, [pc, #244]	@ (80023f8 <HAL_TIM_PeriodElapsedCallback+0x410>)
 8002302:	701a      	strb	r2, [r3, #0]
				TxData_Inv[0] = 0x00;
 8002304:	4b3d      	ldr	r3, [pc, #244]	@ (80023fc <HAL_TIM_PeriodElapsedCallback+0x414>)
 8002306:	2200      	movs	r2, #0
 8002308:	701a      	strb	r2, [r3, #0]
				TxData_Inv[1] = 0x00;
 800230a:	4b3c      	ldr	r3, [pc, #240]	@ (80023fc <HAL_TIM_PeriodElapsedCallback+0x414>)
 800230c:	2200      	movs	r2, #0
 800230e:	705a      	strb	r2, [r3, #1]
					if(frena > 500){
						acelera = 1;
						frena = 0;
					}
				}*/
				TxData_Inv[2] = byte_torque_1;
 8002310:	4b38      	ldr	r3, [pc, #224]	@ (80023f4 <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8002312:	781a      	ldrb	r2, [r3, #0]
 8002314:	4b39      	ldr	r3, [pc, #228]	@ (80023fc <HAL_TIM_PeriodElapsedCallback+0x414>)
 8002316:	709a      	strb	r2, [r3, #2]
				TxData_Inv[3] = byte_torque_2;
 8002318:	4b37      	ldr	r3, [pc, #220]	@ (80023f8 <HAL_TIM_PeriodElapsedCallback+0x410>)
 800231a:	781a      	ldrb	r2, [r3, #0]
 800231c:	4b37      	ldr	r3, [pc, #220]	@ (80023fc <HAL_TIM_PeriodElapsedCallback+0x414>)
 800231e:	70da      	strb	r2, [r3, #3]
				// TxData_Inv[2] = 0xFE;
				// TxData_Inv[3] = 0xFF;
				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8002320:	4a36      	ldr	r2, [pc, #216]	@ (80023fc <HAL_TIM_PeriodElapsedCallback+0x414>)
 8002322:	4933      	ldr	r1, [pc, #204]	@ (80023f0 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8002324:	4836      	ldr	r0, [pc, #216]	@ (8002400 <HAL_TIM_PeriodElapsedCallback+0x418>)
 8002326:	f006 fc6a 	bl	8008bfe <HAL_FDCAN_AddMessageToTxFifoQ>
				//CAN_bus_off_check_reset(&hfdcan1);

				break;
 800232a:	e059      	b.n	80023e0 <HAL_TIM_PeriodElapsedCallback+0x3f8>

			case 10:
				print("state: soft fault");
 800232c:	4835      	ldr	r0, [pc, #212]	@ (8002404 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 800232e:	f7ff fbbb 	bl	8001aa8 <print>
				printValue(error);
 8002332:	4b35      	ldr	r3, [pc, #212]	@ (8002408 <HAL_TIM_PeriodElapsedCallback+0x420>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff fbd4 	bl	8001ae4 <printValue>

				// Estado READY inversor
				TxHeader_Inv.Identifier = RX_SETPOINT_1;
 800233c:	4b33      	ldr	r3, [pc, #204]	@ (800240c <HAL_TIM_PeriodElapsedCallback+0x424>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a2b      	ldr	r2, [pc, #172]	@ (80023f0 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8002342:	6013      	str	r3, [r2, #0]
				TxHeader_Inv.DataLength = 3;
 8002344:	4b2a      	ldr	r3, [pc, #168]	@ (80023f0 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8002346:	2203      	movs	r2, #3
 8002348:	60da      	str	r2, [r3, #12]
				TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 800234a:	4b29      	ldr	r3, [pc, #164]	@ (80023f0 <HAL_TIM_PeriodElapsedCallback+0x408>)
 800234c:	2200      	movs	r2, #0
 800234e:	605a      	str	r2, [r3, #4]

				TxData_Inv[0] = 0x0;
 8002350:	4b2a      	ldr	r3, [pc, #168]	@ (80023fc <HAL_TIM_PeriodElapsedCallback+0x414>)
 8002352:	2200      	movs	r2, #0
 8002354:	701a      	strb	r2, [r3, #0]
				TxData_Inv[1] = 0x0;
 8002356:	4b29      	ldr	r3, [pc, #164]	@ (80023fc <HAL_TIM_PeriodElapsedCallback+0x414>)
 8002358:	2200      	movs	r2, #0
 800235a:	705a      	strb	r2, [r3, #1]
				TxData_Inv[2] = 0x13;
 800235c:	4b27      	ldr	r3, [pc, #156]	@ (80023fc <HAL_TIM_PeriodElapsedCallback+0x414>)
 800235e:	2213      	movs	r2, #19
 8002360:	709a      	strb	r2, [r3, #2]
				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8002362:	4a26      	ldr	r2, [pc, #152]	@ (80023fc <HAL_TIM_PeriodElapsedCallback+0x414>)
 8002364:	4922      	ldr	r1, [pc, #136]	@ (80023f0 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8002366:	4826      	ldr	r0, [pc, #152]	@ (8002400 <HAL_TIM_PeriodElapsedCallback+0x418>)
 8002368:	f006 fc49 	bl	8008bfe <HAL_FDCAN_AddMessageToTxFifoQ>
						HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv,
													  TxData_Inv);
					}*/

			case 11:
				print("state: hard fault");
 800236c:	4828      	ldr	r0, [pc, #160]	@ (8002410 <HAL_TIM_PeriodElapsedCallback+0x428>)
 800236e:	f7ff fb9b 	bl	8001aa8 <print>
				flag_react = 1;
 8002372:	4b28      	ldr	r3, [pc, #160]	@ (8002414 <HAL_TIM_PeriodElapsedCallback+0x42c>)
 8002374:	2201      	movs	r2, #1
 8002376:	701a      	strb	r2, [r3, #0]
				TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8002378:	4b24      	ldr	r3, [pc, #144]	@ (800240c <HAL_TIM_PeriodElapsedCallback+0x424>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a1c      	ldr	r2, [pc, #112]	@ (80023f0 <HAL_TIM_PeriodElapsedCallback+0x408>)
 800237e:	6013      	str	r3, [r2, #0]
				TxHeader_Inv.DataLength = 3;
 8002380:	4b1b      	ldr	r3, [pc, #108]	@ (80023f0 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8002382:	2203      	movs	r2, #3
 8002384:	60da      	str	r2, [r3, #12]
				TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8002386:	4b1a      	ldr	r3, [pc, #104]	@ (80023f0 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8002388:	2200      	movs	r2, #0
 800238a:	605a      	str	r2, [r3, #4]

				TxData_Inv[0] = 0x0;
 800238c:	4b1b      	ldr	r3, [pc, #108]	@ (80023fc <HAL_TIM_PeriodElapsedCallback+0x414>)
 800238e:	2200      	movs	r2, #0
 8002390:	701a      	strb	r2, [r3, #0]
				TxData_Inv[1] = 0x0;
 8002392:	4b1a      	ldr	r3, [pc, #104]	@ (80023fc <HAL_TIM_PeriodElapsedCallback+0x414>)
 8002394:	2200      	movs	r2, #0
 8002396:	705a      	strb	r2, [r3, #1]
				TxData_Inv[2] = 13;
 8002398:	4b18      	ldr	r3, [pc, #96]	@ (80023fc <HAL_TIM_PeriodElapsedCallback+0x414>)
 800239a:	220d      	movs	r2, #13
 800239c:	709a      	strb	r2, [r3, #2]
				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 800239e:	4a17      	ldr	r2, [pc, #92]	@ (80023fc <HAL_TIM_PeriodElapsedCallback+0x414>)
 80023a0:	4913      	ldr	r1, [pc, #76]	@ (80023f0 <HAL_TIM_PeriodElapsedCallback+0x408>)
 80023a2:	4817      	ldr	r0, [pc, #92]	@ (8002400 <HAL_TIM_PeriodElapsedCallback+0x418>)
 80023a4:	f006 fc2b 	bl	8008bfe <HAL_FDCAN_AddMessageToTxFifoQ>

			case 13:
				print("state: shutdown");
 80023a8:	481b      	ldr	r0, [pc, #108]	@ (8002418 <HAL_TIM_PeriodElapsedCallback+0x430>)
 80023aa:	f7ff fb7d 	bl	8001aa8 <print>
				TxHeader_Inv.Identifier = RX_SETPOINT_1;
 80023ae:	4b17      	ldr	r3, [pc, #92]	@ (800240c <HAL_TIM_PeriodElapsedCallback+0x424>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a0f      	ldr	r2, [pc, #60]	@ (80023f0 <HAL_TIM_PeriodElapsedCallback+0x408>)
 80023b4:	6013      	str	r3, [r2, #0]
				TxHeader_Inv.DataLength = 3;
 80023b6:	4b0e      	ldr	r3, [pc, #56]	@ (80023f0 <HAL_TIM_PeriodElapsedCallback+0x408>)
 80023b8:	2203      	movs	r2, #3
 80023ba:	60da      	str	r2, [r3, #12]
				TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 80023bc:	4b0c      	ldr	r3, [pc, #48]	@ (80023f0 <HAL_TIM_PeriodElapsedCallback+0x408>)
 80023be:	2200      	movs	r2, #0
 80023c0:	605a      	str	r2, [r3, #4]

				TxData_Inv[0] = 0x0;
 80023c2:	4b0e      	ldr	r3, [pc, #56]	@ (80023fc <HAL_TIM_PeriodElapsedCallback+0x414>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	701a      	strb	r2, [r3, #0]
				TxData_Inv[1] = 0x0;
 80023c8:	4b0c      	ldr	r3, [pc, #48]	@ (80023fc <HAL_TIM_PeriodElapsedCallback+0x414>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	705a      	strb	r2, [r3, #1]
				TxData_Inv[2] = 0x1;
 80023ce:	4b0b      	ldr	r3, [pc, #44]	@ (80023fc <HAL_TIM_PeriodElapsedCallback+0x414>)
 80023d0:	2201      	movs	r2, #1
 80023d2:	709a      	strb	r2, [r3, #2]
				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 80023d4:	4a09      	ldr	r2, [pc, #36]	@ (80023fc <HAL_TIM_PeriodElapsedCallback+0x414>)
 80023d6:	4906      	ldr	r1, [pc, #24]	@ (80023f0 <HAL_TIM_PeriodElapsedCallback+0x408>)
 80023d8:	4809      	ldr	r0, [pc, #36]	@ (8002400 <HAL_TIM_PeriodElapsedCallback+0x418>)
 80023da:	f006 fc10 	bl	8008bfe <HAL_FDCAN_AddMessageToTxFifoQ>


				break;
 80023de:	bf00      	nop
			}
		}
#endif
	}
}
 80023e0:	bf00      	nop
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	080147b0 	.word	0x080147b0
 80023ec:	240007c8 	.word	0x240007c8
 80023f0:	240006b8 	.word	0x240006b8
 80023f4:	240007c2 	.word	0x240007c2
 80023f8:	240007c3 	.word	0x240007c3
 80023fc:	24000778 	.word	0x24000778
 8002400:	24000204 	.word	0x24000204
 8002404:	080147c0 	.word	0x080147c0
 8002408:	2400093a 	.word	0x2400093a
 800240c:	24000000 	.word	0x24000000
 8002410:	080147d4 	.word	0x080147d4
 8002414:	2400093b 	.word	0x2400093b
 8002418:	080147e8 	.word	0x080147e8

0800241c <tel_build_packet>:

// Packs 8 floats (32 bytes). f[0] is the "frame ID".
static void tel_build_packet(float f[8]) {
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
    memset(f, 0, 8*sizeof(float));
 8002424:	2220      	movs	r2, #32
 8002426:	2100      	movs	r1, #0
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f011 fbaf 	bl	8013b8c <memset>

#if TEL_USE_DUMMY
    static uint16_t ids[] = {0x610,0x600,0x630,0x640,0x650,0x670,0x660,0x680};
    static uint8_t idx = 0; if (++idx >= sizeof(ids)/sizeof(ids[0])) idx = 0;
 800242e:	4b2f      	ldr	r3, [pc, #188]	@ (80024ec <tel_build_packet+0xd0>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	3301      	adds	r3, #1
 8002434:	b2da      	uxtb	r2, r3
 8002436:	4b2d      	ldr	r3, [pc, #180]	@ (80024ec <tel_build_packet+0xd0>)
 8002438:	701a      	strb	r2, [r3, #0]
 800243a:	4b2c      	ldr	r3, [pc, #176]	@ (80024ec <tel_build_packet+0xd0>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	2b07      	cmp	r3, #7
 8002440:	d902      	bls.n	8002448 <tel_build_packet+0x2c>
 8002442:	4b2a      	ldr	r3, [pc, #168]	@ (80024ec <tel_build_packet+0xd0>)
 8002444:	2200      	movs	r2, #0
 8002446:	701a      	strb	r2, [r3, #0]

    f[0] = (float)ids[idx];
 8002448:	4b28      	ldr	r3, [pc, #160]	@ (80024ec <tel_build_packet+0xd0>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	461a      	mov	r2, r3
 800244e:	4b28      	ldr	r3, [pc, #160]	@ (80024f0 <tel_build_packet+0xd4>)
 8002450:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002454:	ee07 3a90 	vmov	s15, r3
 8002458:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	edc3 7a00 	vstr	s15, [r3]
    f[1] = (float)inv_dc_bus_voltage;
 8002462:	4b24      	ldr	r3, [pc, #144]	@ (80024f4 <tel_build_packet+0xd8>)
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	3304      	adds	r3, #4
 800246a:	ee07 2a90 	vmov	s15, r2
 800246e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002472:	edc3 7a00 	vstr	s15, [r3]
    f[2] = (float)e_machine_rpm;
 8002476:	4b20      	ldr	r3, [pc, #128]	@ (80024f8 <tel_build_packet+0xdc>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	3308      	adds	r3, #8
 800247e:	ee07 2a90 	vmov	s15, r2
 8002482:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002486:	edc3 7a00 	vstr	s15, [r3]
    f[3] = (float)torque_total;
 800248a:	4b1c      	ldr	r3, [pc, #112]	@ (80024fc <tel_build_packet+0xe0>)
 800248c:	881a      	ldrh	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	330c      	adds	r3, #12
 8002492:	ee07 2a90 	vmov	s15, r2
 8002496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800249a:	edc3 7a00 	vstr	s15, [r3]
    f[4] = (float)v_celda_min;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3310      	adds	r3, #16
 80024a2:	4a17      	ldr	r2, [pc, #92]	@ (8002500 <tel_build_packet+0xe4>)
 80024a4:	6812      	ldr	r2, [r2, #0]
 80024a6:	601a      	str	r2, [r3, #0]
    f[5] = (float)s1_aceleracion;
 80024a8:	4b16      	ldr	r3, [pc, #88]	@ (8002504 <tel_build_packet+0xe8>)
 80024aa:	881a      	ldrh	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3314      	adds	r3, #20
 80024b0:	ee07 2a90 	vmov	s15, r2
 80024b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024b8:	edc3 7a00 	vstr	s15, [r3]
    f[6] = (float)s2_aceleracion;
 80024bc:	4b12      	ldr	r3, [pc, #72]	@ (8002508 <tel_build_packet+0xec>)
 80024be:	881a      	ldrh	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3318      	adds	r3, #24
 80024c4:	ee07 2a90 	vmov	s15, r2
 80024c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024cc:	edc3 7a00 	vstr	s15, [r3]
    f[7] = (float)state;
 80024d0:	4b0e      	ldr	r3, [pc, #56]	@ (800250c <tel_build_packet+0xf0>)
 80024d2:	781a      	ldrb	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	331c      	adds	r3, #28
 80024d8:	ee07 2a90 	vmov	s15, r2
 80024dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024e0:	edc3 7a00 	vstr	s15, [r3]
    f[4] = (float)torque_total;
    f[5] = (float)v_celda_min;
    f[6] = (float)s1_aceleracion;
    f[7] = (float)s2_aceleracion;
#endif
}
 80024e4:	bf00      	nop
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	2400094c 	.word	0x2400094c
 80024f0:	24000014 	.word	0x24000014
 80024f4:	240007a4 	.word	0x240007a4
 80024f8:	240007a8 	.word	0x240007a8
 80024fc:	240007c0 	.word	0x240007c0
 8002500:	24000010 	.word	0x24000010
 8002504:	240007b2 	.word	0x240007b2
 8002508:	240007b4 	.word	0x240007b4
 800250c:	240007ca 	.word	0x240007ca

08002510 <tel_send_now>:

static void tel_send_now(void) {
 8002510:	b580      	push	{r7, lr}
 8002512:	b0b6      	sub	sp, #216	@ 0xd8
 8002514:	af02      	add	r7, sp, #8
    float pkt[8];
    tel_build_packet(pkt);
 8002516:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff ff7e 	bl	800241c <tel_build_packet>

    // debug: print exactly what we'll TX
    char msg[160];
    int ent, dec;
    snprintf(msg, sizeof(msg), "\r\n[TX] ID: 0x%X", (uint16_t)pkt[0]);
 8002520:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8002524:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002528:	ee17 3a90 	vmov	r3, s15
 800252c:	b29b      	uxth	r3, r3
 800252e:	4638      	mov	r0, r7
 8002530:	4a5a      	ldr	r2, [pc, #360]	@ (800269c <tel_send_now+0x18c>)
 8002532:	21a0      	movs	r1, #160	@ 0xa0
 8002534:	f011 fad2 	bl	8013adc <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002538:	463b      	mov	r3, r7
 800253a:	4618      	mov	r0, r3
 800253c:	f7fd fee8 	bl	8000310 <strlen>
 8002540:	4603      	mov	r3, r0
 8002542:	b29a      	uxth	r2, r3
 8002544:	4639      	mov	r1, r7
 8002546:	f04f 33ff 	mov.w	r3, #4294967295
 800254a:	4855      	ldr	r0, [pc, #340]	@ (80026a0 <tel_send_now+0x190>)
 800254c:	f00f f83a 	bl	80115c4 <HAL_UART_Transmit>
    for (int j=1; j<8; ++j) {
 8002550:	2301      	movs	r3, #1
 8002552:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002556:	e04e      	b.n	80025f6 <tel_send_now+0xe6>
        ent = (int)pkt[j];
 8002558:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	33d0      	adds	r3, #208	@ 0xd0
 8002560:	443b      	add	r3, r7
 8002562:	3b30      	subs	r3, #48	@ 0x30
 8002564:	edd3 7a00 	vldr	s15, [r3]
 8002568:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800256c:	ee17 3a90 	vmov	r3, s15
 8002570:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
        dec = (int)((pkt[j] - ent) * 100); if (dec < 0) dec = -dec;
 8002574:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	33d0      	adds	r3, #208	@ 0xd0
 800257c:	443b      	add	r3, r7
 800257e:	3b30      	subs	r3, #48	@ 0x30
 8002580:	ed93 7a00 	vldr	s14, [r3]
 8002584:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002588:	ee07 3a90 	vmov	s15, r3
 800258c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002590:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002594:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 80026a4 <tel_send_now+0x194>
 8002598:	ee67 7a87 	vmul.f32	s15, s15, s14
 800259c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025a0:	ee17 3a90 	vmov	r3, s15
 80025a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80025a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	da04      	bge.n	80025ba <tel_send_now+0xaa>
 80025b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80025b4:	425b      	negs	r3, r3
 80025b6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        snprintf(msg, sizeof(msg), ", V%d:%d.%02d", j, ent, dec);
 80025ba:	4638      	mov	r0, r7
 80025bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80025c0:	9301      	str	r3, [sp, #4]
 80025c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80025cc:	4a36      	ldr	r2, [pc, #216]	@ (80026a8 <tel_send_now+0x198>)
 80025ce:	21a0      	movs	r1, #160	@ 0xa0
 80025d0:	f011 fa84 	bl	8013adc <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80025d4:	463b      	mov	r3, r7
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7fd fe9a 	bl	8000310 <strlen>
 80025dc:	4603      	mov	r3, r0
 80025de:	b29a      	uxth	r2, r3
 80025e0:	4639      	mov	r1, r7
 80025e2:	f04f 33ff 	mov.w	r3, #4294967295
 80025e6:	482e      	ldr	r0, [pc, #184]	@ (80026a0 <tel_send_now+0x190>)
 80025e8:	f00e ffec 	bl	80115c4 <HAL_UART_Transmit>
    for (int j=1; j<8; ++j) {
 80025ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80025f0:	3301      	adds	r3, #1
 80025f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80025f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80025fa:	2b07      	cmp	r3, #7
 80025fc:	ddac      	ble.n	8002558 <tel_send_now+0x48>
    }
    HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 80025fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002602:	2202      	movs	r2, #2
 8002604:	4929      	ldr	r1, [pc, #164]	@ (80026ac <tel_send_now+0x19c>)
 8002606:	4826      	ldr	r0, [pc, #152]	@ (80026a0 <tel_send_now+0x190>)
 8002608:	f00e ffdc 	bl	80115c4 <HAL_UART_Transmit>

    // TX over nRF24 (32 bytes)
    uint8_t ok = NRF24_Transmit((uint8_t*)pkt);
 800260c:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8002610:	4618      	mov	r0, r3
 8002612:	f000 fa3f 	bl	8002a94 <NRF24_Transmit>
 8002616:	4603      	mov	r3, r0
 8002618:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
    uint8_t st = nrf24_ReadReg(STATUS);
 800261c:	2007      	movs	r0, #7
 800261e:	f000 f8e9 	bl	80027f4 <nrf24_ReadReg>
 8002622:	4603      	mov	r3, r0
 8002624:	f887 30c6 	strb.w	r3, [r7, #198]	@ 0xc6
    uint8_t ob = nrf24_ReadReg(OBSERVE_TX);
 8002628:	2008      	movs	r0, #8
 800262a:	f000 f8e3 	bl	80027f4 <nrf24_ReadReg>
 800262e:	4603      	mov	r3, r0
 8002630:	f887 30c5 	strb.w	r3, [r7, #197]	@ 0xc5

    snprintf(msg, sizeof(msg), ok ? "[TX] OK " : "[TX] FAIL ");
 8002634:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <tel_send_now+0x130>
 800263c:	4a1c      	ldr	r2, [pc, #112]	@ (80026b0 <tel_send_now+0x1a0>)
 800263e:	e000      	b.n	8002642 <tel_send_now+0x132>
 8002640:	4a1c      	ldr	r2, [pc, #112]	@ (80026b4 <tel_send_now+0x1a4>)
 8002642:	463b      	mov	r3, r7
 8002644:	21a0      	movs	r1, #160	@ 0xa0
 8002646:	4618      	mov	r0, r3
 8002648:	f011 fa48 	bl	8013adc <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800264c:	463b      	mov	r3, r7
 800264e:	4618      	mov	r0, r3
 8002650:	f7fd fe5e 	bl	8000310 <strlen>
 8002654:	4603      	mov	r3, r0
 8002656:	b29a      	uxth	r2, r3
 8002658:	4639      	mov	r1, r7
 800265a:	f04f 33ff 	mov.w	r3, #4294967295
 800265e:	4810      	ldr	r0, [pc, #64]	@ (80026a0 <tel_send_now+0x190>)
 8002660:	f00e ffb0 	bl	80115c4 <HAL_UART_Transmit>
    snprintf(msg, sizeof(msg), "STATUS=%02X OBSERVE_TX=%02X\r\n", st, ob);
 8002664:	f897 20c6 	ldrb.w	r2, [r7, #198]	@ 0xc6
 8002668:	f897 30c5 	ldrb.w	r3, [r7, #197]	@ 0xc5
 800266c:	4638      	mov	r0, r7
 800266e:	9300      	str	r3, [sp, #0]
 8002670:	4613      	mov	r3, r2
 8002672:	4a11      	ldr	r2, [pc, #68]	@ (80026b8 <tel_send_now+0x1a8>)
 8002674:	21a0      	movs	r1, #160	@ 0xa0
 8002676:	f011 fa31 	bl	8013adc <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800267a:	463b      	mov	r3, r7
 800267c:	4618      	mov	r0, r3
 800267e:	f7fd fe47 	bl	8000310 <strlen>
 8002682:	4603      	mov	r3, r0
 8002684:	b29a      	uxth	r2, r3
 8002686:	4639      	mov	r1, r7
 8002688:	f04f 33ff 	mov.w	r3, #4294967295
 800268c:	4804      	ldr	r0, [pc, #16]	@ (80026a0 <tel_send_now+0x190>)
 800268e:	f00e ff99 	bl	80115c4 <HAL_UART_Transmit>
}
 8002692:	bf00      	nop
 8002694:	37d0      	adds	r7, #208	@ 0xd0
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	080147f8 	.word	0x080147f8
 80026a0:	24000614 	.word	0x24000614
 80026a4:	42c80000 	.word	0x42c80000
 80026a8:	08014808 	.word	0x08014808
 80026ac:	08014818 	.word	0x08014818
 80026b0:	0801481c 	.word	0x0801481c
 80026b4:	08014828 	.word	0x08014828
 80026b8:	08014834 	.word	0x08014834

080026bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026c0:	b672      	cpsid	i
}
 80026c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80026c4:	bf00      	nop
 80026c6:	e7fd      	b.n	80026c4 <Error_Handler+0x8>

080026c8 <CS_Select>:
#define NRF24_CE_PIN     GPIO_PIN_6
#define NRF24_CSN_PORT   GPIOG
#define NRF24_CSN_PIN    GPIO_PIN_3

/* ==== Local helpers ====================================================== */
static inline void CS_Select(void)   { HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET); }
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	2200      	movs	r2, #0
 80026ce:	2108      	movs	r1, #8
 80026d0:	4802      	ldr	r0, [pc, #8]	@ (80026dc <CS_Select+0x14>)
 80026d2:	f007 fb97 	bl	8009e04 <HAL_GPIO_WritePin>
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	58021800 	.word	0x58021800

080026e0 <CS_UnSelect>:
static inline void CS_UnSelect(void) { HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);   }
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	2201      	movs	r2, #1
 80026e6:	2108      	movs	r1, #8
 80026e8:	4802      	ldr	r0, [pc, #8]	@ (80026f4 <CS_UnSelect+0x14>)
 80026ea:	f007 fb8b 	bl	8009e04 <HAL_GPIO_WritePin>
 80026ee:	bf00      	nop
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	58021800 	.word	0x58021800

080026f8 <CE_Enable>:
static inline void CE_Enable(void)   { HAL_GPIO_WritePin(NRF24_CE_PORT,  NRF24_CE_PIN,  GPIO_PIN_SET);   }
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	2201      	movs	r2, #1
 80026fe:	2140      	movs	r1, #64	@ 0x40
 8002700:	4802      	ldr	r0, [pc, #8]	@ (800270c <CE_Enable+0x14>)
 8002702:	f007 fb7f 	bl	8009e04 <HAL_GPIO_WritePin>
 8002706:	bf00      	nop
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	58020800 	.word	0x58020800

08002710 <CE_Disable>:
static inline void CE_Disable(void)  { HAL_GPIO_WritePin(NRF24_CE_PORT,  NRF24_CE_PIN,  GPIO_PIN_RESET); }
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
 8002714:	2200      	movs	r2, #0
 8002716:	2140      	movs	r1, #64	@ 0x40
 8002718:	4802      	ldr	r0, [pc, #8]	@ (8002724 <CE_Disable+0x14>)
 800271a:	f007 fb73 	bl	8009e04 <HAL_GPIO_WritePin>
 800271e:	bf00      	nop
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	58020800 	.word	0x58020800

08002728 <uputs>:

static void uputs(const char *s){ HAL_UART_Transmit(NRF24_UART, (uint8_t*)s, strlen(s), HAL_MAX_DELAY); }
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f7fd fded 	bl	8000310 <strlen>
 8002736:	4603      	mov	r3, r0
 8002738:	b29a      	uxth	r2, r3
 800273a:	f04f 33ff 	mov.w	r3, #4294967295
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	4803      	ldr	r0, [pc, #12]	@ (8002750 <uputs+0x28>)
 8002742:	f00e ff3f 	bl	80115c4 <HAL_UART_Transmit>
 8002746:	bf00      	nop
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	24000614 	.word	0x24000614

08002754 <nrf24_WriteReg>:
#define T_SHORT   100U
#define T_LONG   1000U

/* ==== Low-level SPI access ============================================== */
void nrf24_WriteReg(uint8_t reg, uint8_t val)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	4603      	mov	r3, r0
 800275c:	460a      	mov	r2, r1
 800275e:	71fb      	strb	r3, [r7, #7]
 8002760:	4613      	mov	r3, r2
 8002762:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];
    buf[0] = (uint8_t)(W_REGISTER | (reg & REGISTER_MASK));
 8002764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002768:	f003 031f 	and.w	r3, r3, #31
 800276c:	b25b      	sxtb	r3, r3
 800276e:	f043 0320 	orr.w	r3, r3, #32
 8002772:	b25b      	sxtb	r3, r3
 8002774:	b2db      	uxtb	r3, r3
 8002776:	733b      	strb	r3, [r7, #12]
    buf[1] = val;
 8002778:	79bb      	ldrb	r3, [r7, #6]
 800277a:	737b      	strb	r3, [r7, #13]
    CS_Select();
 800277c:	f7ff ffa4 	bl	80026c8 <CS_Select>
    HAL_SPI_Transmit(NRF24_SPI, buf, 2, T_SHORT);
 8002780:	f107 010c 	add.w	r1, r7, #12
 8002784:	2364      	movs	r3, #100	@ 0x64
 8002786:	2202      	movs	r2, #2
 8002788:	4804      	ldr	r0, [pc, #16]	@ (800279c <nrf24_WriteReg+0x48>)
 800278a:	f00c fc63 	bl	800f054 <HAL_SPI_Transmit>
    CS_UnSelect();
 800278e:	f7ff ffa7 	bl	80026e0 <CS_UnSelect>
}
 8002792:	bf00      	nop
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	24000460 	.word	0x24000460

080027a0 <nrf24_WriteRegMulti>:
void nrf24_WriteRegMulti(uint8_t reg, const uint8_t *data, int size)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
 80027ac:	73fb      	strb	r3, [r7, #15]
    uint8_t cmd = (uint8_t)(W_REGISTER | (reg & REGISTER_MASK));
 80027ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027b2:	f003 031f 	and.w	r3, r3, #31
 80027b6:	b25b      	sxtb	r3, r3
 80027b8:	f043 0320 	orr.w	r3, r3, #32
 80027bc:	b25b      	sxtb	r3, r3
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	75fb      	strb	r3, [r7, #23]
    CS_Select();
 80027c2:	f7ff ff81 	bl	80026c8 <CS_Select>
    HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, T_SHORT);
 80027c6:	f107 0117 	add.w	r1, r7, #23
 80027ca:	2364      	movs	r3, #100	@ 0x64
 80027cc:	2201      	movs	r2, #1
 80027ce:	4808      	ldr	r0, [pc, #32]	@ (80027f0 <nrf24_WriteRegMulti+0x50>)
 80027d0:	f00c fc40 	bl	800f054 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(NRF24_SPI, (uint8_t*)data, size, T_LONG);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027dc:	68b9      	ldr	r1, [r7, #8]
 80027de:	4804      	ldr	r0, [pc, #16]	@ (80027f0 <nrf24_WriteRegMulti+0x50>)
 80027e0:	f00c fc38 	bl	800f054 <HAL_SPI_Transmit>
    CS_UnSelect();
 80027e4:	f7ff ff7c 	bl	80026e0 <CS_UnSelect>
}
 80027e8:	bf00      	nop
 80027ea:	3718      	adds	r7, #24
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	24000460 	.word	0x24000460

080027f4 <nrf24_ReadReg>:

 uint8_t nrf24_ReadReg(uint8_t reg)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	4603      	mov	r3, r0
 80027fc:	71fb      	strb	r3, [r7, #7]
    uint8_t cmd = (uint8_t)(R_REGISTER | (reg & REGISTER_MASK));
 80027fe:	79fb      	ldrb	r3, [r7, #7]
 8002800:	f003 031f 	and.w	r3, r3, #31
 8002804:	b2db      	uxtb	r3, r3
 8002806:	73fb      	strb	r3, [r7, #15]
    uint8_t val = 0;
 8002808:	2300      	movs	r3, #0
 800280a:	73bb      	strb	r3, [r7, #14]
    CS_Select();
 800280c:	f7ff ff5c 	bl	80026c8 <CS_Select>
    HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, T_SHORT);
 8002810:	f107 010f 	add.w	r1, r7, #15
 8002814:	2364      	movs	r3, #100	@ 0x64
 8002816:	2201      	movs	r2, #1
 8002818:	4808      	ldr	r0, [pc, #32]	@ (800283c <nrf24_ReadReg+0x48>)
 800281a:	f00c fc1b 	bl	800f054 <HAL_SPI_Transmit>
    HAL_SPI_Receive (NRF24_SPI, &val, 1, T_SHORT);
 800281e:	f107 010e 	add.w	r1, r7, #14
 8002822:	2364      	movs	r3, #100	@ 0x64
 8002824:	2201      	movs	r2, #1
 8002826:	4805      	ldr	r0, [pc, #20]	@ (800283c <nrf24_ReadReg+0x48>)
 8002828:	f00c fe02 	bl	800f430 <HAL_SPI_Receive>
    CS_UnSelect();
 800282c:	f7ff ff58 	bl	80026e0 <CS_UnSelect>
    return val;
 8002830:	7bbb      	ldrb	r3, [r7, #14]
}
 8002832:	4618      	mov	r0, r3
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	24000460 	.word	0x24000460

08002840 <nrf24_ReadRegMulti>:

static void nrf24_ReadRegMulti(uint8_t reg, uint8_t *data, int size)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
 800284c:	73fb      	strb	r3, [r7, #15]
    uint8_t cmd = (uint8_t)(R_REGISTER | (reg & REGISTER_MASK));
 800284e:	7bfb      	ldrb	r3, [r7, #15]
 8002850:	f003 031f 	and.w	r3, r3, #31
 8002854:	b2db      	uxtb	r3, r3
 8002856:	75fb      	strb	r3, [r7, #23]
    CS_Select();
 8002858:	f7ff ff36 	bl	80026c8 <CS_Select>
    HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, T_SHORT);
 800285c:	f107 0117 	add.w	r1, r7, #23
 8002860:	2364      	movs	r3, #100	@ 0x64
 8002862:	2201      	movs	r2, #1
 8002864:	4808      	ldr	r0, [pc, #32]	@ (8002888 <nrf24_ReadRegMulti+0x48>)
 8002866:	f00c fbf5 	bl	800f054 <HAL_SPI_Transmit>
    HAL_SPI_Receive (NRF24_SPI, data, size, T_LONG);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	b29a      	uxth	r2, r3
 800286e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002872:	68b9      	ldr	r1, [r7, #8]
 8002874:	4804      	ldr	r0, [pc, #16]	@ (8002888 <nrf24_ReadRegMulti+0x48>)
 8002876:	f00c fddb 	bl	800f430 <HAL_SPI_Receive>
    CS_UnSelect();
 800287a:	f7ff ff31 	bl	80026e0 <CS_UnSelect>
}
 800287e:	bf00      	nop
 8002880:	3718      	adds	r7, #24
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	24000460 	.word	0x24000460

0800288c <nrf24_SendCmd>:

static void nrf24_SendCmd(uint8_t cmd)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	71fb      	strb	r3, [r7, #7]
    CS_Select();
 8002896:	f7ff ff17 	bl	80026c8 <CS_Select>
    HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, T_SHORT);
 800289a:	1df9      	adds	r1, r7, #7
 800289c:	2364      	movs	r3, #100	@ 0x64
 800289e:	2201      	movs	r2, #1
 80028a0:	4804      	ldr	r0, [pc, #16]	@ (80028b4 <nrf24_SendCmd+0x28>)
 80028a2:	f00c fbd7 	bl	800f054 <HAL_SPI_Transmit>
    CS_UnSelect();
 80028a6:	f7ff ff1b 	bl	80026e0 <CS_UnSelect>
}
 80028aa:	bf00      	nop
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	24000460 	.word	0x24000460

080028b8 <nrf24_reset>:

/* ==== Soft reset (subset) =============================================== */
static void nrf24_reset(uint8_t reg)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	71fb      	strb	r3, [r7, #7]
    if (reg == STATUS) {
 80028c2:	79fb      	ldrb	r3, [r7, #7]
 80028c4:	2b07      	cmp	r3, #7
 80028c6:	d104      	bne.n	80028d2 <nrf24_reset+0x1a>
        /* clear IRQs (RX_DR | TX_DS | MAX_RT) */
        nrf24_WriteReg(STATUS, 0x70);
 80028c8:	2170      	movs	r1, #112	@ 0x70
 80028ca:	2007      	movs	r0, #7
 80028cc:	f7ff ff42 	bl	8002754 <nrf24_WriteReg>
        nrf24_WriteReg(RX_PW_P2, 0);
        nrf24_WriteReg(RX_PW_P3, 0);
        nrf24_WriteReg(RX_PW_P4, 0);
        nrf24_WriteReg(RX_PW_P5, 0);
    }
}
 80028d0:	e080      	b.n	80029d4 <nrf24_reset+0x11c>
    else if (reg == FIFO_STATUS) {
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	2b17      	cmp	r3, #23
 80028d6:	d104      	bne.n	80028e2 <nrf24_reset+0x2a>
        nrf24_WriteReg(FIFO_STATUS, 0x11);
 80028d8:	2111      	movs	r1, #17
 80028da:	2017      	movs	r0, #23
 80028dc:	f7ff ff3a 	bl	8002754 <nrf24_WriteReg>
}
 80028e0:	e078      	b.n	80029d4 <nrf24_reset+0x11c>
        nrf24_WriteReg(CONFIG,      0x08);  /* CRC off, PWR_DOWN */
 80028e2:	2108      	movs	r1, #8
 80028e4:	2000      	movs	r0, #0
 80028e6:	f7ff ff35 	bl	8002754 <nrf24_WriteReg>
        nrf24_WriteReg(EN_AA,       0x00);  /* no Auto-ACK */
 80028ea:	2100      	movs	r1, #0
 80028ec:	2001      	movs	r0, #1
 80028ee:	f7ff ff31 	bl	8002754 <nrf24_WriteReg>
        nrf24_WriteReg(EN_RXADDR,   0x03);  /* P0,P1 enabled */
 80028f2:	2103      	movs	r1, #3
 80028f4:	2002      	movs	r0, #2
 80028f6:	f7ff ff2d 	bl	8002754 <nrf24_WriteReg>
        nrf24_WriteReg(SETUP_AW,    0x03);  /* 5-byte addr */
 80028fa:	2103      	movs	r1, #3
 80028fc:	2003      	movs	r0, #3
 80028fe:	f7ff ff29 	bl	8002754 <nrf24_WriteReg>
        nrf24_WriteReg(SETUP_RETR,  0x00);  /* no retries */
 8002902:	2100      	movs	r1, #0
 8002904:	2004      	movs	r0, #4
 8002906:	f7ff ff25 	bl	8002754 <nrf24_WriteReg>
        nrf24_WriteReg(RF_CH,       76);    /* ch=76 */
 800290a:	214c      	movs	r1, #76	@ 0x4c
 800290c:	2005      	movs	r0, #5
 800290e:	f7ff ff21 	bl	8002754 <nrf24_WriteReg>
        nrf24_WriteReg(RF_SETUP,    0x06);  /* 1 Mbps, 0 dBm */
 8002912:	2106      	movs	r1, #6
 8002914:	2006      	movs	r0, #6
 8002916:	f7ff ff1d 	bl	8002754 <nrf24_WriteReg>
        nrf24_WriteReg(FEATURE,     0x00);  /* no dyn payloads */
 800291a:	2100      	movs	r1, #0
 800291c:	201d      	movs	r0, #29
 800291e:	f7ff ff19 	bl	8002754 <nrf24_WriteReg>
        nrf24_WriteReg(DYNPD,       0x00);
 8002922:	2100      	movs	r1, #0
 8002924:	201c      	movs	r0, #28
 8002926:	f7ff ff15 	bl	8002754 <nrf24_WriteReg>
        nrf24_WriteReg(FIFO_STATUS, 0x11);
 800292a:	2111      	movs	r1, #17
 800292c:	2017      	movs	r0, #23
 800292e:	f7ff ff11 	bl	8002754 <nrf24_WriteReg>
        nrf24_WriteReg(STATUS,      0x70);  /* clear IRQs */
 8002932:	2170      	movs	r1, #112	@ 0x70
 8002934:	2007      	movs	r0, #7
 8002936:	f7ff ff0d 	bl	8002754 <nrf24_WriteReg>
        uint8_t def0[5] = {0xE7,0xE7,0xE7,0xE7,0xE7};
 800293a:	4a28      	ldr	r2, [pc, #160]	@ (80029dc <nrf24_reset+0x124>)
 800293c:	f107 0310 	add.w	r3, r7, #16
 8002940:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002944:	6018      	str	r0, [r3, #0]
 8002946:	3304      	adds	r3, #4
 8002948:	7019      	strb	r1, [r3, #0]
        uint8_t def1[5] = {0xC2,0xC2,0xC2,0xC2,0xC2};
 800294a:	4a25      	ldr	r2, [pc, #148]	@ (80029e0 <nrf24_reset+0x128>)
 800294c:	f107 0308 	add.w	r3, r7, #8
 8002950:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002954:	6018      	str	r0, [r3, #0]
 8002956:	3304      	adds	r3, #4
 8002958:	7019      	strb	r1, [r3, #0]
        nrf24_WriteRegMulti(RX_ADDR_P0, def0, 5);
 800295a:	f107 0310 	add.w	r3, r7, #16
 800295e:	2205      	movs	r2, #5
 8002960:	4619      	mov	r1, r3
 8002962:	200a      	movs	r0, #10
 8002964:	f7ff ff1c 	bl	80027a0 <nrf24_WriteRegMulti>
        nrf24_WriteRegMulti(RX_ADDR_P1, def1, 5);
 8002968:	f107 0308 	add.w	r3, r7, #8
 800296c:	2205      	movs	r2, #5
 800296e:	4619      	mov	r1, r3
 8002970:	200b      	movs	r0, #11
 8002972:	f7ff ff15 	bl	80027a0 <nrf24_WriteRegMulti>
        nrf24_WriteReg    (RX_ADDR_P2, 0xC3);
 8002976:	21c3      	movs	r1, #195	@ 0xc3
 8002978:	200c      	movs	r0, #12
 800297a:	f7ff feeb 	bl	8002754 <nrf24_WriteReg>
        nrf24_WriteReg    (RX_ADDR_P3, 0xC4);
 800297e:	21c4      	movs	r1, #196	@ 0xc4
 8002980:	200d      	movs	r0, #13
 8002982:	f7ff fee7 	bl	8002754 <nrf24_WriteReg>
        nrf24_WriteReg    (RX_ADDR_P4, 0xC5);
 8002986:	21c5      	movs	r1, #197	@ 0xc5
 8002988:	200e      	movs	r0, #14
 800298a:	f7ff fee3 	bl	8002754 <nrf24_WriteReg>
        nrf24_WriteReg    (RX_ADDR_P5, 0xC6);
 800298e:	21c6      	movs	r1, #198	@ 0xc6
 8002990:	200f      	movs	r0, #15
 8002992:	f7ff fedf 	bl	8002754 <nrf24_WriteReg>
        nrf24_WriteRegMulti(TX_ADDR,    def0, 5);
 8002996:	f107 0310 	add.w	r3, r7, #16
 800299a:	2205      	movs	r2, #5
 800299c:	4619      	mov	r1, r3
 800299e:	2010      	movs	r0, #16
 80029a0:	f7ff fefe 	bl	80027a0 <nrf24_WriteRegMulti>
        nrf24_WriteReg(RX_PW_P0, 0);
 80029a4:	2100      	movs	r1, #0
 80029a6:	2011      	movs	r0, #17
 80029a8:	f7ff fed4 	bl	8002754 <nrf24_WriteReg>
        nrf24_WriteReg(RX_PW_P1, 0);
 80029ac:	2100      	movs	r1, #0
 80029ae:	2012      	movs	r0, #18
 80029b0:	f7ff fed0 	bl	8002754 <nrf24_WriteReg>
        nrf24_WriteReg(RX_PW_P2, 0);
 80029b4:	2100      	movs	r1, #0
 80029b6:	2013      	movs	r0, #19
 80029b8:	f7ff fecc 	bl	8002754 <nrf24_WriteReg>
        nrf24_WriteReg(RX_PW_P3, 0);
 80029bc:	2100      	movs	r1, #0
 80029be:	2014      	movs	r0, #20
 80029c0:	f7ff fec8 	bl	8002754 <nrf24_WriteReg>
        nrf24_WriteReg(RX_PW_P4, 0);
 80029c4:	2100      	movs	r1, #0
 80029c6:	2015      	movs	r0, #21
 80029c8:	f7ff fec4 	bl	8002754 <nrf24_WriteReg>
        nrf24_WriteReg(RX_PW_P5, 0);
 80029cc:	2100      	movs	r1, #0
 80029ce:	2016      	movs	r0, #22
 80029d0:	f7ff fec0 	bl	8002754 <nrf24_WriteReg>
}
 80029d4:	bf00      	nop
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	08014854 	.word	0x08014854
 80029e0:	0801485c 	.word	0x0801485c

080029e4 <NRF24_Init>:

/* ==== Public API ========================================================= */

void NRF24_Init(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
    CE_Disable();
 80029e8:	f7ff fe92 	bl	8002710 <CE_Disable>
    nrf24_reset(0);
 80029ec:	2000      	movs	r0, #0
 80029ee:	f7ff ff63 	bl	80028b8 <nrf24_reset>

    /* fixed settings for link bring-up */
    nrf24_WriteReg(EN_AA,        0x00);  /* NO ACK */
 80029f2:	2100      	movs	r1, #0
 80029f4:	2001      	movs	r0, #1
 80029f6:	f7ff fead 	bl	8002754 <nrf24_WriteReg>
    nrf24_WriteReg(SETUP_RETR,   0x00);  /* NO retries */
 80029fa:	2100      	movs	r1, #0
 80029fc:	2004      	movs	r0, #4
 80029fe:	f7ff fea9 	bl	8002754 <nrf24_WriteReg>
    nrf24_WriteReg(EN_RXADDR,    0x03);  /* P0,P1 */
 8002a02:	2103      	movs	r1, #3
 8002a04:	2002      	movs	r0, #2
 8002a06:	f7ff fea5 	bl	8002754 <nrf24_WriteReg>
    nrf24_WriteReg(SETUP_AW,     0x03);  /* 5-byte */
 8002a0a:	2103      	movs	r1, #3
 8002a0c:	2003      	movs	r0, #3
 8002a0e:	f7ff fea1 	bl	8002754 <nrf24_WriteReg>
    nrf24_WriteReg(RF_CH,        76);    /* channel 76 */
 8002a12:	214c      	movs	r1, #76	@ 0x4c
 8002a14:	2005      	movs	r0, #5
 8002a16:	f7ff fe9d 	bl	8002754 <nrf24_WriteReg>
    nrf24_WriteReg(RF_SETUP,     0x06);  /* 1 Mbps, 0 dBm */
 8002a1a:	2106      	movs	r1, #6
 8002a1c:	2006      	movs	r0, #6
 8002a1e:	f7ff fe99 	bl	8002754 <nrf24_WriteReg>
    nrf24_WriteReg(FEATURE,      0x00);
 8002a22:	2100      	movs	r1, #0
 8002a24:	201d      	movs	r0, #29
 8002a26:	f7ff fe95 	bl	8002754 <nrf24_WriteReg>
    nrf24_WriteReg(DYNPD,        0x00);
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	201c      	movs	r0, #28
 8002a2e:	f7ff fe91 	bl	8002754 <nrf24_WriteReg>
    nrf24_WriteReg(FIFO_STATUS,  0x11);
 8002a32:	2111      	movs	r1, #17
 8002a34:	2017      	movs	r0, #23
 8002a36:	f7ff fe8d 	bl	8002754 <nrf24_WriteReg>
    nrf24_WriteReg(STATUS,       0x70);  /* clear IRQs */
 8002a3a:	2170      	movs	r1, #112	@ 0x70
 8002a3c:	2007      	movs	r0, #7
 8002a3e:	f7ff fe89 	bl	8002754 <nrf24_WriteReg>

    CE_Enable();    /* power state will be set in TxMode/RxMode */
 8002a42:	f7ff fe59 	bl	80026f8 <CE_Enable>
}
 8002a46:	bf00      	nop
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <NRF24_TxMode>:

void NRF24_TxMode(uint8_t *Address, uint8_t channel)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b084      	sub	sp, #16
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
 8002a52:	460b      	mov	r3, r1
 8002a54:	70fb      	strb	r3, [r7, #3]
    CE_Disable();
 8002a56:	f7ff fe5b 	bl	8002710 <CE_Disable>

    nrf24_WriteReg(RF_CH, channel);
 8002a5a:	78fb      	ldrb	r3, [r7, #3]
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	2005      	movs	r0, #5
 8002a60:	f7ff fe78 	bl	8002754 <nrf24_WriteReg>
    nrf24_WriteRegMulti(TX_ADDR,    Address, 5);
 8002a64:	2205      	movs	r2, #5
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	2010      	movs	r0, #16
 8002a6a:	f7ff fe99 	bl	80027a0 <nrf24_WriteRegMulti>
    nrf24_WriteRegMulti(RX_ADDR_P0, Address, 5);  /* ACK return path if enabled later */
 8002a6e:	2205      	movs	r2, #5
 8002a70:	6879      	ldr	r1, [r7, #4]
 8002a72:	200a      	movs	r0, #10
 8002a74:	f7ff fe94 	bl	80027a0 <nrf24_WriteRegMulti>

    /* CONFIG: PWR_UP(1) | EN_CRC(1) | CRCO(1=16bit) | PRIM_RX(0) */
    uint8_t cfg = (1<<1) | (1<<3) | (1<<2);   /* 0x0E */
 8002a78:	230e      	movs	r3, #14
 8002a7a:	73fb      	strb	r3, [r7, #15]
    nrf24_WriteReg(CONFIG, cfg);
 8002a7c:	7bfb      	ldrb	r3, [r7, #15]
 8002a7e:	4619      	mov	r1, r3
 8002a80:	2000      	movs	r0, #0
 8002a82:	f7ff fe67 	bl	8002754 <nrf24_WriteReg>

    CE_Enable();
 8002a86:	f7ff fe37 	bl	80026f8 <CE_Enable>
}
 8002a8a:	bf00      	nop
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
	...

08002a94 <NRF24_Transmit>:

uint8_t NRF24_Transmit(uint8_t *data)   /* 32 bytes */
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b098      	sub	sp, #96	@ 0x60
 8002a98:	af02      	add	r7, sp, #8
 8002a9a:	6078      	str	r0, [r7, #4]
    uint8_t cmd, status;
    uint32_t t0;

    CE_Disable();
 8002a9c:	f7ff fe38 	bl	8002710 <CE_Disable>

    /* load TX FIFO */
    cmd = W_TX_PAYLOAD;
 8002aa0:	23a0      	movs	r3, #160	@ 0xa0
 8002aa2:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
    CS_Select();
 8002aa6:	f7ff fe0f 	bl	80026c8 <CS_Select>
    HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, T_SHORT);
 8002aaa:	f107 0151 	add.w	r1, r7, #81	@ 0x51
 8002aae:	2364      	movs	r3, #100	@ 0x64
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	483a      	ldr	r0, [pc, #232]	@ (8002b9c <NRF24_Transmit+0x108>)
 8002ab4:	f00c face 	bl	800f054 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(NRF24_SPI, data, 32, T_LONG);
 8002ab8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002abc:	2220      	movs	r2, #32
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	4836      	ldr	r0, [pc, #216]	@ (8002b9c <NRF24_Transmit+0x108>)
 8002ac2:	f00c fac7 	bl	800f054 <HAL_SPI_Transmit>
    CS_UnSelect();
 8002ac6:	f7ff fe0b 	bl	80026e0 <CS_UnSelect>

    /* pulse CE >= 10us */
    CE_Enable();
 8002aca:	f7ff fe15 	bl	80026f8 <CE_Enable>
    for (volatile int i = 0; i < 400; i++) { __NOP(); }
 8002ace:	2300      	movs	r3, #0
 8002ad0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ad2:	e003      	b.n	8002adc <NRF24_Transmit+0x48>
 8002ad4:	bf00      	nop
 8002ad6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ad8:	3301      	adds	r3, #1
 8002ada:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002adc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ade:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002ae2:	dbf7      	blt.n	8002ad4 <NRF24_Transmit+0x40>
    CE_Disable();
 8002ae4:	f7ff fe14 	bl	8002710 <CE_Disable>

    /* wait for TX_DS or MAX_RT, ~5 ms timeout */
    t0 = HAL_GetTick();
 8002ae8:	f000 ffec 	bl	8003ac4 <HAL_GetTick>
 8002aec:	6578      	str	r0, [r7, #84]	@ 0x54
    do {
        status = nrf24_ReadReg(STATUS);
 8002aee:	2007      	movs	r0, #7
 8002af0:	f7ff fe80 	bl	80027f4 <nrf24_ReadReg>
 8002af4:	4603      	mov	r3, r0
 8002af6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
        if (status & (1<<5)) break; /* TX_DS */
 8002afa:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8002afe:	f003 0320 	and.w	r3, r3, #32
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10d      	bne.n	8002b22 <NRF24_Transmit+0x8e>
        if (status & (1<<4)) break; /* MAX_RT */
 8002b06:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8002b0a:	f003 0310 	and.w	r3, r3, #16
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d109      	bne.n	8002b26 <NRF24_Transmit+0x92>
    } while ((HAL_GetTick() - t0) < 5);
 8002b12:	f000 ffd7 	bl	8003ac4 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b04      	cmp	r3, #4
 8002b1e:	d9e6      	bls.n	8002aee <NRF24_Transmit+0x5a>
 8002b20:	e002      	b.n	8002b28 <NRF24_Transmit+0x94>
        if (status & (1<<5)) break; /* TX_DS */
 8002b22:	bf00      	nop
 8002b24:	e000      	b.n	8002b28 <NRF24_Transmit+0x94>
        if (status & (1<<4)) break; /* MAX_RT */
 8002b26:	bf00      	nop

    /* clear IRQ flags */
    nrf24_WriteReg(STATUS, (1<<5) | (1<<4) | (1<<6));
 8002b28:	2170      	movs	r1, #112	@ 0x70
 8002b2a:	2007      	movs	r0, #7
 8002b2c:	f7ff fe12 	bl	8002754 <nrf24_WriteReg>

    if (status & (1<<4)) {
 8002b30:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8002b34:	f003 0310 	and.w	r3, r3, #16
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d024      	beq.n	8002b86 <NRF24_Transmit+0xf2>
        nrf24_SendCmd(FLUSH_TX);
 8002b3c:	20e1      	movs	r0, #225	@ 0xe1
 8002b3e:	f7ff fea5 	bl	800288c <nrf24_SendCmd>
        char msg[64];
        uint8_t ob = nrf24_ReadReg(OBSERVE_TX);
 8002b42:	2008      	movs	r0, #8
 8002b44:	f7ff fe56 	bl	80027f4 <nrf24_ReadReg>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
        snprintf(msg, sizeof(msg), "[TX] MAX_RT. STATUS=%02X OBSERVE_TX=%02X\r\n", status, ob);
 8002b4e:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 8002b52:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8002b56:	f107 000c 	add.w	r0, r7, #12
 8002b5a:	9300      	str	r3, [sp, #0]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	4a10      	ldr	r2, [pc, #64]	@ (8002ba0 <NRF24_Transmit+0x10c>)
 8002b60:	2140      	movs	r1, #64	@ 0x40
 8002b62:	f010 ffbb 	bl	8013adc <sniprintf>
        HAL_UART_Transmit(NRF24_UART, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002b66:	f107 030c 	add.w	r3, r7, #12
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7fd fbd0 	bl	8000310 <strlen>
 8002b70:	4603      	mov	r3, r0
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	f107 010c 	add.w	r1, r7, #12
 8002b78:	f04f 33ff 	mov.w	r3, #4294967295
 8002b7c:	4809      	ldr	r0, [pc, #36]	@ (8002ba4 <NRF24_Transmit+0x110>)
 8002b7e:	f00e fd21 	bl	80115c4 <HAL_UART_Transmit>
        return 0;
 8002b82:	2300      	movs	r3, #0
 8002b84:	e006      	b.n	8002b94 <NRF24_Transmit+0x100>
    }
    return (status & (1<<5)) ? 1 : 0;
 8002b86:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8002b8a:	115b      	asrs	r3, r3, #5
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	b2db      	uxtb	r3, r3
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3758      	adds	r7, #88	@ 0x58
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	24000460 	.word	0x24000460
 8002ba0:	08014864 	.word	0x08014864
 8002ba4:	24000614 	.word	0x24000614

08002ba8 <hex1>:

    for (int i = 29; i < 38; i++) data[i] = nrf24_ReadReg(i - 12);
}

/* ===== Simple UART dump ================================================== */
static void hex1(const char *name, uint8_t v){
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b08c      	sub	sp, #48	@ 0x30
 8002bac:	af02      	add	r7, sp, #8
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	70fb      	strb	r3, [r7, #3]
    char s[32];
    snprintf(s, sizeof(s), "%s=%02X ", name, v);
 8002bb4:	78fb      	ldrb	r3, [r7, #3]
 8002bb6:	f107 0008 	add.w	r0, r7, #8
 8002bba:	9300      	str	r3, [sp, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a06      	ldr	r2, [pc, #24]	@ (8002bd8 <hex1+0x30>)
 8002bc0:	2120      	movs	r1, #32
 8002bc2:	f010 ff8b 	bl	8013adc <sniprintf>
    uputs(s);
 8002bc6:	f107 0308 	add.w	r3, r7, #8
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff fdac 	bl	8002728 <uputs>
}
 8002bd0:	bf00      	nop
 8002bd2:	3728      	adds	r7, #40	@ 0x28
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	08014890 	.word	0x08014890

08002bdc <dump_hex5>:

static void dump_hex5(const char *name, const uint8_t *v){
 8002bdc:	b5b0      	push	{r4, r5, r7, lr}
 8002bde:	b098      	sub	sp, #96	@ 0x60
 8002be0:	af06      	add	r7, sp, #24
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
    char s[64];
    snprintf(s, sizeof(s), "%s=%02X %02X %02X %02X %02X  ",
            name, v[0], v[1], v[2], v[3], v[4]);
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	781b      	ldrb	r3, [r3, #0]
    snprintf(s, sizeof(s), "%s=%02X %02X %02X %02X %02X  ",
 8002bea:	461a      	mov	r2, r3
            name, v[0], v[1], v[2], v[3], v[4]);
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	781b      	ldrb	r3, [r3, #0]
    snprintf(s, sizeof(s), "%s=%02X %02X %02X %02X %02X  ",
 8002bf2:	4619      	mov	r1, r3
            name, v[0], v[1], v[2], v[3], v[4]);
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	3302      	adds	r3, #2
 8002bf8:	781b      	ldrb	r3, [r3, #0]
    snprintf(s, sizeof(s), "%s=%02X %02X %02X %02X %02X  ",
 8002bfa:	461c      	mov	r4, r3
            name, v[0], v[1], v[2], v[3], v[4]);
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	3303      	adds	r3, #3
 8002c00:	781b      	ldrb	r3, [r3, #0]
    snprintf(s, sizeof(s), "%s=%02X %02X %02X %02X %02X  ",
 8002c02:	461d      	mov	r5, r3
            name, v[0], v[1], v[2], v[3], v[4]);
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	3304      	adds	r3, #4
 8002c08:	781b      	ldrb	r3, [r3, #0]
    snprintf(s, sizeof(s), "%s=%02X %02X %02X %02X %02X  ",
 8002c0a:	f107 0008 	add.w	r0, r7, #8
 8002c0e:	9304      	str	r3, [sp, #16]
 8002c10:	9503      	str	r5, [sp, #12]
 8002c12:	9402      	str	r4, [sp, #8]
 8002c14:	9101      	str	r1, [sp, #4]
 8002c16:	9200      	str	r2, [sp, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a06      	ldr	r2, [pc, #24]	@ (8002c34 <dump_hex5+0x58>)
 8002c1c:	2140      	movs	r1, #64	@ 0x40
 8002c1e:	f010 ff5d 	bl	8013adc <sniprintf>
    uputs(s);
 8002c22:	f107 0308 	add.w	r3, r7, #8
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff fd7e 	bl	8002728 <uputs>
}
 8002c2c:	bf00      	nop
 8002c2e:	3748      	adds	r7, #72	@ 0x48
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bdb0      	pop	{r4, r5, r7, pc}
 8002c34:	0801489c 	.word	0x0801489c

08002c38 <NRF24_Dump>:

void NRF24_Dump(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
    uint8_t v, addr[5];
    v = nrf24_ReadReg(CONFIG);     hex1("CFG",   v);
 8002c3e:	2000      	movs	r0, #0
 8002c40:	f7ff fdd8 	bl	80027f4 <nrf24_ReadReg>
 8002c44:	4603      	mov	r3, r0
 8002c46:	71fb      	strb	r3, [r7, #7]
 8002c48:	79fb      	ldrb	r3, [r7, #7]
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	4832      	ldr	r0, [pc, #200]	@ (8002d18 <NRF24_Dump+0xe0>)
 8002c4e:	f7ff ffab 	bl	8002ba8 <hex1>
    v = nrf24_ReadReg(EN_AA);      hex1("EN_AA", v);
 8002c52:	2001      	movs	r0, #1
 8002c54:	f7ff fdce 	bl	80027f4 <nrf24_ReadReg>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	71fb      	strb	r3, [r7, #7]
 8002c5c:	79fb      	ldrb	r3, [r7, #7]
 8002c5e:	4619      	mov	r1, r3
 8002c60:	482e      	ldr	r0, [pc, #184]	@ (8002d1c <NRF24_Dump+0xe4>)
 8002c62:	f7ff ffa1 	bl	8002ba8 <hex1>
    v = nrf24_ReadReg(SETUP_RETR); hex1("RETR",  v);
 8002c66:	2004      	movs	r0, #4
 8002c68:	f7ff fdc4 	bl	80027f4 <nrf24_ReadReg>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	71fb      	strb	r3, [r7, #7]
 8002c70:	79fb      	ldrb	r3, [r7, #7]
 8002c72:	4619      	mov	r1, r3
 8002c74:	482a      	ldr	r0, [pc, #168]	@ (8002d20 <NRF24_Dump+0xe8>)
 8002c76:	f7ff ff97 	bl	8002ba8 <hex1>
    v = nrf24_ReadReg(RF_CH);      hex1("CH",    v);
 8002c7a:	2005      	movs	r0, #5
 8002c7c:	f7ff fdba 	bl	80027f4 <nrf24_ReadReg>
 8002c80:	4603      	mov	r3, r0
 8002c82:	71fb      	strb	r3, [r7, #7]
 8002c84:	79fb      	ldrb	r3, [r7, #7]
 8002c86:	4619      	mov	r1, r3
 8002c88:	4826      	ldr	r0, [pc, #152]	@ (8002d24 <NRF24_Dump+0xec>)
 8002c8a:	f7ff ff8d 	bl	8002ba8 <hex1>
    v = nrf24_ReadReg(RF_SETUP);   hex1("RF",    v);
 8002c8e:	2006      	movs	r0, #6
 8002c90:	f7ff fdb0 	bl	80027f4 <nrf24_ReadReg>
 8002c94:	4603      	mov	r3, r0
 8002c96:	71fb      	strb	r3, [r7, #7]
 8002c98:	79fb      	ldrb	r3, [r7, #7]
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	4822      	ldr	r0, [pc, #136]	@ (8002d28 <NRF24_Dump+0xf0>)
 8002c9e:	f7ff ff83 	bl	8002ba8 <hex1>
    v = nrf24_ReadReg(FEATURE);    hex1("FEAT",  v);
 8002ca2:	201d      	movs	r0, #29
 8002ca4:	f7ff fda6 	bl	80027f4 <nrf24_ReadReg>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	71fb      	strb	r3, [r7, #7]
 8002cac:	79fb      	ldrb	r3, [r7, #7]
 8002cae:	4619      	mov	r1, r3
 8002cb0:	481e      	ldr	r0, [pc, #120]	@ (8002d2c <NRF24_Dump+0xf4>)
 8002cb2:	f7ff ff79 	bl	8002ba8 <hex1>
    v = nrf24_ReadReg(DYNPD);      hex1("DYNPD", v);
 8002cb6:	201c      	movs	r0, #28
 8002cb8:	f7ff fd9c 	bl	80027f4 <nrf24_ReadReg>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	71fb      	strb	r3, [r7, #7]
 8002cc0:	79fb      	ldrb	r3, [r7, #7]
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	481a      	ldr	r0, [pc, #104]	@ (8002d30 <NRF24_Dump+0xf8>)
 8002cc6:	f7ff ff6f 	bl	8002ba8 <hex1>

    nrf24_ReadRegMulti(TX_ADDR,    addr, 5); dump_hex5("TX",  addr);
 8002cca:	463b      	mov	r3, r7
 8002ccc:	2205      	movs	r2, #5
 8002cce:	4619      	mov	r1, r3
 8002cd0:	2010      	movs	r0, #16
 8002cd2:	f7ff fdb5 	bl	8002840 <nrf24_ReadRegMulti>
 8002cd6:	463b      	mov	r3, r7
 8002cd8:	4619      	mov	r1, r3
 8002cda:	4816      	ldr	r0, [pc, #88]	@ (8002d34 <NRF24_Dump+0xfc>)
 8002cdc:	f7ff ff7e 	bl	8002bdc <dump_hex5>
    nrf24_ReadRegMulti(RX_ADDR_P0, addr, 5); dump_hex5("RX0", addr);
 8002ce0:	463b      	mov	r3, r7
 8002ce2:	2205      	movs	r2, #5
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	200a      	movs	r0, #10
 8002ce8:	f7ff fdaa 	bl	8002840 <nrf24_ReadRegMulti>
 8002cec:	463b      	mov	r3, r7
 8002cee:	4619      	mov	r1, r3
 8002cf0:	4811      	ldr	r0, [pc, #68]	@ (8002d38 <NRF24_Dump+0x100>)
 8002cf2:	f7ff ff73 	bl	8002bdc <dump_hex5>

    v = nrf24_ReadReg(STATUS);     hex1("STAT",  v);
 8002cf6:	2007      	movs	r0, #7
 8002cf8:	f7ff fd7c 	bl	80027f4 <nrf24_ReadReg>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	71fb      	strb	r3, [r7, #7]
 8002d00:	79fb      	ldrb	r3, [r7, #7]
 8002d02:	4619      	mov	r1, r3
 8002d04:	480d      	ldr	r0, [pc, #52]	@ (8002d3c <NRF24_Dump+0x104>)
 8002d06:	f7ff ff4f 	bl	8002ba8 <hex1>
    uputs("\r\n");
 8002d0a:	480d      	ldr	r0, [pc, #52]	@ (8002d40 <NRF24_Dump+0x108>)
 8002d0c:	f7ff fd0c 	bl	8002728 <uputs>
}
 8002d10:	bf00      	nop
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	080148bc 	.word	0x080148bc
 8002d1c:	080148c0 	.word	0x080148c0
 8002d20:	080148c8 	.word	0x080148c8
 8002d24:	080148d0 	.word	0x080148d0
 8002d28:	080148d4 	.word	0x080148d4
 8002d2c:	080148d8 	.word	0x080148d8
 8002d30:	080148e0 	.word	0x080148e0
 8002d34:	080148e8 	.word	0x080148e8
 8002d38:	080148ec 	.word	0x080148ec
 8002d3c:	080148f0 	.word	0x080148f0
 8002d40:	080148f8 	.word	0x080148f8

08002d44 <NRF24_StatusNOP>:
uint8_t NRF24_StatusNOP(void) {
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af02      	add	r7, sp, #8
    uint8_t cmd = NOP, st = 0x00;
 8002d4a:	23ff      	movs	r3, #255	@ 0xff
 8002d4c:	71fb      	strb	r3, [r7, #7]
 8002d4e:	2300      	movs	r3, #0
 8002d50:	71bb      	strb	r3, [r7, #6]
    CS_Select();
 8002d52:	f7ff fcb9 	bl	80026c8 <CS_Select>
    HAL_SPI_TransmitReceive(NRF24_SPI, &cmd, &st, 1, 100);
 8002d56:	1dba      	adds	r2, r7, #6
 8002d58:	1df9      	adds	r1, r7, #7
 8002d5a:	2364      	movs	r3, #100	@ 0x64
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	2301      	movs	r3, #1
 8002d60:	4804      	ldr	r0, [pc, #16]	@ (8002d74 <NRF24_StatusNOP+0x30>)
 8002d62:	f00c fdd7 	bl	800f914 <HAL_SPI_TransmitReceive>
    CS_UnSelect();
 8002d66:	f7ff fcbb 	bl	80026e0 <CS_UnSelect>
    return st;
 8002d6a:	79bb      	ldrb	r3, [r7, #6]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	24000460 	.word	0x24000460

08002d78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8002da8 <HAL_MspInit+0x30>)
 8002d80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002d84:	4a08      	ldr	r2, [pc, #32]	@ (8002da8 <HAL_MspInit+0x30>)
 8002d86:	f043 0302 	orr.w	r3, r3, #2
 8002d8a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002d8e:	4b06      	ldr	r3, [pc, #24]	@ (8002da8 <HAL_MspInit+0x30>)
 8002d90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	607b      	str	r3, [r7, #4]
 8002d9a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	58024400 	.word	0x58024400

08002dac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b090      	sub	sp, #64	@ 0x40
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	605a      	str	r2, [r3, #4]
 8002dbe:	609a      	str	r2, [r3, #8]
 8002dc0:	60da      	str	r2, [r3, #12]
 8002dc2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a90      	ldr	r2, [pc, #576]	@ (800300c <HAL_ADC_MspInit+0x260>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	f040 80a3 	bne.w	8002f16 <HAL_ADC_MspInit+0x16a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002dd0:	4b8f      	ldr	r3, [pc, #572]	@ (8003010 <HAL_ADC_MspInit+0x264>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	4a8e      	ldr	r2, [pc, #568]	@ (8003010 <HAL_ADC_MspInit+0x264>)
 8002dd8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002dda:	4b8d      	ldr	r3, [pc, #564]	@ (8003010 <HAL_ADC_MspInit+0x264>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d10e      	bne.n	8002e00 <HAL_ADC_MspInit+0x54>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002de2:	4b8c      	ldr	r3, [pc, #560]	@ (8003014 <HAL_ADC_MspInit+0x268>)
 8002de4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002de8:	4a8a      	ldr	r2, [pc, #552]	@ (8003014 <HAL_ADC_MspInit+0x268>)
 8002dea:	f043 0320 	orr.w	r3, r3, #32
 8002dee:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002df2:	4b88      	ldr	r3, [pc, #544]	@ (8003014 <HAL_ADC_MspInit+0x268>)
 8002df4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002df8:	f003 0320 	and.w	r3, r3, #32
 8002dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e00:	4b84      	ldr	r3, [pc, #528]	@ (8003014 <HAL_ADC_MspInit+0x268>)
 8002e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e06:	4a83      	ldr	r2, [pc, #524]	@ (8003014 <HAL_ADC_MspInit+0x268>)
 8002e08:	f043 0304 	orr.w	r3, r3, #4
 8002e0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e10:	4b80      	ldr	r3, [pc, #512]	@ (8003014 <HAL_ADC_MspInit+0x268>)
 8002e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e16:	f003 0304 	and.w	r3, r3, #4
 8002e1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e1e:	4b7d      	ldr	r3, [pc, #500]	@ (8003014 <HAL_ADC_MspInit+0x268>)
 8002e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e24:	4a7b      	ldr	r2, [pc, #492]	@ (8003014 <HAL_ADC_MspInit+0x268>)
 8002e26:	f043 0302 	orr.w	r3, r3, #2
 8002e2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e2e:	4b79      	ldr	r3, [pc, #484]	@ (8003014 <HAL_ADC_MspInit+0x268>)
 8002e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	623b      	str	r3, [r7, #32]
 8002e3a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e3c:	4b75      	ldr	r3, [pc, #468]	@ (8003014 <HAL_ADC_MspInit+0x268>)
 8002e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e42:	4a74      	ldr	r2, [pc, #464]	@ (8003014 <HAL_ADC_MspInit+0x268>)
 8002e44:	f043 0320 	orr.w	r3, r3, #32
 8002e48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e4c:	4b71      	ldr	r3, [pc, #452]	@ (8003014 <HAL_ADC_MspInit+0x268>)
 8002e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e52:	f003 0320 	and.w	r3, r3, #32
 8002e56:	61fb      	str	r3, [r7, #28]
 8002e58:	69fb      	ldr	r3, [r7, #28]
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = S_APPS_1_Pin|SUSPENSION_RL_Pin;
 8002e5a:	2330      	movs	r3, #48	@ 0x30
 8002e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e62:	2300      	movs	r3, #0
 8002e64:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	486a      	ldr	r0, [pc, #424]	@ (8003018 <HAL_ADC_MspInit+0x26c>)
 8002e6e:	f006 fe09 	bl	8009a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SUSPENSION_RR_Pin|S_APPS_2_Pin;
 8002e72:	2303      	movs	r3, #3
 8002e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e76:	2303      	movs	r3, #3
 8002e78:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e82:	4619      	mov	r1, r3
 8002e84:	4865      	ldr	r0, [pc, #404]	@ (800301c <HAL_ADC_MspInit+0x270>)
 8002e86:	f006 fdfd 	bl	8009a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = S_FRENO_Pin;
 8002e8a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e90:	2303      	movs	r3, #3
 8002e92:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e94:	2300      	movs	r3, #0
 8002e96:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(S_FRENO_GPIO_Port, &GPIO_InitStruct);
 8002e98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4860      	ldr	r0, [pc, #384]	@ (8003020 <HAL_ADC_MspInit+0x274>)
 8002ea0:	f006 fdf0 	bl	8009a84 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8002ea4:	4b5f      	ldr	r3, [pc, #380]	@ (8003024 <HAL_ADC_MspInit+0x278>)
 8002ea6:	4a60      	ldr	r2, [pc, #384]	@ (8003028 <HAL_ADC_MspInit+0x27c>)
 8002ea8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002eaa:	4b5e      	ldr	r3, [pc, #376]	@ (8003024 <HAL_ADC_MspInit+0x278>)
 8002eac:	2209      	movs	r2, #9
 8002eae:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002eb0:	4b5c      	ldr	r3, [pc, #368]	@ (8003024 <HAL_ADC_MspInit+0x278>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002eb6:	4b5b      	ldr	r3, [pc, #364]	@ (8003024 <HAL_ADC_MspInit+0x278>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002ebc:	4b59      	ldr	r3, [pc, #356]	@ (8003024 <HAL_ADC_MspInit+0x278>)
 8002ebe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ec2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ec4:	4b57      	ldr	r3, [pc, #348]	@ (8003024 <HAL_ADC_MspInit+0x278>)
 8002ec6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002eca:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ecc:	4b55      	ldr	r3, [pc, #340]	@ (8003024 <HAL_ADC_MspInit+0x278>)
 8002ece:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ed2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002ed4:	4b53      	ldr	r3, [pc, #332]	@ (8003024 <HAL_ADC_MspInit+0x278>)
 8002ed6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002eda:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002edc:	4b51      	ldr	r3, [pc, #324]	@ (8003024 <HAL_ADC_MspInit+0x278>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ee2:	4b50      	ldr	r3, [pc, #320]	@ (8003024 <HAL_ADC_MspInit+0x278>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002ee8:	484e      	ldr	r0, [pc, #312]	@ (8003024 <HAL_ADC_MspInit+0x278>)
 8002eea:	f003 fb35 	bl	8006558 <HAL_DMA_Init>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <HAL_ADC_MspInit+0x14c>
    {
      Error_Handler();
 8002ef4:	f7ff fbe2 	bl	80026bc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a4a      	ldr	r2, [pc, #296]	@ (8003024 <HAL_ADC_MspInit+0x278>)
 8002efc:	659a      	str	r2, [r3, #88]	@ 0x58
 8002efe:	4a49      	ldr	r2, [pc, #292]	@ (8003024 <HAL_ADC_MspInit+0x278>)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002f04:	2200      	movs	r2, #0
 8002f06:	2100      	movs	r1, #0
 8002f08:	2012      	movs	r0, #18
 8002f0a:	f003 faf0 	bl	80064ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002f0e:	2012      	movs	r0, #18
 8002f10:	f003 fb07 	bl	8006522 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002f14:	e076      	b.n	8003004 <HAL_ADC_MspInit+0x258>
  else if(hadc->Instance==ADC2)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a44      	ldr	r2, [pc, #272]	@ (800302c <HAL_ADC_MspInit+0x280>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d171      	bne.n	8003004 <HAL_ADC_MspInit+0x258>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002f20:	4b3b      	ldr	r3, [pc, #236]	@ (8003010 <HAL_ADC_MspInit+0x264>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	3301      	adds	r3, #1
 8002f26:	4a3a      	ldr	r2, [pc, #232]	@ (8003010 <HAL_ADC_MspInit+0x264>)
 8002f28:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002f2a:	4b39      	ldr	r3, [pc, #228]	@ (8003010 <HAL_ADC_MspInit+0x264>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d10e      	bne.n	8002f50 <HAL_ADC_MspInit+0x1a4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002f32:	4b38      	ldr	r3, [pc, #224]	@ (8003014 <HAL_ADC_MspInit+0x268>)
 8002f34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002f38:	4a36      	ldr	r2, [pc, #216]	@ (8003014 <HAL_ADC_MspInit+0x268>)
 8002f3a:	f043 0320 	orr.w	r3, r3, #32
 8002f3e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002f42:	4b34      	ldr	r3, [pc, #208]	@ (8003014 <HAL_ADC_MspInit+0x268>)
 8002f44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002f48:	f003 0320 	and.w	r3, r3, #32
 8002f4c:	61bb      	str	r3, [r7, #24]
 8002f4e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f50:	4b30      	ldr	r3, [pc, #192]	@ (8003014 <HAL_ADC_MspInit+0x268>)
 8002f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f56:	4a2f      	ldr	r2, [pc, #188]	@ (8003014 <HAL_ADC_MspInit+0x268>)
 8002f58:	f043 0304 	orr.w	r3, r3, #4
 8002f5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f60:	4b2c      	ldr	r3, [pc, #176]	@ (8003014 <HAL_ADC_MspInit+0x268>)
 8002f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f66:	f003 0304 	and.w	r3, r3, #4
 8002f6a:	617b      	str	r3, [r7, #20]
 8002f6c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f6e:	4b29      	ldr	r3, [pc, #164]	@ (8003014 <HAL_ADC_MspInit+0x268>)
 8002f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f74:	4a27      	ldr	r2, [pc, #156]	@ (8003014 <HAL_ADC_MspInit+0x268>)
 8002f76:	f043 0302 	orr.w	r3, r3, #2
 8002f7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f7e:	4b25      	ldr	r3, [pc, #148]	@ (8003014 <HAL_ADC_MspInit+0x268>)
 8002f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	613b      	str	r3, [r7, #16]
 8002f8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f8c:	4b21      	ldr	r3, [pc, #132]	@ (8003014 <HAL_ADC_MspInit+0x268>)
 8002f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f92:	4a20      	ldr	r2, [pc, #128]	@ (8003014 <HAL_ADC_MspInit+0x268>)
 8002f94:	f043 0320 	orr.w	r3, r3, #32
 8002f98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f9c:	4b1d      	ldr	r3, [pc, #116]	@ (8003014 <HAL_ADC_MspInit+0x268>)
 8002f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002fa2:	f003 0320 	and.w	r3, r3, #32
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SUSPENSION_RL_Pin;
 8002faa:	2320      	movs	r3, #32
 8002fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SUSPENSION_RL_GPIO_Port, &GPIO_InitStruct);
 8002fb6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4816      	ldr	r0, [pc, #88]	@ (8003018 <HAL_ADC_MspInit+0x26c>)
 8002fbe:	f006 fd61 	bl	8009a84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SUSPENSION_RR_Pin;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SUSPENSION_RR_GPIO_Port, &GPIO_InitStruct);
 8002fce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	4811      	ldr	r0, [pc, #68]	@ (800301c <HAL_ADC_MspInit+0x270>)
 8002fd6:	f006 fd55 	bl	8009a84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SUSPENSION_FR_Pin;
 8002fda:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SUSPENSION_FR_GPIO_Port, &GPIO_InitStruct);
 8002fe8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002fec:	4619      	mov	r1, r3
 8002fee:	480c      	ldr	r0, [pc, #48]	@ (8003020 <HAL_ADC_MspInit+0x274>)
 8002ff0:	f006 fd48 	bl	8009a84 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	2012      	movs	r0, #18
 8002ffa:	f003 fa78 	bl	80064ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002ffe:	2012      	movs	r0, #18
 8003000:	f003 fa8f 	bl	8006522 <HAL_NVIC_EnableIRQ>
}
 8003004:	bf00      	nop
 8003006:	3740      	adds	r7, #64	@ 0x40
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40022000 	.word	0x40022000
 8003010:	24000950 	.word	0x24000950
 8003014:	58024400 	.word	0x58024400
 8003018:	58020800 	.word	0x58020800
 800301c:	58020400 	.word	0x58020400
 8003020:	58021400 	.word	0x58021400
 8003024:	2400018c 	.word	0x2400018c
 8003028:	40020010 	.word	0x40020010
 800302c:	40022100 	.word	0x40022100

08003030 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b0bc      	sub	sp, #240	@ 0xf0
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003038:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]
 8003040:	605a      	str	r2, [r3, #4]
 8003042:	609a      	str	r2, [r3, #8]
 8003044:	60da      	str	r2, [r3, #12]
 8003046:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003048:	f107 0320 	add.w	r3, r7, #32
 800304c:	22b8      	movs	r2, #184	@ 0xb8
 800304e:	2100      	movs	r1, #0
 8003050:	4618      	mov	r0, r3
 8003052:	f010 fd9b 	bl	8013b8c <memset>
  if(hfdcan->Instance==FDCAN1)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a8d      	ldr	r2, [pc, #564]	@ (8003290 <HAL_FDCAN_MspInit+0x260>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d157      	bne.n	8003110 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003060:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003064:	f04f 0300 	mov.w	r3, #0
 8003068:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 800306c:	2300      	movs	r3, #0
 800306e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003072:	f107 0320 	add.w	r3, r7, #32
 8003076:	4618      	mov	r0, r3
 8003078:	f007 fe7e 	bl	800ad78 <HAL_RCCEx_PeriphCLKConfig>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8003082:	f7ff fb1b 	bl	80026bc <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8003086:	4b83      	ldr	r3, [pc, #524]	@ (8003294 <HAL_FDCAN_MspInit+0x264>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	3301      	adds	r3, #1
 800308c:	4a81      	ldr	r2, [pc, #516]	@ (8003294 <HAL_FDCAN_MspInit+0x264>)
 800308e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8003090:	4b80      	ldr	r3, [pc, #512]	@ (8003294 <HAL_FDCAN_MspInit+0x264>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d10e      	bne.n	80030b6 <HAL_FDCAN_MspInit+0x86>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8003098:	4b7f      	ldr	r3, [pc, #508]	@ (8003298 <HAL_FDCAN_MspInit+0x268>)
 800309a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800309e:	4a7e      	ldr	r2, [pc, #504]	@ (8003298 <HAL_FDCAN_MspInit+0x268>)
 80030a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030a4:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80030a8:	4b7b      	ldr	r3, [pc, #492]	@ (8003298 <HAL_FDCAN_MspInit+0x268>)
 80030aa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80030ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030b2:	61fb      	str	r3, [r7, #28]
 80030b4:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030b6:	4b78      	ldr	r3, [pc, #480]	@ (8003298 <HAL_FDCAN_MspInit+0x268>)
 80030b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030bc:	4a76      	ldr	r2, [pc, #472]	@ (8003298 <HAL_FDCAN_MspInit+0x268>)
 80030be:	f043 0308 	orr.w	r3, r3, #8
 80030c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80030c6:	4b74      	ldr	r3, [pc, #464]	@ (8003298 <HAL_FDCAN_MspInit+0x268>)
 80030c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030cc:	f003 0308 	and.w	r3, r3, #8
 80030d0:	61bb      	str	r3, [r7, #24]
 80030d2:	69bb      	ldr	r3, [r7, #24]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80030d4:	2303      	movs	r3, #3
 80030d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030da:	2302      	movs	r3, #2
 80030dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e0:	2300      	movs	r3, #0
 80030e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e6:	2300      	movs	r3, #0
 80030e8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80030ec:	2309      	movs	r3, #9
 80030ee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030f2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80030f6:	4619      	mov	r1, r3
 80030f8:	4868      	ldr	r0, [pc, #416]	@ (800329c <HAL_FDCAN_MspInit+0x26c>)
 80030fa:	f006 fcc3 	bl	8009a84 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 1, 0);
 80030fe:	2200      	movs	r2, #0
 8003100:	2101      	movs	r1, #1
 8003102:	2013      	movs	r0, #19
 8003104:	f003 f9f3 	bl	80064ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8003108:	2013      	movs	r0, #19
 800310a:	f003 fa0a 	bl	8006522 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 800310e:	e0ba      	b.n	8003286 <HAL_FDCAN_MspInit+0x256>
  else if(hfdcan->Instance==FDCAN2)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a62      	ldr	r2, [pc, #392]	@ (80032a0 <HAL_FDCAN_MspInit+0x270>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d158      	bne.n	80031cc <HAL_FDCAN_MspInit+0x19c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800311a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800311e:	f04f 0300 	mov.w	r3, #0
 8003122:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8003126:	2300      	movs	r3, #0
 8003128:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800312c:	f107 0320 	add.w	r3, r7, #32
 8003130:	4618      	mov	r0, r3
 8003132:	f007 fe21 	bl	800ad78 <HAL_RCCEx_PeriphCLKConfig>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <HAL_FDCAN_MspInit+0x110>
      Error_Handler();
 800313c:	f7ff fabe 	bl	80026bc <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8003140:	4b54      	ldr	r3, [pc, #336]	@ (8003294 <HAL_FDCAN_MspInit+0x264>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	3301      	adds	r3, #1
 8003146:	4a53      	ldr	r2, [pc, #332]	@ (8003294 <HAL_FDCAN_MspInit+0x264>)
 8003148:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800314a:	4b52      	ldr	r3, [pc, #328]	@ (8003294 <HAL_FDCAN_MspInit+0x264>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d10e      	bne.n	8003170 <HAL_FDCAN_MspInit+0x140>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8003152:	4b51      	ldr	r3, [pc, #324]	@ (8003298 <HAL_FDCAN_MspInit+0x268>)
 8003154:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8003158:	4a4f      	ldr	r2, [pc, #316]	@ (8003298 <HAL_FDCAN_MspInit+0x268>)
 800315a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800315e:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8003162:	4b4d      	ldr	r3, [pc, #308]	@ (8003298 <HAL_FDCAN_MspInit+0x268>)
 8003164:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8003168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800316c:	617b      	str	r3, [r7, #20]
 800316e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003170:	4b49      	ldr	r3, [pc, #292]	@ (8003298 <HAL_FDCAN_MspInit+0x268>)
 8003172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003176:	4a48      	ldr	r2, [pc, #288]	@ (8003298 <HAL_FDCAN_MspInit+0x268>)
 8003178:	f043 0302 	orr.w	r3, r3, #2
 800317c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003180:	4b45      	ldr	r3, [pc, #276]	@ (8003298 <HAL_FDCAN_MspInit+0x268>)
 8003182:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	613b      	str	r3, [r7, #16]
 800318c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800318e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003192:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003196:	2302      	movs	r3, #2
 8003198:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319c:	2300      	movs	r3, #0
 800319e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a2:	2300      	movs	r3, #0
 80031a4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80031a8:	2309      	movs	r3, #9
 80031aa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031ae:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80031b2:	4619      	mov	r1, r3
 80031b4:	483b      	ldr	r0, [pc, #236]	@ (80032a4 <HAL_FDCAN_MspInit+0x274>)
 80031b6:	f006 fc65 	bl	8009a84 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 2, 0);
 80031ba:	2200      	movs	r2, #0
 80031bc:	2102      	movs	r1, #2
 80031be:	2014      	movs	r0, #20
 80031c0:	f003 f995 	bl	80064ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 80031c4:	2014      	movs	r0, #20
 80031c6:	f003 f9ac 	bl	8006522 <HAL_NVIC_EnableIRQ>
}
 80031ca:	e05c      	b.n	8003286 <HAL_FDCAN_MspInit+0x256>
  else if(hfdcan->Instance==FDCAN3)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a35      	ldr	r2, [pc, #212]	@ (80032a8 <HAL_FDCAN_MspInit+0x278>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d157      	bne.n	8003286 <HAL_FDCAN_MspInit+0x256>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80031d6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80031da:	f04f 0300 	mov.w	r3, #0
 80031de:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80031e2:	2300      	movs	r3, #0
 80031e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031e8:	f107 0320 	add.w	r3, r7, #32
 80031ec:	4618      	mov	r0, r3
 80031ee:	f007 fdc3 	bl	800ad78 <HAL_RCCEx_PeriphCLKConfig>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <HAL_FDCAN_MspInit+0x1cc>
      Error_Handler();
 80031f8:	f7ff fa60 	bl	80026bc <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80031fc:	4b25      	ldr	r3, [pc, #148]	@ (8003294 <HAL_FDCAN_MspInit+0x264>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	3301      	adds	r3, #1
 8003202:	4a24      	ldr	r2, [pc, #144]	@ (8003294 <HAL_FDCAN_MspInit+0x264>)
 8003204:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8003206:	4b23      	ldr	r3, [pc, #140]	@ (8003294 <HAL_FDCAN_MspInit+0x264>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d10e      	bne.n	800322c <HAL_FDCAN_MspInit+0x1fc>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800320e:	4b22      	ldr	r3, [pc, #136]	@ (8003298 <HAL_FDCAN_MspInit+0x268>)
 8003210:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8003214:	4a20      	ldr	r2, [pc, #128]	@ (8003298 <HAL_FDCAN_MspInit+0x268>)
 8003216:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800321a:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800321e:	4b1e      	ldr	r3, [pc, #120]	@ (8003298 <HAL_FDCAN_MspInit+0x268>)
 8003220:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8003224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003228:	60fb      	str	r3, [r7, #12]
 800322a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800322c:	4b1a      	ldr	r3, [pc, #104]	@ (8003298 <HAL_FDCAN_MspInit+0x268>)
 800322e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003232:	4a19      	ldr	r2, [pc, #100]	@ (8003298 <HAL_FDCAN_MspInit+0x268>)
 8003234:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003238:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800323c:	4b16      	ldr	r3, [pc, #88]	@ (8003298 <HAL_FDCAN_MspInit+0x268>)
 800323e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003246:	60bb      	str	r3, [r7, #8]
 8003248:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800324a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800324e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003252:	2302      	movs	r3, #2
 8003254:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003258:	2300      	movs	r3, #0
 800325a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800325e:	2300      	movs	r3, #0
 8003260:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8003264:	2302      	movs	r3, #2
 8003266:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800326a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800326e:	4619      	mov	r1, r3
 8003270:	480e      	ldr	r0, [pc, #56]	@ (80032ac <HAL_FDCAN_MspInit+0x27c>)
 8003272:	f006 fc07 	bl	8009a84 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN3_IT0_IRQn, 0, 0);
 8003276:	2200      	movs	r2, #0
 8003278:	2100      	movs	r1, #0
 800327a:	209f      	movs	r0, #159	@ 0x9f
 800327c:	f003 f937 	bl	80064ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT0_IRQn);
 8003280:	209f      	movs	r0, #159	@ 0x9f
 8003282:	f003 f94e 	bl	8006522 <HAL_NVIC_EnableIRQ>
}
 8003286:	bf00      	nop
 8003288:	37f0      	adds	r7, #240	@ 0xf0
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	4000a000 	.word	0x4000a000
 8003294:	24000954 	.word	0x24000954
 8003298:	58024400 	.word	0x58024400
 800329c:	58020c00 	.word	0x58020c00
 80032a0:	4000a400 	.word	0x4000a400
 80032a4:	58020400 	.word	0x58020400
 80032a8:	4000d400 	.word	0x4000d400
 80032ac:	58021800 	.word	0x58021800

080032b0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08c      	sub	sp, #48	@ 0x30
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b8:	f107 031c 	add.w	r3, r7, #28
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	605a      	str	r2, [r3, #4]
 80032c2:	609a      	str	r2, [r3, #8]
 80032c4:	60da      	str	r2, [r3, #12]
 80032c6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a3e      	ldr	r2, [pc, #248]	@ (80033c8 <HAL_SD_MspInit+0x118>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d175      	bne.n	80033be <HAL_SD_MspInit+0x10e>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80032d2:	4b3e      	ldr	r3, [pc, #248]	@ (80033cc <HAL_SD_MspInit+0x11c>)
 80032d4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80032d8:	4a3c      	ldr	r2, [pc, #240]	@ (80033cc <HAL_SD_MspInit+0x11c>)
 80032da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032de:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80032e2:	4b3a      	ldr	r3, [pc, #232]	@ (80033cc <HAL_SD_MspInit+0x11c>)
 80032e4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80032e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032ec:	61bb      	str	r3, [r7, #24]
 80032ee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032f0:	4b36      	ldr	r3, [pc, #216]	@ (80033cc <HAL_SD_MspInit+0x11c>)
 80032f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032f6:	4a35      	ldr	r2, [pc, #212]	@ (80033cc <HAL_SD_MspInit+0x11c>)
 80032f8:	f043 0304 	orr.w	r3, r3, #4
 80032fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003300:	4b32      	ldr	r3, [pc, #200]	@ (80033cc <HAL_SD_MspInit+0x11c>)
 8003302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003306:	f003 0304 	and.w	r3, r3, #4
 800330a:	617b      	str	r3, [r7, #20]
 800330c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800330e:	4b2f      	ldr	r3, [pc, #188]	@ (80033cc <HAL_SD_MspInit+0x11c>)
 8003310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003314:	4a2d      	ldr	r2, [pc, #180]	@ (80033cc <HAL_SD_MspInit+0x11c>)
 8003316:	f043 0308 	orr.w	r3, r3, #8
 800331a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800331e:	4b2b      	ldr	r3, [pc, #172]	@ (80033cc <HAL_SD_MspInit+0x11c>)
 8003320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003324:	f003 0308 	and.w	r3, r3, #8
 8003328:	613b      	str	r3, [r7, #16]
 800332a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800332c:	4b27      	ldr	r3, [pc, #156]	@ (80033cc <HAL_SD_MspInit+0x11c>)
 800332e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003332:	4a26      	ldr	r2, [pc, #152]	@ (80033cc <HAL_SD_MspInit+0x11c>)
 8003334:	f043 0302 	orr.w	r3, r3, #2
 8003338:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800333c:	4b23      	ldr	r3, [pc, #140]	@ (80033cc <HAL_SD_MspInit+0x11c>)
 800333e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	60fb      	str	r3, [r7, #12]
 8003348:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PB8     ------> SDMMC1_CKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800334a:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800334e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003350:	2302      	movs	r3, #2
 8003352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003354:	2300      	movs	r3, #0
 8003356:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003358:	2303      	movs	r3, #3
 800335a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800335c:	230c      	movs	r3, #12
 800335e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003360:	f107 031c 	add.w	r3, r7, #28
 8003364:	4619      	mov	r1, r3
 8003366:	481a      	ldr	r0, [pc, #104]	@ (80033d0 <HAL_SD_MspInit+0x120>)
 8003368:	f006 fb8c 	bl	8009a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800336c:	2304      	movs	r3, #4
 800336e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003370:	2302      	movs	r3, #2
 8003372:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003374:	2300      	movs	r3, #0
 8003376:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003378:	2303      	movs	r3, #3
 800337a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800337c:	230c      	movs	r3, #12
 800337e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003380:	f107 031c 	add.w	r3, r7, #28
 8003384:	4619      	mov	r1, r3
 8003386:	4813      	ldr	r0, [pc, #76]	@ (80033d4 <HAL_SD_MspInit+0x124>)
 8003388:	f006 fb7c 	bl	8009a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800338c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003392:	2302      	movs	r3, #2
 8003394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003396:	2300      	movs	r3, #0
 8003398:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800339a:	2303      	movs	r3, #3
 800339c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SDMMC1;
 800339e:	2307      	movs	r3, #7
 80033a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033a2:	f107 031c 	add.w	r3, r7, #28
 80033a6:	4619      	mov	r1, r3
 80033a8:	480b      	ldr	r0, [pc, #44]	@ (80033d8 <HAL_SD_MspInit+0x128>)
 80033aa:	f006 fb6b 	bl	8009a84 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80033ae:	2200      	movs	r2, #0
 80033b0:	2100      	movs	r1, #0
 80033b2:	2031      	movs	r0, #49	@ 0x31
 80033b4:	f003 f89b 	bl	80064ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80033b8:	2031      	movs	r0, #49	@ 0x31
 80033ba:	f003 f8b2 	bl	8006522 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 80033be:	bf00      	nop
 80033c0:	3730      	adds	r7, #48	@ 0x30
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	52007000 	.word	0x52007000
 80033cc:	58024400 	.word	0x58024400
 80033d0:	58020800 	.word	0x58020800
 80033d4:	58020c00 	.word	0x58020c00
 80033d8:	58020400 	.word	0x58020400

080033dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b0b8      	sub	sp, #224	@ 0xe0
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]
 80033ec:	605a      	str	r2, [r3, #4]
 80033ee:	609a      	str	r2, [r3, #8]
 80033f0:	60da      	str	r2, [r3, #12]
 80033f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033f4:	f107 0310 	add.w	r3, r7, #16
 80033f8:	22b8      	movs	r2, #184	@ 0xb8
 80033fa:	2100      	movs	r1, #0
 80033fc:	4618      	mov	r0, r3
 80033fe:	f010 fbc5 	bl	8013b8c <memset>
  if(hspi->Instance==SPI1)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a26      	ldr	r2, [pc, #152]	@ (80034a0 <HAL_SPI_MspInit+0xc4>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d144      	bne.n	8003496 <HAL_SPI_MspInit+0xba>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800340c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003410:	f04f 0300 	mov.w	r3, #0
 8003414:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003418:	2300      	movs	r3, #0
 800341a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800341c:	f107 0310 	add.w	r3, r7, #16
 8003420:	4618      	mov	r0, r3
 8003422:	f007 fca9 	bl	800ad78 <HAL_RCCEx_PeriphCLKConfig>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 800342c:	f7ff f946 	bl	80026bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003430:	4b1c      	ldr	r3, [pc, #112]	@ (80034a4 <HAL_SPI_MspInit+0xc8>)
 8003432:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003436:	4a1b      	ldr	r2, [pc, #108]	@ (80034a4 <HAL_SPI_MspInit+0xc8>)
 8003438:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800343c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003440:	4b18      	ldr	r3, [pc, #96]	@ (80034a4 <HAL_SPI_MspInit+0xc8>)
 8003442:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003446:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800344a:	60fb      	str	r3, [r7, #12]
 800344c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800344e:	4b15      	ldr	r3, [pc, #84]	@ (80034a4 <HAL_SPI_MspInit+0xc8>)
 8003450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003454:	4a13      	ldr	r2, [pc, #76]	@ (80034a4 <HAL_SPI_MspInit+0xc8>)
 8003456:	f043 0301 	orr.w	r3, r3, #1
 800345a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800345e:	4b11      	ldr	r3, [pc, #68]	@ (80034a4 <HAL_SPI_MspInit+0xc8>)
 8003460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	60bb      	str	r3, [r7, #8]
 800346a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800346c:	23e0      	movs	r3, #224	@ 0xe0
 800346e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003472:	2302      	movs	r3, #2
 8003474:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003478:	2300      	movs	r3, #0
 800347a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800347e:	2300      	movs	r3, #0
 8003480:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003484:	2305      	movs	r3, #5
 8003486:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800348a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800348e:	4619      	mov	r1, r3
 8003490:	4805      	ldr	r0, [pc, #20]	@ (80034a8 <HAL_SPI_MspInit+0xcc>)
 8003492:	f006 faf7 	bl	8009a84 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003496:	bf00      	nop
 8003498:	37e0      	adds	r7, #224	@ 0xe0
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	40013000 	.word	0x40013000
 80034a4:	58024400 	.word	0x58024400
 80034a8:	58020000 	.word	0x58020000

080034ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a19      	ldr	r2, [pc, #100]	@ (8003520 <HAL_TIM_Base_MspInit+0x74>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d10f      	bne.n	80034de <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80034be:	4b19      	ldr	r3, [pc, #100]	@ (8003524 <HAL_TIM_Base_MspInit+0x78>)
 80034c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034c4:	4a17      	ldr	r2, [pc, #92]	@ (8003524 <HAL_TIM_Base_MspInit+0x78>)
 80034c6:	f043 0301 	orr.w	r3, r3, #1
 80034ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80034ce:	4b15      	ldr	r3, [pc, #84]	@ (8003524 <HAL_TIM_Base_MspInit+0x78>)
 80034d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	60fb      	str	r3, [r7, #12]
 80034da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80034dc:	e01b      	b.n	8003516 <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM16)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a11      	ldr	r2, [pc, #68]	@ (8003528 <HAL_TIM_Base_MspInit+0x7c>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d116      	bne.n	8003516 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80034e8:	4b0e      	ldr	r3, [pc, #56]	@ (8003524 <HAL_TIM_Base_MspInit+0x78>)
 80034ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034ee:	4a0d      	ldr	r2, [pc, #52]	@ (8003524 <HAL_TIM_Base_MspInit+0x78>)
 80034f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034f4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80034f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003524 <HAL_TIM_Base_MspInit+0x78>)
 80034fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003502:	60bb      	str	r3, [r7, #8]
 8003504:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8003506:	2200      	movs	r2, #0
 8003508:	2100      	movs	r1, #0
 800350a:	2075      	movs	r0, #117	@ 0x75
 800350c:	f002 ffef 	bl	80064ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8003510:	2075      	movs	r0, #117	@ 0x75
 8003512:	f003 f806 	bl	8006522 <HAL_NVIC_EnableIRQ>
}
 8003516:	bf00      	nop
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	40010000 	.word	0x40010000
 8003524:	58024400 	.word	0x58024400
 8003528:	40014400 	.word	0x40014400

0800352c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b088      	sub	sp, #32
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003534:	f107 030c 	add.w	r3, r7, #12
 8003538:	2200      	movs	r2, #0
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	605a      	str	r2, [r3, #4]
 800353e:	609a      	str	r2, [r3, #8]
 8003540:	60da      	str	r2, [r3, #12]
 8003542:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a13      	ldr	r2, [pc, #76]	@ (8003598 <HAL_TIM_MspPostInit+0x6c>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d11f      	bne.n	800358e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800354e:	4b13      	ldr	r3, [pc, #76]	@ (800359c <HAL_TIM_MspPostInit+0x70>)
 8003550:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003554:	4a11      	ldr	r2, [pc, #68]	@ (800359c <HAL_TIM_MspPostInit+0x70>)
 8003556:	f043 0310 	orr.w	r3, r3, #16
 800355a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800355e:	4b0f      	ldr	r3, [pc, #60]	@ (800359c <HAL_TIM_MspPostInit+0x70>)
 8003560:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003564:	f003 0310 	and.w	r3, r3, #16
 8003568:	60bb      	str	r3, [r7, #8]
 800356a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_FAN1_Pin|PWM_FAN2_Pin;
 800356c:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8003570:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003572:	2302      	movs	r3, #2
 8003574:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003576:	2300      	movs	r3, #0
 8003578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800357a:	2300      	movs	r3, #0
 800357c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800357e:	2301      	movs	r3, #1
 8003580:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003582:	f107 030c 	add.w	r3, r7, #12
 8003586:	4619      	mov	r1, r3
 8003588:	4805      	ldr	r0, [pc, #20]	@ (80035a0 <HAL_TIM_MspPostInit+0x74>)
 800358a:	f006 fa7b 	bl	8009a84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800358e:	bf00      	nop
 8003590:	3720      	adds	r7, #32
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	40010000 	.word	0x40010000
 800359c:	58024400 	.word	0x58024400
 80035a0:	58021000 	.word	0x58021000

080035a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b0ba      	sub	sp, #232	@ 0xe8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035ac:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80035b0:	2200      	movs	r2, #0
 80035b2:	601a      	str	r2, [r3, #0]
 80035b4:	605a      	str	r2, [r3, #4]
 80035b6:	609a      	str	r2, [r3, #8]
 80035b8:	60da      	str	r2, [r3, #12]
 80035ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80035bc:	f107 0318 	add.w	r3, r7, #24
 80035c0:	22b8      	movs	r2, #184	@ 0xb8
 80035c2:	2100      	movs	r1, #0
 80035c4:	4618      	mov	r0, r3
 80035c6:	f010 fae1 	bl	8013b8c <memset>
  if(huart->Instance==USART1)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a4d      	ldr	r2, [pc, #308]	@ (8003704 <HAL_UART_MspInit+0x160>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d147      	bne.n	8003664 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80035d4:	f04f 0201 	mov.w	r2, #1
 80035d8:	f04f 0300 	mov.w	r3, #0
 80035dc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80035e0:	2300      	movs	r3, #0
 80035e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035e6:	f107 0318 	add.w	r3, r7, #24
 80035ea:	4618      	mov	r0, r3
 80035ec:	f007 fbc4 	bl	800ad78 <HAL_RCCEx_PeriphCLKConfig>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80035f6:	f7ff f861 	bl	80026bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80035fa:	4b43      	ldr	r3, [pc, #268]	@ (8003708 <HAL_UART_MspInit+0x164>)
 80035fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003600:	4a41      	ldr	r2, [pc, #260]	@ (8003708 <HAL_UART_MspInit+0x164>)
 8003602:	f043 0310 	orr.w	r3, r3, #16
 8003606:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800360a:	4b3f      	ldr	r3, [pc, #252]	@ (8003708 <HAL_UART_MspInit+0x164>)
 800360c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003610:	f003 0310 	and.w	r3, r3, #16
 8003614:	617b      	str	r3, [r7, #20]
 8003616:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003618:	4b3b      	ldr	r3, [pc, #236]	@ (8003708 <HAL_UART_MspInit+0x164>)
 800361a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800361e:	4a3a      	ldr	r2, [pc, #232]	@ (8003708 <HAL_UART_MspInit+0x164>)
 8003620:	f043 0301 	orr.w	r3, r3, #1
 8003624:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003628:	4b37      	ldr	r3, [pc, #220]	@ (8003708 <HAL_UART_MspInit+0x164>)
 800362a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	613b      	str	r3, [r7, #16]
 8003634:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_GPS_Pin|USART1_RX_GPS_Pin;
 8003636:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800363a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800363e:	2302      	movs	r3, #2
 8003640:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003644:	2300      	movs	r3, #0
 8003646:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800364a:	2300      	movs	r3, #0
 800364c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003650:	2307      	movs	r3, #7
 8003652:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003656:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800365a:	4619      	mov	r1, r3
 800365c:	482b      	ldr	r0, [pc, #172]	@ (800370c <HAL_UART_MspInit+0x168>)
 800365e:	f006 fa11 	bl	8009a84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003662:	e04a      	b.n	80036fa <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART2)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a29      	ldr	r2, [pc, #164]	@ (8003710 <HAL_UART_MspInit+0x16c>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d145      	bne.n	80036fa <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800366e:	f04f 0202 	mov.w	r2, #2
 8003672:	f04f 0300 	mov.w	r3, #0
 8003676:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800367a:	2300      	movs	r3, #0
 800367c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003680:	f107 0318 	add.w	r3, r7, #24
 8003684:	4618      	mov	r0, r3
 8003686:	f007 fb77 	bl	800ad78 <HAL_RCCEx_PeriphCLKConfig>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8003690:	f7ff f814 	bl	80026bc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003694:	4b1c      	ldr	r3, [pc, #112]	@ (8003708 <HAL_UART_MspInit+0x164>)
 8003696:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800369a:	4a1b      	ldr	r2, [pc, #108]	@ (8003708 <HAL_UART_MspInit+0x164>)
 800369c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036a0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80036a4:	4b18      	ldr	r3, [pc, #96]	@ (8003708 <HAL_UART_MspInit+0x164>)
 80036a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80036aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ae:	60fb      	str	r3, [r7, #12]
 80036b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036b2:	4b15      	ldr	r3, [pc, #84]	@ (8003708 <HAL_UART_MspInit+0x164>)
 80036b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036b8:	4a13      	ldr	r2, [pc, #76]	@ (8003708 <HAL_UART_MspInit+0x164>)
 80036ba:	f043 0301 	orr.w	r3, r3, #1
 80036be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80036c2:	4b11      	ldr	r3, [pc, #68]	@ (8003708 <HAL_UART_MspInit+0x164>)
 80036c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	60bb      	str	r3, [r7, #8]
 80036ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80036d0:	230c      	movs	r3, #12
 80036d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d6:	2302      	movs	r3, #2
 80036d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036dc:	2300      	movs	r3, #0
 80036de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036e2:	2300      	movs	r3, #0
 80036e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80036e8:	2307      	movs	r3, #7
 80036ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ee:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80036f2:	4619      	mov	r1, r3
 80036f4:	4805      	ldr	r0, [pc, #20]	@ (800370c <HAL_UART_MspInit+0x168>)
 80036f6:	f006 f9c5 	bl	8009a84 <HAL_GPIO_Init>
}
 80036fa:	bf00      	nop
 80036fc:	37e8      	adds	r7, #232	@ 0xe8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	40011000 	.word	0x40011000
 8003708:	58024400 	.word	0x58024400
 800370c:	58020000 	.word	0x58020000
 8003710:	40004400 	.word	0x40004400

08003714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003718:	bf00      	nop
 800371a:	e7fd      	b.n	8003718 <NMI_Handler+0x4>

0800371c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003720:	bf00      	nop
 8003722:	e7fd      	b.n	8003720 <HardFault_Handler+0x4>

08003724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003728:	bf00      	nop
 800372a:	e7fd      	b.n	8003728 <MemManage_Handler+0x4>

0800372c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003730:	bf00      	nop
 8003732:	e7fd      	b.n	8003730 <BusFault_Handler+0x4>

08003734 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003738:	bf00      	nop
 800373a:	e7fd      	b.n	8003738 <UsageFault_Handler+0x4>

0800373c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003740:	bf00      	nop
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr

0800374a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800374a:	b480      	push	{r7}
 800374c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800374e:	bf00      	nop
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800375c:	bf00      	nop
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr

08003766 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800376a:	f000 f997 	bl	8003a9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800376e:	bf00      	nop
 8003770:	bd80      	pop	{r7, pc}
	...

08003774 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003778:	4802      	ldr	r0, [pc, #8]	@ (8003784 <DMA1_Stream0_IRQHandler+0x10>)
 800377a:	f003 fcaf 	bl	80070dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800377e:	bf00      	nop
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	2400018c 	.word	0x2400018c

08003788 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800378c:	4803      	ldr	r0, [pc, #12]	@ (800379c <ADC_IRQHandler+0x14>)
 800378e:	f001 f9e9 	bl	8004b64 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8003792:	4803      	ldr	r0, [pc, #12]	@ (80037a0 <ADC_IRQHandler+0x18>)
 8003794:	f001 f9e6 	bl	8004b64 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003798:	bf00      	nop
 800379a:	bd80      	pop	{r7, pc}
 800379c:	240000ac 	.word	0x240000ac
 80037a0:	2400011c 	.word	0x2400011c

080037a4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80037a8:	4802      	ldr	r0, [pc, #8]	@ (80037b4 <FDCAN1_IT0_IRQHandler+0x10>)
 80037aa:	f005 fc69 	bl	8009080 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80037ae:	bf00      	nop
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	24000204 	.word	0x24000204

080037b8 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 80037bc:	4802      	ldr	r0, [pc, #8]	@ (80037c8 <FDCAN2_IT0_IRQHandler+0x10>)
 80037be:	f005 fc5f 	bl	8009080 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 80037c2:	bf00      	nop
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	240002a4 	.word	0x240002a4

080037cc <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80037d0:	4802      	ldr	r0, [pc, #8]	@ (80037dc <SDMMC1_IRQHandler+0x10>)
 80037d2:	f00a f927 	bl	800da24 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80037d6:	bf00      	nop
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	240003e4 	.word	0x240003e4

080037e0 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80037e4:	4802      	ldr	r0, [pc, #8]	@ (80037f0 <TIM16_IRQHandler+0x10>)
 80037e6:	f00c fdf6 	bl	80103d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80037ea:	bf00      	nop
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	24000534 	.word	0x24000534

080037f4 <FDCAN3_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 0.
  */
void FDCAN3_IT0_IRQHandler(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 0 */

  /* USER CODE END FDCAN3_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 80037f8:	4802      	ldr	r0, [pc, #8]	@ (8003804 <FDCAN3_IT0_IRQHandler+0x10>)
 80037fa:	f005 fc41 	bl	8009080 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 1 */

  /* USER CODE END FDCAN3_IT0_IRQn 1 */
}
 80037fe:	bf00      	nop
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	24000344 	.word	0x24000344

08003808 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b086      	sub	sp, #24
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003810:	4a14      	ldr	r2, [pc, #80]	@ (8003864 <_sbrk+0x5c>)
 8003812:	4b15      	ldr	r3, [pc, #84]	@ (8003868 <_sbrk+0x60>)
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800381c:	4b13      	ldr	r3, [pc, #76]	@ (800386c <_sbrk+0x64>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d102      	bne.n	800382a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003824:	4b11      	ldr	r3, [pc, #68]	@ (800386c <_sbrk+0x64>)
 8003826:	4a12      	ldr	r2, [pc, #72]	@ (8003870 <_sbrk+0x68>)
 8003828:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800382a:	4b10      	ldr	r3, [pc, #64]	@ (800386c <_sbrk+0x64>)
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4413      	add	r3, r2
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	429a      	cmp	r2, r3
 8003836:	d207      	bcs.n	8003848 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003838:	f010 f9b0 	bl	8013b9c <__errno>
 800383c:	4603      	mov	r3, r0
 800383e:	220c      	movs	r2, #12
 8003840:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003842:	f04f 33ff 	mov.w	r3, #4294967295
 8003846:	e009      	b.n	800385c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003848:	4b08      	ldr	r3, [pc, #32]	@ (800386c <_sbrk+0x64>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800384e:	4b07      	ldr	r3, [pc, #28]	@ (800386c <_sbrk+0x64>)
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4413      	add	r3, r2
 8003856:	4a05      	ldr	r2, [pc, #20]	@ (800386c <_sbrk+0x64>)
 8003858:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800385a:	68fb      	ldr	r3, [r7, #12]
}
 800385c:	4618      	mov	r0, r3
 800385e:	3718      	adds	r7, #24
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	24050000 	.word	0x24050000
 8003868:	00000400 	.word	0x00000400
 800386c:	24000958 	.word	0x24000958
 8003870:	24000ac8 	.word	0x24000ac8

08003874 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003878:	4b32      	ldr	r3, [pc, #200]	@ (8003944 <SystemInit+0xd0>)
 800387a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800387e:	4a31      	ldr	r2, [pc, #196]	@ (8003944 <SystemInit+0xd0>)
 8003880:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003884:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003888:	4b2f      	ldr	r3, [pc, #188]	@ (8003948 <SystemInit+0xd4>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 030f 	and.w	r3, r3, #15
 8003890:	2b06      	cmp	r3, #6
 8003892:	d807      	bhi.n	80038a4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003894:	4b2c      	ldr	r3, [pc, #176]	@ (8003948 <SystemInit+0xd4>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f023 030f 	bic.w	r3, r3, #15
 800389c:	4a2a      	ldr	r2, [pc, #168]	@ (8003948 <SystemInit+0xd4>)
 800389e:	f043 0307 	orr.w	r3, r3, #7
 80038a2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80038a4:	4b29      	ldr	r3, [pc, #164]	@ (800394c <SystemInit+0xd8>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a28      	ldr	r2, [pc, #160]	@ (800394c <SystemInit+0xd8>)
 80038aa:	f043 0301 	orr.w	r3, r3, #1
 80038ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80038b0:	4b26      	ldr	r3, [pc, #152]	@ (800394c <SystemInit+0xd8>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80038b6:	4b25      	ldr	r3, [pc, #148]	@ (800394c <SystemInit+0xd8>)
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	4924      	ldr	r1, [pc, #144]	@ (800394c <SystemInit+0xd8>)
 80038bc:	4b24      	ldr	r3, [pc, #144]	@ (8003950 <SystemInit+0xdc>)
 80038be:	4013      	ands	r3, r2
 80038c0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80038c2:	4b21      	ldr	r3, [pc, #132]	@ (8003948 <SystemInit+0xd4>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0308 	and.w	r3, r3, #8
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d007      	beq.n	80038de <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80038ce:	4b1e      	ldr	r3, [pc, #120]	@ (8003948 <SystemInit+0xd4>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f023 030f 	bic.w	r3, r3, #15
 80038d6:	4a1c      	ldr	r2, [pc, #112]	@ (8003948 <SystemInit+0xd4>)
 80038d8:	f043 0307 	orr.w	r3, r3, #7
 80038dc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80038de:	4b1b      	ldr	r3, [pc, #108]	@ (800394c <SystemInit+0xd8>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80038e4:	4b19      	ldr	r3, [pc, #100]	@ (800394c <SystemInit+0xd8>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80038ea:	4b18      	ldr	r3, [pc, #96]	@ (800394c <SystemInit+0xd8>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80038f0:	4b16      	ldr	r3, [pc, #88]	@ (800394c <SystemInit+0xd8>)
 80038f2:	4a18      	ldr	r2, [pc, #96]	@ (8003954 <SystemInit+0xe0>)
 80038f4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80038f6:	4b15      	ldr	r3, [pc, #84]	@ (800394c <SystemInit+0xd8>)
 80038f8:	4a17      	ldr	r2, [pc, #92]	@ (8003958 <SystemInit+0xe4>)
 80038fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80038fc:	4b13      	ldr	r3, [pc, #76]	@ (800394c <SystemInit+0xd8>)
 80038fe:	4a17      	ldr	r2, [pc, #92]	@ (800395c <SystemInit+0xe8>)
 8003900:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003902:	4b12      	ldr	r3, [pc, #72]	@ (800394c <SystemInit+0xd8>)
 8003904:	2200      	movs	r2, #0
 8003906:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003908:	4b10      	ldr	r3, [pc, #64]	@ (800394c <SystemInit+0xd8>)
 800390a:	4a14      	ldr	r2, [pc, #80]	@ (800395c <SystemInit+0xe8>)
 800390c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800390e:	4b0f      	ldr	r3, [pc, #60]	@ (800394c <SystemInit+0xd8>)
 8003910:	2200      	movs	r2, #0
 8003912:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003914:	4b0d      	ldr	r3, [pc, #52]	@ (800394c <SystemInit+0xd8>)
 8003916:	4a11      	ldr	r2, [pc, #68]	@ (800395c <SystemInit+0xe8>)
 8003918:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800391a:	4b0c      	ldr	r3, [pc, #48]	@ (800394c <SystemInit+0xd8>)
 800391c:	2200      	movs	r2, #0
 800391e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003920:	4b0a      	ldr	r3, [pc, #40]	@ (800394c <SystemInit+0xd8>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a09      	ldr	r2, [pc, #36]	@ (800394c <SystemInit+0xd8>)
 8003926:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800392a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800392c:	4b07      	ldr	r3, [pc, #28]	@ (800394c <SystemInit+0xd8>)
 800392e:	2200      	movs	r2, #0
 8003930:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003932:	4b0b      	ldr	r3, [pc, #44]	@ (8003960 <SystemInit+0xec>)
 8003934:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8003938:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800393a:	bf00      	nop
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	e000ed00 	.word	0xe000ed00
 8003948:	52002000 	.word	0x52002000
 800394c:	58024400 	.word	0x58024400
 8003950:	eaf6ed7f 	.word	0xeaf6ed7f
 8003954:	02020200 	.word	0x02020200
 8003958:	01ff0000 	.word	0x01ff0000
 800395c:	01010280 	.word	0x01010280
 8003960:	52004000 	.word	0x52004000

08003964 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003964:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800399c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003968:	f7ff ff84 	bl	8003874 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800396c:	480c      	ldr	r0, [pc, #48]	@ (80039a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800396e:	490d      	ldr	r1, [pc, #52]	@ (80039a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003970:	4a0d      	ldr	r2, [pc, #52]	@ (80039a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003972:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003974:	e002      	b.n	800397c <LoopCopyDataInit>

08003976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800397a:	3304      	adds	r3, #4

0800397c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800397c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800397e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003980:	d3f9      	bcc.n	8003976 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003982:	4a0a      	ldr	r2, [pc, #40]	@ (80039ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003984:	4c0a      	ldr	r4, [pc, #40]	@ (80039b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003988:	e001      	b.n	800398e <LoopFillZerobss>

0800398a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800398a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800398c:	3204      	adds	r2, #4

0800398e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800398e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003990:	d3fb      	bcc.n	800398a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003992:	f010 f909 	bl	8013ba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003996:	f7fc fea9 	bl	80006ec <main>
  bx  lr
 800399a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800399c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80039a0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80039a4:	24000084 	.word	0x24000084
  ldr r2, =_sidata
 80039a8:	080149f0 	.word	0x080149f0
  ldr r2, =_sbss
 80039ac:	24000084 	.word	0x24000084
  ldr r4, =_ebss
 80039b0:	24000ac4 	.word	0x24000ac4

080039b4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039b4:	e7fe      	b.n	80039b4 <ADC3_IRQHandler>
	...

080039b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039be:	2003      	movs	r0, #3
 80039c0:	f002 fd8a 	bl	80064d8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80039c4:	f007 f802 	bl	800a9cc <HAL_RCC_GetSysClockFreq>
 80039c8:	4602      	mov	r2, r0
 80039ca:	4b15      	ldr	r3, [pc, #84]	@ (8003a20 <HAL_Init+0x68>)
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	0a1b      	lsrs	r3, r3, #8
 80039d0:	f003 030f 	and.w	r3, r3, #15
 80039d4:	4913      	ldr	r1, [pc, #76]	@ (8003a24 <HAL_Init+0x6c>)
 80039d6:	5ccb      	ldrb	r3, [r1, r3]
 80039d8:	f003 031f 	and.w	r3, r3, #31
 80039dc:	fa22 f303 	lsr.w	r3, r2, r3
 80039e0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80039e2:	4b0f      	ldr	r3, [pc, #60]	@ (8003a20 <HAL_Init+0x68>)
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	f003 030f 	and.w	r3, r3, #15
 80039ea:	4a0e      	ldr	r2, [pc, #56]	@ (8003a24 <HAL_Init+0x6c>)
 80039ec:	5cd3      	ldrb	r3, [r2, r3]
 80039ee:	f003 031f 	and.w	r3, r3, #31
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	fa22 f303 	lsr.w	r3, r2, r3
 80039f8:	4a0b      	ldr	r2, [pc, #44]	@ (8003a28 <HAL_Init+0x70>)
 80039fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80039fc:	4a0b      	ldr	r2, [pc, #44]	@ (8003a2c <HAL_Init+0x74>)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a02:	200f      	movs	r0, #15
 8003a04:	f000 f814 	bl	8003a30 <HAL_InitTick>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e002      	b.n	8003a18 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003a12:	f7ff f9b1 	bl	8002d78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3708      	adds	r7, #8
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	58024400 	.word	0x58024400
 8003a24:	08014948 	.word	0x08014948
 8003a28:	24000028 	.word	0x24000028
 8003a2c:	24000024 	.word	0x24000024

08003a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003a38:	4b15      	ldr	r3, [pc, #84]	@ (8003a90 <HAL_InitTick+0x60>)
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d101      	bne.n	8003a44 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e021      	b.n	8003a88 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003a44:	4b13      	ldr	r3, [pc, #76]	@ (8003a94 <HAL_InitTick+0x64>)
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	4b11      	ldr	r3, [pc, #68]	@ (8003a90 <HAL_InitTick+0x60>)
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a52:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f002 fd6f 	bl	800653e <HAL_SYSTICK_Config>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e00e      	b.n	8003a88 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b0f      	cmp	r3, #15
 8003a6e:	d80a      	bhi.n	8003a86 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a70:	2200      	movs	r2, #0
 8003a72:	6879      	ldr	r1, [r7, #4]
 8003a74:	f04f 30ff 	mov.w	r0, #4294967295
 8003a78:	f002 fd39 	bl	80064ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a7c:	4a06      	ldr	r2, [pc, #24]	@ (8003a98 <HAL_InitTick+0x68>)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
 8003a84:	e000      	b.n	8003a88 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	24000030 	.word	0x24000030
 8003a94:	24000024 	.word	0x24000024
 8003a98:	2400002c 	.word	0x2400002c

08003a9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003aa0:	4b06      	ldr	r3, [pc, #24]	@ (8003abc <HAL_IncTick+0x20>)
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	4b06      	ldr	r3, [pc, #24]	@ (8003ac0 <HAL_IncTick+0x24>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4413      	add	r3, r2
 8003aac:	4a04      	ldr	r2, [pc, #16]	@ (8003ac0 <HAL_IncTick+0x24>)
 8003aae:	6013      	str	r3, [r2, #0]
}
 8003ab0:	bf00      	nop
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	24000030 	.word	0x24000030
 8003ac0:	2400095c 	.word	0x2400095c

08003ac4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8003ac8:	4b03      	ldr	r3, [pc, #12]	@ (8003ad8 <HAL_GetTick+0x14>)
 8003aca:	681b      	ldr	r3, [r3, #0]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	2400095c 	.word	0x2400095c

08003adc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ae4:	f7ff ffee 	bl	8003ac4 <HAL_GetTick>
 8003ae8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af4:	d005      	beq.n	8003b02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003af6:	4b0a      	ldr	r3, [pc, #40]	@ (8003b20 <HAL_Delay+0x44>)
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	461a      	mov	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	4413      	add	r3, r2
 8003b00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b02:	bf00      	nop
 8003b04:	f7ff ffde 	bl	8003ac4 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d8f7      	bhi.n	8003b04 <HAL_Delay+0x28>
  {
  }
}
 8003b14:	bf00      	nop
 8003b16:	bf00      	nop
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	24000030 	.word	0x24000030

08003b24 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	431a      	orrs	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	609a      	str	r2, [r3, #8]
}
 8003b3e:	bf00      	nop
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b083      	sub	sp, #12
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
 8003b52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	609a      	str	r2, [r3, #8]
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b087      	sub	sp, #28
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
 8003b98:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	3360      	adds	r3, #96	@ 0x60
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	4413      	add	r3, r2
 8003ba6:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	4a10      	ldr	r2, [pc, #64]	@ (8003bec <LL_ADC_SetOffset+0x60>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d10b      	bne.n	8003bc8 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003bc6:	e00b      	b.n	8003be0 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	430b      	orrs	r3, r1
 8003bda:	431a      	orrs	r2, r3
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	601a      	str	r2, [r3, #0]
}
 8003be0:	bf00      	nop
 8003be2:	371c      	adds	r7, #28
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr
 8003bec:	58026000 	.word	0x58026000

08003bf0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	3360      	adds	r3, #96	@ 0x60
 8003bfe:	461a      	mov	r2, r3
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3714      	adds	r7, #20
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	f003 031f 	and.w	r3, r3, #31
 8003c36:	6879      	ldr	r1, [r7, #4]
 8003c38:	fa01 f303 	lsl.w	r3, r1, r3
 8003c3c:	431a      	orrs	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	611a      	str	r2, [r3, #16]
}
 8003c42:	bf00      	nop
 8003c44:	3714      	adds	r7, #20
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
	...

08003c50 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b087      	sub	sp, #28
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	4a0c      	ldr	r2, [pc, #48]	@ (8003c90 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d00e      	beq.n	8003c82 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	3360      	adds	r3, #96	@ 0x60
 8003c68:	461a      	mov	r2, r3
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4413      	add	r3, r2
 8003c70:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	601a      	str	r2, [r3, #0]
  }
}
 8003c82:	bf00      	nop
 8003c84:	371c      	adds	r7, #28
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	58026000 	.word	0x58026000

08003c94 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b087      	sub	sp, #28
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4a0c      	ldr	r2, [pc, #48]	@ (8003cd4 <LL_ADC_SetOffsetSaturation+0x40>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d10e      	bne.n	8003cc6 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	3360      	adds	r3, #96	@ 0x60
 8003cac:	461a      	mov	r2, r3
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	4413      	add	r3, r2
 8003cb4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003cc6:	bf00      	nop
 8003cc8:	371c      	adds	r7, #28
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	58026000 	.word	0x58026000

08003cd8 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b087      	sub	sp, #28
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4a0c      	ldr	r2, [pc, #48]	@ (8003d18 <LL_ADC_SetOffsetSign+0x40>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d10e      	bne.n	8003d0a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	3360      	adds	r3, #96	@ 0x60
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	4413      	add	r3, r2
 8003cf8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	431a      	orrs	r2, r3
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003d0a:	bf00      	nop
 8003d0c:	371c      	adds	r7, #28
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	58026000 	.word	0x58026000

08003d1c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b087      	sub	sp, #28
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	3360      	adds	r3, #96	@ 0x60
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4413      	add	r3, r2
 8003d34:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	4a0c      	ldr	r2, [pc, #48]	@ (8003d6c <LL_ADC_SetOffsetState+0x50>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d108      	bne.n	8003d50 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	431a      	orrs	r2, r3
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003d4e:	e007      	b.n	8003d60 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	601a      	str	r2, [r3, #0]
}
 8003d60:	bf00      	nop
 8003d62:	371c      	adds	r7, #28
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr
 8003d6c:	58026000 	.word	0x58026000

08003d70 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d101      	bne.n	8003d88 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003d84:	2301      	movs	r3, #1
 8003d86:	e000      	b.n	8003d8a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b087      	sub	sp, #28
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	60f8      	str	r0, [r7, #12]
 8003d9e:	60b9      	str	r1, [r7, #8]
 8003da0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	3330      	adds	r3, #48	@ 0x30
 8003da6:	461a      	mov	r2, r3
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	0a1b      	lsrs	r3, r3, #8
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	f003 030c 	and.w	r3, r3, #12
 8003db2:	4413      	add	r3, r2
 8003db4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	f003 031f 	and.w	r3, r3, #31
 8003dc0:	211f      	movs	r1, #31
 8003dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc6:	43db      	mvns	r3, r3
 8003dc8:	401a      	ands	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	0e9b      	lsrs	r3, r3, #26
 8003dce:	f003 011f 	and.w	r1, r3, #31
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	f003 031f 	and.w	r3, r3, #31
 8003dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003ddc:	431a      	orrs	r2, r3
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003de2:	bf00      	nop
 8003de4:	371c      	adds	r7, #28
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
 8003df6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	f023 0203 	bic.w	r2, r3, #3
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	431a      	orrs	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	60da      	str	r2, [r3, #12]
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	f043 0201 	orr.w	r2, r3, #1
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	60da      	str	r2, [r3, #12]
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a08      	ldr	r2, [pc, #32]	@ (8003e64 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d107      	bne.n	8003e56 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	f023 0203 	bic.w	r2, r3, #3
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	431a      	orrs	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	60da      	str	r2, [r3, #12]
  }
}
 8003e56:	bf00      	nop
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	58026000 	.word	0x58026000

08003e68 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e74:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d101      	bne.n	8003e80 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e000      	b.n	8003e82 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr

08003e8e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b087      	sub	sp, #28
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	60f8      	str	r0, [r7, #12]
 8003e96:	60b9      	str	r1, [r7, #8]
 8003e98:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	3314      	adds	r3, #20
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	0e5b      	lsrs	r3, r3, #25
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	f003 0304 	and.w	r3, r3, #4
 8003eaa:	4413      	add	r3, r2
 8003eac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	0d1b      	lsrs	r3, r3, #20
 8003eb6:	f003 031f 	and.w	r3, r3, #31
 8003eba:	2107      	movs	r1, #7
 8003ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec0:	43db      	mvns	r3, r3
 8003ec2:	401a      	ands	r2, r3
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	0d1b      	lsrs	r3, r3, #20
 8003ec8:	f003 031f 	and.w	r3, r3, #31
 8003ecc:	6879      	ldr	r1, [r7, #4]
 8003ece:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003ed8:	bf00      	nop
 8003eda:	371c      	adds	r7, #28
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4a1a      	ldr	r2, [pc, #104]	@ (8003f5c <LL_ADC_SetChannelSingleDiff+0x78>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d115      	bne.n	8003f24 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f04:	43db      	mvns	r3, r3
 8003f06:	401a      	ands	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f003 0318 	and.w	r3, r3, #24
 8003f0e:	4914      	ldr	r1, [pc, #80]	@ (8003f60 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003f10:	40d9      	lsrs	r1, r3
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	400b      	ands	r3, r1
 8003f16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003f22:	e014      	b.n	8003f4e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f30:	43db      	mvns	r3, r3
 8003f32:	401a      	ands	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f003 0318 	and.w	r3, r3, #24
 8003f3a:	4909      	ldr	r1, [pc, #36]	@ (8003f60 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003f3c:	40d9      	lsrs	r1, r3
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	400b      	ands	r3, r1
 8003f42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f46:	431a      	orrs	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8003f4e:	bf00      	nop
 8003f50:	3714      	adds	r7, #20
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	58026000 	.word	0x58026000
 8003f60:	000fffff 	.word	0x000fffff

08003f64 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f003 031f 	and.w	r3, r3, #31
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689a      	ldr	r2, [r3, #8]
 8003fa8:	4b04      	ldr	r3, [pc, #16]	@ (8003fbc <LL_ADC_DisableDeepPowerDown+0x20>)
 8003faa:	4013      	ands	r3, r2
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	6093      	str	r3, [r2, #8]
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr
 8003fbc:	5fffffc0 	.word	0x5fffffc0

08003fc0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003fd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fd4:	d101      	bne.n	8003fda <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e000      	b.n	8003fdc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689a      	ldr	r2, [r3, #8]
 8003ff4:	4b05      	ldr	r3, [pc, #20]	@ (800400c <LL_ADC_EnableInternalRegulator+0x24>)
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	6fffffc0 	.word	0x6fffffc0

08004010 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004020:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004024:	d101      	bne.n	800402a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004026:	2301      	movs	r3, #1
 8004028:	e000      	b.n	800402c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689a      	ldr	r2, [r3, #8]
 8004044:	4b05      	ldr	r3, [pc, #20]	@ (800405c <LL_ADC_Enable+0x24>)
 8004046:	4013      	ands	r3, r2
 8004048:	f043 0201 	orr.w	r2, r3, #1
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr
 800405c:	7fffffc0 	.word	0x7fffffc0

08004060 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689a      	ldr	r2, [r3, #8]
 800406c:	4b05      	ldr	r3, [pc, #20]	@ (8004084 <LL_ADC_Disable+0x24>)
 800406e:	4013      	ands	r3, r2
 8004070:	f043 0202 	orr.w	r2, r3, #2
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr
 8004084:	7fffffc0 	.word	0x7fffffc0

08004088 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b01      	cmp	r3, #1
 800409a:	d101      	bne.n	80040a0 <LL_ADC_IsEnabled+0x18>
 800409c:	2301      	movs	r3, #1
 800409e:	e000      	b.n	80040a2 <LL_ADC_IsEnabled+0x1a>
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b083      	sub	sp, #12
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d101      	bne.n	80040c6 <LL_ADC_IsDisableOngoing+0x18>
 80040c2:	2301      	movs	r3, #1
 80040c4:	e000      	b.n	80040c8 <LL_ADC_IsDisableOngoing+0x1a>
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689a      	ldr	r2, [r3, #8]
 80040e0:	4b05      	ldr	r3, [pc, #20]	@ (80040f8 <LL_ADC_REG_StartConversion+0x24>)
 80040e2:	4013      	ands	r3, r2
 80040e4:	f043 0204 	orr.w	r2, r3, #4
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr
 80040f8:	7fffffc0 	.word	0x7fffffc0

080040fc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689a      	ldr	r2, [r3, #8]
 8004108:	4b05      	ldr	r3, [pc, #20]	@ (8004120 <LL_ADC_REG_StopConversion+0x24>)
 800410a:	4013      	ands	r3, r2
 800410c:	f043 0210 	orr.w	r2, r3, #16
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr
 8004120:	7fffffc0 	.word	0x7fffffc0

08004124 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f003 0304 	and.w	r3, r3, #4
 8004134:	2b04      	cmp	r3, #4
 8004136:	d101      	bne.n	800413c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004138:	2301      	movs	r3, #1
 800413a:	e000      	b.n	800413e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
	...

0800414c <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	4b05      	ldr	r3, [pc, #20]	@ (8004170 <LL_ADC_INJ_StopConversion+0x24>)
 800415a:	4013      	ands	r3, r2
 800415c:	f043 0220 	orr.w	r2, r3, #32
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr
 8004170:	7fffffc0 	.word	0x7fffffc0

08004174 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f003 0308 	and.w	r3, r3, #8
 8004184:	2b08      	cmp	r3, #8
 8004186:	d101      	bne.n	800418c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004188:	2301      	movs	r3, #1
 800418a:	e000      	b.n	800418e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
	...

0800419c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800419c:	b590      	push	{r4, r7, lr}
 800419e:	b089      	sub	sp, #36	@ 0x24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041a4:	2300      	movs	r3, #0
 80041a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80041a8:	2300      	movs	r3, #0
 80041aa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e1ee      	b.n	8004594 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d109      	bne.n	80041d8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f7fe fdf1 	bl	8002dac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4618      	mov	r0, r3
 80041de:	f7ff feef 	bl	8003fc0 <LL_ADC_IsDeepPowerDownEnabled>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d004      	beq.n	80041f2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7ff fed5 	bl	8003f9c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7ff ff0a 	bl	8004010 <LL_ADC_IsInternalRegulatorEnabled>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d114      	bne.n	800422c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4618      	mov	r0, r3
 8004208:	f7ff feee 	bl	8003fe8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800420c:	4b8e      	ldr	r3, [pc, #568]	@ (8004448 <HAL_ADC_Init+0x2ac>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	099b      	lsrs	r3, r3, #6
 8004212:	4a8e      	ldr	r2, [pc, #568]	@ (800444c <HAL_ADC_Init+0x2b0>)
 8004214:	fba2 2303 	umull	r2, r3, r2, r3
 8004218:	099b      	lsrs	r3, r3, #6
 800421a:	3301      	adds	r3, #1
 800421c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800421e:	e002      	b.n	8004226 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	3b01      	subs	r3, #1
 8004224:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1f9      	bne.n	8004220 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4618      	mov	r0, r3
 8004232:	f7ff feed 	bl	8004010 <LL_ADC_IsInternalRegulatorEnabled>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10d      	bne.n	8004258 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004240:	f043 0210 	orr.w	r2, r3, #16
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800424c:	f043 0201 	orr.w	r2, r3, #1
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4618      	mov	r0, r3
 800425e:	f7ff ff61 	bl	8004124 <LL_ADC_REG_IsConversionOngoing>
 8004262:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004268:	f003 0310 	and.w	r3, r3, #16
 800426c:	2b00      	cmp	r3, #0
 800426e:	f040 8188 	bne.w	8004582 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	2b00      	cmp	r3, #0
 8004276:	f040 8184 	bne.w	8004582 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800427e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004282:	f043 0202 	orr.w	r2, r3, #2
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4618      	mov	r0, r3
 8004290:	f7ff fefa 	bl	8004088 <LL_ADC_IsEnabled>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d136      	bne.n	8004308 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a6c      	ldr	r2, [pc, #432]	@ (8004450 <HAL_ADC_Init+0x2b4>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d004      	beq.n	80042ae <HAL_ADC_Init+0x112>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a6a      	ldr	r2, [pc, #424]	@ (8004454 <HAL_ADC_Init+0x2b8>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d10e      	bne.n	80042cc <HAL_ADC_Init+0x130>
 80042ae:	4868      	ldr	r0, [pc, #416]	@ (8004450 <HAL_ADC_Init+0x2b4>)
 80042b0:	f7ff feea 	bl	8004088 <LL_ADC_IsEnabled>
 80042b4:	4604      	mov	r4, r0
 80042b6:	4867      	ldr	r0, [pc, #412]	@ (8004454 <HAL_ADC_Init+0x2b8>)
 80042b8:	f7ff fee6 	bl	8004088 <LL_ADC_IsEnabled>
 80042bc:	4603      	mov	r3, r0
 80042be:	4323      	orrs	r3, r4
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	bf0c      	ite	eq
 80042c4:	2301      	moveq	r3, #1
 80042c6:	2300      	movne	r3, #0
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	e008      	b.n	80042de <HAL_ADC_Init+0x142>
 80042cc:	4862      	ldr	r0, [pc, #392]	@ (8004458 <HAL_ADC_Init+0x2bc>)
 80042ce:	f7ff fedb 	bl	8004088 <LL_ADC_IsEnabled>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	bf0c      	ite	eq
 80042d8:	2301      	moveq	r3, #1
 80042da:	2300      	movne	r3, #0
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d012      	beq.n	8004308 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a5a      	ldr	r2, [pc, #360]	@ (8004450 <HAL_ADC_Init+0x2b4>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d004      	beq.n	80042f6 <HAL_ADC_Init+0x15a>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a58      	ldr	r2, [pc, #352]	@ (8004454 <HAL_ADC_Init+0x2b8>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d101      	bne.n	80042fa <HAL_ADC_Init+0x15e>
 80042f6:	4a59      	ldr	r2, [pc, #356]	@ (800445c <HAL_ADC_Init+0x2c0>)
 80042f8:	e000      	b.n	80042fc <HAL_ADC_Init+0x160>
 80042fa:	4a59      	ldr	r2, [pc, #356]	@ (8004460 <HAL_ADC_Init+0x2c4>)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	4619      	mov	r1, r3
 8004302:	4610      	mov	r0, r2
 8004304:	f7ff fc0e 	bl	8003b24 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a52      	ldr	r2, [pc, #328]	@ (8004458 <HAL_ADC_Init+0x2bc>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d129      	bne.n	8004366 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	7e5b      	ldrb	r3, [r3, #25]
 8004316:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800431c:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8004322:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	2b08      	cmp	r3, #8
 800432a:	d013      	beq.n	8004354 <HAL_ADC_Init+0x1b8>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	2b0c      	cmp	r3, #12
 8004332:	d00d      	beq.n	8004350 <HAL_ADC_Init+0x1b4>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	2b1c      	cmp	r3, #28
 800433a:	d007      	beq.n	800434c <HAL_ADC_Init+0x1b0>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	2b18      	cmp	r3, #24
 8004342:	d101      	bne.n	8004348 <HAL_ADC_Init+0x1ac>
 8004344:	2318      	movs	r3, #24
 8004346:	e006      	b.n	8004356 <HAL_ADC_Init+0x1ba>
 8004348:	2300      	movs	r3, #0
 800434a:	e004      	b.n	8004356 <HAL_ADC_Init+0x1ba>
 800434c:	2310      	movs	r3, #16
 800434e:	e002      	b.n	8004356 <HAL_ADC_Init+0x1ba>
 8004350:	2308      	movs	r3, #8
 8004352:	e000      	b.n	8004356 <HAL_ADC_Init+0x1ba>
 8004354:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8004356:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800435e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004360:	4313      	orrs	r3, r2
 8004362:	61bb      	str	r3, [r7, #24]
 8004364:	e00e      	b.n	8004384 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	7e5b      	ldrb	r3, [r3, #25]
 800436a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004370:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004376:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800437e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004380:	4313      	orrs	r3, r2
 8004382:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f893 3020 	ldrb.w	r3, [r3, #32]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d106      	bne.n	800439c <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004392:	3b01      	subs	r3, #1
 8004394:	045b      	lsls	r3, r3, #17
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	4313      	orrs	r3, r2
 800439a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d009      	beq.n	80043b8 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a26      	ldr	r2, [pc, #152]	@ (8004458 <HAL_ADC_Init+0x2bc>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d115      	bne.n	80043ee <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68da      	ldr	r2, [r3, #12]
 80043c8:	4b26      	ldr	r3, [pc, #152]	@ (8004464 <HAL_ADC_Init+0x2c8>)
 80043ca:	4013      	ands	r3, r2
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	6812      	ldr	r2, [r2, #0]
 80043d0:	69b9      	ldr	r1, [r7, #24]
 80043d2:	430b      	orrs	r3, r1
 80043d4:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	430a      	orrs	r2, r1
 80043ea:	611a      	str	r2, [r3, #16]
 80043ec:	e009      	b.n	8004402 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68da      	ldr	r2, [r3, #12]
 80043f4:	4b1c      	ldr	r3, [pc, #112]	@ (8004468 <HAL_ADC_Init+0x2cc>)
 80043f6:	4013      	ands	r3, r2
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	6812      	ldr	r2, [r2, #0]
 80043fc:	69b9      	ldr	r1, [r7, #24]
 80043fe:	430b      	orrs	r3, r1
 8004400:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4618      	mov	r0, r3
 8004408:	f7ff fe8c 	bl	8004124 <LL_ADC_REG_IsConversionOngoing>
 800440c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4618      	mov	r0, r3
 8004414:	f7ff feae 	bl	8004174 <LL_ADC_INJ_IsConversionOngoing>
 8004418:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	2b00      	cmp	r3, #0
 800441e:	f040 808e 	bne.w	800453e <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2b00      	cmp	r3, #0
 8004426:	f040 808a 	bne.w	800453e <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a0a      	ldr	r2, [pc, #40]	@ (8004458 <HAL_ADC_Init+0x2bc>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d11b      	bne.n	800446c <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	7e1b      	ldrb	r3, [r3, #24]
 8004438:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004440:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8004442:	4313      	orrs	r3, r2
 8004444:	61bb      	str	r3, [r7, #24]
 8004446:	e018      	b.n	800447a <HAL_ADC_Init+0x2de>
 8004448:	24000024 	.word	0x24000024
 800444c:	053e2d63 	.word	0x053e2d63
 8004450:	40022000 	.word	0x40022000
 8004454:	40022100 	.word	0x40022100
 8004458:	58026000 	.word	0x58026000
 800445c:	40022300 	.word	0x40022300
 8004460:	58026300 	.word	0x58026300
 8004464:	fff04007 	.word	0xfff04007
 8004468:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	7e1b      	ldrb	r3, [r3, #24]
 8004470:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8004476:	4313      	orrs	r3, r2
 8004478:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68da      	ldr	r2, [r3, #12]
 8004480:	4b46      	ldr	r3, [pc, #280]	@ (800459c <HAL_ADC_Init+0x400>)
 8004482:	4013      	ands	r3, r2
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	6812      	ldr	r2, [r2, #0]
 8004488:	69b9      	ldr	r1, [r7, #24]
 800448a:	430b      	orrs	r3, r1
 800448c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004494:	2b01      	cmp	r3, #1
 8004496:	d137      	bne.n	8004508 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800449c:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a3f      	ldr	r2, [pc, #252]	@ (80045a0 <HAL_ADC_Init+0x404>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d116      	bne.n	80044d6 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	691a      	ldr	r2, [r3, #16]
 80044ae:	4b3d      	ldr	r3, [pc, #244]	@ (80045a4 <HAL_ADC_Init+0x408>)
 80044b0:	4013      	ands	r3, r2
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80044ba:	4311      	orrs	r1, r2
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80044c0:	4311      	orrs	r1, r2
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80044c6:	430a      	orrs	r2, r1
 80044c8:	431a      	orrs	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f042 0201 	orr.w	r2, r2, #1
 80044d2:	611a      	str	r2, [r3, #16]
 80044d4:	e020      	b.n	8004518 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	691a      	ldr	r2, [r3, #16]
 80044dc:	4b32      	ldr	r3, [pc, #200]	@ (80045a8 <HAL_ADC_Init+0x40c>)
 80044de:	4013      	ands	r3, r2
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80044e4:	3a01      	subs	r2, #1
 80044e6:	0411      	lsls	r1, r2, #16
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80044ec:	4311      	orrs	r1, r2
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80044f2:	4311      	orrs	r1, r2
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80044f8:	430a      	orrs	r2, r1
 80044fa:	431a      	orrs	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f042 0201 	orr.w	r2, r2, #1
 8004504:	611a      	str	r2, [r3, #16]
 8004506:	e007      	b.n	8004518 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	691a      	ldr	r2, [r3, #16]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 0201 	bic.w	r2, r2, #1
 8004516:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	430a      	orrs	r2, r1
 800452c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a1b      	ldr	r2, [pc, #108]	@ (80045a0 <HAL_ADC_Init+0x404>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d002      	beq.n	800453e <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f001 fcd5 	bl	8005ee8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d10c      	bne.n	8004560 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800454c:	f023 010f 	bic.w	r1, r3, #15
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	69db      	ldr	r3, [r3, #28]
 8004554:	1e5a      	subs	r2, r3, #1
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	430a      	orrs	r2, r1
 800455c:	631a      	str	r2, [r3, #48]	@ 0x30
 800455e:	e007      	b.n	8004570 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f022 020f 	bic.w	r2, r2, #15
 800456e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004574:	f023 0303 	bic.w	r3, r3, #3
 8004578:	f043 0201 	orr.w	r2, r3, #1
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	661a      	str	r2, [r3, #96]	@ 0x60
 8004580:	e007      	b.n	8004592 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004586:	f043 0210 	orr.w	r2, r3, #16
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004592:	7ffb      	ldrb	r3, [r7, #31]
}
 8004594:	4618      	mov	r0, r3
 8004596:	3724      	adds	r7, #36	@ 0x24
 8004598:	46bd      	mov	sp, r7
 800459a:	bd90      	pop	{r4, r7, pc}
 800459c:	ffffbffc 	.word	0xffffbffc
 80045a0:	58026000 	.word	0x58026000
 80045a4:	fc00f81f 	.word	0xfc00f81f
 80045a8:	fc00f81e 	.word	0xfc00f81e

080045ac <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a5c      	ldr	r2, [pc, #368]	@ (800472c <HAL_ADC_Start+0x180>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d004      	beq.n	80045c8 <HAL_ADC_Start+0x1c>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a5b      	ldr	r2, [pc, #364]	@ (8004730 <HAL_ADC_Start+0x184>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d101      	bne.n	80045cc <HAL_ADC_Start+0x20>
 80045c8:	4b5a      	ldr	r3, [pc, #360]	@ (8004734 <HAL_ADC_Start+0x188>)
 80045ca:	e000      	b.n	80045ce <HAL_ADC_Start+0x22>
 80045cc:	4b5a      	ldr	r3, [pc, #360]	@ (8004738 <HAL_ADC_Start+0x18c>)
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7ff fcc8 	bl	8003f64 <LL_ADC_GetMultimode>
 80045d4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4618      	mov	r0, r3
 80045dc:	f7ff fda2 	bl	8004124 <LL_ADC_REG_IsConversionOngoing>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f040 809a 	bne.w	800471c <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d101      	bne.n	80045f6 <HAL_ADC_Start+0x4a>
 80045f2:	2302      	movs	r3, #2
 80045f4:	e095      	b.n	8004722 <HAL_ADC_Start+0x176>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2201      	movs	r2, #1
 80045fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f001 faf4 	bl	8005bec <ADC_Enable>
 8004604:	4603      	mov	r3, r0
 8004606:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004608:	7dfb      	ldrb	r3, [r7, #23]
 800460a:	2b00      	cmp	r3, #0
 800460c:	f040 8081 	bne.w	8004712 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004614:	4b49      	ldr	r3, [pc, #292]	@ (800473c <HAL_ADC_Start+0x190>)
 8004616:	4013      	ands	r3, r2
 8004618:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a42      	ldr	r2, [pc, #264]	@ (8004730 <HAL_ADC_Start+0x184>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d002      	beq.n	8004630 <HAL_ADC_Start+0x84>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	e000      	b.n	8004632 <HAL_ADC_Start+0x86>
 8004630:	4b3e      	ldr	r3, [pc, #248]	@ (800472c <HAL_ADC_Start+0x180>)
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	6812      	ldr	r2, [r2, #0]
 8004636:	4293      	cmp	r3, r2
 8004638:	d002      	beq.n	8004640 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d105      	bne.n	800464c <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004644:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004650:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004654:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004658:	d106      	bne.n	8004668 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800465e:	f023 0206 	bic.w	r2, r3, #6
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	665a      	str	r2, [r3, #100]	@ 0x64
 8004666:	e002      	b.n	800466e <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	221c      	movs	r2, #28
 8004674:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a2b      	ldr	r2, [pc, #172]	@ (8004730 <HAL_ADC_Start+0x184>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d002      	beq.n	800468e <HAL_ADC_Start+0xe2>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	e000      	b.n	8004690 <HAL_ADC_Start+0xe4>
 800468e:	4b27      	ldr	r3, [pc, #156]	@ (800472c <HAL_ADC_Start+0x180>)
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	6812      	ldr	r2, [r2, #0]
 8004694:	4293      	cmp	r3, r2
 8004696:	d008      	beq.n	80046aa <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d005      	beq.n	80046aa <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	2b05      	cmp	r3, #5
 80046a2:	d002      	beq.n	80046aa <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	2b09      	cmp	r3, #9
 80046a8:	d114      	bne.n	80046d4 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d007      	beq.n	80046c8 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046bc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80046c0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7ff fd01 	bl	80040d4 <LL_ADC_REG_StartConversion>
 80046d2:	e025      	b.n	8004720 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046d8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	661a      	str	r2, [r3, #96]	@ 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a12      	ldr	r2, [pc, #72]	@ (8004730 <HAL_ADC_Start+0x184>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d002      	beq.n	80046f0 <HAL_ADC_Start+0x144>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	e000      	b.n	80046f2 <HAL_ADC_Start+0x146>
 80046f0:	4b0e      	ldr	r3, [pc, #56]	@ (800472c <HAL_ADC_Start+0x180>)
 80046f2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00f      	beq.n	8004720 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004704:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004708:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	661a      	str	r2, [r3, #96]	@ 0x60
 8004710:	e006      	b.n	8004720 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800471a:	e001      	b.n	8004720 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800471c:	2302      	movs	r3, #2
 800471e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004720:	7dfb      	ldrb	r3, [r7, #23]
}
 8004722:	4618      	mov	r0, r3
 8004724:	3718      	adds	r7, #24
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	40022000 	.word	0x40022000
 8004730:	40022100 	.word	0x40022100
 8004734:	40022300 	.word	0x40022300
 8004738:	58026300 	.word	0x58026300
 800473c:	fffff0fe 	.word	0xfffff0fe

08004740 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800474e:	2b01      	cmp	r3, #1
 8004750:	d101      	bne.n	8004756 <HAL_ADC_Stop+0x16>
 8004752:	2302      	movs	r3, #2
 8004754:	e021      	b.n	800479a <HAL_ADC_Stop+0x5a>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800475e:	2103      	movs	r1, #3
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f001 f987 	bl	8005a74 <ADC_ConversionStop>
 8004766:	4603      	mov	r3, r0
 8004768:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800476a:	7bfb      	ldrb	r3, [r7, #15]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d10f      	bne.n	8004790 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f001 fac5 	bl	8005d00 <ADC_Disable>
 8004776:	4603      	mov	r3, r0
 8004778:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800477a:	7bfb      	ldrb	r3, [r7, #15]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d107      	bne.n	8004790 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004784:	4b07      	ldr	r3, [pc, #28]	@ (80047a4 <HAL_ADC_Stop+0x64>)
 8004786:	4013      	ands	r3, r2
 8004788:	f043 0201 	orr.w	r2, r3, #1
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004798:	7bfb      	ldrb	r3, [r7, #15]
}
 800479a:	4618      	mov	r0, r3
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	ffffeefe 	.word	0xffffeefe

080047a8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b088      	sub	sp, #32
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a72      	ldr	r2, [pc, #456]	@ (8004980 <HAL_ADC_PollForConversion+0x1d8>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d004      	beq.n	80047c6 <HAL_ADC_PollForConversion+0x1e>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a70      	ldr	r2, [pc, #448]	@ (8004984 <HAL_ADC_PollForConversion+0x1dc>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d101      	bne.n	80047ca <HAL_ADC_PollForConversion+0x22>
 80047c6:	4b70      	ldr	r3, [pc, #448]	@ (8004988 <HAL_ADC_PollForConversion+0x1e0>)
 80047c8:	e000      	b.n	80047cc <HAL_ADC_PollForConversion+0x24>
 80047ca:	4b70      	ldr	r3, [pc, #448]	@ (800498c <HAL_ADC_PollForConversion+0x1e4>)
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7ff fbc9 	bl	8003f64 <LL_ADC_GetMultimode>
 80047d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	695b      	ldr	r3, [r3, #20]
 80047d8:	2b08      	cmp	r3, #8
 80047da:	d102      	bne.n	80047e2 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80047dc:	2308      	movs	r3, #8
 80047de:	61fb      	str	r3, [r7, #28]
 80047e0:	e037      	b.n	8004852 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d005      	beq.n	80047f4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	2b05      	cmp	r3, #5
 80047ec:	d002      	beq.n	80047f4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	2b09      	cmp	r3, #9
 80047f2:	d111      	bne.n	8004818 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d007      	beq.n	8004812 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004806:	f043 0220 	orr.w	r2, r3, #32
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e0b1      	b.n	8004976 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004812:	2304      	movs	r3, #4
 8004814:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8004816:	e01c      	b.n	8004852 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a58      	ldr	r2, [pc, #352]	@ (8004980 <HAL_ADC_PollForConversion+0x1d8>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d004      	beq.n	800482c <HAL_ADC_PollForConversion+0x84>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a57      	ldr	r2, [pc, #348]	@ (8004984 <HAL_ADC_PollForConversion+0x1dc>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d101      	bne.n	8004830 <HAL_ADC_PollForConversion+0x88>
 800482c:	4b56      	ldr	r3, [pc, #344]	@ (8004988 <HAL_ADC_PollForConversion+0x1e0>)
 800482e:	e000      	b.n	8004832 <HAL_ADC_PollForConversion+0x8a>
 8004830:	4b56      	ldr	r3, [pc, #344]	@ (800498c <HAL_ADC_PollForConversion+0x1e4>)
 8004832:	4618      	mov	r0, r3
 8004834:	f7ff fba4 	bl	8003f80 <LL_ADC_GetMultiDMATransfer>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d007      	beq.n	800484e <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004842:	f043 0220 	orr.w	r2, r3, #32
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e093      	b.n	8004976 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800484e:	2304      	movs	r3, #4
 8004850:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004852:	f7ff f937 	bl	8003ac4 <HAL_GetTick>
 8004856:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004858:	e021      	b.n	800489e <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004860:	d01d      	beq.n	800489e <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004862:	f7ff f92f 	bl	8003ac4 <HAL_GetTick>
 8004866:	4602      	mov	r2, r0
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	683a      	ldr	r2, [r7, #0]
 800486e:	429a      	cmp	r2, r3
 8004870:	d302      	bcc.n	8004878 <HAL_ADC_PollForConversion+0xd0>
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d112      	bne.n	800489e <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	4013      	ands	r3, r2
 8004882:	2b00      	cmp	r3, #0
 8004884:	d10b      	bne.n	800489e <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800488a:	f043 0204 	orr.w	r2, r3, #4
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

          return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e06b      	b.n	8004976 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	4013      	ands	r3, r2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d0d6      	beq.n	800485a <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048b0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4618      	mov	r0, r3
 80048be:	f7ff fa57 	bl	8003d70 <LL_ADC_REG_IsTriggerSourceSWStart>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d01c      	beq.n	8004902 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	7e5b      	ldrb	r3, [r3, #25]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d118      	bne.n	8004902 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0308 	and.w	r3, r3, #8
 80048da:	2b08      	cmp	r3, #8
 80048dc:	d111      	bne.n	8004902 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048e2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	661a      	str	r2, [r3, #96]	@ 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d105      	bne.n	8004902 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048fa:	f043 0201 	orr.w	r2, r3, #1
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a1f      	ldr	r2, [pc, #124]	@ (8004984 <HAL_ADC_PollForConversion+0x1dc>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d002      	beq.n	8004912 <HAL_ADC_PollForConversion+0x16a>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	e000      	b.n	8004914 <HAL_ADC_PollForConversion+0x16c>
 8004912:	4b1b      	ldr	r3, [pc, #108]	@ (8004980 <HAL_ADC_PollForConversion+0x1d8>)
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	6812      	ldr	r2, [r2, #0]
 8004918:	4293      	cmp	r3, r2
 800491a:	d008      	beq.n	800492e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d005      	beq.n	800492e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	2b05      	cmp	r3, #5
 8004926:	d002      	beq.n	800492e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	2b09      	cmp	r3, #9
 800492c:	d104      	bne.n	8004938 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	61bb      	str	r3, [r7, #24]
 8004936:	e00c      	b.n	8004952 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a11      	ldr	r2, [pc, #68]	@ (8004984 <HAL_ADC_PollForConversion+0x1dc>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d002      	beq.n	8004948 <HAL_ADC_PollForConversion+0x1a0>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	e000      	b.n	800494a <HAL_ADC_PollForConversion+0x1a2>
 8004948:	4b0d      	ldr	r3, [pc, #52]	@ (8004980 <HAL_ADC_PollForConversion+0x1d8>)
 800494a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	2b08      	cmp	r3, #8
 8004956:	d104      	bne.n	8004962 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2208      	movs	r2, #8
 800495e:	601a      	str	r2, [r3, #0]
 8004960:	e008      	b.n	8004974 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d103      	bne.n	8004974 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	220c      	movs	r2, #12
 8004972:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3720      	adds	r7, #32
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	40022000 	.word	0x40022000
 8004984:	40022100 	.word	0x40022100
 8004988:	40022300 	.word	0x40022300
 800498c:	58026300 	.word	0x58026300

08004990 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a60      	ldr	r2, [pc, #384]	@ (8004b24 <HAL_ADC_Start_DMA+0x194>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d004      	beq.n	80049b0 <HAL_ADC_Start_DMA+0x20>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a5f      	ldr	r2, [pc, #380]	@ (8004b28 <HAL_ADC_Start_DMA+0x198>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d101      	bne.n	80049b4 <HAL_ADC_Start_DMA+0x24>
 80049b0:	4b5e      	ldr	r3, [pc, #376]	@ (8004b2c <HAL_ADC_Start_DMA+0x19c>)
 80049b2:	e000      	b.n	80049b6 <HAL_ADC_Start_DMA+0x26>
 80049b4:	4b5e      	ldr	r3, [pc, #376]	@ (8004b30 <HAL_ADC_Start_DMA+0x1a0>)
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7ff fad4 	bl	8003f64 <LL_ADC_GetMultimode>
 80049bc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7ff fbae 	bl	8004124 <LL_ADC_REG_IsConversionOngoing>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	f040 80a2 	bne.w	8004b14 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d101      	bne.n	80049de <HAL_ADC_Start_DMA+0x4e>
 80049da:	2302      	movs	r3, #2
 80049dc:	e09d      	b.n	8004b1a <HAL_ADC_Start_DMA+0x18a>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2201      	movs	r2, #1
 80049e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d006      	beq.n	80049fa <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	2b05      	cmp	r3, #5
 80049f0:	d003      	beq.n	80049fa <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	2b09      	cmp	r3, #9
 80049f6:	f040 8086 	bne.w	8004b06 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f001 f8f6 	bl	8005bec <ADC_Enable>
 8004a00:	4603      	mov	r3, r0
 8004a02:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004a04:	7dfb      	ldrb	r3, [r7, #23]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d178      	bne.n	8004afc <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004a0e:	4b49      	ldr	r3, [pc, #292]	@ (8004b34 <HAL_ADC_Start_DMA+0x1a4>)
 8004a10:	4013      	ands	r3, r2
 8004a12:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a42      	ldr	r2, [pc, #264]	@ (8004b28 <HAL_ADC_Start_DMA+0x198>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d002      	beq.n	8004a2a <HAL_ADC_Start_DMA+0x9a>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	e000      	b.n	8004a2c <HAL_ADC_Start_DMA+0x9c>
 8004a2a:	4b3e      	ldr	r3, [pc, #248]	@ (8004b24 <HAL_ADC_Start_DMA+0x194>)
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	6812      	ldr	r2, [r2, #0]
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d002      	beq.n	8004a3a <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d105      	bne.n	8004a46 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a3e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d006      	beq.n	8004a60 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a56:	f023 0206 	bic.w	r2, r3, #6
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	665a      	str	r2, [r3, #100]	@ 0x64
 8004a5e:	e002      	b.n	8004a66 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a6a:	4a33      	ldr	r2, [pc, #204]	@ (8004b38 <HAL_ADC_Start_DMA+0x1a8>)
 8004a6c:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a72:	4a32      	ldr	r2, [pc, #200]	@ (8004b3c <HAL_ADC_Start_DMA+0x1ac>)
 8004a74:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a7a:	4a31      	ldr	r2, [pc, #196]	@ (8004b40 <HAL_ADC_Start_DMA+0x1b0>)
 8004a7c:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	221c      	movs	r2, #28
 8004a84:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	685a      	ldr	r2, [r3, #4]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f042 0210 	orr.w	r2, r2, #16
 8004a9c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a28      	ldr	r2, [pc, #160]	@ (8004b44 <HAL_ADC_Start_DMA+0x1b4>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d10f      	bne.n	8004ac8 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004ab2:	005b      	lsls	r3, r3, #1
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	4610      	mov	r0, r2
 8004ab8:	f7ff f9bc 	bl	8003e34 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7ff f9a7 	bl	8003e14 <LL_ADC_EnableDMAReq>
 8004ac6:	e007      	b.n	8004ad8 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	4610      	mov	r0, r2
 8004ad4:	f7ff f98b 	bl	8003dee <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	3340      	adds	r3, #64	@ 0x40
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	68ba      	ldr	r2, [r7, #8]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f002 f88e 	bl	8006c08 <HAL_DMA_Start_IT>
 8004aec:	4603      	mov	r3, r0
 8004aee:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7ff faed 	bl	80040d4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004afa:	e00d      	b.n	8004b18 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 8004b04:	e008      	b.n	8004b18 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8004b12:	e001      	b.n	8004b18 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004b14:	2302      	movs	r3, #2
 8004b16:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004b18:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3718      	adds	r7, #24
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	40022000 	.word	0x40022000
 8004b28:	40022100 	.word	0x40022100
 8004b2c:	40022300 	.word	0x40022300
 8004b30:	58026300 	.word	0x58026300
 8004b34:	fffff0fe 	.word	0xfffff0fe
 8004b38:	08005dbf 	.word	0x08005dbf
 8004b3c:	08005e97 	.word	0x08005e97
 8004b40:	08005eb3 	.word	0x08005eb3
 8004b44:	58026000 	.word	0x58026000

08004b48 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	370c      	adds	r7, #12
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
	...

08004b64 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b08a      	sub	sp, #40	@ 0x28
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a87      	ldr	r2, [pc, #540]	@ (8004da4 <HAL_ADC_IRQHandler+0x240>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d004      	beq.n	8004b94 <HAL_ADC_IRQHandler+0x30>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a86      	ldr	r2, [pc, #536]	@ (8004da8 <HAL_ADC_IRQHandler+0x244>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d101      	bne.n	8004b98 <HAL_ADC_IRQHandler+0x34>
 8004b94:	4b85      	ldr	r3, [pc, #532]	@ (8004dac <HAL_ADC_IRQHandler+0x248>)
 8004b96:	e000      	b.n	8004b9a <HAL_ADC_IRQHandler+0x36>
 8004b98:	4b85      	ldr	r3, [pc, #532]	@ (8004db0 <HAL_ADC_IRQHandler+0x24c>)
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7ff f9e2 	bl	8003f64 <LL_ADC_GetMultimode>
 8004ba0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	f003 0302 	and.w	r3, r3, #2
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d017      	beq.n	8004bdc <HAL_ADC_IRQHandler+0x78>
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d012      	beq.n	8004bdc <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bba:	f003 0310 	and.w	r3, r3, #16
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d105      	bne.n	8004bce <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bc6:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f001 fac6 	bl	8006160 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2202      	movs	r2, #2
 8004bda:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	f003 0304 	and.w	r3, r3, #4
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d004      	beq.n	8004bf0 <HAL_ADC_IRQHandler+0x8c>
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	f003 0304 	and.w	r3, r3, #4
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d10a      	bne.n	8004c06 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f000 8083 	beq.w	8004d02 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	f003 0308 	and.w	r3, r3, #8
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d07d      	beq.n	8004d02 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c0a:	f003 0310 	and.w	r3, r3, #16
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d105      	bne.n	8004c1e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c16:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7ff f8a4 	bl	8003d70 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d062      	beq.n	8004cf4 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a5d      	ldr	r2, [pc, #372]	@ (8004da8 <HAL_ADC_IRQHandler+0x244>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d002      	beq.n	8004c3e <HAL_ADC_IRQHandler+0xda>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	e000      	b.n	8004c40 <HAL_ADC_IRQHandler+0xdc>
 8004c3e:	4b59      	ldr	r3, [pc, #356]	@ (8004da4 <HAL_ADC_IRQHandler+0x240>)
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	6812      	ldr	r2, [r2, #0]
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d008      	beq.n	8004c5a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d005      	beq.n	8004c5a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	2b05      	cmp	r3, #5
 8004c52:	d002      	beq.n	8004c5a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	2b09      	cmp	r3, #9
 8004c58:	d104      	bne.n	8004c64 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	623b      	str	r3, [r7, #32]
 8004c62:	e00c      	b.n	8004c7e <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a4f      	ldr	r2, [pc, #316]	@ (8004da8 <HAL_ADC_IRQHandler+0x244>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d002      	beq.n	8004c74 <HAL_ADC_IRQHandler+0x110>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	e000      	b.n	8004c76 <HAL_ADC_IRQHandler+0x112>
 8004c74:	4b4b      	ldr	r3, [pc, #300]	@ (8004da4 <HAL_ADC_IRQHandler+0x240>)
 8004c76:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004c7e:	6a3b      	ldr	r3, [r7, #32]
 8004c80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d135      	bne.n	8004cf4 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0308 	and.w	r3, r3, #8
 8004c92:	2b08      	cmp	r3, #8
 8004c94:	d12e      	bne.n	8004cf4 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7ff fa42 	bl	8004124 <LL_ADC_REG_IsConversionOngoing>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d11a      	bne.n	8004cdc <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f022 020c 	bic.w	r2, r2, #12
 8004cb4:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cba:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cc6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d112      	bne.n	8004cf4 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cd2:	f043 0201 	orr.w	r2, r3, #1
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	661a      	str	r2, [r3, #96]	@ 0x60
 8004cda:	e00b      	b.n	8004cf4 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ce0:	f043 0210 	orr.w	r2, r3, #16
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cec:	f043 0201 	orr.w	r2, r3, #1
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f7fc ff13 	bl	8001b20 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	220c      	movs	r2, #12
 8004d00:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	f003 0320 	and.w	r3, r3, #32
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d004      	beq.n	8004d16 <HAL_ADC_IRQHandler+0x1b2>
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	f003 0320 	and.w	r3, r3, #32
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10b      	bne.n	8004d2e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f000 80a0 	beq.w	8004e62 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 809a 	beq.w	8004e62 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d32:	f003 0310 	and.w	r3, r3, #16
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d105      	bne.n	8004d46 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d3e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7ff f88c 	bl	8003e68 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004d50:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7ff f80a 	bl	8003d70 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004d5c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a11      	ldr	r2, [pc, #68]	@ (8004da8 <HAL_ADC_IRQHandler+0x244>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d002      	beq.n	8004d6e <HAL_ADC_IRQHandler+0x20a>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	e000      	b.n	8004d70 <HAL_ADC_IRQHandler+0x20c>
 8004d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8004da4 <HAL_ADC_IRQHandler+0x240>)
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	6812      	ldr	r2, [r2, #0]
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d008      	beq.n	8004d8a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d005      	beq.n	8004d8a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	2b06      	cmp	r3, #6
 8004d82:	d002      	beq.n	8004d8a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	2b07      	cmp	r3, #7
 8004d88:	d104      	bne.n	8004d94 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	623b      	str	r3, [r7, #32]
 8004d92:	e014      	b.n	8004dbe <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a03      	ldr	r2, [pc, #12]	@ (8004da8 <HAL_ADC_IRQHandler+0x244>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d00a      	beq.n	8004db4 <HAL_ADC_IRQHandler+0x250>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	e008      	b.n	8004db6 <HAL_ADC_IRQHandler+0x252>
 8004da4:	40022000 	.word	0x40022000
 8004da8:	40022100 	.word	0x40022100
 8004dac:	40022300 	.word	0x40022300
 8004db0:	58026300 	.word	0x58026300
 8004db4:	4b84      	ldr	r3, [pc, #528]	@ (8004fc8 <HAL_ADC_IRQHandler+0x464>)
 8004db6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d047      	beq.n	8004e54 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004dc4:	6a3b      	ldr	r3, [r7, #32]
 8004dc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d007      	beq.n	8004dde <HAL_ADC_IRQHandler+0x27a>
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d03f      	beq.n	8004e54 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004dd4:	6a3b      	ldr	r3, [r7, #32]
 8004dd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d13a      	bne.n	8004e54 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004de8:	2b40      	cmp	r3, #64	@ 0x40
 8004dea:	d133      	bne.n	8004e54 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004dec:	6a3b      	ldr	r3, [r7, #32]
 8004dee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d12e      	bne.n	8004e54 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7ff f9ba 	bl	8004174 <LL_ADC_INJ_IsConversionOngoing>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d11a      	bne.n	8004e3c <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	685a      	ldr	r2, [r3, #4]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004e14:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e1a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d112      	bne.n	8004e54 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e32:	f043 0201 	orr.w	r2, r3, #1
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	661a      	str	r2, [r3, #96]	@ 0x60
 8004e3a:	e00b      	b.n	8004e54 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e40:	f043 0210 	orr.w	r2, r3, #16
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e4c:	f043 0201 	orr.w	r2, r3, #1
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f001 f95b 	bl	8006110 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2260      	movs	r2, #96	@ 0x60
 8004e60:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d011      	beq.n	8004e90 <HAL_ADC_IRQHandler+0x32c>
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00c      	beq.n	8004e90 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e7a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 f8b2 	bl	8004fec <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2280      	movs	r2, #128	@ 0x80
 8004e8e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d012      	beq.n	8004ec0 <HAL_ADC_IRQHandler+0x35c>
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00d      	beq.n	8004ec0 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ea8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f001 f941 	bl	8006138 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004ebe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d012      	beq.n	8004ef0 <HAL_ADC_IRQHandler+0x38c>
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00d      	beq.n	8004ef0 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ed8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f001 f933 	bl	800614c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004eee:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	f003 0310 	and.w	r3, r3, #16
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d043      	beq.n	8004f82 <HAL_ADC_IRQHandler+0x41e>
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	f003 0310 	and.w	r3, r3, #16
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d03e      	beq.n	8004f82 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d102      	bne.n	8004f12 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f10:	e021      	b.n	8004f56 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d015      	beq.n	8004f44 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a2a      	ldr	r2, [pc, #168]	@ (8004fc8 <HAL_ADC_IRQHandler+0x464>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d004      	beq.n	8004f2c <HAL_ADC_IRQHandler+0x3c8>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a29      	ldr	r2, [pc, #164]	@ (8004fcc <HAL_ADC_IRQHandler+0x468>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d101      	bne.n	8004f30 <HAL_ADC_IRQHandler+0x3cc>
 8004f2c:	4b28      	ldr	r3, [pc, #160]	@ (8004fd0 <HAL_ADC_IRQHandler+0x46c>)
 8004f2e:	e000      	b.n	8004f32 <HAL_ADC_IRQHandler+0x3ce>
 8004f30:	4b28      	ldr	r3, [pc, #160]	@ (8004fd4 <HAL_ADC_IRQHandler+0x470>)
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7ff f824 	bl	8003f80 <LL_ADC_GetMultiDMATransfer>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00b      	beq.n	8004f56 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f42:	e008      	b.n	8004f56 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	f003 0303 	and.w	r3, r3, #3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d001      	beq.n	8004f56 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8004f52:	2301      	movs	r3, #1
 8004f54:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d10e      	bne.n	8004f7a <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f60:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f6c:	f043 0202 	orr.w	r2, r3, #2
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f000 f843 	bl	8005000 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2210      	movs	r2, #16
 8004f80:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d018      	beq.n	8004fbe <HAL_ADC_IRQHandler+0x45a>
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d013      	beq.n	8004fbe <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f9a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fa6:	f043 0208 	orr.w	r2, r3, #8
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004fb6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f001 f8b3 	bl	8006124 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004fbe:	bf00      	nop
 8004fc0:	3728      	adds	r7, #40	@ 0x28
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	40022000 	.word	0x40022000
 8004fcc:	40022100 	.word	0x40022100
 8004fd0:	40022300 	.word	0x40022300
 8004fd4:	58026300 	.word	0x58026300

08004fd8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005014:	b590      	push	{r4, r7, lr}
 8005016:	b0b9      	sub	sp, #228	@ 0xe4
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800501e:	2300      	movs	r3, #0
 8005020:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005024:	2300      	movs	r3, #0
 8005026:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800502e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	4aab      	ldr	r2, [pc, #684]	@ (80052e4 <HAL_ADC_ConfigChannel+0x2d0>)
 8005036:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800503e:	2b01      	cmp	r3, #1
 8005040:	d102      	bne.n	8005048 <HAL_ADC_ConfigChannel+0x34>
 8005042:	2302      	movs	r3, #2
 8005044:	f000 bcfe 	b.w	8005a44 <HAL_ADC_ConfigChannel+0xa30>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4618      	mov	r0, r3
 8005056:	f7ff f865 	bl	8004124 <LL_ADC_REG_IsConversionOngoing>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	f040 84e2 	bne.w	8005a26 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	db38      	blt.n	80050dc <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a9e      	ldr	r2, [pc, #632]	@ (80052e8 <HAL_ADC_ConfigChannel+0x2d4>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d033      	beq.n	80050dc <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800507c:	2b00      	cmp	r3, #0
 800507e:	d108      	bne.n	8005092 <HAL_ADC_ConfigChannel+0x7e>
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	0e9b      	lsrs	r3, r3, #26
 8005086:	f003 031f 	and.w	r3, r3, #31
 800508a:	2201      	movs	r2, #1
 800508c:	fa02 f303 	lsl.w	r3, r2, r3
 8005090:	e01d      	b.n	80050ce <HAL_ADC_ConfigChannel+0xba>
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800509a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800509e:	fa93 f3a3 	rbit	r3, r3
 80050a2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80050a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80050aa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80050ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d101      	bne.n	80050ba <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 80050b6:	2320      	movs	r3, #32
 80050b8:	e004      	b.n	80050c4 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 80050ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80050be:	fab3 f383 	clz	r3, r3
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	f003 031f 	and.w	r3, r3, #31
 80050c8:	2201      	movs	r2, #1
 80050ca:	fa02 f303 	lsl.w	r3, r2, r3
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	6812      	ldr	r2, [r2, #0]
 80050d2:	69d1      	ldr	r1, [r2, #28]
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	6812      	ldr	r2, [r2, #0]
 80050d8:	430b      	orrs	r3, r1
 80050da:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6818      	ldr	r0, [r3, #0]
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	6859      	ldr	r1, [r3, #4]
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	461a      	mov	r2, r3
 80050ea:	f7fe fe54 	bl	8003d96 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7ff f816 	bl	8004124 <LL_ADC_REG_IsConversionOngoing>
 80050f8:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4618      	mov	r0, r3
 8005102:	f7ff f837 	bl	8004174 <LL_ADC_INJ_IsConversionOngoing>
 8005106:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800510a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800510e:	2b00      	cmp	r3, #0
 8005110:	f040 8270 	bne.w	80055f4 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005114:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005118:	2b00      	cmp	r3, #0
 800511a:	f040 826b 	bne.w	80055f4 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6818      	ldr	r0, [r3, #0]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	6819      	ldr	r1, [r3, #0]
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	461a      	mov	r2, r3
 800512c:	f7fe feaf 	bl	8003e8e <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a6c      	ldr	r2, [pc, #432]	@ (80052e8 <HAL_ADC_ConfigChannel+0x2d4>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d10d      	bne.n	8005156 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	695a      	ldr	r2, [r3, #20]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	08db      	lsrs	r3, r3, #3
 8005146:	f003 0303 	and.w	r3, r3, #3
 800514a:	005b      	lsls	r3, r3, #1
 800514c:	fa02 f303 	lsl.w	r3, r2, r3
 8005150:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005154:	e032      	b.n	80051bc <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005156:	4b65      	ldr	r3, [pc, #404]	@ (80052ec <HAL_ADC_ConfigChannel+0x2d8>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800515e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005162:	d10b      	bne.n	800517c <HAL_ADC_ConfigChannel+0x168>
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	695a      	ldr	r2, [r3, #20]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	089b      	lsrs	r3, r3, #2
 8005170:	f003 0307 	and.w	r3, r3, #7
 8005174:	005b      	lsls	r3, r3, #1
 8005176:	fa02 f303 	lsl.w	r3, r2, r3
 800517a:	e01d      	b.n	80051b8 <HAL_ADC_ConfigChannel+0x1a4>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	f003 0310 	and.w	r3, r3, #16
 8005186:	2b00      	cmp	r3, #0
 8005188:	d10b      	bne.n	80051a2 <HAL_ADC_ConfigChannel+0x18e>
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	695a      	ldr	r2, [r3, #20]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	089b      	lsrs	r3, r3, #2
 8005196:	f003 0307 	and.w	r3, r3, #7
 800519a:	005b      	lsls	r3, r3, #1
 800519c:	fa02 f303 	lsl.w	r3, r2, r3
 80051a0:	e00a      	b.n	80051b8 <HAL_ADC_ConfigChannel+0x1a4>
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	695a      	ldr	r2, [r3, #20]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	089b      	lsrs	r3, r3, #2
 80051ae:	f003 0304 	and.w	r3, r3, #4
 80051b2:	005b      	lsls	r3, r3, #1
 80051b4:	fa02 f303 	lsl.w	r3, r2, r3
 80051b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	2b04      	cmp	r3, #4
 80051c2:	d048      	beq.n	8005256 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6818      	ldr	r0, [r3, #0]
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	6919      	ldr	r1, [r3, #16]
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80051d4:	f7fe fcda 	bl	8003b8c <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a42      	ldr	r2, [pc, #264]	@ (80052e8 <HAL_ADC_ConfigChannel+0x2d4>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d119      	bne.n	8005216 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6818      	ldr	r0, [r3, #0]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	6919      	ldr	r1, [r3, #16]
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	69db      	ldr	r3, [r3, #28]
 80051ee:	461a      	mov	r2, r3
 80051f0:	f7fe fd72 	bl	8003cd8 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6818      	ldr	r0, [r3, #0]
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	6919      	ldr	r1, [r3, #16]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d102      	bne.n	800520c <HAL_ADC_ConfigChannel+0x1f8>
 8005206:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800520a:	e000      	b.n	800520e <HAL_ADC_ConfigChannel+0x1fa>
 800520c:	2300      	movs	r3, #0
 800520e:	461a      	mov	r2, r3
 8005210:	f7fe fd40 	bl	8003c94 <LL_ADC_SetOffsetSaturation>
 8005214:	e1ee      	b.n	80055f4 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6818      	ldr	r0, [r3, #0]
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	6919      	ldr	r1, [r3, #16]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005224:	2b01      	cmp	r3, #1
 8005226:	d102      	bne.n	800522e <HAL_ADC_ConfigChannel+0x21a>
 8005228:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800522c:	e000      	b.n	8005230 <HAL_ADC_ConfigChannel+0x21c>
 800522e:	2300      	movs	r3, #0
 8005230:	461a      	mov	r2, r3
 8005232:	f7fe fd0d 	bl	8003c50 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6818      	ldr	r0, [r3, #0]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	6919      	ldr	r1, [r3, #16]
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	7e1b      	ldrb	r3, [r3, #24]
 8005242:	2b01      	cmp	r3, #1
 8005244:	d102      	bne.n	800524c <HAL_ADC_ConfigChannel+0x238>
 8005246:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800524a:	e000      	b.n	800524e <HAL_ADC_ConfigChannel+0x23a>
 800524c:	2300      	movs	r3, #0
 800524e:	461a      	mov	r2, r3
 8005250:	f7fe fce4 	bl	8003c1c <LL_ADC_SetDataRightShift>
 8005254:	e1ce      	b.n	80055f4 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a23      	ldr	r2, [pc, #140]	@ (80052e8 <HAL_ADC_ConfigChannel+0x2d4>)
 800525c:	4293      	cmp	r3, r2
 800525e:	f040 8181 	bne.w	8005564 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2100      	movs	r1, #0
 8005268:	4618      	mov	r0, r3
 800526a:	f7fe fcc1 	bl	8003bf0 <LL_ADC_GetOffsetChannel>
 800526e:	4603      	mov	r3, r0
 8005270:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10a      	bne.n	800528e <HAL_ADC_ConfigChannel+0x27a>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2100      	movs	r1, #0
 800527e:	4618      	mov	r0, r3
 8005280:	f7fe fcb6 	bl	8003bf0 <LL_ADC_GetOffsetChannel>
 8005284:	4603      	mov	r3, r0
 8005286:	0e9b      	lsrs	r3, r3, #26
 8005288:	f003 021f 	and.w	r2, r3, #31
 800528c:	e01e      	b.n	80052cc <HAL_ADC_ConfigChannel+0x2b8>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2100      	movs	r1, #0
 8005294:	4618      	mov	r0, r3
 8005296:	f7fe fcab 	bl	8003bf0 <LL_ADC_GetOffsetChannel>
 800529a:	4603      	mov	r3, r0
 800529c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80052a4:	fa93 f3a3 	rbit	r3, r3
 80052a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 80052ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80052b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  if (value == 0U)
 80052b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d101      	bne.n	80052c0 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 80052bc:	2320      	movs	r3, #32
 80052be:	e004      	b.n	80052ca <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 80052c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80052c4:	fab3 f383 	clz	r3, r3
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	461a      	mov	r2, r3
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d10b      	bne.n	80052f0 <HAL_ADC_ConfigChannel+0x2dc>
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	0e9b      	lsrs	r3, r3, #26
 80052de:	f003 031f 	and.w	r3, r3, #31
 80052e2:	e01e      	b.n	8005322 <HAL_ADC_ConfigChannel+0x30e>
 80052e4:	47ff0000 	.word	0x47ff0000
 80052e8:	58026000 	.word	0x58026000
 80052ec:	5c001000 	.word	0x5c001000
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80052fc:	fa93 f3a3 	rbit	r3, r3
 8005300:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8005304:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005308:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800530c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d101      	bne.n	8005318 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8005314:	2320      	movs	r3, #32
 8005316:	e004      	b.n	8005322 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8005318:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800531c:	fab3 f383 	clz	r3, r3
 8005320:	b2db      	uxtb	r3, r3
 8005322:	429a      	cmp	r2, r3
 8005324:	d106      	bne.n	8005334 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2200      	movs	r2, #0
 800532c:	2100      	movs	r1, #0
 800532e:	4618      	mov	r0, r3
 8005330:	f7fe fcf4 	bl	8003d1c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2101      	movs	r1, #1
 800533a:	4618      	mov	r0, r3
 800533c:	f7fe fc58 	bl	8003bf0 <LL_ADC_GetOffsetChannel>
 8005340:	4603      	mov	r3, r0
 8005342:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005346:	2b00      	cmp	r3, #0
 8005348:	d10a      	bne.n	8005360 <HAL_ADC_ConfigChannel+0x34c>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2101      	movs	r1, #1
 8005350:	4618      	mov	r0, r3
 8005352:	f7fe fc4d 	bl	8003bf0 <LL_ADC_GetOffsetChannel>
 8005356:	4603      	mov	r3, r0
 8005358:	0e9b      	lsrs	r3, r3, #26
 800535a:	f003 021f 	and.w	r2, r3, #31
 800535e:	e01e      	b.n	800539e <HAL_ADC_ConfigChannel+0x38a>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2101      	movs	r1, #1
 8005366:	4618      	mov	r0, r3
 8005368:	f7fe fc42 	bl	8003bf0 <LL_ADC_GetOffsetChannel>
 800536c:	4603      	mov	r3, r0
 800536e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005372:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005376:	fa93 f3a3 	rbit	r3, r3
 800537a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800537e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005382:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8005386:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800538a:	2b00      	cmp	r3, #0
 800538c:	d101      	bne.n	8005392 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 800538e:	2320      	movs	r3, #32
 8005390:	e004      	b.n	800539c <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8005392:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005396:	fab3 f383 	clz	r3, r3
 800539a:	b2db      	uxtb	r3, r3
 800539c:	461a      	mov	r2, r3
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d105      	bne.n	80053b6 <HAL_ADC_ConfigChannel+0x3a2>
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	0e9b      	lsrs	r3, r3, #26
 80053b0:	f003 031f 	and.w	r3, r3, #31
 80053b4:	e018      	b.n	80053e8 <HAL_ADC_ConfigChannel+0x3d4>
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053be:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80053c2:	fa93 f3a3 	rbit	r3, r3
 80053c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80053ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80053ce:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80053d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 80053da:	2320      	movs	r3, #32
 80053dc:	e004      	b.n	80053e8 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 80053de:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80053e2:	fab3 f383 	clz	r3, r3
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d106      	bne.n	80053fa <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2200      	movs	r2, #0
 80053f2:	2101      	movs	r1, #1
 80053f4:	4618      	mov	r0, r3
 80053f6:	f7fe fc91 	bl	8003d1c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2102      	movs	r1, #2
 8005400:	4618      	mov	r0, r3
 8005402:	f7fe fbf5 	bl	8003bf0 <LL_ADC_GetOffsetChannel>
 8005406:	4603      	mov	r3, r0
 8005408:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800540c:	2b00      	cmp	r3, #0
 800540e:	d10a      	bne.n	8005426 <HAL_ADC_ConfigChannel+0x412>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2102      	movs	r1, #2
 8005416:	4618      	mov	r0, r3
 8005418:	f7fe fbea 	bl	8003bf0 <LL_ADC_GetOffsetChannel>
 800541c:	4603      	mov	r3, r0
 800541e:	0e9b      	lsrs	r3, r3, #26
 8005420:	f003 021f 	and.w	r2, r3, #31
 8005424:	e01e      	b.n	8005464 <HAL_ADC_ConfigChannel+0x450>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2102      	movs	r1, #2
 800542c:	4618      	mov	r0, r3
 800542e:	f7fe fbdf 	bl	8003bf0 <LL_ADC_GetOffsetChannel>
 8005432:	4603      	mov	r3, r0
 8005434:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005438:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800543c:	fa93 f3a3 	rbit	r3, r3
 8005440:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8005444:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005448:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800544c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005450:	2b00      	cmp	r3, #0
 8005452:	d101      	bne.n	8005458 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8005454:	2320      	movs	r3, #32
 8005456:	e004      	b.n	8005462 <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8005458:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800545c:	fab3 f383 	clz	r3, r3
 8005460:	b2db      	uxtb	r3, r3
 8005462:	461a      	mov	r2, r3
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800546c:	2b00      	cmp	r3, #0
 800546e:	d105      	bne.n	800547c <HAL_ADC_ConfigChannel+0x468>
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	0e9b      	lsrs	r3, r3, #26
 8005476:	f003 031f 	and.w	r3, r3, #31
 800547a:	e014      	b.n	80054a6 <HAL_ADC_ConfigChannel+0x492>
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005482:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005484:	fa93 f3a3 	rbit	r3, r3
 8005488:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800548a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800548c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8005490:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005494:	2b00      	cmp	r3, #0
 8005496:	d101      	bne.n	800549c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8005498:	2320      	movs	r3, #32
 800549a:	e004      	b.n	80054a6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800549c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80054a0:	fab3 f383 	clz	r3, r3
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d106      	bne.n	80054b8 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2200      	movs	r2, #0
 80054b0:	2102      	movs	r1, #2
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7fe fc32 	bl	8003d1c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2103      	movs	r1, #3
 80054be:	4618      	mov	r0, r3
 80054c0:	f7fe fb96 	bl	8003bf0 <LL_ADC_GetOffsetChannel>
 80054c4:	4603      	mov	r3, r0
 80054c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d10a      	bne.n	80054e4 <HAL_ADC_ConfigChannel+0x4d0>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2103      	movs	r1, #3
 80054d4:	4618      	mov	r0, r3
 80054d6:	f7fe fb8b 	bl	8003bf0 <LL_ADC_GetOffsetChannel>
 80054da:	4603      	mov	r3, r0
 80054dc:	0e9b      	lsrs	r3, r3, #26
 80054de:	f003 021f 	and.w	r2, r3, #31
 80054e2:	e017      	b.n	8005514 <HAL_ADC_ConfigChannel+0x500>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2103      	movs	r1, #3
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7fe fb80 	bl	8003bf0 <LL_ADC_GetOffsetChannel>
 80054f0:	4603      	mov	r3, r0
 80054f2:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80054f6:	fa93 f3a3 	rbit	r3, r3
 80054fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80054fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054fe:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8005500:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8005506:	2320      	movs	r3, #32
 8005508:	e003      	b.n	8005512 <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 800550a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800550c:	fab3 f383 	clz	r3, r3
 8005510:	b2db      	uxtb	r3, r3
 8005512:	461a      	mov	r2, r3
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800551c:	2b00      	cmp	r3, #0
 800551e:	d105      	bne.n	800552c <HAL_ADC_ConfigChannel+0x518>
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	0e9b      	lsrs	r3, r3, #26
 8005526:	f003 031f 	and.w	r3, r3, #31
 800552a:	e011      	b.n	8005550 <HAL_ADC_ConfigChannel+0x53c>
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005532:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005534:	fa93 f3a3 	rbit	r3, r3
 8005538:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800553a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800553c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800553e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005540:	2b00      	cmp	r3, #0
 8005542:	d101      	bne.n	8005548 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8005544:	2320      	movs	r3, #32
 8005546:	e003      	b.n	8005550 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8005548:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800554a:	fab3 f383 	clz	r3, r3
 800554e:	b2db      	uxtb	r3, r3
 8005550:	429a      	cmp	r2, r3
 8005552:	d14f      	bne.n	80055f4 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2200      	movs	r2, #0
 800555a:	2103      	movs	r1, #3
 800555c:	4618      	mov	r0, r3
 800555e:	f7fe fbdd 	bl	8003d1c <LL_ADC_SetOffsetState>
 8005562:	e047      	b.n	80055f4 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800556a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	069b      	lsls	r3, r3, #26
 8005574:	429a      	cmp	r2, r3
 8005576:	d107      	bne.n	8005588 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005586:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800558e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	069b      	lsls	r3, r3, #26
 8005598:	429a      	cmp	r2, r3
 800559a:	d107      	bne.n	80055ac <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80055aa:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80055b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	069b      	lsls	r3, r3, #26
 80055bc:	429a      	cmp	r2, r3
 80055be:	d107      	bne.n	80055d0 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80055ce:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	069b      	lsls	r3, r3, #26
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d107      	bne.n	80055f4 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80055f2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4618      	mov	r0, r3
 80055fa:	f7fe fd45 	bl	8004088 <LL_ADC_IsEnabled>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	f040 8219 	bne.w	8005a38 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6818      	ldr	r0, [r3, #0]
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	6819      	ldr	r1, [r3, #0]
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	461a      	mov	r2, r3
 8005614:	f7fe fc66 	bl	8003ee4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	4aa1      	ldr	r2, [pc, #644]	@ (80058a4 <HAL_ADC_ConfigChannel+0x890>)
 800561e:	4293      	cmp	r3, r2
 8005620:	f040 812e 	bne.w	8005880 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005630:	2b00      	cmp	r3, #0
 8005632:	d10b      	bne.n	800564c <HAL_ADC_ConfigChannel+0x638>
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	0e9b      	lsrs	r3, r3, #26
 800563a:	3301      	adds	r3, #1
 800563c:	f003 031f 	and.w	r3, r3, #31
 8005640:	2b09      	cmp	r3, #9
 8005642:	bf94      	ite	ls
 8005644:	2301      	movls	r3, #1
 8005646:	2300      	movhi	r3, #0
 8005648:	b2db      	uxtb	r3, r3
 800564a:	e019      	b.n	8005680 <HAL_ADC_ConfigChannel+0x66c>
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005652:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005654:	fa93 f3a3 	rbit	r3, r3
 8005658:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800565a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800565c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800565e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005660:	2b00      	cmp	r3, #0
 8005662:	d101      	bne.n	8005668 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8005664:	2320      	movs	r3, #32
 8005666:	e003      	b.n	8005670 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8005668:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800566a:	fab3 f383 	clz	r3, r3
 800566e:	b2db      	uxtb	r3, r3
 8005670:	3301      	adds	r3, #1
 8005672:	f003 031f 	and.w	r3, r3, #31
 8005676:	2b09      	cmp	r3, #9
 8005678:	bf94      	ite	ls
 800567a:	2301      	movls	r3, #1
 800567c:	2300      	movhi	r3, #0
 800567e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005680:	2b00      	cmp	r3, #0
 8005682:	d079      	beq.n	8005778 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800568c:	2b00      	cmp	r3, #0
 800568e:	d107      	bne.n	80056a0 <HAL_ADC_ConfigChannel+0x68c>
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	0e9b      	lsrs	r3, r3, #26
 8005696:	3301      	adds	r3, #1
 8005698:	069b      	lsls	r3, r3, #26
 800569a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800569e:	e015      	b.n	80056cc <HAL_ADC_ConfigChannel+0x6b8>
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056a8:	fa93 f3a3 	rbit	r3, r3
 80056ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80056ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056b0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80056b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d101      	bne.n	80056bc <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 80056b8:	2320      	movs	r3, #32
 80056ba:	e003      	b.n	80056c4 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 80056bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056be:	fab3 f383 	clz	r3, r3
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	3301      	adds	r3, #1
 80056c6:	069b      	lsls	r3, r3, #26
 80056c8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d109      	bne.n	80056ec <HAL_ADC_ConfigChannel+0x6d8>
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	0e9b      	lsrs	r3, r3, #26
 80056de:	3301      	adds	r3, #1
 80056e0:	f003 031f 	and.w	r3, r3, #31
 80056e4:	2101      	movs	r1, #1
 80056e6:	fa01 f303 	lsl.w	r3, r1, r3
 80056ea:	e017      	b.n	800571c <HAL_ADC_ConfigChannel+0x708>
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056f4:	fa93 f3a3 	rbit	r3, r3
 80056f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80056fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056fc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80056fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005700:	2b00      	cmp	r3, #0
 8005702:	d101      	bne.n	8005708 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8005704:	2320      	movs	r3, #32
 8005706:	e003      	b.n	8005710 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8005708:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800570a:	fab3 f383 	clz	r3, r3
 800570e:	b2db      	uxtb	r3, r3
 8005710:	3301      	adds	r3, #1
 8005712:	f003 031f 	and.w	r3, r3, #31
 8005716:	2101      	movs	r1, #1
 8005718:	fa01 f303 	lsl.w	r3, r1, r3
 800571c:	ea42 0103 	orr.w	r1, r2, r3
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005728:	2b00      	cmp	r3, #0
 800572a:	d10a      	bne.n	8005742 <HAL_ADC_ConfigChannel+0x72e>
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	0e9b      	lsrs	r3, r3, #26
 8005732:	3301      	adds	r3, #1
 8005734:	f003 021f 	and.w	r2, r3, #31
 8005738:	4613      	mov	r3, r2
 800573a:	005b      	lsls	r3, r3, #1
 800573c:	4413      	add	r3, r2
 800573e:	051b      	lsls	r3, r3, #20
 8005740:	e018      	b.n	8005774 <HAL_ADC_ConfigChannel+0x760>
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800574a:	fa93 f3a3 	rbit	r3, r3
 800574e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8005750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005752:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8005754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005756:	2b00      	cmp	r3, #0
 8005758:	d101      	bne.n	800575e <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 800575a:	2320      	movs	r3, #32
 800575c:	e003      	b.n	8005766 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 800575e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005760:	fab3 f383 	clz	r3, r3
 8005764:	b2db      	uxtb	r3, r3
 8005766:	3301      	adds	r3, #1
 8005768:	f003 021f 	and.w	r2, r3, #31
 800576c:	4613      	mov	r3, r2
 800576e:	005b      	lsls	r3, r3, #1
 8005770:	4413      	add	r3, r2
 8005772:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005774:	430b      	orrs	r3, r1
 8005776:	e07e      	b.n	8005876 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005780:	2b00      	cmp	r3, #0
 8005782:	d107      	bne.n	8005794 <HAL_ADC_ConfigChannel+0x780>
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	0e9b      	lsrs	r3, r3, #26
 800578a:	3301      	adds	r3, #1
 800578c:	069b      	lsls	r3, r3, #26
 800578e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005792:	e015      	b.n	80057c0 <HAL_ADC_ConfigChannel+0x7ac>
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800579a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800579c:	fa93 f3a3 	rbit	r3, r3
 80057a0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80057a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80057a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d101      	bne.n	80057b0 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 80057ac:	2320      	movs	r3, #32
 80057ae:	e003      	b.n	80057b8 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 80057b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057b2:	fab3 f383 	clz	r3, r3
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	3301      	adds	r3, #1
 80057ba:	069b      	lsls	r3, r3, #26
 80057bc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d109      	bne.n	80057e0 <HAL_ADC_ConfigChannel+0x7cc>
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	0e9b      	lsrs	r3, r3, #26
 80057d2:	3301      	adds	r3, #1
 80057d4:	f003 031f 	and.w	r3, r3, #31
 80057d8:	2101      	movs	r1, #1
 80057da:	fa01 f303 	lsl.w	r3, r1, r3
 80057de:	e017      	b.n	8005810 <HAL_ADC_ConfigChannel+0x7fc>
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	fa93 f3a3 	rbit	r3, r3
 80057ec:	61bb      	str	r3, [r7, #24]
  return result;
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80057f2:	6a3b      	ldr	r3, [r7, #32]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d101      	bne.n	80057fc <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 80057f8:	2320      	movs	r3, #32
 80057fa:	e003      	b.n	8005804 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 80057fc:	6a3b      	ldr	r3, [r7, #32]
 80057fe:	fab3 f383 	clz	r3, r3
 8005802:	b2db      	uxtb	r3, r3
 8005804:	3301      	adds	r3, #1
 8005806:	f003 031f 	and.w	r3, r3, #31
 800580a:	2101      	movs	r1, #1
 800580c:	fa01 f303 	lsl.w	r3, r1, r3
 8005810:	ea42 0103 	orr.w	r1, r2, r3
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10d      	bne.n	800583c <HAL_ADC_ConfigChannel+0x828>
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	0e9b      	lsrs	r3, r3, #26
 8005826:	3301      	adds	r3, #1
 8005828:	f003 021f 	and.w	r2, r3, #31
 800582c:	4613      	mov	r3, r2
 800582e:	005b      	lsls	r3, r3, #1
 8005830:	4413      	add	r3, r2
 8005832:	3b1e      	subs	r3, #30
 8005834:	051b      	lsls	r3, r3, #20
 8005836:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800583a:	e01b      	b.n	8005874 <HAL_ADC_ConfigChannel+0x860>
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	fa93 f3a3 	rbit	r3, r3
 8005848:	60fb      	str	r3, [r7, #12]
  return result;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d101      	bne.n	8005858 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8005854:	2320      	movs	r3, #32
 8005856:	e003      	b.n	8005860 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	fab3 f383 	clz	r3, r3
 800585e:	b2db      	uxtb	r3, r3
 8005860:	3301      	adds	r3, #1
 8005862:	f003 021f 	and.w	r2, r3, #31
 8005866:	4613      	mov	r3, r2
 8005868:	005b      	lsls	r3, r3, #1
 800586a:	4413      	add	r3, r2
 800586c:	3b1e      	subs	r3, #30
 800586e:	051b      	lsls	r3, r3, #20
 8005870:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005874:	430b      	orrs	r3, r1
 8005876:	683a      	ldr	r2, [r7, #0]
 8005878:	6892      	ldr	r2, [r2, #8]
 800587a:	4619      	mov	r1, r3
 800587c:	f7fe fb07 	bl	8003e8e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	f280 80d7 	bge.w	8005a38 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a06      	ldr	r2, [pc, #24]	@ (80058a8 <HAL_ADC_ConfigChannel+0x894>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d004      	beq.n	800589e <HAL_ADC_ConfigChannel+0x88a>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a04      	ldr	r2, [pc, #16]	@ (80058ac <HAL_ADC_ConfigChannel+0x898>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d10a      	bne.n	80058b4 <HAL_ADC_ConfigChannel+0x8a0>
 800589e:	4b04      	ldr	r3, [pc, #16]	@ (80058b0 <HAL_ADC_ConfigChannel+0x89c>)
 80058a0:	e009      	b.n	80058b6 <HAL_ADC_ConfigChannel+0x8a2>
 80058a2:	bf00      	nop
 80058a4:	47ff0000 	.word	0x47ff0000
 80058a8:	40022000 	.word	0x40022000
 80058ac:	40022100 	.word	0x40022100
 80058b0:	40022300 	.word	0x40022300
 80058b4:	4b65      	ldr	r3, [pc, #404]	@ (8005a4c <HAL_ADC_ConfigChannel+0xa38>)
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7fe f95a 	bl	8003b70 <LL_ADC_GetCommonPathInternalCh>
 80058bc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a62      	ldr	r2, [pc, #392]	@ (8005a50 <HAL_ADC_ConfigChannel+0xa3c>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d004      	beq.n	80058d4 <HAL_ADC_ConfigChannel+0x8c0>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a61      	ldr	r2, [pc, #388]	@ (8005a54 <HAL_ADC_ConfigChannel+0xa40>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d10e      	bne.n	80058f2 <HAL_ADC_ConfigChannel+0x8de>
 80058d4:	485e      	ldr	r0, [pc, #376]	@ (8005a50 <HAL_ADC_ConfigChannel+0xa3c>)
 80058d6:	f7fe fbd7 	bl	8004088 <LL_ADC_IsEnabled>
 80058da:	4604      	mov	r4, r0
 80058dc:	485d      	ldr	r0, [pc, #372]	@ (8005a54 <HAL_ADC_ConfigChannel+0xa40>)
 80058de:	f7fe fbd3 	bl	8004088 <LL_ADC_IsEnabled>
 80058e2:	4603      	mov	r3, r0
 80058e4:	4323      	orrs	r3, r4
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	bf0c      	ite	eq
 80058ea:	2301      	moveq	r3, #1
 80058ec:	2300      	movne	r3, #0
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	e008      	b.n	8005904 <HAL_ADC_ConfigChannel+0x8f0>
 80058f2:	4859      	ldr	r0, [pc, #356]	@ (8005a58 <HAL_ADC_ConfigChannel+0xa44>)
 80058f4:	f7fe fbc8 	bl	8004088 <LL_ADC_IsEnabled>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	bf0c      	ite	eq
 80058fe:	2301      	moveq	r3, #1
 8005900:	2300      	movne	r3, #0
 8005902:	b2db      	uxtb	r3, r3
 8005904:	2b00      	cmp	r3, #0
 8005906:	f000 8084 	beq.w	8005a12 <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a53      	ldr	r2, [pc, #332]	@ (8005a5c <HAL_ADC_ConfigChannel+0xa48>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d132      	bne.n	800597a <HAL_ADC_ConfigChannel+0x966>
 8005914:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005918:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800591c:	2b00      	cmp	r3, #0
 800591e:	d12c      	bne.n	800597a <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a4c      	ldr	r2, [pc, #304]	@ (8005a58 <HAL_ADC_ConfigChannel+0xa44>)
 8005926:	4293      	cmp	r3, r2
 8005928:	f040 8086 	bne.w	8005a38 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a47      	ldr	r2, [pc, #284]	@ (8005a50 <HAL_ADC_ConfigChannel+0xa3c>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d004      	beq.n	8005940 <HAL_ADC_ConfigChannel+0x92c>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a46      	ldr	r2, [pc, #280]	@ (8005a54 <HAL_ADC_ConfigChannel+0xa40>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d101      	bne.n	8005944 <HAL_ADC_ConfigChannel+0x930>
 8005940:	4a47      	ldr	r2, [pc, #284]	@ (8005a60 <HAL_ADC_ConfigChannel+0xa4c>)
 8005942:	e000      	b.n	8005946 <HAL_ADC_ConfigChannel+0x932>
 8005944:	4a41      	ldr	r2, [pc, #260]	@ (8005a4c <HAL_ADC_ConfigChannel+0xa38>)
 8005946:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800594a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800594e:	4619      	mov	r1, r3
 8005950:	4610      	mov	r0, r2
 8005952:	f7fe f8fa 	bl	8003b4a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005956:	4b43      	ldr	r3, [pc, #268]	@ (8005a64 <HAL_ADC_ConfigChannel+0xa50>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	099b      	lsrs	r3, r3, #6
 800595c:	4a42      	ldr	r2, [pc, #264]	@ (8005a68 <HAL_ADC_ConfigChannel+0xa54>)
 800595e:	fba2 2303 	umull	r2, r3, r2, r3
 8005962:	099b      	lsrs	r3, r3, #6
 8005964:	3301      	adds	r3, #1
 8005966:	005b      	lsls	r3, r3, #1
 8005968:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800596a:	e002      	b.n	8005972 <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	3b01      	subs	r3, #1
 8005970:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d1f9      	bne.n	800596c <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005978:	e05e      	b.n	8005a38 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a3b      	ldr	r2, [pc, #236]	@ (8005a6c <HAL_ADC_ConfigChannel+0xa58>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d120      	bne.n	80059c6 <HAL_ADC_ConfigChannel+0x9b2>
 8005984:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005988:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800598c:	2b00      	cmp	r3, #0
 800598e:	d11a      	bne.n	80059c6 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a30      	ldr	r2, [pc, #192]	@ (8005a58 <HAL_ADC_ConfigChannel+0xa44>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d14e      	bne.n	8005a38 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a2c      	ldr	r2, [pc, #176]	@ (8005a50 <HAL_ADC_ConfigChannel+0xa3c>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d004      	beq.n	80059ae <HAL_ADC_ConfigChannel+0x99a>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a2a      	ldr	r2, [pc, #168]	@ (8005a54 <HAL_ADC_ConfigChannel+0xa40>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d101      	bne.n	80059b2 <HAL_ADC_ConfigChannel+0x99e>
 80059ae:	4a2c      	ldr	r2, [pc, #176]	@ (8005a60 <HAL_ADC_ConfigChannel+0xa4c>)
 80059b0:	e000      	b.n	80059b4 <HAL_ADC_ConfigChannel+0x9a0>
 80059b2:	4a26      	ldr	r2, [pc, #152]	@ (8005a4c <HAL_ADC_ConfigChannel+0xa38>)
 80059b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80059b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80059bc:	4619      	mov	r1, r3
 80059be:	4610      	mov	r0, r2
 80059c0:	f7fe f8c3 	bl	8003b4a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80059c4:	e038      	b.n	8005a38 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a29      	ldr	r2, [pc, #164]	@ (8005a70 <HAL_ADC_ConfigChannel+0xa5c>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d133      	bne.n	8005a38 <HAL_ADC_ConfigChannel+0xa24>
 80059d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80059d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d12d      	bne.n	8005a38 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a1d      	ldr	r2, [pc, #116]	@ (8005a58 <HAL_ADC_ConfigChannel+0xa44>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d128      	bne.n	8005a38 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a19      	ldr	r2, [pc, #100]	@ (8005a50 <HAL_ADC_ConfigChannel+0xa3c>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d004      	beq.n	80059fa <HAL_ADC_ConfigChannel+0x9e6>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a17      	ldr	r2, [pc, #92]	@ (8005a54 <HAL_ADC_ConfigChannel+0xa40>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d101      	bne.n	80059fe <HAL_ADC_ConfigChannel+0x9ea>
 80059fa:	4a19      	ldr	r2, [pc, #100]	@ (8005a60 <HAL_ADC_ConfigChannel+0xa4c>)
 80059fc:	e000      	b.n	8005a00 <HAL_ADC_ConfigChannel+0x9ec>
 80059fe:	4a13      	ldr	r2, [pc, #76]	@ (8005a4c <HAL_ADC_ConfigChannel+0xa38>)
 8005a00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005a04:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005a08:	4619      	mov	r1, r3
 8005a0a:	4610      	mov	r0, r2
 8005a0c:	f7fe f89d 	bl	8003b4a <LL_ADC_SetCommonPathInternalCh>
 8005a10:	e012      	b.n	8005a38 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a16:	f043 0220 	orr.w	r2, r3, #32
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8005a24:	e008      	b.n	8005a38 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a2a:	f043 0220 	orr.w	r2, r3, #32
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005a40:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	37e4      	adds	r7, #228	@ 0xe4
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd90      	pop	{r4, r7, pc}
 8005a4c:	58026300 	.word	0x58026300
 8005a50:	40022000 	.word	0x40022000
 8005a54:	40022100 	.word	0x40022100
 8005a58:	58026000 	.word	0x58026000
 8005a5c:	c7520000 	.word	0xc7520000
 8005a60:	40022300 	.word	0x40022300
 8005a64:	24000024 	.word	0x24000024
 8005a68:	053e2d63 	.word	0x053e2d63
 8005a6c:	c3210000 	.word	0xc3210000
 8005a70:	cb840000 	.word	0xcb840000

08005a74 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b088      	sub	sp, #32
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f7fe fb4a 	bl	8004124 <LL_ADC_REG_IsConversionOngoing>
 8005a90:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4618      	mov	r0, r3
 8005a98:	f7fe fb6c 	bl	8004174 <LL_ADC_INJ_IsConversionOngoing>
 8005a9c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d103      	bne.n	8005aac <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	f000 8098 	beq.w	8005bdc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d02a      	beq.n	8005b10 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	7e5b      	ldrb	r3, [r3, #25]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d126      	bne.n	8005b10 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	7e1b      	ldrb	r3, [r3, #24]
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d122      	bne.n	8005b10 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8005aca:	2301      	movs	r3, #1
 8005acc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005ace:	e014      	b.n	8005afa <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	4a45      	ldr	r2, [pc, #276]	@ (8005be8 <ADC_ConversionStop+0x174>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d90d      	bls.n	8005af4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005adc:	f043 0210 	orr.w	r2, r3, #16
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ae8:	f043 0201 	orr.w	r2, r3, #1
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e074      	b.n	8005bde <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	3301      	adds	r3, #1
 8005af8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b04:	2b40      	cmp	r3, #64	@ 0x40
 8005b06:	d1e3      	bne.n	8005ad0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2240      	movs	r2, #64	@ 0x40
 8005b0e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d014      	beq.n	8005b40 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7fe fb02 	bl	8004124 <LL_ADC_REG_IsConversionOngoing>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00c      	beq.n	8005b40 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7fe fabf 	bl	80040ae <LL_ADC_IsDisableOngoing>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d104      	bne.n	8005b40 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7fe fade 	bl	80040fc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d014      	beq.n	8005b70 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f7fe fb12 	bl	8004174 <LL_ADC_INJ_IsConversionOngoing>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00c      	beq.n	8005b70 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7fe faa7 	bl	80040ae <LL_ADC_IsDisableOngoing>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d104      	bne.n	8005b70 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7fe faee 	bl	800414c <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d005      	beq.n	8005b82 <ADC_ConversionStop+0x10e>
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	2b03      	cmp	r3, #3
 8005b7a:	d105      	bne.n	8005b88 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8005b7c:	230c      	movs	r3, #12
 8005b7e:	617b      	str	r3, [r7, #20]
        break;
 8005b80:	e005      	b.n	8005b8e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8005b82:	2308      	movs	r3, #8
 8005b84:	617b      	str	r3, [r7, #20]
        break;
 8005b86:	e002      	b.n	8005b8e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005b88:	2304      	movs	r3, #4
 8005b8a:	617b      	str	r3, [r7, #20]
        break;
 8005b8c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8005b8e:	f7fd ff99 	bl	8003ac4 <HAL_GetTick>
 8005b92:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005b94:	e01b      	b.n	8005bce <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005b96:	f7fd ff95 	bl	8003ac4 <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	2b05      	cmp	r3, #5
 8005ba2:	d914      	bls.n	8005bce <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	689a      	ldr	r2, [r3, #8]
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	4013      	ands	r3, r2
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d00d      	beq.n	8005bce <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bb6:	f043 0210 	orr.w	r2, r3, #16
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bc2:	f043 0201 	orr.w	r2, r3, #1
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e007      	b.n	8005bde <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	689a      	ldr	r2, [r3, #8]
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d1dc      	bne.n	8005b96 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3720      	adds	r7, #32
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	000cdbff 	.word	0x000cdbff

08005bec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f7fe fa45 	bl	8004088 <LL_ADC_IsEnabled>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d16e      	bne.n	8005ce2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	689a      	ldr	r2, [r3, #8]
 8005c0a:	4b38      	ldr	r3, [pc, #224]	@ (8005cec <ADC_Enable+0x100>)
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d00d      	beq.n	8005c2e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c16:	f043 0210 	orr.w	r2, r3, #16
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c22:	f043 0201 	orr.w	r2, r3, #1
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e05a      	b.n	8005ce4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7fe fa00 	bl	8004038 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005c38:	f7fd ff44 	bl	8003ac4 <HAL_GetTick>
 8005c3c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a2b      	ldr	r2, [pc, #172]	@ (8005cf0 <ADC_Enable+0x104>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d004      	beq.n	8005c52 <ADC_Enable+0x66>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a29      	ldr	r2, [pc, #164]	@ (8005cf4 <ADC_Enable+0x108>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d101      	bne.n	8005c56 <ADC_Enable+0x6a>
 8005c52:	4b29      	ldr	r3, [pc, #164]	@ (8005cf8 <ADC_Enable+0x10c>)
 8005c54:	e000      	b.n	8005c58 <ADC_Enable+0x6c>
 8005c56:	4b29      	ldr	r3, [pc, #164]	@ (8005cfc <ADC_Enable+0x110>)
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f7fe f983 	bl	8003f64 <LL_ADC_GetMultimode>
 8005c5e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a23      	ldr	r2, [pc, #140]	@ (8005cf4 <ADC_Enable+0x108>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d002      	beq.n	8005c70 <ADC_Enable+0x84>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	e000      	b.n	8005c72 <ADC_Enable+0x86>
 8005c70:	4b1f      	ldr	r3, [pc, #124]	@ (8005cf0 <ADC_Enable+0x104>)
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	6812      	ldr	r2, [r2, #0]
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d02c      	beq.n	8005cd4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d130      	bne.n	8005ce2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005c80:	e028      	b.n	8005cd4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7fe f9fe 	bl	8004088 <LL_ADC_IsEnabled>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d104      	bne.n	8005c9c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7fe f9ce 	bl	8004038 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005c9c:	f7fd ff12 	bl	8003ac4 <HAL_GetTick>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d914      	bls.n	8005cd4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0301 	and.w	r3, r3, #1
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d00d      	beq.n	8005cd4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cbc:	f043 0210 	orr.w	r2, r3, #16
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cc8:	f043 0201 	orr.w	r2, r3, #1
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e007      	b.n	8005ce4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 0301 	and.w	r3, r3, #1
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d1cf      	bne.n	8005c82 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3710      	adds	r7, #16
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	8000003f 	.word	0x8000003f
 8005cf0:	40022000 	.word	0x40022000
 8005cf4:	40022100 	.word	0x40022100
 8005cf8:	40022300 	.word	0x40022300
 8005cfc:	58026300 	.word	0x58026300

08005d00 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f7fe f9ce 	bl	80040ae <LL_ADC_IsDisableOngoing>
 8005d12:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7fe f9b5 	bl	8004088 <LL_ADC_IsEnabled>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d047      	beq.n	8005db4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d144      	bne.n	8005db4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f003 030d 	and.w	r3, r3, #13
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d10c      	bne.n	8005d52 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f7fe f98f 	bl	8004060 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2203      	movs	r2, #3
 8005d48:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005d4a:	f7fd febb 	bl	8003ac4 <HAL_GetTick>
 8005d4e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005d50:	e029      	b.n	8005da6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d56:	f043 0210 	orr.w	r2, r3, #16
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d62:	f043 0201 	orr.w	r2, r3, #1
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e023      	b.n	8005db6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005d6e:	f7fd fea9 	bl	8003ac4 <HAL_GetTick>
 8005d72:	4602      	mov	r2, r0
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d914      	bls.n	8005da6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	f003 0301 	and.w	r3, r3, #1
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00d      	beq.n	8005da6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d8e:	f043 0210 	orr.w	r2, r3, #16
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d9a:	f043 0201 	orr.w	r2, r3, #1
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e007      	b.n	8005db6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f003 0301 	and.w	r3, r3, #1
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1dc      	bne.n	8005d6e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3710      	adds	r7, #16
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005dbe:	b580      	push	{r7, lr}
 8005dc0:	b084      	sub	sp, #16
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dca:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dd0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d14b      	bne.n	8005e70 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ddc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0308 	and.w	r3, r3, #8
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d021      	beq.n	8005e36 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4618      	mov	r0, r3
 8005df8:	f7fd ffba 	bl	8003d70 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d032      	beq.n	8005e68 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d12b      	bne.n	8005e68 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e14:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d11f      	bne.n	8005e68 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e2c:	f043 0201 	orr.w	r2, r3, #1
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	661a      	str	r2, [r3, #96]	@ 0x60
 8005e34:	e018      	b.n	8005e68 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	f003 0303 	and.w	r3, r3, #3
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d111      	bne.n	8005e68 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e48:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d105      	bne.n	8005e68 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e60:	f043 0201 	orr.w	r2, r3, #1
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f7fb fe59 	bl	8001b20 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005e6e:	e00e      	b.n	8005e8e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e74:	f003 0310 	and.w	r3, r3, #16
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d003      	beq.n	8005e84 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	f7ff f8bf 	bl	8005000 <HAL_ADC_ErrorCallback>
}
 8005e82:	e004      	b.n	8005e8e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	4798      	blx	r3
}
 8005e8e:	bf00      	nop
 8005e90:	3710      	adds	r7, #16
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b084      	sub	sp, #16
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ea2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f7ff f897 	bl	8004fd8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005eaa:	bf00      	nop
 8005eac:	3710      	adds	r7, #16
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b084      	sub	sp, #16
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ebe:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ec4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ed0:	f043 0204 	orr.w	r2, r3, #4
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	f7ff f891 	bl	8005000 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005ede:	bf00      	nop
 8005ee0:	3710      	adds	r7, #16
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
	...

08005ee8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a6c      	ldr	r2, [pc, #432]	@ (80060a8 <ADC_ConfigureBoostMode+0x1c0>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d004      	beq.n	8005f04 <ADC_ConfigureBoostMode+0x1c>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a6b      	ldr	r2, [pc, #428]	@ (80060ac <ADC_ConfigureBoostMode+0x1c4>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d109      	bne.n	8005f18 <ADC_ConfigureBoostMode+0x30>
 8005f04:	4b6a      	ldr	r3, [pc, #424]	@ (80060b0 <ADC_ConfigureBoostMode+0x1c8>)
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	bf14      	ite	ne
 8005f10:	2301      	movne	r3, #1
 8005f12:	2300      	moveq	r3, #0
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	e008      	b.n	8005f2a <ADC_ConfigureBoostMode+0x42>
 8005f18:	4b66      	ldr	r3, [pc, #408]	@ (80060b4 <ADC_ConfigureBoostMode+0x1cc>)
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	bf14      	ite	ne
 8005f24:	2301      	movne	r3, #1
 8005f26:	2300      	moveq	r3, #0
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d01c      	beq.n	8005f68 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005f2e:	f004 fec7 	bl	800acc0 <HAL_RCC_GetHCLKFreq>
 8005f32:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f3c:	d010      	beq.n	8005f60 <ADC_ConfigureBoostMode+0x78>
 8005f3e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f42:	d873      	bhi.n	800602c <ADC_ConfigureBoostMode+0x144>
 8005f44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f48:	d002      	beq.n	8005f50 <ADC_ConfigureBoostMode+0x68>
 8005f4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f4e:	d16d      	bne.n	800602c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	0c1b      	lsrs	r3, r3, #16
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f5c:	60fb      	str	r3, [r7, #12]
        break;
 8005f5e:	e068      	b.n	8006032 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	089b      	lsrs	r3, r3, #2
 8005f64:	60fb      	str	r3, [r7, #12]
        break;
 8005f66:	e064      	b.n	8006032 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005f68:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8005f6c:	f04f 0100 	mov.w	r1, #0
 8005f70:	f006 f8a2 	bl	800c0b8 <HAL_RCCEx_GetPeriphCLKFreq>
 8005f74:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8005f7e:	d051      	beq.n	8006024 <ADC_ConfigureBoostMode+0x13c>
 8005f80:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8005f84:	d854      	bhi.n	8006030 <ADC_ConfigureBoostMode+0x148>
 8005f86:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8005f8a:	d047      	beq.n	800601c <ADC_ConfigureBoostMode+0x134>
 8005f8c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8005f90:	d84e      	bhi.n	8006030 <ADC_ConfigureBoostMode+0x148>
 8005f92:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8005f96:	d03d      	beq.n	8006014 <ADC_ConfigureBoostMode+0x12c>
 8005f98:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8005f9c:	d848      	bhi.n	8006030 <ADC_ConfigureBoostMode+0x148>
 8005f9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005fa2:	d033      	beq.n	800600c <ADC_ConfigureBoostMode+0x124>
 8005fa4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005fa8:	d842      	bhi.n	8006030 <ADC_ConfigureBoostMode+0x148>
 8005faa:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8005fae:	d029      	beq.n	8006004 <ADC_ConfigureBoostMode+0x11c>
 8005fb0:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8005fb4:	d83c      	bhi.n	8006030 <ADC_ConfigureBoostMode+0x148>
 8005fb6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005fba:	d01a      	beq.n	8005ff2 <ADC_ConfigureBoostMode+0x10a>
 8005fbc:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005fc0:	d836      	bhi.n	8006030 <ADC_ConfigureBoostMode+0x148>
 8005fc2:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005fc6:	d014      	beq.n	8005ff2 <ADC_ConfigureBoostMode+0x10a>
 8005fc8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005fcc:	d830      	bhi.n	8006030 <ADC_ConfigureBoostMode+0x148>
 8005fce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fd2:	d00e      	beq.n	8005ff2 <ADC_ConfigureBoostMode+0x10a>
 8005fd4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fd8:	d82a      	bhi.n	8006030 <ADC_ConfigureBoostMode+0x148>
 8005fda:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005fde:	d008      	beq.n	8005ff2 <ADC_ConfigureBoostMode+0x10a>
 8005fe0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005fe4:	d824      	bhi.n	8006030 <ADC_ConfigureBoostMode+0x148>
 8005fe6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005fea:	d002      	beq.n	8005ff2 <ADC_ConfigureBoostMode+0x10a>
 8005fec:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005ff0:	d11e      	bne.n	8006030 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	0c9b      	lsrs	r3, r3, #18
 8005ff8:	005b      	lsls	r3, r3, #1
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006000:	60fb      	str	r3, [r7, #12]
        break;
 8006002:	e016      	b.n	8006032 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	091b      	lsrs	r3, r3, #4
 8006008:	60fb      	str	r3, [r7, #12]
        break;
 800600a:	e012      	b.n	8006032 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	095b      	lsrs	r3, r3, #5
 8006010:	60fb      	str	r3, [r7, #12]
        break;
 8006012:	e00e      	b.n	8006032 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	099b      	lsrs	r3, r3, #6
 8006018:	60fb      	str	r3, [r7, #12]
        break;
 800601a:	e00a      	b.n	8006032 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	09db      	lsrs	r3, r3, #7
 8006020:	60fb      	str	r3, [r7, #12]
        break;
 8006022:	e006      	b.n	8006032 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	0a1b      	lsrs	r3, r3, #8
 8006028:	60fb      	str	r3, [r7, #12]
        break;
 800602a:	e002      	b.n	8006032 <ADC_ConfigureBoostMode+0x14a>
        break;
 800602c:	bf00      	nop
 800602e:	e000      	b.n	8006032 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8006030:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	085b      	lsrs	r3, r3, #1
 8006036:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	4a1f      	ldr	r2, [pc, #124]	@ (80060b8 <ADC_ConfigureBoostMode+0x1d0>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d808      	bhi.n	8006052 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	689a      	ldr	r2, [r3, #8]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800604e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006050:	e025      	b.n	800609e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	4a19      	ldr	r2, [pc, #100]	@ (80060bc <ADC_ConfigureBoostMode+0x1d4>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d80a      	bhi.n	8006070 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800606c:	609a      	str	r2, [r3, #8]
}
 800606e:	e016      	b.n	800609e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	4a13      	ldr	r2, [pc, #76]	@ (80060c0 <ADC_ConfigureBoostMode+0x1d8>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d80a      	bhi.n	800608e <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800608a:	609a      	str	r2, [r3, #8]
}
 800608c:	e007      	b.n	800609e <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	689a      	ldr	r2, [r3, #8]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800609c:	609a      	str	r2, [r3, #8]
}
 800609e:	bf00      	nop
 80060a0:	3710      	adds	r7, #16
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	40022000 	.word	0x40022000
 80060ac:	40022100 	.word	0x40022100
 80060b0:	40022300 	.word	0x40022300
 80060b4:	58026300 	.word	0x58026300
 80060b8:	005f5e10 	.word	0x005f5e10
 80060bc:	00bebc20 	.word	0x00bebc20
 80060c0:	017d7840 	.word	0x017d7840

080060c4 <LL_ADC_IsEnabled>:
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f003 0301 	and.w	r3, r3, #1
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d101      	bne.n	80060dc <LL_ADC_IsEnabled+0x18>
 80060d8:	2301      	movs	r3, #1
 80060da:	e000      	b.n	80060de <LL_ADC_IsEnabled+0x1a>
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	370c      	adds	r7, #12
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr

080060ea <LL_ADC_REG_IsConversionOngoing>:
{
 80060ea:	b480      	push	{r7}
 80060ec:	b083      	sub	sp, #12
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	f003 0304 	and.w	r3, r3, #4
 80060fa:	2b04      	cmp	r3, #4
 80060fc:	d101      	bne.n	8006102 <LL_ADC_REG_IsConversionOngoing+0x18>
 80060fe:	2301      	movs	r3, #1
 8006100:	e000      	b.n	8006104 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006118:	bf00      	nop
 800611a:	370c      	adds	r7, #12
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800612c:	bf00      	nop
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006140:	bf00      	nop
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006154:	bf00      	nop
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006168:	bf00      	nop
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006174:	b590      	push	{r4, r7, lr}
 8006176:	b0a3      	sub	sp, #140	@ 0x8c
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800617e:	2300      	movs	r3, #0
 8006180:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800618a:	2b01      	cmp	r3, #1
 800618c:	d101      	bne.n	8006192 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800618e:	2302      	movs	r3, #2
 8006190:	e0c1      	b.n	8006316 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2201      	movs	r2, #1
 8006196:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800619a:	2300      	movs	r3, #0
 800619c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800619e:	2300      	movs	r3, #0
 80061a0:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a5e      	ldr	r2, [pc, #376]	@ (8006320 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d102      	bne.n	80061b2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80061ac:	4b5d      	ldr	r3, [pc, #372]	@ (8006324 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80061ae:	60fb      	str	r3, [r7, #12]
 80061b0:	e001      	b.n	80061b6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80061b2:	2300      	movs	r3, #0
 80061b4:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d10b      	bne.n	80061d4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061c0:	f043 0220 	orr.w	r2, r3, #32
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	e0a0      	b.n	8006316 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	4618      	mov	r0, r3
 80061d8:	f7ff ff87 	bl	80060ea <LL_ADC_REG_IsConversionOngoing>
 80061dc:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4618      	mov	r0, r3
 80061e6:	f7ff ff80 	bl	80060ea <LL_ADC_REG_IsConversionOngoing>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f040 8081 	bne.w	80062f4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80061f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d17c      	bne.n	80062f4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a48      	ldr	r2, [pc, #288]	@ (8006320 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d004      	beq.n	800620e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a46      	ldr	r2, [pc, #280]	@ (8006324 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d101      	bne.n	8006212 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800620e:	4b46      	ldr	r3, [pc, #280]	@ (8006328 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006210:	e000      	b.n	8006214 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8006212:	4b46      	ldr	r3, [pc, #280]	@ (800632c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006214:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d039      	beq.n	8006292 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800621e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	431a      	orrs	r2, r3
 800622c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800622e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a3a      	ldr	r2, [pc, #232]	@ (8006320 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d004      	beq.n	8006244 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a39      	ldr	r2, [pc, #228]	@ (8006324 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d10e      	bne.n	8006262 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8006244:	4836      	ldr	r0, [pc, #216]	@ (8006320 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006246:	f7ff ff3d 	bl	80060c4 <LL_ADC_IsEnabled>
 800624a:	4604      	mov	r4, r0
 800624c:	4835      	ldr	r0, [pc, #212]	@ (8006324 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800624e:	f7ff ff39 	bl	80060c4 <LL_ADC_IsEnabled>
 8006252:	4603      	mov	r3, r0
 8006254:	4323      	orrs	r3, r4
 8006256:	2b00      	cmp	r3, #0
 8006258:	bf0c      	ite	eq
 800625a:	2301      	moveq	r3, #1
 800625c:	2300      	movne	r3, #0
 800625e:	b2db      	uxtb	r3, r3
 8006260:	e008      	b.n	8006274 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8006262:	4833      	ldr	r0, [pc, #204]	@ (8006330 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8006264:	f7ff ff2e 	bl	80060c4 <LL_ADC_IsEnabled>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	bf0c      	ite	eq
 800626e:	2301      	moveq	r3, #1
 8006270:	2300      	movne	r3, #0
 8006272:	b2db      	uxtb	r3, r3
 8006274:	2b00      	cmp	r3, #0
 8006276:	d047      	beq.n	8006308 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006278:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800627a:	689a      	ldr	r2, [r3, #8]
 800627c:	4b2d      	ldr	r3, [pc, #180]	@ (8006334 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800627e:	4013      	ands	r3, r2
 8006280:	683a      	ldr	r2, [r7, #0]
 8006282:	6811      	ldr	r1, [r2, #0]
 8006284:	683a      	ldr	r2, [r7, #0]
 8006286:	6892      	ldr	r2, [r2, #8]
 8006288:	430a      	orrs	r2, r1
 800628a:	431a      	orrs	r2, r3
 800628c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800628e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006290:	e03a      	b.n	8006308 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8006292:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800629a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800629c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a1f      	ldr	r2, [pc, #124]	@ (8006320 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d004      	beq.n	80062b2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a1d      	ldr	r2, [pc, #116]	@ (8006324 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d10e      	bne.n	80062d0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80062b2:	481b      	ldr	r0, [pc, #108]	@ (8006320 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80062b4:	f7ff ff06 	bl	80060c4 <LL_ADC_IsEnabled>
 80062b8:	4604      	mov	r4, r0
 80062ba:	481a      	ldr	r0, [pc, #104]	@ (8006324 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80062bc:	f7ff ff02 	bl	80060c4 <LL_ADC_IsEnabled>
 80062c0:	4603      	mov	r3, r0
 80062c2:	4323      	orrs	r3, r4
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	bf0c      	ite	eq
 80062c8:	2301      	moveq	r3, #1
 80062ca:	2300      	movne	r3, #0
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	e008      	b.n	80062e2 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80062d0:	4817      	ldr	r0, [pc, #92]	@ (8006330 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80062d2:	f7ff fef7 	bl	80060c4 <LL_ADC_IsEnabled>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	bf0c      	ite	eq
 80062dc:	2301      	moveq	r3, #1
 80062de:	2300      	movne	r3, #0
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d010      	beq.n	8006308 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80062e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80062e8:	689a      	ldr	r2, [r3, #8]
 80062ea:	4b12      	ldr	r3, [pc, #72]	@ (8006334 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80062ec:	4013      	ands	r3, r2
 80062ee:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80062f0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80062f2:	e009      	b.n	8006308 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062f8:	f043 0220 	orr.w	r2, r3, #32
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8006306:	e000      	b.n	800630a <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006308:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8006312:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8006316:	4618      	mov	r0, r3
 8006318:	378c      	adds	r7, #140	@ 0x8c
 800631a:	46bd      	mov	sp, r7
 800631c:	bd90      	pop	{r4, r7, pc}
 800631e:	bf00      	nop
 8006320:	40022000 	.word	0x40022000
 8006324:	40022100 	.word	0x40022100
 8006328:	40022300 	.word	0x40022300
 800632c:	58026300 	.word	0x58026300
 8006330:	58026000 	.word	0x58026000
 8006334:	fffff0e0 	.word	0xfffff0e0

08006338 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f003 0307 	and.w	r3, r3, #7
 8006346:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006348:	4b0b      	ldr	r3, [pc, #44]	@ (8006378 <__NVIC_SetPriorityGrouping+0x40>)
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800634e:	68ba      	ldr	r2, [r7, #8]
 8006350:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006354:	4013      	ands	r3, r2
 8006356:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006360:	4b06      	ldr	r3, [pc, #24]	@ (800637c <__NVIC_SetPriorityGrouping+0x44>)
 8006362:	4313      	orrs	r3, r2
 8006364:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006366:	4a04      	ldr	r2, [pc, #16]	@ (8006378 <__NVIC_SetPriorityGrouping+0x40>)
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	60d3      	str	r3, [r2, #12]
}
 800636c:	bf00      	nop
 800636e:	3714      	adds	r7, #20
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr
 8006378:	e000ed00 	.word	0xe000ed00
 800637c:	05fa0000 	.word	0x05fa0000

08006380 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006380:	b480      	push	{r7}
 8006382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006384:	4b04      	ldr	r3, [pc, #16]	@ (8006398 <__NVIC_GetPriorityGrouping+0x18>)
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	0a1b      	lsrs	r3, r3, #8
 800638a:	f003 0307 	and.w	r3, r3, #7
}
 800638e:	4618      	mov	r0, r3
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr
 8006398:	e000ed00 	.word	0xe000ed00

0800639c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	4603      	mov	r3, r0
 80063a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80063a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	db0b      	blt.n	80063c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80063ae:	88fb      	ldrh	r3, [r7, #6]
 80063b0:	f003 021f 	and.w	r2, r3, #31
 80063b4:	4907      	ldr	r1, [pc, #28]	@ (80063d4 <__NVIC_EnableIRQ+0x38>)
 80063b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80063ba:	095b      	lsrs	r3, r3, #5
 80063bc:	2001      	movs	r0, #1
 80063be:	fa00 f202 	lsl.w	r2, r0, r2
 80063c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80063c6:	bf00      	nop
 80063c8:	370c      	adds	r7, #12
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop
 80063d4:	e000e100 	.word	0xe000e100

080063d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	4603      	mov	r3, r0
 80063e0:	6039      	str	r1, [r7, #0]
 80063e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80063e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	db0a      	blt.n	8006402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	b2da      	uxtb	r2, r3
 80063f0:	490c      	ldr	r1, [pc, #48]	@ (8006424 <__NVIC_SetPriority+0x4c>)
 80063f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80063f6:	0112      	lsls	r2, r2, #4
 80063f8:	b2d2      	uxtb	r2, r2
 80063fa:	440b      	add	r3, r1
 80063fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006400:	e00a      	b.n	8006418 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	b2da      	uxtb	r2, r3
 8006406:	4908      	ldr	r1, [pc, #32]	@ (8006428 <__NVIC_SetPriority+0x50>)
 8006408:	88fb      	ldrh	r3, [r7, #6]
 800640a:	f003 030f 	and.w	r3, r3, #15
 800640e:	3b04      	subs	r3, #4
 8006410:	0112      	lsls	r2, r2, #4
 8006412:	b2d2      	uxtb	r2, r2
 8006414:	440b      	add	r3, r1
 8006416:	761a      	strb	r2, [r3, #24]
}
 8006418:	bf00      	nop
 800641a:	370c      	adds	r7, #12
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr
 8006424:	e000e100 	.word	0xe000e100
 8006428:	e000ed00 	.word	0xe000ed00

0800642c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800642c:	b480      	push	{r7}
 800642e:	b089      	sub	sp, #36	@ 0x24
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f003 0307 	and.w	r3, r3, #7
 800643e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	f1c3 0307 	rsb	r3, r3, #7
 8006446:	2b04      	cmp	r3, #4
 8006448:	bf28      	it	cs
 800644a:	2304      	movcs	r3, #4
 800644c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	3304      	adds	r3, #4
 8006452:	2b06      	cmp	r3, #6
 8006454:	d902      	bls.n	800645c <NVIC_EncodePriority+0x30>
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	3b03      	subs	r3, #3
 800645a:	e000      	b.n	800645e <NVIC_EncodePriority+0x32>
 800645c:	2300      	movs	r3, #0
 800645e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006460:	f04f 32ff 	mov.w	r2, #4294967295
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	fa02 f303 	lsl.w	r3, r2, r3
 800646a:	43da      	mvns	r2, r3
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	401a      	ands	r2, r3
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006474:	f04f 31ff 	mov.w	r1, #4294967295
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	fa01 f303 	lsl.w	r3, r1, r3
 800647e:	43d9      	mvns	r1, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006484:	4313      	orrs	r3, r2
         );
}
 8006486:	4618      	mov	r0, r3
 8006488:	3724      	adds	r7, #36	@ 0x24
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr
	...

08006494 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	3b01      	subs	r3, #1
 80064a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80064a4:	d301      	bcc.n	80064aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80064a6:	2301      	movs	r3, #1
 80064a8:	e00f      	b.n	80064ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80064aa:	4a0a      	ldr	r2, [pc, #40]	@ (80064d4 <SysTick_Config+0x40>)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	3b01      	subs	r3, #1
 80064b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80064b2:	210f      	movs	r1, #15
 80064b4:	f04f 30ff 	mov.w	r0, #4294967295
 80064b8:	f7ff ff8e 	bl	80063d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80064bc:	4b05      	ldr	r3, [pc, #20]	@ (80064d4 <SysTick_Config+0x40>)
 80064be:	2200      	movs	r2, #0
 80064c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80064c2:	4b04      	ldr	r3, [pc, #16]	@ (80064d4 <SysTick_Config+0x40>)
 80064c4:	2207      	movs	r2, #7
 80064c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3708      	adds	r7, #8
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	e000e010 	.word	0xe000e010

080064d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f7ff ff29 	bl	8006338 <__NVIC_SetPriorityGrouping>
}
 80064e6:	bf00      	nop
 80064e8:	3708      	adds	r7, #8
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}

080064ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80064ee:	b580      	push	{r7, lr}
 80064f0:	b086      	sub	sp, #24
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	4603      	mov	r3, r0
 80064f6:	60b9      	str	r1, [r7, #8]
 80064f8:	607a      	str	r2, [r7, #4]
 80064fa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80064fc:	f7ff ff40 	bl	8006380 <__NVIC_GetPriorityGrouping>
 8006500:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	68b9      	ldr	r1, [r7, #8]
 8006506:	6978      	ldr	r0, [r7, #20]
 8006508:	f7ff ff90 	bl	800642c <NVIC_EncodePriority>
 800650c:	4602      	mov	r2, r0
 800650e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006512:	4611      	mov	r1, r2
 8006514:	4618      	mov	r0, r3
 8006516:	f7ff ff5f 	bl	80063d8 <__NVIC_SetPriority>
}
 800651a:	bf00      	nop
 800651c:	3718      	adds	r7, #24
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006522:	b580      	push	{r7, lr}
 8006524:	b082      	sub	sp, #8
 8006526:	af00      	add	r7, sp, #0
 8006528:	4603      	mov	r3, r0
 800652a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800652c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006530:	4618      	mov	r0, r3
 8006532:	f7ff ff33 	bl	800639c <__NVIC_EnableIRQ>
}
 8006536:	bf00      	nop
 8006538:	3708      	adds	r7, #8
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}

0800653e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800653e:	b580      	push	{r7, lr}
 8006540:	b082      	sub	sp, #8
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f7ff ffa4 	bl	8006494 <SysTick_Config>
 800654c:	4603      	mov	r3, r0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3708      	adds	r7, #8
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
	...

08006558 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b086      	sub	sp, #24
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006560:	f7fd fab0 	bl	8003ac4 <HAL_GetTick>
 8006564:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d101      	bne.n	8006570 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e312      	b.n	8006b96 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a66      	ldr	r2, [pc, #408]	@ (8006710 <HAL_DMA_Init+0x1b8>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d04a      	beq.n	8006610 <HAL_DMA_Init+0xb8>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a65      	ldr	r2, [pc, #404]	@ (8006714 <HAL_DMA_Init+0x1bc>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d045      	beq.n	8006610 <HAL_DMA_Init+0xb8>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a63      	ldr	r2, [pc, #396]	@ (8006718 <HAL_DMA_Init+0x1c0>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d040      	beq.n	8006610 <HAL_DMA_Init+0xb8>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a62      	ldr	r2, [pc, #392]	@ (800671c <HAL_DMA_Init+0x1c4>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d03b      	beq.n	8006610 <HAL_DMA_Init+0xb8>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a60      	ldr	r2, [pc, #384]	@ (8006720 <HAL_DMA_Init+0x1c8>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d036      	beq.n	8006610 <HAL_DMA_Init+0xb8>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a5f      	ldr	r2, [pc, #380]	@ (8006724 <HAL_DMA_Init+0x1cc>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d031      	beq.n	8006610 <HAL_DMA_Init+0xb8>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a5d      	ldr	r2, [pc, #372]	@ (8006728 <HAL_DMA_Init+0x1d0>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d02c      	beq.n	8006610 <HAL_DMA_Init+0xb8>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a5c      	ldr	r2, [pc, #368]	@ (800672c <HAL_DMA_Init+0x1d4>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d027      	beq.n	8006610 <HAL_DMA_Init+0xb8>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a5a      	ldr	r2, [pc, #360]	@ (8006730 <HAL_DMA_Init+0x1d8>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d022      	beq.n	8006610 <HAL_DMA_Init+0xb8>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a59      	ldr	r2, [pc, #356]	@ (8006734 <HAL_DMA_Init+0x1dc>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d01d      	beq.n	8006610 <HAL_DMA_Init+0xb8>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a57      	ldr	r2, [pc, #348]	@ (8006738 <HAL_DMA_Init+0x1e0>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d018      	beq.n	8006610 <HAL_DMA_Init+0xb8>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a56      	ldr	r2, [pc, #344]	@ (800673c <HAL_DMA_Init+0x1e4>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d013      	beq.n	8006610 <HAL_DMA_Init+0xb8>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a54      	ldr	r2, [pc, #336]	@ (8006740 <HAL_DMA_Init+0x1e8>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d00e      	beq.n	8006610 <HAL_DMA_Init+0xb8>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a53      	ldr	r2, [pc, #332]	@ (8006744 <HAL_DMA_Init+0x1ec>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d009      	beq.n	8006610 <HAL_DMA_Init+0xb8>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a51      	ldr	r2, [pc, #324]	@ (8006748 <HAL_DMA_Init+0x1f0>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d004      	beq.n	8006610 <HAL_DMA_Init+0xb8>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a50      	ldr	r2, [pc, #320]	@ (800674c <HAL_DMA_Init+0x1f4>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d101      	bne.n	8006614 <HAL_DMA_Init+0xbc>
 8006610:	2301      	movs	r3, #1
 8006612:	e000      	b.n	8006616 <HAL_DMA_Init+0xbe>
 8006614:	2300      	movs	r3, #0
 8006616:	2b00      	cmp	r3, #0
 8006618:	f000 813c 	beq.w	8006894 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2202      	movs	r2, #2
 8006620:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a37      	ldr	r2, [pc, #220]	@ (8006710 <HAL_DMA_Init+0x1b8>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d04a      	beq.n	80066cc <HAL_DMA_Init+0x174>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a36      	ldr	r2, [pc, #216]	@ (8006714 <HAL_DMA_Init+0x1bc>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d045      	beq.n	80066cc <HAL_DMA_Init+0x174>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a34      	ldr	r2, [pc, #208]	@ (8006718 <HAL_DMA_Init+0x1c0>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d040      	beq.n	80066cc <HAL_DMA_Init+0x174>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a33      	ldr	r2, [pc, #204]	@ (800671c <HAL_DMA_Init+0x1c4>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d03b      	beq.n	80066cc <HAL_DMA_Init+0x174>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a31      	ldr	r2, [pc, #196]	@ (8006720 <HAL_DMA_Init+0x1c8>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d036      	beq.n	80066cc <HAL_DMA_Init+0x174>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a30      	ldr	r2, [pc, #192]	@ (8006724 <HAL_DMA_Init+0x1cc>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d031      	beq.n	80066cc <HAL_DMA_Init+0x174>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a2e      	ldr	r2, [pc, #184]	@ (8006728 <HAL_DMA_Init+0x1d0>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d02c      	beq.n	80066cc <HAL_DMA_Init+0x174>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a2d      	ldr	r2, [pc, #180]	@ (800672c <HAL_DMA_Init+0x1d4>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d027      	beq.n	80066cc <HAL_DMA_Init+0x174>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a2b      	ldr	r2, [pc, #172]	@ (8006730 <HAL_DMA_Init+0x1d8>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d022      	beq.n	80066cc <HAL_DMA_Init+0x174>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a2a      	ldr	r2, [pc, #168]	@ (8006734 <HAL_DMA_Init+0x1dc>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d01d      	beq.n	80066cc <HAL_DMA_Init+0x174>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a28      	ldr	r2, [pc, #160]	@ (8006738 <HAL_DMA_Init+0x1e0>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d018      	beq.n	80066cc <HAL_DMA_Init+0x174>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a27      	ldr	r2, [pc, #156]	@ (800673c <HAL_DMA_Init+0x1e4>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d013      	beq.n	80066cc <HAL_DMA_Init+0x174>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a25      	ldr	r2, [pc, #148]	@ (8006740 <HAL_DMA_Init+0x1e8>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d00e      	beq.n	80066cc <HAL_DMA_Init+0x174>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a24      	ldr	r2, [pc, #144]	@ (8006744 <HAL_DMA_Init+0x1ec>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d009      	beq.n	80066cc <HAL_DMA_Init+0x174>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a22      	ldr	r2, [pc, #136]	@ (8006748 <HAL_DMA_Init+0x1f0>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d004      	beq.n	80066cc <HAL_DMA_Init+0x174>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a21      	ldr	r2, [pc, #132]	@ (800674c <HAL_DMA_Init+0x1f4>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d108      	bne.n	80066de <HAL_DMA_Init+0x186>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f022 0201 	bic.w	r2, r2, #1
 80066da:	601a      	str	r2, [r3, #0]
 80066dc:	e007      	b.n	80066ee <HAL_DMA_Init+0x196>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f022 0201 	bic.w	r2, r2, #1
 80066ec:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80066ee:	e02f      	b.n	8006750 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80066f0:	f7fd f9e8 	bl	8003ac4 <HAL_GetTick>
 80066f4:	4602      	mov	r2, r0
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	2b05      	cmp	r3, #5
 80066fc:	d928      	bls.n	8006750 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2220      	movs	r2, #32
 8006702:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2203      	movs	r2, #3
 8006708:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e242      	b.n	8006b96 <HAL_DMA_Init+0x63e>
 8006710:	40020010 	.word	0x40020010
 8006714:	40020028 	.word	0x40020028
 8006718:	40020040 	.word	0x40020040
 800671c:	40020058 	.word	0x40020058
 8006720:	40020070 	.word	0x40020070
 8006724:	40020088 	.word	0x40020088
 8006728:	400200a0 	.word	0x400200a0
 800672c:	400200b8 	.word	0x400200b8
 8006730:	40020410 	.word	0x40020410
 8006734:	40020428 	.word	0x40020428
 8006738:	40020440 	.word	0x40020440
 800673c:	40020458 	.word	0x40020458
 8006740:	40020470 	.word	0x40020470
 8006744:	40020488 	.word	0x40020488
 8006748:	400204a0 	.word	0x400204a0
 800674c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 0301 	and.w	r3, r3, #1
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1c8      	bne.n	80066f0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006766:	697a      	ldr	r2, [r7, #20]
 8006768:	4b83      	ldr	r3, [pc, #524]	@ (8006978 <HAL_DMA_Init+0x420>)
 800676a:	4013      	ands	r3, r2
 800676c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8006776:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006782:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	699b      	ldr	r3, [r3, #24]
 8006788:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800678e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a1b      	ldr	r3, [r3, #32]
 8006794:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006796:	697a      	ldr	r2, [r7, #20]
 8006798:	4313      	orrs	r3, r2
 800679a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067a0:	2b04      	cmp	r3, #4
 80067a2:	d107      	bne.n	80067b4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067ac:	4313      	orrs	r3, r2
 80067ae:	697a      	ldr	r2, [r7, #20]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	2b28      	cmp	r3, #40	@ 0x28
 80067ba:	d903      	bls.n	80067c4 <HAL_DMA_Init+0x26c>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80067c2:	d91f      	bls.n	8006804 <HAL_DMA_Init+0x2ac>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80067ca:	d903      	bls.n	80067d4 <HAL_DMA_Init+0x27c>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	2b42      	cmp	r3, #66	@ 0x42
 80067d2:	d917      	bls.n	8006804 <HAL_DMA_Init+0x2ac>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	2b46      	cmp	r3, #70	@ 0x46
 80067da:	d903      	bls.n	80067e4 <HAL_DMA_Init+0x28c>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	2b48      	cmp	r3, #72	@ 0x48
 80067e2:	d90f      	bls.n	8006804 <HAL_DMA_Init+0x2ac>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	2b4e      	cmp	r3, #78	@ 0x4e
 80067ea:	d903      	bls.n	80067f4 <HAL_DMA_Init+0x29c>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	2b52      	cmp	r3, #82	@ 0x52
 80067f2:	d907      	bls.n	8006804 <HAL_DMA_Init+0x2ac>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	2b73      	cmp	r3, #115	@ 0x73
 80067fa:	d905      	bls.n	8006808 <HAL_DMA_Init+0x2b0>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	2b77      	cmp	r3, #119	@ 0x77
 8006802:	d801      	bhi.n	8006808 <HAL_DMA_Init+0x2b0>
 8006804:	2301      	movs	r3, #1
 8006806:	e000      	b.n	800680a <HAL_DMA_Init+0x2b2>
 8006808:	2300      	movs	r3, #0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d003      	beq.n	8006816 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006814:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	697a      	ldr	r2, [r7, #20]
 800681c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	695b      	ldr	r3, [r3, #20]
 8006824:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	f023 0307 	bic.w	r3, r3, #7
 800682c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006832:	697a      	ldr	r2, [r7, #20]
 8006834:	4313      	orrs	r3, r2
 8006836:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800683c:	2b04      	cmp	r3, #4
 800683e:	d117      	bne.n	8006870 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006844:	697a      	ldr	r2, [r7, #20]
 8006846:	4313      	orrs	r3, r2
 8006848:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00e      	beq.n	8006870 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f001 fdca 	bl	80083ec <DMA_CheckFifoParam>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d008      	beq.n	8006870 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2240      	movs	r2, #64	@ 0x40
 8006862:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e192      	b.n	8006b96 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	697a      	ldr	r2, [r7, #20]
 8006876:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f001 fd05 	bl	8008288 <DMA_CalcBaseAndBitshift>
 800687e:	4603      	mov	r3, r0
 8006880:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006886:	f003 031f 	and.w	r3, r3, #31
 800688a:	223f      	movs	r2, #63	@ 0x3f
 800688c:	409a      	lsls	r2, r3
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	609a      	str	r2, [r3, #8]
 8006892:	e0c8      	b.n	8006a26 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a38      	ldr	r2, [pc, #224]	@ (800697c <HAL_DMA_Init+0x424>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d022      	beq.n	80068e4 <HAL_DMA_Init+0x38c>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a37      	ldr	r2, [pc, #220]	@ (8006980 <HAL_DMA_Init+0x428>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d01d      	beq.n	80068e4 <HAL_DMA_Init+0x38c>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a35      	ldr	r2, [pc, #212]	@ (8006984 <HAL_DMA_Init+0x42c>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d018      	beq.n	80068e4 <HAL_DMA_Init+0x38c>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a34      	ldr	r2, [pc, #208]	@ (8006988 <HAL_DMA_Init+0x430>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d013      	beq.n	80068e4 <HAL_DMA_Init+0x38c>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a32      	ldr	r2, [pc, #200]	@ (800698c <HAL_DMA_Init+0x434>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d00e      	beq.n	80068e4 <HAL_DMA_Init+0x38c>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a31      	ldr	r2, [pc, #196]	@ (8006990 <HAL_DMA_Init+0x438>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d009      	beq.n	80068e4 <HAL_DMA_Init+0x38c>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a2f      	ldr	r2, [pc, #188]	@ (8006994 <HAL_DMA_Init+0x43c>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d004      	beq.n	80068e4 <HAL_DMA_Init+0x38c>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a2e      	ldr	r2, [pc, #184]	@ (8006998 <HAL_DMA_Init+0x440>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d101      	bne.n	80068e8 <HAL_DMA_Init+0x390>
 80068e4:	2301      	movs	r3, #1
 80068e6:	e000      	b.n	80068ea <HAL_DMA_Init+0x392>
 80068e8:	2300      	movs	r3, #0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	f000 8092 	beq.w	8006a14 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a21      	ldr	r2, [pc, #132]	@ (800697c <HAL_DMA_Init+0x424>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d021      	beq.n	800693e <HAL_DMA_Init+0x3e6>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a20      	ldr	r2, [pc, #128]	@ (8006980 <HAL_DMA_Init+0x428>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d01c      	beq.n	800693e <HAL_DMA_Init+0x3e6>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a1e      	ldr	r2, [pc, #120]	@ (8006984 <HAL_DMA_Init+0x42c>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d017      	beq.n	800693e <HAL_DMA_Init+0x3e6>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a1d      	ldr	r2, [pc, #116]	@ (8006988 <HAL_DMA_Init+0x430>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d012      	beq.n	800693e <HAL_DMA_Init+0x3e6>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a1b      	ldr	r2, [pc, #108]	@ (800698c <HAL_DMA_Init+0x434>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d00d      	beq.n	800693e <HAL_DMA_Init+0x3e6>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a1a      	ldr	r2, [pc, #104]	@ (8006990 <HAL_DMA_Init+0x438>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d008      	beq.n	800693e <HAL_DMA_Init+0x3e6>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a18      	ldr	r2, [pc, #96]	@ (8006994 <HAL_DMA_Init+0x43c>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d003      	beq.n	800693e <HAL_DMA_Init+0x3e6>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a17      	ldr	r2, [pc, #92]	@ (8006998 <HAL_DMA_Init+0x440>)
 800693c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2202      	movs	r2, #2
 8006942:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006956:	697a      	ldr	r2, [r7, #20]
 8006958:	4b10      	ldr	r3, [pc, #64]	@ (800699c <HAL_DMA_Init+0x444>)
 800695a:	4013      	ands	r3, r2
 800695c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	2b40      	cmp	r3, #64	@ 0x40
 8006964:	d01c      	beq.n	80069a0 <HAL_DMA_Init+0x448>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	2b80      	cmp	r3, #128	@ 0x80
 800696c:	d102      	bne.n	8006974 <HAL_DMA_Init+0x41c>
 800696e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006972:	e016      	b.n	80069a2 <HAL_DMA_Init+0x44a>
 8006974:	2300      	movs	r3, #0
 8006976:	e014      	b.n	80069a2 <HAL_DMA_Init+0x44a>
 8006978:	fe10803f 	.word	0xfe10803f
 800697c:	58025408 	.word	0x58025408
 8006980:	5802541c 	.word	0x5802541c
 8006984:	58025430 	.word	0x58025430
 8006988:	58025444 	.word	0x58025444
 800698c:	58025458 	.word	0x58025458
 8006990:	5802546c 	.word	0x5802546c
 8006994:	58025480 	.word	0x58025480
 8006998:	58025494 	.word	0x58025494
 800699c:	fffe000f 	.word	0xfffe000f
 80069a0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	68d2      	ldr	r2, [r2, #12]
 80069a6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80069a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80069b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	695b      	ldr	r3, [r3, #20]
 80069b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80069b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	699b      	ldr	r3, [r3, #24]
 80069be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80069c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	69db      	ldr	r3, [r3, #28]
 80069c6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80069c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a1b      	ldr	r3, [r3, #32]
 80069ce:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80069d0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80069d2:	697a      	ldr	r2, [r7, #20]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	697a      	ldr	r2, [r7, #20]
 80069de:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	461a      	mov	r2, r3
 80069e6:	4b6e      	ldr	r3, [pc, #440]	@ (8006ba0 <HAL_DMA_Init+0x648>)
 80069e8:	4413      	add	r3, r2
 80069ea:	4a6e      	ldr	r2, [pc, #440]	@ (8006ba4 <HAL_DMA_Init+0x64c>)
 80069ec:	fba2 2303 	umull	r2, r3, r2, r3
 80069f0:	091b      	lsrs	r3, r3, #4
 80069f2:	009a      	lsls	r2, r3, #2
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f001 fc45 	bl	8008288 <DMA_CalcBaseAndBitshift>
 80069fe:	4603      	mov	r3, r0
 8006a00:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a06:	f003 031f 	and.w	r3, r3, #31
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	409a      	lsls	r2, r3
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	605a      	str	r2, [r3, #4]
 8006a12:	e008      	b.n	8006a26 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2240      	movs	r2, #64	@ 0x40
 8006a18:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2203      	movs	r2, #3
 8006a1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	e0b7      	b.n	8006b96 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a5f      	ldr	r2, [pc, #380]	@ (8006ba8 <HAL_DMA_Init+0x650>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d072      	beq.n	8006b16 <HAL_DMA_Init+0x5be>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a5d      	ldr	r2, [pc, #372]	@ (8006bac <HAL_DMA_Init+0x654>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d06d      	beq.n	8006b16 <HAL_DMA_Init+0x5be>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a5c      	ldr	r2, [pc, #368]	@ (8006bb0 <HAL_DMA_Init+0x658>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d068      	beq.n	8006b16 <HAL_DMA_Init+0x5be>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a5a      	ldr	r2, [pc, #360]	@ (8006bb4 <HAL_DMA_Init+0x65c>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d063      	beq.n	8006b16 <HAL_DMA_Init+0x5be>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a59      	ldr	r2, [pc, #356]	@ (8006bb8 <HAL_DMA_Init+0x660>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d05e      	beq.n	8006b16 <HAL_DMA_Init+0x5be>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a57      	ldr	r2, [pc, #348]	@ (8006bbc <HAL_DMA_Init+0x664>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d059      	beq.n	8006b16 <HAL_DMA_Init+0x5be>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a56      	ldr	r2, [pc, #344]	@ (8006bc0 <HAL_DMA_Init+0x668>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d054      	beq.n	8006b16 <HAL_DMA_Init+0x5be>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a54      	ldr	r2, [pc, #336]	@ (8006bc4 <HAL_DMA_Init+0x66c>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d04f      	beq.n	8006b16 <HAL_DMA_Init+0x5be>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a53      	ldr	r2, [pc, #332]	@ (8006bc8 <HAL_DMA_Init+0x670>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d04a      	beq.n	8006b16 <HAL_DMA_Init+0x5be>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a51      	ldr	r2, [pc, #324]	@ (8006bcc <HAL_DMA_Init+0x674>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d045      	beq.n	8006b16 <HAL_DMA_Init+0x5be>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a50      	ldr	r2, [pc, #320]	@ (8006bd0 <HAL_DMA_Init+0x678>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d040      	beq.n	8006b16 <HAL_DMA_Init+0x5be>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a4e      	ldr	r2, [pc, #312]	@ (8006bd4 <HAL_DMA_Init+0x67c>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d03b      	beq.n	8006b16 <HAL_DMA_Init+0x5be>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a4d      	ldr	r2, [pc, #308]	@ (8006bd8 <HAL_DMA_Init+0x680>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d036      	beq.n	8006b16 <HAL_DMA_Init+0x5be>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a4b      	ldr	r2, [pc, #300]	@ (8006bdc <HAL_DMA_Init+0x684>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d031      	beq.n	8006b16 <HAL_DMA_Init+0x5be>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a4a      	ldr	r2, [pc, #296]	@ (8006be0 <HAL_DMA_Init+0x688>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d02c      	beq.n	8006b16 <HAL_DMA_Init+0x5be>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a48      	ldr	r2, [pc, #288]	@ (8006be4 <HAL_DMA_Init+0x68c>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d027      	beq.n	8006b16 <HAL_DMA_Init+0x5be>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a47      	ldr	r2, [pc, #284]	@ (8006be8 <HAL_DMA_Init+0x690>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d022      	beq.n	8006b16 <HAL_DMA_Init+0x5be>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a45      	ldr	r2, [pc, #276]	@ (8006bec <HAL_DMA_Init+0x694>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d01d      	beq.n	8006b16 <HAL_DMA_Init+0x5be>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a44      	ldr	r2, [pc, #272]	@ (8006bf0 <HAL_DMA_Init+0x698>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d018      	beq.n	8006b16 <HAL_DMA_Init+0x5be>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a42      	ldr	r2, [pc, #264]	@ (8006bf4 <HAL_DMA_Init+0x69c>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d013      	beq.n	8006b16 <HAL_DMA_Init+0x5be>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a41      	ldr	r2, [pc, #260]	@ (8006bf8 <HAL_DMA_Init+0x6a0>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d00e      	beq.n	8006b16 <HAL_DMA_Init+0x5be>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a3f      	ldr	r2, [pc, #252]	@ (8006bfc <HAL_DMA_Init+0x6a4>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d009      	beq.n	8006b16 <HAL_DMA_Init+0x5be>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a3e      	ldr	r2, [pc, #248]	@ (8006c00 <HAL_DMA_Init+0x6a8>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d004      	beq.n	8006b16 <HAL_DMA_Init+0x5be>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a3c      	ldr	r2, [pc, #240]	@ (8006c04 <HAL_DMA_Init+0x6ac>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d101      	bne.n	8006b1a <HAL_DMA_Init+0x5c2>
 8006b16:	2301      	movs	r3, #1
 8006b18:	e000      	b.n	8006b1c <HAL_DMA_Init+0x5c4>
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d032      	beq.n	8006b86 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f001 fcdf 	bl	80084e4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	2b80      	cmp	r3, #128	@ 0x80
 8006b2c:	d102      	bne.n	8006b34 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	685a      	ldr	r2, [r3, #4]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b3c:	b2d2      	uxtb	r2, r2
 8006b3e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006b48:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d010      	beq.n	8006b74 <HAL_DMA_Init+0x61c>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	2b08      	cmp	r3, #8
 8006b58:	d80c      	bhi.n	8006b74 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f001 fd5c 	bl	8008618 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b64:	2200      	movs	r2, #0
 8006b66:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006b70:	605a      	str	r2, [r3, #4]
 8006b72:	e008      	b.n	8006b86 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3718      	adds	r7, #24
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	a7fdabf8 	.word	0xa7fdabf8
 8006ba4:	cccccccd 	.word	0xcccccccd
 8006ba8:	40020010 	.word	0x40020010
 8006bac:	40020028 	.word	0x40020028
 8006bb0:	40020040 	.word	0x40020040
 8006bb4:	40020058 	.word	0x40020058
 8006bb8:	40020070 	.word	0x40020070
 8006bbc:	40020088 	.word	0x40020088
 8006bc0:	400200a0 	.word	0x400200a0
 8006bc4:	400200b8 	.word	0x400200b8
 8006bc8:	40020410 	.word	0x40020410
 8006bcc:	40020428 	.word	0x40020428
 8006bd0:	40020440 	.word	0x40020440
 8006bd4:	40020458 	.word	0x40020458
 8006bd8:	40020470 	.word	0x40020470
 8006bdc:	40020488 	.word	0x40020488
 8006be0:	400204a0 	.word	0x400204a0
 8006be4:	400204b8 	.word	0x400204b8
 8006be8:	58025408 	.word	0x58025408
 8006bec:	5802541c 	.word	0x5802541c
 8006bf0:	58025430 	.word	0x58025430
 8006bf4:	58025444 	.word	0x58025444
 8006bf8:	58025458 	.word	0x58025458
 8006bfc:	5802546c 	.word	0x5802546c
 8006c00:	58025480 	.word	0x58025480
 8006c04:	58025494 	.word	0x58025494

08006c08 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b086      	sub	sp, #24
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	607a      	str	r2, [r7, #4]
 8006c14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c16:	2300      	movs	r3, #0
 8006c18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d101      	bne.n	8006c24 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	e226      	b.n	8007072 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d101      	bne.n	8006c32 <HAL_DMA_Start_IT+0x2a>
 8006c2e:	2302      	movs	r3, #2
 8006c30:	e21f      	b.n	8007072 <HAL_DMA_Start_IT+0x46a>
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2201      	movs	r2, #1
 8006c36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	f040 820a 	bne.w	800705c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2200      	movs	r2, #0
 8006c54:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a68      	ldr	r2, [pc, #416]	@ (8006dfc <HAL_DMA_Start_IT+0x1f4>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d04a      	beq.n	8006cf6 <HAL_DMA_Start_IT+0xee>
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a66      	ldr	r2, [pc, #408]	@ (8006e00 <HAL_DMA_Start_IT+0x1f8>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d045      	beq.n	8006cf6 <HAL_DMA_Start_IT+0xee>
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a65      	ldr	r2, [pc, #404]	@ (8006e04 <HAL_DMA_Start_IT+0x1fc>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d040      	beq.n	8006cf6 <HAL_DMA_Start_IT+0xee>
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a63      	ldr	r2, [pc, #396]	@ (8006e08 <HAL_DMA_Start_IT+0x200>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d03b      	beq.n	8006cf6 <HAL_DMA_Start_IT+0xee>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a62      	ldr	r2, [pc, #392]	@ (8006e0c <HAL_DMA_Start_IT+0x204>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d036      	beq.n	8006cf6 <HAL_DMA_Start_IT+0xee>
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a60      	ldr	r2, [pc, #384]	@ (8006e10 <HAL_DMA_Start_IT+0x208>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d031      	beq.n	8006cf6 <HAL_DMA_Start_IT+0xee>
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a5f      	ldr	r2, [pc, #380]	@ (8006e14 <HAL_DMA_Start_IT+0x20c>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d02c      	beq.n	8006cf6 <HAL_DMA_Start_IT+0xee>
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a5d      	ldr	r2, [pc, #372]	@ (8006e18 <HAL_DMA_Start_IT+0x210>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d027      	beq.n	8006cf6 <HAL_DMA_Start_IT+0xee>
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a5c      	ldr	r2, [pc, #368]	@ (8006e1c <HAL_DMA_Start_IT+0x214>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d022      	beq.n	8006cf6 <HAL_DMA_Start_IT+0xee>
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a5a      	ldr	r2, [pc, #360]	@ (8006e20 <HAL_DMA_Start_IT+0x218>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d01d      	beq.n	8006cf6 <HAL_DMA_Start_IT+0xee>
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a59      	ldr	r2, [pc, #356]	@ (8006e24 <HAL_DMA_Start_IT+0x21c>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d018      	beq.n	8006cf6 <HAL_DMA_Start_IT+0xee>
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a57      	ldr	r2, [pc, #348]	@ (8006e28 <HAL_DMA_Start_IT+0x220>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d013      	beq.n	8006cf6 <HAL_DMA_Start_IT+0xee>
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a56      	ldr	r2, [pc, #344]	@ (8006e2c <HAL_DMA_Start_IT+0x224>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d00e      	beq.n	8006cf6 <HAL_DMA_Start_IT+0xee>
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a54      	ldr	r2, [pc, #336]	@ (8006e30 <HAL_DMA_Start_IT+0x228>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d009      	beq.n	8006cf6 <HAL_DMA_Start_IT+0xee>
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a53      	ldr	r2, [pc, #332]	@ (8006e34 <HAL_DMA_Start_IT+0x22c>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d004      	beq.n	8006cf6 <HAL_DMA_Start_IT+0xee>
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a51      	ldr	r2, [pc, #324]	@ (8006e38 <HAL_DMA_Start_IT+0x230>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d108      	bne.n	8006d08 <HAL_DMA_Start_IT+0x100>
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f022 0201 	bic.w	r2, r2, #1
 8006d04:	601a      	str	r2, [r3, #0]
 8006d06:	e007      	b.n	8006d18 <HAL_DMA_Start_IT+0x110>
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f022 0201 	bic.w	r2, r2, #1
 8006d16:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	687a      	ldr	r2, [r7, #4]
 8006d1c:	68b9      	ldr	r1, [r7, #8]
 8006d1e:	68f8      	ldr	r0, [r7, #12]
 8006d20:	f001 f906 	bl	8007f30 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a34      	ldr	r2, [pc, #208]	@ (8006dfc <HAL_DMA_Start_IT+0x1f4>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d04a      	beq.n	8006dc4 <HAL_DMA_Start_IT+0x1bc>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a33      	ldr	r2, [pc, #204]	@ (8006e00 <HAL_DMA_Start_IT+0x1f8>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d045      	beq.n	8006dc4 <HAL_DMA_Start_IT+0x1bc>
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a31      	ldr	r2, [pc, #196]	@ (8006e04 <HAL_DMA_Start_IT+0x1fc>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d040      	beq.n	8006dc4 <HAL_DMA_Start_IT+0x1bc>
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a30      	ldr	r2, [pc, #192]	@ (8006e08 <HAL_DMA_Start_IT+0x200>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d03b      	beq.n	8006dc4 <HAL_DMA_Start_IT+0x1bc>
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a2e      	ldr	r2, [pc, #184]	@ (8006e0c <HAL_DMA_Start_IT+0x204>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d036      	beq.n	8006dc4 <HAL_DMA_Start_IT+0x1bc>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a2d      	ldr	r2, [pc, #180]	@ (8006e10 <HAL_DMA_Start_IT+0x208>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d031      	beq.n	8006dc4 <HAL_DMA_Start_IT+0x1bc>
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a2b      	ldr	r2, [pc, #172]	@ (8006e14 <HAL_DMA_Start_IT+0x20c>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d02c      	beq.n	8006dc4 <HAL_DMA_Start_IT+0x1bc>
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a2a      	ldr	r2, [pc, #168]	@ (8006e18 <HAL_DMA_Start_IT+0x210>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d027      	beq.n	8006dc4 <HAL_DMA_Start_IT+0x1bc>
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a28      	ldr	r2, [pc, #160]	@ (8006e1c <HAL_DMA_Start_IT+0x214>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d022      	beq.n	8006dc4 <HAL_DMA_Start_IT+0x1bc>
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a27      	ldr	r2, [pc, #156]	@ (8006e20 <HAL_DMA_Start_IT+0x218>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d01d      	beq.n	8006dc4 <HAL_DMA_Start_IT+0x1bc>
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a25      	ldr	r2, [pc, #148]	@ (8006e24 <HAL_DMA_Start_IT+0x21c>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d018      	beq.n	8006dc4 <HAL_DMA_Start_IT+0x1bc>
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a24      	ldr	r2, [pc, #144]	@ (8006e28 <HAL_DMA_Start_IT+0x220>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d013      	beq.n	8006dc4 <HAL_DMA_Start_IT+0x1bc>
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a22      	ldr	r2, [pc, #136]	@ (8006e2c <HAL_DMA_Start_IT+0x224>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d00e      	beq.n	8006dc4 <HAL_DMA_Start_IT+0x1bc>
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a21      	ldr	r2, [pc, #132]	@ (8006e30 <HAL_DMA_Start_IT+0x228>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d009      	beq.n	8006dc4 <HAL_DMA_Start_IT+0x1bc>
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a1f      	ldr	r2, [pc, #124]	@ (8006e34 <HAL_DMA_Start_IT+0x22c>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d004      	beq.n	8006dc4 <HAL_DMA_Start_IT+0x1bc>
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a1e      	ldr	r2, [pc, #120]	@ (8006e38 <HAL_DMA_Start_IT+0x230>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d101      	bne.n	8006dc8 <HAL_DMA_Start_IT+0x1c0>
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e000      	b.n	8006dca <HAL_DMA_Start_IT+0x1c2>
 8006dc8:	2300      	movs	r3, #0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d036      	beq.n	8006e3c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f023 021e 	bic.w	r2, r3, #30
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f042 0216 	orr.w	r2, r2, #22
 8006de0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d03e      	beq.n	8006e68 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f042 0208 	orr.w	r2, r2, #8
 8006df8:	601a      	str	r2, [r3, #0]
 8006dfa:	e035      	b.n	8006e68 <HAL_DMA_Start_IT+0x260>
 8006dfc:	40020010 	.word	0x40020010
 8006e00:	40020028 	.word	0x40020028
 8006e04:	40020040 	.word	0x40020040
 8006e08:	40020058 	.word	0x40020058
 8006e0c:	40020070 	.word	0x40020070
 8006e10:	40020088 	.word	0x40020088
 8006e14:	400200a0 	.word	0x400200a0
 8006e18:	400200b8 	.word	0x400200b8
 8006e1c:	40020410 	.word	0x40020410
 8006e20:	40020428 	.word	0x40020428
 8006e24:	40020440 	.word	0x40020440
 8006e28:	40020458 	.word	0x40020458
 8006e2c:	40020470 	.word	0x40020470
 8006e30:	40020488 	.word	0x40020488
 8006e34:	400204a0 	.word	0x400204a0
 8006e38:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f023 020e 	bic.w	r2, r3, #14
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f042 020a 	orr.w	r2, r2, #10
 8006e4e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d007      	beq.n	8006e68 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f042 0204 	orr.w	r2, r2, #4
 8006e66:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a83      	ldr	r2, [pc, #524]	@ (800707c <HAL_DMA_Start_IT+0x474>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d072      	beq.n	8006f58 <HAL_DMA_Start_IT+0x350>
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a82      	ldr	r2, [pc, #520]	@ (8007080 <HAL_DMA_Start_IT+0x478>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d06d      	beq.n	8006f58 <HAL_DMA_Start_IT+0x350>
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a80      	ldr	r2, [pc, #512]	@ (8007084 <HAL_DMA_Start_IT+0x47c>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d068      	beq.n	8006f58 <HAL_DMA_Start_IT+0x350>
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a7f      	ldr	r2, [pc, #508]	@ (8007088 <HAL_DMA_Start_IT+0x480>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d063      	beq.n	8006f58 <HAL_DMA_Start_IT+0x350>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a7d      	ldr	r2, [pc, #500]	@ (800708c <HAL_DMA_Start_IT+0x484>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d05e      	beq.n	8006f58 <HAL_DMA_Start_IT+0x350>
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a7c      	ldr	r2, [pc, #496]	@ (8007090 <HAL_DMA_Start_IT+0x488>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d059      	beq.n	8006f58 <HAL_DMA_Start_IT+0x350>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a7a      	ldr	r2, [pc, #488]	@ (8007094 <HAL_DMA_Start_IT+0x48c>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d054      	beq.n	8006f58 <HAL_DMA_Start_IT+0x350>
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a79      	ldr	r2, [pc, #484]	@ (8007098 <HAL_DMA_Start_IT+0x490>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d04f      	beq.n	8006f58 <HAL_DMA_Start_IT+0x350>
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a77      	ldr	r2, [pc, #476]	@ (800709c <HAL_DMA_Start_IT+0x494>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d04a      	beq.n	8006f58 <HAL_DMA_Start_IT+0x350>
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a76      	ldr	r2, [pc, #472]	@ (80070a0 <HAL_DMA_Start_IT+0x498>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d045      	beq.n	8006f58 <HAL_DMA_Start_IT+0x350>
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a74      	ldr	r2, [pc, #464]	@ (80070a4 <HAL_DMA_Start_IT+0x49c>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d040      	beq.n	8006f58 <HAL_DMA_Start_IT+0x350>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a73      	ldr	r2, [pc, #460]	@ (80070a8 <HAL_DMA_Start_IT+0x4a0>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d03b      	beq.n	8006f58 <HAL_DMA_Start_IT+0x350>
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a71      	ldr	r2, [pc, #452]	@ (80070ac <HAL_DMA_Start_IT+0x4a4>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d036      	beq.n	8006f58 <HAL_DMA_Start_IT+0x350>
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a70      	ldr	r2, [pc, #448]	@ (80070b0 <HAL_DMA_Start_IT+0x4a8>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d031      	beq.n	8006f58 <HAL_DMA_Start_IT+0x350>
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a6e      	ldr	r2, [pc, #440]	@ (80070b4 <HAL_DMA_Start_IT+0x4ac>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d02c      	beq.n	8006f58 <HAL_DMA_Start_IT+0x350>
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a6d      	ldr	r2, [pc, #436]	@ (80070b8 <HAL_DMA_Start_IT+0x4b0>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d027      	beq.n	8006f58 <HAL_DMA_Start_IT+0x350>
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a6b      	ldr	r2, [pc, #428]	@ (80070bc <HAL_DMA_Start_IT+0x4b4>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d022      	beq.n	8006f58 <HAL_DMA_Start_IT+0x350>
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a6a      	ldr	r2, [pc, #424]	@ (80070c0 <HAL_DMA_Start_IT+0x4b8>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d01d      	beq.n	8006f58 <HAL_DMA_Start_IT+0x350>
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a68      	ldr	r2, [pc, #416]	@ (80070c4 <HAL_DMA_Start_IT+0x4bc>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d018      	beq.n	8006f58 <HAL_DMA_Start_IT+0x350>
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a67      	ldr	r2, [pc, #412]	@ (80070c8 <HAL_DMA_Start_IT+0x4c0>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d013      	beq.n	8006f58 <HAL_DMA_Start_IT+0x350>
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a65      	ldr	r2, [pc, #404]	@ (80070cc <HAL_DMA_Start_IT+0x4c4>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d00e      	beq.n	8006f58 <HAL_DMA_Start_IT+0x350>
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a64      	ldr	r2, [pc, #400]	@ (80070d0 <HAL_DMA_Start_IT+0x4c8>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d009      	beq.n	8006f58 <HAL_DMA_Start_IT+0x350>
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a62      	ldr	r2, [pc, #392]	@ (80070d4 <HAL_DMA_Start_IT+0x4cc>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d004      	beq.n	8006f58 <HAL_DMA_Start_IT+0x350>
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a61      	ldr	r2, [pc, #388]	@ (80070d8 <HAL_DMA_Start_IT+0x4d0>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d101      	bne.n	8006f5c <HAL_DMA_Start_IT+0x354>
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e000      	b.n	8006f5e <HAL_DMA_Start_IT+0x356>
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d01a      	beq.n	8006f98 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d007      	beq.n	8006f80 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006f7e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d007      	beq.n	8006f98 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006f96:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a37      	ldr	r2, [pc, #220]	@ (800707c <HAL_DMA_Start_IT+0x474>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d04a      	beq.n	8007038 <HAL_DMA_Start_IT+0x430>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a36      	ldr	r2, [pc, #216]	@ (8007080 <HAL_DMA_Start_IT+0x478>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d045      	beq.n	8007038 <HAL_DMA_Start_IT+0x430>
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a34      	ldr	r2, [pc, #208]	@ (8007084 <HAL_DMA_Start_IT+0x47c>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d040      	beq.n	8007038 <HAL_DMA_Start_IT+0x430>
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a33      	ldr	r2, [pc, #204]	@ (8007088 <HAL_DMA_Start_IT+0x480>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d03b      	beq.n	8007038 <HAL_DMA_Start_IT+0x430>
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a31      	ldr	r2, [pc, #196]	@ (800708c <HAL_DMA_Start_IT+0x484>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d036      	beq.n	8007038 <HAL_DMA_Start_IT+0x430>
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a30      	ldr	r2, [pc, #192]	@ (8007090 <HAL_DMA_Start_IT+0x488>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d031      	beq.n	8007038 <HAL_DMA_Start_IT+0x430>
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a2e      	ldr	r2, [pc, #184]	@ (8007094 <HAL_DMA_Start_IT+0x48c>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d02c      	beq.n	8007038 <HAL_DMA_Start_IT+0x430>
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a2d      	ldr	r2, [pc, #180]	@ (8007098 <HAL_DMA_Start_IT+0x490>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d027      	beq.n	8007038 <HAL_DMA_Start_IT+0x430>
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a2b      	ldr	r2, [pc, #172]	@ (800709c <HAL_DMA_Start_IT+0x494>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d022      	beq.n	8007038 <HAL_DMA_Start_IT+0x430>
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a2a      	ldr	r2, [pc, #168]	@ (80070a0 <HAL_DMA_Start_IT+0x498>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d01d      	beq.n	8007038 <HAL_DMA_Start_IT+0x430>
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a28      	ldr	r2, [pc, #160]	@ (80070a4 <HAL_DMA_Start_IT+0x49c>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d018      	beq.n	8007038 <HAL_DMA_Start_IT+0x430>
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a27      	ldr	r2, [pc, #156]	@ (80070a8 <HAL_DMA_Start_IT+0x4a0>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d013      	beq.n	8007038 <HAL_DMA_Start_IT+0x430>
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a25      	ldr	r2, [pc, #148]	@ (80070ac <HAL_DMA_Start_IT+0x4a4>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d00e      	beq.n	8007038 <HAL_DMA_Start_IT+0x430>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a24      	ldr	r2, [pc, #144]	@ (80070b0 <HAL_DMA_Start_IT+0x4a8>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d009      	beq.n	8007038 <HAL_DMA_Start_IT+0x430>
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a22      	ldr	r2, [pc, #136]	@ (80070b4 <HAL_DMA_Start_IT+0x4ac>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d004      	beq.n	8007038 <HAL_DMA_Start_IT+0x430>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a21      	ldr	r2, [pc, #132]	@ (80070b8 <HAL_DMA_Start_IT+0x4b0>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d108      	bne.n	800704a <HAL_DMA_Start_IT+0x442>
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f042 0201 	orr.w	r2, r2, #1
 8007046:	601a      	str	r2, [r3, #0]
 8007048:	e012      	b.n	8007070 <HAL_DMA_Start_IT+0x468>
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f042 0201 	orr.w	r2, r2, #1
 8007058:	601a      	str	r2, [r3, #0]
 800705a:	e009      	b.n	8007070 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007062:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2200      	movs	r2, #0
 8007068:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007070:	7dfb      	ldrb	r3, [r7, #23]
}
 8007072:	4618      	mov	r0, r3
 8007074:	3718      	adds	r7, #24
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop
 800707c:	40020010 	.word	0x40020010
 8007080:	40020028 	.word	0x40020028
 8007084:	40020040 	.word	0x40020040
 8007088:	40020058 	.word	0x40020058
 800708c:	40020070 	.word	0x40020070
 8007090:	40020088 	.word	0x40020088
 8007094:	400200a0 	.word	0x400200a0
 8007098:	400200b8 	.word	0x400200b8
 800709c:	40020410 	.word	0x40020410
 80070a0:	40020428 	.word	0x40020428
 80070a4:	40020440 	.word	0x40020440
 80070a8:	40020458 	.word	0x40020458
 80070ac:	40020470 	.word	0x40020470
 80070b0:	40020488 	.word	0x40020488
 80070b4:	400204a0 	.word	0x400204a0
 80070b8:	400204b8 	.word	0x400204b8
 80070bc:	58025408 	.word	0x58025408
 80070c0:	5802541c 	.word	0x5802541c
 80070c4:	58025430 	.word	0x58025430
 80070c8:	58025444 	.word	0x58025444
 80070cc:	58025458 	.word	0x58025458
 80070d0:	5802546c 	.word	0x5802546c
 80070d4:	58025480 	.word	0x58025480
 80070d8:	58025494 	.word	0x58025494

080070dc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b08a      	sub	sp, #40	@ 0x28
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80070e4:	2300      	movs	r3, #0
 80070e6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80070e8:	4b67      	ldr	r3, [pc, #412]	@ (8007288 <HAL_DMA_IRQHandler+0x1ac>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a67      	ldr	r2, [pc, #412]	@ (800728c <HAL_DMA_IRQHandler+0x1b0>)
 80070ee:	fba2 2303 	umull	r2, r3, r2, r3
 80070f2:	0a9b      	lsrs	r3, r3, #10
 80070f4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070fa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007100:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007102:	6a3b      	ldr	r3, [r7, #32]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a5f      	ldr	r2, [pc, #380]	@ (8007290 <HAL_DMA_IRQHandler+0x1b4>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d04a      	beq.n	80071ae <HAL_DMA_IRQHandler+0xd2>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a5d      	ldr	r2, [pc, #372]	@ (8007294 <HAL_DMA_IRQHandler+0x1b8>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d045      	beq.n	80071ae <HAL_DMA_IRQHandler+0xd2>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a5c      	ldr	r2, [pc, #368]	@ (8007298 <HAL_DMA_IRQHandler+0x1bc>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d040      	beq.n	80071ae <HAL_DMA_IRQHandler+0xd2>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a5a      	ldr	r2, [pc, #360]	@ (800729c <HAL_DMA_IRQHandler+0x1c0>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d03b      	beq.n	80071ae <HAL_DMA_IRQHandler+0xd2>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a59      	ldr	r2, [pc, #356]	@ (80072a0 <HAL_DMA_IRQHandler+0x1c4>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d036      	beq.n	80071ae <HAL_DMA_IRQHandler+0xd2>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a57      	ldr	r2, [pc, #348]	@ (80072a4 <HAL_DMA_IRQHandler+0x1c8>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d031      	beq.n	80071ae <HAL_DMA_IRQHandler+0xd2>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a56      	ldr	r2, [pc, #344]	@ (80072a8 <HAL_DMA_IRQHandler+0x1cc>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d02c      	beq.n	80071ae <HAL_DMA_IRQHandler+0xd2>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a54      	ldr	r2, [pc, #336]	@ (80072ac <HAL_DMA_IRQHandler+0x1d0>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d027      	beq.n	80071ae <HAL_DMA_IRQHandler+0xd2>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a53      	ldr	r2, [pc, #332]	@ (80072b0 <HAL_DMA_IRQHandler+0x1d4>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d022      	beq.n	80071ae <HAL_DMA_IRQHandler+0xd2>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a51      	ldr	r2, [pc, #324]	@ (80072b4 <HAL_DMA_IRQHandler+0x1d8>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d01d      	beq.n	80071ae <HAL_DMA_IRQHandler+0xd2>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a50      	ldr	r2, [pc, #320]	@ (80072b8 <HAL_DMA_IRQHandler+0x1dc>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d018      	beq.n	80071ae <HAL_DMA_IRQHandler+0xd2>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a4e      	ldr	r2, [pc, #312]	@ (80072bc <HAL_DMA_IRQHandler+0x1e0>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d013      	beq.n	80071ae <HAL_DMA_IRQHandler+0xd2>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a4d      	ldr	r2, [pc, #308]	@ (80072c0 <HAL_DMA_IRQHandler+0x1e4>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d00e      	beq.n	80071ae <HAL_DMA_IRQHandler+0xd2>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a4b      	ldr	r2, [pc, #300]	@ (80072c4 <HAL_DMA_IRQHandler+0x1e8>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d009      	beq.n	80071ae <HAL_DMA_IRQHandler+0xd2>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a4a      	ldr	r2, [pc, #296]	@ (80072c8 <HAL_DMA_IRQHandler+0x1ec>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d004      	beq.n	80071ae <HAL_DMA_IRQHandler+0xd2>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a48      	ldr	r2, [pc, #288]	@ (80072cc <HAL_DMA_IRQHandler+0x1f0>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d101      	bne.n	80071b2 <HAL_DMA_IRQHandler+0xd6>
 80071ae:	2301      	movs	r3, #1
 80071b0:	e000      	b.n	80071b4 <HAL_DMA_IRQHandler+0xd8>
 80071b2:	2300      	movs	r3, #0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	f000 842b 	beq.w	8007a10 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071be:	f003 031f 	and.w	r3, r3, #31
 80071c2:	2208      	movs	r2, #8
 80071c4:	409a      	lsls	r2, r3
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	4013      	ands	r3, r2
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	f000 80a2 	beq.w	8007314 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a2e      	ldr	r2, [pc, #184]	@ (8007290 <HAL_DMA_IRQHandler+0x1b4>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d04a      	beq.n	8007270 <HAL_DMA_IRQHandler+0x194>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a2d      	ldr	r2, [pc, #180]	@ (8007294 <HAL_DMA_IRQHandler+0x1b8>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d045      	beq.n	8007270 <HAL_DMA_IRQHandler+0x194>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a2b      	ldr	r2, [pc, #172]	@ (8007298 <HAL_DMA_IRQHandler+0x1bc>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d040      	beq.n	8007270 <HAL_DMA_IRQHandler+0x194>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a2a      	ldr	r2, [pc, #168]	@ (800729c <HAL_DMA_IRQHandler+0x1c0>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d03b      	beq.n	8007270 <HAL_DMA_IRQHandler+0x194>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a28      	ldr	r2, [pc, #160]	@ (80072a0 <HAL_DMA_IRQHandler+0x1c4>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d036      	beq.n	8007270 <HAL_DMA_IRQHandler+0x194>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a27      	ldr	r2, [pc, #156]	@ (80072a4 <HAL_DMA_IRQHandler+0x1c8>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d031      	beq.n	8007270 <HAL_DMA_IRQHandler+0x194>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a25      	ldr	r2, [pc, #148]	@ (80072a8 <HAL_DMA_IRQHandler+0x1cc>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d02c      	beq.n	8007270 <HAL_DMA_IRQHandler+0x194>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a24      	ldr	r2, [pc, #144]	@ (80072ac <HAL_DMA_IRQHandler+0x1d0>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d027      	beq.n	8007270 <HAL_DMA_IRQHandler+0x194>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a22      	ldr	r2, [pc, #136]	@ (80072b0 <HAL_DMA_IRQHandler+0x1d4>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d022      	beq.n	8007270 <HAL_DMA_IRQHandler+0x194>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a21      	ldr	r2, [pc, #132]	@ (80072b4 <HAL_DMA_IRQHandler+0x1d8>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d01d      	beq.n	8007270 <HAL_DMA_IRQHandler+0x194>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a1f      	ldr	r2, [pc, #124]	@ (80072b8 <HAL_DMA_IRQHandler+0x1dc>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d018      	beq.n	8007270 <HAL_DMA_IRQHandler+0x194>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a1e      	ldr	r2, [pc, #120]	@ (80072bc <HAL_DMA_IRQHandler+0x1e0>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d013      	beq.n	8007270 <HAL_DMA_IRQHandler+0x194>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a1c      	ldr	r2, [pc, #112]	@ (80072c0 <HAL_DMA_IRQHandler+0x1e4>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d00e      	beq.n	8007270 <HAL_DMA_IRQHandler+0x194>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a1b      	ldr	r2, [pc, #108]	@ (80072c4 <HAL_DMA_IRQHandler+0x1e8>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d009      	beq.n	8007270 <HAL_DMA_IRQHandler+0x194>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a19      	ldr	r2, [pc, #100]	@ (80072c8 <HAL_DMA_IRQHandler+0x1ec>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d004      	beq.n	8007270 <HAL_DMA_IRQHandler+0x194>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a18      	ldr	r2, [pc, #96]	@ (80072cc <HAL_DMA_IRQHandler+0x1f0>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d12f      	bne.n	80072d0 <HAL_DMA_IRQHandler+0x1f4>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f003 0304 	and.w	r3, r3, #4
 800727a:	2b00      	cmp	r3, #0
 800727c:	bf14      	ite	ne
 800727e:	2301      	movne	r3, #1
 8007280:	2300      	moveq	r3, #0
 8007282:	b2db      	uxtb	r3, r3
 8007284:	e02e      	b.n	80072e4 <HAL_DMA_IRQHandler+0x208>
 8007286:	bf00      	nop
 8007288:	24000024 	.word	0x24000024
 800728c:	1b4e81b5 	.word	0x1b4e81b5
 8007290:	40020010 	.word	0x40020010
 8007294:	40020028 	.word	0x40020028
 8007298:	40020040 	.word	0x40020040
 800729c:	40020058 	.word	0x40020058
 80072a0:	40020070 	.word	0x40020070
 80072a4:	40020088 	.word	0x40020088
 80072a8:	400200a0 	.word	0x400200a0
 80072ac:	400200b8 	.word	0x400200b8
 80072b0:	40020410 	.word	0x40020410
 80072b4:	40020428 	.word	0x40020428
 80072b8:	40020440 	.word	0x40020440
 80072bc:	40020458 	.word	0x40020458
 80072c0:	40020470 	.word	0x40020470
 80072c4:	40020488 	.word	0x40020488
 80072c8:	400204a0 	.word	0x400204a0
 80072cc:	400204b8 	.word	0x400204b8
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f003 0308 	and.w	r3, r3, #8
 80072da:	2b00      	cmp	r3, #0
 80072dc:	bf14      	ite	ne
 80072de:	2301      	movne	r3, #1
 80072e0:	2300      	moveq	r3, #0
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d015      	beq.n	8007314 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f022 0204 	bic.w	r2, r2, #4
 80072f6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072fc:	f003 031f 	and.w	r3, r3, #31
 8007300:	2208      	movs	r2, #8
 8007302:	409a      	lsls	r2, r3
 8007304:	6a3b      	ldr	r3, [r7, #32]
 8007306:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800730c:	f043 0201 	orr.w	r2, r3, #1
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007318:	f003 031f 	and.w	r3, r3, #31
 800731c:	69ba      	ldr	r2, [r7, #24]
 800731e:	fa22 f303 	lsr.w	r3, r2, r3
 8007322:	f003 0301 	and.w	r3, r3, #1
 8007326:	2b00      	cmp	r3, #0
 8007328:	d06e      	beq.n	8007408 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a69      	ldr	r2, [pc, #420]	@ (80074d4 <HAL_DMA_IRQHandler+0x3f8>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d04a      	beq.n	80073ca <HAL_DMA_IRQHandler+0x2ee>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a67      	ldr	r2, [pc, #412]	@ (80074d8 <HAL_DMA_IRQHandler+0x3fc>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d045      	beq.n	80073ca <HAL_DMA_IRQHandler+0x2ee>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a66      	ldr	r2, [pc, #408]	@ (80074dc <HAL_DMA_IRQHandler+0x400>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d040      	beq.n	80073ca <HAL_DMA_IRQHandler+0x2ee>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a64      	ldr	r2, [pc, #400]	@ (80074e0 <HAL_DMA_IRQHandler+0x404>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d03b      	beq.n	80073ca <HAL_DMA_IRQHandler+0x2ee>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a63      	ldr	r2, [pc, #396]	@ (80074e4 <HAL_DMA_IRQHandler+0x408>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d036      	beq.n	80073ca <HAL_DMA_IRQHandler+0x2ee>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a61      	ldr	r2, [pc, #388]	@ (80074e8 <HAL_DMA_IRQHandler+0x40c>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d031      	beq.n	80073ca <HAL_DMA_IRQHandler+0x2ee>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a60      	ldr	r2, [pc, #384]	@ (80074ec <HAL_DMA_IRQHandler+0x410>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d02c      	beq.n	80073ca <HAL_DMA_IRQHandler+0x2ee>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a5e      	ldr	r2, [pc, #376]	@ (80074f0 <HAL_DMA_IRQHandler+0x414>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d027      	beq.n	80073ca <HAL_DMA_IRQHandler+0x2ee>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a5d      	ldr	r2, [pc, #372]	@ (80074f4 <HAL_DMA_IRQHandler+0x418>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d022      	beq.n	80073ca <HAL_DMA_IRQHandler+0x2ee>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a5b      	ldr	r2, [pc, #364]	@ (80074f8 <HAL_DMA_IRQHandler+0x41c>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d01d      	beq.n	80073ca <HAL_DMA_IRQHandler+0x2ee>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a5a      	ldr	r2, [pc, #360]	@ (80074fc <HAL_DMA_IRQHandler+0x420>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d018      	beq.n	80073ca <HAL_DMA_IRQHandler+0x2ee>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a58      	ldr	r2, [pc, #352]	@ (8007500 <HAL_DMA_IRQHandler+0x424>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d013      	beq.n	80073ca <HAL_DMA_IRQHandler+0x2ee>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a57      	ldr	r2, [pc, #348]	@ (8007504 <HAL_DMA_IRQHandler+0x428>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d00e      	beq.n	80073ca <HAL_DMA_IRQHandler+0x2ee>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a55      	ldr	r2, [pc, #340]	@ (8007508 <HAL_DMA_IRQHandler+0x42c>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d009      	beq.n	80073ca <HAL_DMA_IRQHandler+0x2ee>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a54      	ldr	r2, [pc, #336]	@ (800750c <HAL_DMA_IRQHandler+0x430>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d004      	beq.n	80073ca <HAL_DMA_IRQHandler+0x2ee>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a52      	ldr	r2, [pc, #328]	@ (8007510 <HAL_DMA_IRQHandler+0x434>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d10a      	bne.n	80073e0 <HAL_DMA_IRQHandler+0x304>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	695b      	ldr	r3, [r3, #20]
 80073d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	bf14      	ite	ne
 80073d8:	2301      	movne	r3, #1
 80073da:	2300      	moveq	r3, #0
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	e003      	b.n	80073e8 <HAL_DMA_IRQHandler+0x30c>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	2300      	movs	r3, #0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d00d      	beq.n	8007408 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073f0:	f003 031f 	and.w	r3, r3, #31
 80073f4:	2201      	movs	r2, #1
 80073f6:	409a      	lsls	r2, r3
 80073f8:	6a3b      	ldr	r3, [r7, #32]
 80073fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007400:	f043 0202 	orr.w	r2, r3, #2
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800740c:	f003 031f 	and.w	r3, r3, #31
 8007410:	2204      	movs	r2, #4
 8007412:	409a      	lsls	r2, r3
 8007414:	69bb      	ldr	r3, [r7, #24]
 8007416:	4013      	ands	r3, r2
 8007418:	2b00      	cmp	r3, #0
 800741a:	f000 808f 	beq.w	800753c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a2c      	ldr	r2, [pc, #176]	@ (80074d4 <HAL_DMA_IRQHandler+0x3f8>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d04a      	beq.n	80074be <HAL_DMA_IRQHandler+0x3e2>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a2a      	ldr	r2, [pc, #168]	@ (80074d8 <HAL_DMA_IRQHandler+0x3fc>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d045      	beq.n	80074be <HAL_DMA_IRQHandler+0x3e2>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a29      	ldr	r2, [pc, #164]	@ (80074dc <HAL_DMA_IRQHandler+0x400>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d040      	beq.n	80074be <HAL_DMA_IRQHandler+0x3e2>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a27      	ldr	r2, [pc, #156]	@ (80074e0 <HAL_DMA_IRQHandler+0x404>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d03b      	beq.n	80074be <HAL_DMA_IRQHandler+0x3e2>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a26      	ldr	r2, [pc, #152]	@ (80074e4 <HAL_DMA_IRQHandler+0x408>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d036      	beq.n	80074be <HAL_DMA_IRQHandler+0x3e2>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a24      	ldr	r2, [pc, #144]	@ (80074e8 <HAL_DMA_IRQHandler+0x40c>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d031      	beq.n	80074be <HAL_DMA_IRQHandler+0x3e2>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a23      	ldr	r2, [pc, #140]	@ (80074ec <HAL_DMA_IRQHandler+0x410>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d02c      	beq.n	80074be <HAL_DMA_IRQHandler+0x3e2>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a21      	ldr	r2, [pc, #132]	@ (80074f0 <HAL_DMA_IRQHandler+0x414>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d027      	beq.n	80074be <HAL_DMA_IRQHandler+0x3e2>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a20      	ldr	r2, [pc, #128]	@ (80074f4 <HAL_DMA_IRQHandler+0x418>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d022      	beq.n	80074be <HAL_DMA_IRQHandler+0x3e2>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a1e      	ldr	r2, [pc, #120]	@ (80074f8 <HAL_DMA_IRQHandler+0x41c>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d01d      	beq.n	80074be <HAL_DMA_IRQHandler+0x3e2>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a1d      	ldr	r2, [pc, #116]	@ (80074fc <HAL_DMA_IRQHandler+0x420>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d018      	beq.n	80074be <HAL_DMA_IRQHandler+0x3e2>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a1b      	ldr	r2, [pc, #108]	@ (8007500 <HAL_DMA_IRQHandler+0x424>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d013      	beq.n	80074be <HAL_DMA_IRQHandler+0x3e2>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a1a      	ldr	r2, [pc, #104]	@ (8007504 <HAL_DMA_IRQHandler+0x428>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d00e      	beq.n	80074be <HAL_DMA_IRQHandler+0x3e2>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a18      	ldr	r2, [pc, #96]	@ (8007508 <HAL_DMA_IRQHandler+0x42c>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d009      	beq.n	80074be <HAL_DMA_IRQHandler+0x3e2>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a17      	ldr	r2, [pc, #92]	@ (800750c <HAL_DMA_IRQHandler+0x430>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d004      	beq.n	80074be <HAL_DMA_IRQHandler+0x3e2>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a15      	ldr	r2, [pc, #84]	@ (8007510 <HAL_DMA_IRQHandler+0x434>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d12a      	bne.n	8007514 <HAL_DMA_IRQHandler+0x438>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 0302 	and.w	r3, r3, #2
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	bf14      	ite	ne
 80074cc:	2301      	movne	r3, #1
 80074ce:	2300      	moveq	r3, #0
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	e023      	b.n	800751c <HAL_DMA_IRQHandler+0x440>
 80074d4:	40020010 	.word	0x40020010
 80074d8:	40020028 	.word	0x40020028
 80074dc:	40020040 	.word	0x40020040
 80074e0:	40020058 	.word	0x40020058
 80074e4:	40020070 	.word	0x40020070
 80074e8:	40020088 	.word	0x40020088
 80074ec:	400200a0 	.word	0x400200a0
 80074f0:	400200b8 	.word	0x400200b8
 80074f4:	40020410 	.word	0x40020410
 80074f8:	40020428 	.word	0x40020428
 80074fc:	40020440 	.word	0x40020440
 8007500:	40020458 	.word	0x40020458
 8007504:	40020470 	.word	0x40020470
 8007508:	40020488 	.word	0x40020488
 800750c:	400204a0 	.word	0x400204a0
 8007510:	400204b8 	.word	0x400204b8
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	2300      	movs	r3, #0
 800751c:	2b00      	cmp	r3, #0
 800751e:	d00d      	beq.n	800753c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007524:	f003 031f 	and.w	r3, r3, #31
 8007528:	2204      	movs	r2, #4
 800752a:	409a      	lsls	r2, r3
 800752c:	6a3b      	ldr	r3, [r7, #32]
 800752e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007534:	f043 0204 	orr.w	r2, r3, #4
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007540:	f003 031f 	and.w	r3, r3, #31
 8007544:	2210      	movs	r2, #16
 8007546:	409a      	lsls	r2, r3
 8007548:	69bb      	ldr	r3, [r7, #24]
 800754a:	4013      	ands	r3, r2
 800754c:	2b00      	cmp	r3, #0
 800754e:	f000 80a6 	beq.w	800769e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a85      	ldr	r2, [pc, #532]	@ (800776c <HAL_DMA_IRQHandler+0x690>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d04a      	beq.n	80075f2 <HAL_DMA_IRQHandler+0x516>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a83      	ldr	r2, [pc, #524]	@ (8007770 <HAL_DMA_IRQHandler+0x694>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d045      	beq.n	80075f2 <HAL_DMA_IRQHandler+0x516>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a82      	ldr	r2, [pc, #520]	@ (8007774 <HAL_DMA_IRQHandler+0x698>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d040      	beq.n	80075f2 <HAL_DMA_IRQHandler+0x516>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a80      	ldr	r2, [pc, #512]	@ (8007778 <HAL_DMA_IRQHandler+0x69c>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d03b      	beq.n	80075f2 <HAL_DMA_IRQHandler+0x516>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a7f      	ldr	r2, [pc, #508]	@ (800777c <HAL_DMA_IRQHandler+0x6a0>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d036      	beq.n	80075f2 <HAL_DMA_IRQHandler+0x516>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a7d      	ldr	r2, [pc, #500]	@ (8007780 <HAL_DMA_IRQHandler+0x6a4>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d031      	beq.n	80075f2 <HAL_DMA_IRQHandler+0x516>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a7c      	ldr	r2, [pc, #496]	@ (8007784 <HAL_DMA_IRQHandler+0x6a8>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d02c      	beq.n	80075f2 <HAL_DMA_IRQHandler+0x516>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a7a      	ldr	r2, [pc, #488]	@ (8007788 <HAL_DMA_IRQHandler+0x6ac>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d027      	beq.n	80075f2 <HAL_DMA_IRQHandler+0x516>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a79      	ldr	r2, [pc, #484]	@ (800778c <HAL_DMA_IRQHandler+0x6b0>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d022      	beq.n	80075f2 <HAL_DMA_IRQHandler+0x516>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a77      	ldr	r2, [pc, #476]	@ (8007790 <HAL_DMA_IRQHandler+0x6b4>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d01d      	beq.n	80075f2 <HAL_DMA_IRQHandler+0x516>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a76      	ldr	r2, [pc, #472]	@ (8007794 <HAL_DMA_IRQHandler+0x6b8>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d018      	beq.n	80075f2 <HAL_DMA_IRQHandler+0x516>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a74      	ldr	r2, [pc, #464]	@ (8007798 <HAL_DMA_IRQHandler+0x6bc>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d013      	beq.n	80075f2 <HAL_DMA_IRQHandler+0x516>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a73      	ldr	r2, [pc, #460]	@ (800779c <HAL_DMA_IRQHandler+0x6c0>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d00e      	beq.n	80075f2 <HAL_DMA_IRQHandler+0x516>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a71      	ldr	r2, [pc, #452]	@ (80077a0 <HAL_DMA_IRQHandler+0x6c4>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d009      	beq.n	80075f2 <HAL_DMA_IRQHandler+0x516>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a70      	ldr	r2, [pc, #448]	@ (80077a4 <HAL_DMA_IRQHandler+0x6c8>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d004      	beq.n	80075f2 <HAL_DMA_IRQHandler+0x516>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a6e      	ldr	r2, [pc, #440]	@ (80077a8 <HAL_DMA_IRQHandler+0x6cc>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d10a      	bne.n	8007608 <HAL_DMA_IRQHandler+0x52c>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 0308 	and.w	r3, r3, #8
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	bf14      	ite	ne
 8007600:	2301      	movne	r3, #1
 8007602:	2300      	moveq	r3, #0
 8007604:	b2db      	uxtb	r3, r3
 8007606:	e009      	b.n	800761c <HAL_DMA_IRQHandler+0x540>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f003 0304 	and.w	r3, r3, #4
 8007612:	2b00      	cmp	r3, #0
 8007614:	bf14      	ite	ne
 8007616:	2301      	movne	r3, #1
 8007618:	2300      	moveq	r3, #0
 800761a:	b2db      	uxtb	r3, r3
 800761c:	2b00      	cmp	r3, #0
 800761e:	d03e      	beq.n	800769e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007624:	f003 031f 	and.w	r3, r3, #31
 8007628:	2210      	movs	r2, #16
 800762a:	409a      	lsls	r2, r3
 800762c:	6a3b      	ldr	r3, [r7, #32]
 800762e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800763a:	2b00      	cmp	r3, #0
 800763c:	d018      	beq.n	8007670 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007648:	2b00      	cmp	r3, #0
 800764a:	d108      	bne.n	800765e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007650:	2b00      	cmp	r3, #0
 8007652:	d024      	beq.n	800769e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	4798      	blx	r3
 800765c:	e01f      	b.n	800769e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007662:	2b00      	cmp	r3, #0
 8007664:	d01b      	beq.n	800769e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	4798      	blx	r3
 800766e:	e016      	b.n	800769e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800767a:	2b00      	cmp	r3, #0
 800767c:	d107      	bne.n	800768e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f022 0208 	bic.w	r2, r2, #8
 800768c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007692:	2b00      	cmp	r3, #0
 8007694:	d003      	beq.n	800769e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076a2:	f003 031f 	and.w	r3, r3, #31
 80076a6:	2220      	movs	r2, #32
 80076a8:	409a      	lsls	r2, r3
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	4013      	ands	r3, r2
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	f000 8110 	beq.w	80078d4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a2c      	ldr	r2, [pc, #176]	@ (800776c <HAL_DMA_IRQHandler+0x690>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d04a      	beq.n	8007754 <HAL_DMA_IRQHandler+0x678>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a2b      	ldr	r2, [pc, #172]	@ (8007770 <HAL_DMA_IRQHandler+0x694>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d045      	beq.n	8007754 <HAL_DMA_IRQHandler+0x678>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a29      	ldr	r2, [pc, #164]	@ (8007774 <HAL_DMA_IRQHandler+0x698>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d040      	beq.n	8007754 <HAL_DMA_IRQHandler+0x678>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a28      	ldr	r2, [pc, #160]	@ (8007778 <HAL_DMA_IRQHandler+0x69c>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d03b      	beq.n	8007754 <HAL_DMA_IRQHandler+0x678>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a26      	ldr	r2, [pc, #152]	@ (800777c <HAL_DMA_IRQHandler+0x6a0>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d036      	beq.n	8007754 <HAL_DMA_IRQHandler+0x678>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a25      	ldr	r2, [pc, #148]	@ (8007780 <HAL_DMA_IRQHandler+0x6a4>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d031      	beq.n	8007754 <HAL_DMA_IRQHandler+0x678>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a23      	ldr	r2, [pc, #140]	@ (8007784 <HAL_DMA_IRQHandler+0x6a8>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d02c      	beq.n	8007754 <HAL_DMA_IRQHandler+0x678>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a22      	ldr	r2, [pc, #136]	@ (8007788 <HAL_DMA_IRQHandler+0x6ac>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d027      	beq.n	8007754 <HAL_DMA_IRQHandler+0x678>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a20      	ldr	r2, [pc, #128]	@ (800778c <HAL_DMA_IRQHandler+0x6b0>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d022      	beq.n	8007754 <HAL_DMA_IRQHandler+0x678>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a1f      	ldr	r2, [pc, #124]	@ (8007790 <HAL_DMA_IRQHandler+0x6b4>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d01d      	beq.n	8007754 <HAL_DMA_IRQHandler+0x678>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a1d      	ldr	r2, [pc, #116]	@ (8007794 <HAL_DMA_IRQHandler+0x6b8>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d018      	beq.n	8007754 <HAL_DMA_IRQHandler+0x678>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a1c      	ldr	r2, [pc, #112]	@ (8007798 <HAL_DMA_IRQHandler+0x6bc>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d013      	beq.n	8007754 <HAL_DMA_IRQHandler+0x678>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a1a      	ldr	r2, [pc, #104]	@ (800779c <HAL_DMA_IRQHandler+0x6c0>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d00e      	beq.n	8007754 <HAL_DMA_IRQHandler+0x678>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a19      	ldr	r2, [pc, #100]	@ (80077a0 <HAL_DMA_IRQHandler+0x6c4>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d009      	beq.n	8007754 <HAL_DMA_IRQHandler+0x678>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a17      	ldr	r2, [pc, #92]	@ (80077a4 <HAL_DMA_IRQHandler+0x6c8>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d004      	beq.n	8007754 <HAL_DMA_IRQHandler+0x678>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a16      	ldr	r2, [pc, #88]	@ (80077a8 <HAL_DMA_IRQHandler+0x6cc>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d12b      	bne.n	80077ac <HAL_DMA_IRQHandler+0x6d0>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f003 0310 	and.w	r3, r3, #16
 800775e:	2b00      	cmp	r3, #0
 8007760:	bf14      	ite	ne
 8007762:	2301      	movne	r3, #1
 8007764:	2300      	moveq	r3, #0
 8007766:	b2db      	uxtb	r3, r3
 8007768:	e02a      	b.n	80077c0 <HAL_DMA_IRQHandler+0x6e4>
 800776a:	bf00      	nop
 800776c:	40020010 	.word	0x40020010
 8007770:	40020028 	.word	0x40020028
 8007774:	40020040 	.word	0x40020040
 8007778:	40020058 	.word	0x40020058
 800777c:	40020070 	.word	0x40020070
 8007780:	40020088 	.word	0x40020088
 8007784:	400200a0 	.word	0x400200a0
 8007788:	400200b8 	.word	0x400200b8
 800778c:	40020410 	.word	0x40020410
 8007790:	40020428 	.word	0x40020428
 8007794:	40020440 	.word	0x40020440
 8007798:	40020458 	.word	0x40020458
 800779c:	40020470 	.word	0x40020470
 80077a0:	40020488 	.word	0x40020488
 80077a4:	400204a0 	.word	0x400204a0
 80077a8:	400204b8 	.word	0x400204b8
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f003 0302 	and.w	r3, r3, #2
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	bf14      	ite	ne
 80077ba:	2301      	movne	r3, #1
 80077bc:	2300      	moveq	r3, #0
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	f000 8087 	beq.w	80078d4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077ca:	f003 031f 	and.w	r3, r3, #31
 80077ce:	2220      	movs	r2, #32
 80077d0:	409a      	lsls	r2, r3
 80077d2:	6a3b      	ldr	r3, [r7, #32]
 80077d4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	2b04      	cmp	r3, #4
 80077e0:	d139      	bne.n	8007856 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f022 0216 	bic.w	r2, r2, #22
 80077f0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	695a      	ldr	r2, [r3, #20]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007800:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007806:	2b00      	cmp	r3, #0
 8007808:	d103      	bne.n	8007812 <HAL_DMA_IRQHandler+0x736>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800780e:	2b00      	cmp	r3, #0
 8007810:	d007      	beq.n	8007822 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f022 0208 	bic.w	r2, r2, #8
 8007820:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007826:	f003 031f 	and.w	r3, r3, #31
 800782a:	223f      	movs	r2, #63	@ 0x3f
 800782c:	409a      	lsls	r2, r3
 800782e:	6a3b      	ldr	r3, [r7, #32]
 8007830:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2201      	movs	r2, #1
 8007836:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007846:	2b00      	cmp	r3, #0
 8007848:	f000 834a 	beq.w	8007ee0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	4798      	blx	r3
          }
          return;
 8007854:	e344      	b.n	8007ee0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007860:	2b00      	cmp	r3, #0
 8007862:	d018      	beq.n	8007896 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800786e:	2b00      	cmp	r3, #0
 8007870:	d108      	bne.n	8007884 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007876:	2b00      	cmp	r3, #0
 8007878:	d02c      	beq.n	80078d4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	4798      	blx	r3
 8007882:	e027      	b.n	80078d4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007888:	2b00      	cmp	r3, #0
 800788a:	d023      	beq.n	80078d4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	4798      	blx	r3
 8007894:	e01e      	b.n	80078d4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d10f      	bne.n	80078c4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f022 0210 	bic.w	r2, r2, #16
 80078b2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d003      	beq.n	80078d4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078d8:	2b00      	cmp	r3, #0
 80078da:	f000 8306 	beq.w	8007eea <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078e2:	f003 0301 	and.w	r3, r3, #1
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	f000 8088 	beq.w	80079fc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2204      	movs	r2, #4
 80078f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a7a      	ldr	r2, [pc, #488]	@ (8007ae4 <HAL_DMA_IRQHandler+0xa08>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d04a      	beq.n	8007994 <HAL_DMA_IRQHandler+0x8b8>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a79      	ldr	r2, [pc, #484]	@ (8007ae8 <HAL_DMA_IRQHandler+0xa0c>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d045      	beq.n	8007994 <HAL_DMA_IRQHandler+0x8b8>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a77      	ldr	r2, [pc, #476]	@ (8007aec <HAL_DMA_IRQHandler+0xa10>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d040      	beq.n	8007994 <HAL_DMA_IRQHandler+0x8b8>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a76      	ldr	r2, [pc, #472]	@ (8007af0 <HAL_DMA_IRQHandler+0xa14>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d03b      	beq.n	8007994 <HAL_DMA_IRQHandler+0x8b8>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a74      	ldr	r2, [pc, #464]	@ (8007af4 <HAL_DMA_IRQHandler+0xa18>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d036      	beq.n	8007994 <HAL_DMA_IRQHandler+0x8b8>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a73      	ldr	r2, [pc, #460]	@ (8007af8 <HAL_DMA_IRQHandler+0xa1c>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d031      	beq.n	8007994 <HAL_DMA_IRQHandler+0x8b8>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a71      	ldr	r2, [pc, #452]	@ (8007afc <HAL_DMA_IRQHandler+0xa20>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d02c      	beq.n	8007994 <HAL_DMA_IRQHandler+0x8b8>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a70      	ldr	r2, [pc, #448]	@ (8007b00 <HAL_DMA_IRQHandler+0xa24>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d027      	beq.n	8007994 <HAL_DMA_IRQHandler+0x8b8>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a6e      	ldr	r2, [pc, #440]	@ (8007b04 <HAL_DMA_IRQHandler+0xa28>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d022      	beq.n	8007994 <HAL_DMA_IRQHandler+0x8b8>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a6d      	ldr	r2, [pc, #436]	@ (8007b08 <HAL_DMA_IRQHandler+0xa2c>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d01d      	beq.n	8007994 <HAL_DMA_IRQHandler+0x8b8>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a6b      	ldr	r2, [pc, #428]	@ (8007b0c <HAL_DMA_IRQHandler+0xa30>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d018      	beq.n	8007994 <HAL_DMA_IRQHandler+0x8b8>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a6a      	ldr	r2, [pc, #424]	@ (8007b10 <HAL_DMA_IRQHandler+0xa34>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d013      	beq.n	8007994 <HAL_DMA_IRQHandler+0x8b8>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a68      	ldr	r2, [pc, #416]	@ (8007b14 <HAL_DMA_IRQHandler+0xa38>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d00e      	beq.n	8007994 <HAL_DMA_IRQHandler+0x8b8>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a67      	ldr	r2, [pc, #412]	@ (8007b18 <HAL_DMA_IRQHandler+0xa3c>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d009      	beq.n	8007994 <HAL_DMA_IRQHandler+0x8b8>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a65      	ldr	r2, [pc, #404]	@ (8007b1c <HAL_DMA_IRQHandler+0xa40>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d004      	beq.n	8007994 <HAL_DMA_IRQHandler+0x8b8>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a64      	ldr	r2, [pc, #400]	@ (8007b20 <HAL_DMA_IRQHandler+0xa44>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d108      	bne.n	80079a6 <HAL_DMA_IRQHandler+0x8ca>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f022 0201 	bic.w	r2, r2, #1
 80079a2:	601a      	str	r2, [r3, #0]
 80079a4:	e007      	b.n	80079b6 <HAL_DMA_IRQHandler+0x8da>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f022 0201 	bic.w	r2, r2, #1
 80079b4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	3301      	adds	r3, #1
 80079ba:	60fb      	str	r3, [r7, #12]
 80079bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079be:	429a      	cmp	r2, r3
 80079c0:	d307      	bcc.n	80079d2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f003 0301 	and.w	r3, r3, #1
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d1f2      	bne.n	80079b6 <HAL_DMA_IRQHandler+0x8da>
 80079d0:	e000      	b.n	80079d4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80079d2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f003 0301 	and.w	r3, r3, #1
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d004      	beq.n	80079ec <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2203      	movs	r2, #3
 80079e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80079ea:	e003      	b.n	80079f4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2201      	movs	r2, #1
 80079f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	f000 8272 	beq.w	8007eea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	4798      	blx	r3
 8007a0e:	e26c      	b.n	8007eea <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a43      	ldr	r2, [pc, #268]	@ (8007b24 <HAL_DMA_IRQHandler+0xa48>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d022      	beq.n	8007a60 <HAL_DMA_IRQHandler+0x984>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a42      	ldr	r2, [pc, #264]	@ (8007b28 <HAL_DMA_IRQHandler+0xa4c>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d01d      	beq.n	8007a60 <HAL_DMA_IRQHandler+0x984>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a40      	ldr	r2, [pc, #256]	@ (8007b2c <HAL_DMA_IRQHandler+0xa50>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d018      	beq.n	8007a60 <HAL_DMA_IRQHandler+0x984>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a3f      	ldr	r2, [pc, #252]	@ (8007b30 <HAL_DMA_IRQHandler+0xa54>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d013      	beq.n	8007a60 <HAL_DMA_IRQHandler+0x984>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a3d      	ldr	r2, [pc, #244]	@ (8007b34 <HAL_DMA_IRQHandler+0xa58>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d00e      	beq.n	8007a60 <HAL_DMA_IRQHandler+0x984>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a3c      	ldr	r2, [pc, #240]	@ (8007b38 <HAL_DMA_IRQHandler+0xa5c>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d009      	beq.n	8007a60 <HAL_DMA_IRQHandler+0x984>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a3a      	ldr	r2, [pc, #232]	@ (8007b3c <HAL_DMA_IRQHandler+0xa60>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d004      	beq.n	8007a60 <HAL_DMA_IRQHandler+0x984>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a39      	ldr	r2, [pc, #228]	@ (8007b40 <HAL_DMA_IRQHandler+0xa64>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d101      	bne.n	8007a64 <HAL_DMA_IRQHandler+0x988>
 8007a60:	2301      	movs	r3, #1
 8007a62:	e000      	b.n	8007a66 <HAL_DMA_IRQHandler+0x98a>
 8007a64:	2300      	movs	r3, #0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	f000 823f 	beq.w	8007eea <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a78:	f003 031f 	and.w	r3, r3, #31
 8007a7c:	2204      	movs	r2, #4
 8007a7e:	409a      	lsls	r2, r3
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	4013      	ands	r3, r2
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f000 80cd 	beq.w	8007c24 <HAL_DMA_IRQHandler+0xb48>
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	f003 0304 	and.w	r3, r3, #4
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	f000 80c7 	beq.w	8007c24 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a9a:	f003 031f 	and.w	r3, r3, #31
 8007a9e:	2204      	movs	r2, #4
 8007aa0:	409a      	lsls	r2, r3
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d049      	beq.n	8007b44 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d109      	bne.n	8007ace <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	f000 8210 	beq.w	8007ee4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007acc:	e20a      	b.n	8007ee4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	f000 8206 	beq.w	8007ee4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ae0:	e200      	b.n	8007ee4 <HAL_DMA_IRQHandler+0xe08>
 8007ae2:	bf00      	nop
 8007ae4:	40020010 	.word	0x40020010
 8007ae8:	40020028 	.word	0x40020028
 8007aec:	40020040 	.word	0x40020040
 8007af0:	40020058 	.word	0x40020058
 8007af4:	40020070 	.word	0x40020070
 8007af8:	40020088 	.word	0x40020088
 8007afc:	400200a0 	.word	0x400200a0
 8007b00:	400200b8 	.word	0x400200b8
 8007b04:	40020410 	.word	0x40020410
 8007b08:	40020428 	.word	0x40020428
 8007b0c:	40020440 	.word	0x40020440
 8007b10:	40020458 	.word	0x40020458
 8007b14:	40020470 	.word	0x40020470
 8007b18:	40020488 	.word	0x40020488
 8007b1c:	400204a0 	.word	0x400204a0
 8007b20:	400204b8 	.word	0x400204b8
 8007b24:	58025408 	.word	0x58025408
 8007b28:	5802541c 	.word	0x5802541c
 8007b2c:	58025430 	.word	0x58025430
 8007b30:	58025444 	.word	0x58025444
 8007b34:	58025458 	.word	0x58025458
 8007b38:	5802546c 	.word	0x5802546c
 8007b3c:	58025480 	.word	0x58025480
 8007b40:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	f003 0320 	and.w	r3, r3, #32
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d160      	bne.n	8007c10 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a7f      	ldr	r2, [pc, #508]	@ (8007d50 <HAL_DMA_IRQHandler+0xc74>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d04a      	beq.n	8007bee <HAL_DMA_IRQHandler+0xb12>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a7d      	ldr	r2, [pc, #500]	@ (8007d54 <HAL_DMA_IRQHandler+0xc78>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d045      	beq.n	8007bee <HAL_DMA_IRQHandler+0xb12>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a7c      	ldr	r2, [pc, #496]	@ (8007d58 <HAL_DMA_IRQHandler+0xc7c>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d040      	beq.n	8007bee <HAL_DMA_IRQHandler+0xb12>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a7a      	ldr	r2, [pc, #488]	@ (8007d5c <HAL_DMA_IRQHandler+0xc80>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d03b      	beq.n	8007bee <HAL_DMA_IRQHandler+0xb12>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a79      	ldr	r2, [pc, #484]	@ (8007d60 <HAL_DMA_IRQHandler+0xc84>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d036      	beq.n	8007bee <HAL_DMA_IRQHandler+0xb12>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a77      	ldr	r2, [pc, #476]	@ (8007d64 <HAL_DMA_IRQHandler+0xc88>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d031      	beq.n	8007bee <HAL_DMA_IRQHandler+0xb12>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a76      	ldr	r2, [pc, #472]	@ (8007d68 <HAL_DMA_IRQHandler+0xc8c>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d02c      	beq.n	8007bee <HAL_DMA_IRQHandler+0xb12>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a74      	ldr	r2, [pc, #464]	@ (8007d6c <HAL_DMA_IRQHandler+0xc90>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d027      	beq.n	8007bee <HAL_DMA_IRQHandler+0xb12>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a73      	ldr	r2, [pc, #460]	@ (8007d70 <HAL_DMA_IRQHandler+0xc94>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d022      	beq.n	8007bee <HAL_DMA_IRQHandler+0xb12>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a71      	ldr	r2, [pc, #452]	@ (8007d74 <HAL_DMA_IRQHandler+0xc98>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d01d      	beq.n	8007bee <HAL_DMA_IRQHandler+0xb12>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a70      	ldr	r2, [pc, #448]	@ (8007d78 <HAL_DMA_IRQHandler+0xc9c>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d018      	beq.n	8007bee <HAL_DMA_IRQHandler+0xb12>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a6e      	ldr	r2, [pc, #440]	@ (8007d7c <HAL_DMA_IRQHandler+0xca0>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d013      	beq.n	8007bee <HAL_DMA_IRQHandler+0xb12>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a6d      	ldr	r2, [pc, #436]	@ (8007d80 <HAL_DMA_IRQHandler+0xca4>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d00e      	beq.n	8007bee <HAL_DMA_IRQHandler+0xb12>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a6b      	ldr	r2, [pc, #428]	@ (8007d84 <HAL_DMA_IRQHandler+0xca8>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d009      	beq.n	8007bee <HAL_DMA_IRQHandler+0xb12>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a6a      	ldr	r2, [pc, #424]	@ (8007d88 <HAL_DMA_IRQHandler+0xcac>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d004      	beq.n	8007bee <HAL_DMA_IRQHandler+0xb12>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a68      	ldr	r2, [pc, #416]	@ (8007d8c <HAL_DMA_IRQHandler+0xcb0>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d108      	bne.n	8007c00 <HAL_DMA_IRQHandler+0xb24>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f022 0208 	bic.w	r2, r2, #8
 8007bfc:	601a      	str	r2, [r3, #0]
 8007bfe:	e007      	b.n	8007c10 <HAL_DMA_IRQHandler+0xb34>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f022 0204 	bic.w	r2, r2, #4
 8007c0e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	f000 8165 	beq.w	8007ee4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c22:	e15f      	b.n	8007ee4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c28:	f003 031f 	and.w	r3, r3, #31
 8007c2c:	2202      	movs	r2, #2
 8007c2e:	409a      	lsls	r2, r3
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	4013      	ands	r3, r2
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	f000 80c5 	beq.w	8007dc4 <HAL_DMA_IRQHandler+0xce8>
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	f003 0302 	and.w	r3, r3, #2
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	f000 80bf 	beq.w	8007dc4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c4a:	f003 031f 	and.w	r3, r3, #31
 8007c4e:	2202      	movs	r2, #2
 8007c50:	409a      	lsls	r2, r3
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d018      	beq.n	8007c92 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d109      	bne.n	8007c7e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	f000 813a 	beq.w	8007ee8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c7c:	e134      	b.n	8007ee8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	f000 8130 	beq.w	8007ee8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c90:	e12a      	b.n	8007ee8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	f003 0320 	and.w	r3, r3, #32
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	f040 8089 	bne.w	8007db0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a2b      	ldr	r2, [pc, #172]	@ (8007d50 <HAL_DMA_IRQHandler+0xc74>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d04a      	beq.n	8007d3e <HAL_DMA_IRQHandler+0xc62>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a29      	ldr	r2, [pc, #164]	@ (8007d54 <HAL_DMA_IRQHandler+0xc78>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d045      	beq.n	8007d3e <HAL_DMA_IRQHandler+0xc62>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a28      	ldr	r2, [pc, #160]	@ (8007d58 <HAL_DMA_IRQHandler+0xc7c>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d040      	beq.n	8007d3e <HAL_DMA_IRQHandler+0xc62>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a26      	ldr	r2, [pc, #152]	@ (8007d5c <HAL_DMA_IRQHandler+0xc80>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d03b      	beq.n	8007d3e <HAL_DMA_IRQHandler+0xc62>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a25      	ldr	r2, [pc, #148]	@ (8007d60 <HAL_DMA_IRQHandler+0xc84>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d036      	beq.n	8007d3e <HAL_DMA_IRQHandler+0xc62>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a23      	ldr	r2, [pc, #140]	@ (8007d64 <HAL_DMA_IRQHandler+0xc88>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d031      	beq.n	8007d3e <HAL_DMA_IRQHandler+0xc62>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a22      	ldr	r2, [pc, #136]	@ (8007d68 <HAL_DMA_IRQHandler+0xc8c>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d02c      	beq.n	8007d3e <HAL_DMA_IRQHandler+0xc62>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a20      	ldr	r2, [pc, #128]	@ (8007d6c <HAL_DMA_IRQHandler+0xc90>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d027      	beq.n	8007d3e <HAL_DMA_IRQHandler+0xc62>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a1f      	ldr	r2, [pc, #124]	@ (8007d70 <HAL_DMA_IRQHandler+0xc94>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d022      	beq.n	8007d3e <HAL_DMA_IRQHandler+0xc62>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a1d      	ldr	r2, [pc, #116]	@ (8007d74 <HAL_DMA_IRQHandler+0xc98>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d01d      	beq.n	8007d3e <HAL_DMA_IRQHandler+0xc62>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a1c      	ldr	r2, [pc, #112]	@ (8007d78 <HAL_DMA_IRQHandler+0xc9c>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d018      	beq.n	8007d3e <HAL_DMA_IRQHandler+0xc62>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a1a      	ldr	r2, [pc, #104]	@ (8007d7c <HAL_DMA_IRQHandler+0xca0>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d013      	beq.n	8007d3e <HAL_DMA_IRQHandler+0xc62>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a19      	ldr	r2, [pc, #100]	@ (8007d80 <HAL_DMA_IRQHandler+0xca4>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d00e      	beq.n	8007d3e <HAL_DMA_IRQHandler+0xc62>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a17      	ldr	r2, [pc, #92]	@ (8007d84 <HAL_DMA_IRQHandler+0xca8>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d009      	beq.n	8007d3e <HAL_DMA_IRQHandler+0xc62>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a16      	ldr	r2, [pc, #88]	@ (8007d88 <HAL_DMA_IRQHandler+0xcac>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d004      	beq.n	8007d3e <HAL_DMA_IRQHandler+0xc62>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a14      	ldr	r2, [pc, #80]	@ (8007d8c <HAL_DMA_IRQHandler+0xcb0>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d128      	bne.n	8007d90 <HAL_DMA_IRQHandler+0xcb4>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f022 0214 	bic.w	r2, r2, #20
 8007d4c:	601a      	str	r2, [r3, #0]
 8007d4e:	e027      	b.n	8007da0 <HAL_DMA_IRQHandler+0xcc4>
 8007d50:	40020010 	.word	0x40020010
 8007d54:	40020028 	.word	0x40020028
 8007d58:	40020040 	.word	0x40020040
 8007d5c:	40020058 	.word	0x40020058
 8007d60:	40020070 	.word	0x40020070
 8007d64:	40020088 	.word	0x40020088
 8007d68:	400200a0 	.word	0x400200a0
 8007d6c:	400200b8 	.word	0x400200b8
 8007d70:	40020410 	.word	0x40020410
 8007d74:	40020428 	.word	0x40020428
 8007d78:	40020440 	.word	0x40020440
 8007d7c:	40020458 	.word	0x40020458
 8007d80:	40020470 	.word	0x40020470
 8007d84:	40020488 	.word	0x40020488
 8007d88:	400204a0 	.word	0x400204a0
 8007d8c:	400204b8 	.word	0x400204b8
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f022 020a 	bic.w	r2, r2, #10
 8007d9e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	f000 8097 	beq.w	8007ee8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007dc2:	e091      	b.n	8007ee8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007dc8:	f003 031f 	and.w	r3, r3, #31
 8007dcc:	2208      	movs	r2, #8
 8007dce:	409a      	lsls	r2, r3
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	4013      	ands	r3, r2
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	f000 8088 	beq.w	8007eea <HAL_DMA_IRQHandler+0xe0e>
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	f003 0308 	and.w	r3, r3, #8
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	f000 8082 	beq.w	8007eea <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a41      	ldr	r2, [pc, #260]	@ (8007ef0 <HAL_DMA_IRQHandler+0xe14>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d04a      	beq.n	8007e86 <HAL_DMA_IRQHandler+0xdaa>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a3f      	ldr	r2, [pc, #252]	@ (8007ef4 <HAL_DMA_IRQHandler+0xe18>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d045      	beq.n	8007e86 <HAL_DMA_IRQHandler+0xdaa>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a3e      	ldr	r2, [pc, #248]	@ (8007ef8 <HAL_DMA_IRQHandler+0xe1c>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d040      	beq.n	8007e86 <HAL_DMA_IRQHandler+0xdaa>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a3c      	ldr	r2, [pc, #240]	@ (8007efc <HAL_DMA_IRQHandler+0xe20>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d03b      	beq.n	8007e86 <HAL_DMA_IRQHandler+0xdaa>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a3b      	ldr	r2, [pc, #236]	@ (8007f00 <HAL_DMA_IRQHandler+0xe24>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d036      	beq.n	8007e86 <HAL_DMA_IRQHandler+0xdaa>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a39      	ldr	r2, [pc, #228]	@ (8007f04 <HAL_DMA_IRQHandler+0xe28>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d031      	beq.n	8007e86 <HAL_DMA_IRQHandler+0xdaa>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a38      	ldr	r2, [pc, #224]	@ (8007f08 <HAL_DMA_IRQHandler+0xe2c>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d02c      	beq.n	8007e86 <HAL_DMA_IRQHandler+0xdaa>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a36      	ldr	r2, [pc, #216]	@ (8007f0c <HAL_DMA_IRQHandler+0xe30>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d027      	beq.n	8007e86 <HAL_DMA_IRQHandler+0xdaa>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a35      	ldr	r2, [pc, #212]	@ (8007f10 <HAL_DMA_IRQHandler+0xe34>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d022      	beq.n	8007e86 <HAL_DMA_IRQHandler+0xdaa>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a33      	ldr	r2, [pc, #204]	@ (8007f14 <HAL_DMA_IRQHandler+0xe38>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d01d      	beq.n	8007e86 <HAL_DMA_IRQHandler+0xdaa>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a32      	ldr	r2, [pc, #200]	@ (8007f18 <HAL_DMA_IRQHandler+0xe3c>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d018      	beq.n	8007e86 <HAL_DMA_IRQHandler+0xdaa>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a30      	ldr	r2, [pc, #192]	@ (8007f1c <HAL_DMA_IRQHandler+0xe40>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d013      	beq.n	8007e86 <HAL_DMA_IRQHandler+0xdaa>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a2f      	ldr	r2, [pc, #188]	@ (8007f20 <HAL_DMA_IRQHandler+0xe44>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d00e      	beq.n	8007e86 <HAL_DMA_IRQHandler+0xdaa>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a2d      	ldr	r2, [pc, #180]	@ (8007f24 <HAL_DMA_IRQHandler+0xe48>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d009      	beq.n	8007e86 <HAL_DMA_IRQHandler+0xdaa>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a2c      	ldr	r2, [pc, #176]	@ (8007f28 <HAL_DMA_IRQHandler+0xe4c>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d004      	beq.n	8007e86 <HAL_DMA_IRQHandler+0xdaa>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a2a      	ldr	r2, [pc, #168]	@ (8007f2c <HAL_DMA_IRQHandler+0xe50>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d108      	bne.n	8007e98 <HAL_DMA_IRQHandler+0xdbc>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f022 021c 	bic.w	r2, r2, #28
 8007e94:	601a      	str	r2, [r3, #0]
 8007e96:	e007      	b.n	8007ea8 <HAL_DMA_IRQHandler+0xdcc>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f022 020e 	bic.w	r2, r2, #14
 8007ea6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007eac:	f003 031f 	and.w	r3, r3, #31
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	409a      	lsls	r2, r3
 8007eb4:	69fb      	ldr	r3, [r7, #28]
 8007eb6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d009      	beq.n	8007eea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	4798      	blx	r3
 8007ede:	e004      	b.n	8007eea <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007ee0:	bf00      	nop
 8007ee2:	e002      	b.n	8007eea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ee4:	bf00      	nop
 8007ee6:	e000      	b.n	8007eea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ee8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007eea:	3728      	adds	r7, #40	@ 0x28
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}
 8007ef0:	40020010 	.word	0x40020010
 8007ef4:	40020028 	.word	0x40020028
 8007ef8:	40020040 	.word	0x40020040
 8007efc:	40020058 	.word	0x40020058
 8007f00:	40020070 	.word	0x40020070
 8007f04:	40020088 	.word	0x40020088
 8007f08:	400200a0 	.word	0x400200a0
 8007f0c:	400200b8 	.word	0x400200b8
 8007f10:	40020410 	.word	0x40020410
 8007f14:	40020428 	.word	0x40020428
 8007f18:	40020440 	.word	0x40020440
 8007f1c:	40020458 	.word	0x40020458
 8007f20:	40020470 	.word	0x40020470
 8007f24:	40020488 	.word	0x40020488
 8007f28:	400204a0 	.word	0x400204a0
 8007f2c:	400204b8 	.word	0x400204b8

08007f30 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b087      	sub	sp, #28
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	607a      	str	r2, [r7, #4]
 8007f3c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f42:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f48:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a7f      	ldr	r2, [pc, #508]	@ (800814c <DMA_SetConfig+0x21c>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d072      	beq.n	800803a <DMA_SetConfig+0x10a>
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a7d      	ldr	r2, [pc, #500]	@ (8008150 <DMA_SetConfig+0x220>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d06d      	beq.n	800803a <DMA_SetConfig+0x10a>
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a7c      	ldr	r2, [pc, #496]	@ (8008154 <DMA_SetConfig+0x224>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d068      	beq.n	800803a <DMA_SetConfig+0x10a>
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a7a      	ldr	r2, [pc, #488]	@ (8008158 <DMA_SetConfig+0x228>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d063      	beq.n	800803a <DMA_SetConfig+0x10a>
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a79      	ldr	r2, [pc, #484]	@ (800815c <DMA_SetConfig+0x22c>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d05e      	beq.n	800803a <DMA_SetConfig+0x10a>
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a77      	ldr	r2, [pc, #476]	@ (8008160 <DMA_SetConfig+0x230>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d059      	beq.n	800803a <DMA_SetConfig+0x10a>
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a76      	ldr	r2, [pc, #472]	@ (8008164 <DMA_SetConfig+0x234>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d054      	beq.n	800803a <DMA_SetConfig+0x10a>
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a74      	ldr	r2, [pc, #464]	@ (8008168 <DMA_SetConfig+0x238>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d04f      	beq.n	800803a <DMA_SetConfig+0x10a>
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a73      	ldr	r2, [pc, #460]	@ (800816c <DMA_SetConfig+0x23c>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d04a      	beq.n	800803a <DMA_SetConfig+0x10a>
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a71      	ldr	r2, [pc, #452]	@ (8008170 <DMA_SetConfig+0x240>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d045      	beq.n	800803a <DMA_SetConfig+0x10a>
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a70      	ldr	r2, [pc, #448]	@ (8008174 <DMA_SetConfig+0x244>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d040      	beq.n	800803a <DMA_SetConfig+0x10a>
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a6e      	ldr	r2, [pc, #440]	@ (8008178 <DMA_SetConfig+0x248>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d03b      	beq.n	800803a <DMA_SetConfig+0x10a>
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a6d      	ldr	r2, [pc, #436]	@ (800817c <DMA_SetConfig+0x24c>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d036      	beq.n	800803a <DMA_SetConfig+0x10a>
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a6b      	ldr	r2, [pc, #428]	@ (8008180 <DMA_SetConfig+0x250>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d031      	beq.n	800803a <DMA_SetConfig+0x10a>
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a6a      	ldr	r2, [pc, #424]	@ (8008184 <DMA_SetConfig+0x254>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d02c      	beq.n	800803a <DMA_SetConfig+0x10a>
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a68      	ldr	r2, [pc, #416]	@ (8008188 <DMA_SetConfig+0x258>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d027      	beq.n	800803a <DMA_SetConfig+0x10a>
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a67      	ldr	r2, [pc, #412]	@ (800818c <DMA_SetConfig+0x25c>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d022      	beq.n	800803a <DMA_SetConfig+0x10a>
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a65      	ldr	r2, [pc, #404]	@ (8008190 <DMA_SetConfig+0x260>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d01d      	beq.n	800803a <DMA_SetConfig+0x10a>
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a64      	ldr	r2, [pc, #400]	@ (8008194 <DMA_SetConfig+0x264>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d018      	beq.n	800803a <DMA_SetConfig+0x10a>
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a62      	ldr	r2, [pc, #392]	@ (8008198 <DMA_SetConfig+0x268>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d013      	beq.n	800803a <DMA_SetConfig+0x10a>
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a61      	ldr	r2, [pc, #388]	@ (800819c <DMA_SetConfig+0x26c>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d00e      	beq.n	800803a <DMA_SetConfig+0x10a>
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a5f      	ldr	r2, [pc, #380]	@ (80081a0 <DMA_SetConfig+0x270>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d009      	beq.n	800803a <DMA_SetConfig+0x10a>
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a5e      	ldr	r2, [pc, #376]	@ (80081a4 <DMA_SetConfig+0x274>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d004      	beq.n	800803a <DMA_SetConfig+0x10a>
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a5c      	ldr	r2, [pc, #368]	@ (80081a8 <DMA_SetConfig+0x278>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d101      	bne.n	800803e <DMA_SetConfig+0x10e>
 800803a:	2301      	movs	r3, #1
 800803c:	e000      	b.n	8008040 <DMA_SetConfig+0x110>
 800803e:	2300      	movs	r3, #0
 8008040:	2b00      	cmp	r3, #0
 8008042:	d00d      	beq.n	8008060 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008048:	68fa      	ldr	r2, [r7, #12]
 800804a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800804c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008052:	2b00      	cmp	r3, #0
 8008054:	d004      	beq.n	8008060 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800805a:	68fa      	ldr	r2, [r7, #12]
 800805c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800805e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a39      	ldr	r2, [pc, #228]	@ (800814c <DMA_SetConfig+0x21c>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d04a      	beq.n	8008100 <DMA_SetConfig+0x1d0>
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a38      	ldr	r2, [pc, #224]	@ (8008150 <DMA_SetConfig+0x220>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d045      	beq.n	8008100 <DMA_SetConfig+0x1d0>
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a36      	ldr	r2, [pc, #216]	@ (8008154 <DMA_SetConfig+0x224>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d040      	beq.n	8008100 <DMA_SetConfig+0x1d0>
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a35      	ldr	r2, [pc, #212]	@ (8008158 <DMA_SetConfig+0x228>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d03b      	beq.n	8008100 <DMA_SetConfig+0x1d0>
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a33      	ldr	r2, [pc, #204]	@ (800815c <DMA_SetConfig+0x22c>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d036      	beq.n	8008100 <DMA_SetConfig+0x1d0>
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a32      	ldr	r2, [pc, #200]	@ (8008160 <DMA_SetConfig+0x230>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d031      	beq.n	8008100 <DMA_SetConfig+0x1d0>
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a30      	ldr	r2, [pc, #192]	@ (8008164 <DMA_SetConfig+0x234>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d02c      	beq.n	8008100 <DMA_SetConfig+0x1d0>
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a2f      	ldr	r2, [pc, #188]	@ (8008168 <DMA_SetConfig+0x238>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d027      	beq.n	8008100 <DMA_SetConfig+0x1d0>
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a2d      	ldr	r2, [pc, #180]	@ (800816c <DMA_SetConfig+0x23c>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d022      	beq.n	8008100 <DMA_SetConfig+0x1d0>
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a2c      	ldr	r2, [pc, #176]	@ (8008170 <DMA_SetConfig+0x240>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d01d      	beq.n	8008100 <DMA_SetConfig+0x1d0>
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a2a      	ldr	r2, [pc, #168]	@ (8008174 <DMA_SetConfig+0x244>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d018      	beq.n	8008100 <DMA_SetConfig+0x1d0>
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a29      	ldr	r2, [pc, #164]	@ (8008178 <DMA_SetConfig+0x248>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d013      	beq.n	8008100 <DMA_SetConfig+0x1d0>
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a27      	ldr	r2, [pc, #156]	@ (800817c <DMA_SetConfig+0x24c>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d00e      	beq.n	8008100 <DMA_SetConfig+0x1d0>
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a26      	ldr	r2, [pc, #152]	@ (8008180 <DMA_SetConfig+0x250>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d009      	beq.n	8008100 <DMA_SetConfig+0x1d0>
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a24      	ldr	r2, [pc, #144]	@ (8008184 <DMA_SetConfig+0x254>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d004      	beq.n	8008100 <DMA_SetConfig+0x1d0>
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a23      	ldr	r2, [pc, #140]	@ (8008188 <DMA_SetConfig+0x258>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d101      	bne.n	8008104 <DMA_SetConfig+0x1d4>
 8008100:	2301      	movs	r3, #1
 8008102:	e000      	b.n	8008106 <DMA_SetConfig+0x1d6>
 8008104:	2300      	movs	r3, #0
 8008106:	2b00      	cmp	r3, #0
 8008108:	d059      	beq.n	80081be <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800810e:	f003 031f 	and.w	r3, r3, #31
 8008112:	223f      	movs	r2, #63	@ 0x3f
 8008114:	409a      	lsls	r2, r3
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008128:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	683a      	ldr	r2, [r7, #0]
 8008130:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	2b40      	cmp	r3, #64	@ 0x40
 8008138:	d138      	bne.n	80081ac <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	68ba      	ldr	r2, [r7, #8]
 8008148:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800814a:	e086      	b.n	800825a <DMA_SetConfig+0x32a>
 800814c:	40020010 	.word	0x40020010
 8008150:	40020028 	.word	0x40020028
 8008154:	40020040 	.word	0x40020040
 8008158:	40020058 	.word	0x40020058
 800815c:	40020070 	.word	0x40020070
 8008160:	40020088 	.word	0x40020088
 8008164:	400200a0 	.word	0x400200a0
 8008168:	400200b8 	.word	0x400200b8
 800816c:	40020410 	.word	0x40020410
 8008170:	40020428 	.word	0x40020428
 8008174:	40020440 	.word	0x40020440
 8008178:	40020458 	.word	0x40020458
 800817c:	40020470 	.word	0x40020470
 8008180:	40020488 	.word	0x40020488
 8008184:	400204a0 	.word	0x400204a0
 8008188:	400204b8 	.word	0x400204b8
 800818c:	58025408 	.word	0x58025408
 8008190:	5802541c 	.word	0x5802541c
 8008194:	58025430 	.word	0x58025430
 8008198:	58025444 	.word	0x58025444
 800819c:	58025458 	.word	0x58025458
 80081a0:	5802546c 	.word	0x5802546c
 80081a4:	58025480 	.word	0x58025480
 80081a8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	68ba      	ldr	r2, [r7, #8]
 80081b2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	60da      	str	r2, [r3, #12]
}
 80081bc:	e04d      	b.n	800825a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a29      	ldr	r2, [pc, #164]	@ (8008268 <DMA_SetConfig+0x338>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d022      	beq.n	800820e <DMA_SetConfig+0x2de>
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a27      	ldr	r2, [pc, #156]	@ (800826c <DMA_SetConfig+0x33c>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d01d      	beq.n	800820e <DMA_SetConfig+0x2de>
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a26      	ldr	r2, [pc, #152]	@ (8008270 <DMA_SetConfig+0x340>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d018      	beq.n	800820e <DMA_SetConfig+0x2de>
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a24      	ldr	r2, [pc, #144]	@ (8008274 <DMA_SetConfig+0x344>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d013      	beq.n	800820e <DMA_SetConfig+0x2de>
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a23      	ldr	r2, [pc, #140]	@ (8008278 <DMA_SetConfig+0x348>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d00e      	beq.n	800820e <DMA_SetConfig+0x2de>
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a21      	ldr	r2, [pc, #132]	@ (800827c <DMA_SetConfig+0x34c>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d009      	beq.n	800820e <DMA_SetConfig+0x2de>
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a20      	ldr	r2, [pc, #128]	@ (8008280 <DMA_SetConfig+0x350>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d004      	beq.n	800820e <DMA_SetConfig+0x2de>
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a1e      	ldr	r2, [pc, #120]	@ (8008284 <DMA_SetConfig+0x354>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d101      	bne.n	8008212 <DMA_SetConfig+0x2e2>
 800820e:	2301      	movs	r3, #1
 8008210:	e000      	b.n	8008214 <DMA_SetConfig+0x2e4>
 8008212:	2300      	movs	r3, #0
 8008214:	2b00      	cmp	r3, #0
 8008216:	d020      	beq.n	800825a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800821c:	f003 031f 	and.w	r3, r3, #31
 8008220:	2201      	movs	r2, #1
 8008222:	409a      	lsls	r2, r3
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	683a      	ldr	r2, [r7, #0]
 800822e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	2b40      	cmp	r3, #64	@ 0x40
 8008236:	d108      	bne.n	800824a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	68ba      	ldr	r2, [r7, #8]
 8008246:	60da      	str	r2, [r3, #12]
}
 8008248:	e007      	b.n	800825a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	68ba      	ldr	r2, [r7, #8]
 8008250:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	60da      	str	r2, [r3, #12]
}
 800825a:	bf00      	nop
 800825c:	371c      	adds	r7, #28
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr
 8008266:	bf00      	nop
 8008268:	58025408 	.word	0x58025408
 800826c:	5802541c 	.word	0x5802541c
 8008270:	58025430 	.word	0x58025430
 8008274:	58025444 	.word	0x58025444
 8008278:	58025458 	.word	0x58025458
 800827c:	5802546c 	.word	0x5802546c
 8008280:	58025480 	.word	0x58025480
 8008284:	58025494 	.word	0x58025494

08008288 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008288:	b480      	push	{r7}
 800828a:	b085      	sub	sp, #20
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a42      	ldr	r2, [pc, #264]	@ (80083a0 <DMA_CalcBaseAndBitshift+0x118>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d04a      	beq.n	8008330 <DMA_CalcBaseAndBitshift+0xa8>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a41      	ldr	r2, [pc, #260]	@ (80083a4 <DMA_CalcBaseAndBitshift+0x11c>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d045      	beq.n	8008330 <DMA_CalcBaseAndBitshift+0xa8>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a3f      	ldr	r2, [pc, #252]	@ (80083a8 <DMA_CalcBaseAndBitshift+0x120>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d040      	beq.n	8008330 <DMA_CalcBaseAndBitshift+0xa8>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a3e      	ldr	r2, [pc, #248]	@ (80083ac <DMA_CalcBaseAndBitshift+0x124>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d03b      	beq.n	8008330 <DMA_CalcBaseAndBitshift+0xa8>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a3c      	ldr	r2, [pc, #240]	@ (80083b0 <DMA_CalcBaseAndBitshift+0x128>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d036      	beq.n	8008330 <DMA_CalcBaseAndBitshift+0xa8>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a3b      	ldr	r2, [pc, #236]	@ (80083b4 <DMA_CalcBaseAndBitshift+0x12c>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d031      	beq.n	8008330 <DMA_CalcBaseAndBitshift+0xa8>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a39      	ldr	r2, [pc, #228]	@ (80083b8 <DMA_CalcBaseAndBitshift+0x130>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d02c      	beq.n	8008330 <DMA_CalcBaseAndBitshift+0xa8>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a38      	ldr	r2, [pc, #224]	@ (80083bc <DMA_CalcBaseAndBitshift+0x134>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d027      	beq.n	8008330 <DMA_CalcBaseAndBitshift+0xa8>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a36      	ldr	r2, [pc, #216]	@ (80083c0 <DMA_CalcBaseAndBitshift+0x138>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d022      	beq.n	8008330 <DMA_CalcBaseAndBitshift+0xa8>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a35      	ldr	r2, [pc, #212]	@ (80083c4 <DMA_CalcBaseAndBitshift+0x13c>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d01d      	beq.n	8008330 <DMA_CalcBaseAndBitshift+0xa8>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a33      	ldr	r2, [pc, #204]	@ (80083c8 <DMA_CalcBaseAndBitshift+0x140>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d018      	beq.n	8008330 <DMA_CalcBaseAndBitshift+0xa8>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a32      	ldr	r2, [pc, #200]	@ (80083cc <DMA_CalcBaseAndBitshift+0x144>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d013      	beq.n	8008330 <DMA_CalcBaseAndBitshift+0xa8>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a30      	ldr	r2, [pc, #192]	@ (80083d0 <DMA_CalcBaseAndBitshift+0x148>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d00e      	beq.n	8008330 <DMA_CalcBaseAndBitshift+0xa8>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a2f      	ldr	r2, [pc, #188]	@ (80083d4 <DMA_CalcBaseAndBitshift+0x14c>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d009      	beq.n	8008330 <DMA_CalcBaseAndBitshift+0xa8>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a2d      	ldr	r2, [pc, #180]	@ (80083d8 <DMA_CalcBaseAndBitshift+0x150>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d004      	beq.n	8008330 <DMA_CalcBaseAndBitshift+0xa8>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a2c      	ldr	r2, [pc, #176]	@ (80083dc <DMA_CalcBaseAndBitshift+0x154>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d101      	bne.n	8008334 <DMA_CalcBaseAndBitshift+0xac>
 8008330:	2301      	movs	r3, #1
 8008332:	e000      	b.n	8008336 <DMA_CalcBaseAndBitshift+0xae>
 8008334:	2300      	movs	r3, #0
 8008336:	2b00      	cmp	r3, #0
 8008338:	d024      	beq.n	8008384 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	b2db      	uxtb	r3, r3
 8008340:	3b10      	subs	r3, #16
 8008342:	4a27      	ldr	r2, [pc, #156]	@ (80083e0 <DMA_CalcBaseAndBitshift+0x158>)
 8008344:	fba2 2303 	umull	r2, r3, r2, r3
 8008348:	091b      	lsrs	r3, r3, #4
 800834a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f003 0307 	and.w	r3, r3, #7
 8008352:	4a24      	ldr	r2, [pc, #144]	@ (80083e4 <DMA_CalcBaseAndBitshift+0x15c>)
 8008354:	5cd3      	ldrb	r3, [r2, r3]
 8008356:	461a      	mov	r2, r3
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2b03      	cmp	r3, #3
 8008360:	d908      	bls.n	8008374 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	461a      	mov	r2, r3
 8008368:	4b1f      	ldr	r3, [pc, #124]	@ (80083e8 <DMA_CalcBaseAndBitshift+0x160>)
 800836a:	4013      	ands	r3, r2
 800836c:	1d1a      	adds	r2, r3, #4
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	659a      	str	r2, [r3, #88]	@ 0x58
 8008372:	e00d      	b.n	8008390 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	461a      	mov	r2, r3
 800837a:	4b1b      	ldr	r3, [pc, #108]	@ (80083e8 <DMA_CalcBaseAndBitshift+0x160>)
 800837c:	4013      	ands	r3, r2
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	6593      	str	r3, [r2, #88]	@ 0x58
 8008382:	e005      	b.n	8008390 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8008394:	4618      	mov	r0, r3
 8008396:	3714      	adds	r7, #20
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr
 80083a0:	40020010 	.word	0x40020010
 80083a4:	40020028 	.word	0x40020028
 80083a8:	40020040 	.word	0x40020040
 80083ac:	40020058 	.word	0x40020058
 80083b0:	40020070 	.word	0x40020070
 80083b4:	40020088 	.word	0x40020088
 80083b8:	400200a0 	.word	0x400200a0
 80083bc:	400200b8 	.word	0x400200b8
 80083c0:	40020410 	.word	0x40020410
 80083c4:	40020428 	.word	0x40020428
 80083c8:	40020440 	.word	0x40020440
 80083cc:	40020458 	.word	0x40020458
 80083d0:	40020470 	.word	0x40020470
 80083d4:	40020488 	.word	0x40020488
 80083d8:	400204a0 	.word	0x400204a0
 80083dc:	400204b8 	.word	0x400204b8
 80083e0:	aaaaaaab 	.word	0xaaaaaaab
 80083e4:	08014958 	.word	0x08014958
 80083e8:	fffffc00 	.word	0xfffffc00

080083ec <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b085      	sub	sp, #20
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083f4:	2300      	movs	r3, #0
 80083f6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	699b      	ldr	r3, [r3, #24]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d120      	bne.n	8008442 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008404:	2b03      	cmp	r3, #3
 8008406:	d858      	bhi.n	80084ba <DMA_CheckFifoParam+0xce>
 8008408:	a201      	add	r2, pc, #4	@ (adr r2, 8008410 <DMA_CheckFifoParam+0x24>)
 800840a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800840e:	bf00      	nop
 8008410:	08008421 	.word	0x08008421
 8008414:	08008433 	.word	0x08008433
 8008418:	08008421 	.word	0x08008421
 800841c:	080084bb 	.word	0x080084bb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008424:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008428:	2b00      	cmp	r3, #0
 800842a:	d048      	beq.n	80084be <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800842c:	2301      	movs	r3, #1
 800842e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008430:	e045      	b.n	80084be <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008436:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800843a:	d142      	bne.n	80084c2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800843c:	2301      	movs	r3, #1
 800843e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008440:	e03f      	b.n	80084c2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	699b      	ldr	r3, [r3, #24]
 8008446:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800844a:	d123      	bne.n	8008494 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008450:	2b03      	cmp	r3, #3
 8008452:	d838      	bhi.n	80084c6 <DMA_CheckFifoParam+0xda>
 8008454:	a201      	add	r2, pc, #4	@ (adr r2, 800845c <DMA_CheckFifoParam+0x70>)
 8008456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800845a:	bf00      	nop
 800845c:	0800846d 	.word	0x0800846d
 8008460:	08008473 	.word	0x08008473
 8008464:	0800846d 	.word	0x0800846d
 8008468:	08008485 	.word	0x08008485
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800846c:	2301      	movs	r3, #1
 800846e:	73fb      	strb	r3, [r7, #15]
        break;
 8008470:	e030      	b.n	80084d4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008476:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800847a:	2b00      	cmp	r3, #0
 800847c:	d025      	beq.n	80084ca <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800847e:	2301      	movs	r3, #1
 8008480:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008482:	e022      	b.n	80084ca <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008488:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800848c:	d11f      	bne.n	80084ce <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800848e:	2301      	movs	r3, #1
 8008490:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008492:	e01c      	b.n	80084ce <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008498:	2b02      	cmp	r3, #2
 800849a:	d902      	bls.n	80084a2 <DMA_CheckFifoParam+0xb6>
 800849c:	2b03      	cmp	r3, #3
 800849e:	d003      	beq.n	80084a8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80084a0:	e018      	b.n	80084d4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80084a2:	2301      	movs	r3, #1
 80084a4:	73fb      	strb	r3, [r7, #15]
        break;
 80084a6:	e015      	b.n	80084d4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d00e      	beq.n	80084d2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80084b4:	2301      	movs	r3, #1
 80084b6:	73fb      	strb	r3, [r7, #15]
    break;
 80084b8:	e00b      	b.n	80084d2 <DMA_CheckFifoParam+0xe6>
        break;
 80084ba:	bf00      	nop
 80084bc:	e00a      	b.n	80084d4 <DMA_CheckFifoParam+0xe8>
        break;
 80084be:	bf00      	nop
 80084c0:	e008      	b.n	80084d4 <DMA_CheckFifoParam+0xe8>
        break;
 80084c2:	bf00      	nop
 80084c4:	e006      	b.n	80084d4 <DMA_CheckFifoParam+0xe8>
        break;
 80084c6:	bf00      	nop
 80084c8:	e004      	b.n	80084d4 <DMA_CheckFifoParam+0xe8>
        break;
 80084ca:	bf00      	nop
 80084cc:	e002      	b.n	80084d4 <DMA_CheckFifoParam+0xe8>
        break;
 80084ce:	bf00      	nop
 80084d0:	e000      	b.n	80084d4 <DMA_CheckFifoParam+0xe8>
    break;
 80084d2:	bf00      	nop
    }
  }

  return status;
 80084d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3714      	adds	r7, #20
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr
 80084e2:	bf00      	nop

080084e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b085      	sub	sp, #20
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a38      	ldr	r2, [pc, #224]	@ (80085d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d022      	beq.n	8008542 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a36      	ldr	r2, [pc, #216]	@ (80085dc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d01d      	beq.n	8008542 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a35      	ldr	r2, [pc, #212]	@ (80085e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d018      	beq.n	8008542 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a33      	ldr	r2, [pc, #204]	@ (80085e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d013      	beq.n	8008542 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a32      	ldr	r2, [pc, #200]	@ (80085e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d00e      	beq.n	8008542 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a30      	ldr	r2, [pc, #192]	@ (80085ec <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d009      	beq.n	8008542 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a2f      	ldr	r2, [pc, #188]	@ (80085f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d004      	beq.n	8008542 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a2d      	ldr	r2, [pc, #180]	@ (80085f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d101      	bne.n	8008546 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008542:	2301      	movs	r3, #1
 8008544:	e000      	b.n	8008548 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008546:	2300      	movs	r3, #0
 8008548:	2b00      	cmp	r3, #0
 800854a:	d01a      	beq.n	8008582 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	b2db      	uxtb	r3, r3
 8008552:	3b08      	subs	r3, #8
 8008554:	4a28      	ldr	r2, [pc, #160]	@ (80085f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008556:	fba2 2303 	umull	r2, r3, r2, r3
 800855a:	091b      	lsrs	r3, r3, #4
 800855c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800855e:	68fa      	ldr	r2, [r7, #12]
 8008560:	4b26      	ldr	r3, [pc, #152]	@ (80085fc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008562:	4413      	add	r3, r2
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	461a      	mov	r2, r3
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	4a24      	ldr	r2, [pc, #144]	@ (8008600 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008570:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f003 031f 	and.w	r3, r3, #31
 8008578:	2201      	movs	r2, #1
 800857a:	409a      	lsls	r2, r3
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008580:	e024      	b.n	80085cc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	b2db      	uxtb	r3, r3
 8008588:	3b10      	subs	r3, #16
 800858a:	4a1e      	ldr	r2, [pc, #120]	@ (8008604 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800858c:	fba2 2303 	umull	r2, r3, r2, r3
 8008590:	091b      	lsrs	r3, r3, #4
 8008592:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	4a1c      	ldr	r2, [pc, #112]	@ (8008608 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d806      	bhi.n	80085aa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	4a1b      	ldr	r2, [pc, #108]	@ (800860c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d902      	bls.n	80085aa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	3308      	adds	r3, #8
 80085a8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80085aa:	68fa      	ldr	r2, [r7, #12]
 80085ac:	4b18      	ldr	r3, [pc, #96]	@ (8008610 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80085ae:	4413      	add	r3, r2
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	461a      	mov	r2, r3
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	4a16      	ldr	r2, [pc, #88]	@ (8008614 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80085bc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f003 031f 	and.w	r3, r3, #31
 80085c4:	2201      	movs	r2, #1
 80085c6:	409a      	lsls	r2, r3
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80085cc:	bf00      	nop
 80085ce:	3714      	adds	r7, #20
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr
 80085d8:	58025408 	.word	0x58025408
 80085dc:	5802541c 	.word	0x5802541c
 80085e0:	58025430 	.word	0x58025430
 80085e4:	58025444 	.word	0x58025444
 80085e8:	58025458 	.word	0x58025458
 80085ec:	5802546c 	.word	0x5802546c
 80085f0:	58025480 	.word	0x58025480
 80085f4:	58025494 	.word	0x58025494
 80085f8:	cccccccd 	.word	0xcccccccd
 80085fc:	16009600 	.word	0x16009600
 8008600:	58025880 	.word	0x58025880
 8008604:	aaaaaaab 	.word	0xaaaaaaab
 8008608:	400204b8 	.word	0x400204b8
 800860c:	4002040f 	.word	0x4002040f
 8008610:	10008200 	.word	0x10008200
 8008614:	40020880 	.word	0x40020880

08008618 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008618:	b480      	push	{r7}
 800861a:	b085      	sub	sp, #20
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	b2db      	uxtb	r3, r3
 8008626:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d04a      	beq.n	80086c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2b08      	cmp	r3, #8
 8008632:	d847      	bhi.n	80086c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a25      	ldr	r2, [pc, #148]	@ (80086d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d022      	beq.n	8008684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a24      	ldr	r2, [pc, #144]	@ (80086d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d01d      	beq.n	8008684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a22      	ldr	r2, [pc, #136]	@ (80086d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d018      	beq.n	8008684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a21      	ldr	r2, [pc, #132]	@ (80086dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d013      	beq.n	8008684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a1f      	ldr	r2, [pc, #124]	@ (80086e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d00e      	beq.n	8008684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a1e      	ldr	r2, [pc, #120]	@ (80086e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d009      	beq.n	8008684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a1c      	ldr	r2, [pc, #112]	@ (80086e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d004      	beq.n	8008684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a1b      	ldr	r2, [pc, #108]	@ (80086ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d101      	bne.n	8008688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008684:	2301      	movs	r3, #1
 8008686:	e000      	b.n	800868a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008688:	2300      	movs	r3, #0
 800868a:	2b00      	cmp	r3, #0
 800868c:	d00a      	beq.n	80086a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800868e:	68fa      	ldr	r2, [r7, #12]
 8008690:	4b17      	ldr	r3, [pc, #92]	@ (80086f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008692:	4413      	add	r3, r2
 8008694:	009b      	lsls	r3, r3, #2
 8008696:	461a      	mov	r2, r3
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	4a15      	ldr	r2, [pc, #84]	@ (80086f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80086a0:	671a      	str	r2, [r3, #112]	@ 0x70
 80086a2:	e009      	b.n	80086b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80086a4:	68fa      	ldr	r2, [r7, #12]
 80086a6:	4b14      	ldr	r3, [pc, #80]	@ (80086f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80086a8:	4413      	add	r3, r2
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	461a      	mov	r2, r3
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	4a11      	ldr	r2, [pc, #68]	@ (80086fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80086b6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	3b01      	subs	r3, #1
 80086bc:	2201      	movs	r2, #1
 80086be:	409a      	lsls	r2, r3
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80086c4:	bf00      	nop
 80086c6:	3714      	adds	r7, #20
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr
 80086d0:	58025408 	.word	0x58025408
 80086d4:	5802541c 	.word	0x5802541c
 80086d8:	58025430 	.word	0x58025430
 80086dc:	58025444 	.word	0x58025444
 80086e0:	58025458 	.word	0x58025458
 80086e4:	5802546c 	.word	0x5802546c
 80086e8:	58025480 	.word	0x58025480
 80086ec:	58025494 	.word	0x58025494
 80086f0:	1600963f 	.word	0x1600963f
 80086f4:	58025940 	.word	0x58025940
 80086f8:	1000823f 	.word	0x1000823f
 80086fc:	40020940 	.word	0x40020940

08008700 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b098      	sub	sp, #96	@ 0x60
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8008708:	4a84      	ldr	r2, [pc, #528]	@ (800891c <HAL_FDCAN_Init+0x21c>)
 800870a:	f107 030c 	add.w	r3, r7, #12
 800870e:	4611      	mov	r1, r2
 8008710:	224c      	movs	r2, #76	@ 0x4c
 8008712:	4618      	mov	r0, r3
 8008714:	f00b fa6e 	bl	8013bf4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d101      	bne.n	8008722 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800871e:	2301      	movs	r3, #1
 8008720:	e1c6      	b.n	8008ab0 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a7e      	ldr	r2, [pc, #504]	@ (8008920 <HAL_FDCAN_Init+0x220>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d106      	bne.n	800873a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8008734:	461a      	mov	r2, r3
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008740:	b2db      	uxtb	r3, r3
 8008742:	2b00      	cmp	r3, #0
 8008744:	d106      	bne.n	8008754 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f7fa fc6e 	bl	8003030 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	699a      	ldr	r2, [r3, #24]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f022 0210 	bic.w	r2, r2, #16
 8008762:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008764:	f7fb f9ae 	bl	8003ac4 <HAL_GetTick>
 8008768:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800876a:	e014      	b.n	8008796 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800876c:	f7fb f9aa 	bl	8003ac4 <HAL_GetTick>
 8008770:	4602      	mov	r2, r0
 8008772:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008774:	1ad3      	subs	r3, r2, r3
 8008776:	2b0a      	cmp	r3, #10
 8008778:	d90d      	bls.n	8008796 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008780:	f043 0201 	orr.w	r2, r3, #1
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2203      	movs	r2, #3
 800878e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	e18c      	b.n	8008ab0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	699b      	ldr	r3, [r3, #24]
 800879c:	f003 0308 	and.w	r3, r3, #8
 80087a0:	2b08      	cmp	r3, #8
 80087a2:	d0e3      	beq.n	800876c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	699a      	ldr	r2, [r3, #24]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f042 0201 	orr.w	r2, r2, #1
 80087b2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80087b4:	f7fb f986 	bl	8003ac4 <HAL_GetTick>
 80087b8:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80087ba:	e014      	b.n	80087e6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80087bc:	f7fb f982 	bl	8003ac4 <HAL_GetTick>
 80087c0:	4602      	mov	r2, r0
 80087c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80087c4:	1ad3      	subs	r3, r2, r3
 80087c6:	2b0a      	cmp	r3, #10
 80087c8:	d90d      	bls.n	80087e6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80087d0:	f043 0201 	orr.w	r2, r3, #1
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2203      	movs	r2, #3
 80087de:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80087e2:	2301      	movs	r3, #1
 80087e4:	e164      	b.n	8008ab0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	699b      	ldr	r3, [r3, #24]
 80087ec:	f003 0301 	and.w	r3, r3, #1
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d0e3      	beq.n	80087bc <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	699a      	ldr	r2, [r3, #24]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f042 0202 	orr.w	r2, r2, #2
 8008802:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	7c1b      	ldrb	r3, [r3, #16]
 8008808:	2b01      	cmp	r3, #1
 800880a:	d108      	bne.n	800881e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	699a      	ldr	r2, [r3, #24]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800881a:	619a      	str	r2, [r3, #24]
 800881c:	e007      	b.n	800882e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	699a      	ldr	r2, [r3, #24]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800882c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	7c5b      	ldrb	r3, [r3, #17]
 8008832:	2b01      	cmp	r3, #1
 8008834:	d108      	bne.n	8008848 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	699a      	ldr	r2, [r3, #24]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008844:	619a      	str	r2, [r3, #24]
 8008846:	e007      	b.n	8008858 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	699a      	ldr	r2, [r3, #24]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008856:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	7c9b      	ldrb	r3, [r3, #18]
 800885c:	2b01      	cmp	r3, #1
 800885e:	d108      	bne.n	8008872 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	699a      	ldr	r2, [r3, #24]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800886e:	619a      	str	r2, [r3, #24]
 8008870:	e007      	b.n	8008882 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	699a      	ldr	r2, [r3, #24]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008880:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	699b      	ldr	r3, [r3, #24]
 8008888:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	689a      	ldr	r2, [r3, #8]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	430a      	orrs	r2, r1
 8008896:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	699a      	ldr	r2, [r3, #24]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80088a6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	691a      	ldr	r2, [r3, #16]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f022 0210 	bic.w	r2, r2, #16
 80088b6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	68db      	ldr	r3, [r3, #12]
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d108      	bne.n	80088d2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	699a      	ldr	r2, [r3, #24]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f042 0204 	orr.w	r2, r2, #4
 80088ce:	619a      	str	r2, [r3, #24]
 80088d0:	e030      	b.n	8008934 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	68db      	ldr	r3, [r3, #12]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d02c      	beq.n	8008934 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	68db      	ldr	r3, [r3, #12]
 80088de:	2b02      	cmp	r3, #2
 80088e0:	d020      	beq.n	8008924 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	699a      	ldr	r2, [r3, #24]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80088f0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	691a      	ldr	r2, [r3, #16]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f042 0210 	orr.w	r2, r2, #16
 8008900:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	68db      	ldr	r3, [r3, #12]
 8008906:	2b03      	cmp	r3, #3
 8008908:	d114      	bne.n	8008934 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	699a      	ldr	r2, [r3, #24]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f042 0220 	orr.w	r2, r2, #32
 8008918:	619a      	str	r2, [r3, #24]
 800891a:	e00b      	b.n	8008934 <HAL_FDCAN_Init+0x234>
 800891c:	080148fc 	.word	0x080148fc
 8008920:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	699a      	ldr	r2, [r3, #24]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f042 0220 	orr.w	r2, r2, #32
 8008932:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	699b      	ldr	r3, [r3, #24]
 8008938:	3b01      	subs	r3, #1
 800893a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	69db      	ldr	r3, [r3, #28]
 8008940:	3b01      	subs	r3, #1
 8008942:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008944:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6a1b      	ldr	r3, [r3, #32]
 800894a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800894c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	695b      	ldr	r3, [r3, #20]
 8008954:	3b01      	subs	r3, #1
 8008956:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800895c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800895e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	689b      	ldr	r3, [r3, #8]
 8008964:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008968:	d115      	bne.n	8008996 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800896e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008974:	3b01      	subs	r3, #1
 8008976:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008978:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800897e:	3b01      	subs	r3, #1
 8008980:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8008982:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800898a:	3b01      	subs	r3, #1
 800898c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8008992:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008994:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800899a:	2b00      	cmp	r3, #0
 800899c:	d00a      	beq.n	80089b4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	430a      	orrs	r2, r1
 80089b0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80089bc:	4413      	add	r3, r2
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d011      	beq.n	80089e6 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80089ca:	f023 0107 	bic.w	r1, r3, #7
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	3360      	adds	r3, #96	@ 0x60
 80089d6:	443b      	add	r3, r7
 80089d8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	430a      	orrs	r2, r1
 80089e2:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d011      	beq.n	8008a12 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80089f6:	f023 0107 	bic.w	r1, r3, #7
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089fe:	009b      	lsls	r3, r3, #2
 8008a00:	3360      	adds	r3, #96	@ 0x60
 8008a02:	443b      	add	r3, r7
 8008a04:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	430a      	orrs	r2, r1
 8008a0e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d012      	beq.n	8008a40 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008a22:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a2a:	009b      	lsls	r3, r3, #2
 8008a2c:	3360      	adds	r3, #96	@ 0x60
 8008a2e:	443b      	add	r3, r7
 8008a30:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8008a34:	011a      	lsls	r2, r3, #4
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	430a      	orrs	r2, r1
 8008a3c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d012      	beq.n	8008a6e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008a50:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	3360      	adds	r3, #96	@ 0x60
 8008a5c:	443b      	add	r3, r7
 8008a5e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8008a62:	021a      	lsls	r2, r3, #8
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	430a      	orrs	r2, r1
 8008a6a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a11      	ldr	r2, [pc, #68]	@ (8008ab8 <HAL_FDCAN_Init+0x3b8>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d107      	bne.n	8008a88 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	689a      	ldr	r2, [r3, #8]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	f022 0203 	bic.w	r2, r2, #3
 8008a86:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 fdeb 	bl	800967c <FDCAN_CalcultateRamBlockAddresses>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8008aac:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3760      	adds	r7, #96	@ 0x60
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}
 8008ab8:	4000a000 	.word	0x4000a000

08008abc <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b087      	sub	sp, #28
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008acc:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8008ace:	7bfb      	ldrb	r3, [r7, #15]
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d002      	beq.n	8008ada <HAL_FDCAN_ConfigFilter+0x1e>
 8008ad4:	7bfb      	ldrb	r3, [r7, #15]
 8008ad6:	2b02      	cmp	r3, #2
 8008ad8:	d157      	bne.n	8008b8a <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d12b      	bne.n	8008b3a <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	68db      	ldr	r3, [r3, #12]
 8008ae6:	2b07      	cmp	r3, #7
 8008ae8:	d10d      	bne.n	8008b06 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	691b      	ldr	r3, [r3, #16]
 8008aee:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	69db      	ldr	r3, [r3, #28]
 8008af4:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8008af6:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8008afc:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8008afe:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 8008b02:	617b      	str	r3, [r7, #20]
 8008b04:	e00e      	b.n	8008b24 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	689b      	ldr	r3, [r3, #8]
 8008b0a:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	68db      	ldr	r3, [r3, #12]
 8008b10:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8008b12:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	691b      	ldr	r3, [r3, #16]
 8008b18:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8008b1a:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8008b20:	4313      	orrs	r3, r2
 8008b22:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	009b      	lsls	r3, r3, #2
 8008b2e:	4413      	add	r3, r2
 8008b30:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	697a      	ldr	r2, [r7, #20]
 8008b36:	601a      	str	r2, [r3, #0]
 8008b38:	e025      	b.n	8008b86 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	68db      	ldr	r3, [r3, #12]
 8008b3e:	075a      	lsls	r2, r3, #29
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	691b      	ldr	r3, [r3, #16]
 8008b44:	4313      	orrs	r3, r2
 8008b46:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	2b07      	cmp	r3, #7
 8008b4e:	d103      	bne.n	8008b58 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	699b      	ldr	r3, [r3, #24]
 8008b54:	613b      	str	r3, [r7, #16]
 8008b56:	e006      	b.n	8008b66 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	689b      	ldr	r3, [r3, #8]
 8008b5c:	079a      	lsls	r2, r3, #30
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	695b      	ldr	r3, [r3, #20]
 8008b62:	4313      	orrs	r3, r2
 8008b64:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	00db      	lsls	r3, r3, #3
 8008b70:	4413      	add	r3, r2
 8008b72:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	697a      	ldr	r2, [r7, #20]
 8008b78:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	3304      	adds	r3, #4
 8008b7e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	693a      	ldr	r2, [r7, #16]
 8008b84:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8008b86:	2300      	movs	r3, #0
 8008b88:	e008      	b.n	8008b9c <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008b90:	f043 0202 	orr.w	r2, r3, #2
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8008b9a:	2301      	movs	r3, #1
  }
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	371c      	adds	r7, #28
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr

08008ba8 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b083      	sub	sp, #12
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d111      	bne.n	8008be0 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2202      	movs	r2, #2
 8008bc0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	699a      	ldr	r2, [r3, #24]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f022 0201 	bic.w	r2, r2, #1
 8008bd2:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	e008      	b.n	8008bf2 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008be6:	f043 0204 	orr.w	r2, r3, #4
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8008bf0:	2301      	movs	r3, #1
  }
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	370c      	adds	r7, #12
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfc:	4770      	bx	lr

08008bfe <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8008bfe:	b580      	push	{r7, lr}
 8008c00:	b086      	sub	sp, #24
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	60f8      	str	r0, [r7, #12]
 8008c06:	60b9      	str	r1, [r7, #8]
 8008c08:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	2b02      	cmp	r3, #2
 8008c14:	d141      	bne.n	8008c9a <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008c1e:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d109      	bne.n	8008c3a <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008c2c:	f043 0220 	orr.w	r2, r3, #32
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8008c36:	2301      	movs	r3, #1
 8008c38:	e038      	b.n	8008cac <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008c42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d009      	beq.n	8008c5e <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008c50:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	e026      	b.n	8008cac <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008c66:	0c1b      	lsrs	r3, r3, #16
 8008c68:	f003 031f 	and.w	r3, r3, #31
 8008c6c:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	68b9      	ldr	r1, [r7, #8]
 8008c74:	68f8      	ldr	r0, [r7, #12]
 8008c76:	f000 fe87 	bl	8009988 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	2101      	movs	r1, #1
 8008c80:	697a      	ldr	r2, [r7, #20]
 8008c82:	fa01 f202 	lsl.w	r2, r1, r2
 8008c86:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	409a      	lsls	r2, r3
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8008c96:	2300      	movs	r3, #0
 8008c98:	e008      	b.n	8008cac <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008ca0:	f043 0208 	orr.w	r2, r3, #8
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8008caa:	2301      	movs	r3, #1
  }
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3718      	adds	r7, #24
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b08b      	sub	sp, #44	@ 0x2c
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	60b9      	str	r1, [r7, #8]
 8008cbe:	607a      	str	r2, [r7, #4]
 8008cc0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008ccc:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8008cce:	7efb      	ldrb	r3, [r7, #27]
 8008cd0:	2b02      	cmp	r3, #2
 8008cd2:	f040 8149 	bne.w	8008f68 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	2b40      	cmp	r3, #64	@ 0x40
 8008cda:	d14c      	bne.n	8008d76 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008ce4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d109      	bne.n	8008d00 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008cf2:	f043 0220 	orr.w	r2, r3, #32
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	e13c      	b.n	8008f7a <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008d08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d109      	bne.n	8008d24 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008d16:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8008d20:	2301      	movs	r3, #1
 8008d22:	e12a      	b.n	8008f7a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008d2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008d30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008d34:	d10a      	bne.n	8008d4c <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008d3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008d42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d46:	d101      	bne.n	8008d4c <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008d54:	0a1b      	lsrs	r3, r3, #8
 8008d56:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008d5a:	69fa      	ldr	r2, [r7, #28]
 8008d5c:	4413      	add	r3, r2
 8008d5e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d68:	69f9      	ldr	r1, [r7, #28]
 8008d6a:	fb01 f303 	mul.w	r3, r1, r3
 8008d6e:	009b      	lsls	r3, r3, #2
 8008d70:	4413      	add	r3, r2
 8008d72:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d74:	e068      	b.n	8008e48 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	2b41      	cmp	r3, #65	@ 0x41
 8008d7a:	d14c      	bne.n	8008e16 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008d84:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d109      	bne.n	8008da0 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008d92:	f043 0220 	orr.w	r2, r3, #32
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	e0ec      	b.n	8008f7a <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008da8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d109      	bne.n	8008dc4 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008db6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	e0da      	b.n	8008f7a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008dcc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008dd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008dd4:	d10a      	bne.n	8008dec <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008dde:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008de2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008de6:	d101      	bne.n	8008dec <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8008de8:	2301      	movs	r3, #1
 8008dea:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008df4:	0a1b      	lsrs	r3, r3, #8
 8008df6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008dfa:	69fa      	ldr	r2, [r7, #28]
 8008dfc:	4413      	add	r3, r2
 8008dfe:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e08:	69f9      	ldr	r1, [r7, #28]
 8008e0a:	fb01 f303 	mul.w	r3, r1, r3
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	4413      	add	r3, r2
 8008e12:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e14:	e018      	b.n	8008e48 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e1a:	68ba      	ldr	r2, [r7, #8]
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d309      	bcc.n	8008e34 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008e26:	f043 0220 	orr.w	r2, r3, #32
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8008e30:	2301      	movs	r3, #1
 8008e32:	e0a2      	b.n	8008f7a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e3c:	68b9      	ldr	r1, [r7, #8]
 8008e3e:	fb01 f303 	mul.w	r3, r1, r3
 8008e42:	009b      	lsls	r3, r3, #2
 8008e44:	4413      	add	r3, r2
 8008e46:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8008e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d107      	bne.n	8008e6c <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8008e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	0c9b      	lsrs	r3, r3, #18
 8008e62:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	601a      	str	r2, [r3, #0]
 8008e6a:	e005      	b.n	8008e78 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8008e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8008e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8008e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8008e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e92:	3304      	adds	r3, #4
 8008e94:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8008e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	b29a      	uxth	r2, r3
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8008ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	0c1b      	lsrs	r3, r3, #16
 8008ea6:	f003 020f 	and.w	r2, r3, #15
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8008eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8008eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8008ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	0e1b      	lsrs	r3, r3, #24
 8008ecc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8008ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	0fda      	lsrs	r2, r3, #31
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8008ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ee0:	3304      	adds	r3, #4
 8008ee2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8008ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ee6:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8008ee8:	2300      	movs	r3, #0
 8008eea:	623b      	str	r3, [r7, #32]
 8008eec:	e00a      	b.n	8008f04 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8008eee:	697a      	ldr	r2, [r7, #20]
 8008ef0:	6a3b      	ldr	r3, [r7, #32]
 8008ef2:	441a      	add	r2, r3
 8008ef4:	6839      	ldr	r1, [r7, #0]
 8008ef6:	6a3b      	ldr	r3, [r7, #32]
 8008ef8:	440b      	add	r3, r1
 8008efa:	7812      	ldrb	r2, [r2, #0]
 8008efc:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8008efe:	6a3b      	ldr	r3, [r7, #32]
 8008f00:	3301      	adds	r3, #1
 8008f02:	623b      	str	r3, [r7, #32]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	68db      	ldr	r3, [r3, #12]
 8008f08:	4a1f      	ldr	r2, [pc, #124]	@ (8008f88 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8008f0a:	5cd3      	ldrb	r3, [r2, r3]
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	6a3b      	ldr	r3, [r7, #32]
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d3ec      	bcc.n	8008eee <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	2b40      	cmp	r3, #64	@ 0x40
 8008f18:	d105      	bne.n	8008f26 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	69fa      	ldr	r2, [r7, #28]
 8008f20:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8008f24:	e01e      	b.n	8008f64 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	2b41      	cmp	r3, #65	@ 0x41
 8008f2a:	d105      	bne.n	8008f38 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	69fa      	ldr	r2, [r7, #28]
 8008f32:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8008f36:	e015      	b.n	8008f64 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	2b1f      	cmp	r3, #31
 8008f3c:	d808      	bhi.n	8008f50 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	2101      	movs	r1, #1
 8008f44:	68ba      	ldr	r2, [r7, #8]
 8008f46:	fa01 f202 	lsl.w	r2, r1, r2
 8008f4a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8008f4e:	e009      	b.n	8008f64 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	f003 021f 	and.w	r2, r3, #31
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	2101      	movs	r1, #1
 8008f5c:	fa01 f202 	lsl.w	r2, r1, r2
 8008f60:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8008f64:	2300      	movs	r3, #0
 8008f66:	e008      	b.n	8008f7a <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008f6e:	f043 0208 	orr.w	r2, r3, #8
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8008f78:	2301      	movs	r3, #1
  }
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	372c      	adds	r7, #44	@ 0x2c
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr
 8008f86:	bf00      	nop
 8008f88:	08014960 	.word	0x08014960

08008f8c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b087      	sub	sp, #28
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	60f8      	str	r0, [r7, #12]
 8008f94:	60b9      	str	r1, [r7, #8]
 8008f96:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008f9e:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8008fa0:	7dfb      	ldrb	r3, [r7, #23]
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d002      	beq.n	8008fac <HAL_FDCAN_ActivateNotification+0x20>
 8008fa6:	7dfb      	ldrb	r3, [r7, #23]
 8008fa8:	2b02      	cmp	r3, #2
 8008faa:	d155      	bne.n	8009058 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	4013      	ands	r3, r2
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d108      	bne.n	8008fcc <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f042 0201 	orr.w	r2, r2, #1
 8008fc8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008fca:	e014      	b.n	8008ff6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	4013      	ands	r3, r2
 8008fd6:	68ba      	ldr	r2, [r7, #8]
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d108      	bne.n	8008fee <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f042 0202 	orr.w	r2, r2, #2
 8008fea:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008fec:	e003      	b.n	8008ff6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	2203      	movs	r2, #3
 8008ff4:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d009      	beq.n	8009014 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	430a      	orrs	r2, r1
 8009010:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800901a:	2b00      	cmp	r3, #0
 800901c:	d009      	beq.n	8009032 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	430a      	orrs	r2, r1
 800902e:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009038:	68ba      	ldr	r2, [r7, #8]
 800903a:	4b0f      	ldr	r3, [pc, #60]	@ (8009078 <HAL_FDCAN_ActivateNotification+0xec>)
 800903c:	4013      	ands	r3, r2
 800903e:	68fa      	ldr	r2, [r7, #12]
 8009040:	6812      	ldr	r2, [r2, #0]
 8009042:	430b      	orrs	r3, r1
 8009044:	6553      	str	r3, [r2, #84]	@ 0x54
 8009046:	4b0d      	ldr	r3, [pc, #52]	@ (800907c <HAL_FDCAN_ActivateNotification+0xf0>)
 8009048:	695a      	ldr	r2, [r3, #20]
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	0f9b      	lsrs	r3, r3, #30
 800904e:	490b      	ldr	r1, [pc, #44]	@ (800907c <HAL_FDCAN_ActivateNotification+0xf0>)
 8009050:	4313      	orrs	r3, r2
 8009052:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8009054:	2300      	movs	r3, #0
 8009056:	e008      	b.n	800906a <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800905e:	f043 0202 	orr.w	r2, r3, #2
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8009068:	2301      	movs	r3, #1
  }
}
 800906a:	4618      	mov	r0, r3
 800906c:	371c      	adds	r7, #28
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr
 8009076:	bf00      	nop
 8009078:	3fcfffff 	.word	0x3fcfffff
 800907c:	4000a800 	.word	0x4000a800

08009080 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b096      	sub	sp, #88	@ 0x58
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8009088:	4b9a      	ldr	r3, [pc, #616]	@ (80092f4 <HAL_FDCAN_IRQHandler+0x274>)
 800908a:	691b      	ldr	r3, [r3, #16]
 800908c:	079b      	lsls	r3, r3, #30
 800908e:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8009090:	4b98      	ldr	r3, [pc, #608]	@ (80092f4 <HAL_FDCAN_IRQHandler+0x274>)
 8009092:	695b      	ldr	r3, [r3, #20]
 8009094:	079b      	lsls	r3, r3, #30
 8009096:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009098:	4013      	ands	r3, r2
 800909a:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090a2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80090a6:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090ae:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80090b0:	4013      	ands	r3, r2
 80090b2:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090ba:	f003 030f 	and.w	r3, r3, #15
 80090be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80090c8:	4013      	ands	r3, r2
 80090ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80090d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80090e0:	4013      	ands	r3, r2
 80090e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090ea:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 80090ee:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80090f8:	4013      	ands	r3, r2
 80090fa:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009102:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8009106:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800910e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009110:	4013      	ands	r3, r2
 8009112:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800911a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009122:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8009124:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009126:	0a1b      	lsrs	r3, r3, #8
 8009128:	f003 0301 	and.w	r3, r3, #1
 800912c:	2b00      	cmp	r3, #0
 800912e:	d010      	beq.n	8009152 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8009130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009132:	0a1b      	lsrs	r3, r3, #8
 8009134:	f003 0301 	and.w	r3, r3, #1
 8009138:	2b00      	cmp	r3, #0
 800913a:	d00a      	beq.n	8009152 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009144:	651a      	str	r2, [r3, #80]	@ 0x50
 8009146:	4b6b      	ldr	r3, [pc, #428]	@ (80092f4 <HAL_FDCAN_IRQHandler+0x274>)
 8009148:	2200      	movs	r2, #0
 800914a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 fa54 	bl	80095fa <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8009152:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009154:	0a9b      	lsrs	r3, r3, #10
 8009156:	f003 0301 	and.w	r3, r3, #1
 800915a:	2b00      	cmp	r3, #0
 800915c:	d01d      	beq.n	800919a <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800915e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009160:	0a9b      	lsrs	r3, r3, #10
 8009162:	f003 0301 	and.w	r3, r3, #1
 8009166:	2b00      	cmp	r3, #0
 8009168:	d017      	beq.n	800919a <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009172:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800917c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800917e:	4013      	ands	r3, r2
 8009180:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800918a:	651a      	str	r2, [r3, #80]	@ 0x50
 800918c:	4b59      	ldr	r3, [pc, #356]	@ (80092f4 <HAL_FDCAN_IRQHandler+0x274>)
 800918e:	2200      	movs	r2, #0
 8009190:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8009192:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f000 fa07 	bl	80095a8 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800919a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800919c:	2b00      	cmp	r3, #0
 800919e:	d00d      	beq.n	80091bc <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681a      	ldr	r2, [r3, #0]
 80091a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80091a6:	4b54      	ldr	r3, [pc, #336]	@ (80092f8 <HAL_FDCAN_IRQHandler+0x278>)
 80091a8:	400b      	ands	r3, r1
 80091aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80091ac:	4a51      	ldr	r2, [pc, #324]	@ (80092f4 <HAL_FDCAN_IRQHandler+0x274>)
 80091ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80091b0:	0f9b      	lsrs	r3, r3, #30
 80091b2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80091b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 f9c0 	bl	800953c <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80091bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d00d      	beq.n	80091de <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681a      	ldr	r2, [r3, #0]
 80091c6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80091c8:	4b4b      	ldr	r3, [pc, #300]	@ (80092f8 <HAL_FDCAN_IRQHandler+0x278>)
 80091ca:	400b      	ands	r3, r1
 80091cc:	6513      	str	r3, [r2, #80]	@ 0x50
 80091ce:	4a49      	ldr	r2, [pc, #292]	@ (80092f4 <HAL_FDCAN_IRQHandler+0x274>)
 80091d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80091d2:	0f9b      	lsrs	r3, r3, #30
 80091d4:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80091d6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f000 f9ba 	bl	8009552 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80091de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d00d      	beq.n	8009200 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681a      	ldr	r2, [r3, #0]
 80091e8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80091ea:	4b43      	ldr	r3, [pc, #268]	@ (80092f8 <HAL_FDCAN_IRQHandler+0x278>)
 80091ec:	400b      	ands	r3, r1
 80091ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80091f0:	4a40      	ldr	r2, [pc, #256]	@ (80092f4 <HAL_FDCAN_IRQHandler+0x274>)
 80091f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091f4:	0f9b      	lsrs	r3, r3, #30
 80091f6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80091f8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f7f8 fc9a 	bl	8001b34 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8009200:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009202:	2b00      	cmp	r3, #0
 8009204:	d00d      	beq.n	8009222 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681a      	ldr	r2, [r3, #0]
 800920a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800920c:	4b3a      	ldr	r3, [pc, #232]	@ (80092f8 <HAL_FDCAN_IRQHandler+0x278>)
 800920e:	400b      	ands	r3, r1
 8009210:	6513      	str	r3, [r2, #80]	@ 0x50
 8009212:	4a38      	ldr	r2, [pc, #224]	@ (80092f4 <HAL_FDCAN_IRQHandler+0x274>)
 8009214:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009216:	0f9b      	lsrs	r3, r3, #30
 8009218:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800921a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f000 f9a3 	bl	8009568 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8009222:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009224:	0adb      	lsrs	r3, r3, #11
 8009226:	f003 0301 	and.w	r3, r3, #1
 800922a:	2b00      	cmp	r3, #0
 800922c:	d010      	beq.n	8009250 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800922e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009230:	0adb      	lsrs	r3, r3, #11
 8009232:	f003 0301 	and.w	r3, r3, #1
 8009236:	2b00      	cmp	r3, #0
 8009238:	d00a      	beq.n	8009250 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009242:	651a      	str	r2, [r3, #80]	@ 0x50
 8009244:	4b2b      	ldr	r3, [pc, #172]	@ (80092f4 <HAL_FDCAN_IRQHandler+0x274>)
 8009246:	2200      	movs	r2, #0
 8009248:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 f997 	bl	800957e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8009250:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009252:	0a5b      	lsrs	r3, r3, #9
 8009254:	f003 0301 	and.w	r3, r3, #1
 8009258:	2b00      	cmp	r3, #0
 800925a:	d01d      	beq.n	8009298 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800925c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800925e:	0a5b      	lsrs	r3, r3, #9
 8009260:	f003 0301 	and.w	r3, r3, #1
 8009264:	2b00      	cmp	r3, #0
 8009266:	d017      	beq.n	8009298 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009270:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800927a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800927c:	4013      	ands	r3, r2
 800927e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009288:	651a      	str	r2, [r3, #80]	@ 0x50
 800928a:	4b1a      	ldr	r3, [pc, #104]	@ (80092f4 <HAL_FDCAN_IRQHandler+0x274>)
 800928c:	2200      	movs	r2, #0
 800928e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8009290:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f000 f97d 	bl	8009592 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8009298:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800929a:	0cdb      	lsrs	r3, r3, #19
 800929c:	f003 0301 	and.w	r3, r3, #1
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d010      	beq.n	80092c6 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 80092a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092a6:	0cdb      	lsrs	r3, r3, #19
 80092a8:	f003 0301 	and.w	r3, r3, #1
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d00a      	beq.n	80092c6 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80092b8:	651a      	str	r2, [r3, #80]	@ 0x50
 80092ba:	4b0e      	ldr	r3, [pc, #56]	@ (80092f4 <HAL_FDCAN_IRQHandler+0x274>)
 80092bc:	2200      	movs	r2, #0
 80092be:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f000 f97c 	bl	80095be <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80092c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092c8:	0c1b      	lsrs	r3, r3, #16
 80092ca:	f003 0301 	and.w	r3, r3, #1
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d016      	beq.n	8009300 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80092d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092d4:	0c1b      	lsrs	r3, r3, #16
 80092d6:	f003 0301 	and.w	r3, r3, #1
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d010      	beq.n	8009300 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80092e6:	651a      	str	r2, [r3, #80]	@ 0x50
 80092e8:	4b02      	ldr	r3, [pc, #8]	@ (80092f4 <HAL_FDCAN_IRQHandler+0x274>)
 80092ea:	2200      	movs	r2, #0
 80092ec:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	e004      	b.n	80092fc <HAL_FDCAN_IRQHandler+0x27c>
 80092f2:	bf00      	nop
 80092f4:	4000a800 	.word	0x4000a800
 80092f8:	3fcfffff 	.word	0x3fcfffff
 80092fc:	f000 f969 	bl	80095d2 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8009300:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009302:	0c9b      	lsrs	r3, r3, #18
 8009304:	f003 0301 	and.w	r3, r3, #1
 8009308:	2b00      	cmp	r3, #0
 800930a:	d010      	beq.n	800932e <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800930c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800930e:	0c9b      	lsrs	r3, r3, #18
 8009310:	f003 0301 	and.w	r3, r3, #1
 8009314:	2b00      	cmp	r3, #0
 8009316:	d00a      	beq.n	800932e <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8009320:	651a      	str	r2, [r3, #80]	@ 0x50
 8009322:	4b83      	ldr	r3, [pc, #524]	@ (8009530 <HAL_FDCAN_IRQHandler+0x4b0>)
 8009324:	2200      	movs	r2, #0
 8009326:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f000 f95c 	bl	80095e6 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800932e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009330:	0c5b      	lsrs	r3, r3, #17
 8009332:	f003 0301 	and.w	r3, r3, #1
 8009336:	2b00      	cmp	r3, #0
 8009338:	d015      	beq.n	8009366 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800933a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800933c:	0c5b      	lsrs	r3, r3, #17
 800933e:	f003 0301 	and.w	r3, r3, #1
 8009342:	2b00      	cmp	r3, #0
 8009344:	d00f      	beq.n	8009366 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800934e:	651a      	str	r2, [r3, #80]	@ 0x50
 8009350:	4b77      	ldr	r3, [pc, #476]	@ (8009530 <HAL_FDCAN_IRQHandler+0x4b0>)
 8009352:	2200      	movs	r2, #0
 8009354:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800935c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8009366:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009368:	2b00      	cmp	r3, #0
 800936a:	d00d      	beq.n	8009388 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009372:	4b70      	ldr	r3, [pc, #448]	@ (8009534 <HAL_FDCAN_IRQHandler+0x4b4>)
 8009374:	400b      	ands	r3, r1
 8009376:	6513      	str	r3, [r2, #80]	@ 0x50
 8009378:	4a6d      	ldr	r2, [pc, #436]	@ (8009530 <HAL_FDCAN_IRQHandler+0x4b0>)
 800937a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800937c:	0f9b      	lsrs	r3, r3, #30
 800937e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8009380:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f7f8 fcda 	bl	8001d3c <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8009388:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800938a:	2b00      	cmp	r3, #0
 800938c:	d011      	beq.n	80093b2 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009394:	4b67      	ldr	r3, [pc, #412]	@ (8009534 <HAL_FDCAN_IRQHandler+0x4b4>)
 8009396:	400b      	ands	r3, r1
 8009398:	6513      	str	r3, [r2, #80]	@ 0x50
 800939a:	4a65      	ldr	r2, [pc, #404]	@ (8009530 <HAL_FDCAN_IRQHandler+0x4b0>)
 800939c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800939e:	0f9b      	lsrs	r3, r3, #30
 80093a0:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80093a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80093aa:	431a      	orrs	r2, r3
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4a60      	ldr	r2, [pc, #384]	@ (8009538 <HAL_FDCAN_IRQHandler+0x4b8>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	f040 80ac 	bne.w	8009516 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	689b      	ldr	r3, [r3, #8]
 80093c4:	f003 0303 	and.w	r3, r3, #3
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	f000 80a4 	beq.w	8009516 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	6a1b      	ldr	r3, [r3, #32]
 80093d4:	f003 030f 	and.w	r3, r3, #15
 80093d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093e2:	4013      	ands	r3, r2
 80093e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	685b      	ldr	r3, [r3, #4]
 80093ea:	6a1b      	ldr	r3, [r3, #32]
 80093ec:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80093f0:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	685b      	ldr	r3, [r3, #4]
 80093f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80093fa:	4013      	ands	r3, r2
 80093fc:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	6a1b      	ldr	r3, [r3, #32]
 8009404:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8009408:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	685b      	ldr	r3, [r3, #4]
 800940e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009410:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009412:	4013      	ands	r3, r2
 8009414:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	6a1b      	ldr	r3, [r3, #32]
 800941c:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8009420:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009428:	6a3a      	ldr	r2, [r7, #32]
 800942a:	4013      	ands	r3, r2
 800942c:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	685b      	ldr	r3, [r3, #4]
 8009432:	6a1b      	ldr	r3, [r3, #32]
 8009434:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8009438:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	685b      	ldr	r3, [r3, #4]
 800943e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009440:	69fa      	ldr	r2, [r7, #28]
 8009442:	4013      	ands	r3, r2
 8009444:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	685b      	ldr	r3, [r3, #4]
 800944a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800944c:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	6a1b      	ldr	r3, [r3, #32]
 8009454:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8009456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009458:	2b00      	cmp	r3, #0
 800945a:	d007      	beq.n	800946c <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009462:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8009464:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f000 f8db 	bl	8009622 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 800946c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800946e:	2b00      	cmp	r3, #0
 8009470:	d007      	beq.n	8009482 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009478:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 800947a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 f8db 	bl	8009638 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8009482:	69bb      	ldr	r3, [r7, #24]
 8009484:	099b      	lsrs	r3, r3, #6
 8009486:	f003 0301 	and.w	r3, r3, #1
 800948a:	2b00      	cmp	r3, #0
 800948c:	d01a      	beq.n	80094c4 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	099b      	lsrs	r3, r3, #6
 8009492:	f003 0301 	and.w	r3, r3, #1
 8009496:	2b00      	cmp	r3, #0
 8009498:	d014      	beq.n	80094c4 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094a0:	0c1b      	lsrs	r3, r3, #16
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80094b0:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	2240      	movs	r2, #64	@ 0x40
 80094b8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80094ba:	68fa      	ldr	r2, [r7, #12]
 80094bc:	6939      	ldr	r1, [r7, #16]
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 f8c5 	bl	800964e <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 80094c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d007      	beq.n	80094da <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094d0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80094d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f000 f8c6 	bl	8009666 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80094da:	6a3b      	ldr	r3, [r7, #32]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d00b      	beq.n	80094f8 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	6a3a      	ldr	r2, [r7, #32]
 80094e6:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80094ee:	6a3b      	ldr	r3, [r7, #32]
 80094f0:	431a      	orrs	r2, r3
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 80094f8:	69fb      	ldr	r3, [r7, #28]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d00b      	beq.n	8009516 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	69fa      	ldr	r2, [r7, #28]
 8009504:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800950c:	69fb      	ldr	r3, [r7, #28]
 800950e:	431a      	orrs	r2, r3
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800951c:	2b00      	cmp	r3, #0
 800951e:	d002      	beq.n	8009526 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f000 f874 	bl	800960e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8009526:	bf00      	nop
 8009528:	3758      	adds	r7, #88	@ 0x58
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	4000a800 	.word	0x4000a800
 8009534:	3fcfffff 	.word	0x3fcfffff
 8009538:	4000a000 	.word	0x4000a000

0800953c <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8009546:	bf00      	nop
 8009548:	370c      	adds	r7, #12
 800954a:	46bd      	mov	sp, r7
 800954c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009550:	4770      	bx	lr

08009552 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8009552:	b480      	push	{r7}
 8009554:	b083      	sub	sp, #12
 8009556:	af00      	add	r7, sp, #0
 8009558:	6078      	str	r0, [r7, #4]
 800955a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800955c:	bf00      	nop
 800955e:	370c      	adds	r7, #12
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr

08009568 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8009568:	b480      	push	{r7}
 800956a:	b083      	sub	sp, #12
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8009572:	bf00      	nop
 8009574:	370c      	adds	r7, #12
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr

0800957e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800957e:	b480      	push	{r7}
 8009580:	b083      	sub	sp, #12
 8009582:	af00      	add	r7, sp, #0
 8009584:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8009586:	bf00      	nop
 8009588:	370c      	adds	r7, #12
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr

08009592 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8009592:	b480      	push	{r7}
 8009594:	b083      	sub	sp, #12
 8009596:	af00      	add	r7, sp, #0
 8009598:	6078      	str	r0, [r7, #4]
 800959a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800959c:	bf00      	nop
 800959e:	370c      	adds	r7, #12
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr

080095a8 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b083      	sub	sp, #12
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80095b2:	bf00      	nop
 80095b4:	370c      	adds	r7, #12
 80095b6:	46bd      	mov	sp, r7
 80095b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095bc:	4770      	bx	lr

080095be <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80095be:	b480      	push	{r7}
 80095c0:	b083      	sub	sp, #12
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80095c6:	bf00      	nop
 80095c8:	370c      	adds	r7, #12
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr

080095d2 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80095d2:	b480      	push	{r7}
 80095d4:	b083      	sub	sp, #12
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80095da:	bf00      	nop
 80095dc:	370c      	adds	r7, #12
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr

080095e6 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80095e6:	b480      	push	{r7}
 80095e8:	b083      	sub	sp, #12
 80095ea:	af00      	add	r7, sp, #0
 80095ec:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80095ee:	bf00      	nop
 80095f0:	370c      	adds	r7, #12
 80095f2:	46bd      	mov	sp, r7
 80095f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f8:	4770      	bx	lr

080095fa <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80095fa:	b480      	push	{r7}
 80095fc:	b083      	sub	sp, #12
 80095fe:	af00      	add	r7, sp, #0
 8009600:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8009602:	bf00      	nop
 8009604:	370c      	adds	r7, #12
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr

0800960e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800960e:	b480      	push	{r7}
 8009610:	b083      	sub	sp, #12
 8009612:	af00      	add	r7, sp, #0
 8009614:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8009616:	bf00      	nop
 8009618:	370c      	adds	r7, #12
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr

08009622 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8009622:	b480      	push	{r7}
 8009624:	b083      	sub	sp, #12
 8009626:	af00      	add	r7, sp, #0
 8009628:	6078      	str	r0, [r7, #4]
 800962a:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800962c:	bf00      	nop
 800962e:	370c      	adds	r7, #12
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr

08009638 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8009638:	b480      	push	{r7}
 800963a:	b083      	sub	sp, #12
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8009642:	bf00      	nop
 8009644:	370c      	adds	r7, #12
 8009646:	46bd      	mov	sp, r7
 8009648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964c:	4770      	bx	lr

0800964e <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 800964e:	b480      	push	{r7}
 8009650:	b085      	sub	sp, #20
 8009652:	af00      	add	r7, sp, #0
 8009654:	60f8      	str	r0, [r7, #12]
 8009656:	60b9      	str	r1, [r7, #8]
 8009658:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 800965a:	bf00      	nop
 800965c:	3714      	adds	r7, #20
 800965e:	46bd      	mov	sp, r7
 8009660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009664:	4770      	bx	lr

08009666 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8009666:	b480      	push	{r7}
 8009668:	b083      	sub	sp, #12
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
 800966e:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8009670:	bf00      	nop
 8009672:	370c      	adds	r7, #12
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr

0800967c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800967c:	b480      	push	{r7}
 800967e:	b085      	sub	sp, #20
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009688:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8009692:	4ba7      	ldr	r3, [pc, #668]	@ (8009930 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009694:	4013      	ands	r3, r2
 8009696:	68ba      	ldr	r2, [r7, #8]
 8009698:	0091      	lsls	r1, r2, #2
 800969a:	687a      	ldr	r2, [r7, #4]
 800969c:	6812      	ldr	r2, [r2, #0]
 800969e:	430b      	orrs	r3, r1
 80096a0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80096ac:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096b4:	041a      	lsls	r2, r3, #16
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	430a      	orrs	r2, r1
 80096bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096c4:	68ba      	ldr	r2, [r7, #8]
 80096c6:	4413      	add	r3, r2
 80096c8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80096d2:	4b97      	ldr	r3, [pc, #604]	@ (8009930 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80096d4:	4013      	ands	r3, r2
 80096d6:	68ba      	ldr	r2, [r7, #8]
 80096d8:	0091      	lsls	r1, r2, #2
 80096da:	687a      	ldr	r2, [r7, #4]
 80096dc:	6812      	ldr	r2, [r2, #0]
 80096de:	430b      	orrs	r3, r1
 80096e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096ec:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096f4:	041a      	lsls	r2, r3, #16
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	430a      	orrs	r2, r1
 80096fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009704:	005b      	lsls	r3, r3, #1
 8009706:	68ba      	ldr	r2, [r7, #8]
 8009708:	4413      	add	r3, r2
 800970a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8009714:	4b86      	ldr	r3, [pc, #536]	@ (8009930 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009716:	4013      	ands	r3, r2
 8009718:	68ba      	ldr	r2, [r7, #8]
 800971a:	0091      	lsls	r1, r2, #2
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	6812      	ldr	r2, [r2, #0]
 8009720:	430b      	orrs	r3, r1
 8009722:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800972e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009736:	041a      	lsls	r2, r3, #16
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	430a      	orrs	r2, r1
 800973e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009746:	687a      	ldr	r2, [r7, #4]
 8009748:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800974a:	fb02 f303 	mul.w	r3, r2, r3
 800974e:	68ba      	ldr	r2, [r7, #8]
 8009750:	4413      	add	r3, r2
 8009752:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800975c:	4b74      	ldr	r3, [pc, #464]	@ (8009930 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800975e:	4013      	ands	r3, r2
 8009760:	68ba      	ldr	r2, [r7, #8]
 8009762:	0091      	lsls	r1, r2, #2
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	6812      	ldr	r2, [r2, #0]
 8009768:	430b      	orrs	r3, r1
 800976a:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009776:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800977e:	041a      	lsls	r2, r3, #16
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	430a      	orrs	r2, r1
 8009786:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009792:	fb02 f303 	mul.w	r3, r2, r3
 8009796:	68ba      	ldr	r2, [r7, #8]
 8009798:	4413      	add	r3, r2
 800979a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 80097a4:	4b62      	ldr	r3, [pc, #392]	@ (8009930 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80097a6:	4013      	ands	r3, r2
 80097a8:	68ba      	ldr	r2, [r7, #8]
 80097aa:	0091      	lsls	r1, r2, #2
 80097ac:	687a      	ldr	r2, [r7, #4]
 80097ae:	6812      	ldr	r2, [r2, #0]
 80097b0:	430b      	orrs	r3, r1
 80097b2:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097ba:	687a      	ldr	r2, [r7, #4]
 80097bc:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80097be:	fb02 f303 	mul.w	r3, r2, r3
 80097c2:	68ba      	ldr	r2, [r7, #8]
 80097c4:	4413      	add	r3, r2
 80097c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80097d0:	4b57      	ldr	r3, [pc, #348]	@ (8009930 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80097d2:	4013      	ands	r3, r2
 80097d4:	68ba      	ldr	r2, [r7, #8]
 80097d6:	0091      	lsls	r1, r2, #2
 80097d8:	687a      	ldr	r2, [r7, #4]
 80097da:	6812      	ldr	r2, [r2, #0]
 80097dc:	430b      	orrs	r3, r1
 80097de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80097ea:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097f2:	041a      	lsls	r2, r3, #16
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	430a      	orrs	r2, r1
 80097fa:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009802:	005b      	lsls	r3, r3, #1
 8009804:	68ba      	ldr	r2, [r7, #8]
 8009806:	4413      	add	r3, r2
 8009808:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8009812:	4b47      	ldr	r3, [pc, #284]	@ (8009930 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009814:	4013      	ands	r3, r2
 8009816:	68ba      	ldr	r2, [r7, #8]
 8009818:	0091      	lsls	r1, r2, #2
 800981a:	687a      	ldr	r2, [r7, #4]
 800981c:	6812      	ldr	r2, [r2, #0]
 800981e:	430b      	orrs	r3, r1
 8009820:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800982c:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009834:	041a      	lsls	r2, r3, #16
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	430a      	orrs	r2, r1
 800983c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009848:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009850:	061a      	lsls	r2, r3, #24
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	430a      	orrs	r2, r1
 8009858:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009860:	4b34      	ldr	r3, [pc, #208]	@ (8009934 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8009862:	4413      	add	r3, r2
 8009864:	009a      	lsls	r2, r3, #2
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009872:	009b      	lsls	r3, r3, #2
 8009874:	441a      	add	r2, r3
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009882:	00db      	lsls	r3, r3, #3
 8009884:	441a      	add	r2, r3
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009892:	6879      	ldr	r1, [r7, #4]
 8009894:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8009896:	fb01 f303 	mul.w	r3, r1, r3
 800989a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800989c:	441a      	add	r2, r3
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80098aa:	6879      	ldr	r1, [r7, #4]
 80098ac:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 80098ae:	fb01 f303 	mul.w	r3, r1, r3
 80098b2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80098b4:	441a      	add	r2, r3
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098c2:	6879      	ldr	r1, [r7, #4]
 80098c4:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 80098c6:	fb01 f303 	mul.w	r3, r1, r3
 80098ca:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80098cc:	441a      	add	r2, r3
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098de:	00db      	lsls	r3, r3, #3
 80098e0:	441a      	add	r2, r3
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80098f2:	6879      	ldr	r1, [r7, #4]
 80098f4:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80098f6:	fb01 f303 	mul.w	r3, r1, r3
 80098fa:	009b      	lsls	r3, r3, #2
 80098fc:	441a      	add	r2, r3
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800990e:	6879      	ldr	r1, [r7, #4]
 8009910:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8009912:	fb01 f303 	mul.w	r3, r1, r3
 8009916:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8009918:	441a      	add	r2, r3
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009926:	4a04      	ldr	r2, [pc, #16]	@ (8009938 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d915      	bls.n	8009958 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800992c:	e006      	b.n	800993c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800992e:	bf00      	nop
 8009930:	ffff0003 	.word	0xffff0003
 8009934:	10002b00 	.word	0x10002b00
 8009938:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009942:	f043 0220 	orr.w	r2, r3, #32
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2203      	movs	r2, #3
 8009950:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8009954:	2301      	movs	r3, #1
 8009956:	e010      	b.n	800997a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800995c:	60fb      	str	r3, [r7, #12]
 800995e:	e005      	b.n	800996c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2200      	movs	r2, #0
 8009964:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	3304      	adds	r3, #4
 800996a:	60fb      	str	r3, [r7, #12]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009972:	68fa      	ldr	r2, [r7, #12]
 8009974:	429a      	cmp	r2, r3
 8009976:	d3f3      	bcc.n	8009960 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8009978:	2300      	movs	r3, #0
}
 800997a:	4618      	mov	r0, r3
 800997c:	3714      	adds	r7, #20
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr
 8009986:	bf00      	nop

08009988 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8009988:	b480      	push	{r7}
 800998a:	b089      	sub	sp, #36	@ 0x24
 800998c:	af00      	add	r7, sp, #0
 800998e:	60f8      	str	r0, [r7, #12]
 8009990:	60b9      	str	r1, [r7, #8]
 8009992:	607a      	str	r2, [r7, #4]
 8009994:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	685b      	ldr	r3, [r3, #4]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d10a      	bne.n	80099b4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80099a6:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80099ae:	4313      	orrs	r3, r2
 80099b0:	61fb      	str	r3, [r7, #28]
 80099b2:	e00a      	b.n	80099ca <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80099bc:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80099c2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80099c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80099c8:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	6a1b      	ldr	r3, [r3, #32]
 80099ce:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80099d4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80099da:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80099e0:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	68db      	ldr	r3, [r3, #12]
 80099e6:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80099e8:	4313      	orrs	r3, r2
 80099ea:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80099f6:	6839      	ldr	r1, [r7, #0]
 80099f8:	fb01 f303 	mul.w	r3, r1, r3
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	4413      	add	r3, r2
 8009a00:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8009a02:	69bb      	ldr	r3, [r7, #24]
 8009a04:	69fa      	ldr	r2, [r7, #28]
 8009a06:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8009a08:	69bb      	ldr	r3, [r7, #24]
 8009a0a:	3304      	adds	r3, #4
 8009a0c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8009a0e:	69bb      	ldr	r3, [r7, #24]
 8009a10:	693a      	ldr	r2, [r7, #16]
 8009a12:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8009a14:	69bb      	ldr	r3, [r7, #24]
 8009a16:	3304      	adds	r3, #4
 8009a18:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	617b      	str	r3, [r7, #20]
 8009a1e:	e020      	b.n	8009a62 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	3303      	adds	r3, #3
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	4413      	add	r3, r2
 8009a28:	781b      	ldrb	r3, [r3, #0]
 8009a2a:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	3302      	adds	r3, #2
 8009a30:	6879      	ldr	r1, [r7, #4]
 8009a32:	440b      	add	r3, r1
 8009a34:	781b      	ldrb	r3, [r3, #0]
 8009a36:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8009a38:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	3301      	adds	r3, #1
 8009a3e:	6879      	ldr	r1, [r7, #4]
 8009a40:	440b      	add	r3, r1
 8009a42:	781b      	ldrb	r3, [r3, #0]
 8009a44:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8009a46:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8009a48:	6879      	ldr	r1, [r7, #4]
 8009a4a:	697a      	ldr	r2, [r7, #20]
 8009a4c:	440a      	add	r2, r1
 8009a4e:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8009a50:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8009a52:	69bb      	ldr	r3, [r7, #24]
 8009a54:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8009a56:	69bb      	ldr	r3, [r7, #24]
 8009a58:	3304      	adds	r3, #4
 8009a5a:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	3304      	adds	r3, #4
 8009a60:	617b      	str	r3, [r7, #20]
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	68db      	ldr	r3, [r3, #12]
 8009a66:	4a06      	ldr	r2, [pc, #24]	@ (8009a80 <FDCAN_CopyMessageToRAM+0xf8>)
 8009a68:	5cd3      	ldrb	r3, [r2, r3]
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d3d6      	bcc.n	8009a20 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8009a72:	bf00      	nop
 8009a74:	bf00      	nop
 8009a76:	3724      	adds	r7, #36	@ 0x24
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr
 8009a80:	08014960 	.word	0x08014960

08009a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b089      	sub	sp, #36	@ 0x24
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009a92:	4b86      	ldr	r3, [pc, #536]	@ (8009cac <HAL_GPIO_Init+0x228>)
 8009a94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009a96:	e18c      	b.n	8009db2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	2101      	movs	r1, #1
 8009a9e:	69fb      	ldr	r3, [r7, #28]
 8009aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8009aa4:	4013      	ands	r3, r2
 8009aa6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	f000 817e 	beq.w	8009dac <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	f003 0303 	and.w	r3, r3, #3
 8009ab8:	2b01      	cmp	r3, #1
 8009aba:	d005      	beq.n	8009ac8 <HAL_GPIO_Init+0x44>
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	f003 0303 	and.w	r3, r3, #3
 8009ac4:	2b02      	cmp	r3, #2
 8009ac6:	d130      	bne.n	8009b2a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	689b      	ldr	r3, [r3, #8]
 8009acc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009ace:	69fb      	ldr	r3, [r7, #28]
 8009ad0:	005b      	lsls	r3, r3, #1
 8009ad2:	2203      	movs	r2, #3
 8009ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ad8:	43db      	mvns	r3, r3
 8009ada:	69ba      	ldr	r2, [r7, #24]
 8009adc:	4013      	ands	r3, r2
 8009ade:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	68da      	ldr	r2, [r3, #12]
 8009ae4:	69fb      	ldr	r3, [r7, #28]
 8009ae6:	005b      	lsls	r3, r3, #1
 8009ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8009aec:	69ba      	ldr	r2, [r7, #24]
 8009aee:	4313      	orrs	r3, r2
 8009af0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	69ba      	ldr	r2, [r7, #24]
 8009af6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	685b      	ldr	r3, [r3, #4]
 8009afc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009afe:	2201      	movs	r2, #1
 8009b00:	69fb      	ldr	r3, [r7, #28]
 8009b02:	fa02 f303 	lsl.w	r3, r2, r3
 8009b06:	43db      	mvns	r3, r3
 8009b08:	69ba      	ldr	r2, [r7, #24]
 8009b0a:	4013      	ands	r3, r2
 8009b0c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	091b      	lsrs	r3, r3, #4
 8009b14:	f003 0201 	and.w	r2, r3, #1
 8009b18:	69fb      	ldr	r3, [r7, #28]
 8009b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8009b1e:	69ba      	ldr	r2, [r7, #24]
 8009b20:	4313      	orrs	r3, r2
 8009b22:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	69ba      	ldr	r2, [r7, #24]
 8009b28:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	685b      	ldr	r3, [r3, #4]
 8009b2e:	f003 0303 	and.w	r3, r3, #3
 8009b32:	2b03      	cmp	r3, #3
 8009b34:	d017      	beq.n	8009b66 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	68db      	ldr	r3, [r3, #12]
 8009b3a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009b3c:	69fb      	ldr	r3, [r7, #28]
 8009b3e:	005b      	lsls	r3, r3, #1
 8009b40:	2203      	movs	r2, #3
 8009b42:	fa02 f303 	lsl.w	r3, r2, r3
 8009b46:	43db      	mvns	r3, r3
 8009b48:	69ba      	ldr	r2, [r7, #24]
 8009b4a:	4013      	ands	r3, r2
 8009b4c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	689a      	ldr	r2, [r3, #8]
 8009b52:	69fb      	ldr	r3, [r7, #28]
 8009b54:	005b      	lsls	r3, r3, #1
 8009b56:	fa02 f303 	lsl.w	r3, r2, r3
 8009b5a:	69ba      	ldr	r2, [r7, #24]
 8009b5c:	4313      	orrs	r3, r2
 8009b5e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	69ba      	ldr	r2, [r7, #24]
 8009b64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	685b      	ldr	r3, [r3, #4]
 8009b6a:	f003 0303 	and.w	r3, r3, #3
 8009b6e:	2b02      	cmp	r3, #2
 8009b70:	d123      	bne.n	8009bba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009b72:	69fb      	ldr	r3, [r7, #28]
 8009b74:	08da      	lsrs	r2, r3, #3
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	3208      	adds	r2, #8
 8009b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009b80:	69fb      	ldr	r3, [r7, #28]
 8009b82:	f003 0307 	and.w	r3, r3, #7
 8009b86:	009b      	lsls	r3, r3, #2
 8009b88:	220f      	movs	r2, #15
 8009b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8009b8e:	43db      	mvns	r3, r3
 8009b90:	69ba      	ldr	r2, [r7, #24]
 8009b92:	4013      	ands	r3, r2
 8009b94:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	691a      	ldr	r2, [r3, #16]
 8009b9a:	69fb      	ldr	r3, [r7, #28]
 8009b9c:	f003 0307 	and.w	r3, r3, #7
 8009ba0:	009b      	lsls	r3, r3, #2
 8009ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ba6:	69ba      	ldr	r2, [r7, #24]
 8009ba8:	4313      	orrs	r3, r2
 8009baa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009bac:	69fb      	ldr	r3, [r7, #28]
 8009bae:	08da      	lsrs	r2, r3, #3
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	3208      	adds	r2, #8
 8009bb4:	69b9      	ldr	r1, [r7, #24]
 8009bb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009bc0:	69fb      	ldr	r3, [r7, #28]
 8009bc2:	005b      	lsls	r3, r3, #1
 8009bc4:	2203      	movs	r2, #3
 8009bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8009bca:	43db      	mvns	r3, r3
 8009bcc:	69ba      	ldr	r2, [r7, #24]
 8009bce:	4013      	ands	r3, r2
 8009bd0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	f003 0203 	and.w	r2, r3, #3
 8009bda:	69fb      	ldr	r3, [r7, #28]
 8009bdc:	005b      	lsls	r3, r3, #1
 8009bde:	fa02 f303 	lsl.w	r3, r2, r3
 8009be2:	69ba      	ldr	r2, [r7, #24]
 8009be4:	4313      	orrs	r3, r2
 8009be6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	69ba      	ldr	r2, [r7, #24]
 8009bec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	685b      	ldr	r3, [r3, #4]
 8009bf2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	f000 80d8 	beq.w	8009dac <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009bfc:	4b2c      	ldr	r3, [pc, #176]	@ (8009cb0 <HAL_GPIO_Init+0x22c>)
 8009bfe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009c02:	4a2b      	ldr	r2, [pc, #172]	@ (8009cb0 <HAL_GPIO_Init+0x22c>)
 8009c04:	f043 0302 	orr.w	r3, r3, #2
 8009c08:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8009c0c:	4b28      	ldr	r3, [pc, #160]	@ (8009cb0 <HAL_GPIO_Init+0x22c>)
 8009c0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009c12:	f003 0302 	and.w	r3, r3, #2
 8009c16:	60fb      	str	r3, [r7, #12]
 8009c18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009c1a:	4a26      	ldr	r2, [pc, #152]	@ (8009cb4 <HAL_GPIO_Init+0x230>)
 8009c1c:	69fb      	ldr	r3, [r7, #28]
 8009c1e:	089b      	lsrs	r3, r3, #2
 8009c20:	3302      	adds	r3, #2
 8009c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009c28:	69fb      	ldr	r3, [r7, #28]
 8009c2a:	f003 0303 	and.w	r3, r3, #3
 8009c2e:	009b      	lsls	r3, r3, #2
 8009c30:	220f      	movs	r2, #15
 8009c32:	fa02 f303 	lsl.w	r3, r2, r3
 8009c36:	43db      	mvns	r3, r3
 8009c38:	69ba      	ldr	r2, [r7, #24]
 8009c3a:	4013      	ands	r3, r2
 8009c3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	4a1d      	ldr	r2, [pc, #116]	@ (8009cb8 <HAL_GPIO_Init+0x234>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d04a      	beq.n	8009cdc <HAL_GPIO_Init+0x258>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	4a1c      	ldr	r2, [pc, #112]	@ (8009cbc <HAL_GPIO_Init+0x238>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d02b      	beq.n	8009ca6 <HAL_GPIO_Init+0x222>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	4a1b      	ldr	r2, [pc, #108]	@ (8009cc0 <HAL_GPIO_Init+0x23c>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d025      	beq.n	8009ca2 <HAL_GPIO_Init+0x21e>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	4a1a      	ldr	r2, [pc, #104]	@ (8009cc4 <HAL_GPIO_Init+0x240>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d01f      	beq.n	8009c9e <HAL_GPIO_Init+0x21a>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	4a19      	ldr	r2, [pc, #100]	@ (8009cc8 <HAL_GPIO_Init+0x244>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d019      	beq.n	8009c9a <HAL_GPIO_Init+0x216>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	4a18      	ldr	r2, [pc, #96]	@ (8009ccc <HAL_GPIO_Init+0x248>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d013      	beq.n	8009c96 <HAL_GPIO_Init+0x212>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	4a17      	ldr	r2, [pc, #92]	@ (8009cd0 <HAL_GPIO_Init+0x24c>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d00d      	beq.n	8009c92 <HAL_GPIO_Init+0x20e>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	4a16      	ldr	r2, [pc, #88]	@ (8009cd4 <HAL_GPIO_Init+0x250>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d007      	beq.n	8009c8e <HAL_GPIO_Init+0x20a>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	4a15      	ldr	r2, [pc, #84]	@ (8009cd8 <HAL_GPIO_Init+0x254>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d101      	bne.n	8009c8a <HAL_GPIO_Init+0x206>
 8009c86:	2309      	movs	r3, #9
 8009c88:	e029      	b.n	8009cde <HAL_GPIO_Init+0x25a>
 8009c8a:	230a      	movs	r3, #10
 8009c8c:	e027      	b.n	8009cde <HAL_GPIO_Init+0x25a>
 8009c8e:	2307      	movs	r3, #7
 8009c90:	e025      	b.n	8009cde <HAL_GPIO_Init+0x25a>
 8009c92:	2306      	movs	r3, #6
 8009c94:	e023      	b.n	8009cde <HAL_GPIO_Init+0x25a>
 8009c96:	2305      	movs	r3, #5
 8009c98:	e021      	b.n	8009cde <HAL_GPIO_Init+0x25a>
 8009c9a:	2304      	movs	r3, #4
 8009c9c:	e01f      	b.n	8009cde <HAL_GPIO_Init+0x25a>
 8009c9e:	2303      	movs	r3, #3
 8009ca0:	e01d      	b.n	8009cde <HAL_GPIO_Init+0x25a>
 8009ca2:	2302      	movs	r3, #2
 8009ca4:	e01b      	b.n	8009cde <HAL_GPIO_Init+0x25a>
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	e019      	b.n	8009cde <HAL_GPIO_Init+0x25a>
 8009caa:	bf00      	nop
 8009cac:	58000080 	.word	0x58000080
 8009cb0:	58024400 	.word	0x58024400
 8009cb4:	58000400 	.word	0x58000400
 8009cb8:	58020000 	.word	0x58020000
 8009cbc:	58020400 	.word	0x58020400
 8009cc0:	58020800 	.word	0x58020800
 8009cc4:	58020c00 	.word	0x58020c00
 8009cc8:	58021000 	.word	0x58021000
 8009ccc:	58021400 	.word	0x58021400
 8009cd0:	58021800 	.word	0x58021800
 8009cd4:	58021c00 	.word	0x58021c00
 8009cd8:	58022400 	.word	0x58022400
 8009cdc:	2300      	movs	r3, #0
 8009cde:	69fa      	ldr	r2, [r7, #28]
 8009ce0:	f002 0203 	and.w	r2, r2, #3
 8009ce4:	0092      	lsls	r2, r2, #2
 8009ce6:	4093      	lsls	r3, r2
 8009ce8:	69ba      	ldr	r2, [r7, #24]
 8009cea:	4313      	orrs	r3, r2
 8009cec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009cee:	4938      	ldr	r1, [pc, #224]	@ (8009dd0 <HAL_GPIO_Init+0x34c>)
 8009cf0:	69fb      	ldr	r3, [r7, #28]
 8009cf2:	089b      	lsrs	r3, r3, #2
 8009cf4:	3302      	adds	r3, #2
 8009cf6:	69ba      	ldr	r2, [r7, #24]
 8009cf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009cfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	43db      	mvns	r3, r3
 8009d08:	69ba      	ldr	r2, [r7, #24]
 8009d0a:	4013      	ands	r3, r2
 8009d0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	685b      	ldr	r3, [r3, #4]
 8009d12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d003      	beq.n	8009d22 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8009d1a:	69ba      	ldr	r2, [r7, #24]
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8009d22:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009d26:	69bb      	ldr	r3, [r7, #24]
 8009d28:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009d2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	43db      	mvns	r3, r3
 8009d36:	69ba      	ldr	r2, [r7, #24]
 8009d38:	4013      	ands	r3, r2
 8009d3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d003      	beq.n	8009d50 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8009d48:	69ba      	ldr	r2, [r7, #24]
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009d50:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009d54:	69bb      	ldr	r3, [r7, #24]
 8009d56:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	43db      	mvns	r3, r3
 8009d62:	69ba      	ldr	r2, [r7, #24]
 8009d64:	4013      	ands	r3, r2
 8009d66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	685b      	ldr	r3, [r3, #4]
 8009d6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d003      	beq.n	8009d7c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8009d74:	69ba      	ldr	r2, [r7, #24]
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	69ba      	ldr	r2, [r7, #24]
 8009d80:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	43db      	mvns	r3, r3
 8009d8c:	69ba      	ldr	r2, [r7, #24]
 8009d8e:	4013      	ands	r3, r2
 8009d90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d003      	beq.n	8009da6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8009d9e:	69ba      	ldr	r2, [r7, #24]
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	4313      	orrs	r3, r2
 8009da4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	69ba      	ldr	r2, [r7, #24]
 8009daa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009dac:	69fb      	ldr	r3, [r7, #28]
 8009dae:	3301      	adds	r3, #1
 8009db0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	681a      	ldr	r2, [r3, #0]
 8009db6:	69fb      	ldr	r3, [r7, #28]
 8009db8:	fa22 f303 	lsr.w	r3, r2, r3
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	f47f ae6b 	bne.w	8009a98 <HAL_GPIO_Init+0x14>
  }
}
 8009dc2:	bf00      	nop
 8009dc4:	bf00      	nop
 8009dc6:	3724      	adds	r7, #36	@ 0x24
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dce:	4770      	bx	lr
 8009dd0:	58000400 	.word	0x58000400

08009dd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b085      	sub	sp, #20
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	460b      	mov	r3, r1
 8009dde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	691a      	ldr	r2, [r3, #16]
 8009de4:	887b      	ldrh	r3, [r7, #2]
 8009de6:	4013      	ands	r3, r2
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d002      	beq.n	8009df2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009dec:	2301      	movs	r3, #1
 8009dee:	73fb      	strb	r3, [r7, #15]
 8009df0:	e001      	b.n	8009df6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009df2:	2300      	movs	r3, #0
 8009df4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3714      	adds	r7, #20
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr

08009e04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b083      	sub	sp, #12
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	460b      	mov	r3, r1
 8009e0e:	807b      	strh	r3, [r7, #2]
 8009e10:	4613      	mov	r3, r2
 8009e12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009e14:	787b      	ldrb	r3, [r7, #1]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d003      	beq.n	8009e22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009e1a:	887a      	ldrh	r2, [r7, #2]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009e20:	e003      	b.n	8009e2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009e22:	887b      	ldrh	r3, [r7, #2]
 8009e24:	041a      	lsls	r2, r3, #16
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	619a      	str	r2, [r3, #24]
}
 8009e2a:	bf00      	nop
 8009e2c:	370c      	adds	r7, #12
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e34:	4770      	bx	lr
	...

08009e38 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b084      	sub	sp, #16
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009e40:	4b19      	ldr	r3, [pc, #100]	@ (8009ea8 <HAL_PWREx_ConfigSupply+0x70>)
 8009e42:	68db      	ldr	r3, [r3, #12]
 8009e44:	f003 0304 	and.w	r3, r3, #4
 8009e48:	2b04      	cmp	r3, #4
 8009e4a:	d00a      	beq.n	8009e62 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009e4c:	4b16      	ldr	r3, [pc, #88]	@ (8009ea8 <HAL_PWREx_ConfigSupply+0x70>)
 8009e4e:	68db      	ldr	r3, [r3, #12]
 8009e50:	f003 0307 	and.w	r3, r3, #7
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	429a      	cmp	r2, r3
 8009e58:	d001      	beq.n	8009e5e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	e01f      	b.n	8009e9e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	e01d      	b.n	8009e9e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009e62:	4b11      	ldr	r3, [pc, #68]	@ (8009ea8 <HAL_PWREx_ConfigSupply+0x70>)
 8009e64:	68db      	ldr	r3, [r3, #12]
 8009e66:	f023 0207 	bic.w	r2, r3, #7
 8009e6a:	490f      	ldr	r1, [pc, #60]	@ (8009ea8 <HAL_PWREx_ConfigSupply+0x70>)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	4313      	orrs	r3, r2
 8009e70:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009e72:	f7f9 fe27 	bl	8003ac4 <HAL_GetTick>
 8009e76:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009e78:	e009      	b.n	8009e8e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009e7a:	f7f9 fe23 	bl	8003ac4 <HAL_GetTick>
 8009e7e:	4602      	mov	r2, r0
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	1ad3      	subs	r3, r2, r3
 8009e84:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009e88:	d901      	bls.n	8009e8e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	e007      	b.n	8009e9e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009e8e:	4b06      	ldr	r3, [pc, #24]	@ (8009ea8 <HAL_PWREx_ConfigSupply+0x70>)
 8009e90:	685b      	ldr	r3, [r3, #4]
 8009e92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009e96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009e9a:	d1ee      	bne.n	8009e7a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009e9c:	2300      	movs	r3, #0
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3710      	adds	r7, #16
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
 8009ea6:	bf00      	nop
 8009ea8:	58024800 	.word	0x58024800

08009eac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b08c      	sub	sp, #48	@ 0x30
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d101      	bne.n	8009ebe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009eba:	2301      	movs	r3, #1
 8009ebc:	e3c8      	b.n	800a650 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f003 0301 	and.w	r3, r3, #1
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	f000 8087 	beq.w	8009fda <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009ecc:	4b88      	ldr	r3, [pc, #544]	@ (800a0f0 <HAL_RCC_OscConfig+0x244>)
 8009ece:	691b      	ldr	r3, [r3, #16]
 8009ed0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009ed6:	4b86      	ldr	r3, [pc, #536]	@ (800a0f0 <HAL_RCC_OscConfig+0x244>)
 8009ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eda:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ede:	2b10      	cmp	r3, #16
 8009ee0:	d007      	beq.n	8009ef2 <HAL_RCC_OscConfig+0x46>
 8009ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ee4:	2b18      	cmp	r3, #24
 8009ee6:	d110      	bne.n	8009f0a <HAL_RCC_OscConfig+0x5e>
 8009ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eea:	f003 0303 	and.w	r3, r3, #3
 8009eee:	2b02      	cmp	r3, #2
 8009ef0:	d10b      	bne.n	8009f0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ef2:	4b7f      	ldr	r3, [pc, #508]	@ (800a0f0 <HAL_RCC_OscConfig+0x244>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d06c      	beq.n	8009fd8 <HAL_RCC_OscConfig+0x12c>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	685b      	ldr	r3, [r3, #4]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d168      	bne.n	8009fd8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009f06:	2301      	movs	r3, #1
 8009f08:	e3a2      	b.n	800a650 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	685b      	ldr	r3, [r3, #4]
 8009f0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f12:	d106      	bne.n	8009f22 <HAL_RCC_OscConfig+0x76>
 8009f14:	4b76      	ldr	r3, [pc, #472]	@ (800a0f0 <HAL_RCC_OscConfig+0x244>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	4a75      	ldr	r2, [pc, #468]	@ (800a0f0 <HAL_RCC_OscConfig+0x244>)
 8009f1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009f1e:	6013      	str	r3, [r2, #0]
 8009f20:	e02e      	b.n	8009f80 <HAL_RCC_OscConfig+0xd4>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	685b      	ldr	r3, [r3, #4]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d10c      	bne.n	8009f44 <HAL_RCC_OscConfig+0x98>
 8009f2a:	4b71      	ldr	r3, [pc, #452]	@ (800a0f0 <HAL_RCC_OscConfig+0x244>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	4a70      	ldr	r2, [pc, #448]	@ (800a0f0 <HAL_RCC_OscConfig+0x244>)
 8009f30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009f34:	6013      	str	r3, [r2, #0]
 8009f36:	4b6e      	ldr	r3, [pc, #440]	@ (800a0f0 <HAL_RCC_OscConfig+0x244>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a6d      	ldr	r2, [pc, #436]	@ (800a0f0 <HAL_RCC_OscConfig+0x244>)
 8009f3c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009f40:	6013      	str	r3, [r2, #0]
 8009f42:	e01d      	b.n	8009f80 <HAL_RCC_OscConfig+0xd4>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	685b      	ldr	r3, [r3, #4]
 8009f48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009f4c:	d10c      	bne.n	8009f68 <HAL_RCC_OscConfig+0xbc>
 8009f4e:	4b68      	ldr	r3, [pc, #416]	@ (800a0f0 <HAL_RCC_OscConfig+0x244>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	4a67      	ldr	r2, [pc, #412]	@ (800a0f0 <HAL_RCC_OscConfig+0x244>)
 8009f54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009f58:	6013      	str	r3, [r2, #0]
 8009f5a:	4b65      	ldr	r3, [pc, #404]	@ (800a0f0 <HAL_RCC_OscConfig+0x244>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	4a64      	ldr	r2, [pc, #400]	@ (800a0f0 <HAL_RCC_OscConfig+0x244>)
 8009f60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009f64:	6013      	str	r3, [r2, #0]
 8009f66:	e00b      	b.n	8009f80 <HAL_RCC_OscConfig+0xd4>
 8009f68:	4b61      	ldr	r3, [pc, #388]	@ (800a0f0 <HAL_RCC_OscConfig+0x244>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	4a60      	ldr	r2, [pc, #384]	@ (800a0f0 <HAL_RCC_OscConfig+0x244>)
 8009f6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009f72:	6013      	str	r3, [r2, #0]
 8009f74:	4b5e      	ldr	r3, [pc, #376]	@ (800a0f0 <HAL_RCC_OscConfig+0x244>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	4a5d      	ldr	r2, [pc, #372]	@ (800a0f0 <HAL_RCC_OscConfig+0x244>)
 8009f7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009f7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	685b      	ldr	r3, [r3, #4]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d013      	beq.n	8009fb0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f88:	f7f9 fd9c 	bl	8003ac4 <HAL_GetTick>
 8009f8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009f8e:	e008      	b.n	8009fa2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009f90:	f7f9 fd98 	bl	8003ac4 <HAL_GetTick>
 8009f94:	4602      	mov	r2, r0
 8009f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f98:	1ad3      	subs	r3, r2, r3
 8009f9a:	2b64      	cmp	r3, #100	@ 0x64
 8009f9c:	d901      	bls.n	8009fa2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009f9e:	2303      	movs	r3, #3
 8009fa0:	e356      	b.n	800a650 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009fa2:	4b53      	ldr	r3, [pc, #332]	@ (800a0f0 <HAL_RCC_OscConfig+0x244>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d0f0      	beq.n	8009f90 <HAL_RCC_OscConfig+0xe4>
 8009fae:	e014      	b.n	8009fda <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fb0:	f7f9 fd88 	bl	8003ac4 <HAL_GetTick>
 8009fb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009fb6:	e008      	b.n	8009fca <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009fb8:	f7f9 fd84 	bl	8003ac4 <HAL_GetTick>
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fc0:	1ad3      	subs	r3, r2, r3
 8009fc2:	2b64      	cmp	r3, #100	@ 0x64
 8009fc4:	d901      	bls.n	8009fca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009fc6:	2303      	movs	r3, #3
 8009fc8:	e342      	b.n	800a650 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009fca:	4b49      	ldr	r3, [pc, #292]	@ (800a0f0 <HAL_RCC_OscConfig+0x244>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d1f0      	bne.n	8009fb8 <HAL_RCC_OscConfig+0x10c>
 8009fd6:	e000      	b.n	8009fda <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f003 0302 	and.w	r3, r3, #2
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	f000 808c 	beq.w	800a100 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009fe8:	4b41      	ldr	r3, [pc, #260]	@ (800a0f0 <HAL_RCC_OscConfig+0x244>)
 8009fea:	691b      	ldr	r3, [r3, #16]
 8009fec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009ff0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009ff2:	4b3f      	ldr	r3, [pc, #252]	@ (800a0f0 <HAL_RCC_OscConfig+0x244>)
 8009ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ff6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009ff8:	6a3b      	ldr	r3, [r7, #32]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d007      	beq.n	800a00e <HAL_RCC_OscConfig+0x162>
 8009ffe:	6a3b      	ldr	r3, [r7, #32]
 800a000:	2b18      	cmp	r3, #24
 800a002:	d137      	bne.n	800a074 <HAL_RCC_OscConfig+0x1c8>
 800a004:	69fb      	ldr	r3, [r7, #28]
 800a006:	f003 0303 	and.w	r3, r3, #3
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d132      	bne.n	800a074 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a00e:	4b38      	ldr	r3, [pc, #224]	@ (800a0f0 <HAL_RCC_OscConfig+0x244>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f003 0304 	and.w	r3, r3, #4
 800a016:	2b00      	cmp	r3, #0
 800a018:	d005      	beq.n	800a026 <HAL_RCC_OscConfig+0x17a>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	68db      	ldr	r3, [r3, #12]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d101      	bne.n	800a026 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a022:	2301      	movs	r3, #1
 800a024:	e314      	b.n	800a650 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a026:	4b32      	ldr	r3, [pc, #200]	@ (800a0f0 <HAL_RCC_OscConfig+0x244>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f023 0219 	bic.w	r2, r3, #25
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	68db      	ldr	r3, [r3, #12]
 800a032:	492f      	ldr	r1, [pc, #188]	@ (800a0f0 <HAL_RCC_OscConfig+0x244>)
 800a034:	4313      	orrs	r3, r2
 800a036:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a038:	f7f9 fd44 	bl	8003ac4 <HAL_GetTick>
 800a03c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a03e:	e008      	b.n	800a052 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a040:	f7f9 fd40 	bl	8003ac4 <HAL_GetTick>
 800a044:	4602      	mov	r2, r0
 800a046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a048:	1ad3      	subs	r3, r2, r3
 800a04a:	2b02      	cmp	r3, #2
 800a04c:	d901      	bls.n	800a052 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800a04e:	2303      	movs	r3, #3
 800a050:	e2fe      	b.n	800a650 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a052:	4b27      	ldr	r3, [pc, #156]	@ (800a0f0 <HAL_RCC_OscConfig+0x244>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f003 0304 	and.w	r3, r3, #4
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d0f0      	beq.n	800a040 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a05e:	4b24      	ldr	r3, [pc, #144]	@ (800a0f0 <HAL_RCC_OscConfig+0x244>)
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	691b      	ldr	r3, [r3, #16]
 800a06a:	061b      	lsls	r3, r3, #24
 800a06c:	4920      	ldr	r1, [pc, #128]	@ (800a0f0 <HAL_RCC_OscConfig+0x244>)
 800a06e:	4313      	orrs	r3, r2
 800a070:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a072:	e045      	b.n	800a100 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	68db      	ldr	r3, [r3, #12]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d026      	beq.n	800a0ca <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a07c:	4b1c      	ldr	r3, [pc, #112]	@ (800a0f0 <HAL_RCC_OscConfig+0x244>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f023 0219 	bic.w	r2, r3, #25
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	68db      	ldr	r3, [r3, #12]
 800a088:	4919      	ldr	r1, [pc, #100]	@ (800a0f0 <HAL_RCC_OscConfig+0x244>)
 800a08a:	4313      	orrs	r3, r2
 800a08c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a08e:	f7f9 fd19 	bl	8003ac4 <HAL_GetTick>
 800a092:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a094:	e008      	b.n	800a0a8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a096:	f7f9 fd15 	bl	8003ac4 <HAL_GetTick>
 800a09a:	4602      	mov	r2, r0
 800a09c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a09e:	1ad3      	subs	r3, r2, r3
 800a0a0:	2b02      	cmp	r3, #2
 800a0a2:	d901      	bls.n	800a0a8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800a0a4:	2303      	movs	r3, #3
 800a0a6:	e2d3      	b.n	800a650 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a0a8:	4b11      	ldr	r3, [pc, #68]	@ (800a0f0 <HAL_RCC_OscConfig+0x244>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f003 0304 	and.w	r3, r3, #4
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d0f0      	beq.n	800a096 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a0b4:	4b0e      	ldr	r3, [pc, #56]	@ (800a0f0 <HAL_RCC_OscConfig+0x244>)
 800a0b6:	685b      	ldr	r3, [r3, #4]
 800a0b8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	691b      	ldr	r3, [r3, #16]
 800a0c0:	061b      	lsls	r3, r3, #24
 800a0c2:	490b      	ldr	r1, [pc, #44]	@ (800a0f0 <HAL_RCC_OscConfig+0x244>)
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	604b      	str	r3, [r1, #4]
 800a0c8:	e01a      	b.n	800a100 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a0ca:	4b09      	ldr	r3, [pc, #36]	@ (800a0f0 <HAL_RCC_OscConfig+0x244>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	4a08      	ldr	r2, [pc, #32]	@ (800a0f0 <HAL_RCC_OscConfig+0x244>)
 800a0d0:	f023 0301 	bic.w	r3, r3, #1
 800a0d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0d6:	f7f9 fcf5 	bl	8003ac4 <HAL_GetTick>
 800a0da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a0dc:	e00a      	b.n	800a0f4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a0de:	f7f9 fcf1 	bl	8003ac4 <HAL_GetTick>
 800a0e2:	4602      	mov	r2, r0
 800a0e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0e6:	1ad3      	subs	r3, r2, r3
 800a0e8:	2b02      	cmp	r3, #2
 800a0ea:	d903      	bls.n	800a0f4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800a0ec:	2303      	movs	r3, #3
 800a0ee:	e2af      	b.n	800a650 <HAL_RCC_OscConfig+0x7a4>
 800a0f0:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a0f4:	4b96      	ldr	r3, [pc, #600]	@ (800a350 <HAL_RCC_OscConfig+0x4a4>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f003 0304 	and.w	r3, r3, #4
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d1ee      	bne.n	800a0de <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f003 0310 	and.w	r3, r3, #16
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d06a      	beq.n	800a1e2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a10c:	4b90      	ldr	r3, [pc, #576]	@ (800a350 <HAL_RCC_OscConfig+0x4a4>)
 800a10e:	691b      	ldr	r3, [r3, #16]
 800a110:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a114:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a116:	4b8e      	ldr	r3, [pc, #568]	@ (800a350 <HAL_RCC_OscConfig+0x4a4>)
 800a118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a11a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a11c:	69bb      	ldr	r3, [r7, #24]
 800a11e:	2b08      	cmp	r3, #8
 800a120:	d007      	beq.n	800a132 <HAL_RCC_OscConfig+0x286>
 800a122:	69bb      	ldr	r3, [r7, #24]
 800a124:	2b18      	cmp	r3, #24
 800a126:	d11b      	bne.n	800a160 <HAL_RCC_OscConfig+0x2b4>
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	f003 0303 	and.w	r3, r3, #3
 800a12e:	2b01      	cmp	r3, #1
 800a130:	d116      	bne.n	800a160 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a132:	4b87      	ldr	r3, [pc, #540]	@ (800a350 <HAL_RCC_OscConfig+0x4a4>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d005      	beq.n	800a14a <HAL_RCC_OscConfig+0x29e>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	69db      	ldr	r3, [r3, #28]
 800a142:	2b80      	cmp	r3, #128	@ 0x80
 800a144:	d001      	beq.n	800a14a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800a146:	2301      	movs	r3, #1
 800a148:	e282      	b.n	800a650 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a14a:	4b81      	ldr	r3, [pc, #516]	@ (800a350 <HAL_RCC_OscConfig+0x4a4>)
 800a14c:	68db      	ldr	r3, [r3, #12]
 800a14e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6a1b      	ldr	r3, [r3, #32]
 800a156:	061b      	lsls	r3, r3, #24
 800a158:	497d      	ldr	r1, [pc, #500]	@ (800a350 <HAL_RCC_OscConfig+0x4a4>)
 800a15a:	4313      	orrs	r3, r2
 800a15c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a15e:	e040      	b.n	800a1e2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	69db      	ldr	r3, [r3, #28]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d023      	beq.n	800a1b0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a168:	4b79      	ldr	r3, [pc, #484]	@ (800a350 <HAL_RCC_OscConfig+0x4a4>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	4a78      	ldr	r2, [pc, #480]	@ (800a350 <HAL_RCC_OscConfig+0x4a4>)
 800a16e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a172:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a174:	f7f9 fca6 	bl	8003ac4 <HAL_GetTick>
 800a178:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a17a:	e008      	b.n	800a18e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a17c:	f7f9 fca2 	bl	8003ac4 <HAL_GetTick>
 800a180:	4602      	mov	r2, r0
 800a182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a184:	1ad3      	subs	r3, r2, r3
 800a186:	2b02      	cmp	r3, #2
 800a188:	d901      	bls.n	800a18e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800a18a:	2303      	movs	r3, #3
 800a18c:	e260      	b.n	800a650 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a18e:	4b70      	ldr	r3, [pc, #448]	@ (800a350 <HAL_RCC_OscConfig+0x4a4>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a196:	2b00      	cmp	r3, #0
 800a198:	d0f0      	beq.n	800a17c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a19a:	4b6d      	ldr	r3, [pc, #436]	@ (800a350 <HAL_RCC_OscConfig+0x4a4>)
 800a19c:	68db      	ldr	r3, [r3, #12]
 800a19e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6a1b      	ldr	r3, [r3, #32]
 800a1a6:	061b      	lsls	r3, r3, #24
 800a1a8:	4969      	ldr	r1, [pc, #420]	@ (800a350 <HAL_RCC_OscConfig+0x4a4>)
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	60cb      	str	r3, [r1, #12]
 800a1ae:	e018      	b.n	800a1e2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a1b0:	4b67      	ldr	r3, [pc, #412]	@ (800a350 <HAL_RCC_OscConfig+0x4a4>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	4a66      	ldr	r2, [pc, #408]	@ (800a350 <HAL_RCC_OscConfig+0x4a4>)
 800a1b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a1ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1bc:	f7f9 fc82 	bl	8003ac4 <HAL_GetTick>
 800a1c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a1c2:	e008      	b.n	800a1d6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a1c4:	f7f9 fc7e 	bl	8003ac4 <HAL_GetTick>
 800a1c8:	4602      	mov	r2, r0
 800a1ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1cc:	1ad3      	subs	r3, r2, r3
 800a1ce:	2b02      	cmp	r3, #2
 800a1d0:	d901      	bls.n	800a1d6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800a1d2:	2303      	movs	r3, #3
 800a1d4:	e23c      	b.n	800a650 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a1d6:	4b5e      	ldr	r3, [pc, #376]	@ (800a350 <HAL_RCC_OscConfig+0x4a4>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d1f0      	bne.n	800a1c4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f003 0308 	and.w	r3, r3, #8
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d036      	beq.n	800a25c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	695b      	ldr	r3, [r3, #20]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d019      	beq.n	800a22a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a1f6:	4b56      	ldr	r3, [pc, #344]	@ (800a350 <HAL_RCC_OscConfig+0x4a4>)
 800a1f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a1fa:	4a55      	ldr	r2, [pc, #340]	@ (800a350 <HAL_RCC_OscConfig+0x4a4>)
 800a1fc:	f043 0301 	orr.w	r3, r3, #1
 800a200:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a202:	f7f9 fc5f 	bl	8003ac4 <HAL_GetTick>
 800a206:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a208:	e008      	b.n	800a21c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a20a:	f7f9 fc5b 	bl	8003ac4 <HAL_GetTick>
 800a20e:	4602      	mov	r2, r0
 800a210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a212:	1ad3      	subs	r3, r2, r3
 800a214:	2b02      	cmp	r3, #2
 800a216:	d901      	bls.n	800a21c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800a218:	2303      	movs	r3, #3
 800a21a:	e219      	b.n	800a650 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a21c:	4b4c      	ldr	r3, [pc, #304]	@ (800a350 <HAL_RCC_OscConfig+0x4a4>)
 800a21e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a220:	f003 0302 	and.w	r3, r3, #2
 800a224:	2b00      	cmp	r3, #0
 800a226:	d0f0      	beq.n	800a20a <HAL_RCC_OscConfig+0x35e>
 800a228:	e018      	b.n	800a25c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a22a:	4b49      	ldr	r3, [pc, #292]	@ (800a350 <HAL_RCC_OscConfig+0x4a4>)
 800a22c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a22e:	4a48      	ldr	r2, [pc, #288]	@ (800a350 <HAL_RCC_OscConfig+0x4a4>)
 800a230:	f023 0301 	bic.w	r3, r3, #1
 800a234:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a236:	f7f9 fc45 	bl	8003ac4 <HAL_GetTick>
 800a23a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a23c:	e008      	b.n	800a250 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a23e:	f7f9 fc41 	bl	8003ac4 <HAL_GetTick>
 800a242:	4602      	mov	r2, r0
 800a244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a246:	1ad3      	subs	r3, r2, r3
 800a248:	2b02      	cmp	r3, #2
 800a24a:	d901      	bls.n	800a250 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800a24c:	2303      	movs	r3, #3
 800a24e:	e1ff      	b.n	800a650 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a250:	4b3f      	ldr	r3, [pc, #252]	@ (800a350 <HAL_RCC_OscConfig+0x4a4>)
 800a252:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a254:	f003 0302 	and.w	r3, r3, #2
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d1f0      	bne.n	800a23e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f003 0320 	and.w	r3, r3, #32
 800a264:	2b00      	cmp	r3, #0
 800a266:	d036      	beq.n	800a2d6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	699b      	ldr	r3, [r3, #24]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d019      	beq.n	800a2a4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a270:	4b37      	ldr	r3, [pc, #220]	@ (800a350 <HAL_RCC_OscConfig+0x4a4>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4a36      	ldr	r2, [pc, #216]	@ (800a350 <HAL_RCC_OscConfig+0x4a4>)
 800a276:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a27a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a27c:	f7f9 fc22 	bl	8003ac4 <HAL_GetTick>
 800a280:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a282:	e008      	b.n	800a296 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a284:	f7f9 fc1e 	bl	8003ac4 <HAL_GetTick>
 800a288:	4602      	mov	r2, r0
 800a28a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a28c:	1ad3      	subs	r3, r2, r3
 800a28e:	2b02      	cmp	r3, #2
 800a290:	d901      	bls.n	800a296 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800a292:	2303      	movs	r3, #3
 800a294:	e1dc      	b.n	800a650 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a296:	4b2e      	ldr	r3, [pc, #184]	@ (800a350 <HAL_RCC_OscConfig+0x4a4>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d0f0      	beq.n	800a284 <HAL_RCC_OscConfig+0x3d8>
 800a2a2:	e018      	b.n	800a2d6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a2a4:	4b2a      	ldr	r3, [pc, #168]	@ (800a350 <HAL_RCC_OscConfig+0x4a4>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4a29      	ldr	r2, [pc, #164]	@ (800a350 <HAL_RCC_OscConfig+0x4a4>)
 800a2aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a2ae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a2b0:	f7f9 fc08 	bl	8003ac4 <HAL_GetTick>
 800a2b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a2b6:	e008      	b.n	800a2ca <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a2b8:	f7f9 fc04 	bl	8003ac4 <HAL_GetTick>
 800a2bc:	4602      	mov	r2, r0
 800a2be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2c0:	1ad3      	subs	r3, r2, r3
 800a2c2:	2b02      	cmp	r3, #2
 800a2c4:	d901      	bls.n	800a2ca <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800a2c6:	2303      	movs	r3, #3
 800a2c8:	e1c2      	b.n	800a650 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a2ca:	4b21      	ldr	r3, [pc, #132]	@ (800a350 <HAL_RCC_OscConfig+0x4a4>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d1f0      	bne.n	800a2b8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f003 0304 	and.w	r3, r3, #4
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	f000 8086 	beq.w	800a3f0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a2e4:	4b1b      	ldr	r3, [pc, #108]	@ (800a354 <HAL_RCC_OscConfig+0x4a8>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	4a1a      	ldr	r2, [pc, #104]	@ (800a354 <HAL_RCC_OscConfig+0x4a8>)
 800a2ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a2ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a2f0:	f7f9 fbe8 	bl	8003ac4 <HAL_GetTick>
 800a2f4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a2f6:	e008      	b.n	800a30a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a2f8:	f7f9 fbe4 	bl	8003ac4 <HAL_GetTick>
 800a2fc:	4602      	mov	r2, r0
 800a2fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a300:	1ad3      	subs	r3, r2, r3
 800a302:	2b64      	cmp	r3, #100	@ 0x64
 800a304:	d901      	bls.n	800a30a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800a306:	2303      	movs	r3, #3
 800a308:	e1a2      	b.n	800a650 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a30a:	4b12      	ldr	r3, [pc, #72]	@ (800a354 <HAL_RCC_OscConfig+0x4a8>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a312:	2b00      	cmp	r3, #0
 800a314:	d0f0      	beq.n	800a2f8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	689b      	ldr	r3, [r3, #8]
 800a31a:	2b01      	cmp	r3, #1
 800a31c:	d106      	bne.n	800a32c <HAL_RCC_OscConfig+0x480>
 800a31e:	4b0c      	ldr	r3, [pc, #48]	@ (800a350 <HAL_RCC_OscConfig+0x4a4>)
 800a320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a322:	4a0b      	ldr	r2, [pc, #44]	@ (800a350 <HAL_RCC_OscConfig+0x4a4>)
 800a324:	f043 0301 	orr.w	r3, r3, #1
 800a328:	6713      	str	r3, [r2, #112]	@ 0x70
 800a32a:	e032      	b.n	800a392 <HAL_RCC_OscConfig+0x4e6>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	689b      	ldr	r3, [r3, #8]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d111      	bne.n	800a358 <HAL_RCC_OscConfig+0x4ac>
 800a334:	4b06      	ldr	r3, [pc, #24]	@ (800a350 <HAL_RCC_OscConfig+0x4a4>)
 800a336:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a338:	4a05      	ldr	r2, [pc, #20]	@ (800a350 <HAL_RCC_OscConfig+0x4a4>)
 800a33a:	f023 0301 	bic.w	r3, r3, #1
 800a33e:	6713      	str	r3, [r2, #112]	@ 0x70
 800a340:	4b03      	ldr	r3, [pc, #12]	@ (800a350 <HAL_RCC_OscConfig+0x4a4>)
 800a342:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a344:	4a02      	ldr	r2, [pc, #8]	@ (800a350 <HAL_RCC_OscConfig+0x4a4>)
 800a346:	f023 0304 	bic.w	r3, r3, #4
 800a34a:	6713      	str	r3, [r2, #112]	@ 0x70
 800a34c:	e021      	b.n	800a392 <HAL_RCC_OscConfig+0x4e6>
 800a34e:	bf00      	nop
 800a350:	58024400 	.word	0x58024400
 800a354:	58024800 	.word	0x58024800
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	689b      	ldr	r3, [r3, #8]
 800a35c:	2b05      	cmp	r3, #5
 800a35e:	d10c      	bne.n	800a37a <HAL_RCC_OscConfig+0x4ce>
 800a360:	4b83      	ldr	r3, [pc, #524]	@ (800a570 <HAL_RCC_OscConfig+0x6c4>)
 800a362:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a364:	4a82      	ldr	r2, [pc, #520]	@ (800a570 <HAL_RCC_OscConfig+0x6c4>)
 800a366:	f043 0304 	orr.w	r3, r3, #4
 800a36a:	6713      	str	r3, [r2, #112]	@ 0x70
 800a36c:	4b80      	ldr	r3, [pc, #512]	@ (800a570 <HAL_RCC_OscConfig+0x6c4>)
 800a36e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a370:	4a7f      	ldr	r2, [pc, #508]	@ (800a570 <HAL_RCC_OscConfig+0x6c4>)
 800a372:	f043 0301 	orr.w	r3, r3, #1
 800a376:	6713      	str	r3, [r2, #112]	@ 0x70
 800a378:	e00b      	b.n	800a392 <HAL_RCC_OscConfig+0x4e6>
 800a37a:	4b7d      	ldr	r3, [pc, #500]	@ (800a570 <HAL_RCC_OscConfig+0x6c4>)
 800a37c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a37e:	4a7c      	ldr	r2, [pc, #496]	@ (800a570 <HAL_RCC_OscConfig+0x6c4>)
 800a380:	f023 0301 	bic.w	r3, r3, #1
 800a384:	6713      	str	r3, [r2, #112]	@ 0x70
 800a386:	4b7a      	ldr	r3, [pc, #488]	@ (800a570 <HAL_RCC_OscConfig+0x6c4>)
 800a388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a38a:	4a79      	ldr	r2, [pc, #484]	@ (800a570 <HAL_RCC_OscConfig+0x6c4>)
 800a38c:	f023 0304 	bic.w	r3, r3, #4
 800a390:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	689b      	ldr	r3, [r3, #8]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d015      	beq.n	800a3c6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a39a:	f7f9 fb93 	bl	8003ac4 <HAL_GetTick>
 800a39e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a3a0:	e00a      	b.n	800a3b8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a3a2:	f7f9 fb8f 	bl	8003ac4 <HAL_GetTick>
 800a3a6:	4602      	mov	r2, r0
 800a3a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3aa:	1ad3      	subs	r3, r2, r3
 800a3ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d901      	bls.n	800a3b8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800a3b4:	2303      	movs	r3, #3
 800a3b6:	e14b      	b.n	800a650 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a3b8:	4b6d      	ldr	r3, [pc, #436]	@ (800a570 <HAL_RCC_OscConfig+0x6c4>)
 800a3ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3bc:	f003 0302 	and.w	r3, r3, #2
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d0ee      	beq.n	800a3a2 <HAL_RCC_OscConfig+0x4f6>
 800a3c4:	e014      	b.n	800a3f0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3c6:	f7f9 fb7d 	bl	8003ac4 <HAL_GetTick>
 800a3ca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a3cc:	e00a      	b.n	800a3e4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a3ce:	f7f9 fb79 	bl	8003ac4 <HAL_GetTick>
 800a3d2:	4602      	mov	r2, r0
 800a3d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3d6:	1ad3      	subs	r3, r2, r3
 800a3d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d901      	bls.n	800a3e4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800a3e0:	2303      	movs	r3, #3
 800a3e2:	e135      	b.n	800a650 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a3e4:	4b62      	ldr	r3, [pc, #392]	@ (800a570 <HAL_RCC_OscConfig+0x6c4>)
 800a3e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3e8:	f003 0302 	and.w	r3, r3, #2
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d1ee      	bne.n	800a3ce <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	f000 812a 	beq.w	800a64e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a3fa:	4b5d      	ldr	r3, [pc, #372]	@ (800a570 <HAL_RCC_OscConfig+0x6c4>)
 800a3fc:	691b      	ldr	r3, [r3, #16]
 800a3fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a402:	2b18      	cmp	r3, #24
 800a404:	f000 80ba 	beq.w	800a57c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a40c:	2b02      	cmp	r3, #2
 800a40e:	f040 8095 	bne.w	800a53c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a412:	4b57      	ldr	r3, [pc, #348]	@ (800a570 <HAL_RCC_OscConfig+0x6c4>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	4a56      	ldr	r2, [pc, #344]	@ (800a570 <HAL_RCC_OscConfig+0x6c4>)
 800a418:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a41c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a41e:	f7f9 fb51 	bl	8003ac4 <HAL_GetTick>
 800a422:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a424:	e008      	b.n	800a438 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a426:	f7f9 fb4d 	bl	8003ac4 <HAL_GetTick>
 800a42a:	4602      	mov	r2, r0
 800a42c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a42e:	1ad3      	subs	r3, r2, r3
 800a430:	2b02      	cmp	r3, #2
 800a432:	d901      	bls.n	800a438 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800a434:	2303      	movs	r3, #3
 800a436:	e10b      	b.n	800a650 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a438:	4b4d      	ldr	r3, [pc, #308]	@ (800a570 <HAL_RCC_OscConfig+0x6c4>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a440:	2b00      	cmp	r3, #0
 800a442:	d1f0      	bne.n	800a426 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a444:	4b4a      	ldr	r3, [pc, #296]	@ (800a570 <HAL_RCC_OscConfig+0x6c4>)
 800a446:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a448:	4b4a      	ldr	r3, [pc, #296]	@ (800a574 <HAL_RCC_OscConfig+0x6c8>)
 800a44a:	4013      	ands	r3, r2
 800a44c:	687a      	ldr	r2, [r7, #4]
 800a44e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800a450:	687a      	ldr	r2, [r7, #4]
 800a452:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800a454:	0112      	lsls	r2, r2, #4
 800a456:	430a      	orrs	r2, r1
 800a458:	4945      	ldr	r1, [pc, #276]	@ (800a570 <HAL_RCC_OscConfig+0x6c4>)
 800a45a:	4313      	orrs	r3, r2
 800a45c:	628b      	str	r3, [r1, #40]	@ 0x28
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a462:	3b01      	subs	r3, #1
 800a464:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a46c:	3b01      	subs	r3, #1
 800a46e:	025b      	lsls	r3, r3, #9
 800a470:	b29b      	uxth	r3, r3
 800a472:	431a      	orrs	r2, r3
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a478:	3b01      	subs	r3, #1
 800a47a:	041b      	lsls	r3, r3, #16
 800a47c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a480:	431a      	orrs	r2, r3
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a486:	3b01      	subs	r3, #1
 800a488:	061b      	lsls	r3, r3, #24
 800a48a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a48e:	4938      	ldr	r1, [pc, #224]	@ (800a570 <HAL_RCC_OscConfig+0x6c4>)
 800a490:	4313      	orrs	r3, r2
 800a492:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a494:	4b36      	ldr	r3, [pc, #216]	@ (800a570 <HAL_RCC_OscConfig+0x6c4>)
 800a496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a498:	4a35      	ldr	r2, [pc, #212]	@ (800a570 <HAL_RCC_OscConfig+0x6c4>)
 800a49a:	f023 0301 	bic.w	r3, r3, #1
 800a49e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a4a0:	4b33      	ldr	r3, [pc, #204]	@ (800a570 <HAL_RCC_OscConfig+0x6c4>)
 800a4a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a4a4:	4b34      	ldr	r3, [pc, #208]	@ (800a578 <HAL_RCC_OscConfig+0x6cc>)
 800a4a6:	4013      	ands	r3, r2
 800a4a8:	687a      	ldr	r2, [r7, #4]
 800a4aa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a4ac:	00d2      	lsls	r2, r2, #3
 800a4ae:	4930      	ldr	r1, [pc, #192]	@ (800a570 <HAL_RCC_OscConfig+0x6c4>)
 800a4b0:	4313      	orrs	r3, r2
 800a4b2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a4b4:	4b2e      	ldr	r3, [pc, #184]	@ (800a570 <HAL_RCC_OscConfig+0x6c4>)
 800a4b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4b8:	f023 020c 	bic.w	r2, r3, #12
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4c0:	492b      	ldr	r1, [pc, #172]	@ (800a570 <HAL_RCC_OscConfig+0x6c4>)
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a4c6:	4b2a      	ldr	r3, [pc, #168]	@ (800a570 <HAL_RCC_OscConfig+0x6c4>)
 800a4c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4ca:	f023 0202 	bic.w	r2, r3, #2
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4d2:	4927      	ldr	r1, [pc, #156]	@ (800a570 <HAL_RCC_OscConfig+0x6c4>)
 800a4d4:	4313      	orrs	r3, r2
 800a4d6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a4d8:	4b25      	ldr	r3, [pc, #148]	@ (800a570 <HAL_RCC_OscConfig+0x6c4>)
 800a4da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4dc:	4a24      	ldr	r2, [pc, #144]	@ (800a570 <HAL_RCC_OscConfig+0x6c4>)
 800a4de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a4e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4e4:	4b22      	ldr	r3, [pc, #136]	@ (800a570 <HAL_RCC_OscConfig+0x6c4>)
 800a4e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4e8:	4a21      	ldr	r2, [pc, #132]	@ (800a570 <HAL_RCC_OscConfig+0x6c4>)
 800a4ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a4ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a4f0:	4b1f      	ldr	r3, [pc, #124]	@ (800a570 <HAL_RCC_OscConfig+0x6c4>)
 800a4f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4f4:	4a1e      	ldr	r2, [pc, #120]	@ (800a570 <HAL_RCC_OscConfig+0x6c4>)
 800a4f6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a4fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a4fc:	4b1c      	ldr	r3, [pc, #112]	@ (800a570 <HAL_RCC_OscConfig+0x6c4>)
 800a4fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a500:	4a1b      	ldr	r2, [pc, #108]	@ (800a570 <HAL_RCC_OscConfig+0x6c4>)
 800a502:	f043 0301 	orr.w	r3, r3, #1
 800a506:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a508:	4b19      	ldr	r3, [pc, #100]	@ (800a570 <HAL_RCC_OscConfig+0x6c4>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	4a18      	ldr	r2, [pc, #96]	@ (800a570 <HAL_RCC_OscConfig+0x6c4>)
 800a50e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a512:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a514:	f7f9 fad6 	bl	8003ac4 <HAL_GetTick>
 800a518:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a51a:	e008      	b.n	800a52e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a51c:	f7f9 fad2 	bl	8003ac4 <HAL_GetTick>
 800a520:	4602      	mov	r2, r0
 800a522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a524:	1ad3      	subs	r3, r2, r3
 800a526:	2b02      	cmp	r3, #2
 800a528:	d901      	bls.n	800a52e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800a52a:	2303      	movs	r3, #3
 800a52c:	e090      	b.n	800a650 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a52e:	4b10      	ldr	r3, [pc, #64]	@ (800a570 <HAL_RCC_OscConfig+0x6c4>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a536:	2b00      	cmp	r3, #0
 800a538:	d0f0      	beq.n	800a51c <HAL_RCC_OscConfig+0x670>
 800a53a:	e088      	b.n	800a64e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a53c:	4b0c      	ldr	r3, [pc, #48]	@ (800a570 <HAL_RCC_OscConfig+0x6c4>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	4a0b      	ldr	r2, [pc, #44]	@ (800a570 <HAL_RCC_OscConfig+0x6c4>)
 800a542:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a546:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a548:	f7f9 fabc 	bl	8003ac4 <HAL_GetTick>
 800a54c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a54e:	e008      	b.n	800a562 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a550:	f7f9 fab8 	bl	8003ac4 <HAL_GetTick>
 800a554:	4602      	mov	r2, r0
 800a556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a558:	1ad3      	subs	r3, r2, r3
 800a55a:	2b02      	cmp	r3, #2
 800a55c:	d901      	bls.n	800a562 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800a55e:	2303      	movs	r3, #3
 800a560:	e076      	b.n	800a650 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a562:	4b03      	ldr	r3, [pc, #12]	@ (800a570 <HAL_RCC_OscConfig+0x6c4>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d1f0      	bne.n	800a550 <HAL_RCC_OscConfig+0x6a4>
 800a56e:	e06e      	b.n	800a64e <HAL_RCC_OscConfig+0x7a2>
 800a570:	58024400 	.word	0x58024400
 800a574:	fffffc0c 	.word	0xfffffc0c
 800a578:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a57c:	4b36      	ldr	r3, [pc, #216]	@ (800a658 <HAL_RCC_OscConfig+0x7ac>)
 800a57e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a580:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a582:	4b35      	ldr	r3, [pc, #212]	@ (800a658 <HAL_RCC_OscConfig+0x7ac>)
 800a584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a586:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a58c:	2b01      	cmp	r3, #1
 800a58e:	d031      	beq.n	800a5f4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a590:	693b      	ldr	r3, [r7, #16]
 800a592:	f003 0203 	and.w	r2, r3, #3
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a59a:	429a      	cmp	r2, r3
 800a59c:	d12a      	bne.n	800a5f4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	091b      	lsrs	r3, r3, #4
 800a5a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	d122      	bne.n	800a5f4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5b8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a5ba:	429a      	cmp	r2, r3
 800a5bc:	d11a      	bne.n	800a5f4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	0a5b      	lsrs	r3, r3, #9
 800a5c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5ca:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	d111      	bne.n	800a5f4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	0c1b      	lsrs	r3, r3, #16
 800a5d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5dc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d108      	bne.n	800a5f4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	0e1b      	lsrs	r3, r3, #24
 800a5e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5ee:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d001      	beq.n	800a5f8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	e02b      	b.n	800a650 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a5f8:	4b17      	ldr	r3, [pc, #92]	@ (800a658 <HAL_RCC_OscConfig+0x7ac>)
 800a5fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5fc:	08db      	lsrs	r3, r3, #3
 800a5fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a602:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a608:	693a      	ldr	r2, [r7, #16]
 800a60a:	429a      	cmp	r2, r3
 800a60c:	d01f      	beq.n	800a64e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a60e:	4b12      	ldr	r3, [pc, #72]	@ (800a658 <HAL_RCC_OscConfig+0x7ac>)
 800a610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a612:	4a11      	ldr	r2, [pc, #68]	@ (800a658 <HAL_RCC_OscConfig+0x7ac>)
 800a614:	f023 0301 	bic.w	r3, r3, #1
 800a618:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a61a:	f7f9 fa53 	bl	8003ac4 <HAL_GetTick>
 800a61e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a620:	bf00      	nop
 800a622:	f7f9 fa4f 	bl	8003ac4 <HAL_GetTick>
 800a626:	4602      	mov	r2, r0
 800a628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d0f9      	beq.n	800a622 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a62e:	4b0a      	ldr	r3, [pc, #40]	@ (800a658 <HAL_RCC_OscConfig+0x7ac>)
 800a630:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a632:	4b0a      	ldr	r3, [pc, #40]	@ (800a65c <HAL_RCC_OscConfig+0x7b0>)
 800a634:	4013      	ands	r3, r2
 800a636:	687a      	ldr	r2, [r7, #4]
 800a638:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a63a:	00d2      	lsls	r2, r2, #3
 800a63c:	4906      	ldr	r1, [pc, #24]	@ (800a658 <HAL_RCC_OscConfig+0x7ac>)
 800a63e:	4313      	orrs	r3, r2
 800a640:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a642:	4b05      	ldr	r3, [pc, #20]	@ (800a658 <HAL_RCC_OscConfig+0x7ac>)
 800a644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a646:	4a04      	ldr	r2, [pc, #16]	@ (800a658 <HAL_RCC_OscConfig+0x7ac>)
 800a648:	f043 0301 	orr.w	r3, r3, #1
 800a64c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a64e:	2300      	movs	r3, #0
}
 800a650:	4618      	mov	r0, r3
 800a652:	3730      	adds	r7, #48	@ 0x30
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}
 800a658:	58024400 	.word	0x58024400
 800a65c:	ffff0007 	.word	0xffff0007

0800a660 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b086      	sub	sp, #24
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
 800a668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d101      	bne.n	800a674 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a670:	2301      	movs	r3, #1
 800a672:	e19c      	b.n	800a9ae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a674:	4b8a      	ldr	r3, [pc, #552]	@ (800a8a0 <HAL_RCC_ClockConfig+0x240>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f003 030f 	and.w	r3, r3, #15
 800a67c:	683a      	ldr	r2, [r7, #0]
 800a67e:	429a      	cmp	r2, r3
 800a680:	d910      	bls.n	800a6a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a682:	4b87      	ldr	r3, [pc, #540]	@ (800a8a0 <HAL_RCC_ClockConfig+0x240>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f023 020f 	bic.w	r2, r3, #15
 800a68a:	4985      	ldr	r1, [pc, #532]	@ (800a8a0 <HAL_RCC_ClockConfig+0x240>)
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	4313      	orrs	r3, r2
 800a690:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a692:	4b83      	ldr	r3, [pc, #524]	@ (800a8a0 <HAL_RCC_ClockConfig+0x240>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f003 030f 	and.w	r3, r3, #15
 800a69a:	683a      	ldr	r2, [r7, #0]
 800a69c:	429a      	cmp	r2, r3
 800a69e:	d001      	beq.n	800a6a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	e184      	b.n	800a9ae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f003 0304 	and.w	r3, r3, #4
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d010      	beq.n	800a6d2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	691a      	ldr	r2, [r3, #16]
 800a6b4:	4b7b      	ldr	r3, [pc, #492]	@ (800a8a4 <HAL_RCC_ClockConfig+0x244>)
 800a6b6:	699b      	ldr	r3, [r3, #24]
 800a6b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	d908      	bls.n	800a6d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a6c0:	4b78      	ldr	r3, [pc, #480]	@ (800a8a4 <HAL_RCC_ClockConfig+0x244>)
 800a6c2:	699b      	ldr	r3, [r3, #24]
 800a6c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	691b      	ldr	r3, [r3, #16]
 800a6cc:	4975      	ldr	r1, [pc, #468]	@ (800a8a4 <HAL_RCC_ClockConfig+0x244>)
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f003 0308 	and.w	r3, r3, #8
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d010      	beq.n	800a700 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	695a      	ldr	r2, [r3, #20]
 800a6e2:	4b70      	ldr	r3, [pc, #448]	@ (800a8a4 <HAL_RCC_ClockConfig+0x244>)
 800a6e4:	69db      	ldr	r3, [r3, #28]
 800a6e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a6ea:	429a      	cmp	r2, r3
 800a6ec:	d908      	bls.n	800a700 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a6ee:	4b6d      	ldr	r3, [pc, #436]	@ (800a8a4 <HAL_RCC_ClockConfig+0x244>)
 800a6f0:	69db      	ldr	r3, [r3, #28]
 800a6f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	695b      	ldr	r3, [r3, #20]
 800a6fa:	496a      	ldr	r1, [pc, #424]	@ (800a8a4 <HAL_RCC_ClockConfig+0x244>)
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f003 0310 	and.w	r3, r3, #16
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d010      	beq.n	800a72e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	699a      	ldr	r2, [r3, #24]
 800a710:	4b64      	ldr	r3, [pc, #400]	@ (800a8a4 <HAL_RCC_ClockConfig+0x244>)
 800a712:	69db      	ldr	r3, [r3, #28]
 800a714:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a718:	429a      	cmp	r2, r3
 800a71a:	d908      	bls.n	800a72e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a71c:	4b61      	ldr	r3, [pc, #388]	@ (800a8a4 <HAL_RCC_ClockConfig+0x244>)
 800a71e:	69db      	ldr	r3, [r3, #28]
 800a720:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	699b      	ldr	r3, [r3, #24]
 800a728:	495e      	ldr	r1, [pc, #376]	@ (800a8a4 <HAL_RCC_ClockConfig+0x244>)
 800a72a:	4313      	orrs	r3, r2
 800a72c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f003 0320 	and.w	r3, r3, #32
 800a736:	2b00      	cmp	r3, #0
 800a738:	d010      	beq.n	800a75c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	69da      	ldr	r2, [r3, #28]
 800a73e:	4b59      	ldr	r3, [pc, #356]	@ (800a8a4 <HAL_RCC_ClockConfig+0x244>)
 800a740:	6a1b      	ldr	r3, [r3, #32]
 800a742:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a746:	429a      	cmp	r2, r3
 800a748:	d908      	bls.n	800a75c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a74a:	4b56      	ldr	r3, [pc, #344]	@ (800a8a4 <HAL_RCC_ClockConfig+0x244>)
 800a74c:	6a1b      	ldr	r3, [r3, #32]
 800a74e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	69db      	ldr	r3, [r3, #28]
 800a756:	4953      	ldr	r1, [pc, #332]	@ (800a8a4 <HAL_RCC_ClockConfig+0x244>)
 800a758:	4313      	orrs	r3, r2
 800a75a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f003 0302 	and.w	r3, r3, #2
 800a764:	2b00      	cmp	r3, #0
 800a766:	d010      	beq.n	800a78a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	68da      	ldr	r2, [r3, #12]
 800a76c:	4b4d      	ldr	r3, [pc, #308]	@ (800a8a4 <HAL_RCC_ClockConfig+0x244>)
 800a76e:	699b      	ldr	r3, [r3, #24]
 800a770:	f003 030f 	and.w	r3, r3, #15
 800a774:	429a      	cmp	r2, r3
 800a776:	d908      	bls.n	800a78a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a778:	4b4a      	ldr	r3, [pc, #296]	@ (800a8a4 <HAL_RCC_ClockConfig+0x244>)
 800a77a:	699b      	ldr	r3, [r3, #24]
 800a77c:	f023 020f 	bic.w	r2, r3, #15
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	68db      	ldr	r3, [r3, #12]
 800a784:	4947      	ldr	r1, [pc, #284]	@ (800a8a4 <HAL_RCC_ClockConfig+0x244>)
 800a786:	4313      	orrs	r3, r2
 800a788:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f003 0301 	and.w	r3, r3, #1
 800a792:	2b00      	cmp	r3, #0
 800a794:	d055      	beq.n	800a842 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a796:	4b43      	ldr	r3, [pc, #268]	@ (800a8a4 <HAL_RCC_ClockConfig+0x244>)
 800a798:	699b      	ldr	r3, [r3, #24]
 800a79a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	689b      	ldr	r3, [r3, #8]
 800a7a2:	4940      	ldr	r1, [pc, #256]	@ (800a8a4 <HAL_RCC_ClockConfig+0x244>)
 800a7a4:	4313      	orrs	r3, r2
 800a7a6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	685b      	ldr	r3, [r3, #4]
 800a7ac:	2b02      	cmp	r3, #2
 800a7ae:	d107      	bne.n	800a7c0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a7b0:	4b3c      	ldr	r3, [pc, #240]	@ (800a8a4 <HAL_RCC_ClockConfig+0x244>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d121      	bne.n	800a800 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a7bc:	2301      	movs	r3, #1
 800a7be:	e0f6      	b.n	800a9ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	2b03      	cmp	r3, #3
 800a7c6:	d107      	bne.n	800a7d8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a7c8:	4b36      	ldr	r3, [pc, #216]	@ (800a8a4 <HAL_RCC_ClockConfig+0x244>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d115      	bne.n	800a800 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	e0ea      	b.n	800a9ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	685b      	ldr	r3, [r3, #4]
 800a7dc:	2b01      	cmp	r3, #1
 800a7de:	d107      	bne.n	800a7f0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a7e0:	4b30      	ldr	r3, [pc, #192]	@ (800a8a4 <HAL_RCC_ClockConfig+0x244>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d109      	bne.n	800a800 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	e0de      	b.n	800a9ae <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a7f0:	4b2c      	ldr	r3, [pc, #176]	@ (800a8a4 <HAL_RCC_ClockConfig+0x244>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f003 0304 	and.w	r3, r3, #4
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d101      	bne.n	800a800 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	e0d6      	b.n	800a9ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a800:	4b28      	ldr	r3, [pc, #160]	@ (800a8a4 <HAL_RCC_ClockConfig+0x244>)
 800a802:	691b      	ldr	r3, [r3, #16]
 800a804:	f023 0207 	bic.w	r2, r3, #7
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	685b      	ldr	r3, [r3, #4]
 800a80c:	4925      	ldr	r1, [pc, #148]	@ (800a8a4 <HAL_RCC_ClockConfig+0x244>)
 800a80e:	4313      	orrs	r3, r2
 800a810:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a812:	f7f9 f957 	bl	8003ac4 <HAL_GetTick>
 800a816:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a818:	e00a      	b.n	800a830 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a81a:	f7f9 f953 	bl	8003ac4 <HAL_GetTick>
 800a81e:	4602      	mov	r2, r0
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	1ad3      	subs	r3, r2, r3
 800a824:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a828:	4293      	cmp	r3, r2
 800a82a:	d901      	bls.n	800a830 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a82c:	2303      	movs	r3, #3
 800a82e:	e0be      	b.n	800a9ae <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a830:	4b1c      	ldr	r3, [pc, #112]	@ (800a8a4 <HAL_RCC_ClockConfig+0x244>)
 800a832:	691b      	ldr	r3, [r3, #16]
 800a834:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	685b      	ldr	r3, [r3, #4]
 800a83c:	00db      	lsls	r3, r3, #3
 800a83e:	429a      	cmp	r2, r3
 800a840:	d1eb      	bne.n	800a81a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f003 0302 	and.w	r3, r3, #2
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d010      	beq.n	800a870 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	68da      	ldr	r2, [r3, #12]
 800a852:	4b14      	ldr	r3, [pc, #80]	@ (800a8a4 <HAL_RCC_ClockConfig+0x244>)
 800a854:	699b      	ldr	r3, [r3, #24]
 800a856:	f003 030f 	and.w	r3, r3, #15
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d208      	bcs.n	800a870 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a85e:	4b11      	ldr	r3, [pc, #68]	@ (800a8a4 <HAL_RCC_ClockConfig+0x244>)
 800a860:	699b      	ldr	r3, [r3, #24]
 800a862:	f023 020f 	bic.w	r2, r3, #15
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	68db      	ldr	r3, [r3, #12]
 800a86a:	490e      	ldr	r1, [pc, #56]	@ (800a8a4 <HAL_RCC_ClockConfig+0x244>)
 800a86c:	4313      	orrs	r3, r2
 800a86e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a870:	4b0b      	ldr	r3, [pc, #44]	@ (800a8a0 <HAL_RCC_ClockConfig+0x240>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f003 030f 	and.w	r3, r3, #15
 800a878:	683a      	ldr	r2, [r7, #0]
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d214      	bcs.n	800a8a8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a87e:	4b08      	ldr	r3, [pc, #32]	@ (800a8a0 <HAL_RCC_ClockConfig+0x240>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f023 020f 	bic.w	r2, r3, #15
 800a886:	4906      	ldr	r1, [pc, #24]	@ (800a8a0 <HAL_RCC_ClockConfig+0x240>)
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	4313      	orrs	r3, r2
 800a88c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a88e:	4b04      	ldr	r3, [pc, #16]	@ (800a8a0 <HAL_RCC_ClockConfig+0x240>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f003 030f 	and.w	r3, r3, #15
 800a896:	683a      	ldr	r2, [r7, #0]
 800a898:	429a      	cmp	r2, r3
 800a89a:	d005      	beq.n	800a8a8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a89c:	2301      	movs	r3, #1
 800a89e:	e086      	b.n	800a9ae <HAL_RCC_ClockConfig+0x34e>
 800a8a0:	52002000 	.word	0x52002000
 800a8a4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f003 0304 	and.w	r3, r3, #4
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d010      	beq.n	800a8d6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	691a      	ldr	r2, [r3, #16]
 800a8b8:	4b3f      	ldr	r3, [pc, #252]	@ (800a9b8 <HAL_RCC_ClockConfig+0x358>)
 800a8ba:	699b      	ldr	r3, [r3, #24]
 800a8bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a8c0:	429a      	cmp	r2, r3
 800a8c2:	d208      	bcs.n	800a8d6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a8c4:	4b3c      	ldr	r3, [pc, #240]	@ (800a9b8 <HAL_RCC_ClockConfig+0x358>)
 800a8c6:	699b      	ldr	r3, [r3, #24]
 800a8c8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	691b      	ldr	r3, [r3, #16]
 800a8d0:	4939      	ldr	r1, [pc, #228]	@ (800a9b8 <HAL_RCC_ClockConfig+0x358>)
 800a8d2:	4313      	orrs	r3, r2
 800a8d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f003 0308 	and.w	r3, r3, #8
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d010      	beq.n	800a904 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	695a      	ldr	r2, [r3, #20]
 800a8e6:	4b34      	ldr	r3, [pc, #208]	@ (800a9b8 <HAL_RCC_ClockConfig+0x358>)
 800a8e8:	69db      	ldr	r3, [r3, #28]
 800a8ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a8ee:	429a      	cmp	r2, r3
 800a8f0:	d208      	bcs.n	800a904 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a8f2:	4b31      	ldr	r3, [pc, #196]	@ (800a9b8 <HAL_RCC_ClockConfig+0x358>)
 800a8f4:	69db      	ldr	r3, [r3, #28]
 800a8f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	695b      	ldr	r3, [r3, #20]
 800a8fe:	492e      	ldr	r1, [pc, #184]	@ (800a9b8 <HAL_RCC_ClockConfig+0x358>)
 800a900:	4313      	orrs	r3, r2
 800a902:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f003 0310 	and.w	r3, r3, #16
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d010      	beq.n	800a932 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	699a      	ldr	r2, [r3, #24]
 800a914:	4b28      	ldr	r3, [pc, #160]	@ (800a9b8 <HAL_RCC_ClockConfig+0x358>)
 800a916:	69db      	ldr	r3, [r3, #28]
 800a918:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a91c:	429a      	cmp	r2, r3
 800a91e:	d208      	bcs.n	800a932 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a920:	4b25      	ldr	r3, [pc, #148]	@ (800a9b8 <HAL_RCC_ClockConfig+0x358>)
 800a922:	69db      	ldr	r3, [r3, #28]
 800a924:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	699b      	ldr	r3, [r3, #24]
 800a92c:	4922      	ldr	r1, [pc, #136]	@ (800a9b8 <HAL_RCC_ClockConfig+0x358>)
 800a92e:	4313      	orrs	r3, r2
 800a930:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f003 0320 	and.w	r3, r3, #32
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d010      	beq.n	800a960 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	69da      	ldr	r2, [r3, #28]
 800a942:	4b1d      	ldr	r3, [pc, #116]	@ (800a9b8 <HAL_RCC_ClockConfig+0x358>)
 800a944:	6a1b      	ldr	r3, [r3, #32]
 800a946:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a94a:	429a      	cmp	r2, r3
 800a94c:	d208      	bcs.n	800a960 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a94e:	4b1a      	ldr	r3, [pc, #104]	@ (800a9b8 <HAL_RCC_ClockConfig+0x358>)
 800a950:	6a1b      	ldr	r3, [r3, #32]
 800a952:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	69db      	ldr	r3, [r3, #28]
 800a95a:	4917      	ldr	r1, [pc, #92]	@ (800a9b8 <HAL_RCC_ClockConfig+0x358>)
 800a95c:	4313      	orrs	r3, r2
 800a95e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a960:	f000 f834 	bl	800a9cc <HAL_RCC_GetSysClockFreq>
 800a964:	4602      	mov	r2, r0
 800a966:	4b14      	ldr	r3, [pc, #80]	@ (800a9b8 <HAL_RCC_ClockConfig+0x358>)
 800a968:	699b      	ldr	r3, [r3, #24]
 800a96a:	0a1b      	lsrs	r3, r3, #8
 800a96c:	f003 030f 	and.w	r3, r3, #15
 800a970:	4912      	ldr	r1, [pc, #72]	@ (800a9bc <HAL_RCC_ClockConfig+0x35c>)
 800a972:	5ccb      	ldrb	r3, [r1, r3]
 800a974:	f003 031f 	and.w	r3, r3, #31
 800a978:	fa22 f303 	lsr.w	r3, r2, r3
 800a97c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a97e:	4b0e      	ldr	r3, [pc, #56]	@ (800a9b8 <HAL_RCC_ClockConfig+0x358>)
 800a980:	699b      	ldr	r3, [r3, #24]
 800a982:	f003 030f 	and.w	r3, r3, #15
 800a986:	4a0d      	ldr	r2, [pc, #52]	@ (800a9bc <HAL_RCC_ClockConfig+0x35c>)
 800a988:	5cd3      	ldrb	r3, [r2, r3]
 800a98a:	f003 031f 	and.w	r3, r3, #31
 800a98e:	693a      	ldr	r2, [r7, #16]
 800a990:	fa22 f303 	lsr.w	r3, r2, r3
 800a994:	4a0a      	ldr	r2, [pc, #40]	@ (800a9c0 <HAL_RCC_ClockConfig+0x360>)
 800a996:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a998:	4a0a      	ldr	r2, [pc, #40]	@ (800a9c4 <HAL_RCC_ClockConfig+0x364>)
 800a99a:	693b      	ldr	r3, [r7, #16]
 800a99c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a99e:	4b0a      	ldr	r3, [pc, #40]	@ (800a9c8 <HAL_RCC_ClockConfig+0x368>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f7f9 f844 	bl	8003a30 <HAL_InitTick>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a9ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3718      	adds	r7, #24
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
 800a9b6:	bf00      	nop
 800a9b8:	58024400 	.word	0x58024400
 800a9bc:	08014948 	.word	0x08014948
 800a9c0:	24000028 	.word	0x24000028
 800a9c4:	24000024 	.word	0x24000024
 800a9c8:	2400002c 	.word	0x2400002c

0800a9cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b089      	sub	sp, #36	@ 0x24
 800a9d0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a9d2:	4bb3      	ldr	r3, [pc, #716]	@ (800aca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9d4:	691b      	ldr	r3, [r3, #16]
 800a9d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a9da:	2b18      	cmp	r3, #24
 800a9dc:	f200 8155 	bhi.w	800ac8a <HAL_RCC_GetSysClockFreq+0x2be>
 800a9e0:	a201      	add	r2, pc, #4	@ (adr r2, 800a9e8 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a9e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9e6:	bf00      	nop
 800a9e8:	0800aa4d 	.word	0x0800aa4d
 800a9ec:	0800ac8b 	.word	0x0800ac8b
 800a9f0:	0800ac8b 	.word	0x0800ac8b
 800a9f4:	0800ac8b 	.word	0x0800ac8b
 800a9f8:	0800ac8b 	.word	0x0800ac8b
 800a9fc:	0800ac8b 	.word	0x0800ac8b
 800aa00:	0800ac8b 	.word	0x0800ac8b
 800aa04:	0800ac8b 	.word	0x0800ac8b
 800aa08:	0800aa73 	.word	0x0800aa73
 800aa0c:	0800ac8b 	.word	0x0800ac8b
 800aa10:	0800ac8b 	.word	0x0800ac8b
 800aa14:	0800ac8b 	.word	0x0800ac8b
 800aa18:	0800ac8b 	.word	0x0800ac8b
 800aa1c:	0800ac8b 	.word	0x0800ac8b
 800aa20:	0800ac8b 	.word	0x0800ac8b
 800aa24:	0800ac8b 	.word	0x0800ac8b
 800aa28:	0800aa79 	.word	0x0800aa79
 800aa2c:	0800ac8b 	.word	0x0800ac8b
 800aa30:	0800ac8b 	.word	0x0800ac8b
 800aa34:	0800ac8b 	.word	0x0800ac8b
 800aa38:	0800ac8b 	.word	0x0800ac8b
 800aa3c:	0800ac8b 	.word	0x0800ac8b
 800aa40:	0800ac8b 	.word	0x0800ac8b
 800aa44:	0800ac8b 	.word	0x0800ac8b
 800aa48:	0800aa7f 	.word	0x0800aa7f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa4c:	4b94      	ldr	r3, [pc, #592]	@ (800aca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	f003 0320 	and.w	r3, r3, #32
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d009      	beq.n	800aa6c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa58:	4b91      	ldr	r3, [pc, #580]	@ (800aca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	08db      	lsrs	r3, r3, #3
 800aa5e:	f003 0303 	and.w	r3, r3, #3
 800aa62:	4a90      	ldr	r2, [pc, #576]	@ (800aca4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aa64:	fa22 f303 	lsr.w	r3, r2, r3
 800aa68:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800aa6a:	e111      	b.n	800ac90 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800aa6c:	4b8d      	ldr	r3, [pc, #564]	@ (800aca4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aa6e:	61bb      	str	r3, [r7, #24]
      break;
 800aa70:	e10e      	b.n	800ac90 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800aa72:	4b8d      	ldr	r3, [pc, #564]	@ (800aca8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800aa74:	61bb      	str	r3, [r7, #24]
      break;
 800aa76:	e10b      	b.n	800ac90 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800aa78:	4b8c      	ldr	r3, [pc, #560]	@ (800acac <HAL_RCC_GetSysClockFreq+0x2e0>)
 800aa7a:	61bb      	str	r3, [r7, #24]
      break;
 800aa7c:	e108      	b.n	800ac90 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aa7e:	4b88      	ldr	r3, [pc, #544]	@ (800aca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa82:	f003 0303 	and.w	r3, r3, #3
 800aa86:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800aa88:	4b85      	ldr	r3, [pc, #532]	@ (800aca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa8c:	091b      	lsrs	r3, r3, #4
 800aa8e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aa92:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800aa94:	4b82      	ldr	r3, [pc, #520]	@ (800aca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa98:	f003 0301 	and.w	r3, r3, #1
 800aa9c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800aa9e:	4b80      	ldr	r3, [pc, #512]	@ (800aca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aaa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aaa2:	08db      	lsrs	r3, r3, #3
 800aaa4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aaa8:	68fa      	ldr	r2, [r7, #12]
 800aaaa:	fb02 f303 	mul.w	r3, r2, r3
 800aaae:	ee07 3a90 	vmov	s15, r3
 800aab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aab6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	f000 80e1 	beq.w	800ac84 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	2b02      	cmp	r3, #2
 800aac6:	f000 8083 	beq.w	800abd0 <HAL_RCC_GetSysClockFreq+0x204>
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	2b02      	cmp	r3, #2
 800aace:	f200 80a1 	bhi.w	800ac14 <HAL_RCC_GetSysClockFreq+0x248>
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d003      	beq.n	800aae0 <HAL_RCC_GetSysClockFreq+0x114>
 800aad8:	697b      	ldr	r3, [r7, #20]
 800aada:	2b01      	cmp	r3, #1
 800aadc:	d056      	beq.n	800ab8c <HAL_RCC_GetSysClockFreq+0x1c0>
 800aade:	e099      	b.n	800ac14 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aae0:	4b6f      	ldr	r3, [pc, #444]	@ (800aca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f003 0320 	and.w	r3, r3, #32
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d02d      	beq.n	800ab48 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aaec:	4b6c      	ldr	r3, [pc, #432]	@ (800aca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	08db      	lsrs	r3, r3, #3
 800aaf2:	f003 0303 	and.w	r3, r3, #3
 800aaf6:	4a6b      	ldr	r2, [pc, #428]	@ (800aca4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aaf8:	fa22 f303 	lsr.w	r3, r2, r3
 800aafc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	ee07 3a90 	vmov	s15, r3
 800ab04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	ee07 3a90 	vmov	s15, r3
 800ab0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab16:	4b62      	ldr	r3, [pc, #392]	@ (800aca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab1e:	ee07 3a90 	vmov	s15, r3
 800ab22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab26:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab2a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800acb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ab2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab42:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800ab46:	e087      	b.n	800ac58 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	ee07 3a90 	vmov	s15, r3
 800ab4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab52:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800acb4 <HAL_RCC_GetSysClockFreq+0x2e8>
 800ab56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab5a:	4b51      	ldr	r3, [pc, #324]	@ (800aca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab62:	ee07 3a90 	vmov	s15, r3
 800ab66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab6a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab6e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800acb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ab72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ab8a:	e065      	b.n	800ac58 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	ee07 3a90 	vmov	s15, r3
 800ab92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab96:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800acb8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ab9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab9e:	4b40      	ldr	r3, [pc, #256]	@ (800aca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aba6:	ee07 3a90 	vmov	s15, r3
 800abaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abae:	ed97 6a02 	vldr	s12, [r7, #8]
 800abb2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800acb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800abb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800abc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800abce:	e043      	b.n	800ac58 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800abd0:	693b      	ldr	r3, [r7, #16]
 800abd2:	ee07 3a90 	vmov	s15, r3
 800abd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abda:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800acbc <HAL_RCC_GetSysClockFreq+0x2f0>
 800abde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abe2:	4b2f      	ldr	r3, [pc, #188]	@ (800aca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abea:	ee07 3a90 	vmov	s15, r3
 800abee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abf2:	ed97 6a02 	vldr	s12, [r7, #8]
 800abf6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800acb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800abfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac0e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ac12:	e021      	b.n	800ac58 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	ee07 3a90 	vmov	s15, r3
 800ac1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac1e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800acb8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ac22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac26:	4b1e      	ldr	r3, [pc, #120]	@ (800aca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac2e:	ee07 3a90 	vmov	s15, r3
 800ac32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac36:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac3a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800acb0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ac3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac52:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ac56:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800ac58:	4b11      	ldr	r3, [pc, #68]	@ (800aca0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac5c:	0a5b      	lsrs	r3, r3, #9
 800ac5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac62:	3301      	adds	r3, #1
 800ac64:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	ee07 3a90 	vmov	s15, r3
 800ac6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ac70:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac7c:	ee17 3a90 	vmov	r3, s15
 800ac80:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800ac82:	e005      	b.n	800ac90 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800ac84:	2300      	movs	r3, #0
 800ac86:	61bb      	str	r3, [r7, #24]
      break;
 800ac88:	e002      	b.n	800ac90 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800ac8a:	4b07      	ldr	r3, [pc, #28]	@ (800aca8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ac8c:	61bb      	str	r3, [r7, #24]
      break;
 800ac8e:	bf00      	nop
  }

  return sysclockfreq;
 800ac90:	69bb      	ldr	r3, [r7, #24]
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3724      	adds	r7, #36	@ 0x24
 800ac96:	46bd      	mov	sp, r7
 800ac98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9c:	4770      	bx	lr
 800ac9e:	bf00      	nop
 800aca0:	58024400 	.word	0x58024400
 800aca4:	03d09000 	.word	0x03d09000
 800aca8:	003d0900 	.word	0x003d0900
 800acac:	016e3600 	.word	0x016e3600
 800acb0:	46000000 	.word	0x46000000
 800acb4:	4c742400 	.word	0x4c742400
 800acb8:	4a742400 	.word	0x4a742400
 800acbc:	4bb71b00 	.word	0x4bb71b00

0800acc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b082      	sub	sp, #8
 800acc4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800acc6:	f7ff fe81 	bl	800a9cc <HAL_RCC_GetSysClockFreq>
 800acca:	4602      	mov	r2, r0
 800accc:	4b10      	ldr	r3, [pc, #64]	@ (800ad10 <HAL_RCC_GetHCLKFreq+0x50>)
 800acce:	699b      	ldr	r3, [r3, #24]
 800acd0:	0a1b      	lsrs	r3, r3, #8
 800acd2:	f003 030f 	and.w	r3, r3, #15
 800acd6:	490f      	ldr	r1, [pc, #60]	@ (800ad14 <HAL_RCC_GetHCLKFreq+0x54>)
 800acd8:	5ccb      	ldrb	r3, [r1, r3]
 800acda:	f003 031f 	and.w	r3, r3, #31
 800acde:	fa22 f303 	lsr.w	r3, r2, r3
 800ace2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ace4:	4b0a      	ldr	r3, [pc, #40]	@ (800ad10 <HAL_RCC_GetHCLKFreq+0x50>)
 800ace6:	699b      	ldr	r3, [r3, #24]
 800ace8:	f003 030f 	and.w	r3, r3, #15
 800acec:	4a09      	ldr	r2, [pc, #36]	@ (800ad14 <HAL_RCC_GetHCLKFreq+0x54>)
 800acee:	5cd3      	ldrb	r3, [r2, r3]
 800acf0:	f003 031f 	and.w	r3, r3, #31
 800acf4:	687a      	ldr	r2, [r7, #4]
 800acf6:	fa22 f303 	lsr.w	r3, r2, r3
 800acfa:	4a07      	ldr	r2, [pc, #28]	@ (800ad18 <HAL_RCC_GetHCLKFreq+0x58>)
 800acfc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800acfe:	4a07      	ldr	r2, [pc, #28]	@ (800ad1c <HAL_RCC_GetHCLKFreq+0x5c>)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800ad04:	4b04      	ldr	r3, [pc, #16]	@ (800ad18 <HAL_RCC_GetHCLKFreq+0x58>)
 800ad06:	681b      	ldr	r3, [r3, #0]
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3708      	adds	r7, #8
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}
 800ad10:	58024400 	.word	0x58024400
 800ad14:	08014948 	.word	0x08014948
 800ad18:	24000028 	.word	0x24000028
 800ad1c:	24000024 	.word	0x24000024

0800ad20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ad24:	f7ff ffcc 	bl	800acc0 <HAL_RCC_GetHCLKFreq>
 800ad28:	4602      	mov	r2, r0
 800ad2a:	4b06      	ldr	r3, [pc, #24]	@ (800ad44 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ad2c:	69db      	ldr	r3, [r3, #28]
 800ad2e:	091b      	lsrs	r3, r3, #4
 800ad30:	f003 0307 	and.w	r3, r3, #7
 800ad34:	4904      	ldr	r1, [pc, #16]	@ (800ad48 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ad36:	5ccb      	ldrb	r3, [r1, r3]
 800ad38:	f003 031f 	and.w	r3, r3, #31
 800ad3c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	bd80      	pop	{r7, pc}
 800ad44:	58024400 	.word	0x58024400
 800ad48:	08014948 	.word	0x08014948

0800ad4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ad50:	f7ff ffb6 	bl	800acc0 <HAL_RCC_GetHCLKFreq>
 800ad54:	4602      	mov	r2, r0
 800ad56:	4b06      	ldr	r3, [pc, #24]	@ (800ad70 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ad58:	69db      	ldr	r3, [r3, #28]
 800ad5a:	0a1b      	lsrs	r3, r3, #8
 800ad5c:	f003 0307 	and.w	r3, r3, #7
 800ad60:	4904      	ldr	r1, [pc, #16]	@ (800ad74 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ad62:	5ccb      	ldrb	r3, [r1, r3]
 800ad64:	f003 031f 	and.w	r3, r3, #31
 800ad68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	bd80      	pop	{r7, pc}
 800ad70:	58024400 	.word	0x58024400
 800ad74:	08014948 	.word	0x08014948

0800ad78 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ad78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ad7c:	b0c6      	sub	sp, #280	@ 0x118
 800ad7e:	af00      	add	r7, sp, #0
 800ad80:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ad84:	2300      	movs	r3, #0
 800ad86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ad90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad98:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800ad9c:	2500      	movs	r5, #0
 800ad9e:	ea54 0305 	orrs.w	r3, r4, r5
 800ada2:	d049      	beq.n	800ae38 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800ada4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ada8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800adaa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800adae:	d02f      	beq.n	800ae10 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800adb0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800adb4:	d828      	bhi.n	800ae08 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800adb6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800adba:	d01a      	beq.n	800adf2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800adbc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800adc0:	d822      	bhi.n	800ae08 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d003      	beq.n	800adce <HAL_RCCEx_PeriphCLKConfig+0x56>
 800adc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800adca:	d007      	beq.n	800addc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800adcc:	e01c      	b.n	800ae08 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800adce:	4bab      	ldr	r3, [pc, #684]	@ (800b07c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800add0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800add2:	4aaa      	ldr	r2, [pc, #680]	@ (800b07c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800add4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800add8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800adda:	e01a      	b.n	800ae12 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800addc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ade0:	3308      	adds	r3, #8
 800ade2:	2102      	movs	r1, #2
 800ade4:	4618      	mov	r0, r3
 800ade6:	f002 fa49 	bl	800d27c <RCCEx_PLL2_Config>
 800adea:	4603      	mov	r3, r0
 800adec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800adf0:	e00f      	b.n	800ae12 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800adf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adf6:	3328      	adds	r3, #40	@ 0x28
 800adf8:	2102      	movs	r1, #2
 800adfa:	4618      	mov	r0, r3
 800adfc:	f002 faf0 	bl	800d3e0 <RCCEx_PLL3_Config>
 800ae00:	4603      	mov	r3, r0
 800ae02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ae06:	e004      	b.n	800ae12 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae08:	2301      	movs	r3, #1
 800ae0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ae0e:	e000      	b.n	800ae12 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800ae10:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae12:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d10a      	bne.n	800ae30 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ae1a:	4b98      	ldr	r3, [pc, #608]	@ (800b07c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ae1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae1e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800ae22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae28:	4a94      	ldr	r2, [pc, #592]	@ (800b07c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ae2a:	430b      	orrs	r3, r1
 800ae2c:	6513      	str	r3, [r2, #80]	@ 0x50
 800ae2e:	e003      	b.n	800ae38 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ae34:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ae38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae40:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800ae44:	f04f 0900 	mov.w	r9, #0
 800ae48:	ea58 0309 	orrs.w	r3, r8, r9
 800ae4c:	d047      	beq.n	800aede <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800ae4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae54:	2b04      	cmp	r3, #4
 800ae56:	d82a      	bhi.n	800aeae <HAL_RCCEx_PeriphCLKConfig+0x136>
 800ae58:	a201      	add	r2, pc, #4	@ (adr r2, 800ae60 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800ae5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae5e:	bf00      	nop
 800ae60:	0800ae75 	.word	0x0800ae75
 800ae64:	0800ae83 	.word	0x0800ae83
 800ae68:	0800ae99 	.word	0x0800ae99
 800ae6c:	0800aeb7 	.word	0x0800aeb7
 800ae70:	0800aeb7 	.word	0x0800aeb7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae74:	4b81      	ldr	r3, [pc, #516]	@ (800b07c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ae76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae78:	4a80      	ldr	r2, [pc, #512]	@ (800b07c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ae7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ae7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ae80:	e01a      	b.n	800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ae82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae86:	3308      	adds	r3, #8
 800ae88:	2100      	movs	r1, #0
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f002 f9f6 	bl	800d27c <RCCEx_PLL2_Config>
 800ae90:	4603      	mov	r3, r0
 800ae92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ae96:	e00f      	b.n	800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ae98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae9c:	3328      	adds	r3, #40	@ 0x28
 800ae9e:	2100      	movs	r1, #0
 800aea0:	4618      	mov	r0, r3
 800aea2:	f002 fa9d 	bl	800d3e0 <RCCEx_PLL3_Config>
 800aea6:	4603      	mov	r3, r0
 800aea8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aeac:	e004      	b.n	800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aeae:	2301      	movs	r3, #1
 800aeb0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800aeb4:	e000      	b.n	800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800aeb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aeb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d10a      	bne.n	800aed6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800aec0:	4b6e      	ldr	r3, [pc, #440]	@ (800b07c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aec2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aec4:	f023 0107 	bic.w	r1, r3, #7
 800aec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aece:	4a6b      	ldr	r2, [pc, #428]	@ (800b07c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aed0:	430b      	orrs	r3, r1
 800aed2:	6513      	str	r3, [r2, #80]	@ 0x50
 800aed4:	e003      	b.n	800aede <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aed6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aeda:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800aede:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee6:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800aeea:	f04f 0b00 	mov.w	fp, #0
 800aeee:	ea5a 030b 	orrs.w	r3, sl, fp
 800aef2:	d05b      	beq.n	800afac <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800aef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aef8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800aefc:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800af00:	d03b      	beq.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x202>
 800af02:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800af06:	d834      	bhi.n	800af72 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800af08:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800af0c:	d037      	beq.n	800af7e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800af0e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800af12:	d82e      	bhi.n	800af72 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800af14:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800af18:	d033      	beq.n	800af82 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800af1a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800af1e:	d828      	bhi.n	800af72 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800af20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800af24:	d01a      	beq.n	800af5c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800af26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800af2a:	d822      	bhi.n	800af72 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d003      	beq.n	800af38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800af30:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800af34:	d007      	beq.n	800af46 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800af36:	e01c      	b.n	800af72 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af38:	4b50      	ldr	r3, [pc, #320]	@ (800b07c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800af3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af3c:	4a4f      	ldr	r2, [pc, #316]	@ (800b07c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800af3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800af42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800af44:	e01e      	b.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af4a:	3308      	adds	r3, #8
 800af4c:	2100      	movs	r1, #0
 800af4e:	4618      	mov	r0, r3
 800af50:	f002 f994 	bl	800d27c <RCCEx_PLL2_Config>
 800af54:	4603      	mov	r3, r0
 800af56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800af5a:	e013      	b.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800af5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af60:	3328      	adds	r3, #40	@ 0x28
 800af62:	2100      	movs	r1, #0
 800af64:	4618      	mov	r0, r3
 800af66:	f002 fa3b 	bl	800d3e0 <RCCEx_PLL3_Config>
 800af6a:	4603      	mov	r3, r0
 800af6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800af70:	e008      	b.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800af72:	2301      	movs	r3, #1
 800af74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800af78:	e004      	b.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800af7a:	bf00      	nop
 800af7c:	e002      	b.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800af7e:	bf00      	nop
 800af80:	e000      	b.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800af82:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d10b      	bne.n	800afa4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800af8c:	4b3b      	ldr	r3, [pc, #236]	@ (800b07c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800af8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af90:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800af94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af98:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800af9c:	4a37      	ldr	r2, [pc, #220]	@ (800b07c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800af9e:	430b      	orrs	r3, r1
 800afa0:	6593      	str	r3, [r2, #88]	@ 0x58
 800afa2:	e003      	b.n	800afac <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afa4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800afa8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800afac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800afb8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800afbc:	2300      	movs	r3, #0
 800afbe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800afc2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800afc6:	460b      	mov	r3, r1
 800afc8:	4313      	orrs	r3, r2
 800afca:	d05d      	beq.n	800b088 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800afcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afd0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800afd4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800afd8:	d03b      	beq.n	800b052 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800afda:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800afde:	d834      	bhi.n	800b04a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800afe0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800afe4:	d037      	beq.n	800b056 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800afe6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800afea:	d82e      	bhi.n	800b04a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800afec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800aff0:	d033      	beq.n	800b05a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800aff2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800aff6:	d828      	bhi.n	800b04a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800aff8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800affc:	d01a      	beq.n	800b034 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800affe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b002:	d822      	bhi.n	800b04a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b004:	2b00      	cmp	r3, #0
 800b006:	d003      	beq.n	800b010 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800b008:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b00c:	d007      	beq.n	800b01e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800b00e:	e01c      	b.n	800b04a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b010:	4b1a      	ldr	r3, [pc, #104]	@ (800b07c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b014:	4a19      	ldr	r2, [pc, #100]	@ (800b07c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b016:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b01a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b01c:	e01e      	b.n	800b05c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b01e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b022:	3308      	adds	r3, #8
 800b024:	2100      	movs	r1, #0
 800b026:	4618      	mov	r0, r3
 800b028:	f002 f928 	bl	800d27c <RCCEx_PLL2_Config>
 800b02c:	4603      	mov	r3, r0
 800b02e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b032:	e013      	b.n	800b05c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b034:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b038:	3328      	adds	r3, #40	@ 0x28
 800b03a:	2100      	movs	r1, #0
 800b03c:	4618      	mov	r0, r3
 800b03e:	f002 f9cf 	bl	800d3e0 <RCCEx_PLL3_Config>
 800b042:	4603      	mov	r3, r0
 800b044:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b048:	e008      	b.n	800b05c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b04a:	2301      	movs	r3, #1
 800b04c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b050:	e004      	b.n	800b05c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b052:	bf00      	nop
 800b054:	e002      	b.n	800b05c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b056:	bf00      	nop
 800b058:	e000      	b.n	800b05c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b05a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b05c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b060:	2b00      	cmp	r3, #0
 800b062:	d10d      	bne.n	800b080 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b064:	4b05      	ldr	r3, [pc, #20]	@ (800b07c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b068:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800b06c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b070:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b074:	4a01      	ldr	r2, [pc, #4]	@ (800b07c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b076:	430b      	orrs	r3, r1
 800b078:	6593      	str	r3, [r2, #88]	@ 0x58
 800b07a:	e005      	b.n	800b088 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800b07c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b080:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b084:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b088:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b090:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800b094:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b098:	2300      	movs	r3, #0
 800b09a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b09e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800b0a2:	460b      	mov	r3, r1
 800b0a4:	4313      	orrs	r3, r2
 800b0a6:	d03a      	beq.n	800b11e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800b0a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b0ae:	2b30      	cmp	r3, #48	@ 0x30
 800b0b0:	d01f      	beq.n	800b0f2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800b0b2:	2b30      	cmp	r3, #48	@ 0x30
 800b0b4:	d819      	bhi.n	800b0ea <HAL_RCCEx_PeriphCLKConfig+0x372>
 800b0b6:	2b20      	cmp	r3, #32
 800b0b8:	d00c      	beq.n	800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800b0ba:	2b20      	cmp	r3, #32
 800b0bc:	d815      	bhi.n	800b0ea <HAL_RCCEx_PeriphCLKConfig+0x372>
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d019      	beq.n	800b0f6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b0c2:	2b10      	cmp	r3, #16
 800b0c4:	d111      	bne.n	800b0ea <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b0c6:	4baa      	ldr	r3, [pc, #680]	@ (800b370 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b0c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0ca:	4aa9      	ldr	r2, [pc, #676]	@ (800b370 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b0cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b0d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b0d2:	e011      	b.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b0d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0d8:	3308      	adds	r3, #8
 800b0da:	2102      	movs	r1, #2
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f002 f8cd 	bl	800d27c <RCCEx_PLL2_Config>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b0e8:	e006      	b.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b0f0:	e002      	b.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800b0f2:	bf00      	nop
 800b0f4:	e000      	b.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800b0f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d10a      	bne.n	800b116 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b100:	4b9b      	ldr	r3, [pc, #620]	@ (800b370 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b102:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b104:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800b108:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b10c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b10e:	4a98      	ldr	r2, [pc, #608]	@ (800b370 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b110:	430b      	orrs	r3, r1
 800b112:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b114:	e003      	b.n	800b11e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b116:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b11a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b11e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b126:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800b12a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b12e:	2300      	movs	r3, #0
 800b130:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b134:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800b138:	460b      	mov	r3, r1
 800b13a:	4313      	orrs	r3, r2
 800b13c:	d051      	beq.n	800b1e2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b13e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b142:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b144:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b148:	d035      	beq.n	800b1b6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800b14a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b14e:	d82e      	bhi.n	800b1ae <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b150:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b154:	d031      	beq.n	800b1ba <HAL_RCCEx_PeriphCLKConfig+0x442>
 800b156:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b15a:	d828      	bhi.n	800b1ae <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b15c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b160:	d01a      	beq.n	800b198 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800b162:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b166:	d822      	bhi.n	800b1ae <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d003      	beq.n	800b174 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800b16c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b170:	d007      	beq.n	800b182 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800b172:	e01c      	b.n	800b1ae <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b174:	4b7e      	ldr	r3, [pc, #504]	@ (800b370 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b178:	4a7d      	ldr	r2, [pc, #500]	@ (800b370 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b17a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b17e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b180:	e01c      	b.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b182:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b186:	3308      	adds	r3, #8
 800b188:	2100      	movs	r1, #0
 800b18a:	4618      	mov	r0, r3
 800b18c:	f002 f876 	bl	800d27c <RCCEx_PLL2_Config>
 800b190:	4603      	mov	r3, r0
 800b192:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b196:	e011      	b.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b198:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b19c:	3328      	adds	r3, #40	@ 0x28
 800b19e:	2100      	movs	r1, #0
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f002 f91d 	bl	800d3e0 <RCCEx_PLL3_Config>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b1ac:	e006      	b.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b1b4:	e002      	b.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800b1b6:	bf00      	nop
 800b1b8:	e000      	b.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800b1ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d10a      	bne.n	800b1da <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b1c4:	4b6a      	ldr	r3, [pc, #424]	@ (800b370 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b1c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b1c8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800b1cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b1d2:	4a67      	ldr	r2, [pc, #412]	@ (800b370 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b1d4:	430b      	orrs	r3, r1
 800b1d6:	6513      	str	r3, [r2, #80]	@ 0x50
 800b1d8:	e003      	b.n	800b1e2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b1de:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b1e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ea:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800b1ee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b1f8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800b1fc:	460b      	mov	r3, r1
 800b1fe:	4313      	orrs	r3, r2
 800b200:	d053      	beq.n	800b2aa <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b202:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b206:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b208:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b20c:	d033      	beq.n	800b276 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800b20e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b212:	d82c      	bhi.n	800b26e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b214:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b218:	d02f      	beq.n	800b27a <HAL_RCCEx_PeriphCLKConfig+0x502>
 800b21a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b21e:	d826      	bhi.n	800b26e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b220:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b224:	d02b      	beq.n	800b27e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800b226:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b22a:	d820      	bhi.n	800b26e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b22c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b230:	d012      	beq.n	800b258 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800b232:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b236:	d81a      	bhi.n	800b26e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d022      	beq.n	800b282 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800b23c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b240:	d115      	bne.n	800b26e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b242:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b246:	3308      	adds	r3, #8
 800b248:	2101      	movs	r1, #1
 800b24a:	4618      	mov	r0, r3
 800b24c:	f002 f816 	bl	800d27c <RCCEx_PLL2_Config>
 800b250:	4603      	mov	r3, r0
 800b252:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b256:	e015      	b.n	800b284 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b258:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b25c:	3328      	adds	r3, #40	@ 0x28
 800b25e:	2101      	movs	r1, #1
 800b260:	4618      	mov	r0, r3
 800b262:	f002 f8bd 	bl	800d3e0 <RCCEx_PLL3_Config>
 800b266:	4603      	mov	r3, r0
 800b268:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b26c:	e00a      	b.n	800b284 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b26e:	2301      	movs	r3, #1
 800b270:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b274:	e006      	b.n	800b284 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b276:	bf00      	nop
 800b278:	e004      	b.n	800b284 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b27a:	bf00      	nop
 800b27c:	e002      	b.n	800b284 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b27e:	bf00      	nop
 800b280:	e000      	b.n	800b284 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b282:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b284:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d10a      	bne.n	800b2a2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b28c:	4b38      	ldr	r3, [pc, #224]	@ (800b370 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b28e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b290:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800b294:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b298:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b29a:	4a35      	ldr	r2, [pc, #212]	@ (800b370 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b29c:	430b      	orrs	r3, r1
 800b29e:	6513      	str	r3, [r2, #80]	@ 0x50
 800b2a0:	e003      	b.n	800b2aa <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b2a6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b2aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800b2b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b2c0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b2c4:	460b      	mov	r3, r1
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	d058      	beq.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b2ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b2d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b2d6:	d033      	beq.n	800b340 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800b2d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b2dc:	d82c      	bhi.n	800b338 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b2de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b2e2:	d02f      	beq.n	800b344 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800b2e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b2e8:	d826      	bhi.n	800b338 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b2ea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b2ee:	d02b      	beq.n	800b348 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800b2f0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b2f4:	d820      	bhi.n	800b338 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b2f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b2fa:	d012      	beq.n	800b322 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800b2fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b300:	d81a      	bhi.n	800b338 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b302:	2b00      	cmp	r3, #0
 800b304:	d022      	beq.n	800b34c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b306:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b30a:	d115      	bne.n	800b338 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b30c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b310:	3308      	adds	r3, #8
 800b312:	2101      	movs	r1, #1
 800b314:	4618      	mov	r0, r3
 800b316:	f001 ffb1 	bl	800d27c <RCCEx_PLL2_Config>
 800b31a:	4603      	mov	r3, r0
 800b31c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b320:	e015      	b.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b322:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b326:	3328      	adds	r3, #40	@ 0x28
 800b328:	2101      	movs	r1, #1
 800b32a:	4618      	mov	r0, r3
 800b32c:	f002 f858 	bl	800d3e0 <RCCEx_PLL3_Config>
 800b330:	4603      	mov	r3, r0
 800b332:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b336:	e00a      	b.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b338:	2301      	movs	r3, #1
 800b33a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b33e:	e006      	b.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b340:	bf00      	nop
 800b342:	e004      	b.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b344:	bf00      	nop
 800b346:	e002      	b.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b348:	bf00      	nop
 800b34a:	e000      	b.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b34c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b34e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b352:	2b00      	cmp	r3, #0
 800b354:	d10e      	bne.n	800b374 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b356:	4b06      	ldr	r3, [pc, #24]	@ (800b370 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b35a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800b35e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b362:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b366:	4a02      	ldr	r2, [pc, #8]	@ (800b370 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b368:	430b      	orrs	r3, r1
 800b36a:	6593      	str	r3, [r2, #88]	@ 0x58
 800b36c:	e006      	b.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800b36e:	bf00      	nop
 800b370:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b374:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b378:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b37c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b384:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800b388:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b38c:	2300      	movs	r3, #0
 800b38e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b392:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800b396:	460b      	mov	r3, r1
 800b398:	4313      	orrs	r3, r2
 800b39a:	d037      	beq.n	800b40c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b39c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b3a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b3a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b3a6:	d00e      	beq.n	800b3c6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800b3a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b3ac:	d816      	bhi.n	800b3dc <HAL_RCCEx_PeriphCLKConfig+0x664>
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d018      	beq.n	800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800b3b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b3b6:	d111      	bne.n	800b3dc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3b8:	4bc4      	ldr	r3, [pc, #784]	@ (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b3ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3bc:	4ac3      	ldr	r2, [pc, #780]	@ (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b3be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b3c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b3c4:	e00f      	b.n	800b3e6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b3c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b3ca:	3308      	adds	r3, #8
 800b3cc:	2101      	movs	r1, #1
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f001 ff54 	bl	800d27c <RCCEx_PLL2_Config>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b3da:	e004      	b.n	800b3e6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3dc:	2301      	movs	r3, #1
 800b3de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b3e2:	e000      	b.n	800b3e6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800b3e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d10a      	bne.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b3ee:	4bb7      	ldr	r3, [pc, #732]	@ (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b3f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b3f2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800b3f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b3fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b3fc:	4ab3      	ldr	r2, [pc, #716]	@ (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b3fe:	430b      	orrs	r3, r1
 800b400:	6513      	str	r3, [r2, #80]	@ 0x50
 800b402:	e003      	b.n	800b40c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b404:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b408:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b40c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b414:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800b418:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b41c:	2300      	movs	r3, #0
 800b41e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b422:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800b426:	460b      	mov	r3, r1
 800b428:	4313      	orrs	r3, r2
 800b42a:	d039      	beq.n	800b4a0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b42c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b430:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b432:	2b03      	cmp	r3, #3
 800b434:	d81c      	bhi.n	800b470 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800b436:	a201      	add	r2, pc, #4	@ (adr r2, 800b43c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800b438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b43c:	0800b479 	.word	0x0800b479
 800b440:	0800b44d 	.word	0x0800b44d
 800b444:	0800b45b 	.word	0x0800b45b
 800b448:	0800b479 	.word	0x0800b479
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b44c:	4b9f      	ldr	r3, [pc, #636]	@ (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b44e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b450:	4a9e      	ldr	r2, [pc, #632]	@ (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b452:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b456:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b458:	e00f      	b.n	800b47a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b45a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b45e:	3308      	adds	r3, #8
 800b460:	2102      	movs	r1, #2
 800b462:	4618      	mov	r0, r3
 800b464:	f001 ff0a 	bl	800d27c <RCCEx_PLL2_Config>
 800b468:	4603      	mov	r3, r0
 800b46a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b46e:	e004      	b.n	800b47a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b470:	2301      	movs	r3, #1
 800b472:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b476:	e000      	b.n	800b47a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800b478:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b47a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d10a      	bne.n	800b498 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b482:	4b92      	ldr	r3, [pc, #584]	@ (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b486:	f023 0103 	bic.w	r1, r3, #3
 800b48a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b48e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b490:	4a8e      	ldr	r2, [pc, #568]	@ (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b492:	430b      	orrs	r3, r1
 800b494:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b496:	e003      	b.n	800b4a0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b498:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b49c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b4a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800b4ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b4b6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b4ba:	460b      	mov	r3, r1
 800b4bc:	4313      	orrs	r3, r2
 800b4be:	f000 8099 	beq.w	800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b4c2:	4b83      	ldr	r3, [pc, #524]	@ (800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	4a82      	ldr	r2, [pc, #520]	@ (800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b4c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b4cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b4ce:	f7f8 faf9 	bl	8003ac4 <HAL_GetTick>
 800b4d2:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b4d6:	e00b      	b.n	800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b4d8:	f7f8 faf4 	bl	8003ac4 <HAL_GetTick>
 800b4dc:	4602      	mov	r2, r0
 800b4de:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800b4e2:	1ad3      	subs	r3, r2, r3
 800b4e4:	2b64      	cmp	r3, #100	@ 0x64
 800b4e6:	d903      	bls.n	800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800b4e8:	2303      	movs	r3, #3
 800b4ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b4ee:	e005      	b.n	800b4fc <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b4f0:	4b77      	ldr	r3, [pc, #476]	@ (800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d0ed      	beq.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800b4fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b500:	2b00      	cmp	r3, #0
 800b502:	d173      	bne.n	800b5ec <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b504:	4b71      	ldr	r3, [pc, #452]	@ (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b506:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800b508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b50c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b510:	4053      	eors	r3, r2
 800b512:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b516:	2b00      	cmp	r3, #0
 800b518:	d015      	beq.n	800b546 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b51a:	4b6c      	ldr	r3, [pc, #432]	@ (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b51c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b51e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b522:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b526:	4b69      	ldr	r3, [pc, #420]	@ (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b52a:	4a68      	ldr	r2, [pc, #416]	@ (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b52c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b530:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b532:	4b66      	ldr	r3, [pc, #408]	@ (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b536:	4a65      	ldr	r2, [pc, #404]	@ (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b538:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b53c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b53e:	4a63      	ldr	r2, [pc, #396]	@ (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b540:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b544:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b546:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b54a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b54e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b552:	d118      	bne.n	800b586 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b554:	f7f8 fab6 	bl	8003ac4 <HAL_GetTick>
 800b558:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b55c:	e00d      	b.n	800b57a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b55e:	f7f8 fab1 	bl	8003ac4 <HAL_GetTick>
 800b562:	4602      	mov	r2, r0
 800b564:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800b568:	1ad2      	subs	r2, r2, r3
 800b56a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800b56e:	429a      	cmp	r2, r3
 800b570:	d903      	bls.n	800b57a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800b572:	2303      	movs	r3, #3
 800b574:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800b578:	e005      	b.n	800b586 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b57a:	4b54      	ldr	r3, [pc, #336]	@ (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b57c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b57e:	f003 0302 	and.w	r3, r3, #2
 800b582:	2b00      	cmp	r3, #0
 800b584:	d0eb      	beq.n	800b55e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800b586:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d129      	bne.n	800b5e2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b58e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b592:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b596:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b59a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b59e:	d10e      	bne.n	800b5be <HAL_RCCEx_PeriphCLKConfig+0x846>
 800b5a0:	4b4a      	ldr	r3, [pc, #296]	@ (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b5a2:	691b      	ldr	r3, [r3, #16]
 800b5a4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800b5a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b5b0:	091a      	lsrs	r2, r3, #4
 800b5b2:	4b48      	ldr	r3, [pc, #288]	@ (800b6d4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800b5b4:	4013      	ands	r3, r2
 800b5b6:	4a45      	ldr	r2, [pc, #276]	@ (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b5b8:	430b      	orrs	r3, r1
 800b5ba:	6113      	str	r3, [r2, #16]
 800b5bc:	e005      	b.n	800b5ca <HAL_RCCEx_PeriphCLKConfig+0x852>
 800b5be:	4b43      	ldr	r3, [pc, #268]	@ (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b5c0:	691b      	ldr	r3, [r3, #16]
 800b5c2:	4a42      	ldr	r2, [pc, #264]	@ (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b5c4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b5c8:	6113      	str	r3, [r2, #16]
 800b5ca:	4b40      	ldr	r3, [pc, #256]	@ (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b5cc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800b5ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b5d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b5da:	4a3c      	ldr	r2, [pc, #240]	@ (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b5dc:	430b      	orrs	r3, r1
 800b5de:	6713      	str	r3, [r2, #112]	@ 0x70
 800b5e0:	e008      	b.n	800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b5e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b5e6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800b5ea:	e003      	b.n	800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b5f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b5f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5fc:	f002 0301 	and.w	r3, r2, #1
 800b600:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b604:	2300      	movs	r3, #0
 800b606:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b60a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800b60e:	460b      	mov	r3, r1
 800b610:	4313      	orrs	r3, r2
 800b612:	f000 808f 	beq.w	800b734 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b616:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b61a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b61c:	2b28      	cmp	r3, #40	@ 0x28
 800b61e:	d871      	bhi.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800b620:	a201      	add	r2, pc, #4	@ (adr r2, 800b628 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800b622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b626:	bf00      	nop
 800b628:	0800b70d 	.word	0x0800b70d
 800b62c:	0800b705 	.word	0x0800b705
 800b630:	0800b705 	.word	0x0800b705
 800b634:	0800b705 	.word	0x0800b705
 800b638:	0800b705 	.word	0x0800b705
 800b63c:	0800b705 	.word	0x0800b705
 800b640:	0800b705 	.word	0x0800b705
 800b644:	0800b705 	.word	0x0800b705
 800b648:	0800b6d9 	.word	0x0800b6d9
 800b64c:	0800b705 	.word	0x0800b705
 800b650:	0800b705 	.word	0x0800b705
 800b654:	0800b705 	.word	0x0800b705
 800b658:	0800b705 	.word	0x0800b705
 800b65c:	0800b705 	.word	0x0800b705
 800b660:	0800b705 	.word	0x0800b705
 800b664:	0800b705 	.word	0x0800b705
 800b668:	0800b6ef 	.word	0x0800b6ef
 800b66c:	0800b705 	.word	0x0800b705
 800b670:	0800b705 	.word	0x0800b705
 800b674:	0800b705 	.word	0x0800b705
 800b678:	0800b705 	.word	0x0800b705
 800b67c:	0800b705 	.word	0x0800b705
 800b680:	0800b705 	.word	0x0800b705
 800b684:	0800b705 	.word	0x0800b705
 800b688:	0800b70d 	.word	0x0800b70d
 800b68c:	0800b705 	.word	0x0800b705
 800b690:	0800b705 	.word	0x0800b705
 800b694:	0800b705 	.word	0x0800b705
 800b698:	0800b705 	.word	0x0800b705
 800b69c:	0800b705 	.word	0x0800b705
 800b6a0:	0800b705 	.word	0x0800b705
 800b6a4:	0800b705 	.word	0x0800b705
 800b6a8:	0800b70d 	.word	0x0800b70d
 800b6ac:	0800b705 	.word	0x0800b705
 800b6b0:	0800b705 	.word	0x0800b705
 800b6b4:	0800b705 	.word	0x0800b705
 800b6b8:	0800b705 	.word	0x0800b705
 800b6bc:	0800b705 	.word	0x0800b705
 800b6c0:	0800b705 	.word	0x0800b705
 800b6c4:	0800b705 	.word	0x0800b705
 800b6c8:	0800b70d 	.word	0x0800b70d
 800b6cc:	58024400 	.word	0x58024400
 800b6d0:	58024800 	.word	0x58024800
 800b6d4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b6d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6dc:	3308      	adds	r3, #8
 800b6de:	2101      	movs	r1, #1
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f001 fdcb 	bl	800d27c <RCCEx_PLL2_Config>
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b6ec:	e00f      	b.n	800b70e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b6ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6f2:	3328      	adds	r3, #40	@ 0x28
 800b6f4:	2101      	movs	r1, #1
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f001 fe72 	bl	800d3e0 <RCCEx_PLL3_Config>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b702:	e004      	b.n	800b70e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b704:	2301      	movs	r3, #1
 800b706:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b70a:	e000      	b.n	800b70e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800b70c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b70e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b712:	2b00      	cmp	r3, #0
 800b714:	d10a      	bne.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b716:	4bbf      	ldr	r3, [pc, #764]	@ (800ba14 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b71a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800b71e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b722:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b724:	4abb      	ldr	r2, [pc, #748]	@ (800ba14 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b726:	430b      	orrs	r3, r1
 800b728:	6553      	str	r3, [r2, #84]	@ 0x54
 800b72a:	e003      	b.n	800b734 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b72c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b730:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b734:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b73c:	f002 0302 	and.w	r3, r2, #2
 800b740:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b744:	2300      	movs	r3, #0
 800b746:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b74a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800b74e:	460b      	mov	r3, r1
 800b750:	4313      	orrs	r3, r2
 800b752:	d041      	beq.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b754:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b758:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b75a:	2b05      	cmp	r3, #5
 800b75c:	d824      	bhi.n	800b7a8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800b75e:	a201      	add	r2, pc, #4	@ (adr r2, 800b764 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800b760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b764:	0800b7b1 	.word	0x0800b7b1
 800b768:	0800b77d 	.word	0x0800b77d
 800b76c:	0800b793 	.word	0x0800b793
 800b770:	0800b7b1 	.word	0x0800b7b1
 800b774:	0800b7b1 	.word	0x0800b7b1
 800b778:	0800b7b1 	.word	0x0800b7b1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b77c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b780:	3308      	adds	r3, #8
 800b782:	2101      	movs	r1, #1
 800b784:	4618      	mov	r0, r3
 800b786:	f001 fd79 	bl	800d27c <RCCEx_PLL2_Config>
 800b78a:	4603      	mov	r3, r0
 800b78c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b790:	e00f      	b.n	800b7b2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b792:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b796:	3328      	adds	r3, #40	@ 0x28
 800b798:	2101      	movs	r1, #1
 800b79a:	4618      	mov	r0, r3
 800b79c:	f001 fe20 	bl	800d3e0 <RCCEx_PLL3_Config>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b7a6:	e004      	b.n	800b7b2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7a8:	2301      	movs	r3, #1
 800b7aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b7ae:	e000      	b.n	800b7b2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800b7b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d10a      	bne.n	800b7d0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b7ba:	4b96      	ldr	r3, [pc, #600]	@ (800ba14 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b7bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b7be:	f023 0107 	bic.w	r1, r3, #7
 800b7c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b7c8:	4a92      	ldr	r2, [pc, #584]	@ (800ba14 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b7ca:	430b      	orrs	r3, r1
 800b7cc:	6553      	str	r3, [r2, #84]	@ 0x54
 800b7ce:	e003      	b.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b7d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b7d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e0:	f002 0304 	and.w	r3, r2, #4
 800b7e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b7ee:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b7f2:	460b      	mov	r3, r1
 800b7f4:	4313      	orrs	r3, r2
 800b7f6:	d044      	beq.n	800b882 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b7f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b800:	2b05      	cmp	r3, #5
 800b802:	d825      	bhi.n	800b850 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800b804:	a201      	add	r2, pc, #4	@ (adr r2, 800b80c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800b806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b80a:	bf00      	nop
 800b80c:	0800b859 	.word	0x0800b859
 800b810:	0800b825 	.word	0x0800b825
 800b814:	0800b83b 	.word	0x0800b83b
 800b818:	0800b859 	.word	0x0800b859
 800b81c:	0800b859 	.word	0x0800b859
 800b820:	0800b859 	.word	0x0800b859
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b824:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b828:	3308      	adds	r3, #8
 800b82a:	2101      	movs	r1, #1
 800b82c:	4618      	mov	r0, r3
 800b82e:	f001 fd25 	bl	800d27c <RCCEx_PLL2_Config>
 800b832:	4603      	mov	r3, r0
 800b834:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b838:	e00f      	b.n	800b85a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b83a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b83e:	3328      	adds	r3, #40	@ 0x28
 800b840:	2101      	movs	r1, #1
 800b842:	4618      	mov	r0, r3
 800b844:	f001 fdcc 	bl	800d3e0 <RCCEx_PLL3_Config>
 800b848:	4603      	mov	r3, r0
 800b84a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b84e:	e004      	b.n	800b85a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b850:	2301      	movs	r3, #1
 800b852:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b856:	e000      	b.n	800b85a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800b858:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b85a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d10b      	bne.n	800b87a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b862:	4b6c      	ldr	r3, [pc, #432]	@ (800ba14 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b866:	f023 0107 	bic.w	r1, r3, #7
 800b86a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b86e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b872:	4a68      	ldr	r2, [pc, #416]	@ (800ba14 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b874:	430b      	orrs	r3, r1
 800b876:	6593      	str	r3, [r2, #88]	@ 0x58
 800b878:	e003      	b.n	800b882 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b87a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b87e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b882:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b88a:	f002 0320 	and.w	r3, r2, #32
 800b88e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b892:	2300      	movs	r3, #0
 800b894:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b898:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800b89c:	460b      	mov	r3, r1
 800b89e:	4313      	orrs	r3, r2
 800b8a0:	d055      	beq.n	800b94e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b8a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b8aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b8ae:	d033      	beq.n	800b918 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800b8b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b8b4:	d82c      	bhi.n	800b910 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b8b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b8ba:	d02f      	beq.n	800b91c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800b8bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b8c0:	d826      	bhi.n	800b910 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b8c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b8c6:	d02b      	beq.n	800b920 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800b8c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b8cc:	d820      	bhi.n	800b910 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b8ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b8d2:	d012      	beq.n	800b8fa <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800b8d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b8d8:	d81a      	bhi.n	800b910 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d022      	beq.n	800b924 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800b8de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b8e2:	d115      	bne.n	800b910 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b8e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8e8:	3308      	adds	r3, #8
 800b8ea:	2100      	movs	r1, #0
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f001 fcc5 	bl	800d27c <RCCEx_PLL2_Config>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b8f8:	e015      	b.n	800b926 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b8fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8fe:	3328      	adds	r3, #40	@ 0x28
 800b900:	2102      	movs	r1, #2
 800b902:	4618      	mov	r0, r3
 800b904:	f001 fd6c 	bl	800d3e0 <RCCEx_PLL3_Config>
 800b908:	4603      	mov	r3, r0
 800b90a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b90e:	e00a      	b.n	800b926 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b910:	2301      	movs	r3, #1
 800b912:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b916:	e006      	b.n	800b926 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b918:	bf00      	nop
 800b91a:	e004      	b.n	800b926 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b91c:	bf00      	nop
 800b91e:	e002      	b.n	800b926 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b920:	bf00      	nop
 800b922:	e000      	b.n	800b926 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b924:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b926:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d10b      	bne.n	800b946 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b92e:	4b39      	ldr	r3, [pc, #228]	@ (800ba14 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b930:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b932:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800b936:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b93a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b93e:	4a35      	ldr	r2, [pc, #212]	@ (800ba14 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b940:	430b      	orrs	r3, r1
 800b942:	6553      	str	r3, [r2, #84]	@ 0x54
 800b944:	e003      	b.n	800b94e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b946:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b94a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b94e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b956:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800b95a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b95e:	2300      	movs	r3, #0
 800b960:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b964:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800b968:	460b      	mov	r3, r1
 800b96a:	4313      	orrs	r3, r2
 800b96c:	d058      	beq.n	800ba20 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b96e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b972:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b976:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800b97a:	d033      	beq.n	800b9e4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800b97c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800b980:	d82c      	bhi.n	800b9dc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b982:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b986:	d02f      	beq.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b988:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b98c:	d826      	bhi.n	800b9dc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b98e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b992:	d02b      	beq.n	800b9ec <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b994:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b998:	d820      	bhi.n	800b9dc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b99a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b99e:	d012      	beq.n	800b9c6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800b9a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b9a4:	d81a      	bhi.n	800b9dc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d022      	beq.n	800b9f0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b9aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b9ae:	d115      	bne.n	800b9dc <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b9b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9b4:	3308      	adds	r3, #8
 800b9b6:	2100      	movs	r1, #0
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	f001 fc5f 	bl	800d27c <RCCEx_PLL2_Config>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b9c4:	e015      	b.n	800b9f2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b9c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9ca:	3328      	adds	r3, #40	@ 0x28
 800b9cc:	2102      	movs	r1, #2
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f001 fd06 	bl	800d3e0 <RCCEx_PLL3_Config>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b9da:	e00a      	b.n	800b9f2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b9dc:	2301      	movs	r3, #1
 800b9de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b9e2:	e006      	b.n	800b9f2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b9e4:	bf00      	nop
 800b9e6:	e004      	b.n	800b9f2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b9e8:	bf00      	nop
 800b9ea:	e002      	b.n	800b9f2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b9ec:	bf00      	nop
 800b9ee:	e000      	b.n	800b9f2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b9f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d10e      	bne.n	800ba18 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b9fa:	4b06      	ldr	r3, [pc, #24]	@ (800ba14 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b9fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b9fe:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800ba02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ba0a:	4a02      	ldr	r2, [pc, #8]	@ (800ba14 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ba0c:	430b      	orrs	r3, r1
 800ba0e:	6593      	str	r3, [r2, #88]	@ 0x58
 800ba10:	e006      	b.n	800ba20 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800ba12:	bf00      	nop
 800ba14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ba1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ba20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba28:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800ba2c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ba30:	2300      	movs	r3, #0
 800ba32:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ba36:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800ba3a:	460b      	mov	r3, r1
 800ba3c:	4313      	orrs	r3, r2
 800ba3e:	d055      	beq.n	800baec <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800ba40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba44:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ba48:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800ba4c:	d033      	beq.n	800bab6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800ba4e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800ba52:	d82c      	bhi.n	800baae <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ba54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ba58:	d02f      	beq.n	800baba <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800ba5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ba5e:	d826      	bhi.n	800baae <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ba60:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800ba64:	d02b      	beq.n	800babe <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800ba66:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800ba6a:	d820      	bhi.n	800baae <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ba6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ba70:	d012      	beq.n	800ba98 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800ba72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ba76:	d81a      	bhi.n	800baae <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d022      	beq.n	800bac2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800ba7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ba80:	d115      	bne.n	800baae <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ba82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba86:	3308      	adds	r3, #8
 800ba88:	2100      	movs	r1, #0
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f001 fbf6 	bl	800d27c <RCCEx_PLL2_Config>
 800ba90:	4603      	mov	r3, r0
 800ba92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ba96:	e015      	b.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ba98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba9c:	3328      	adds	r3, #40	@ 0x28
 800ba9e:	2102      	movs	r1, #2
 800baa0:	4618      	mov	r0, r3
 800baa2:	f001 fc9d 	bl	800d3e0 <RCCEx_PLL3_Config>
 800baa6:	4603      	mov	r3, r0
 800baa8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800baac:	e00a      	b.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800baae:	2301      	movs	r3, #1
 800bab0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bab4:	e006      	b.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800bab6:	bf00      	nop
 800bab8:	e004      	b.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800baba:	bf00      	nop
 800babc:	e002      	b.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800babe:	bf00      	nop
 800bac0:	e000      	b.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800bac2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bac4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d10b      	bne.n	800bae4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800bacc:	4ba0      	ldr	r3, [pc, #640]	@ (800bd50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bad0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800bad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bad8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800badc:	4a9c      	ldr	r2, [pc, #624]	@ (800bd50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bade:	430b      	orrs	r3, r1
 800bae0:	6593      	str	r3, [r2, #88]	@ 0x58
 800bae2:	e003      	b.n	800baec <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bae4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bae8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800baec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800baf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baf4:	f002 0308 	and.w	r3, r2, #8
 800baf8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bafc:	2300      	movs	r3, #0
 800bafe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800bb02:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800bb06:	460b      	mov	r3, r1
 800bb08:	4313      	orrs	r3, r2
 800bb0a:	d01e      	beq.n	800bb4a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800bb0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bb18:	d10c      	bne.n	800bb34 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bb1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb1e:	3328      	adds	r3, #40	@ 0x28
 800bb20:	2102      	movs	r1, #2
 800bb22:	4618      	mov	r0, r3
 800bb24:	f001 fc5c 	bl	800d3e0 <RCCEx_PLL3_Config>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d002      	beq.n	800bb34 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800bb2e:	2301      	movs	r3, #1
 800bb30:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800bb34:	4b86      	ldr	r3, [pc, #536]	@ (800bd50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bb36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb38:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800bb3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb44:	4a82      	ldr	r2, [pc, #520]	@ (800bd50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bb46:	430b      	orrs	r3, r1
 800bb48:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bb4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb52:	f002 0310 	and.w	r3, r2, #16
 800bb56:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bb60:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800bb64:	460b      	mov	r3, r1
 800bb66:	4313      	orrs	r3, r2
 800bb68:	d01e      	beq.n	800bba8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800bb6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bb72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb76:	d10c      	bne.n	800bb92 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bb78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb7c:	3328      	adds	r3, #40	@ 0x28
 800bb7e:	2102      	movs	r1, #2
 800bb80:	4618      	mov	r0, r3
 800bb82:	f001 fc2d 	bl	800d3e0 <RCCEx_PLL3_Config>
 800bb86:	4603      	mov	r3, r0
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d002      	beq.n	800bb92 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bb92:	4b6f      	ldr	r3, [pc, #444]	@ (800bd50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bb94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb96:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800bb9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bba2:	4a6b      	ldr	r2, [pc, #428]	@ (800bd50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bba4:	430b      	orrs	r3, r1
 800bba6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800bbb4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800bbba:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800bbbe:	460b      	mov	r3, r1
 800bbc0:	4313      	orrs	r3, r2
 800bbc2:	d03e      	beq.n	800bc42 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800bbc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbc8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bbcc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bbd0:	d022      	beq.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800bbd2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bbd6:	d81b      	bhi.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d003      	beq.n	800bbe4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800bbdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bbe0:	d00b      	beq.n	800bbfa <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800bbe2:	e015      	b.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bbe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbe8:	3308      	adds	r3, #8
 800bbea:	2100      	movs	r1, #0
 800bbec:	4618      	mov	r0, r3
 800bbee:	f001 fb45 	bl	800d27c <RCCEx_PLL2_Config>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bbf8:	e00f      	b.n	800bc1a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bbfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbfe:	3328      	adds	r3, #40	@ 0x28
 800bc00:	2102      	movs	r1, #2
 800bc02:	4618      	mov	r0, r3
 800bc04:	f001 fbec 	bl	800d3e0 <RCCEx_PLL3_Config>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bc0e:	e004      	b.n	800bc1a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc10:	2301      	movs	r3, #1
 800bc12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bc16:	e000      	b.n	800bc1a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800bc18:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc1a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d10b      	bne.n	800bc3a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bc22:	4b4b      	ldr	r3, [pc, #300]	@ (800bd50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bc24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc26:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800bc2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc2e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bc32:	4a47      	ldr	r2, [pc, #284]	@ (800bd50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bc34:	430b      	orrs	r3, r1
 800bc36:	6593      	str	r3, [r2, #88]	@ 0x58
 800bc38:	e003      	b.n	800bc42 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bc3e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bc42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc4a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800bc4e:	673b      	str	r3, [r7, #112]	@ 0x70
 800bc50:	2300      	movs	r3, #0
 800bc52:	677b      	str	r3, [r7, #116]	@ 0x74
 800bc54:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800bc58:	460b      	mov	r3, r1
 800bc5a:	4313      	orrs	r3, r2
 800bc5c:	d03b      	beq.n	800bcd6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800bc5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc66:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800bc6a:	d01f      	beq.n	800bcac <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800bc6c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800bc70:	d818      	bhi.n	800bca4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800bc72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bc76:	d003      	beq.n	800bc80 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800bc78:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bc7c:	d007      	beq.n	800bc8e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800bc7e:	e011      	b.n	800bca4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc80:	4b33      	ldr	r3, [pc, #204]	@ (800bd50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bc82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc84:	4a32      	ldr	r2, [pc, #200]	@ (800bd50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bc86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bc8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800bc8c:	e00f      	b.n	800bcae <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bc8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc92:	3328      	adds	r3, #40	@ 0x28
 800bc94:	2101      	movs	r1, #1
 800bc96:	4618      	mov	r0, r3
 800bc98:	f001 fba2 	bl	800d3e0 <RCCEx_PLL3_Config>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800bca2:	e004      	b.n	800bcae <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bca4:	2301      	movs	r3, #1
 800bca6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bcaa:	e000      	b.n	800bcae <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800bcac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d10b      	bne.n	800bcce <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bcb6:	4b26      	ldr	r3, [pc, #152]	@ (800bd50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bcb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bcba:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800bcbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bcc6:	4a22      	ldr	r2, [pc, #136]	@ (800bd50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bcc8:	430b      	orrs	r3, r1
 800bcca:	6553      	str	r3, [r2, #84]	@ 0x54
 800bccc:	e003      	b.n	800bcd6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bcd2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bcd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcde:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800bce2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bce4:	2300      	movs	r3, #0
 800bce6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bce8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800bcec:	460b      	mov	r3, r1
 800bcee:	4313      	orrs	r3, r2
 800bcf0:	d034      	beq.n	800bd5c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800bcf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d003      	beq.n	800bd04 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800bcfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd00:	d007      	beq.n	800bd12 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800bd02:	e011      	b.n	800bd28 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd04:	4b12      	ldr	r3, [pc, #72]	@ (800bd50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bd06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd08:	4a11      	ldr	r2, [pc, #68]	@ (800bd50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bd0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bd0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bd10:	e00e      	b.n	800bd30 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bd12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd16:	3308      	adds	r3, #8
 800bd18:	2102      	movs	r1, #2
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f001 faae 	bl	800d27c <RCCEx_PLL2_Config>
 800bd20:	4603      	mov	r3, r0
 800bd22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bd26:	e003      	b.n	800bd30 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800bd28:	2301      	movs	r3, #1
 800bd2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bd2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d10d      	bne.n	800bd54 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800bd38:	4b05      	ldr	r3, [pc, #20]	@ (800bd50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bd3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd3c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bd40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd46:	4a02      	ldr	r2, [pc, #8]	@ (800bd50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bd48:	430b      	orrs	r3, r1
 800bd4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800bd4c:	e006      	b.n	800bd5c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800bd4e:	bf00      	nop
 800bd50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bd58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bd5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd64:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800bd68:	663b      	str	r3, [r7, #96]	@ 0x60
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	667b      	str	r3, [r7, #100]	@ 0x64
 800bd6e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800bd72:	460b      	mov	r3, r1
 800bd74:	4313      	orrs	r3, r2
 800bd76:	d00c      	beq.n	800bd92 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bd78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd7c:	3328      	adds	r3, #40	@ 0x28
 800bd7e:	2102      	movs	r1, #2
 800bd80:	4618      	mov	r0, r3
 800bd82:	f001 fb2d 	bl	800d3e0 <RCCEx_PLL3_Config>
 800bd86:	4603      	mov	r3, r0
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d002      	beq.n	800bd92 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bd92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd9a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800bd9e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bda0:	2300      	movs	r3, #0
 800bda2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bda4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800bda8:	460b      	mov	r3, r1
 800bdaa:	4313      	orrs	r3, r2
 800bdac:	d036      	beq.n	800be1c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800bdae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdb2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bdb4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bdb8:	d018      	beq.n	800bdec <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800bdba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bdbe:	d811      	bhi.n	800bde4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800bdc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bdc4:	d014      	beq.n	800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800bdc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bdca:	d80b      	bhi.n	800bde4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d011      	beq.n	800bdf4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800bdd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bdd4:	d106      	bne.n	800bde4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bdd6:	4bb7      	ldr	r3, [pc, #732]	@ (800c0b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bdd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdda:	4ab6      	ldr	r2, [pc, #728]	@ (800c0b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bddc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bde0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800bde2:	e008      	b.n	800bdf6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bde4:	2301      	movs	r3, #1
 800bde6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bdea:	e004      	b.n	800bdf6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800bdec:	bf00      	nop
 800bdee:	e002      	b.n	800bdf6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800bdf0:	bf00      	nop
 800bdf2:	e000      	b.n	800bdf6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800bdf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bdf6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d10a      	bne.n	800be14 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bdfe:	4bad      	ldr	r3, [pc, #692]	@ (800c0b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800be00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be02:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800be06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800be0c:	4aa9      	ldr	r2, [pc, #676]	@ (800c0b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800be0e:	430b      	orrs	r3, r1
 800be10:	6553      	str	r3, [r2, #84]	@ 0x54
 800be12:	e003      	b.n	800be1c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800be18:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800be1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be24:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800be28:	653b      	str	r3, [r7, #80]	@ 0x50
 800be2a:	2300      	movs	r3, #0
 800be2c:	657b      	str	r3, [r7, #84]	@ 0x54
 800be2e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800be32:	460b      	mov	r3, r1
 800be34:	4313      	orrs	r3, r2
 800be36:	d009      	beq.n	800be4c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800be38:	4b9e      	ldr	r3, [pc, #632]	@ (800c0b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800be3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be3c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800be40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800be46:	4a9b      	ldr	r2, [pc, #620]	@ (800c0b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800be48:	430b      	orrs	r3, r1
 800be4a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800be4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be54:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800be58:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be5a:	2300      	movs	r3, #0
 800be5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be5e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800be62:	460b      	mov	r3, r1
 800be64:	4313      	orrs	r3, r2
 800be66:	d009      	beq.n	800be7c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800be68:	4b92      	ldr	r3, [pc, #584]	@ (800c0b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800be6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be6c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800be70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800be76:	4a8f      	ldr	r2, [pc, #572]	@ (800c0b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800be78:	430b      	orrs	r3, r1
 800be7a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800be7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be84:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800be88:	643b      	str	r3, [r7, #64]	@ 0x40
 800be8a:	2300      	movs	r3, #0
 800be8c:	647b      	str	r3, [r7, #68]	@ 0x44
 800be8e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800be92:	460b      	mov	r3, r1
 800be94:	4313      	orrs	r3, r2
 800be96:	d00e      	beq.n	800beb6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800be98:	4b86      	ldr	r3, [pc, #536]	@ (800c0b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800be9a:	691b      	ldr	r3, [r3, #16]
 800be9c:	4a85      	ldr	r2, [pc, #532]	@ (800c0b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800be9e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bea2:	6113      	str	r3, [r2, #16]
 800bea4:	4b83      	ldr	r3, [pc, #524]	@ (800c0b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bea6:	6919      	ldr	r1, [r3, #16]
 800bea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800beac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800beb0:	4a80      	ldr	r2, [pc, #512]	@ (800c0b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800beb2:	430b      	orrs	r3, r1
 800beb4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800beb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800beba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bebe:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800bec2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bec4:	2300      	movs	r3, #0
 800bec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bec8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800becc:	460b      	mov	r3, r1
 800bece:	4313      	orrs	r3, r2
 800bed0:	d009      	beq.n	800bee6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bed2:	4b78      	ldr	r3, [pc, #480]	@ (800c0b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bed6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800beda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bee0:	4a74      	ldr	r2, [pc, #464]	@ (800c0b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bee2:	430b      	orrs	r3, r1
 800bee4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800beea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beee:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800bef2:	633b      	str	r3, [r7, #48]	@ 0x30
 800bef4:	2300      	movs	r3, #0
 800bef6:	637b      	str	r3, [r7, #52]	@ 0x34
 800bef8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800befc:	460b      	mov	r3, r1
 800befe:	4313      	orrs	r3, r2
 800bf00:	d00a      	beq.n	800bf18 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bf02:	4b6c      	ldr	r3, [pc, #432]	@ (800c0b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bf04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf06:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800bf0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf12:	4a68      	ldr	r2, [pc, #416]	@ (800c0b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bf14:	430b      	orrs	r3, r1
 800bf16:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800bf18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf20:	2100      	movs	r1, #0
 800bf22:	62b9      	str	r1, [r7, #40]	@ 0x28
 800bf24:	f003 0301 	and.w	r3, r3, #1
 800bf28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bf2a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800bf2e:	460b      	mov	r3, r1
 800bf30:	4313      	orrs	r3, r2
 800bf32:	d011      	beq.n	800bf58 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bf34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf38:	3308      	adds	r3, #8
 800bf3a:	2100      	movs	r1, #0
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	f001 f99d 	bl	800d27c <RCCEx_PLL2_Config>
 800bf42:	4603      	mov	r3, r0
 800bf44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800bf48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d003      	beq.n	800bf58 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bf54:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800bf58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf60:	2100      	movs	r1, #0
 800bf62:	6239      	str	r1, [r7, #32]
 800bf64:	f003 0302 	and.w	r3, r3, #2
 800bf68:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf6a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800bf6e:	460b      	mov	r3, r1
 800bf70:	4313      	orrs	r3, r2
 800bf72:	d011      	beq.n	800bf98 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bf74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf78:	3308      	adds	r3, #8
 800bf7a:	2101      	movs	r1, #1
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f001 f97d 	bl	800d27c <RCCEx_PLL2_Config>
 800bf82:	4603      	mov	r3, r0
 800bf84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800bf88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d003      	beq.n	800bf98 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bf94:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800bf98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa0:	2100      	movs	r1, #0
 800bfa2:	61b9      	str	r1, [r7, #24]
 800bfa4:	f003 0304 	and.w	r3, r3, #4
 800bfa8:	61fb      	str	r3, [r7, #28]
 800bfaa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bfae:	460b      	mov	r3, r1
 800bfb0:	4313      	orrs	r3, r2
 800bfb2:	d011      	beq.n	800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bfb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfb8:	3308      	adds	r3, #8
 800bfba:	2102      	movs	r1, #2
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f001 f95d 	bl	800d27c <RCCEx_PLL2_Config>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800bfc8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d003      	beq.n	800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfd0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bfd4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800bfd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe0:	2100      	movs	r1, #0
 800bfe2:	6139      	str	r1, [r7, #16]
 800bfe4:	f003 0308 	and.w	r3, r3, #8
 800bfe8:	617b      	str	r3, [r7, #20]
 800bfea:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bfee:	460b      	mov	r3, r1
 800bff0:	4313      	orrs	r3, r2
 800bff2:	d011      	beq.n	800c018 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bff8:	3328      	adds	r3, #40	@ 0x28
 800bffa:	2100      	movs	r1, #0
 800bffc:	4618      	mov	r0, r3
 800bffe:	f001 f9ef 	bl	800d3e0 <RCCEx_PLL3_Config>
 800c002:	4603      	mov	r3, r0
 800c004:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800c008:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d003      	beq.n	800c018 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c010:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c014:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c018:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c020:	2100      	movs	r1, #0
 800c022:	60b9      	str	r1, [r7, #8]
 800c024:	f003 0310 	and.w	r3, r3, #16
 800c028:	60fb      	str	r3, [r7, #12]
 800c02a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c02e:	460b      	mov	r3, r1
 800c030:	4313      	orrs	r3, r2
 800c032:	d011      	beq.n	800c058 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c034:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c038:	3328      	adds	r3, #40	@ 0x28
 800c03a:	2101      	movs	r1, #1
 800c03c:	4618      	mov	r0, r3
 800c03e:	f001 f9cf 	bl	800d3e0 <RCCEx_PLL3_Config>
 800c042:	4603      	mov	r3, r0
 800c044:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800c048:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d003      	beq.n	800c058 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c050:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c054:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c060:	2100      	movs	r1, #0
 800c062:	6039      	str	r1, [r7, #0]
 800c064:	f003 0320 	and.w	r3, r3, #32
 800c068:	607b      	str	r3, [r7, #4]
 800c06a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c06e:	460b      	mov	r3, r1
 800c070:	4313      	orrs	r3, r2
 800c072:	d011      	beq.n	800c098 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c074:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c078:	3328      	adds	r3, #40	@ 0x28
 800c07a:	2102      	movs	r1, #2
 800c07c:	4618      	mov	r0, r3
 800c07e:	f001 f9af 	bl	800d3e0 <RCCEx_PLL3_Config>
 800c082:	4603      	mov	r3, r0
 800c084:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800c088:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d003      	beq.n	800c098 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c090:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c094:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800c098:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d101      	bne.n	800c0a4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	e000      	b.n	800c0a6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800c0a4:	2301      	movs	r3, #1
}
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c0b2:	bf00      	nop
 800c0b4:	58024400 	.word	0x58024400

0800c0b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b090      	sub	sp, #64	@ 0x40
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c0c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0c6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800c0ca:	430b      	orrs	r3, r1
 800c0cc:	f040 8094 	bne.w	800c1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c0d0:	4b9b      	ldr	r3, [pc, #620]	@ (800c340 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c0d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c0d4:	f003 0307 	and.w	r3, r3, #7
 800c0d8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800c0da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0dc:	2b04      	cmp	r3, #4
 800c0de:	f200 8087 	bhi.w	800c1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c0e2:	a201      	add	r2, pc, #4	@ (adr r2, 800c0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c0e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0e8:	0800c0fd 	.word	0x0800c0fd
 800c0ec:	0800c125 	.word	0x0800c125
 800c0f0:	0800c14d 	.word	0x0800c14d
 800c0f4:	0800c1e9 	.word	0x0800c1e9
 800c0f8:	0800c175 	.word	0x0800c175
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c0fc:	4b90      	ldr	r3, [pc, #576]	@ (800c340 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c104:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c108:	d108      	bne.n	800c11c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c10a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c10e:	4618      	mov	r0, r3
 800c110:	f000 ff62 	bl	800cfd8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c116:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c118:	f000 bc93 	b.w	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c11c:	2300      	movs	r3, #0
 800c11e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c120:	f000 bc8f 	b.w	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c124:	4b86      	ldr	r3, [pc, #536]	@ (800c340 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c12c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c130:	d108      	bne.n	800c144 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c132:	f107 0318 	add.w	r3, r7, #24
 800c136:	4618      	mov	r0, r3
 800c138:	f000 fca6 	bl	800ca88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c13c:	69bb      	ldr	r3, [r7, #24]
 800c13e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c140:	f000 bc7f 	b.w	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c144:	2300      	movs	r3, #0
 800c146:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c148:	f000 bc7b 	b.w	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c14c:	4b7c      	ldr	r3, [pc, #496]	@ (800c340 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c154:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c158:	d108      	bne.n	800c16c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c15a:	f107 030c 	add.w	r3, r7, #12
 800c15e:	4618      	mov	r0, r3
 800c160:	f000 fde6 	bl	800cd30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c168:	f000 bc6b 	b.w	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c16c:	2300      	movs	r3, #0
 800c16e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c170:	f000 bc67 	b.w	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c174:	4b72      	ldr	r3, [pc, #456]	@ (800c340 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c178:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c17c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c17e:	4b70      	ldr	r3, [pc, #448]	@ (800c340 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	f003 0304 	and.w	r3, r3, #4
 800c186:	2b04      	cmp	r3, #4
 800c188:	d10c      	bne.n	800c1a4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c18a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d109      	bne.n	800c1a4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c190:	4b6b      	ldr	r3, [pc, #428]	@ (800c340 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	08db      	lsrs	r3, r3, #3
 800c196:	f003 0303 	and.w	r3, r3, #3
 800c19a:	4a6a      	ldr	r2, [pc, #424]	@ (800c344 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800c19c:	fa22 f303 	lsr.w	r3, r2, r3
 800c1a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c1a2:	e01f      	b.n	800c1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c1a4:	4b66      	ldr	r3, [pc, #408]	@ (800c340 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c1ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c1b0:	d106      	bne.n	800c1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c1b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c1b8:	d102      	bne.n	800c1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c1ba:	4b63      	ldr	r3, [pc, #396]	@ (800c348 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800c1bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c1be:	e011      	b.n	800c1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c1c0:	4b5f      	ldr	r3, [pc, #380]	@ (800c340 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c1c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c1cc:	d106      	bne.n	800c1dc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c1ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c1d4:	d102      	bne.n	800c1dc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c1d6:	4b5d      	ldr	r3, [pc, #372]	@ (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c1d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c1da:	e003      	b.n	800c1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c1dc:	2300      	movs	r3, #0
 800c1de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c1e0:	f000 bc2f 	b.w	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c1e4:	f000 bc2d 	b.w	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c1e8:	4b59      	ldr	r3, [pc, #356]	@ (800c350 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c1ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c1ec:	f000 bc29 	b.w	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c1f4:	f000 bc25 	b.w	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c1f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1fc:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800c200:	430b      	orrs	r3, r1
 800c202:	f040 80a7 	bne.w	800c354 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c206:	4b4e      	ldr	r3, [pc, #312]	@ (800c340 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c20a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800c20e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800c210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c212:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c216:	d054      	beq.n	800c2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800c218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c21a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c21e:	f200 808b 	bhi.w	800c338 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c224:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c228:	f000 8083 	beq.w	800c332 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800c22c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c22e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c232:	f200 8081 	bhi.w	800c338 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c238:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c23c:	d02f      	beq.n	800c29e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c23e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c240:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c244:	d878      	bhi.n	800c338 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d004      	beq.n	800c256 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800c24c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c24e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c252:	d012      	beq.n	800c27a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800c254:	e070      	b.n	800c338 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c256:	4b3a      	ldr	r3, [pc, #232]	@ (800c340 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c25e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c262:	d107      	bne.n	800c274 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c264:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c268:	4618      	mov	r0, r3
 800c26a:	f000 feb5 	bl	800cfd8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c26e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c270:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c272:	e3e6      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c274:	2300      	movs	r3, #0
 800c276:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c278:	e3e3      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c27a:	4b31      	ldr	r3, [pc, #196]	@ (800c340 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c282:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c286:	d107      	bne.n	800c298 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c288:	f107 0318 	add.w	r3, r7, #24
 800c28c:	4618      	mov	r0, r3
 800c28e:	f000 fbfb 	bl	800ca88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c292:	69bb      	ldr	r3, [r7, #24]
 800c294:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c296:	e3d4      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c298:	2300      	movs	r3, #0
 800c29a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c29c:	e3d1      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c29e:	4b28      	ldr	r3, [pc, #160]	@ (800c340 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c2a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c2aa:	d107      	bne.n	800c2bc <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c2ac:	f107 030c 	add.w	r3, r7, #12
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	f000 fd3d 	bl	800cd30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2ba:	e3c2      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c2bc:	2300      	movs	r3, #0
 800c2be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c2c0:	e3bf      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c2c2:	4b1f      	ldr	r3, [pc, #124]	@ (800c340 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c2c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c2c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c2ca:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c2cc:	4b1c      	ldr	r3, [pc, #112]	@ (800c340 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	f003 0304 	and.w	r3, r3, #4
 800c2d4:	2b04      	cmp	r3, #4
 800c2d6:	d10c      	bne.n	800c2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800c2d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d109      	bne.n	800c2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c2de:	4b18      	ldr	r3, [pc, #96]	@ (800c340 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	08db      	lsrs	r3, r3, #3
 800c2e4:	f003 0303 	and.w	r3, r3, #3
 800c2e8:	4a16      	ldr	r2, [pc, #88]	@ (800c344 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800c2ea:	fa22 f303 	lsr.w	r3, r2, r3
 800c2ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c2f0:	e01e      	b.n	800c330 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c2f2:	4b13      	ldr	r3, [pc, #76]	@ (800c340 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c2fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c2fe:	d106      	bne.n	800c30e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800c300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c302:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c306:	d102      	bne.n	800c30e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c308:	4b0f      	ldr	r3, [pc, #60]	@ (800c348 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800c30a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c30c:	e010      	b.n	800c330 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c30e:	4b0c      	ldr	r3, [pc, #48]	@ (800c340 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c316:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c31a:	d106      	bne.n	800c32a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800c31c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c31e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c322:	d102      	bne.n	800c32a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c324:	4b09      	ldr	r3, [pc, #36]	@ (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c326:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c328:	e002      	b.n	800c330 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c32a:	2300      	movs	r3, #0
 800c32c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c32e:	e388      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c330:	e387      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c332:	4b07      	ldr	r3, [pc, #28]	@ (800c350 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c334:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c336:	e384      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c338:	2300      	movs	r3, #0
 800c33a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c33c:	e381      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c33e:	bf00      	nop
 800c340:	58024400 	.word	0x58024400
 800c344:	03d09000 	.word	0x03d09000
 800c348:	003d0900 	.word	0x003d0900
 800c34c:	016e3600 	.word	0x016e3600
 800c350:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c354:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c358:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800c35c:	430b      	orrs	r3, r1
 800c35e:	f040 809c 	bne.w	800c49a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c362:	4b9e      	ldr	r3, [pc, #632]	@ (800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c366:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800c36a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800c36c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c36e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c372:	d054      	beq.n	800c41e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800c374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c376:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c37a:	f200 808b 	bhi.w	800c494 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c37e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c380:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c384:	f000 8083 	beq.w	800c48e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800c388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c38a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c38e:	f200 8081 	bhi.w	800c494 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c394:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c398:	d02f      	beq.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800c39a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c39c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c3a0:	d878      	bhi.n	800c494 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c3a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d004      	beq.n	800c3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800c3a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c3ae:	d012      	beq.n	800c3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800c3b0:	e070      	b.n	800c494 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c3b2:	4b8a      	ldr	r3, [pc, #552]	@ (800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c3ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c3be:	d107      	bne.n	800c3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c3c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f000 fe07 	bl	800cfd8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c3ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3ce:	e338      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c3d4:	e335      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c3d6:	4b81      	ldr	r3, [pc, #516]	@ (800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c3de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c3e2:	d107      	bne.n	800c3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c3e4:	f107 0318 	add.w	r3, r7, #24
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f000 fb4d 	bl	800ca88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c3ee:	69bb      	ldr	r3, [r7, #24]
 800c3f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3f2:	e326      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c3f8:	e323      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c3fa:	4b78      	ldr	r3, [pc, #480]	@ (800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c402:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c406:	d107      	bne.n	800c418 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c408:	f107 030c 	add.w	r3, r7, #12
 800c40c:	4618      	mov	r0, r3
 800c40e:	f000 fc8f 	bl	800cd30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c416:	e314      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c418:	2300      	movs	r3, #0
 800c41a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c41c:	e311      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c41e:	4b6f      	ldr	r3, [pc, #444]	@ (800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c422:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c426:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c428:	4b6c      	ldr	r3, [pc, #432]	@ (800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	f003 0304 	and.w	r3, r3, #4
 800c430:	2b04      	cmp	r3, #4
 800c432:	d10c      	bne.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800c434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c436:	2b00      	cmp	r3, #0
 800c438:	d109      	bne.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c43a:	4b68      	ldr	r3, [pc, #416]	@ (800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	08db      	lsrs	r3, r3, #3
 800c440:	f003 0303 	and.w	r3, r3, #3
 800c444:	4a66      	ldr	r2, [pc, #408]	@ (800c5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800c446:	fa22 f303 	lsr.w	r3, r2, r3
 800c44a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c44c:	e01e      	b.n	800c48c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c44e:	4b63      	ldr	r3, [pc, #396]	@ (800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c456:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c45a:	d106      	bne.n	800c46a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800c45c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c45e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c462:	d102      	bne.n	800c46a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c464:	4b5f      	ldr	r3, [pc, #380]	@ (800c5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800c466:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c468:	e010      	b.n	800c48c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c46a:	4b5c      	ldr	r3, [pc, #368]	@ (800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c472:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c476:	d106      	bne.n	800c486 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800c478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c47a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c47e:	d102      	bne.n	800c486 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c480:	4b59      	ldr	r3, [pc, #356]	@ (800c5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c482:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c484:	e002      	b.n	800c48c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c486:	2300      	movs	r3, #0
 800c488:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c48a:	e2da      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c48c:	e2d9      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c48e:	4b57      	ldr	r3, [pc, #348]	@ (800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c490:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c492:	e2d6      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c494:	2300      	movs	r3, #0
 800c496:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c498:	e2d3      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c49a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c49e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800c4a2:	430b      	orrs	r3, r1
 800c4a4:	f040 80a7 	bne.w	800c5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c4a8:	4b4c      	ldr	r3, [pc, #304]	@ (800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c4aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c4ac:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800c4b0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c4b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c4b8:	d055      	beq.n	800c566 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800c4ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c4c0:	f200 8096 	bhi.w	800c5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c4c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4c6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c4ca:	f000 8084 	beq.w	800c5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800c4ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4d0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c4d4:	f200 808c 	bhi.w	800c5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c4d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c4de:	d030      	beq.n	800c542 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800c4e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c4e6:	f200 8083 	bhi.w	800c5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c4ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d004      	beq.n	800c4fa <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800c4f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c4f6:	d012      	beq.n	800c51e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800c4f8:	e07a      	b.n	800c5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c4fa:	4b38      	ldr	r3, [pc, #224]	@ (800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c502:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c506:	d107      	bne.n	800c518 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c508:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c50c:	4618      	mov	r0, r3
 800c50e:	f000 fd63 	bl	800cfd8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c514:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c516:	e294      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c518:	2300      	movs	r3, #0
 800c51a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c51c:	e291      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c51e:	4b2f      	ldr	r3, [pc, #188]	@ (800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c526:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c52a:	d107      	bne.n	800c53c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c52c:	f107 0318 	add.w	r3, r7, #24
 800c530:	4618      	mov	r0, r3
 800c532:	f000 faa9 	bl	800ca88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c536:	69bb      	ldr	r3, [r7, #24]
 800c538:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c53a:	e282      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c53c:	2300      	movs	r3, #0
 800c53e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c540:	e27f      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c542:	4b26      	ldr	r3, [pc, #152]	@ (800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c54a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c54e:	d107      	bne.n	800c560 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c550:	f107 030c 	add.w	r3, r7, #12
 800c554:	4618      	mov	r0, r3
 800c556:	f000 fbeb 	bl	800cd30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c55e:	e270      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c560:	2300      	movs	r3, #0
 800c562:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c564:	e26d      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c566:	4b1d      	ldr	r3, [pc, #116]	@ (800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c56a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c56e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c570:	4b1a      	ldr	r3, [pc, #104]	@ (800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	f003 0304 	and.w	r3, r3, #4
 800c578:	2b04      	cmp	r3, #4
 800c57a:	d10c      	bne.n	800c596 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800c57c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d109      	bne.n	800c596 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c582:	4b16      	ldr	r3, [pc, #88]	@ (800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	08db      	lsrs	r3, r3, #3
 800c588:	f003 0303 	and.w	r3, r3, #3
 800c58c:	4a14      	ldr	r2, [pc, #80]	@ (800c5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800c58e:	fa22 f303 	lsr.w	r3, r2, r3
 800c592:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c594:	e01e      	b.n	800c5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c596:	4b11      	ldr	r3, [pc, #68]	@ (800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c59e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c5a2:	d106      	bne.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800c5a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c5aa:	d102      	bne.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c5ac:	4b0d      	ldr	r3, [pc, #52]	@ (800c5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800c5ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c5b0:	e010      	b.n	800c5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c5b2:	4b0a      	ldr	r3, [pc, #40]	@ (800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c5ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c5be:	d106      	bne.n	800c5ce <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800c5c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c5c6:	d102      	bne.n	800c5ce <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c5c8:	4b07      	ldr	r3, [pc, #28]	@ (800c5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c5ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c5cc:	e002      	b.n	800c5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c5d2:	e236      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c5d4:	e235      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c5d6:	4b05      	ldr	r3, [pc, #20]	@ (800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c5d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c5da:	e232      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c5dc:	58024400 	.word	0x58024400
 800c5e0:	03d09000 	.word	0x03d09000
 800c5e4:	003d0900 	.word	0x003d0900
 800c5e8:	016e3600 	.word	0x016e3600
 800c5ec:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c5f4:	e225      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c5f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5fa:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800c5fe:	430b      	orrs	r3, r1
 800c600:	f040 8085 	bne.w	800c70e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c604:	4b9c      	ldr	r3, [pc, #624]	@ (800c878 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c606:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c608:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800c60c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800c60e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c610:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c614:	d06b      	beq.n	800c6ee <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800c616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c618:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c61c:	d874      	bhi.n	800c708 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c61e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c620:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c624:	d056      	beq.n	800c6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800c626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c628:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c62c:	d86c      	bhi.n	800c708 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c62e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c630:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c634:	d03b      	beq.n	800c6ae <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800c636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c638:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c63c:	d864      	bhi.n	800c708 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c63e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c640:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c644:	d021      	beq.n	800c68a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800c646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c648:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c64c:	d85c      	bhi.n	800c708 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c64e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c650:	2b00      	cmp	r3, #0
 800c652:	d004      	beq.n	800c65e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800c654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c656:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c65a:	d004      	beq.n	800c666 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800c65c:	e054      	b.n	800c708 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c65e:	f7fe fb5f 	bl	800ad20 <HAL_RCC_GetPCLK1Freq>
 800c662:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c664:	e1ed      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c666:	4b84      	ldr	r3, [pc, #528]	@ (800c878 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c66e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c672:	d107      	bne.n	800c684 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c674:	f107 0318 	add.w	r3, r7, #24
 800c678:	4618      	mov	r0, r3
 800c67a:	f000 fa05 	bl	800ca88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c67e:	69fb      	ldr	r3, [r7, #28]
 800c680:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c682:	e1de      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c684:	2300      	movs	r3, #0
 800c686:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c688:	e1db      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c68a:	4b7b      	ldr	r3, [pc, #492]	@ (800c878 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c692:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c696:	d107      	bne.n	800c6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c698:	f107 030c 	add.w	r3, r7, #12
 800c69c:	4618      	mov	r0, r3
 800c69e:	f000 fb47 	bl	800cd30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c6a2:	693b      	ldr	r3, [r7, #16]
 800c6a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6a6:	e1cc      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c6ac:	e1c9      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c6ae:	4b72      	ldr	r3, [pc, #456]	@ (800c878 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	f003 0304 	and.w	r3, r3, #4
 800c6b6:	2b04      	cmp	r3, #4
 800c6b8:	d109      	bne.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c6ba:	4b6f      	ldr	r3, [pc, #444]	@ (800c878 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	08db      	lsrs	r3, r3, #3
 800c6c0:	f003 0303 	and.w	r3, r3, #3
 800c6c4:	4a6d      	ldr	r2, [pc, #436]	@ (800c87c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c6c6:	fa22 f303 	lsr.w	r3, r2, r3
 800c6ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6cc:	e1b9      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c6d2:	e1b6      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c6d4:	4b68      	ldr	r3, [pc, #416]	@ (800c878 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c6dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c6e0:	d102      	bne.n	800c6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800c6e2:	4b67      	ldr	r3, [pc, #412]	@ (800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c6e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6e6:	e1ac      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c6ec:	e1a9      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c6ee:	4b62      	ldr	r3, [pc, #392]	@ (800c878 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c6f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c6fa:	d102      	bne.n	800c702 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800c6fc:	4b61      	ldr	r3, [pc, #388]	@ (800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c6fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c700:	e19f      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c702:	2300      	movs	r3, #0
 800c704:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c706:	e19c      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c708:	2300      	movs	r3, #0
 800c70a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c70c:	e199      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c70e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c712:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800c716:	430b      	orrs	r3, r1
 800c718:	d173      	bne.n	800c802 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c71a:	4b57      	ldr	r3, [pc, #348]	@ (800c878 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c71c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c71e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c722:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c726:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c72a:	d02f      	beq.n	800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800c72c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c72e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c732:	d863      	bhi.n	800c7fc <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800c734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c736:	2b00      	cmp	r3, #0
 800c738:	d004      	beq.n	800c744 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800c73a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c73c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c740:	d012      	beq.n	800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800c742:	e05b      	b.n	800c7fc <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c744:	4b4c      	ldr	r3, [pc, #304]	@ (800c878 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c74c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c750:	d107      	bne.n	800c762 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c752:	f107 0318 	add.w	r3, r7, #24
 800c756:	4618      	mov	r0, r3
 800c758:	f000 f996 	bl	800ca88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c75c:	69bb      	ldr	r3, [r7, #24]
 800c75e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c760:	e16f      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c762:	2300      	movs	r3, #0
 800c764:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c766:	e16c      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c768:	4b43      	ldr	r3, [pc, #268]	@ (800c878 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c770:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c774:	d107      	bne.n	800c786 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c776:	f107 030c 	add.w	r3, r7, #12
 800c77a:	4618      	mov	r0, r3
 800c77c:	f000 fad8 	bl	800cd30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c780:	697b      	ldr	r3, [r7, #20]
 800c782:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c784:	e15d      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c786:	2300      	movs	r3, #0
 800c788:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c78a:	e15a      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c78c:	4b3a      	ldr	r3, [pc, #232]	@ (800c878 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c78e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c790:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c794:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c796:	4b38      	ldr	r3, [pc, #224]	@ (800c878 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	f003 0304 	and.w	r3, r3, #4
 800c79e:	2b04      	cmp	r3, #4
 800c7a0:	d10c      	bne.n	800c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800c7a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d109      	bne.n	800c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c7a8:	4b33      	ldr	r3, [pc, #204]	@ (800c878 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	08db      	lsrs	r3, r3, #3
 800c7ae:	f003 0303 	and.w	r3, r3, #3
 800c7b2:	4a32      	ldr	r2, [pc, #200]	@ (800c87c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c7b4:	fa22 f303 	lsr.w	r3, r2, r3
 800c7b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c7ba:	e01e      	b.n	800c7fa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c7bc:	4b2e      	ldr	r3, [pc, #184]	@ (800c878 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c7c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c7c8:	d106      	bne.n	800c7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800c7ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c7d0:	d102      	bne.n	800c7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c7d2:	4b2b      	ldr	r3, [pc, #172]	@ (800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c7d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c7d6:	e010      	b.n	800c7fa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c7d8:	4b27      	ldr	r3, [pc, #156]	@ (800c878 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c7e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c7e4:	d106      	bne.n	800c7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800c7e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c7ec:	d102      	bne.n	800c7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c7ee:	4b25      	ldr	r3, [pc, #148]	@ (800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c7f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c7f2:	e002      	b.n	800c7fa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c7f8:	e123      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c7fa:	e122      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c800:	e11f      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c802:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c806:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800c80a:	430b      	orrs	r3, r1
 800c80c:	d13c      	bne.n	800c888 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c80e:	4b1a      	ldr	r3, [pc, #104]	@ (800c878 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c812:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c816:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d004      	beq.n	800c828 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800c81e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c820:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c824:	d012      	beq.n	800c84c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800c826:	e023      	b.n	800c870 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c828:	4b13      	ldr	r3, [pc, #76]	@ (800c878 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c830:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c834:	d107      	bne.n	800c846 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c836:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c83a:	4618      	mov	r0, r3
 800c83c:	f000 fbcc 	bl	800cfd8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c842:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c844:	e0fd      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c846:	2300      	movs	r3, #0
 800c848:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c84a:	e0fa      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c84c:	4b0a      	ldr	r3, [pc, #40]	@ (800c878 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c854:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c858:	d107      	bne.n	800c86a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c85a:	f107 0318 	add.w	r3, r7, #24
 800c85e:	4618      	mov	r0, r3
 800c860:	f000 f912 	bl	800ca88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c864:	6a3b      	ldr	r3, [r7, #32]
 800c866:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c868:	e0eb      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c86a:	2300      	movs	r3, #0
 800c86c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c86e:	e0e8      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c870:	2300      	movs	r3, #0
 800c872:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c874:	e0e5      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c876:	bf00      	nop
 800c878:	58024400 	.word	0x58024400
 800c87c:	03d09000 	.word	0x03d09000
 800c880:	003d0900 	.word	0x003d0900
 800c884:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c888:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c88c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800c890:	430b      	orrs	r3, r1
 800c892:	f040 8085 	bne.w	800c9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c896:	4b6d      	ldr	r3, [pc, #436]	@ (800ca4c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c89a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800c89e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c8a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c8a6:	d06b      	beq.n	800c980 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800c8a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c8ae:	d874      	bhi.n	800c99a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c8b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c8b6:	d056      	beq.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800c8b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c8be:	d86c      	bhi.n	800c99a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c8c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c8c6:	d03b      	beq.n	800c940 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800c8c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c8ce:	d864      	bhi.n	800c99a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c8d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c8d6:	d021      	beq.n	800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800c8d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c8de:	d85c      	bhi.n	800c99a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c8e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d004      	beq.n	800c8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800c8e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c8ec:	d004      	beq.n	800c8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800c8ee:	e054      	b.n	800c99a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c8f0:	f000 f8b4 	bl	800ca5c <HAL_RCCEx_GetD3PCLK1Freq>
 800c8f4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c8f6:	e0a4      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c8f8:	4b54      	ldr	r3, [pc, #336]	@ (800ca4c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c900:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c904:	d107      	bne.n	800c916 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c906:	f107 0318 	add.w	r3, r7, #24
 800c90a:	4618      	mov	r0, r3
 800c90c:	f000 f8bc 	bl	800ca88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c910:	69fb      	ldr	r3, [r7, #28]
 800c912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c914:	e095      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c916:	2300      	movs	r3, #0
 800c918:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c91a:	e092      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c91c:	4b4b      	ldr	r3, [pc, #300]	@ (800ca4c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c924:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c928:	d107      	bne.n	800c93a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c92a:	f107 030c 	add.w	r3, r7, #12
 800c92e:	4618      	mov	r0, r3
 800c930:	f000 f9fe 	bl	800cd30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c934:	693b      	ldr	r3, [r7, #16]
 800c936:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c938:	e083      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c93a:	2300      	movs	r3, #0
 800c93c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c93e:	e080      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c940:	4b42      	ldr	r3, [pc, #264]	@ (800ca4c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	f003 0304 	and.w	r3, r3, #4
 800c948:	2b04      	cmp	r3, #4
 800c94a:	d109      	bne.n	800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c94c:	4b3f      	ldr	r3, [pc, #252]	@ (800ca4c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	08db      	lsrs	r3, r3, #3
 800c952:	f003 0303 	and.w	r3, r3, #3
 800c956:	4a3e      	ldr	r2, [pc, #248]	@ (800ca50 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800c958:	fa22 f303 	lsr.w	r3, r2, r3
 800c95c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c95e:	e070      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c960:	2300      	movs	r3, #0
 800c962:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c964:	e06d      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c966:	4b39      	ldr	r3, [pc, #228]	@ (800ca4c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c96e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c972:	d102      	bne.n	800c97a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800c974:	4b37      	ldr	r3, [pc, #220]	@ (800ca54 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c976:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c978:	e063      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c97a:	2300      	movs	r3, #0
 800c97c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c97e:	e060      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c980:	4b32      	ldr	r3, [pc, #200]	@ (800ca4c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c988:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c98c:	d102      	bne.n	800c994 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800c98e:	4b32      	ldr	r3, [pc, #200]	@ (800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c990:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c992:	e056      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c994:	2300      	movs	r3, #0
 800c996:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c998:	e053      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c99a:	2300      	movs	r3, #0
 800c99c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c99e:	e050      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c9a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9a4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800c9a8:	430b      	orrs	r3, r1
 800c9aa:	d148      	bne.n	800ca3e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c9ac:	4b27      	ldr	r3, [pc, #156]	@ (800ca4c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c9ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c9b0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c9b4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c9b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c9bc:	d02a      	beq.n	800ca14 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800c9be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c9c4:	d838      	bhi.n	800ca38 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800c9c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d004      	beq.n	800c9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800c9cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c9d2:	d00d      	beq.n	800c9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800c9d4:	e030      	b.n	800ca38 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c9d6:	4b1d      	ldr	r3, [pc, #116]	@ (800ca4c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c9de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c9e2:	d102      	bne.n	800c9ea <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800c9e4:	4b1c      	ldr	r3, [pc, #112]	@ (800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c9e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9e8:	e02b      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9ee:	e028      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c9f0:	4b16      	ldr	r3, [pc, #88]	@ (800ca4c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c9f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c9fc:	d107      	bne.n	800ca0e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c9fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ca02:	4618      	mov	r0, r3
 800ca04:	f000 fae8 	bl	800cfd8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ca08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca0c:	e019      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca12:	e016      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ca14:	4b0d      	ldr	r3, [pc, #52]	@ (800ca4c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ca1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ca20:	d107      	bne.n	800ca32 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca22:	f107 0318 	add.w	r3, r7, #24
 800ca26:	4618      	mov	r0, r3
 800ca28:	f000 f82e 	bl	800ca88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ca2c:	69fb      	ldr	r3, [r7, #28]
 800ca2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca30:	e007      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ca32:	2300      	movs	r3, #0
 800ca34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca36:	e004      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800ca38:	2300      	movs	r3, #0
 800ca3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca3c:	e001      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800ca42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ca44:	4618      	mov	r0, r3
 800ca46:	3740      	adds	r7, #64	@ 0x40
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}
 800ca4c:	58024400 	.word	0x58024400
 800ca50:	03d09000 	.word	0x03d09000
 800ca54:	003d0900 	.word	0x003d0900
 800ca58:	016e3600 	.word	0x016e3600

0800ca5c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ca60:	f7fe f92e 	bl	800acc0 <HAL_RCC_GetHCLKFreq>
 800ca64:	4602      	mov	r2, r0
 800ca66:	4b06      	ldr	r3, [pc, #24]	@ (800ca80 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ca68:	6a1b      	ldr	r3, [r3, #32]
 800ca6a:	091b      	lsrs	r3, r3, #4
 800ca6c:	f003 0307 	and.w	r3, r3, #7
 800ca70:	4904      	ldr	r1, [pc, #16]	@ (800ca84 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ca72:	5ccb      	ldrb	r3, [r1, r3]
 800ca74:	f003 031f 	and.w	r3, r3, #31
 800ca78:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	bd80      	pop	{r7, pc}
 800ca80:	58024400 	.word	0x58024400
 800ca84:	08014948 	.word	0x08014948

0800ca88 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ca88:	b480      	push	{r7}
 800ca8a:	b089      	sub	sp, #36	@ 0x24
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ca90:	4ba1      	ldr	r3, [pc, #644]	@ (800cd18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca94:	f003 0303 	and.w	r3, r3, #3
 800ca98:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ca9a:	4b9f      	ldr	r3, [pc, #636]	@ (800cd18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca9e:	0b1b      	lsrs	r3, r3, #12
 800caa0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800caa4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800caa6:	4b9c      	ldr	r3, [pc, #624]	@ (800cd18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800caa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800caaa:	091b      	lsrs	r3, r3, #4
 800caac:	f003 0301 	and.w	r3, r3, #1
 800cab0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800cab2:	4b99      	ldr	r3, [pc, #612]	@ (800cd18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cab6:	08db      	lsrs	r3, r3, #3
 800cab8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cabc:	693a      	ldr	r2, [r7, #16]
 800cabe:	fb02 f303 	mul.w	r3, r2, r3
 800cac2:	ee07 3a90 	vmov	s15, r3
 800cac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800cace:	697b      	ldr	r3, [r7, #20]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	f000 8111 	beq.w	800ccf8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800cad6:	69bb      	ldr	r3, [r7, #24]
 800cad8:	2b02      	cmp	r3, #2
 800cada:	f000 8083 	beq.w	800cbe4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800cade:	69bb      	ldr	r3, [r7, #24]
 800cae0:	2b02      	cmp	r3, #2
 800cae2:	f200 80a1 	bhi.w	800cc28 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800cae6:	69bb      	ldr	r3, [r7, #24]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d003      	beq.n	800caf4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800caec:	69bb      	ldr	r3, [r7, #24]
 800caee:	2b01      	cmp	r3, #1
 800caf0:	d056      	beq.n	800cba0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800caf2:	e099      	b.n	800cc28 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800caf4:	4b88      	ldr	r3, [pc, #544]	@ (800cd18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	f003 0320 	and.w	r3, r3, #32
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d02d      	beq.n	800cb5c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb00:	4b85      	ldr	r3, [pc, #532]	@ (800cd18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	08db      	lsrs	r3, r3, #3
 800cb06:	f003 0303 	and.w	r3, r3, #3
 800cb0a:	4a84      	ldr	r2, [pc, #528]	@ (800cd1c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800cb0c:	fa22 f303 	lsr.w	r3, r2, r3
 800cb10:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cb12:	68bb      	ldr	r3, [r7, #8]
 800cb14:	ee07 3a90 	vmov	s15, r3
 800cb18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb1c:	697b      	ldr	r3, [r7, #20]
 800cb1e:	ee07 3a90 	vmov	s15, r3
 800cb22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb2a:	4b7b      	ldr	r3, [pc, #492]	@ (800cd18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb32:	ee07 3a90 	vmov	s15, r3
 800cb36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb3e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800cd20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cb42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cb4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb56:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cb5a:	e087      	b.n	800cc6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cb5c:	697b      	ldr	r3, [r7, #20]
 800cb5e:	ee07 3a90 	vmov	s15, r3
 800cb62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb66:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800cd24 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800cb6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb6e:	4b6a      	ldr	r3, [pc, #424]	@ (800cd18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb76:	ee07 3a90 	vmov	s15, r3
 800cb7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb82:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800cd20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cb86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cb92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb9e:	e065      	b.n	800cc6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cba0:	697b      	ldr	r3, [r7, #20]
 800cba2:	ee07 3a90 	vmov	s15, r3
 800cba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbaa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800cd28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cbae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbb2:	4b59      	ldr	r3, [pc, #356]	@ (800cd18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cbb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbba:	ee07 3a90 	vmov	s15, r3
 800cbbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbc2:	ed97 6a03 	vldr	s12, [r7, #12]
 800cbc6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800cd20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cbca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cbd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cbe2:	e043      	b.n	800cc6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cbe4:	697b      	ldr	r3, [r7, #20]
 800cbe6:	ee07 3a90 	vmov	s15, r3
 800cbea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800cd2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800cbf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbf6:	4b48      	ldr	r3, [pc, #288]	@ (800cd18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cbf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbfe:	ee07 3a90 	vmov	s15, r3
 800cc02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc06:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc0a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800cd20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cc0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cc1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc26:	e021      	b.n	800cc6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cc28:	697b      	ldr	r3, [r7, #20]
 800cc2a:	ee07 3a90 	vmov	s15, r3
 800cc2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc32:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800cd28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cc36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc3a:	4b37      	ldr	r3, [pc, #220]	@ (800cd18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc42:	ee07 3a90 	vmov	s15, r3
 800cc46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc4a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc4e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800cd20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cc52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cc5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc6a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800cc6c:	4b2a      	ldr	r3, [pc, #168]	@ (800cd18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc70:	0a5b      	lsrs	r3, r3, #9
 800cc72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc76:	ee07 3a90 	vmov	s15, r3
 800cc7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cc82:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc86:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc92:	ee17 2a90 	vmov	r2, s15
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800cc9a:	4b1f      	ldr	r3, [pc, #124]	@ (800cd18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc9e:	0c1b      	lsrs	r3, r3, #16
 800cca0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cca4:	ee07 3a90 	vmov	s15, r3
 800cca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ccb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ccb4:	edd7 6a07 	vldr	s13, [r7, #28]
 800ccb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ccbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccc0:	ee17 2a90 	vmov	r2, s15
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ccc8:	4b13      	ldr	r3, [pc, #76]	@ (800cd18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ccca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cccc:	0e1b      	lsrs	r3, r3, #24
 800ccce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ccd2:	ee07 3a90 	vmov	s15, r3
 800ccd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ccde:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cce2:	edd7 6a07 	vldr	s13, [r7, #28]
 800cce6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ccea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccee:	ee17 2a90 	vmov	r2, s15
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ccf6:	e008      	b.n	800cd0a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	2200      	movs	r2, #0
 800cd02:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2200      	movs	r2, #0
 800cd08:	609a      	str	r2, [r3, #8]
}
 800cd0a:	bf00      	nop
 800cd0c:	3724      	adds	r7, #36	@ 0x24
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd14:	4770      	bx	lr
 800cd16:	bf00      	nop
 800cd18:	58024400 	.word	0x58024400
 800cd1c:	03d09000 	.word	0x03d09000
 800cd20:	46000000 	.word	0x46000000
 800cd24:	4c742400 	.word	0x4c742400
 800cd28:	4a742400 	.word	0x4a742400
 800cd2c:	4bb71b00 	.word	0x4bb71b00

0800cd30 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800cd30:	b480      	push	{r7}
 800cd32:	b089      	sub	sp, #36	@ 0x24
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cd38:	4ba1      	ldr	r3, [pc, #644]	@ (800cfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd3c:	f003 0303 	and.w	r3, r3, #3
 800cd40:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800cd42:	4b9f      	ldr	r3, [pc, #636]	@ (800cfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd46:	0d1b      	lsrs	r3, r3, #20
 800cd48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cd4c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cd4e:	4b9c      	ldr	r3, [pc, #624]	@ (800cfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd52:	0a1b      	lsrs	r3, r3, #8
 800cd54:	f003 0301 	and.w	r3, r3, #1
 800cd58:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800cd5a:	4b99      	ldr	r3, [pc, #612]	@ (800cfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd5e:	08db      	lsrs	r3, r3, #3
 800cd60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cd64:	693a      	ldr	r2, [r7, #16]
 800cd66:	fb02 f303 	mul.w	r3, r2, r3
 800cd6a:	ee07 3a90 	vmov	s15, r3
 800cd6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd72:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800cd76:	697b      	ldr	r3, [r7, #20]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	f000 8111 	beq.w	800cfa0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800cd7e:	69bb      	ldr	r3, [r7, #24]
 800cd80:	2b02      	cmp	r3, #2
 800cd82:	f000 8083 	beq.w	800ce8c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800cd86:	69bb      	ldr	r3, [r7, #24]
 800cd88:	2b02      	cmp	r3, #2
 800cd8a:	f200 80a1 	bhi.w	800ced0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800cd8e:	69bb      	ldr	r3, [r7, #24]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d003      	beq.n	800cd9c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800cd94:	69bb      	ldr	r3, [r7, #24]
 800cd96:	2b01      	cmp	r3, #1
 800cd98:	d056      	beq.n	800ce48 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800cd9a:	e099      	b.n	800ced0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cd9c:	4b88      	ldr	r3, [pc, #544]	@ (800cfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	f003 0320 	and.w	r3, r3, #32
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d02d      	beq.n	800ce04 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cda8:	4b85      	ldr	r3, [pc, #532]	@ (800cfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	08db      	lsrs	r3, r3, #3
 800cdae:	f003 0303 	and.w	r3, r3, #3
 800cdb2:	4a84      	ldr	r2, [pc, #528]	@ (800cfc4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800cdb4:	fa22 f303 	lsr.w	r3, r2, r3
 800cdb8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cdba:	68bb      	ldr	r3, [r7, #8]
 800cdbc:	ee07 3a90 	vmov	s15, r3
 800cdc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdc4:	697b      	ldr	r3, [r7, #20]
 800cdc6:	ee07 3a90 	vmov	s15, r3
 800cdca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cdd2:	4b7b      	ldr	r3, [pc, #492]	@ (800cfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cdd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdda:	ee07 3a90 	vmov	s15, r3
 800cdde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cde2:	ed97 6a03 	vldr	s12, [r7, #12]
 800cde6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800cfc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cdea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cdee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cdf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cdf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cdfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdfe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ce02:	e087      	b.n	800cf14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ce04:	697b      	ldr	r3, [r7, #20]
 800ce06:	ee07 3a90 	vmov	s15, r3
 800ce0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce0e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800cfcc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ce12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce16:	4b6a      	ldr	r3, [pc, #424]	@ (800cfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce1e:	ee07 3a90 	vmov	s15, r3
 800ce22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce26:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce2a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800cfc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ce2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ce3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce46:	e065      	b.n	800cf14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ce48:	697b      	ldr	r3, [r7, #20]
 800ce4a:	ee07 3a90 	vmov	s15, r3
 800ce4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce52:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800cfd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ce56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce5a:	4b59      	ldr	r3, [pc, #356]	@ (800cfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce62:	ee07 3a90 	vmov	s15, r3
 800ce66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce6e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800cfc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ce72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ce7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce8a:	e043      	b.n	800cf14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ce8c:	697b      	ldr	r3, [r7, #20]
 800ce8e:	ee07 3a90 	vmov	s15, r3
 800ce92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce96:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800cfd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ce9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce9e:	4b48      	ldr	r3, [pc, #288]	@ (800cfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cea6:	ee07 3a90 	vmov	s15, r3
 800ceaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ceae:	ed97 6a03 	vldr	s12, [r7, #12]
 800ceb2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800cfc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ceb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ceba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cebe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ceca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cece:	e021      	b.n	800cf14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ced0:	697b      	ldr	r3, [r7, #20]
 800ced2:	ee07 3a90 	vmov	s15, r3
 800ced6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ceda:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800cfd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cee2:	4b37      	ldr	r3, [pc, #220]	@ (800cfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ceea:	ee07 3a90 	vmov	s15, r3
 800ceee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cef2:	ed97 6a03 	vldr	s12, [r7, #12]
 800cef6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800cfc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cefa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cefe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cf06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf12:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800cf14:	4b2a      	ldr	r3, [pc, #168]	@ (800cfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf18:	0a5b      	lsrs	r3, r3, #9
 800cf1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cf1e:	ee07 3a90 	vmov	s15, r3
 800cf22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cf2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cf2e:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf3a:	ee17 2a90 	vmov	r2, s15
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800cf42:	4b1f      	ldr	r3, [pc, #124]	@ (800cfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf46:	0c1b      	lsrs	r3, r3, #16
 800cf48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cf4c:	ee07 3a90 	vmov	s15, r3
 800cf50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf54:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cf58:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cf5c:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf68:	ee17 2a90 	vmov	r2, s15
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800cf70:	4b13      	ldr	r3, [pc, #76]	@ (800cfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf74:	0e1b      	lsrs	r3, r3, #24
 800cf76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cf7a:	ee07 3a90 	vmov	s15, r3
 800cf7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cf86:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cf8a:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf96:	ee17 2a90 	vmov	r2, s15
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cf9e:	e008      	b.n	800cfb2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	2200      	movs	r2, #0
 800cfb0:	609a      	str	r2, [r3, #8]
}
 800cfb2:	bf00      	nop
 800cfb4:	3724      	adds	r7, #36	@ 0x24
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbc:	4770      	bx	lr
 800cfbe:	bf00      	nop
 800cfc0:	58024400 	.word	0x58024400
 800cfc4:	03d09000 	.word	0x03d09000
 800cfc8:	46000000 	.word	0x46000000
 800cfcc:	4c742400 	.word	0x4c742400
 800cfd0:	4a742400 	.word	0x4a742400
 800cfd4:	4bb71b00 	.word	0x4bb71b00

0800cfd8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800cfd8:	b480      	push	{r7}
 800cfda:	b089      	sub	sp, #36	@ 0x24
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cfe0:	4ba0      	ldr	r3, [pc, #640]	@ (800d264 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cfe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cfe4:	f003 0303 	and.w	r3, r3, #3
 800cfe8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800cfea:	4b9e      	ldr	r3, [pc, #632]	@ (800d264 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cfec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cfee:	091b      	lsrs	r3, r3, #4
 800cff0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cff4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800cff6:	4b9b      	ldr	r3, [pc, #620]	@ (800d264 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cffa:	f003 0301 	and.w	r3, r3, #1
 800cffe:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d000:	4b98      	ldr	r3, [pc, #608]	@ (800d264 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d002:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d004:	08db      	lsrs	r3, r3, #3
 800d006:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d00a:	693a      	ldr	r2, [r7, #16]
 800d00c:	fb02 f303 	mul.w	r3, r2, r3
 800d010:	ee07 3a90 	vmov	s15, r3
 800d014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d018:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d01c:	697b      	ldr	r3, [r7, #20]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	f000 8111 	beq.w	800d246 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d024:	69bb      	ldr	r3, [r7, #24]
 800d026:	2b02      	cmp	r3, #2
 800d028:	f000 8083 	beq.w	800d132 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d02c:	69bb      	ldr	r3, [r7, #24]
 800d02e:	2b02      	cmp	r3, #2
 800d030:	f200 80a1 	bhi.w	800d176 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d034:	69bb      	ldr	r3, [r7, #24]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d003      	beq.n	800d042 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d03a:	69bb      	ldr	r3, [r7, #24]
 800d03c:	2b01      	cmp	r3, #1
 800d03e:	d056      	beq.n	800d0ee <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d040:	e099      	b.n	800d176 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d042:	4b88      	ldr	r3, [pc, #544]	@ (800d264 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	f003 0320 	and.w	r3, r3, #32
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d02d      	beq.n	800d0aa <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d04e:	4b85      	ldr	r3, [pc, #532]	@ (800d264 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	08db      	lsrs	r3, r3, #3
 800d054:	f003 0303 	and.w	r3, r3, #3
 800d058:	4a83      	ldr	r2, [pc, #524]	@ (800d268 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d05a:	fa22 f303 	lsr.w	r3, r2, r3
 800d05e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d060:	68bb      	ldr	r3, [r7, #8]
 800d062:	ee07 3a90 	vmov	s15, r3
 800d066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d06a:	697b      	ldr	r3, [r7, #20]
 800d06c:	ee07 3a90 	vmov	s15, r3
 800d070:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d074:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d078:	4b7a      	ldr	r3, [pc, #488]	@ (800d264 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d07a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d07c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d080:	ee07 3a90 	vmov	s15, r3
 800d084:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d088:	ed97 6a03 	vldr	s12, [r7, #12]
 800d08c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800d26c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d090:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d094:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d098:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d09c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0a4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d0a8:	e087      	b.n	800d1ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d0aa:	697b      	ldr	r3, [r7, #20]
 800d0ac:	ee07 3a90 	vmov	s15, r3
 800d0b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0b4:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800d270 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d0b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0bc:	4b69      	ldr	r3, [pc, #420]	@ (800d264 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d0be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d0c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0c4:	ee07 3a90 	vmov	s15, r3
 800d0c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0cc:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0d0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800d26c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d0d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d0e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d0ec:	e065      	b.n	800d1ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d0ee:	697b      	ldr	r3, [r7, #20]
 800d0f0:	ee07 3a90 	vmov	s15, r3
 800d0f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0f8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800d274 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d0fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d100:	4b58      	ldr	r3, [pc, #352]	@ (800d264 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d104:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d108:	ee07 3a90 	vmov	s15, r3
 800d10c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d110:	ed97 6a03 	vldr	s12, [r7, #12]
 800d114:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800d26c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d118:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d11c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d120:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d124:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d128:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d12c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d130:	e043      	b.n	800d1ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d132:	697b      	ldr	r3, [r7, #20]
 800d134:	ee07 3a90 	vmov	s15, r3
 800d138:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d13c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800d278 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d140:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d144:	4b47      	ldr	r3, [pc, #284]	@ (800d264 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d14c:	ee07 3a90 	vmov	s15, r3
 800d150:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d154:	ed97 6a03 	vldr	s12, [r7, #12]
 800d158:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800d26c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d15c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d160:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d164:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d168:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d16c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d170:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d174:	e021      	b.n	800d1ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d176:	697b      	ldr	r3, [r7, #20]
 800d178:	ee07 3a90 	vmov	s15, r3
 800d17c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d180:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800d270 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d184:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d188:	4b36      	ldr	r3, [pc, #216]	@ (800d264 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d18a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d18c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d190:	ee07 3a90 	vmov	s15, r3
 800d194:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d198:	ed97 6a03 	vldr	s12, [r7, #12]
 800d19c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800d26c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d1a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d1ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d1b8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d1ba:	4b2a      	ldr	r3, [pc, #168]	@ (800d264 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d1bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1be:	0a5b      	lsrs	r3, r3, #9
 800d1c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d1c4:	ee07 3a90 	vmov	s15, r3
 800d1c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d1d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d1d4:	edd7 6a07 	vldr	s13, [r7, #28]
 800d1d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d1dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d1e0:	ee17 2a90 	vmov	r2, s15
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d1e8:	4b1e      	ldr	r3, [pc, #120]	@ (800d264 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d1ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1ec:	0c1b      	lsrs	r3, r3, #16
 800d1ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d1f2:	ee07 3a90 	vmov	s15, r3
 800d1f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d1fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d202:	edd7 6a07 	vldr	s13, [r7, #28]
 800d206:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d20a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d20e:	ee17 2a90 	vmov	r2, s15
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d216:	4b13      	ldr	r3, [pc, #76]	@ (800d264 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d21a:	0e1b      	lsrs	r3, r3, #24
 800d21c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d220:	ee07 3a90 	vmov	s15, r3
 800d224:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d228:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d22c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d230:	edd7 6a07 	vldr	s13, [r7, #28]
 800d234:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d238:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d23c:	ee17 2a90 	vmov	r2, s15
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d244:	e008      	b.n	800d258 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	2200      	movs	r2, #0
 800d24a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	2200      	movs	r2, #0
 800d250:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	2200      	movs	r2, #0
 800d256:	609a      	str	r2, [r3, #8]
}
 800d258:	bf00      	nop
 800d25a:	3724      	adds	r7, #36	@ 0x24
 800d25c:	46bd      	mov	sp, r7
 800d25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d262:	4770      	bx	lr
 800d264:	58024400 	.word	0x58024400
 800d268:	03d09000 	.word	0x03d09000
 800d26c:	46000000 	.word	0x46000000
 800d270:	4c742400 	.word	0x4c742400
 800d274:	4a742400 	.word	0x4a742400
 800d278:	4bb71b00 	.word	0x4bb71b00

0800d27c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b084      	sub	sp, #16
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
 800d284:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d286:	2300      	movs	r3, #0
 800d288:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d28a:	4b53      	ldr	r3, [pc, #332]	@ (800d3d8 <RCCEx_PLL2_Config+0x15c>)
 800d28c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d28e:	f003 0303 	and.w	r3, r3, #3
 800d292:	2b03      	cmp	r3, #3
 800d294:	d101      	bne.n	800d29a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d296:	2301      	movs	r3, #1
 800d298:	e099      	b.n	800d3ce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d29a:	4b4f      	ldr	r3, [pc, #316]	@ (800d3d8 <RCCEx_PLL2_Config+0x15c>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	4a4e      	ldr	r2, [pc, #312]	@ (800d3d8 <RCCEx_PLL2_Config+0x15c>)
 800d2a0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d2a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d2a6:	f7f6 fc0d 	bl	8003ac4 <HAL_GetTick>
 800d2aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d2ac:	e008      	b.n	800d2c0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d2ae:	f7f6 fc09 	bl	8003ac4 <HAL_GetTick>
 800d2b2:	4602      	mov	r2, r0
 800d2b4:	68bb      	ldr	r3, [r7, #8]
 800d2b6:	1ad3      	subs	r3, r2, r3
 800d2b8:	2b02      	cmp	r3, #2
 800d2ba:	d901      	bls.n	800d2c0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d2bc:	2303      	movs	r3, #3
 800d2be:	e086      	b.n	800d3ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d2c0:	4b45      	ldr	r3, [pc, #276]	@ (800d3d8 <RCCEx_PLL2_Config+0x15c>)
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d1f0      	bne.n	800d2ae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d2cc:	4b42      	ldr	r3, [pc, #264]	@ (800d3d8 <RCCEx_PLL2_Config+0x15c>)
 800d2ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2d0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	031b      	lsls	r3, r3, #12
 800d2da:	493f      	ldr	r1, [pc, #252]	@ (800d3d8 <RCCEx_PLL2_Config+0x15c>)
 800d2dc:	4313      	orrs	r3, r2
 800d2de:	628b      	str	r3, [r1, #40]	@ 0x28
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	685b      	ldr	r3, [r3, #4]
 800d2e4:	3b01      	subs	r3, #1
 800d2e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	689b      	ldr	r3, [r3, #8]
 800d2ee:	3b01      	subs	r3, #1
 800d2f0:	025b      	lsls	r3, r3, #9
 800d2f2:	b29b      	uxth	r3, r3
 800d2f4:	431a      	orrs	r2, r3
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	68db      	ldr	r3, [r3, #12]
 800d2fa:	3b01      	subs	r3, #1
 800d2fc:	041b      	lsls	r3, r3, #16
 800d2fe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d302:	431a      	orrs	r2, r3
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	691b      	ldr	r3, [r3, #16]
 800d308:	3b01      	subs	r3, #1
 800d30a:	061b      	lsls	r3, r3, #24
 800d30c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d310:	4931      	ldr	r1, [pc, #196]	@ (800d3d8 <RCCEx_PLL2_Config+0x15c>)
 800d312:	4313      	orrs	r3, r2
 800d314:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d316:	4b30      	ldr	r3, [pc, #192]	@ (800d3d8 <RCCEx_PLL2_Config+0x15c>)
 800d318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d31a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	695b      	ldr	r3, [r3, #20]
 800d322:	492d      	ldr	r1, [pc, #180]	@ (800d3d8 <RCCEx_PLL2_Config+0x15c>)
 800d324:	4313      	orrs	r3, r2
 800d326:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d328:	4b2b      	ldr	r3, [pc, #172]	@ (800d3d8 <RCCEx_PLL2_Config+0x15c>)
 800d32a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d32c:	f023 0220 	bic.w	r2, r3, #32
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	699b      	ldr	r3, [r3, #24]
 800d334:	4928      	ldr	r1, [pc, #160]	@ (800d3d8 <RCCEx_PLL2_Config+0x15c>)
 800d336:	4313      	orrs	r3, r2
 800d338:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d33a:	4b27      	ldr	r3, [pc, #156]	@ (800d3d8 <RCCEx_PLL2_Config+0x15c>)
 800d33c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d33e:	4a26      	ldr	r2, [pc, #152]	@ (800d3d8 <RCCEx_PLL2_Config+0x15c>)
 800d340:	f023 0310 	bic.w	r3, r3, #16
 800d344:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d346:	4b24      	ldr	r3, [pc, #144]	@ (800d3d8 <RCCEx_PLL2_Config+0x15c>)
 800d348:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d34a:	4b24      	ldr	r3, [pc, #144]	@ (800d3dc <RCCEx_PLL2_Config+0x160>)
 800d34c:	4013      	ands	r3, r2
 800d34e:	687a      	ldr	r2, [r7, #4]
 800d350:	69d2      	ldr	r2, [r2, #28]
 800d352:	00d2      	lsls	r2, r2, #3
 800d354:	4920      	ldr	r1, [pc, #128]	@ (800d3d8 <RCCEx_PLL2_Config+0x15c>)
 800d356:	4313      	orrs	r3, r2
 800d358:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d35a:	4b1f      	ldr	r3, [pc, #124]	@ (800d3d8 <RCCEx_PLL2_Config+0x15c>)
 800d35c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d35e:	4a1e      	ldr	r2, [pc, #120]	@ (800d3d8 <RCCEx_PLL2_Config+0x15c>)
 800d360:	f043 0310 	orr.w	r3, r3, #16
 800d364:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d106      	bne.n	800d37a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d36c:	4b1a      	ldr	r3, [pc, #104]	@ (800d3d8 <RCCEx_PLL2_Config+0x15c>)
 800d36e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d370:	4a19      	ldr	r2, [pc, #100]	@ (800d3d8 <RCCEx_PLL2_Config+0x15c>)
 800d372:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d376:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d378:	e00f      	b.n	800d39a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	2b01      	cmp	r3, #1
 800d37e:	d106      	bne.n	800d38e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d380:	4b15      	ldr	r3, [pc, #84]	@ (800d3d8 <RCCEx_PLL2_Config+0x15c>)
 800d382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d384:	4a14      	ldr	r2, [pc, #80]	@ (800d3d8 <RCCEx_PLL2_Config+0x15c>)
 800d386:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d38a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d38c:	e005      	b.n	800d39a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d38e:	4b12      	ldr	r3, [pc, #72]	@ (800d3d8 <RCCEx_PLL2_Config+0x15c>)
 800d390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d392:	4a11      	ldr	r2, [pc, #68]	@ (800d3d8 <RCCEx_PLL2_Config+0x15c>)
 800d394:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d398:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d39a:	4b0f      	ldr	r3, [pc, #60]	@ (800d3d8 <RCCEx_PLL2_Config+0x15c>)
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	4a0e      	ldr	r2, [pc, #56]	@ (800d3d8 <RCCEx_PLL2_Config+0x15c>)
 800d3a0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d3a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d3a6:	f7f6 fb8d 	bl	8003ac4 <HAL_GetTick>
 800d3aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d3ac:	e008      	b.n	800d3c0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d3ae:	f7f6 fb89 	bl	8003ac4 <HAL_GetTick>
 800d3b2:	4602      	mov	r2, r0
 800d3b4:	68bb      	ldr	r3, [r7, #8]
 800d3b6:	1ad3      	subs	r3, r2, r3
 800d3b8:	2b02      	cmp	r3, #2
 800d3ba:	d901      	bls.n	800d3c0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d3bc:	2303      	movs	r3, #3
 800d3be:	e006      	b.n	800d3ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d3c0:	4b05      	ldr	r3, [pc, #20]	@ (800d3d8 <RCCEx_PLL2_Config+0x15c>)
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d0f0      	beq.n	800d3ae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d3cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	3710      	adds	r7, #16
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	bd80      	pop	{r7, pc}
 800d3d6:	bf00      	nop
 800d3d8:	58024400 	.word	0x58024400
 800d3dc:	ffff0007 	.word	0xffff0007

0800d3e0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b084      	sub	sp, #16
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
 800d3e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d3ee:	4b53      	ldr	r3, [pc, #332]	@ (800d53c <RCCEx_PLL3_Config+0x15c>)
 800d3f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3f2:	f003 0303 	and.w	r3, r3, #3
 800d3f6:	2b03      	cmp	r3, #3
 800d3f8:	d101      	bne.n	800d3fe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d3fa:	2301      	movs	r3, #1
 800d3fc:	e099      	b.n	800d532 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d3fe:	4b4f      	ldr	r3, [pc, #316]	@ (800d53c <RCCEx_PLL3_Config+0x15c>)
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	4a4e      	ldr	r2, [pc, #312]	@ (800d53c <RCCEx_PLL3_Config+0x15c>)
 800d404:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d408:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d40a:	f7f6 fb5b 	bl	8003ac4 <HAL_GetTick>
 800d40e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d410:	e008      	b.n	800d424 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d412:	f7f6 fb57 	bl	8003ac4 <HAL_GetTick>
 800d416:	4602      	mov	r2, r0
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	1ad3      	subs	r3, r2, r3
 800d41c:	2b02      	cmp	r3, #2
 800d41e:	d901      	bls.n	800d424 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d420:	2303      	movs	r3, #3
 800d422:	e086      	b.n	800d532 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d424:	4b45      	ldr	r3, [pc, #276]	@ (800d53c <RCCEx_PLL3_Config+0x15c>)
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d1f0      	bne.n	800d412 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d430:	4b42      	ldr	r3, [pc, #264]	@ (800d53c <RCCEx_PLL3_Config+0x15c>)
 800d432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d434:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	051b      	lsls	r3, r3, #20
 800d43e:	493f      	ldr	r1, [pc, #252]	@ (800d53c <RCCEx_PLL3_Config+0x15c>)
 800d440:	4313      	orrs	r3, r2
 800d442:	628b      	str	r3, [r1, #40]	@ 0x28
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	685b      	ldr	r3, [r3, #4]
 800d448:	3b01      	subs	r3, #1
 800d44a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	689b      	ldr	r3, [r3, #8]
 800d452:	3b01      	subs	r3, #1
 800d454:	025b      	lsls	r3, r3, #9
 800d456:	b29b      	uxth	r3, r3
 800d458:	431a      	orrs	r2, r3
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	68db      	ldr	r3, [r3, #12]
 800d45e:	3b01      	subs	r3, #1
 800d460:	041b      	lsls	r3, r3, #16
 800d462:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d466:	431a      	orrs	r2, r3
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	691b      	ldr	r3, [r3, #16]
 800d46c:	3b01      	subs	r3, #1
 800d46e:	061b      	lsls	r3, r3, #24
 800d470:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d474:	4931      	ldr	r1, [pc, #196]	@ (800d53c <RCCEx_PLL3_Config+0x15c>)
 800d476:	4313      	orrs	r3, r2
 800d478:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d47a:	4b30      	ldr	r3, [pc, #192]	@ (800d53c <RCCEx_PLL3_Config+0x15c>)
 800d47c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d47e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	695b      	ldr	r3, [r3, #20]
 800d486:	492d      	ldr	r1, [pc, #180]	@ (800d53c <RCCEx_PLL3_Config+0x15c>)
 800d488:	4313      	orrs	r3, r2
 800d48a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d48c:	4b2b      	ldr	r3, [pc, #172]	@ (800d53c <RCCEx_PLL3_Config+0x15c>)
 800d48e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d490:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	699b      	ldr	r3, [r3, #24]
 800d498:	4928      	ldr	r1, [pc, #160]	@ (800d53c <RCCEx_PLL3_Config+0x15c>)
 800d49a:	4313      	orrs	r3, r2
 800d49c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d49e:	4b27      	ldr	r3, [pc, #156]	@ (800d53c <RCCEx_PLL3_Config+0x15c>)
 800d4a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4a2:	4a26      	ldr	r2, [pc, #152]	@ (800d53c <RCCEx_PLL3_Config+0x15c>)
 800d4a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d4a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d4aa:	4b24      	ldr	r3, [pc, #144]	@ (800d53c <RCCEx_PLL3_Config+0x15c>)
 800d4ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d4ae:	4b24      	ldr	r3, [pc, #144]	@ (800d540 <RCCEx_PLL3_Config+0x160>)
 800d4b0:	4013      	ands	r3, r2
 800d4b2:	687a      	ldr	r2, [r7, #4]
 800d4b4:	69d2      	ldr	r2, [r2, #28]
 800d4b6:	00d2      	lsls	r2, r2, #3
 800d4b8:	4920      	ldr	r1, [pc, #128]	@ (800d53c <RCCEx_PLL3_Config+0x15c>)
 800d4ba:	4313      	orrs	r3, r2
 800d4bc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d4be:	4b1f      	ldr	r3, [pc, #124]	@ (800d53c <RCCEx_PLL3_Config+0x15c>)
 800d4c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4c2:	4a1e      	ldr	r2, [pc, #120]	@ (800d53c <RCCEx_PLL3_Config+0x15c>)
 800d4c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d4c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d106      	bne.n	800d4de <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d4d0:	4b1a      	ldr	r3, [pc, #104]	@ (800d53c <RCCEx_PLL3_Config+0x15c>)
 800d4d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4d4:	4a19      	ldr	r2, [pc, #100]	@ (800d53c <RCCEx_PLL3_Config+0x15c>)
 800d4d6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800d4da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d4dc:	e00f      	b.n	800d4fe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	2b01      	cmp	r3, #1
 800d4e2:	d106      	bne.n	800d4f2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d4e4:	4b15      	ldr	r3, [pc, #84]	@ (800d53c <RCCEx_PLL3_Config+0x15c>)
 800d4e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4e8:	4a14      	ldr	r2, [pc, #80]	@ (800d53c <RCCEx_PLL3_Config+0x15c>)
 800d4ea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800d4ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d4f0:	e005      	b.n	800d4fe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d4f2:	4b12      	ldr	r3, [pc, #72]	@ (800d53c <RCCEx_PLL3_Config+0x15c>)
 800d4f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4f6:	4a11      	ldr	r2, [pc, #68]	@ (800d53c <RCCEx_PLL3_Config+0x15c>)
 800d4f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d4fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d4fe:	4b0f      	ldr	r3, [pc, #60]	@ (800d53c <RCCEx_PLL3_Config+0x15c>)
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	4a0e      	ldr	r2, [pc, #56]	@ (800d53c <RCCEx_PLL3_Config+0x15c>)
 800d504:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d508:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d50a:	f7f6 fadb 	bl	8003ac4 <HAL_GetTick>
 800d50e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d510:	e008      	b.n	800d524 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d512:	f7f6 fad7 	bl	8003ac4 <HAL_GetTick>
 800d516:	4602      	mov	r2, r0
 800d518:	68bb      	ldr	r3, [r7, #8]
 800d51a:	1ad3      	subs	r3, r2, r3
 800d51c:	2b02      	cmp	r3, #2
 800d51e:	d901      	bls.n	800d524 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d520:	2303      	movs	r3, #3
 800d522:	e006      	b.n	800d532 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d524:	4b05      	ldr	r3, [pc, #20]	@ (800d53c <RCCEx_PLL3_Config+0x15c>)
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d0f0      	beq.n	800d512 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d530:	7bfb      	ldrb	r3, [r7, #15]
}
 800d532:	4618      	mov	r0, r3
 800d534:	3710      	adds	r7, #16
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}
 800d53a:	bf00      	nop
 800d53c:	58024400 	.word	0x58024400
 800d540:	ffff0007 	.word	0xffff0007

0800d544 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b08a      	sub	sp, #40	@ 0x28
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d101      	bne.n	800d556 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d552:	2301      	movs	r3, #1
 800d554:	e075      	b.n	800d642 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d55c:	b2db      	uxtb	r3, r3
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d105      	bne.n	800d56e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	2200      	movs	r2, #0
 800d566:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d568:	6878      	ldr	r0, [r7, #4]
 800d56a:	f7f5 fea1 	bl	80032b0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	2204      	movs	r2, #4
 800d572:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d576:	6878      	ldr	r0, [r7, #4]
 800d578:	f000 f868 	bl	800d64c <HAL_SD_InitCard>
 800d57c:	4603      	mov	r3, r0
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d001      	beq.n	800d586 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d582:	2301      	movs	r3, #1
 800d584:	e05d      	b.n	800d642 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800d586:	f107 0308 	add.w	r3, r7, #8
 800d58a:	4619      	mov	r1, r3
 800d58c:	6878      	ldr	r0, [r7, #4]
 800d58e:	f000 fdaf 	bl	800e0f0 <HAL_SD_GetCardStatus>
 800d592:	4603      	mov	r3, r0
 800d594:	2b00      	cmp	r3, #0
 800d596:	d001      	beq.n	800d59c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800d598:	2301      	movs	r3, #1
 800d59a:	e052      	b.n	800d642 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800d59c:	7e3b      	ldrb	r3, [r7, #24]
 800d59e:	b2db      	uxtb	r3, r3
 800d5a0:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800d5a2:	7e7b      	ldrb	r3, [r7, #25]
 800d5a4:	b2db      	uxtb	r3, r3
 800d5a6:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5ac:	2b01      	cmp	r3, #1
 800d5ae:	d10a      	bne.n	800d5c6 <HAL_SD_Init+0x82>
 800d5b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d102      	bne.n	800d5bc <HAL_SD_Init+0x78>
 800d5b6:	6a3b      	ldr	r3, [r7, #32]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d004      	beq.n	800d5c6 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d5c2:	659a      	str	r2, [r3, #88]	@ 0x58
 800d5c4:	e00b      	b.n	800d5de <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5ca:	2b01      	cmp	r3, #1
 800d5cc:	d104      	bne.n	800d5d8 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d5d4:	659a      	str	r2, [r3, #88]	@ 0x58
 800d5d6:	e002      	b.n	800d5de <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2200      	movs	r2, #0
 800d5dc:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	68db      	ldr	r3, [r3, #12]
 800d5e2:	4619      	mov	r1, r3
 800d5e4:	6878      	ldr	r0, [r7, #4]
 800d5e6:	f000 fe6d 	bl	800e2c4 <HAL_SD_ConfigWideBusOperation>
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d001      	beq.n	800d5f4 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	e026      	b.n	800d642 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800d5f4:	f7f6 fa66 	bl	8003ac4 <HAL_GetTick>
 800d5f8:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d5fa:	e011      	b.n	800d620 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d5fc:	f7f6 fa62 	bl	8003ac4 <HAL_GetTick>
 800d600:	4602      	mov	r2, r0
 800d602:	69fb      	ldr	r3, [r7, #28]
 800d604:	1ad3      	subs	r3, r2, r3
 800d606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d60a:	d109      	bne.n	800d620 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d612:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2201      	movs	r2, #1
 800d618:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800d61c:	2303      	movs	r3, #3
 800d61e:	e010      	b.n	800d642 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d620:	6878      	ldr	r0, [r7, #4]
 800d622:	f000 ff61 	bl	800e4e8 <HAL_SD_GetCardState>
 800d626:	4603      	mov	r3, r0
 800d628:	2b04      	cmp	r3, #4
 800d62a:	d1e7      	bne.n	800d5fc <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2200      	movs	r2, #0
 800d630:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	2200      	movs	r2, #0
 800d636:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	2201      	movs	r2, #1
 800d63c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800d640:	2300      	movs	r3, #0
}
 800d642:	4618      	mov	r0, r3
 800d644:	3728      	adds	r7, #40	@ 0x28
 800d646:	46bd      	mov	sp, r7
 800d648:	bd80      	pop	{r7, pc}
	...

0800d64c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d64c:	b590      	push	{r4, r7, lr}
 800d64e:	b08d      	sub	sp, #52	@ 0x34
 800d650:	af02      	add	r7, sp, #8
 800d652:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d654:	2300      	movs	r3, #0
 800d656:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d658:	2300      	movs	r3, #0
 800d65a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800d65c:	2300      	movs	r3, #0
 800d65e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d660:	2300      	movs	r3, #0
 800d662:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d664:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800d668:	f04f 0100 	mov.w	r1, #0
 800d66c:	f7fe fd24 	bl	800c0b8 <HAL_RCCEx_GetPeriphCLKFreq>
 800d670:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800d672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d674:	2b00      	cmp	r3, #0
 800d676:	d109      	bne.n	800d68c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	2201      	movs	r2, #1
 800d67c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800d686:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800d688:	2301      	movs	r3, #1
 800d68a:	e070      	b.n	800d76e <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800d68c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d68e:	0a1b      	lsrs	r3, r3, #8
 800d690:	4a39      	ldr	r2, [pc, #228]	@ (800d778 <HAL_SD_InitCard+0x12c>)
 800d692:	fba2 2303 	umull	r2, r3, r2, r3
 800d696:	091b      	lsrs	r3, r3, #4
 800d698:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681c      	ldr	r4, [r3, #0]
 800d69e:	466a      	mov	r2, sp
 800d6a0:	f107 0318 	add.w	r3, r7, #24
 800d6a4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d6a8:	e882 0003 	stmia.w	r2, {r0, r1}
 800d6ac:	f107 030c 	add.w	r3, r7, #12
 800d6b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d6b2:	4620      	mov	r0, r4
 800d6b4:	f005 f9a4 	bl	8012a00 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f005 f9e7 	bl	8012a90 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800d6c2:	69fb      	ldr	r3, [r7, #28]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d005      	beq.n	800d6d4 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800d6c8:	69fb      	ldr	r3, [r7, #28]
 800d6ca:	005b      	lsls	r3, r3, #1
 800d6cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d6ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6d2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800d6d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d007      	beq.n	800d6ea <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800d6da:	4a28      	ldr	r2, [pc, #160]	@ (800d77c <HAL_SD_InitCard+0x130>)
 800d6dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6de:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6e2:	3301      	adds	r3, #1
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	f7f6 f9f9 	bl	8003adc <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d6ea:	6878      	ldr	r0, [r7, #4]
 800d6ec:	f000 ffea 	bl	800e6c4 <SD_PowerON>
 800d6f0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d6f2:	6a3b      	ldr	r3, [r7, #32]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d00b      	beq.n	800d710 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	2201      	movs	r2, #1
 800d6fc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d704:	6a3b      	ldr	r3, [r7, #32]
 800d706:	431a      	orrs	r2, r3
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800d70c:	2301      	movs	r3, #1
 800d70e:	e02e      	b.n	800d76e <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d710:	6878      	ldr	r0, [r7, #4]
 800d712:	f000 ff09 	bl	800e528 <SD_InitCard>
 800d716:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d718:	6a3b      	ldr	r3, [r7, #32]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d00b      	beq.n	800d736 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	2201      	movs	r2, #1
 800d722:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d72a:	6a3b      	ldr	r3, [r7, #32]
 800d72c:	431a      	orrs	r2, r3
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800d732:	2301      	movs	r3, #1
 800d734:	e01b      	b.n	800d76e <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d73e:	4618      	mov	r0, r3
 800d740:	f005 fa3c 	bl	8012bbc <SDMMC_CmdBlockLength>
 800d744:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d746:	6a3b      	ldr	r3, [r7, #32]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d00f      	beq.n	800d76c <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	4a0b      	ldr	r2, [pc, #44]	@ (800d780 <HAL_SD_InitCard+0x134>)
 800d752:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d758:	6a3b      	ldr	r3, [r7, #32]
 800d75a:	431a      	orrs	r2, r3
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	2201      	movs	r2, #1
 800d764:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800d768:	2301      	movs	r3, #1
 800d76a:	e000      	b.n	800d76e <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800d76c:	2300      	movs	r3, #0
}
 800d76e:	4618      	mov	r0, r3
 800d770:	372c      	adds	r7, #44	@ 0x2c
 800d772:	46bd      	mov	sp, r7
 800d774:	bd90      	pop	{r4, r7, pc}
 800d776:	bf00      	nop
 800d778:	014f8b59 	.word	0x014f8b59
 800d77c:	00012110 	.word	0x00012110
 800d780:	1fe00fff 	.word	0x1fe00fff

0800d784 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b08c      	sub	sp, #48	@ 0x30
 800d788:	af00      	add	r7, sp, #0
 800d78a:	60f8      	str	r0, [r7, #12]
 800d78c:	60b9      	str	r1, [r7, #8]
 800d78e:	607a      	str	r2, [r7, #4]
 800d790:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800d796:	68bb      	ldr	r3, [r7, #8]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d107      	bne.n	800d7ac <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d7a0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800d7a8:	2301      	movs	r3, #1
 800d7aa:	e08d      	b.n	800d8c8 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d7b2:	b2db      	uxtb	r3, r3
 800d7b4:	2b01      	cmp	r3, #1
 800d7b6:	f040 8086 	bne.w	800d8c6 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	2200      	movs	r2, #0
 800d7be:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d7c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	441a      	add	r2, r3
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d7ca:	429a      	cmp	r2, r3
 800d7cc:	d907      	bls.n	800d7de <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d7d2:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800d7da:	2301      	movs	r3, #1
 800d7dc:	e074      	b.n	800d8c8 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	2203      	movs	r2, #3
 800d7e2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	68ba      	ldr	r2, [r7, #8]
 800d7f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	025a      	lsls	r2, r3, #9
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d800:	2b01      	cmp	r3, #1
 800d802:	d002      	beq.n	800d80a <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800d804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d806:	025b      	lsls	r3, r3, #9
 800d808:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d80a:	f04f 33ff 	mov.w	r3, #4294967295
 800d80e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d810:	683b      	ldr	r3, [r7, #0]
 800d812:	025b      	lsls	r3, r3, #9
 800d814:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d816:	2390      	movs	r3, #144	@ 0x90
 800d818:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d81a:	2302      	movs	r3, #2
 800d81c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d81e:	2300      	movs	r3, #0
 800d820:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d822:	2300      	movs	r3, #0
 800d824:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	f107 0210 	add.w	r2, r7, #16
 800d82e:	4611      	mov	r1, r2
 800d830:	4618      	mov	r0, r3
 800d832:	f005 f997 	bl	8012b64 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	68da      	ldr	r2, [r3, #12]
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d844:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	68ba      	ldr	r2, [r7, #8]
 800d84c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	2201      	movs	r2, #1
 800d854:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	2b01      	cmp	r3, #1
 800d85a:	d90a      	bls.n	800d872 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	2282      	movs	r2, #130	@ 0x82
 800d860:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d868:	4618      	mov	r0, r3
 800d86a:	f005 f9ed 	bl	8012c48 <SDMMC_CmdReadMultiBlock>
 800d86e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800d870:	e009      	b.n	800d886 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	2281      	movs	r2, #129	@ 0x81
 800d876:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d87e:	4618      	mov	r0, r3
 800d880:	f005 f9bf 	bl	8012c02 <SDMMC_CmdReadSingleBlock>
 800d884:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d012      	beq.n	800d8b2 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	4a0f      	ldr	r2, [pc, #60]	@ (800d8d0 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800d892:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d89a:	431a      	orrs	r2, r3
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	2201      	movs	r2, #1
 800d8a4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800d8ae:	2301      	movs	r3, #1
 800d8b0:	e00a      	b.n	800d8c8 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800d8c0:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	e000      	b.n	800d8c8 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d8c6:	2302      	movs	r3, #2
  }
}
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	3730      	adds	r7, #48	@ 0x30
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}
 800d8d0:	1fe00fff 	.word	0x1fe00fff

0800d8d4 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b08c      	sub	sp, #48	@ 0x30
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	60f8      	str	r0, [r7, #12]
 800d8dc:	60b9      	str	r1, [r7, #8]
 800d8de:	607a      	str	r2, [r7, #4]
 800d8e0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d107      	bne.n	800d8fc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8f0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800d8f8:	2301      	movs	r3, #1
 800d8fa:	e08d      	b.n	800da18 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d902:	b2db      	uxtb	r3, r3
 800d904:	2b01      	cmp	r3, #1
 800d906:	f040 8086 	bne.w	800da16 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	2200      	movs	r2, #0
 800d90e:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d910:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d912:	683b      	ldr	r3, [r7, #0]
 800d914:	441a      	add	r2, r3
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d91a:	429a      	cmp	r2, r3
 800d91c:	d907      	bls.n	800d92e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d922:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800d92a:	2301      	movs	r3, #1
 800d92c:	e074      	b.n	800da18 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	2203      	movs	r2, #3
 800d932:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	2200      	movs	r2, #0
 800d93c:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	68ba      	ldr	r2, [r7, #8]
 800d942:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	025a      	lsls	r2, r3, #9
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d950:	2b01      	cmp	r3, #1
 800d952:	d002      	beq.n	800d95a <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800d954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d956:	025b      	lsls	r3, r3, #9
 800d958:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d95a:	f04f 33ff 	mov.w	r3, #4294967295
 800d95e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	025b      	lsls	r3, r3, #9
 800d964:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d966:	2390      	movs	r3, #144	@ 0x90
 800d968:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d96a:	2300      	movs	r3, #0
 800d96c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d96e:	2300      	movs	r3, #0
 800d970:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d972:	2300      	movs	r3, #0
 800d974:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	f107 0210 	add.w	r2, r7, #16
 800d97e:	4611      	mov	r1, r2
 800d980:	4618      	mov	r0, r3
 800d982:	f005 f8ef 	bl	8012b64 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	68da      	ldr	r2, [r3, #12]
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d994:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	68ba      	ldr	r2, [r7, #8]
 800d99c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	2201      	movs	r2, #1
 800d9a4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	2b01      	cmp	r3, #1
 800d9aa:	d90a      	bls.n	800d9c2 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	22a0      	movs	r2, #160	@ 0xa0
 800d9b0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	f005 f98b 	bl	8012cd4 <SDMMC_CmdWriteMultiBlock>
 800d9be:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800d9c0:	e009      	b.n	800d9d6 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	2290      	movs	r2, #144	@ 0x90
 800d9c6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	f005 f95d 	bl	8012c8e <SDMMC_CmdWriteSingleBlock>
 800d9d4:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d9d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d012      	beq.n	800da02 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	4a0f      	ldr	r2, [pc, #60]	@ (800da20 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800d9e2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d9e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9ea:	431a      	orrs	r2, r3
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	2201      	movs	r2, #1
 800d9f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800d9fe:	2301      	movs	r3, #1
 800da00:	e00a      	b.n	800da18 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 800da10:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800da12:	2300      	movs	r3, #0
 800da14:	e000      	b.n	800da18 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800da16:	2302      	movs	r3, #2
  }
}
 800da18:	4618      	mov	r0, r3
 800da1a:	3730      	adds	r7, #48	@ 0x30
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd80      	pop	{r7, pc}
 800da20:	1fe00fff 	.word	0x1fe00fff

0800da24 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b084      	sub	sp, #16
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da30:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d008      	beq.n	800da52 <HAL_SD_IRQHandler+0x2e>
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	f003 0308 	and.w	r3, r3, #8
 800da46:	2b00      	cmp	r3, #0
 800da48:	d003      	beq.n	800da52 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800da4a:	6878      	ldr	r0, [r7, #4]
 800da4c:	f001 f926 	bl	800ec9c <SD_Read_IT>
 800da50:	e19a      	b.n	800dd88 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	f000 80ac 	beq.w	800dbba <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800da6a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681a      	ldr	r2, [r3, #0]
 800da76:	4b59      	ldr	r3, [pc, #356]	@ (800dbdc <HAL_SD_IRQHandler+0x1b8>)
 800da78:	400b      	ands	r3, r1
 800da7a:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800da8a:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	68da      	ldr	r2, [r3, #12]
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800da9a:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	f003 0308 	and.w	r3, r3, #8
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d038      	beq.n	800db18 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	f003 0302 	and.w	r3, r3, #2
 800daac:	2b00      	cmp	r3, #0
 800daae:	d104      	bne.n	800daba <HAL_SD_IRQHandler+0x96>
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	f003 0320 	and.w	r3, r3, #32
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d011      	beq.n	800dade <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	4618      	mov	r0, r3
 800dac0:	f005 f92c 	bl	8012d1c <SDMMC_CmdStopTransfer>
 800dac4:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800dac6:	68bb      	ldr	r3, [r7, #8]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d008      	beq.n	800dade <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dad0:	68bb      	ldr	r3, [r7, #8]
 800dad2:	431a      	orrs	r2, r3
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800dad8:	6878      	ldr	r0, [r7, #4]
 800dada:	f000 f95b 	bl	800dd94 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	4a3f      	ldr	r2, [pc, #252]	@ (800dbe0 <HAL_SD_IRQHandler+0x1bc>)
 800dae4:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	2201      	movs	r2, #1
 800daea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	2200      	movs	r2, #0
 800daf2:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	f003 0301 	and.w	r3, r3, #1
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d104      	bne.n	800db08 <HAL_SD_IRQHandler+0xe4>
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	f003 0302 	and.w	r3, r3, #2
 800db04:	2b00      	cmp	r3, #0
 800db06:	d003      	beq.n	800db10 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800db08:	6878      	ldr	r0, [r7, #4]
 800db0a:	f005 fdd7 	bl	80136bc <HAL_SD_RxCpltCallback>
 800db0e:	e13b      	b.n	800dd88 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800db10:	6878      	ldr	r0, [r7, #4]
 800db12:	f005 fdc9 	bl	80136a8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800db16:	e137      	b.n	800dd88 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800db1e:	2b00      	cmp	r3, #0
 800db20:	f000 8132 	beq.w	800dd88 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	2200      	movs	r2, #0
 800db2a:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	2200      	movs	r2, #0
 800db32:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	2200      	movs	r2, #0
 800db3a:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	f003 0302 	and.w	r3, r3, #2
 800db42:	2b00      	cmp	r3, #0
 800db44:	d104      	bne.n	800db50 <HAL_SD_IRQHandler+0x12c>
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	f003 0320 	and.w	r3, r3, #32
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d011      	beq.n	800db74 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	4618      	mov	r0, r3
 800db56:	f005 f8e1 	bl	8012d1c <SDMMC_CmdStopTransfer>
 800db5a:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800db5c:	68bb      	ldr	r3, [r7, #8]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d008      	beq.n	800db74 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800db66:	68bb      	ldr	r3, [r7, #8]
 800db68:	431a      	orrs	r2, r3
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 800db6e:	6878      	ldr	r0, [r7, #4]
 800db70:	f000 f910 	bl	800dd94 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2201      	movs	r2, #1
 800db78:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	2200      	movs	r2, #0
 800db80:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	f003 0310 	and.w	r3, r3, #16
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d104      	bne.n	800db96 <HAL_SD_IRQHandler+0x172>
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	f003 0320 	and.w	r3, r3, #32
 800db92:	2b00      	cmp	r3, #0
 800db94:	d002      	beq.n	800db9c <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800db96:	6878      	ldr	r0, [r7, #4]
 800db98:	f005 fd86 	bl	80136a8 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	f003 0301 	and.w	r3, r3, #1
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d105      	bne.n	800dbb2 <HAL_SD_IRQHandler+0x18e>
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	f003 0302 	and.w	r3, r3, #2
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	f000 80eb 	beq.w	800dd88 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800dbb2:	6878      	ldr	r0, [r7, #4]
 800dbb4:	f005 fd82 	bl	80136bc <HAL_SD_RxCpltCallback>
}
 800dbb8:	e0e6      	b.n	800dd88 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbc0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d00d      	beq.n	800dbe4 <HAL_SD_IRQHandler+0x1c0>
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	f003 0308 	and.w	r3, r3, #8
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d008      	beq.n	800dbe4 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800dbd2:	6878      	ldr	r0, [r7, #4]
 800dbd4:	f001 f8a8 	bl	800ed28 <SD_Write_IT>
 800dbd8:	e0d6      	b.n	800dd88 <HAL_SD_IRQHandler+0x364>
 800dbda:	bf00      	nop
 800dbdc:	ffff3ec5 	.word	0xffff3ec5
 800dbe0:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbea:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	f000 809d 	beq.w	800dd2e <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbfa:	f003 0302 	and.w	r3, r3, #2
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d005      	beq.n	800dc0e <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc06:	f043 0202 	orr.w	r2, r3, #2
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc14:	f003 0308 	and.w	r3, r3, #8
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d005      	beq.n	800dc28 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc20:	f043 0208 	orr.w	r2, r3, #8
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc2e:	f003 0320 	and.w	r3, r3, #32
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d005      	beq.n	800dc42 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc3a:	f043 0220 	orr.w	r2, r3, #32
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc48:	f003 0310 	and.w	r3, r3, #16
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d005      	beq.n	800dc5c <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc54:	f043 0210 	orr.w	r2, r3, #16
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	4a4b      	ldr	r2, [pc, #300]	@ (800dd90 <HAL_SD_IRQHandler+0x36c>)
 800dc62:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800dc72:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	68da      	ldr	r2, [r3, #12]
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800dc82:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800dc92:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	68da      	ldr	r2, [r3, #12]
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800dca2:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	4618      	mov	r0, r3
 800dcaa:	f005 f837 	bl	8012d1c <SDMMC_CmdStopTransfer>
 800dcae:	4602      	mov	r2, r0
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dcb4:	431a      	orrs	r2, r3
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	68da      	ldr	r2, [r3, #12]
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800dcc8:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800dcd2:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	f003 0308 	and.w	r3, r3, #8
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d00a      	beq.n	800dcf4 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	2201      	movs	r2, #1
 800dce2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	2200      	movs	r2, #0
 800dcea:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 800dcec:	6878      	ldr	r0, [r7, #4]
 800dcee:	f000 f851 	bl	800dd94 <HAL_SD_ErrorCallback>
}
 800dcf2:	e049      	b.n	800dd88 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d044      	beq.n	800dd88 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d040      	beq.n	800dd88 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800dd14:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	2201      	movs	r2, #1
 800dd22:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 800dd26:	6878      	ldr	r0, [r7, #4]
 800dd28:	f000 f834 	bl	800dd94 <HAL_SD_ErrorCallback>
}
 800dd2c:	e02c      	b.n	800dd88 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d025      	beq.n	800dd88 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd44:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dd4c:	f003 0304 	and.w	r3, r3, #4
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d10c      	bne.n	800dd6e <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	f003 0320 	and.w	r3, r3, #32
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d003      	beq.n	800dd66 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	f001 f84a 	bl	800edf8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800dd64:	e010      	b.n	800dd88 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800dd66:	6878      	ldr	r0, [r7, #4]
 800dd68:	f001 f832 	bl	800edd0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800dd6c:	e00c      	b.n	800dd88 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	f003 0320 	and.w	r3, r3, #32
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d003      	beq.n	800dd80 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800dd78:	6878      	ldr	r0, [r7, #4]
 800dd7a:	f001 f833 	bl	800ede4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800dd7e:	e003      	b.n	800dd88 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800dd80:	6878      	ldr	r0, [r7, #4]
 800dd82:	f001 f81b 	bl	800edbc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800dd86:	e7ff      	b.n	800dd88 <HAL_SD_IRQHandler+0x364>
 800dd88:	bf00      	nop
 800dd8a:	3710      	adds	r7, #16
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	bd80      	pop	{r7, pc}
 800dd90:	18000f3a 	.word	0x18000f3a

0800dd94 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800dd94:	b480      	push	{r7}
 800dd96:	b083      	sub	sp, #12
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800dd9c:	bf00      	nop
 800dd9e:	370c      	adds	r7, #12
 800dda0:	46bd      	mov	sp, r7
 800dda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda6:	4770      	bx	lr

0800dda8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800dda8:	b480      	push	{r7}
 800ddaa:	b083      	sub	sp, #12
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
 800ddb0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ddb6:	0f9b      	lsrs	r3, r3, #30
 800ddb8:	b2da      	uxtb	r2, r3
 800ddba:	683b      	ldr	r3, [r7, #0]
 800ddbc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ddc2:	0e9b      	lsrs	r3, r3, #26
 800ddc4:	b2db      	uxtb	r3, r3
 800ddc6:	f003 030f 	and.w	r3, r3, #15
 800ddca:	b2da      	uxtb	r2, r3
 800ddcc:	683b      	ldr	r3, [r7, #0]
 800ddce:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ddd4:	0e1b      	lsrs	r3, r3, #24
 800ddd6:	b2db      	uxtb	r3, r3
 800ddd8:	f003 0303 	and.w	r3, r3, #3
 800dddc:	b2da      	uxtb	r2, r3
 800ddde:	683b      	ldr	r3, [r7, #0]
 800dde0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dde6:	0c1b      	lsrs	r3, r3, #16
 800dde8:	b2da      	uxtb	r2, r3
 800ddea:	683b      	ldr	r3, [r7, #0]
 800ddec:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ddf2:	0a1b      	lsrs	r3, r3, #8
 800ddf4:	b2da      	uxtb	r2, r3
 800ddf6:	683b      	ldr	r3, [r7, #0]
 800ddf8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ddfe:	b2da      	uxtb	r2, r3
 800de00:	683b      	ldr	r3, [r7, #0]
 800de02:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800de08:	0d1b      	lsrs	r3, r3, #20
 800de0a:	b29a      	uxth	r2, r3
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800de14:	0c1b      	lsrs	r3, r3, #16
 800de16:	b2db      	uxtb	r3, r3
 800de18:	f003 030f 	and.w	r3, r3, #15
 800de1c:	b2da      	uxtb	r2, r3
 800de1e:	683b      	ldr	r3, [r7, #0]
 800de20:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800de26:	0bdb      	lsrs	r3, r3, #15
 800de28:	b2db      	uxtb	r3, r3
 800de2a:	f003 0301 	and.w	r3, r3, #1
 800de2e:	b2da      	uxtb	r2, r3
 800de30:	683b      	ldr	r3, [r7, #0]
 800de32:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800de38:	0b9b      	lsrs	r3, r3, #14
 800de3a:	b2db      	uxtb	r3, r3
 800de3c:	f003 0301 	and.w	r3, r3, #1
 800de40:	b2da      	uxtb	r2, r3
 800de42:	683b      	ldr	r3, [r7, #0]
 800de44:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800de4a:	0b5b      	lsrs	r3, r3, #13
 800de4c:	b2db      	uxtb	r3, r3
 800de4e:	f003 0301 	and.w	r3, r3, #1
 800de52:	b2da      	uxtb	r2, r3
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800de5c:	0b1b      	lsrs	r3, r3, #12
 800de5e:	b2db      	uxtb	r3, r3
 800de60:	f003 0301 	and.w	r3, r3, #1
 800de64:	b2da      	uxtb	r2, r3
 800de66:	683b      	ldr	r3, [r7, #0]
 800de68:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800de6a:	683b      	ldr	r3, [r7, #0]
 800de6c:	2200      	movs	r2, #0
 800de6e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de74:	2b00      	cmp	r3, #0
 800de76:	d163      	bne.n	800df40 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800de7c:	009a      	lsls	r2, r3, #2
 800de7e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800de82:	4013      	ands	r3, r2
 800de84:	687a      	ldr	r2, [r7, #4]
 800de86:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800de88:	0f92      	lsrs	r2, r2, #30
 800de8a:	431a      	orrs	r2, r3
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800de94:	0edb      	lsrs	r3, r3, #27
 800de96:	b2db      	uxtb	r3, r3
 800de98:	f003 0307 	and.w	r3, r3, #7
 800de9c:	b2da      	uxtb	r2, r3
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dea6:	0e1b      	lsrs	r3, r3, #24
 800dea8:	b2db      	uxtb	r3, r3
 800deaa:	f003 0307 	and.w	r3, r3, #7
 800deae:	b2da      	uxtb	r2, r3
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800deb8:	0d5b      	lsrs	r3, r3, #21
 800deba:	b2db      	uxtb	r3, r3
 800debc:	f003 0307 	and.w	r3, r3, #7
 800dec0:	b2da      	uxtb	r2, r3
 800dec2:	683b      	ldr	r3, [r7, #0]
 800dec4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800deca:	0c9b      	lsrs	r3, r3, #18
 800decc:	b2db      	uxtb	r3, r3
 800dece:	f003 0307 	and.w	r3, r3, #7
 800ded2:	b2da      	uxtb	r2, r3
 800ded4:	683b      	ldr	r3, [r7, #0]
 800ded6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dedc:	0bdb      	lsrs	r3, r3, #15
 800dede:	b2db      	uxtb	r3, r3
 800dee0:	f003 0307 	and.w	r3, r3, #7
 800dee4:	b2da      	uxtb	r2, r3
 800dee6:	683b      	ldr	r3, [r7, #0]
 800dee8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800deea:	683b      	ldr	r3, [r7, #0]
 800deec:	691b      	ldr	r3, [r3, #16]
 800deee:	1c5a      	adds	r2, r3, #1
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800def4:	683b      	ldr	r3, [r7, #0]
 800def6:	7e1b      	ldrb	r3, [r3, #24]
 800def8:	b2db      	uxtb	r3, r3
 800defa:	f003 0307 	and.w	r3, r3, #7
 800defe:	3302      	adds	r3, #2
 800df00:	2201      	movs	r2, #1
 800df02:	fa02 f303 	lsl.w	r3, r2, r3
 800df06:	687a      	ldr	r2, [r7, #4]
 800df08:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800df0a:	fb03 f202 	mul.w	r2, r3, r2
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800df12:	683b      	ldr	r3, [r7, #0]
 800df14:	7a1b      	ldrb	r3, [r3, #8]
 800df16:	b2db      	uxtb	r3, r3
 800df18:	f003 030f 	and.w	r3, r3, #15
 800df1c:	2201      	movs	r2, #1
 800df1e:	409a      	lsls	r2, r3
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800df28:	687a      	ldr	r2, [r7, #4]
 800df2a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800df2c:	0a52      	lsrs	r2, r2, #9
 800df2e:	fb03 f202 	mul.w	r2, r3, r2
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800df3c:	655a      	str	r2, [r3, #84]	@ 0x54
 800df3e:	e031      	b.n	800dfa4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df44:	2b01      	cmp	r3, #1
 800df46:	d11d      	bne.n	800df84 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800df4c:	041b      	lsls	r3, r3, #16
 800df4e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800df56:	0c1b      	lsrs	r3, r3, #16
 800df58:	431a      	orrs	r2, r3
 800df5a:	683b      	ldr	r3, [r7, #0]
 800df5c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800df5e:	683b      	ldr	r3, [r7, #0]
 800df60:	691b      	ldr	r3, [r3, #16]
 800df62:	3301      	adds	r3, #1
 800df64:	029a      	lsls	r2, r3, #10
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800df78:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	655a      	str	r2, [r3, #84]	@ 0x54
 800df82:	e00f      	b.n	800dfa4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	4a58      	ldr	r2, [pc, #352]	@ (800e0ec <HAL_SD_GetCardCSD+0x344>)
 800df8a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800df90:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	2201      	movs	r2, #1
 800df9c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800dfa0:	2301      	movs	r3, #1
 800dfa2:	e09d      	b.n	800e0e0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dfa8:	0b9b      	lsrs	r3, r3, #14
 800dfaa:	b2db      	uxtb	r3, r3
 800dfac:	f003 0301 	and.w	r3, r3, #1
 800dfb0:	b2da      	uxtb	r2, r3
 800dfb2:	683b      	ldr	r3, [r7, #0]
 800dfb4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dfba:	09db      	lsrs	r3, r3, #7
 800dfbc:	b2db      	uxtb	r3, r3
 800dfbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dfc2:	b2da      	uxtb	r2, r3
 800dfc4:	683b      	ldr	r3, [r7, #0]
 800dfc6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dfcc:	b2db      	uxtb	r3, r3
 800dfce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dfd2:	b2da      	uxtb	r2, r3
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dfdc:	0fdb      	lsrs	r3, r3, #31
 800dfde:	b2da      	uxtb	r2, r3
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dfe8:	0f5b      	lsrs	r3, r3, #29
 800dfea:	b2db      	uxtb	r3, r3
 800dfec:	f003 0303 	and.w	r3, r3, #3
 800dff0:	b2da      	uxtb	r2, r3
 800dff2:	683b      	ldr	r3, [r7, #0]
 800dff4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dffa:	0e9b      	lsrs	r3, r3, #26
 800dffc:	b2db      	uxtb	r3, r3
 800dffe:	f003 0307 	and.w	r3, r3, #7
 800e002:	b2da      	uxtb	r2, r3
 800e004:	683b      	ldr	r3, [r7, #0]
 800e006:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e00c:	0d9b      	lsrs	r3, r3, #22
 800e00e:	b2db      	uxtb	r3, r3
 800e010:	f003 030f 	and.w	r3, r3, #15
 800e014:	b2da      	uxtb	r2, r3
 800e016:	683b      	ldr	r3, [r7, #0]
 800e018:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e01e:	0d5b      	lsrs	r3, r3, #21
 800e020:	b2db      	uxtb	r3, r3
 800e022:	f003 0301 	and.w	r3, r3, #1
 800e026:	b2da      	uxtb	r2, r3
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800e02e:	683b      	ldr	r3, [r7, #0]
 800e030:	2200      	movs	r2, #0
 800e032:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e03a:	0c1b      	lsrs	r3, r3, #16
 800e03c:	b2db      	uxtb	r3, r3
 800e03e:	f003 0301 	and.w	r3, r3, #1
 800e042:	b2da      	uxtb	r2, r3
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e04e:	0bdb      	lsrs	r3, r3, #15
 800e050:	b2db      	uxtb	r3, r3
 800e052:	f003 0301 	and.w	r3, r3, #1
 800e056:	b2da      	uxtb	r2, r3
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e062:	0b9b      	lsrs	r3, r3, #14
 800e064:	b2db      	uxtb	r3, r3
 800e066:	f003 0301 	and.w	r3, r3, #1
 800e06a:	b2da      	uxtb	r2, r3
 800e06c:	683b      	ldr	r3, [r7, #0]
 800e06e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e076:	0b5b      	lsrs	r3, r3, #13
 800e078:	b2db      	uxtb	r3, r3
 800e07a:	f003 0301 	and.w	r3, r3, #1
 800e07e:	b2da      	uxtb	r2, r3
 800e080:	683b      	ldr	r3, [r7, #0]
 800e082:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e08a:	0b1b      	lsrs	r3, r3, #12
 800e08c:	b2db      	uxtb	r3, r3
 800e08e:	f003 0301 	and.w	r3, r3, #1
 800e092:	b2da      	uxtb	r2, r3
 800e094:	683b      	ldr	r3, [r7, #0]
 800e096:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e09e:	0a9b      	lsrs	r3, r3, #10
 800e0a0:	b2db      	uxtb	r3, r3
 800e0a2:	f003 0303 	and.w	r3, r3, #3
 800e0a6:	b2da      	uxtb	r2, r3
 800e0a8:	683b      	ldr	r3, [r7, #0]
 800e0aa:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e0b2:	0a1b      	lsrs	r3, r3, #8
 800e0b4:	b2db      	uxtb	r3, r3
 800e0b6:	f003 0303 	and.w	r3, r3, #3
 800e0ba:	b2da      	uxtb	r2, r3
 800e0bc:	683b      	ldr	r3, [r7, #0]
 800e0be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e0c6:	085b      	lsrs	r3, r3, #1
 800e0c8:	b2db      	uxtb	r3, r3
 800e0ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e0ce:	b2da      	uxtb	r2, r3
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	2201      	movs	r2, #1
 800e0da:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800e0de:	2300      	movs	r3, #0
}
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	370c      	adds	r7, #12
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ea:	4770      	bx	lr
 800e0ec:	1fe00fff 	.word	0x1fe00fff

0800e0f0 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b094      	sub	sp, #80	@ 0x50
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
 800e0f8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e106:	b2db      	uxtb	r3, r3
 800e108:	2b03      	cmp	r3, #3
 800e10a:	d101      	bne.n	800e110 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800e10c:	2301      	movs	r3, #1
 800e10e:	e0a7      	b.n	800e260 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800e110:	f107 0308 	add.w	r3, r7, #8
 800e114:	4619      	mov	r1, r3
 800e116:	6878      	ldr	r0, [r7, #4]
 800e118:	f000 fb62 	bl	800e7e0 <SD_SendSDStatus>
 800e11c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800e11e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e120:	2b00      	cmp	r3, #0
 800e122:	d011      	beq.n	800e148 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	4a4f      	ldr	r2, [pc, #316]	@ (800e268 <HAL_SD_GetCardStatus+0x178>)
 800e12a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e130:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e132:	431a      	orrs	r2, r3
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	2201      	movs	r2, #1
 800e13c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800e140:	2301      	movs	r3, #1
 800e142:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800e146:	e070      	b.n	800e22a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800e148:	68bb      	ldr	r3, [r7, #8]
 800e14a:	099b      	lsrs	r3, r3, #6
 800e14c:	b2db      	uxtb	r3, r3
 800e14e:	f003 0303 	and.w	r3, r3, #3
 800e152:	b2da      	uxtb	r2, r3
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800e158:	68bb      	ldr	r3, [r7, #8]
 800e15a:	095b      	lsrs	r3, r3, #5
 800e15c:	b2db      	uxtb	r3, r3
 800e15e:	f003 0301 	and.w	r3, r3, #1
 800e162:	b2da      	uxtb	r2, r3
 800e164:	683b      	ldr	r3, [r7, #0]
 800e166:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800e168:	68bb      	ldr	r3, [r7, #8]
 800e16a:	0a1b      	lsrs	r3, r3, #8
 800e16c:	b29b      	uxth	r3, r3
 800e16e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800e172:	b29a      	uxth	r2, r3
 800e174:	68bb      	ldr	r3, [r7, #8]
 800e176:	0e1b      	lsrs	r3, r3, #24
 800e178:	b29b      	uxth	r3, r3
 800e17a:	4313      	orrs	r3, r2
 800e17c:	b29a      	uxth	r2, r3
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	061a      	lsls	r2, r3, #24
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	021b      	lsls	r3, r3, #8
 800e18a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e18e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	0a1b      	lsrs	r3, r3, #8
 800e194:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e198:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	0e1b      	lsrs	r3, r3, #24
 800e19e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e1a0:	683b      	ldr	r3, [r7, #0]
 800e1a2:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800e1a4:	693b      	ldr	r3, [r7, #16]
 800e1a6:	b2da      	uxtb	r2, r3
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800e1ac:	693b      	ldr	r3, [r7, #16]
 800e1ae:	0a1b      	lsrs	r3, r3, #8
 800e1b0:	b2da      	uxtb	r2, r3
 800e1b2:	683b      	ldr	r3, [r7, #0]
 800e1b4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800e1b6:	693b      	ldr	r3, [r7, #16]
 800e1b8:	0d1b      	lsrs	r3, r3, #20
 800e1ba:	b2db      	uxtb	r3, r3
 800e1bc:	f003 030f 	and.w	r3, r3, #15
 800e1c0:	b2da      	uxtb	r2, r3
 800e1c2:	683b      	ldr	r3, [r7, #0]
 800e1c4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800e1c6:	693b      	ldr	r3, [r7, #16]
 800e1c8:	0c1b      	lsrs	r3, r3, #16
 800e1ca:	b29b      	uxth	r3, r3
 800e1cc:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800e1d0:	b29a      	uxth	r2, r3
 800e1d2:	697b      	ldr	r3, [r7, #20]
 800e1d4:	b29b      	uxth	r3, r3
 800e1d6:	b2db      	uxtb	r3, r3
 800e1d8:	b29b      	uxth	r3, r3
 800e1da:	4313      	orrs	r3, r2
 800e1dc:	b29a      	uxth	r2, r3
 800e1de:	683b      	ldr	r3, [r7, #0]
 800e1e0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800e1e2:	697b      	ldr	r3, [r7, #20]
 800e1e4:	0a9b      	lsrs	r3, r3, #10
 800e1e6:	b2db      	uxtb	r3, r3
 800e1e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e1ec:	b2da      	uxtb	r2, r3
 800e1ee:	683b      	ldr	r3, [r7, #0]
 800e1f0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800e1f2:	697b      	ldr	r3, [r7, #20]
 800e1f4:	0a1b      	lsrs	r3, r3, #8
 800e1f6:	b2db      	uxtb	r3, r3
 800e1f8:	f003 0303 	and.w	r3, r3, #3
 800e1fc:	b2da      	uxtb	r2, r3
 800e1fe:	683b      	ldr	r3, [r7, #0]
 800e200:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800e202:	697b      	ldr	r3, [r7, #20]
 800e204:	091b      	lsrs	r3, r3, #4
 800e206:	b2db      	uxtb	r3, r3
 800e208:	f003 030f 	and.w	r3, r3, #15
 800e20c:	b2da      	uxtb	r2, r3
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800e212:	697b      	ldr	r3, [r7, #20]
 800e214:	b2db      	uxtb	r3, r3
 800e216:	f003 030f 	and.w	r3, r3, #15
 800e21a:	b2da      	uxtb	r2, r3
 800e21c:	683b      	ldr	r3, [r7, #0]
 800e21e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800e220:	69bb      	ldr	r3, [r7, #24]
 800e222:	0e1b      	lsrs	r3, r3, #24
 800e224:	b2da      	uxtb	r2, r3
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e232:	4618      	mov	r0, r3
 800e234:	f004 fcc2 	bl	8012bbc <SDMMC_CmdBlockLength>
 800e238:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800e23a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d00d      	beq.n	800e25c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	4a08      	ldr	r2, [pc, #32]	@ (800e268 <HAL_SD_GetCardStatus+0x178>)
 800e246:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e24c:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	2201      	movs	r2, #1
 800e252:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800e256:	2301      	movs	r3, #1
 800e258:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 800e25c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800e260:	4618      	mov	r0, r3
 800e262:	3750      	adds	r7, #80	@ 0x50
 800e264:	46bd      	mov	sp, r7
 800e266:	bd80      	pop	{r7, pc}
 800e268:	1fe00fff 	.word	0x1fe00fff

0800e26c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800e26c:	b480      	push	{r7}
 800e26e:	b083      	sub	sp, #12
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
 800e274:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e27a:	683b      	ldr	r3, [r7, #0]
 800e27c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e282:	683b      	ldr	r3, [r7, #0]
 800e284:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e28a:	683b      	ldr	r3, [r7, #0]
 800e28c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e292:	683b      	ldr	r3, [r7, #0]
 800e294:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e29a:	683b      	ldr	r3, [r7, #0]
 800e29c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e2a2:	683b      	ldr	r3, [r7, #0]
 800e2a4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800e2b6:	2300      	movs	r3, #0
}
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	370c      	adds	r7, #12
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c2:	4770      	bx	lr

0800e2c4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800e2c4:	b590      	push	{r4, r7, lr}
 800e2c6:	b08d      	sub	sp, #52	@ 0x34
 800e2c8:	af02      	add	r7, sp, #8
 800e2ca:	6078      	str	r0, [r7, #4]
 800e2cc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	2203      	movs	r2, #3
 800e2d8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e2e0:	2b03      	cmp	r3, #3
 800e2e2:	d02e      	beq.n	800e342 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e2ea:	d106      	bne.n	800e2fa <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e2f0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	635a      	str	r2, [r3, #52]	@ 0x34
 800e2f8:	e029      	b.n	800e34e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e300:	d10a      	bne.n	800e318 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800e302:	6878      	ldr	r0, [r7, #4]
 800e304:	f000 fb64 	bl	800e9d0 <SD_WideBus_Enable>
 800e308:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e30e:	6a3b      	ldr	r3, [r7, #32]
 800e310:	431a      	orrs	r2, r3
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	635a      	str	r2, [r3, #52]	@ 0x34
 800e316:	e01a      	b.n	800e34e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800e318:	683b      	ldr	r3, [r7, #0]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d10a      	bne.n	800e334 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800e31e:	6878      	ldr	r0, [r7, #4]
 800e320:	f000 fba1 	bl	800ea66 <SD_WideBus_Disable>
 800e324:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e32a:	6a3b      	ldr	r3, [r7, #32]
 800e32c:	431a      	orrs	r2, r3
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	635a      	str	r2, [r3, #52]	@ 0x34
 800e332:	e00c      	b.n	800e34e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e338:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	635a      	str	r2, [r3, #52]	@ 0x34
 800e340:	e005      	b.n	800e34e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e346:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e352:	2b00      	cmp	r3, #0
 800e354:	d007      	beq.n	800e366 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	4a5f      	ldr	r2, [pc, #380]	@ (800e4d8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800e35c:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800e35e:	2301      	movs	r3, #1
 800e360:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e364:	e096      	b.n	800e494 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800e366:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800e36a:	f04f 0100 	mov.w	r1, #0
 800e36e:	f7fd fea3 	bl	800c0b8 <HAL_RCCEx_GetPeriphCLKFreq>
 800e372:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800e374:	69fb      	ldr	r3, [r7, #28]
 800e376:	2b00      	cmp	r3, #0
 800e378:	f000 8083 	beq.w	800e482 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	685b      	ldr	r3, [r3, #4]
 800e380:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	689b      	ldr	r3, [r3, #8]
 800e386:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800e388:	683b      	ldr	r3, [r7, #0]
 800e38a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	691b      	ldr	r3, [r3, #16]
 800e390:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	695a      	ldr	r2, [r3, #20]
 800e396:	69fb      	ldr	r3, [r7, #28]
 800e398:	4950      	ldr	r1, [pc, #320]	@ (800e4dc <HAL_SD_ConfigWideBusOperation+0x218>)
 800e39a:	fba1 1303 	umull	r1, r3, r1, r3
 800e39e:	0e1b      	lsrs	r3, r3, #24
 800e3a0:	429a      	cmp	r2, r3
 800e3a2:	d303      	bcc.n	800e3ac <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	695b      	ldr	r3, [r3, #20]
 800e3a8:	61bb      	str	r3, [r7, #24]
 800e3aa:	e05a      	b.n	800e462 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e3b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e3b4:	d103      	bne.n	800e3be <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	695b      	ldr	r3, [r3, #20]
 800e3ba:	61bb      	str	r3, [r7, #24]
 800e3bc:	e051      	b.n	800e462 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e3c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e3c6:	d126      	bne.n	800e416 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	695b      	ldr	r3, [r3, #20]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d10e      	bne.n	800e3ee <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800e3d0:	69fb      	ldr	r3, [r7, #28]
 800e3d2:	4a43      	ldr	r2, [pc, #268]	@ (800e4e0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e3d4:	4293      	cmp	r3, r2
 800e3d6:	d906      	bls.n	800e3e6 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e3d8:	69fb      	ldr	r3, [r7, #28]
 800e3da:	4a40      	ldr	r2, [pc, #256]	@ (800e4dc <HAL_SD_ConfigWideBusOperation+0x218>)
 800e3dc:	fba2 2303 	umull	r2, r3, r2, r3
 800e3e0:	0e5b      	lsrs	r3, r3, #25
 800e3e2:	61bb      	str	r3, [r7, #24]
 800e3e4:	e03d      	b.n	800e462 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	695b      	ldr	r3, [r3, #20]
 800e3ea:	61bb      	str	r3, [r7, #24]
 800e3ec:	e039      	b.n	800e462 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	695b      	ldr	r3, [r3, #20]
 800e3f2:	005b      	lsls	r3, r3, #1
 800e3f4:	69fa      	ldr	r2, [r7, #28]
 800e3f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e3fa:	4a39      	ldr	r2, [pc, #228]	@ (800e4e0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e3fc:	4293      	cmp	r3, r2
 800e3fe:	d906      	bls.n	800e40e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e400:	69fb      	ldr	r3, [r7, #28]
 800e402:	4a36      	ldr	r2, [pc, #216]	@ (800e4dc <HAL_SD_ConfigWideBusOperation+0x218>)
 800e404:	fba2 2303 	umull	r2, r3, r2, r3
 800e408:	0e5b      	lsrs	r3, r3, #25
 800e40a:	61bb      	str	r3, [r7, #24]
 800e40c:	e029      	b.n	800e462 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	695b      	ldr	r3, [r3, #20]
 800e412:	61bb      	str	r3, [r7, #24]
 800e414:	e025      	b.n	800e462 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	695b      	ldr	r3, [r3, #20]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d10e      	bne.n	800e43c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800e41e:	69fb      	ldr	r3, [r7, #28]
 800e420:	4a30      	ldr	r2, [pc, #192]	@ (800e4e4 <HAL_SD_ConfigWideBusOperation+0x220>)
 800e422:	4293      	cmp	r3, r2
 800e424:	d906      	bls.n	800e434 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e426:	69fb      	ldr	r3, [r7, #28]
 800e428:	4a2c      	ldr	r2, [pc, #176]	@ (800e4dc <HAL_SD_ConfigWideBusOperation+0x218>)
 800e42a:	fba2 2303 	umull	r2, r3, r2, r3
 800e42e:	0e1b      	lsrs	r3, r3, #24
 800e430:	61bb      	str	r3, [r7, #24]
 800e432:	e016      	b.n	800e462 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	695b      	ldr	r3, [r3, #20]
 800e438:	61bb      	str	r3, [r7, #24]
 800e43a:	e012      	b.n	800e462 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	695b      	ldr	r3, [r3, #20]
 800e440:	005b      	lsls	r3, r3, #1
 800e442:	69fa      	ldr	r2, [r7, #28]
 800e444:	fbb2 f3f3 	udiv	r3, r2, r3
 800e448:	4a26      	ldr	r2, [pc, #152]	@ (800e4e4 <HAL_SD_ConfigWideBusOperation+0x220>)
 800e44a:	4293      	cmp	r3, r2
 800e44c:	d906      	bls.n	800e45c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e44e:	69fb      	ldr	r3, [r7, #28]
 800e450:	4a22      	ldr	r2, [pc, #136]	@ (800e4dc <HAL_SD_ConfigWideBusOperation+0x218>)
 800e452:	fba2 2303 	umull	r2, r3, r2, r3
 800e456:	0e1b      	lsrs	r3, r3, #24
 800e458:	61bb      	str	r3, [r7, #24]
 800e45a:	e002      	b.n	800e462 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	695b      	ldr	r3, [r3, #20]
 800e460:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681c      	ldr	r4, [r3, #0]
 800e466:	466a      	mov	r2, sp
 800e468:	f107 0314 	add.w	r3, r7, #20
 800e46c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e470:	e882 0003 	stmia.w	r2, {r0, r1}
 800e474:	f107 0308 	add.w	r3, r7, #8
 800e478:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e47a:	4620      	mov	r0, r4
 800e47c:	f004 fac0 	bl	8012a00 <SDMMC_Init>
 800e480:	e008      	b.n	800e494 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e486:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800e48e:	2301      	movs	r3, #1
 800e490:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e49c:	4618      	mov	r0, r3
 800e49e:	f004 fb8d 	bl	8012bbc <SDMMC_CmdBlockLength>
 800e4a2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e4a4:	6a3b      	ldr	r3, [r7, #32]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d00c      	beq.n	800e4c4 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	4a0a      	ldr	r2, [pc, #40]	@ (800e4d8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800e4b0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e4b6:	6a3b      	ldr	r3, [r7, #32]
 800e4b8:	431a      	orrs	r2, r3
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800e4be:	2301      	movs	r3, #1
 800e4c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	2201      	movs	r2, #1
 800e4c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800e4cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	372c      	adds	r7, #44	@ 0x2c
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	bd90      	pop	{r4, r7, pc}
 800e4d8:	1fe00fff 	.word	0x1fe00fff
 800e4dc:	55e63b89 	.word	0x55e63b89
 800e4e0:	02faf080 	.word	0x02faf080
 800e4e4:	017d7840 	.word	0x017d7840

0800e4e8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b086      	sub	sp, #24
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800e4f4:	f107 030c 	add.w	r3, r7, #12
 800e4f8:	4619      	mov	r1, r3
 800e4fa:	6878      	ldr	r0, [r7, #4]
 800e4fc:	f000 fa40 	bl	800e980 <SD_SendStatus>
 800e500:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e502:	697b      	ldr	r3, [r7, #20]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d005      	beq.n	800e514 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e50c:	697b      	ldr	r3, [r7, #20]
 800e50e:	431a      	orrs	r2, r3
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	0a5b      	lsrs	r3, r3, #9
 800e518:	f003 030f 	and.w	r3, r3, #15
 800e51c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800e51e:	693b      	ldr	r3, [r7, #16]
}
 800e520:	4618      	mov	r0, r3
 800e522:	3718      	adds	r7, #24
 800e524:	46bd      	mov	sp, r7
 800e526:	bd80      	pop	{r7, pc}

0800e528 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b090      	sub	sp, #64	@ 0x40
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800e530:	2300      	movs	r3, #0
 800e532:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800e534:	f7f5 fac6 	bl	8003ac4 <HAL_GetTick>
 800e538:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	4618      	mov	r0, r3
 800e540:	f004 fab7 	bl	8012ab2 <SDMMC_GetPowerState>
 800e544:	4603      	mov	r3, r0
 800e546:	2b00      	cmp	r3, #0
 800e548:	d102      	bne.n	800e550 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e54a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800e54e:	e0b5      	b.n	800e6bc <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e554:	2b03      	cmp	r3, #3
 800e556:	d02e      	beq.n	800e5b6 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	4618      	mov	r0, r3
 800e55e:	f004 fd02 	bl	8012f66 <SDMMC_CmdSendCID>
 800e562:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e566:	2b00      	cmp	r3, #0
 800e568:	d001      	beq.n	800e56e <SD_InitCard+0x46>
    {
      return errorstate;
 800e56a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e56c:	e0a6      	b.n	800e6bc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	2100      	movs	r1, #0
 800e574:	4618      	mov	r0, r3
 800e576:	f004 fae2 	bl	8012b3e <SDMMC_GetResponse>
 800e57a:	4602      	mov	r2, r0
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	2104      	movs	r1, #4
 800e586:	4618      	mov	r0, r3
 800e588:	f004 fad9 	bl	8012b3e <SDMMC_GetResponse>
 800e58c:	4602      	mov	r2, r0
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	2108      	movs	r1, #8
 800e598:	4618      	mov	r0, r3
 800e59a:	f004 fad0 	bl	8012b3e <SDMMC_GetResponse>
 800e59e:	4602      	mov	r2, r0
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	210c      	movs	r1, #12
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	f004 fac7 	bl	8012b3e <SDMMC_GetResponse>
 800e5b0:	4602      	mov	r2, r0
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e5ba:	2b03      	cmp	r3, #3
 800e5bc:	d01d      	beq.n	800e5fa <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800e5be:	e019      	b.n	800e5f4 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	f107 020a 	add.w	r2, r7, #10
 800e5c8:	4611      	mov	r1, r2
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	f004 fd0a 	bl	8012fe4 <SDMMC_CmdSetRelAdd>
 800e5d0:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800e5d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d001      	beq.n	800e5dc <SD_InitCard+0xb4>
      {
        return errorstate;
 800e5d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5da:	e06f      	b.n	800e6bc <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800e5dc:	f7f5 fa72 	bl	8003ac4 <HAL_GetTick>
 800e5e0:	4602      	mov	r2, r0
 800e5e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e5e4:	1ad3      	subs	r3, r2, r3
 800e5e6:	f241 3287 	movw	r2, #4999	@ 0x1387
 800e5ea:	4293      	cmp	r3, r2
 800e5ec:	d902      	bls.n	800e5f4 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800e5ee:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e5f2:	e063      	b.n	800e6bc <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800e5f4:	897b      	ldrh	r3, [r7, #10]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d0e2      	beq.n	800e5c0 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e5fe:	2b03      	cmp	r3, #3
 800e600:	d036      	beq.n	800e670 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e602:	897b      	ldrh	r3, [r7, #10]
 800e604:	461a      	mov	r2, r3
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681a      	ldr	r2, [r3, #0]
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e612:	041b      	lsls	r3, r3, #16
 800e614:	4619      	mov	r1, r3
 800e616:	4610      	mov	r0, r2
 800e618:	f004 fcc4 	bl	8012fa4 <SDMMC_CmdSendCSD>
 800e61c:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e61e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e620:	2b00      	cmp	r3, #0
 800e622:	d001      	beq.n	800e628 <SD_InitCard+0x100>
    {
      return errorstate;
 800e624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e626:	e049      	b.n	800e6bc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	2100      	movs	r1, #0
 800e62e:	4618      	mov	r0, r3
 800e630:	f004 fa85 	bl	8012b3e <SDMMC_GetResponse>
 800e634:	4602      	mov	r2, r0
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	2104      	movs	r1, #4
 800e640:	4618      	mov	r0, r3
 800e642:	f004 fa7c 	bl	8012b3e <SDMMC_GetResponse>
 800e646:	4602      	mov	r2, r0
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	2108      	movs	r1, #8
 800e652:	4618      	mov	r0, r3
 800e654:	f004 fa73 	bl	8012b3e <SDMMC_GetResponse>
 800e658:	4602      	mov	r2, r0
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	210c      	movs	r1, #12
 800e664:	4618      	mov	r0, r3
 800e666:	f004 fa6a 	bl	8012b3e <SDMMC_GetResponse>
 800e66a:	4602      	mov	r2, r0
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	2104      	movs	r1, #4
 800e676:	4618      	mov	r0, r3
 800e678:	f004 fa61 	bl	8012b3e <SDMMC_GetResponse>
 800e67c:	4603      	mov	r3, r0
 800e67e:	0d1a      	lsrs	r2, r3, #20
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e684:	f107 030c 	add.w	r3, r7, #12
 800e688:	4619      	mov	r1, r3
 800e68a:	6878      	ldr	r0, [r7, #4]
 800e68c:	f7ff fb8c 	bl	800dda8 <HAL_SD_GetCardCSD>
 800e690:	4603      	mov	r3, r0
 800e692:	2b00      	cmp	r3, #0
 800e694:	d002      	beq.n	800e69c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e696:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800e69a:	e00f      	b.n	800e6bc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681a      	ldr	r2, [r3, #0]
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e6a4:	041b      	lsls	r3, r3, #16
 800e6a6:	4619      	mov	r1, r3
 800e6a8:	4610      	mov	r0, r2
 800e6aa:	f004 fb73 	bl	8012d94 <SDMMC_CmdSelDesel>
 800e6ae:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800e6b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d001      	beq.n	800e6ba <SD_InitCard+0x192>
  {
    return errorstate;
 800e6b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6b8:	e000      	b.n	800e6bc <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e6ba:	2300      	movs	r3, #0
}
 800e6bc:	4618      	mov	r0, r3
 800e6be:	3740      	adds	r7, #64	@ 0x40
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	bd80      	pop	{r7, pc}

0800e6c4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b086      	sub	sp, #24
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	4618      	mov	r0, r3
 800e6de:	f004 fb7c 	bl	8012dda <SDMMC_CmdGoIdleState>
 800e6e2:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d001      	beq.n	800e6ee <SD_PowerON+0x2a>
  {
    return errorstate;
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	e072      	b.n	800e7d4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	f004 fb8f 	bl	8012e16 <SDMMC_CmdOperCond>
 800e6f8:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e700:	d10d      	bne.n	800e71e <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	2200      	movs	r2, #0
 800e706:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	4618      	mov	r0, r3
 800e70e:	f004 fb64 	bl	8012dda <SDMMC_CmdGoIdleState>
 800e712:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d004      	beq.n	800e724 <SD_PowerON+0x60>
    {
      return errorstate;
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	e05a      	b.n	800e7d4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	2201      	movs	r2, #1
 800e722:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e728:	2b01      	cmp	r3, #1
 800e72a:	d137      	bne.n	800e79c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	2100      	movs	r1, #0
 800e732:	4618      	mov	r0, r3
 800e734:	f004 fb8f 	bl	8012e56 <SDMMC_CmdAppCommand>
 800e738:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d02d      	beq.n	800e79c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e740:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800e744:	e046      	b.n	800e7d4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	2100      	movs	r1, #0
 800e74c:	4618      	mov	r0, r3
 800e74e:	f004 fb82 	bl	8012e56 <SDMMC_CmdAppCommand>
 800e752:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d001      	beq.n	800e75e <SD_PowerON+0x9a>
    {
      return errorstate;
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	e03a      	b.n	800e7d4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	491e      	ldr	r1, [pc, #120]	@ (800e7dc <SD_PowerON+0x118>)
 800e764:	4618      	mov	r0, r3
 800e766:	f004 fb99 	bl	8012e9c <SDMMC_CmdAppOperCommand>
 800e76a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d002      	beq.n	800e778 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e772:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800e776:	e02d      	b.n	800e7d4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	2100      	movs	r1, #0
 800e77e:	4618      	mov	r0, r3
 800e780:	f004 f9dd 	bl	8012b3e <SDMMC_GetResponse>
 800e784:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e786:	697b      	ldr	r3, [r7, #20]
 800e788:	0fdb      	lsrs	r3, r3, #31
 800e78a:	2b01      	cmp	r3, #1
 800e78c:	d101      	bne.n	800e792 <SD_PowerON+0xce>
 800e78e:	2301      	movs	r3, #1
 800e790:	e000      	b.n	800e794 <SD_PowerON+0xd0>
 800e792:	2300      	movs	r3, #0
 800e794:	613b      	str	r3, [r7, #16]

    count++;
 800e796:	68bb      	ldr	r3, [r7, #8]
 800e798:	3301      	adds	r3, #1
 800e79a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e79c:	68bb      	ldr	r3, [r7, #8]
 800e79e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800e7a2:	4293      	cmp	r3, r2
 800e7a4:	d802      	bhi.n	800e7ac <SD_PowerON+0xe8>
 800e7a6:	693b      	ldr	r3, [r7, #16]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d0cc      	beq.n	800e746 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800e7ac:	68bb      	ldr	r3, [r7, #8]
 800e7ae:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800e7b2:	4293      	cmp	r3, r2
 800e7b4:	d902      	bls.n	800e7bc <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e7b6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e7ba:	e00b      	b.n	800e7d4 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	2200      	movs	r2, #0
 800e7c0:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800e7c2:	697b      	ldr	r3, [r7, #20]
 800e7c4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d002      	beq.n	800e7d2 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	2201      	movs	r2, #1
 800e7d0:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800e7d2:	2300      	movs	r3, #0
}
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	3718      	adds	r7, #24
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	bd80      	pop	{r7, pc}
 800e7dc:	c1100000 	.word	0xc1100000

0800e7e0 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b08c      	sub	sp, #48	@ 0x30
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
 800e7e8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e7ea:	f7f5 f96b 	bl	8003ac4 <HAL_GetTick>
 800e7ee:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800e7f0:	683b      	ldr	r3, [r7, #0]
 800e7f2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	2100      	movs	r1, #0
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	f004 f99f 	bl	8012b3e <SDMMC_GetResponse>
 800e800:	4603      	mov	r3, r0
 800e802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e806:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e80a:	d102      	bne.n	800e812 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e80c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e810:	e0b0      	b.n	800e974 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	2140      	movs	r1, #64	@ 0x40
 800e818:	4618      	mov	r0, r3
 800e81a:	f004 f9cf 	bl	8012bbc <SDMMC_CmdBlockLength>
 800e81e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e820:	6a3b      	ldr	r3, [r7, #32]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d005      	beq.n	800e832 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800e82e:	6a3b      	ldr	r3, [r7, #32]
 800e830:	e0a0      	b.n	800e974 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	681a      	ldr	r2, [r3, #0]
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e83a:	041b      	lsls	r3, r3, #16
 800e83c:	4619      	mov	r1, r3
 800e83e:	4610      	mov	r0, r2
 800e840:	f004 fb09 	bl	8012e56 <SDMMC_CmdAppCommand>
 800e844:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e846:	6a3b      	ldr	r3, [r7, #32]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d005      	beq.n	800e858 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800e854:	6a3b      	ldr	r3, [r7, #32]
 800e856:	e08d      	b.n	800e974 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e858:	f04f 33ff 	mov.w	r3, #4294967295
 800e85c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800e85e:	2340      	movs	r3, #64	@ 0x40
 800e860:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800e862:	2360      	movs	r3, #96	@ 0x60
 800e864:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e866:	2302      	movs	r3, #2
 800e868:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e86a:	2300      	movs	r3, #0
 800e86c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e86e:	2301      	movs	r3, #1
 800e870:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	f107 0208 	add.w	r2, r7, #8
 800e87a:	4611      	mov	r1, r2
 800e87c:	4618      	mov	r0, r3
 800e87e:	f004 f971 	bl	8012b64 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	4618      	mov	r0, r3
 800e888:	f004 fbf1 	bl	801306e <SDMMC_CmdStatusRegister>
 800e88c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e88e:	6a3b      	ldr	r3, [r7, #32]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d02b      	beq.n	800e8ec <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800e89c:	6a3b      	ldr	r3, [r7, #32]
 800e89e:	e069      	b.n	800e974 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e8a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d013      	beq.n	800e8d6 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e8b2:	e00d      	b.n	800e8d0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	f004 f8cb 	bl	8012a54 <SDMMC_ReadFIFO>
 800e8be:	4602      	mov	r2, r0
 800e8c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8c2:	601a      	str	r2, [r3, #0]
        pData++;
 800e8c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8c6:	3304      	adds	r3, #4
 800e8c8:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800e8ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8cc:	3301      	adds	r3, #1
 800e8ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e8d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8d2:	2b07      	cmp	r3, #7
 800e8d4:	d9ee      	bls.n	800e8b4 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e8d6:	f7f5 f8f5 	bl	8003ac4 <HAL_GetTick>
 800e8da:	4602      	mov	r2, r0
 800e8dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8de:	1ad3      	subs	r3, r2, r3
 800e8e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8e4:	d102      	bne.n	800e8ec <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e8e6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e8ea:	e043      	b.n	800e974 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e8f2:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d0d2      	beq.n	800e8a0 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e900:	f003 0308 	and.w	r3, r3, #8
 800e904:	2b00      	cmp	r3, #0
 800e906:	d001      	beq.n	800e90c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e908:	2308      	movs	r3, #8
 800e90a:	e033      	b.n	800e974 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e912:	f003 0302 	and.w	r3, r3, #2
 800e916:	2b00      	cmp	r3, #0
 800e918:	d001      	beq.n	800e91e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e91a:	2302      	movs	r3, #2
 800e91c:	e02a      	b.n	800e974 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e924:	f003 0320 	and.w	r3, r3, #32
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d017      	beq.n	800e95c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800e92c:	2320      	movs	r3, #32
 800e92e:	e021      	b.n	800e974 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	4618      	mov	r0, r3
 800e936:	f004 f88d 	bl	8012a54 <SDMMC_ReadFIFO>
 800e93a:	4602      	mov	r2, r0
 800e93c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e93e:	601a      	str	r2, [r3, #0]
    pData++;
 800e940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e942:	3304      	adds	r3, #4
 800e944:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e946:	f7f5 f8bd 	bl	8003ac4 <HAL_GetTick>
 800e94a:	4602      	mov	r2, r0
 800e94c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e94e:	1ad3      	subs	r3, r2, r3
 800e950:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e954:	d102      	bne.n	800e95c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e956:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e95a:	e00b      	b.n	800e974 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e962:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800e966:	2b00      	cmp	r3, #0
 800e968:	d1e2      	bne.n	800e930 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	4a03      	ldr	r2, [pc, #12]	@ (800e97c <SD_SendSDStatus+0x19c>)
 800e970:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800e972:	2300      	movs	r3, #0
}
 800e974:	4618      	mov	r0, r3
 800e976:	3730      	adds	r7, #48	@ 0x30
 800e978:	46bd      	mov	sp, r7
 800e97a:	bd80      	pop	{r7, pc}
 800e97c:	18000f3a 	.word	0x18000f3a

0800e980 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e980:	b580      	push	{r7, lr}
 800e982:	b084      	sub	sp, #16
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
 800e988:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800e98a:	683b      	ldr	r3, [r7, #0]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d102      	bne.n	800e996 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e990:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e994:	e018      	b.n	800e9c8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681a      	ldr	r2, [r3, #0]
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e99e:	041b      	lsls	r3, r3, #16
 800e9a0:	4619      	mov	r1, r3
 800e9a2:	4610      	mov	r0, r2
 800e9a4:	f004 fb40 	bl	8013028 <SDMMC_CmdSendStatus>
 800e9a8:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d001      	beq.n	800e9b4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	e009      	b.n	800e9c8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	2100      	movs	r1, #0
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	f004 f8bf 	bl	8012b3e <SDMMC_GetResponse>
 800e9c0:	4602      	mov	r2, r0
 800e9c2:	683b      	ldr	r3, [r7, #0]
 800e9c4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e9c6:	2300      	movs	r3, #0
}
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	3710      	adds	r7, #16
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	bd80      	pop	{r7, pc}

0800e9d0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b086      	sub	sp, #24
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e9d8:	2300      	movs	r3, #0
 800e9da:	60fb      	str	r3, [r7, #12]
 800e9dc:	2300      	movs	r3, #0
 800e9de:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	2100      	movs	r1, #0
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	f004 f8a9 	bl	8012b3e <SDMMC_GetResponse>
 800e9ec:	4603      	mov	r3, r0
 800e9ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e9f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e9f6:	d102      	bne.n	800e9fe <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e9f8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e9fc:	e02f      	b.n	800ea5e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e9fe:	f107 030c 	add.w	r3, r7, #12
 800ea02:	4619      	mov	r1, r3
 800ea04:	6878      	ldr	r0, [r7, #4]
 800ea06:	f000 f879 	bl	800eafc <SD_FindSCR>
 800ea0a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ea0c:	697b      	ldr	r3, [r7, #20]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d001      	beq.n	800ea16 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800ea12:	697b      	ldr	r3, [r7, #20]
 800ea14:	e023      	b.n	800ea5e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ea16:	693b      	ldr	r3, [r7, #16]
 800ea18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d01c      	beq.n	800ea5a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	681a      	ldr	r2, [r3, #0]
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ea28:	041b      	lsls	r3, r3, #16
 800ea2a:	4619      	mov	r1, r3
 800ea2c:	4610      	mov	r0, r2
 800ea2e:	f004 fa12 	bl	8012e56 <SDMMC_CmdAppCommand>
 800ea32:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ea34:	697b      	ldr	r3, [r7, #20]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d001      	beq.n	800ea3e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800ea3a:	697b      	ldr	r3, [r7, #20]
 800ea3c:	e00f      	b.n	800ea5e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	2102      	movs	r1, #2
 800ea44:	4618      	mov	r0, r3
 800ea46:	f004 fa49 	bl	8012edc <SDMMC_CmdBusWidth>
 800ea4a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ea4c:	697b      	ldr	r3, [r7, #20]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d001      	beq.n	800ea56 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800ea52:	697b      	ldr	r3, [r7, #20]
 800ea54:	e003      	b.n	800ea5e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ea56:	2300      	movs	r3, #0
 800ea58:	e001      	b.n	800ea5e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ea5a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800ea5e:	4618      	mov	r0, r3
 800ea60:	3718      	adds	r7, #24
 800ea62:	46bd      	mov	sp, r7
 800ea64:	bd80      	pop	{r7, pc}

0800ea66 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800ea66:	b580      	push	{r7, lr}
 800ea68:	b086      	sub	sp, #24
 800ea6a:	af00      	add	r7, sp, #0
 800ea6c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ea6e:	2300      	movs	r3, #0
 800ea70:	60fb      	str	r3, [r7, #12]
 800ea72:	2300      	movs	r3, #0
 800ea74:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	2100      	movs	r1, #0
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	f004 f85e 	bl	8012b3e <SDMMC_GetResponse>
 800ea82:	4603      	mov	r3, r0
 800ea84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ea88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ea8c:	d102      	bne.n	800ea94 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ea8e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ea92:	e02f      	b.n	800eaf4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ea94:	f107 030c 	add.w	r3, r7, #12
 800ea98:	4619      	mov	r1, r3
 800ea9a:	6878      	ldr	r0, [r7, #4]
 800ea9c:	f000 f82e 	bl	800eafc <SD_FindSCR>
 800eaa0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800eaa2:	697b      	ldr	r3, [r7, #20]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d001      	beq.n	800eaac <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800eaa8:	697b      	ldr	r3, [r7, #20]
 800eaaa:	e023      	b.n	800eaf4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800eaac:	693b      	ldr	r3, [r7, #16]
 800eaae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d01c      	beq.n	800eaf0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681a      	ldr	r2, [r3, #0]
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eabe:	041b      	lsls	r3, r3, #16
 800eac0:	4619      	mov	r1, r3
 800eac2:	4610      	mov	r0, r2
 800eac4:	f004 f9c7 	bl	8012e56 <SDMMC_CmdAppCommand>
 800eac8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800eaca:	697b      	ldr	r3, [r7, #20]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d001      	beq.n	800ead4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800ead0:	697b      	ldr	r3, [r7, #20]
 800ead2:	e00f      	b.n	800eaf4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	2100      	movs	r1, #0
 800eada:	4618      	mov	r0, r3
 800eadc:	f004 f9fe 	bl	8012edc <SDMMC_CmdBusWidth>
 800eae0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800eae2:	697b      	ldr	r3, [r7, #20]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d001      	beq.n	800eaec <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800eae8:	697b      	ldr	r3, [r7, #20]
 800eaea:	e003      	b.n	800eaf4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800eaec:	2300      	movs	r3, #0
 800eaee:	e001      	b.n	800eaf4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800eaf0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	3718      	adds	r7, #24
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	bd80      	pop	{r7, pc}

0800eafc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b08e      	sub	sp, #56	@ 0x38
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
 800eb04:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800eb06:	f7f4 ffdd 	bl	8003ac4 <HAL_GetTick>
 800eb0a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800eb10:	2300      	movs	r3, #0
 800eb12:	60bb      	str	r3, [r7, #8]
 800eb14:	2300      	movs	r3, #0
 800eb16:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	2108      	movs	r1, #8
 800eb22:	4618      	mov	r0, r3
 800eb24:	f004 f84a 	bl	8012bbc <SDMMC_CmdBlockLength>
 800eb28:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800eb2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d001      	beq.n	800eb34 <SD_FindSCR+0x38>
  {
    return errorstate;
 800eb30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb32:	e0ad      	b.n	800ec90 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681a      	ldr	r2, [r3, #0]
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eb3c:	041b      	lsls	r3, r3, #16
 800eb3e:	4619      	mov	r1, r3
 800eb40:	4610      	mov	r0, r2
 800eb42:	f004 f988 	bl	8012e56 <SDMMC_CmdAppCommand>
 800eb46:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800eb48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d001      	beq.n	800eb52 <SD_FindSCR+0x56>
  {
    return errorstate;
 800eb4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb50:	e09e      	b.n	800ec90 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800eb52:	f04f 33ff 	mov.w	r3, #4294967295
 800eb56:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800eb58:	2308      	movs	r3, #8
 800eb5a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800eb5c:	2330      	movs	r3, #48	@ 0x30
 800eb5e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800eb60:	2302      	movs	r3, #2
 800eb62:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800eb64:	2300      	movs	r3, #0
 800eb66:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800eb68:	2301      	movs	r3, #1
 800eb6a:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	f107 0210 	add.w	r2, r7, #16
 800eb74:	4611      	mov	r1, r2
 800eb76:	4618      	mov	r0, r3
 800eb78:	f003 fff4 	bl	8012b64 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	4618      	mov	r0, r3
 800eb82:	f004 f9ce 	bl	8012f22 <SDMMC_CmdSendSCR>
 800eb86:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800eb88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d027      	beq.n	800ebde <SD_FindSCR+0xe2>
  {
    return errorstate;
 800eb8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb90:	e07e      	b.n	800ec90 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eb98:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d113      	bne.n	800ebc8 <SD_FindSCR+0xcc>
 800eba0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d110      	bne.n	800ebc8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	4618      	mov	r0, r3
 800ebac:	f003 ff52 	bl	8012a54 <SDMMC_ReadFIFO>
 800ebb0:	4603      	mov	r3, r0
 800ebb2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	4618      	mov	r0, r3
 800ebba:	f003 ff4b 	bl	8012a54 <SDMMC_ReadFIFO>
 800ebbe:	4603      	mov	r3, r0
 800ebc0:	60fb      	str	r3, [r7, #12]
      index++;
 800ebc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ebc4:	3301      	adds	r3, #1
 800ebc6:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ebc8:	f7f4 ff7c 	bl	8003ac4 <HAL_GetTick>
 800ebcc:	4602      	mov	r2, r0
 800ebce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebd0:	1ad3      	subs	r3, r2, r3
 800ebd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebd6:	d102      	bne.n	800ebde <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ebd8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ebdc:	e058      	b.n	800ec90 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ebe4:	f240 532a 	movw	r3, #1322	@ 0x52a
 800ebe8:	4013      	ands	r3, r2
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d0d1      	beq.n	800eb92 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ebf4:	f003 0308 	and.w	r3, r3, #8
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d005      	beq.n	800ec08 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	2208      	movs	r2, #8
 800ec02:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ec04:	2308      	movs	r3, #8
 800ec06:	e043      	b.n	800ec90 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec0e:	f003 0302 	and.w	r3, r3, #2
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d005      	beq.n	800ec22 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	2202      	movs	r2, #2
 800ec1c:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ec1e:	2302      	movs	r3, #2
 800ec20:	e036      	b.n	800ec90 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec28:	f003 0320 	and.w	r3, r3, #32
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d005      	beq.n	800ec3c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	2220      	movs	r2, #32
 800ec36:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800ec38:	2320      	movs	r3, #32
 800ec3a:	e029      	b.n	800ec90 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	4a15      	ldr	r2, [pc, #84]	@ (800ec98 <SD_FindSCR+0x19c>)
 800ec42:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	061a      	lsls	r2, r3, #24
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	021b      	lsls	r3, r3, #8
 800ec4c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ec50:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	0a1b      	lsrs	r3, r3, #8
 800ec56:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ec5a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	0e1b      	lsrs	r3, r3, #24
 800ec60:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ec62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec64:	601a      	str	r2, [r3, #0]
    scr++;
 800ec66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec68:	3304      	adds	r3, #4
 800ec6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ec6c:	68bb      	ldr	r3, [r7, #8]
 800ec6e:	061a      	lsls	r2, r3, #24
 800ec70:	68bb      	ldr	r3, [r7, #8]
 800ec72:	021b      	lsls	r3, r3, #8
 800ec74:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ec78:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ec7a:	68bb      	ldr	r3, [r7, #8]
 800ec7c:	0a1b      	lsrs	r3, r3, #8
 800ec7e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ec82:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ec84:	68bb      	ldr	r3, [r7, #8]
 800ec86:	0e1b      	lsrs	r3, r3, #24
 800ec88:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ec8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec8c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800ec8e:	2300      	movs	r3, #0
}
 800ec90:	4618      	mov	r0, r3
 800ec92:	3738      	adds	r7, #56	@ 0x38
 800ec94:	46bd      	mov	sp, r7
 800ec96:	bd80      	pop	{r7, pc}
 800ec98:	18000f3a 	.word	0x18000f3a

0800ec9c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b086      	sub	sp, #24
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eca8:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ecae:	2b1f      	cmp	r3, #31
 800ecb0:	d936      	bls.n	800ed20 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	617b      	str	r3, [r7, #20]
 800ecb6:	e027      	b.n	800ed08 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	f003 fec9 	bl	8012a54 <SDMMC_ReadFIFO>
 800ecc2:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	b2da      	uxtb	r2, r3
 800ecc8:	693b      	ldr	r3, [r7, #16]
 800ecca:	701a      	strb	r2, [r3, #0]
      tmp++;
 800eccc:	693b      	ldr	r3, [r7, #16]
 800ecce:	3301      	adds	r3, #1
 800ecd0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	0a1b      	lsrs	r3, r3, #8
 800ecd6:	b2da      	uxtb	r2, r3
 800ecd8:	693b      	ldr	r3, [r7, #16]
 800ecda:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ecdc:	693b      	ldr	r3, [r7, #16]
 800ecde:	3301      	adds	r3, #1
 800ece0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	0c1b      	lsrs	r3, r3, #16
 800ece6:	b2da      	uxtb	r2, r3
 800ece8:	693b      	ldr	r3, [r7, #16]
 800ecea:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ecec:	693b      	ldr	r3, [r7, #16]
 800ecee:	3301      	adds	r3, #1
 800ecf0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	0e1b      	lsrs	r3, r3, #24
 800ecf6:	b2da      	uxtb	r2, r3
 800ecf8:	693b      	ldr	r3, [r7, #16]
 800ecfa:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ecfc:	693b      	ldr	r3, [r7, #16]
 800ecfe:	3301      	adds	r3, #1
 800ed00:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800ed02:	697b      	ldr	r3, [r7, #20]
 800ed04:	3301      	adds	r3, #1
 800ed06:	617b      	str	r3, [r7, #20]
 800ed08:	697b      	ldr	r3, [r7, #20]
 800ed0a:	2b07      	cmp	r3, #7
 800ed0c:	d9d4      	bls.n	800ecb8 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	693a      	ldr	r2, [r7, #16]
 800ed12:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed18:	f1a3 0220 	sub.w	r2, r3, #32
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800ed20:	bf00      	nop
 800ed22:	3718      	adds	r7, #24
 800ed24:	46bd      	mov	sp, r7
 800ed26:	bd80      	pop	{r7, pc}

0800ed28 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b086      	sub	sp, #24
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	69db      	ldr	r3, [r3, #28]
 800ed34:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	6a1b      	ldr	r3, [r3, #32]
 800ed3a:	2b1f      	cmp	r3, #31
 800ed3c:	d93a      	bls.n	800edb4 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800ed3e:	2300      	movs	r3, #0
 800ed40:	617b      	str	r3, [r7, #20]
 800ed42:	e02b      	b.n	800ed9c <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800ed44:	693b      	ldr	r3, [r7, #16]
 800ed46:	781b      	ldrb	r3, [r3, #0]
 800ed48:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ed4a:	693b      	ldr	r3, [r7, #16]
 800ed4c:	3301      	adds	r3, #1
 800ed4e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800ed50:	693b      	ldr	r3, [r7, #16]
 800ed52:	781b      	ldrb	r3, [r3, #0]
 800ed54:	021a      	lsls	r2, r3, #8
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	4313      	orrs	r3, r2
 800ed5a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ed5c:	693b      	ldr	r3, [r7, #16]
 800ed5e:	3301      	adds	r3, #1
 800ed60:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800ed62:	693b      	ldr	r3, [r7, #16]
 800ed64:	781b      	ldrb	r3, [r3, #0]
 800ed66:	041a      	lsls	r2, r3, #16
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	4313      	orrs	r3, r2
 800ed6c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ed6e:	693b      	ldr	r3, [r7, #16]
 800ed70:	3301      	adds	r3, #1
 800ed72:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800ed74:	693b      	ldr	r3, [r7, #16]
 800ed76:	781b      	ldrb	r3, [r3, #0]
 800ed78:	061a      	lsls	r2, r3, #24
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	4313      	orrs	r3, r2
 800ed7e:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ed80:	693b      	ldr	r3, [r7, #16]
 800ed82:	3301      	adds	r3, #1
 800ed84:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	f107 020c 	add.w	r2, r7, #12
 800ed8e:	4611      	mov	r1, r2
 800ed90:	4618      	mov	r0, r3
 800ed92:	f003 fe6c 	bl	8012a6e <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800ed96:	697b      	ldr	r3, [r7, #20]
 800ed98:	3301      	adds	r3, #1
 800ed9a:	617b      	str	r3, [r7, #20]
 800ed9c:	697b      	ldr	r3, [r7, #20]
 800ed9e:	2b07      	cmp	r3, #7
 800eda0:	d9d0      	bls.n	800ed44 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	693a      	ldr	r2, [r7, #16]
 800eda6:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	6a1b      	ldr	r3, [r3, #32]
 800edac:	f1a3 0220 	sub.w	r2, r3, #32
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	621a      	str	r2, [r3, #32]
  }
}
 800edb4:	bf00      	nop
 800edb6:	3718      	adds	r7, #24
 800edb8:	46bd      	mov	sp, r7
 800edba:	bd80      	pop	{r7, pc}

0800edbc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800edbc:	b480      	push	{r7}
 800edbe:	b083      	sub	sp, #12
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800edc4:	bf00      	nop
 800edc6:	370c      	adds	r7, #12
 800edc8:	46bd      	mov	sp, r7
 800edca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edce:	4770      	bx	lr

0800edd0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800edd0:	b480      	push	{r7}
 800edd2:	b083      	sub	sp, #12
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800edd8:	bf00      	nop
 800edda:	370c      	adds	r7, #12
 800eddc:	46bd      	mov	sp, r7
 800edde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede2:	4770      	bx	lr

0800ede4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800ede4:	b480      	push	{r7}
 800ede6:	b083      	sub	sp, #12
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800edec:	bf00      	nop
 800edee:	370c      	adds	r7, #12
 800edf0:	46bd      	mov	sp, r7
 800edf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf6:	4770      	bx	lr

0800edf8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800edf8:	b480      	push	{r7}
 800edfa:	b083      	sub	sp, #12
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800ee00:	bf00      	nop
 800ee02:	370c      	adds	r7, #12
 800ee04:	46bd      	mov	sp, r7
 800ee06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0a:	4770      	bx	lr

0800ee0c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b084      	sub	sp, #16
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d101      	bne.n	800ee1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ee1a:	2301      	movs	r3, #1
 800ee1c:	e10f      	b.n	800f03e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	2200      	movs	r2, #0
 800ee22:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	4a87      	ldr	r2, [pc, #540]	@ (800f048 <HAL_SPI_Init+0x23c>)
 800ee2a:	4293      	cmp	r3, r2
 800ee2c:	d00f      	beq.n	800ee4e <HAL_SPI_Init+0x42>
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	4a86      	ldr	r2, [pc, #536]	@ (800f04c <HAL_SPI_Init+0x240>)
 800ee34:	4293      	cmp	r3, r2
 800ee36:	d00a      	beq.n	800ee4e <HAL_SPI_Init+0x42>
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	4a84      	ldr	r2, [pc, #528]	@ (800f050 <HAL_SPI_Init+0x244>)
 800ee3e:	4293      	cmp	r3, r2
 800ee40:	d005      	beq.n	800ee4e <HAL_SPI_Init+0x42>
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	68db      	ldr	r3, [r3, #12]
 800ee46:	2b0f      	cmp	r3, #15
 800ee48:	d901      	bls.n	800ee4e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ee4a:	2301      	movs	r3, #1
 800ee4c:	e0f7      	b.n	800f03e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ee4e:	6878      	ldr	r0, [r7, #4]
 800ee50:	f001 f968 	bl	8010124 <SPI_GetPacketSize>
 800ee54:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	4a7b      	ldr	r2, [pc, #492]	@ (800f048 <HAL_SPI_Init+0x23c>)
 800ee5c:	4293      	cmp	r3, r2
 800ee5e:	d00c      	beq.n	800ee7a <HAL_SPI_Init+0x6e>
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	4a79      	ldr	r2, [pc, #484]	@ (800f04c <HAL_SPI_Init+0x240>)
 800ee66:	4293      	cmp	r3, r2
 800ee68:	d007      	beq.n	800ee7a <HAL_SPI_Init+0x6e>
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	4a78      	ldr	r2, [pc, #480]	@ (800f050 <HAL_SPI_Init+0x244>)
 800ee70:	4293      	cmp	r3, r2
 800ee72:	d002      	beq.n	800ee7a <HAL_SPI_Init+0x6e>
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	2b08      	cmp	r3, #8
 800ee78:	d811      	bhi.n	800ee9e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ee7e:	4a72      	ldr	r2, [pc, #456]	@ (800f048 <HAL_SPI_Init+0x23c>)
 800ee80:	4293      	cmp	r3, r2
 800ee82:	d009      	beq.n	800ee98 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	4a70      	ldr	r2, [pc, #448]	@ (800f04c <HAL_SPI_Init+0x240>)
 800ee8a:	4293      	cmp	r3, r2
 800ee8c:	d004      	beq.n	800ee98 <HAL_SPI_Init+0x8c>
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	4a6f      	ldr	r2, [pc, #444]	@ (800f050 <HAL_SPI_Init+0x244>)
 800ee94:	4293      	cmp	r3, r2
 800ee96:	d104      	bne.n	800eea2 <HAL_SPI_Init+0x96>
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	2b10      	cmp	r3, #16
 800ee9c:	d901      	bls.n	800eea2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800ee9e:	2301      	movs	r3, #1
 800eea0:	e0cd      	b.n	800f03e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800eea8:	b2db      	uxtb	r3, r3
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d106      	bne.n	800eebc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	2200      	movs	r2, #0
 800eeb2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800eeb6:	6878      	ldr	r0, [r7, #4]
 800eeb8:	f7f4 fa90 	bl	80033dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	2202      	movs	r2, #2
 800eec0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	681a      	ldr	r2, [r3, #0]
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	f022 0201 	bic.w	r2, r2, #1
 800eed2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	689b      	ldr	r3, [r3, #8]
 800eeda:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800eede:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	699b      	ldr	r3, [r3, #24]
 800eee4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800eee8:	d119      	bne.n	800ef1e <HAL_SPI_Init+0x112>
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	685b      	ldr	r3, [r3, #4]
 800eeee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800eef2:	d103      	bne.n	800eefc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d008      	beq.n	800ef0e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d10c      	bne.n	800ef1e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ef08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ef0c:	d107      	bne.n	800ef1e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	681a      	ldr	r2, [r3, #0]
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ef1c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	685b      	ldr	r3, [r3, #4]
 800ef22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d00f      	beq.n	800ef4a <HAL_SPI_Init+0x13e>
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	68db      	ldr	r3, [r3, #12]
 800ef2e:	2b06      	cmp	r3, #6
 800ef30:	d90b      	bls.n	800ef4a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	430a      	orrs	r2, r1
 800ef46:	601a      	str	r2, [r3, #0]
 800ef48:	e007      	b.n	800ef5a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	681a      	ldr	r2, [r3, #0]
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ef58:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	69da      	ldr	r2, [r3, #28]
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef62:	431a      	orrs	r2, r3
 800ef64:	68bb      	ldr	r3, [r7, #8]
 800ef66:	431a      	orrs	r2, r3
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ef6c:	ea42 0103 	orr.w	r1, r2, r3
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	68da      	ldr	r2, [r3, #12]
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	430a      	orrs	r2, r1
 800ef7a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef84:	431a      	orrs	r2, r3
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ef8a:	431a      	orrs	r2, r3
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	699b      	ldr	r3, [r3, #24]
 800ef90:	431a      	orrs	r2, r3
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	691b      	ldr	r3, [r3, #16]
 800ef96:	431a      	orrs	r2, r3
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	695b      	ldr	r3, [r3, #20]
 800ef9c:	431a      	orrs	r2, r3
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	6a1b      	ldr	r3, [r3, #32]
 800efa2:	431a      	orrs	r2, r3
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	685b      	ldr	r3, [r3, #4]
 800efa8:	431a      	orrs	r2, r3
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800efae:	431a      	orrs	r2, r3
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	689b      	ldr	r3, [r3, #8]
 800efb4:	431a      	orrs	r2, r3
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800efba:	ea42 0103 	orr.w	r1, r2, r3
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	430a      	orrs	r2, r1
 800efc8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	685b      	ldr	r3, [r3, #4]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d113      	bne.n	800effa <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	689b      	ldr	r3, [r3, #8]
 800efd8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800efe4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	689b      	ldr	r3, [r3, #8]
 800efec:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800eff8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	f022 0201 	bic.w	r2, r2, #1
 800f008:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	685b      	ldr	r3, [r3, #4]
 800f00e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f012:	2b00      	cmp	r3, #0
 800f014:	d00a      	beq.n	800f02c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	68db      	ldr	r3, [r3, #12]
 800f01c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	430a      	orrs	r2, r1
 800f02a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	2200      	movs	r2, #0
 800f030:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	2201      	movs	r2, #1
 800f038:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800f03c:	2300      	movs	r3, #0
}
 800f03e:	4618      	mov	r0, r3
 800f040:	3710      	adds	r7, #16
 800f042:	46bd      	mov	sp, r7
 800f044:	bd80      	pop	{r7, pc}
 800f046:	bf00      	nop
 800f048:	40013000 	.word	0x40013000
 800f04c:	40003800 	.word	0x40003800
 800f050:	40003c00 	.word	0x40003c00

0800f054 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f054:	b580      	push	{r7, lr}
 800f056:	b088      	sub	sp, #32
 800f058:	af02      	add	r7, sp, #8
 800f05a:	60f8      	str	r0, [r7, #12]
 800f05c:	60b9      	str	r1, [r7, #8]
 800f05e:	603b      	str	r3, [r7, #0]
 800f060:	4613      	mov	r3, r2
 800f062:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	3320      	adds	r3, #32
 800f06a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f06c:	f7f4 fd2a 	bl	8003ac4 <HAL_GetTick>
 800f070:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800f078:	b2db      	uxtb	r3, r3
 800f07a:	2b01      	cmp	r3, #1
 800f07c:	d001      	beq.n	800f082 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800f07e:	2302      	movs	r3, #2
 800f080:	e1d1      	b.n	800f426 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f082:	68bb      	ldr	r3, [r7, #8]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d002      	beq.n	800f08e <HAL_SPI_Transmit+0x3a>
 800f088:	88fb      	ldrh	r3, [r7, #6]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d101      	bne.n	800f092 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800f08e:	2301      	movs	r3, #1
 800f090:	e1c9      	b.n	800f426 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800f098:	2b01      	cmp	r3, #1
 800f09a:	d101      	bne.n	800f0a0 <HAL_SPI_Transmit+0x4c>
 800f09c:	2302      	movs	r3, #2
 800f09e:	e1c2      	b.n	800f426 <HAL_SPI_Transmit+0x3d2>
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	2201      	movs	r2, #1
 800f0a4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	2203      	movs	r2, #3
 800f0ac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	2200      	movs	r2, #0
 800f0b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	68ba      	ldr	r2, [r7, #8]
 800f0bc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	88fa      	ldrh	r2, [r7, #6]
 800f0c2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	88fa      	ldrh	r2, [r7, #6]
 800f0ca:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	2200      	movs	r2, #0
 800f0d2:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	2200      	movs	r2, #0
 800f0e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	2200      	movs	r2, #0
 800f0e8:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	2200      	movs	r2, #0
 800f0ee:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	689b      	ldr	r3, [r3, #8]
 800f0f4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800f0f8:	d108      	bne.n	800f10c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	681a      	ldr	r2, [r3, #0]
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f108:	601a      	str	r2, [r3, #0]
 800f10a:	e009      	b.n	800f120 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	68db      	ldr	r3, [r3, #12]
 800f112:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800f11e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	685a      	ldr	r2, [r3, #4]
 800f126:	4b96      	ldr	r3, [pc, #600]	@ (800f380 <HAL_SPI_Transmit+0x32c>)
 800f128:	4013      	ands	r3, r2
 800f12a:	88f9      	ldrh	r1, [r7, #6]
 800f12c:	68fa      	ldr	r2, [r7, #12]
 800f12e:	6812      	ldr	r2, [r2, #0]
 800f130:	430b      	orrs	r3, r1
 800f132:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	681a      	ldr	r2, [r3, #0]
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	f042 0201 	orr.w	r2, r2, #1
 800f142:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	685b      	ldr	r3, [r3, #4]
 800f148:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f14c:	d107      	bne.n	800f15e <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	681a      	ldr	r2, [r3, #0]
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f15c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	68db      	ldr	r3, [r3, #12]
 800f162:	2b0f      	cmp	r3, #15
 800f164:	d947      	bls.n	800f1f6 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f166:	e03f      	b.n	800f1e8 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	695b      	ldr	r3, [r3, #20]
 800f16e:	f003 0302 	and.w	r3, r3, #2
 800f172:	2b02      	cmp	r3, #2
 800f174:	d114      	bne.n	800f1a0 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	6812      	ldr	r2, [r2, #0]
 800f180:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f186:	1d1a      	adds	r2, r3, #4
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f192:	b29b      	uxth	r3, r3
 800f194:	3b01      	subs	r3, #1
 800f196:	b29a      	uxth	r2, r3
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800f19e:	e023      	b.n	800f1e8 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f1a0:	f7f4 fc90 	bl	8003ac4 <HAL_GetTick>
 800f1a4:	4602      	mov	r2, r0
 800f1a6:	693b      	ldr	r3, [r7, #16]
 800f1a8:	1ad3      	subs	r3, r2, r3
 800f1aa:	683a      	ldr	r2, [r7, #0]
 800f1ac:	429a      	cmp	r2, r3
 800f1ae:	d803      	bhi.n	800f1b8 <HAL_SPI_Transmit+0x164>
 800f1b0:	683b      	ldr	r3, [r7, #0]
 800f1b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1b6:	d102      	bne.n	800f1be <HAL_SPI_Transmit+0x16a>
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d114      	bne.n	800f1e8 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f1be:	68f8      	ldr	r0, [r7, #12]
 800f1c0:	f000 fee2 	bl	800ff88 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f1ca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	2201      	movs	r2, #1
 800f1d8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	2200      	movs	r2, #0
 800f1e0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800f1e4:	2303      	movs	r3, #3
 800f1e6:	e11e      	b.n	800f426 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f1ee:	b29b      	uxth	r3, r3
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d1b9      	bne.n	800f168 <HAL_SPI_Transmit+0x114>
 800f1f4:	e0f1      	b.n	800f3da <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	68db      	ldr	r3, [r3, #12]
 800f1fa:	2b07      	cmp	r3, #7
 800f1fc:	f240 80e6 	bls.w	800f3cc <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f200:	e05d      	b.n	800f2be <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	695b      	ldr	r3, [r3, #20]
 800f208:	f003 0302 	and.w	r3, r3, #2
 800f20c:	2b02      	cmp	r3, #2
 800f20e:	d132      	bne.n	800f276 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f216:	b29b      	uxth	r3, r3
 800f218:	2b01      	cmp	r3, #1
 800f21a:	d918      	bls.n	800f24e <HAL_SPI_Transmit+0x1fa>
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f220:	2b00      	cmp	r3, #0
 800f222:	d014      	beq.n	800f24e <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	6812      	ldr	r2, [r2, #0]
 800f22e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f234:	1d1a      	adds	r2, r3, #4
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f240:	b29b      	uxth	r3, r3
 800f242:	3b02      	subs	r3, #2
 800f244:	b29a      	uxth	r2, r3
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800f24c:	e037      	b.n	800f2be <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f252:	881a      	ldrh	r2, [r3, #0]
 800f254:	697b      	ldr	r3, [r7, #20]
 800f256:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f25c:	1c9a      	adds	r2, r3, #2
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f268:	b29b      	uxth	r3, r3
 800f26a:	3b01      	subs	r3, #1
 800f26c:	b29a      	uxth	r2, r3
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800f274:	e023      	b.n	800f2be <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f276:	f7f4 fc25 	bl	8003ac4 <HAL_GetTick>
 800f27a:	4602      	mov	r2, r0
 800f27c:	693b      	ldr	r3, [r7, #16]
 800f27e:	1ad3      	subs	r3, r2, r3
 800f280:	683a      	ldr	r2, [r7, #0]
 800f282:	429a      	cmp	r2, r3
 800f284:	d803      	bhi.n	800f28e <HAL_SPI_Transmit+0x23a>
 800f286:	683b      	ldr	r3, [r7, #0]
 800f288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f28c:	d102      	bne.n	800f294 <HAL_SPI_Transmit+0x240>
 800f28e:	683b      	ldr	r3, [r7, #0]
 800f290:	2b00      	cmp	r3, #0
 800f292:	d114      	bne.n	800f2be <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f294:	68f8      	ldr	r0, [r7, #12]
 800f296:	f000 fe77 	bl	800ff88 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f2a0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	2201      	movs	r2, #1
 800f2ae:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	2200      	movs	r2, #0
 800f2b6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800f2ba:	2303      	movs	r3, #3
 800f2bc:	e0b3      	b.n	800f426 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f2c4:	b29b      	uxth	r3, r3
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d19b      	bne.n	800f202 <HAL_SPI_Transmit+0x1ae>
 800f2ca:	e086      	b.n	800f3da <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	695b      	ldr	r3, [r3, #20]
 800f2d2:	f003 0302 	and.w	r3, r3, #2
 800f2d6:	2b02      	cmp	r3, #2
 800f2d8:	d154      	bne.n	800f384 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f2e0:	b29b      	uxth	r3, r3
 800f2e2:	2b03      	cmp	r3, #3
 800f2e4:	d918      	bls.n	800f318 <HAL_SPI_Transmit+0x2c4>
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f2ea:	2b40      	cmp	r3, #64	@ 0x40
 800f2ec:	d914      	bls.n	800f318 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	6812      	ldr	r2, [r2, #0]
 800f2f8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f2fe:	1d1a      	adds	r2, r3, #4
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f30a:	b29b      	uxth	r3, r3
 800f30c:	3b04      	subs	r3, #4
 800f30e:	b29a      	uxth	r2, r3
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800f316:	e059      	b.n	800f3cc <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f31e:	b29b      	uxth	r3, r3
 800f320:	2b01      	cmp	r3, #1
 800f322:	d917      	bls.n	800f354 <HAL_SPI_Transmit+0x300>
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d013      	beq.n	800f354 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f330:	881a      	ldrh	r2, [r3, #0]
 800f332:	697b      	ldr	r3, [r7, #20]
 800f334:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f33a:	1c9a      	adds	r2, r3, #2
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f346:	b29b      	uxth	r3, r3
 800f348:	3b02      	subs	r3, #2
 800f34a:	b29a      	uxth	r2, r3
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800f352:	e03b      	b.n	800f3cc <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	3320      	adds	r3, #32
 800f35e:	7812      	ldrb	r2, [r2, #0]
 800f360:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f366:	1c5a      	adds	r2, r3, #1
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f372:	b29b      	uxth	r3, r3
 800f374:	3b01      	subs	r3, #1
 800f376:	b29a      	uxth	r2, r3
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800f37e:	e025      	b.n	800f3cc <HAL_SPI_Transmit+0x378>
 800f380:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f384:	f7f4 fb9e 	bl	8003ac4 <HAL_GetTick>
 800f388:	4602      	mov	r2, r0
 800f38a:	693b      	ldr	r3, [r7, #16]
 800f38c:	1ad3      	subs	r3, r2, r3
 800f38e:	683a      	ldr	r2, [r7, #0]
 800f390:	429a      	cmp	r2, r3
 800f392:	d803      	bhi.n	800f39c <HAL_SPI_Transmit+0x348>
 800f394:	683b      	ldr	r3, [r7, #0]
 800f396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f39a:	d102      	bne.n	800f3a2 <HAL_SPI_Transmit+0x34e>
 800f39c:	683b      	ldr	r3, [r7, #0]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d114      	bne.n	800f3cc <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f3a2:	68f8      	ldr	r0, [r7, #12]
 800f3a4:	f000 fdf0 	bl	800ff88 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f3ae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	2201      	movs	r2, #1
 800f3bc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800f3c8:	2303      	movs	r3, #3
 800f3ca:	e02c      	b.n	800f426 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f3d2:	b29b      	uxth	r3, r3
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	f47f af79 	bne.w	800f2cc <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800f3da:	693b      	ldr	r3, [r7, #16]
 800f3dc:	9300      	str	r3, [sp, #0]
 800f3de:	683b      	ldr	r3, [r7, #0]
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	2108      	movs	r1, #8
 800f3e4:	68f8      	ldr	r0, [r7, #12]
 800f3e6:	f000 fe6f 	bl	80100c8 <SPI_WaitOnFlagUntilTimeout>
 800f3ea:	4603      	mov	r3, r0
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d007      	beq.n	800f400 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f3f6:	f043 0220 	orr.w	r2, r3, #32
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f400:	68f8      	ldr	r0, [r7, #12]
 800f402:	f000 fdc1 	bl	800ff88 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	2201      	movs	r2, #1
 800f40a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	2200      	movs	r2, #0
 800f412:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d001      	beq.n	800f424 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800f420:	2301      	movs	r3, #1
 800f422:	e000      	b.n	800f426 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800f424:	2300      	movs	r3, #0
  }
}
 800f426:	4618      	mov	r0, r3
 800f428:	3718      	adds	r7, #24
 800f42a:	46bd      	mov	sp, r7
 800f42c:	bd80      	pop	{r7, pc}
 800f42e:	bf00      	nop

0800f430 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f430:	b580      	push	{r7, lr}
 800f432:	b088      	sub	sp, #32
 800f434:	af00      	add	r7, sp, #0
 800f436:	60f8      	str	r0, [r7, #12]
 800f438:	60b9      	str	r1, [r7, #8]
 800f43a:	603b      	str	r3, [r7, #0]
 800f43c:	4613      	mov	r3, r2
 800f43e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f444:	095b      	lsrs	r3, r3, #5
 800f446:	b29b      	uxth	r3, r3
 800f448:	3301      	adds	r3, #1
 800f44a:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	3330      	adds	r3, #48	@ 0x30
 800f452:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f454:	f7f4 fb36 	bl	8003ac4 <HAL_GetTick>
 800f458:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800f460:	b2db      	uxtb	r3, r3
 800f462:	2b01      	cmp	r3, #1
 800f464:	d001      	beq.n	800f46a <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800f466:	2302      	movs	r3, #2
 800f468:	e250      	b.n	800f90c <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f46a:	68bb      	ldr	r3, [r7, #8]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d002      	beq.n	800f476 <HAL_SPI_Receive+0x46>
 800f470:	88fb      	ldrh	r3, [r7, #6]
 800f472:	2b00      	cmp	r3, #0
 800f474:	d101      	bne.n	800f47a <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800f476:	2301      	movs	r3, #1
 800f478:	e248      	b.n	800f90c <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800f480:	2b01      	cmp	r3, #1
 800f482:	d101      	bne.n	800f488 <HAL_SPI_Receive+0x58>
 800f484:	2302      	movs	r3, #2
 800f486:	e241      	b.n	800f90c <HAL_SPI_Receive+0x4dc>
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	2201      	movs	r2, #1
 800f48c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	2204      	movs	r2, #4
 800f494:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	2200      	movs	r2, #0
 800f49c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	68ba      	ldr	r2, [r7, #8]
 800f4a4:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	88fa      	ldrh	r2, [r7, #6]
 800f4aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	88fa      	ldrh	r2, [r7, #6]
 800f4b2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	2200      	movs	r2, #0
 800f4ba:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	2200      	movs	r2, #0
 800f4c0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	2200      	movs	r2, #0
 800f4c8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	2200      	movs	r2, #0
 800f4d0:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	2200      	movs	r2, #0
 800f4d6:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	689b      	ldr	r3, [r3, #8]
 800f4dc:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800f4e0:	d108      	bne.n	800f4f4 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	681a      	ldr	r2, [r3, #0]
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800f4f0:	601a      	str	r2, [r3, #0]
 800f4f2:	e009      	b.n	800f508 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	68db      	ldr	r3, [r3, #12]
 800f4fa:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800f506:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	685a      	ldr	r2, [r3, #4]
 800f50e:	4b95      	ldr	r3, [pc, #596]	@ (800f764 <HAL_SPI_Receive+0x334>)
 800f510:	4013      	ands	r3, r2
 800f512:	88f9      	ldrh	r1, [r7, #6]
 800f514:	68fa      	ldr	r2, [r7, #12]
 800f516:	6812      	ldr	r2, [r2, #0]
 800f518:	430b      	orrs	r3, r1
 800f51a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	681a      	ldr	r2, [r3, #0]
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	f042 0201 	orr.w	r2, r2, #1
 800f52a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	685b      	ldr	r3, [r3, #4]
 800f530:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f534:	d107      	bne.n	800f546 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	681a      	ldr	r2, [r3, #0]
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f544:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	68db      	ldr	r3, [r3, #12]
 800f54a:	2b0f      	cmp	r3, #15
 800f54c:	d96c      	bls.n	800f628 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f54e:	e064      	b.n	800f61a <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	695b      	ldr	r3, [r3, #20]
 800f556:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	695b      	ldr	r3, [r3, #20]
 800f55e:	f003 0301 	and.w	r3, r3, #1
 800f562:	2b01      	cmp	r3, #1
 800f564:	d114      	bne.n	800f590 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	681a      	ldr	r2, [r3, #0]
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f56e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800f570:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f576:	1d1a      	adds	r2, r3, #4
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f582:	b29b      	uxth	r3, r3
 800f584:	3b01      	subs	r3, #1
 800f586:	b29a      	uxth	r2, r3
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f58e:	e044      	b.n	800f61a <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f596:	b29b      	uxth	r3, r3
 800f598:	8bfa      	ldrh	r2, [r7, #30]
 800f59a:	429a      	cmp	r2, r3
 800f59c:	d919      	bls.n	800f5d2 <HAL_SPI_Receive+0x1a2>
 800f59e:	693b      	ldr	r3, [r7, #16]
 800f5a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d014      	beq.n	800f5d2 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	681a      	ldr	r2, [r3, #0]
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f5b0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800f5b2:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f5b8:	1d1a      	adds	r2, r3, #4
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f5c4:	b29b      	uxth	r3, r3
 800f5c6:	3b01      	subs	r3, #1
 800f5c8:	b29a      	uxth	r2, r3
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f5d0:	e023      	b.n	800f61a <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f5d2:	f7f4 fa77 	bl	8003ac4 <HAL_GetTick>
 800f5d6:	4602      	mov	r2, r0
 800f5d8:	697b      	ldr	r3, [r7, #20]
 800f5da:	1ad3      	subs	r3, r2, r3
 800f5dc:	683a      	ldr	r2, [r7, #0]
 800f5de:	429a      	cmp	r2, r3
 800f5e0:	d803      	bhi.n	800f5ea <HAL_SPI_Receive+0x1ba>
 800f5e2:	683b      	ldr	r3, [r7, #0]
 800f5e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5e8:	d102      	bne.n	800f5f0 <HAL_SPI_Receive+0x1c0>
 800f5ea:	683b      	ldr	r3, [r7, #0]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d114      	bne.n	800f61a <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f5f0:	68f8      	ldr	r0, [r7, #12]
 800f5f2:	f000 fcc9 	bl	800ff88 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f5fc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	2201      	movs	r2, #1
 800f60a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	2200      	movs	r2, #0
 800f612:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800f616:	2303      	movs	r3, #3
 800f618:	e178      	b.n	800f90c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f620:	b29b      	uxth	r3, r3
 800f622:	2b00      	cmp	r3, #0
 800f624:	d194      	bne.n	800f550 <HAL_SPI_Receive+0x120>
 800f626:	e15e      	b.n	800f8e6 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	68db      	ldr	r3, [r3, #12]
 800f62c:	2b07      	cmp	r3, #7
 800f62e:	f240 8153 	bls.w	800f8d8 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f632:	e08f      	b.n	800f754 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	695b      	ldr	r3, [r3, #20]
 800f63a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	695b      	ldr	r3, [r3, #20]
 800f642:	f003 0301 	and.w	r3, r3, #1
 800f646:	2b01      	cmp	r3, #1
 800f648:	d114      	bne.n	800f674 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f64e:	69ba      	ldr	r2, [r7, #24]
 800f650:	8812      	ldrh	r2, [r2, #0]
 800f652:	b292      	uxth	r2, r2
 800f654:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f65a:	1c9a      	adds	r2, r3, #2
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f666:	b29b      	uxth	r3, r3
 800f668:	3b01      	subs	r3, #1
 800f66a:	b29a      	uxth	r2, r3
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f672:	e06f      	b.n	800f754 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f67a:	b29b      	uxth	r3, r3
 800f67c:	8bfa      	ldrh	r2, [r7, #30]
 800f67e:	429a      	cmp	r2, r3
 800f680:	d924      	bls.n	800f6cc <HAL_SPI_Receive+0x29c>
 800f682:	693b      	ldr	r3, [r7, #16]
 800f684:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d01f      	beq.n	800f6cc <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f690:	69ba      	ldr	r2, [r7, #24]
 800f692:	8812      	ldrh	r2, [r2, #0]
 800f694:	b292      	uxth	r2, r2
 800f696:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f69c:	1c9a      	adds	r2, r3, #2
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f6a6:	69ba      	ldr	r2, [r7, #24]
 800f6a8:	8812      	ldrh	r2, [r2, #0]
 800f6aa:	b292      	uxth	r2, r2
 800f6ac:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f6b2:	1c9a      	adds	r2, r3, #2
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f6be:	b29b      	uxth	r3, r3
 800f6c0:	3b02      	subs	r3, #2
 800f6c2:	b29a      	uxth	r2, r3
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f6ca:	e043      	b.n	800f754 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f6d2:	b29b      	uxth	r3, r3
 800f6d4:	2b01      	cmp	r3, #1
 800f6d6:	d119      	bne.n	800f70c <HAL_SPI_Receive+0x2dc>
 800f6d8:	693b      	ldr	r3, [r7, #16]
 800f6da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d014      	beq.n	800f70c <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f6e6:	69ba      	ldr	r2, [r7, #24]
 800f6e8:	8812      	ldrh	r2, [r2, #0]
 800f6ea:	b292      	uxth	r2, r2
 800f6ec:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f6f2:	1c9a      	adds	r2, r3, #2
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f6fe:	b29b      	uxth	r3, r3
 800f700:	3b01      	subs	r3, #1
 800f702:	b29a      	uxth	r2, r3
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f70a:	e023      	b.n	800f754 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f70c:	f7f4 f9da 	bl	8003ac4 <HAL_GetTick>
 800f710:	4602      	mov	r2, r0
 800f712:	697b      	ldr	r3, [r7, #20]
 800f714:	1ad3      	subs	r3, r2, r3
 800f716:	683a      	ldr	r2, [r7, #0]
 800f718:	429a      	cmp	r2, r3
 800f71a:	d803      	bhi.n	800f724 <HAL_SPI_Receive+0x2f4>
 800f71c:	683b      	ldr	r3, [r7, #0]
 800f71e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f722:	d102      	bne.n	800f72a <HAL_SPI_Receive+0x2fa>
 800f724:	683b      	ldr	r3, [r7, #0]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d114      	bne.n	800f754 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f72a:	68f8      	ldr	r0, [r7, #12]
 800f72c:	f000 fc2c 	bl	800ff88 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f736:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	2201      	movs	r2, #1
 800f744:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	2200      	movs	r2, #0
 800f74c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800f750:	2303      	movs	r3, #3
 800f752:	e0db      	b.n	800f90c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f75a:	b29b      	uxth	r3, r3
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	f47f af69 	bne.w	800f634 <HAL_SPI_Receive+0x204>
 800f762:	e0c0      	b.n	800f8e6 <HAL_SPI_Receive+0x4b6>
 800f764:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	695b      	ldr	r3, [r3, #20]
 800f76e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	695b      	ldr	r3, [r3, #20]
 800f776:	f003 0301 	and.w	r3, r3, #1
 800f77a:	2b01      	cmp	r3, #1
 800f77c:	d117      	bne.n	800f7ae <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f78a:	7812      	ldrb	r2, [r2, #0]
 800f78c:	b2d2      	uxtb	r2, r2
 800f78e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f794:	1c5a      	adds	r2, r3, #1
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f7a0:	b29b      	uxth	r3, r3
 800f7a2:	3b01      	subs	r3, #1
 800f7a4:	b29a      	uxth	r2, r3
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f7ac:	e094      	b.n	800f8d8 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f7b4:	b29b      	uxth	r3, r3
 800f7b6:	8bfa      	ldrh	r2, [r7, #30]
 800f7b8:	429a      	cmp	r2, r3
 800f7ba:	d946      	bls.n	800f84a <HAL_SPI_Receive+0x41a>
 800f7bc:	693b      	ldr	r3, [r7, #16]
 800f7be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d041      	beq.n	800f84a <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f7d2:	7812      	ldrb	r2, [r2, #0]
 800f7d4:	b2d2      	uxtb	r2, r2
 800f7d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f7dc:	1c5a      	adds	r2, r3, #1
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f7ee:	7812      	ldrb	r2, [r2, #0]
 800f7f0:	b2d2      	uxtb	r2, r2
 800f7f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f7f8:	1c5a      	adds	r2, r3, #1
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f80a:	7812      	ldrb	r2, [r2, #0]
 800f80c:	b2d2      	uxtb	r2, r2
 800f80e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f814:	1c5a      	adds	r2, r3, #1
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f826:	7812      	ldrb	r2, [r2, #0]
 800f828:	b2d2      	uxtb	r2, r2
 800f82a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f830:	1c5a      	adds	r2, r3, #1
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f83c:	b29b      	uxth	r3, r3
 800f83e:	3b04      	subs	r3, #4
 800f840:	b29a      	uxth	r2, r3
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f848:	e046      	b.n	800f8d8 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f850:	b29b      	uxth	r3, r3
 800f852:	2b03      	cmp	r3, #3
 800f854:	d81c      	bhi.n	800f890 <HAL_SPI_Receive+0x460>
 800f856:	693b      	ldr	r3, [r7, #16]
 800f858:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d017      	beq.n	800f890 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f86c:	7812      	ldrb	r2, [r2, #0]
 800f86e:	b2d2      	uxtb	r2, r2
 800f870:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f876:	1c5a      	adds	r2, r3, #1
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f882:	b29b      	uxth	r3, r3
 800f884:	3b01      	subs	r3, #1
 800f886:	b29a      	uxth	r2, r3
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f88e:	e023      	b.n	800f8d8 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f890:	f7f4 f918 	bl	8003ac4 <HAL_GetTick>
 800f894:	4602      	mov	r2, r0
 800f896:	697b      	ldr	r3, [r7, #20]
 800f898:	1ad3      	subs	r3, r2, r3
 800f89a:	683a      	ldr	r2, [r7, #0]
 800f89c:	429a      	cmp	r2, r3
 800f89e:	d803      	bhi.n	800f8a8 <HAL_SPI_Receive+0x478>
 800f8a0:	683b      	ldr	r3, [r7, #0]
 800f8a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8a6:	d102      	bne.n	800f8ae <HAL_SPI_Receive+0x47e>
 800f8a8:	683b      	ldr	r3, [r7, #0]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d114      	bne.n	800f8d8 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f8ae:	68f8      	ldr	r0, [r7, #12]
 800f8b0:	f000 fb6a 	bl	800ff88 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f8ba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	2201      	movs	r2, #1
 800f8c8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	2200      	movs	r2, #0
 800f8d0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800f8d4:	2303      	movs	r3, #3
 800f8d6:	e019      	b.n	800f90c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f8de:	b29b      	uxth	r3, r3
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	f47f af41 	bne.w	800f768 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f8e6:	68f8      	ldr	r0, [r7, #12]
 800f8e8:	f000 fb4e 	bl	800ff88 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	2201      	movs	r2, #1
 800f8f0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f902:	2b00      	cmp	r3, #0
 800f904:	d001      	beq.n	800f90a <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800f906:	2301      	movs	r3, #1
 800f908:	e000      	b.n	800f90c <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800f90a:	2300      	movs	r3, #0
  }
}
 800f90c:	4618      	mov	r0, r3
 800f90e:	3720      	adds	r7, #32
 800f910:	46bd      	mov	sp, r7
 800f912:	bd80      	pop	{r7, pc}

0800f914 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800f914:	b580      	push	{r7, lr}
 800f916:	b08e      	sub	sp, #56	@ 0x38
 800f918:	af02      	add	r7, sp, #8
 800f91a:	60f8      	str	r0, [r7, #12]
 800f91c:	60b9      	str	r1, [r7, #8]
 800f91e:	607a      	str	r2, [r7, #4]
 800f920:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	3320      	adds	r3, #32
 800f928:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	3330      	adds	r3, #48	@ 0x30
 800f930:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f936:	095b      	lsrs	r3, r3, #5
 800f938:	b29b      	uxth	r3, r3
 800f93a:	3301      	adds	r3, #1
 800f93c:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f93e:	f7f4 f8c1 	bl	8003ac4 <HAL_GetTick>
 800f942:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800f944:	887b      	ldrh	r3, [r7, #2]
 800f946:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800f948:	887b      	ldrh	r3, [r7, #2]
 800f94a:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800f952:	b2db      	uxtb	r3, r3
 800f954:	2b01      	cmp	r3, #1
 800f956:	d001      	beq.n	800f95c <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800f958:	2302      	movs	r3, #2
 800f95a:	e310      	b.n	800ff7e <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800f95c:	68bb      	ldr	r3, [r7, #8]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d005      	beq.n	800f96e <HAL_SPI_TransmitReceive+0x5a>
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d002      	beq.n	800f96e <HAL_SPI_TransmitReceive+0x5a>
 800f968:	887b      	ldrh	r3, [r7, #2]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d101      	bne.n	800f972 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800f96e:	2301      	movs	r3, #1
 800f970:	e305      	b.n	800ff7e <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800f978:	2b01      	cmp	r3, #1
 800f97a:	d101      	bne.n	800f980 <HAL_SPI_TransmitReceive+0x6c>
 800f97c:	2302      	movs	r3, #2
 800f97e:	e2fe      	b.n	800ff7e <HAL_SPI_TransmitReceive+0x66a>
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	2201      	movs	r2, #1
 800f984:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	2205      	movs	r2, #5
 800f98c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	2200      	movs	r2, #0
 800f994:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	687a      	ldr	r2, [r7, #4]
 800f99c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	887a      	ldrh	r2, [r7, #2]
 800f9a2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	887a      	ldrh	r2, [r7, #2]
 800f9aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	68ba      	ldr	r2, [r7, #8]
 800f9b2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	887a      	ldrh	r2, [r7, #2]
 800f9b8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	887a      	ldrh	r2, [r7, #2]
 800f9c0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	2200      	movs	r2, #0
 800f9c8:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	2200      	movs	r2, #0
 800f9ce:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	68da      	ldr	r2, [r3, #12]
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800f9de:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	4a70      	ldr	r2, [pc, #448]	@ (800fba8 <HAL_SPI_TransmitReceive+0x294>)
 800f9e6:	4293      	cmp	r3, r2
 800f9e8:	d009      	beq.n	800f9fe <HAL_SPI_TransmitReceive+0xea>
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	4a6f      	ldr	r2, [pc, #444]	@ (800fbac <HAL_SPI_TransmitReceive+0x298>)
 800f9f0:	4293      	cmp	r3, r2
 800f9f2:	d004      	beq.n	800f9fe <HAL_SPI_TransmitReceive+0xea>
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	4a6d      	ldr	r2, [pc, #436]	@ (800fbb0 <HAL_SPI_TransmitReceive+0x29c>)
 800f9fa:	4293      	cmp	r3, r2
 800f9fc:	d102      	bne.n	800fa04 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800f9fe:	2310      	movs	r3, #16
 800fa00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fa02:	e001      	b.n	800fa08 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800fa04:	2308      	movs	r3, #8
 800fa06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	685a      	ldr	r2, [r3, #4]
 800fa0e:	4b69      	ldr	r3, [pc, #420]	@ (800fbb4 <HAL_SPI_TransmitReceive+0x2a0>)
 800fa10:	4013      	ands	r3, r2
 800fa12:	8879      	ldrh	r1, [r7, #2]
 800fa14:	68fa      	ldr	r2, [r7, #12]
 800fa16:	6812      	ldr	r2, [r2, #0]
 800fa18:	430b      	orrs	r3, r1
 800fa1a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	681a      	ldr	r2, [r3, #0]
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	f042 0201 	orr.w	r2, r2, #1
 800fa2a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	685b      	ldr	r3, [r3, #4]
 800fa30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800fa34:	d107      	bne.n	800fa46 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	681a      	ldr	r2, [r3, #0]
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800fa44:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	68db      	ldr	r3, [r3, #12]
 800fa4a:	2b0f      	cmp	r3, #15
 800fa4c:	f240 80a2 	bls.w	800fb94 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800fa50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa52:	089b      	lsrs	r3, r3, #2
 800fa54:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800fa56:	e094      	b.n	800fb82 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	695b      	ldr	r3, [r3, #20]
 800fa5e:	f003 0302 	and.w	r3, r3, #2
 800fa62:	2b02      	cmp	r3, #2
 800fa64:	d120      	bne.n	800faa8 <HAL_SPI_TransmitReceive+0x194>
 800fa66:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d01d      	beq.n	800faa8 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800fa6c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800fa6e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800fa70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa72:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800fa74:	429a      	cmp	r2, r3
 800fa76:	d217      	bcs.n	800faa8 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	6812      	ldr	r2, [r2, #0]
 800fa82:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fa88:	1d1a      	adds	r2, r3, #4
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800fa94:	b29b      	uxth	r3, r3
 800fa96:	3b01      	subs	r3, #1
 800fa98:	b29a      	uxth	r2, r3
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800faa6:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	695b      	ldr	r3, [r3, #20]
 800faae:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800fab0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d065      	beq.n	800fb82 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	695b      	ldr	r3, [r3, #20]
 800fabc:	f003 0301 	and.w	r3, r3, #1
 800fac0:	2b01      	cmp	r3, #1
 800fac2:	d118      	bne.n	800faf6 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	681a      	ldr	r2, [r3, #0]
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800facc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800face:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fad4:	1d1a      	adds	r2, r3, #4
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fae0:	b29b      	uxth	r3, r3
 800fae2:	3b01      	subs	r3, #1
 800fae4:	b29a      	uxth	r2, r3
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800faf2:	853b      	strh	r3, [r7, #40]	@ 0x28
 800faf4:	e045      	b.n	800fb82 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800faf6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800faf8:	8bfb      	ldrh	r3, [r7, #30]
 800fafa:	429a      	cmp	r2, r3
 800fafc:	d21d      	bcs.n	800fb3a <HAL_SPI_TransmitReceive+0x226>
 800fafe:	697b      	ldr	r3, [r7, #20]
 800fb00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d018      	beq.n	800fb3a <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	681a      	ldr	r2, [r3, #0]
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fb10:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800fb12:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fb18:	1d1a      	adds	r2, r3, #4
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fb24:	b29b      	uxth	r3, r3
 800fb26:	3b01      	subs	r3, #1
 800fb28:	b29a      	uxth	r2, r3
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fb36:	853b      	strh	r3, [r7, #40]	@ 0x28
 800fb38:	e023      	b.n	800fb82 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fb3a:	f7f3 ffc3 	bl	8003ac4 <HAL_GetTick>
 800fb3e:	4602      	mov	r2, r0
 800fb40:	69bb      	ldr	r3, [r7, #24]
 800fb42:	1ad3      	subs	r3, r2, r3
 800fb44:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fb46:	429a      	cmp	r2, r3
 800fb48:	d803      	bhi.n	800fb52 <HAL_SPI_TransmitReceive+0x23e>
 800fb4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb50:	d102      	bne.n	800fb58 <HAL_SPI_TransmitReceive+0x244>
 800fb52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d114      	bne.n	800fb82 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800fb58:	68f8      	ldr	r0, [r7, #12]
 800fb5a:	f000 fa15 	bl	800ff88 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fb64:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	2201      	movs	r2, #1
 800fb72:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	2200      	movs	r2, #0
 800fb7a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800fb7e:	2303      	movs	r3, #3
 800fb80:	e1fd      	b.n	800ff7e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800fb82:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	f47f af67 	bne.w	800fa58 <HAL_SPI_TransmitReceive+0x144>
 800fb8a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	f47f af63 	bne.w	800fa58 <HAL_SPI_TransmitReceive+0x144>
 800fb92:	e1ce      	b.n	800ff32 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	68db      	ldr	r3, [r3, #12]
 800fb98:	2b07      	cmp	r3, #7
 800fb9a:	f240 81c2 	bls.w	800ff22 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800fb9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fba0:	085b      	lsrs	r3, r3, #1
 800fba2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800fba4:	e0c9      	b.n	800fd3a <HAL_SPI_TransmitReceive+0x426>
 800fba6:	bf00      	nop
 800fba8:	40013000 	.word	0x40013000
 800fbac:	40003800 	.word	0x40003800
 800fbb0:	40003c00 	.word	0x40003c00
 800fbb4:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	695b      	ldr	r3, [r3, #20]
 800fbbe:	f003 0302 	and.w	r3, r3, #2
 800fbc2:	2b02      	cmp	r3, #2
 800fbc4:	d11f      	bne.n	800fc06 <HAL_SPI_TransmitReceive+0x2f2>
 800fbc6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d01c      	beq.n	800fc06 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800fbcc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800fbce:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800fbd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbd2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800fbd4:	429a      	cmp	r2, r3
 800fbd6:	d216      	bcs.n	800fc06 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fbdc:	881a      	ldrh	r2, [r3, #0]
 800fbde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbe0:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fbe6:	1c9a      	adds	r2, r3, #2
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800fbf2:	b29b      	uxth	r3, r3
 800fbf4:	3b01      	subs	r3, #1
 800fbf6:	b29a      	uxth	r2, r3
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800fc04:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	695b      	ldr	r3, [r3, #20]
 800fc0c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800fc0e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	f000 8092 	beq.w	800fd3a <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	695b      	ldr	r3, [r3, #20]
 800fc1c:	f003 0301 	and.w	r3, r3, #1
 800fc20:	2b01      	cmp	r3, #1
 800fc22:	d118      	bne.n	800fc56 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fc28:	6a3a      	ldr	r2, [r7, #32]
 800fc2a:	8812      	ldrh	r2, [r2, #0]
 800fc2c:	b292      	uxth	r2, r2
 800fc2e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fc34:	1c9a      	adds	r2, r3, #2
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fc40:	b29b      	uxth	r3, r3
 800fc42:	3b01      	subs	r3, #1
 800fc44:	b29a      	uxth	r2, r3
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fc52:	853b      	strh	r3, [r7, #40]	@ 0x28
 800fc54:	e071      	b.n	800fd3a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800fc56:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800fc58:	8bfb      	ldrh	r3, [r7, #30]
 800fc5a:	429a      	cmp	r2, r3
 800fc5c:	d228      	bcs.n	800fcb0 <HAL_SPI_TransmitReceive+0x39c>
 800fc5e:	697b      	ldr	r3, [r7, #20]
 800fc60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d023      	beq.n	800fcb0 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fc6c:	6a3a      	ldr	r2, [r7, #32]
 800fc6e:	8812      	ldrh	r2, [r2, #0]
 800fc70:	b292      	uxth	r2, r2
 800fc72:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fc78:	1c9a      	adds	r2, r3, #2
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fc82:	6a3a      	ldr	r2, [r7, #32]
 800fc84:	8812      	ldrh	r2, [r2, #0]
 800fc86:	b292      	uxth	r2, r2
 800fc88:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fc8e:	1c9a      	adds	r2, r3, #2
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fc9a:	b29b      	uxth	r3, r3
 800fc9c:	3b02      	subs	r3, #2
 800fc9e:	b29a      	uxth	r2, r3
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fcac:	853b      	strh	r3, [r7, #40]	@ 0x28
 800fcae:	e044      	b.n	800fd3a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800fcb0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fcb2:	2b01      	cmp	r3, #1
 800fcb4:	d11d      	bne.n	800fcf2 <HAL_SPI_TransmitReceive+0x3de>
 800fcb6:	697b      	ldr	r3, [r7, #20]
 800fcb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d018      	beq.n	800fcf2 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fcc4:	6a3a      	ldr	r2, [r7, #32]
 800fcc6:	8812      	ldrh	r2, [r2, #0]
 800fcc8:	b292      	uxth	r2, r2
 800fcca:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fcd0:	1c9a      	adds	r2, r3, #2
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fcdc:	b29b      	uxth	r3, r3
 800fcde:	3b01      	subs	r3, #1
 800fce0:	b29a      	uxth	r2, r3
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fcee:	853b      	strh	r3, [r7, #40]	@ 0x28
 800fcf0:	e023      	b.n	800fd3a <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fcf2:	f7f3 fee7 	bl	8003ac4 <HAL_GetTick>
 800fcf6:	4602      	mov	r2, r0
 800fcf8:	69bb      	ldr	r3, [r7, #24]
 800fcfa:	1ad3      	subs	r3, r2, r3
 800fcfc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fcfe:	429a      	cmp	r2, r3
 800fd00:	d803      	bhi.n	800fd0a <HAL_SPI_TransmitReceive+0x3f6>
 800fd02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd08:	d102      	bne.n	800fd10 <HAL_SPI_TransmitReceive+0x3fc>
 800fd0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d114      	bne.n	800fd3a <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800fd10:	68f8      	ldr	r0, [r7, #12]
 800fd12:	f000 f939 	bl	800ff88 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fd1c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	2201      	movs	r2, #1
 800fd2a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	2200      	movs	r2, #0
 800fd32:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800fd36:	2303      	movs	r3, #3
 800fd38:	e121      	b.n	800ff7e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800fd3a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	f47f af3b 	bne.w	800fbb8 <HAL_SPI_TransmitReceive+0x2a4>
 800fd42:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	f47f af37 	bne.w	800fbb8 <HAL_SPI_TransmitReceive+0x2a4>
 800fd4a:	e0f2      	b.n	800ff32 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	695b      	ldr	r3, [r3, #20]
 800fd52:	f003 0302 	and.w	r3, r3, #2
 800fd56:	2b02      	cmp	r3, #2
 800fd58:	d121      	bne.n	800fd9e <HAL_SPI_TransmitReceive+0x48a>
 800fd5a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d01e      	beq.n	800fd9e <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800fd60:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800fd62:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800fd64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd66:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800fd68:	429a      	cmp	r2, r3
 800fd6a:	d218      	bcs.n	800fd9e <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	3320      	adds	r3, #32
 800fd76:	7812      	ldrb	r2, [r2, #0]
 800fd78:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fd7e:	1c5a      	adds	r2, r3, #1
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800fd8a:	b29b      	uxth	r3, r3
 800fd8c:	3b01      	subs	r3, #1
 800fd8e:	b29a      	uxth	r2, r3
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800fd9c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	695b      	ldr	r3, [r3, #20]
 800fda4:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800fda6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	f000 80ba 	beq.w	800ff22 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	695b      	ldr	r3, [r3, #20]
 800fdb4:	f003 0301 	and.w	r3, r3, #1
 800fdb8:	2b01      	cmp	r3, #1
 800fdba:	d11b      	bne.n	800fdf4 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fdc8:	7812      	ldrb	r2, [r2, #0]
 800fdca:	b2d2      	uxtb	r2, r2
 800fdcc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fdd2:	1c5a      	adds	r2, r3, #1
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fdde:	b29b      	uxth	r3, r3
 800fde0:	3b01      	subs	r3, #1
 800fde2:	b29a      	uxth	r2, r3
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fdf0:	853b      	strh	r3, [r7, #40]	@ 0x28
 800fdf2:	e096      	b.n	800ff22 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800fdf4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800fdf6:	8bfb      	ldrh	r3, [r7, #30]
 800fdf8:	429a      	cmp	r2, r3
 800fdfa:	d24a      	bcs.n	800fe92 <HAL_SPI_TransmitReceive+0x57e>
 800fdfc:	697b      	ldr	r3, [r7, #20]
 800fdfe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d045      	beq.n	800fe92 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fe12:	7812      	ldrb	r2, [r2, #0]
 800fe14:	b2d2      	uxtb	r2, r2
 800fe16:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fe1c:	1c5a      	adds	r2, r3, #1
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fe2e:	7812      	ldrb	r2, [r2, #0]
 800fe30:	b2d2      	uxtb	r2, r2
 800fe32:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fe38:	1c5a      	adds	r2, r3, #1
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fe4a:	7812      	ldrb	r2, [r2, #0]
 800fe4c:	b2d2      	uxtb	r2, r2
 800fe4e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fe54:	1c5a      	adds	r2, r3, #1
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fe66:	7812      	ldrb	r2, [r2, #0]
 800fe68:	b2d2      	uxtb	r2, r2
 800fe6a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fe70:	1c5a      	adds	r2, r3, #1
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fe7c:	b29b      	uxth	r3, r3
 800fe7e:	3b04      	subs	r3, #4
 800fe80:	b29a      	uxth	r2, r3
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fe8e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800fe90:	e047      	b.n	800ff22 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800fe92:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fe94:	2b03      	cmp	r3, #3
 800fe96:	d820      	bhi.n	800feda <HAL_SPI_TransmitReceive+0x5c6>
 800fe98:	697b      	ldr	r3, [r7, #20]
 800fe9a:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d01b      	beq.n	800feda <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800feae:	7812      	ldrb	r2, [r2, #0]
 800feb0:	b2d2      	uxtb	r2, r2
 800feb2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800feb8:	1c5a      	adds	r2, r3, #1
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fec4:	b29b      	uxth	r3, r3
 800fec6:	3b01      	subs	r3, #1
 800fec8:	b29a      	uxth	r2, r3
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fed6:	853b      	strh	r3, [r7, #40]	@ 0x28
 800fed8:	e023      	b.n	800ff22 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800feda:	f7f3 fdf3 	bl	8003ac4 <HAL_GetTick>
 800fede:	4602      	mov	r2, r0
 800fee0:	69bb      	ldr	r3, [r7, #24]
 800fee2:	1ad3      	subs	r3, r2, r3
 800fee4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fee6:	429a      	cmp	r2, r3
 800fee8:	d803      	bhi.n	800fef2 <HAL_SPI_TransmitReceive+0x5de>
 800feea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800feec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fef0:	d102      	bne.n	800fef8 <HAL_SPI_TransmitReceive+0x5e4>
 800fef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d114      	bne.n	800ff22 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800fef8:	68f8      	ldr	r0, [r7, #12]
 800fefa:	f000 f845 	bl	800ff88 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ff04:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	2201      	movs	r2, #1
 800ff12:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	2200      	movs	r2, #0
 800ff1a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800ff1e:	2303      	movs	r3, #3
 800ff20:	e02d      	b.n	800ff7e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ff22:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	f47f af11 	bne.w	800fd4c <HAL_SPI_TransmitReceive+0x438>
 800ff2a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	f47f af0d 	bne.w	800fd4c <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800ff32:	69bb      	ldr	r3, [r7, #24]
 800ff34:	9300      	str	r3, [sp, #0]
 800ff36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff38:	2200      	movs	r2, #0
 800ff3a:	2108      	movs	r1, #8
 800ff3c:	68f8      	ldr	r0, [r7, #12]
 800ff3e:	f000 f8c3 	bl	80100c8 <SPI_WaitOnFlagUntilTimeout>
 800ff42:	4603      	mov	r3, r0
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d007      	beq.n	800ff58 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ff4e:	f043 0220 	orr.w	r2, r3, #32
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ff58:	68f8      	ldr	r0, [r7, #12]
 800ff5a:	f000 f815 	bl	800ff88 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	2201      	movs	r2, #1
 800ff62:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	2200      	movs	r2, #0
 800ff6a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d001      	beq.n	800ff7c <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800ff78:	2301      	movs	r3, #1
 800ff7a:	e000      	b.n	800ff7e <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800ff7c:	2300      	movs	r3, #0
  }
}
 800ff7e:	4618      	mov	r0, r3
 800ff80:	3730      	adds	r7, #48	@ 0x30
 800ff82:	46bd      	mov	sp, r7
 800ff84:	bd80      	pop	{r7, pc}
 800ff86:	bf00      	nop

0800ff88 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800ff88:	b480      	push	{r7}
 800ff8a:	b085      	sub	sp, #20
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	695b      	ldr	r3, [r3, #20]
 800ff96:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	699a      	ldr	r2, [r3, #24]
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	f042 0208 	orr.w	r2, r2, #8
 800ffa6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	699a      	ldr	r2, [r3, #24]
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	f042 0210 	orr.w	r2, r2, #16
 800ffb6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	681a      	ldr	r2, [r3, #0]
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	f022 0201 	bic.w	r2, r2, #1
 800ffc6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	6919      	ldr	r1, [r3, #16]
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	681a      	ldr	r2, [r3, #0]
 800ffd2:	4b3c      	ldr	r3, [pc, #240]	@ (80100c4 <SPI_CloseTransfer+0x13c>)
 800ffd4:	400b      	ands	r3, r1
 800ffd6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	689a      	ldr	r2, [r3, #8]
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800ffe6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ffee:	b2db      	uxtb	r3, r3
 800fff0:	2b04      	cmp	r3, #4
 800fff2:	d014      	beq.n	801001e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	f003 0320 	and.w	r3, r3, #32
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d00f      	beq.n	801001e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010004:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	699a      	ldr	r2, [r3, #24]
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	f042 0220 	orr.w	r2, r2, #32
 801001c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010024:	b2db      	uxtb	r3, r3
 8010026:	2b03      	cmp	r3, #3
 8010028:	d014      	beq.n	8010054 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010030:	2b00      	cmp	r3, #0
 8010032:	d00f      	beq.n	8010054 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801003a:	f043 0204 	orr.w	r2, r3, #4
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	699a      	ldr	r2, [r3, #24]
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010052:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801005a:	2b00      	cmp	r3, #0
 801005c:	d00f      	beq.n	801007e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010064:	f043 0201 	orr.w	r2, r3, #1
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	699a      	ldr	r2, [r3, #24]
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801007c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010084:	2b00      	cmp	r3, #0
 8010086:	d00f      	beq.n	80100a8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801008e:	f043 0208 	orr.w	r2, r3, #8
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	699a      	ldr	r2, [r3, #24]
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80100a6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	2200      	movs	r2, #0
 80100ac:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	2200      	movs	r2, #0
 80100b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80100b8:	bf00      	nop
 80100ba:	3714      	adds	r7, #20
 80100bc:	46bd      	mov	sp, r7
 80100be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c2:	4770      	bx	lr
 80100c4:	fffffc90 	.word	0xfffffc90

080100c8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80100c8:	b580      	push	{r7, lr}
 80100ca:	b084      	sub	sp, #16
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	60f8      	str	r0, [r7, #12]
 80100d0:	60b9      	str	r1, [r7, #8]
 80100d2:	603b      	str	r3, [r7, #0]
 80100d4:	4613      	mov	r3, r2
 80100d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80100d8:	e010      	b.n	80100fc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80100da:	f7f3 fcf3 	bl	8003ac4 <HAL_GetTick>
 80100de:	4602      	mov	r2, r0
 80100e0:	69bb      	ldr	r3, [r7, #24]
 80100e2:	1ad3      	subs	r3, r2, r3
 80100e4:	683a      	ldr	r2, [r7, #0]
 80100e6:	429a      	cmp	r2, r3
 80100e8:	d803      	bhi.n	80100f2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80100ea:	683b      	ldr	r3, [r7, #0]
 80100ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100f0:	d102      	bne.n	80100f8 <SPI_WaitOnFlagUntilTimeout+0x30>
 80100f2:	683b      	ldr	r3, [r7, #0]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d101      	bne.n	80100fc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80100f8:	2303      	movs	r3, #3
 80100fa:	e00f      	b.n	801011c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	695a      	ldr	r2, [r3, #20]
 8010102:	68bb      	ldr	r3, [r7, #8]
 8010104:	4013      	ands	r3, r2
 8010106:	68ba      	ldr	r2, [r7, #8]
 8010108:	429a      	cmp	r2, r3
 801010a:	bf0c      	ite	eq
 801010c:	2301      	moveq	r3, #1
 801010e:	2300      	movne	r3, #0
 8010110:	b2db      	uxtb	r3, r3
 8010112:	461a      	mov	r2, r3
 8010114:	79fb      	ldrb	r3, [r7, #7]
 8010116:	429a      	cmp	r2, r3
 8010118:	d0df      	beq.n	80100da <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 801011a:	2300      	movs	r3, #0
}
 801011c:	4618      	mov	r0, r3
 801011e:	3710      	adds	r7, #16
 8010120:	46bd      	mov	sp, r7
 8010122:	bd80      	pop	{r7, pc}

08010124 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8010124:	b480      	push	{r7}
 8010126:	b085      	sub	sp, #20
 8010128:	af00      	add	r7, sp, #0
 801012a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010130:	095b      	lsrs	r3, r3, #5
 8010132:	3301      	adds	r3, #1
 8010134:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	68db      	ldr	r3, [r3, #12]
 801013a:	3301      	adds	r3, #1
 801013c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801013e:	68bb      	ldr	r3, [r7, #8]
 8010140:	3307      	adds	r3, #7
 8010142:	08db      	lsrs	r3, r3, #3
 8010144:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8010146:	68bb      	ldr	r3, [r7, #8]
 8010148:	68fa      	ldr	r2, [r7, #12]
 801014a:	fb02 f303 	mul.w	r3, r2, r3
}
 801014e:	4618      	mov	r0, r3
 8010150:	3714      	adds	r7, #20
 8010152:	46bd      	mov	sp, r7
 8010154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010158:	4770      	bx	lr

0801015a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801015a:	b580      	push	{r7, lr}
 801015c:	b082      	sub	sp, #8
 801015e:	af00      	add	r7, sp, #0
 8010160:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	2b00      	cmp	r3, #0
 8010166:	d101      	bne.n	801016c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010168:	2301      	movs	r3, #1
 801016a:	e049      	b.n	8010200 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010172:	b2db      	uxtb	r3, r3
 8010174:	2b00      	cmp	r3, #0
 8010176:	d106      	bne.n	8010186 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	2200      	movs	r2, #0
 801017c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010180:	6878      	ldr	r0, [r7, #4]
 8010182:	f7f3 f993 	bl	80034ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	2202      	movs	r2, #2
 801018a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	681a      	ldr	r2, [r3, #0]
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	3304      	adds	r3, #4
 8010196:	4619      	mov	r1, r3
 8010198:	4610      	mov	r0, r2
 801019a:	f000 fc57 	bl	8010a4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	2201      	movs	r2, #1
 80101a2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	2201      	movs	r2, #1
 80101aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	2201      	movs	r2, #1
 80101b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	2201      	movs	r2, #1
 80101ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	2201      	movs	r2, #1
 80101c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	2201      	movs	r2, #1
 80101ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	2201      	movs	r2, #1
 80101d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	2201      	movs	r2, #1
 80101da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	2201      	movs	r2, #1
 80101e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	2201      	movs	r2, #1
 80101ea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	2201      	movs	r2, #1
 80101f2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	2201      	movs	r2, #1
 80101fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80101fe:	2300      	movs	r3, #0
}
 8010200:	4618      	mov	r0, r3
 8010202:	3708      	adds	r7, #8
 8010204:	46bd      	mov	sp, r7
 8010206:	bd80      	pop	{r7, pc}

08010208 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010208:	b480      	push	{r7}
 801020a:	b085      	sub	sp, #20
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010216:	b2db      	uxtb	r3, r3
 8010218:	2b01      	cmp	r3, #1
 801021a:	d001      	beq.n	8010220 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801021c:	2301      	movs	r3, #1
 801021e:	e05e      	b.n	80102de <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	2202      	movs	r2, #2
 8010224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	68da      	ldr	r2, [r3, #12]
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	f042 0201 	orr.w	r2, r2, #1
 8010236:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	4a2b      	ldr	r2, [pc, #172]	@ (80102ec <HAL_TIM_Base_Start_IT+0xe4>)
 801023e:	4293      	cmp	r3, r2
 8010240:	d02c      	beq.n	801029c <HAL_TIM_Base_Start_IT+0x94>
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801024a:	d027      	beq.n	801029c <HAL_TIM_Base_Start_IT+0x94>
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	4a27      	ldr	r2, [pc, #156]	@ (80102f0 <HAL_TIM_Base_Start_IT+0xe8>)
 8010252:	4293      	cmp	r3, r2
 8010254:	d022      	beq.n	801029c <HAL_TIM_Base_Start_IT+0x94>
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	4a26      	ldr	r2, [pc, #152]	@ (80102f4 <HAL_TIM_Base_Start_IT+0xec>)
 801025c:	4293      	cmp	r3, r2
 801025e:	d01d      	beq.n	801029c <HAL_TIM_Base_Start_IT+0x94>
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	4a24      	ldr	r2, [pc, #144]	@ (80102f8 <HAL_TIM_Base_Start_IT+0xf0>)
 8010266:	4293      	cmp	r3, r2
 8010268:	d018      	beq.n	801029c <HAL_TIM_Base_Start_IT+0x94>
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	4a23      	ldr	r2, [pc, #140]	@ (80102fc <HAL_TIM_Base_Start_IT+0xf4>)
 8010270:	4293      	cmp	r3, r2
 8010272:	d013      	beq.n	801029c <HAL_TIM_Base_Start_IT+0x94>
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	4a21      	ldr	r2, [pc, #132]	@ (8010300 <HAL_TIM_Base_Start_IT+0xf8>)
 801027a:	4293      	cmp	r3, r2
 801027c:	d00e      	beq.n	801029c <HAL_TIM_Base_Start_IT+0x94>
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	4a20      	ldr	r2, [pc, #128]	@ (8010304 <HAL_TIM_Base_Start_IT+0xfc>)
 8010284:	4293      	cmp	r3, r2
 8010286:	d009      	beq.n	801029c <HAL_TIM_Base_Start_IT+0x94>
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	4a1e      	ldr	r2, [pc, #120]	@ (8010308 <HAL_TIM_Base_Start_IT+0x100>)
 801028e:	4293      	cmp	r3, r2
 8010290:	d004      	beq.n	801029c <HAL_TIM_Base_Start_IT+0x94>
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	4a1d      	ldr	r2, [pc, #116]	@ (801030c <HAL_TIM_Base_Start_IT+0x104>)
 8010298:	4293      	cmp	r3, r2
 801029a:	d115      	bne.n	80102c8 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	689a      	ldr	r2, [r3, #8]
 80102a2:	4b1b      	ldr	r3, [pc, #108]	@ (8010310 <HAL_TIM_Base_Start_IT+0x108>)
 80102a4:	4013      	ands	r3, r2
 80102a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	2b06      	cmp	r3, #6
 80102ac:	d015      	beq.n	80102da <HAL_TIM_Base_Start_IT+0xd2>
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80102b4:	d011      	beq.n	80102da <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	681a      	ldr	r2, [r3, #0]
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	f042 0201 	orr.w	r2, r2, #1
 80102c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80102c6:	e008      	b.n	80102da <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	681a      	ldr	r2, [r3, #0]
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	f042 0201 	orr.w	r2, r2, #1
 80102d6:	601a      	str	r2, [r3, #0]
 80102d8:	e000      	b.n	80102dc <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80102da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80102dc:	2300      	movs	r3, #0
}
 80102de:	4618      	mov	r0, r3
 80102e0:	3714      	adds	r7, #20
 80102e2:	46bd      	mov	sp, r7
 80102e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e8:	4770      	bx	lr
 80102ea:	bf00      	nop
 80102ec:	40010000 	.word	0x40010000
 80102f0:	40000400 	.word	0x40000400
 80102f4:	40000800 	.word	0x40000800
 80102f8:	40000c00 	.word	0x40000c00
 80102fc:	40010400 	.word	0x40010400
 8010300:	40001800 	.word	0x40001800
 8010304:	40014000 	.word	0x40014000
 8010308:	4000e000 	.word	0x4000e000
 801030c:	4000e400 	.word	0x4000e400
 8010310:	00010007 	.word	0x00010007

08010314 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010314:	b580      	push	{r7, lr}
 8010316:	b082      	sub	sp, #8
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d101      	bne.n	8010326 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010322:	2301      	movs	r3, #1
 8010324:	e049      	b.n	80103ba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801032c:	b2db      	uxtb	r3, r3
 801032e:	2b00      	cmp	r3, #0
 8010330:	d106      	bne.n	8010340 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	2200      	movs	r2, #0
 8010336:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801033a:	6878      	ldr	r0, [r7, #4]
 801033c:	f000 f841 	bl	80103c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	2202      	movs	r2, #2
 8010344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	681a      	ldr	r2, [r3, #0]
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	3304      	adds	r3, #4
 8010350:	4619      	mov	r1, r3
 8010352:	4610      	mov	r0, r2
 8010354:	f000 fb7a 	bl	8010a4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	2201      	movs	r2, #1
 801035c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	2201      	movs	r2, #1
 8010364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	2201      	movs	r2, #1
 801036c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	2201      	movs	r2, #1
 8010374:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	2201      	movs	r2, #1
 801037c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	2201      	movs	r2, #1
 8010384:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	2201      	movs	r2, #1
 801038c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	2201      	movs	r2, #1
 8010394:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	2201      	movs	r2, #1
 801039c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	2201      	movs	r2, #1
 80103a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	2201      	movs	r2, #1
 80103ac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	2201      	movs	r2, #1
 80103b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80103b8:	2300      	movs	r3, #0
}
 80103ba:	4618      	mov	r0, r3
 80103bc:	3708      	adds	r7, #8
 80103be:	46bd      	mov	sp, r7
 80103c0:	bd80      	pop	{r7, pc}

080103c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80103c2:	b480      	push	{r7}
 80103c4:	b083      	sub	sp, #12
 80103c6:	af00      	add	r7, sp, #0
 80103c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80103ca:	bf00      	nop
 80103cc:	370c      	adds	r7, #12
 80103ce:	46bd      	mov	sp, r7
 80103d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d4:	4770      	bx	lr

080103d6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80103d6:	b580      	push	{r7, lr}
 80103d8:	b084      	sub	sp, #16
 80103da:	af00      	add	r7, sp, #0
 80103dc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	68db      	ldr	r3, [r3, #12]
 80103e4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	691b      	ldr	r3, [r3, #16]
 80103ec:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80103ee:	68bb      	ldr	r3, [r7, #8]
 80103f0:	f003 0302 	and.w	r3, r3, #2
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d020      	beq.n	801043a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	f003 0302 	and.w	r3, r3, #2
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d01b      	beq.n	801043a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	f06f 0202 	mvn.w	r2, #2
 801040a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	2201      	movs	r2, #1
 8010410:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	699b      	ldr	r3, [r3, #24]
 8010418:	f003 0303 	and.w	r3, r3, #3
 801041c:	2b00      	cmp	r3, #0
 801041e:	d003      	beq.n	8010428 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010420:	6878      	ldr	r0, [r7, #4]
 8010422:	f000 faf5 	bl	8010a10 <HAL_TIM_IC_CaptureCallback>
 8010426:	e005      	b.n	8010434 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010428:	6878      	ldr	r0, [r7, #4]
 801042a:	f000 fae7 	bl	80109fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801042e:	6878      	ldr	r0, [r7, #4]
 8010430:	f000 faf8 	bl	8010a24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	2200      	movs	r2, #0
 8010438:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 801043a:	68bb      	ldr	r3, [r7, #8]
 801043c:	f003 0304 	and.w	r3, r3, #4
 8010440:	2b00      	cmp	r3, #0
 8010442:	d020      	beq.n	8010486 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	f003 0304 	and.w	r3, r3, #4
 801044a:	2b00      	cmp	r3, #0
 801044c:	d01b      	beq.n	8010486 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	f06f 0204 	mvn.w	r2, #4
 8010456:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	2202      	movs	r2, #2
 801045c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	699b      	ldr	r3, [r3, #24]
 8010464:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010468:	2b00      	cmp	r3, #0
 801046a:	d003      	beq.n	8010474 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801046c:	6878      	ldr	r0, [r7, #4]
 801046e:	f000 facf 	bl	8010a10 <HAL_TIM_IC_CaptureCallback>
 8010472:	e005      	b.n	8010480 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010474:	6878      	ldr	r0, [r7, #4]
 8010476:	f000 fac1 	bl	80109fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801047a:	6878      	ldr	r0, [r7, #4]
 801047c:	f000 fad2 	bl	8010a24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	2200      	movs	r2, #0
 8010484:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8010486:	68bb      	ldr	r3, [r7, #8]
 8010488:	f003 0308 	and.w	r3, r3, #8
 801048c:	2b00      	cmp	r3, #0
 801048e:	d020      	beq.n	80104d2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	f003 0308 	and.w	r3, r3, #8
 8010496:	2b00      	cmp	r3, #0
 8010498:	d01b      	beq.n	80104d2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	f06f 0208 	mvn.w	r2, #8
 80104a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	2204      	movs	r2, #4
 80104a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	69db      	ldr	r3, [r3, #28]
 80104b0:	f003 0303 	and.w	r3, r3, #3
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d003      	beq.n	80104c0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80104b8:	6878      	ldr	r0, [r7, #4]
 80104ba:	f000 faa9 	bl	8010a10 <HAL_TIM_IC_CaptureCallback>
 80104be:	e005      	b.n	80104cc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80104c0:	6878      	ldr	r0, [r7, #4]
 80104c2:	f000 fa9b 	bl	80109fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80104c6:	6878      	ldr	r0, [r7, #4]
 80104c8:	f000 faac 	bl	8010a24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	2200      	movs	r2, #0
 80104d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80104d2:	68bb      	ldr	r3, [r7, #8]
 80104d4:	f003 0310 	and.w	r3, r3, #16
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d020      	beq.n	801051e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	f003 0310 	and.w	r3, r3, #16
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d01b      	beq.n	801051e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	f06f 0210 	mvn.w	r2, #16
 80104ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	2208      	movs	r2, #8
 80104f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	69db      	ldr	r3, [r3, #28]
 80104fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010500:	2b00      	cmp	r3, #0
 8010502:	d003      	beq.n	801050c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010504:	6878      	ldr	r0, [r7, #4]
 8010506:	f000 fa83 	bl	8010a10 <HAL_TIM_IC_CaptureCallback>
 801050a:	e005      	b.n	8010518 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801050c:	6878      	ldr	r0, [r7, #4]
 801050e:	f000 fa75 	bl	80109fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010512:	6878      	ldr	r0, [r7, #4]
 8010514:	f000 fa86 	bl	8010a24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	2200      	movs	r2, #0
 801051c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 801051e:	68bb      	ldr	r3, [r7, #8]
 8010520:	f003 0301 	and.w	r3, r3, #1
 8010524:	2b00      	cmp	r3, #0
 8010526:	d00c      	beq.n	8010542 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	f003 0301 	and.w	r3, r3, #1
 801052e:	2b00      	cmp	r3, #0
 8010530:	d007      	beq.n	8010542 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	f06f 0201 	mvn.w	r2, #1
 801053a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801053c:	6878      	ldr	r0, [r7, #4]
 801053e:	f7f1 fd53 	bl	8001fe8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8010542:	68bb      	ldr	r3, [r7, #8]
 8010544:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010548:	2b00      	cmp	r3, #0
 801054a:	d104      	bne.n	8010556 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 801054c:	68bb      	ldr	r3, [r7, #8]
 801054e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8010552:	2b00      	cmp	r3, #0
 8010554:	d00c      	beq.n	8010570 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801055c:	2b00      	cmp	r3, #0
 801055e:	d007      	beq.n	8010570 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8010568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801056a:	6878      	ldr	r0, [r7, #4]
 801056c:	f000 ffc6 	bl	80114fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8010570:	68bb      	ldr	r3, [r7, #8]
 8010572:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010576:	2b00      	cmp	r3, #0
 8010578:	d00c      	beq.n	8010594 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010580:	2b00      	cmp	r3, #0
 8010582:	d007      	beq.n	8010594 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 801058c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801058e:	6878      	ldr	r0, [r7, #4]
 8010590:	f000 ffbe 	bl	8011510 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8010594:	68bb      	ldr	r3, [r7, #8]
 8010596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801059a:	2b00      	cmp	r3, #0
 801059c:	d00c      	beq.n	80105b8 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d007      	beq.n	80105b8 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80105b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80105b2:	6878      	ldr	r0, [r7, #4]
 80105b4:	f000 fa40 	bl	8010a38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80105b8:	68bb      	ldr	r3, [r7, #8]
 80105ba:	f003 0320 	and.w	r3, r3, #32
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d00c      	beq.n	80105dc <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	f003 0320 	and.w	r3, r3, #32
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d007      	beq.n	80105dc <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	f06f 0220 	mvn.w	r2, #32
 80105d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80105d6:	6878      	ldr	r0, [r7, #4]
 80105d8:	f000 ff86 	bl	80114e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80105dc:	bf00      	nop
 80105de:	3710      	adds	r7, #16
 80105e0:	46bd      	mov	sp, r7
 80105e2:	bd80      	pop	{r7, pc}

080105e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80105e4:	b580      	push	{r7, lr}
 80105e6:	b086      	sub	sp, #24
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	60f8      	str	r0, [r7, #12]
 80105ec:	60b9      	str	r1, [r7, #8]
 80105ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80105f0:	2300      	movs	r3, #0
 80105f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80105fa:	2b01      	cmp	r3, #1
 80105fc:	d101      	bne.n	8010602 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80105fe:	2302      	movs	r3, #2
 8010600:	e0ff      	b.n	8010802 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	2201      	movs	r2, #1
 8010606:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	2b14      	cmp	r3, #20
 801060e:	f200 80f0 	bhi.w	80107f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8010612:	a201      	add	r2, pc, #4	@ (adr r2, 8010618 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8010614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010618:	0801066d 	.word	0x0801066d
 801061c:	080107f3 	.word	0x080107f3
 8010620:	080107f3 	.word	0x080107f3
 8010624:	080107f3 	.word	0x080107f3
 8010628:	080106ad 	.word	0x080106ad
 801062c:	080107f3 	.word	0x080107f3
 8010630:	080107f3 	.word	0x080107f3
 8010634:	080107f3 	.word	0x080107f3
 8010638:	080106ef 	.word	0x080106ef
 801063c:	080107f3 	.word	0x080107f3
 8010640:	080107f3 	.word	0x080107f3
 8010644:	080107f3 	.word	0x080107f3
 8010648:	0801072f 	.word	0x0801072f
 801064c:	080107f3 	.word	0x080107f3
 8010650:	080107f3 	.word	0x080107f3
 8010654:	080107f3 	.word	0x080107f3
 8010658:	08010771 	.word	0x08010771
 801065c:	080107f3 	.word	0x080107f3
 8010660:	080107f3 	.word	0x080107f3
 8010664:	080107f3 	.word	0x080107f3
 8010668:	080107b1 	.word	0x080107b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	68b9      	ldr	r1, [r7, #8]
 8010672:	4618      	mov	r0, r3
 8010674:	f000 fa9c 	bl	8010bb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	699a      	ldr	r2, [r3, #24]
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	f042 0208 	orr.w	r2, r2, #8
 8010686:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	699a      	ldr	r2, [r3, #24]
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	f022 0204 	bic.w	r2, r2, #4
 8010696:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	6999      	ldr	r1, [r3, #24]
 801069e:	68bb      	ldr	r3, [r7, #8]
 80106a0:	691a      	ldr	r2, [r3, #16]
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	430a      	orrs	r2, r1
 80106a8:	619a      	str	r2, [r3, #24]
      break;
 80106aa:	e0a5      	b.n	80107f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	68b9      	ldr	r1, [r7, #8]
 80106b2:	4618      	mov	r0, r3
 80106b4:	f000 fb0c 	bl	8010cd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	699a      	ldr	r2, [r3, #24]
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80106c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	699a      	ldr	r2, [r3, #24]
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80106d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	6999      	ldr	r1, [r3, #24]
 80106de:	68bb      	ldr	r3, [r7, #8]
 80106e0:	691b      	ldr	r3, [r3, #16]
 80106e2:	021a      	lsls	r2, r3, #8
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	430a      	orrs	r2, r1
 80106ea:	619a      	str	r2, [r3, #24]
      break;
 80106ec:	e084      	b.n	80107f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	68b9      	ldr	r1, [r7, #8]
 80106f4:	4618      	mov	r0, r3
 80106f6:	f000 fb75 	bl	8010de4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	69da      	ldr	r2, [r3, #28]
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	f042 0208 	orr.w	r2, r2, #8
 8010708:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	69da      	ldr	r2, [r3, #28]
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	f022 0204 	bic.w	r2, r2, #4
 8010718:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	69d9      	ldr	r1, [r3, #28]
 8010720:	68bb      	ldr	r3, [r7, #8]
 8010722:	691a      	ldr	r2, [r3, #16]
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	430a      	orrs	r2, r1
 801072a:	61da      	str	r2, [r3, #28]
      break;
 801072c:	e064      	b.n	80107f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	68b9      	ldr	r1, [r7, #8]
 8010734:	4618      	mov	r0, r3
 8010736:	f000 fbdd 	bl	8010ef4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	69da      	ldr	r2, [r3, #28]
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010748:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	69da      	ldr	r2, [r3, #28]
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8010758:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	69d9      	ldr	r1, [r3, #28]
 8010760:	68bb      	ldr	r3, [r7, #8]
 8010762:	691b      	ldr	r3, [r3, #16]
 8010764:	021a      	lsls	r2, r3, #8
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	430a      	orrs	r2, r1
 801076c:	61da      	str	r2, [r3, #28]
      break;
 801076e:	e043      	b.n	80107f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	68b9      	ldr	r1, [r7, #8]
 8010776:	4618      	mov	r0, r3
 8010778:	f000 fc26 	bl	8010fc8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	f042 0208 	orr.w	r2, r2, #8
 801078a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	f022 0204 	bic.w	r2, r2, #4
 801079a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80107a2:	68bb      	ldr	r3, [r7, #8]
 80107a4:	691a      	ldr	r2, [r3, #16]
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	430a      	orrs	r2, r1
 80107ac:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80107ae:	e023      	b.n	80107f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	68b9      	ldr	r1, [r7, #8]
 80107b6:	4618      	mov	r0, r3
 80107b8:	f000 fc6a 	bl	8011090 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80107ca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80107da:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80107e2:	68bb      	ldr	r3, [r7, #8]
 80107e4:	691b      	ldr	r3, [r3, #16]
 80107e6:	021a      	lsls	r2, r3, #8
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	430a      	orrs	r2, r1
 80107ee:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80107f0:	e002      	b.n	80107f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80107f2:	2301      	movs	r3, #1
 80107f4:	75fb      	strb	r3, [r7, #23]
      break;
 80107f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	2200      	movs	r2, #0
 80107fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8010800:	7dfb      	ldrb	r3, [r7, #23]
}
 8010802:	4618      	mov	r0, r3
 8010804:	3718      	adds	r7, #24
 8010806:	46bd      	mov	sp, r7
 8010808:	bd80      	pop	{r7, pc}
 801080a:	bf00      	nop

0801080c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801080c:	b580      	push	{r7, lr}
 801080e:	b084      	sub	sp, #16
 8010810:	af00      	add	r7, sp, #0
 8010812:	6078      	str	r0, [r7, #4]
 8010814:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010816:	2300      	movs	r3, #0
 8010818:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010820:	2b01      	cmp	r3, #1
 8010822:	d101      	bne.n	8010828 <HAL_TIM_ConfigClockSource+0x1c>
 8010824:	2302      	movs	r3, #2
 8010826:	e0dc      	b.n	80109e2 <HAL_TIM_ConfigClockSource+0x1d6>
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	2201      	movs	r2, #1
 801082c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	2202      	movs	r2, #2
 8010834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	689b      	ldr	r3, [r3, #8]
 801083e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8010840:	68ba      	ldr	r2, [r7, #8]
 8010842:	4b6a      	ldr	r3, [pc, #424]	@ (80109ec <HAL_TIM_ConfigClockSource+0x1e0>)
 8010844:	4013      	ands	r3, r2
 8010846:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010848:	68bb      	ldr	r3, [r7, #8]
 801084a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801084e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	68ba      	ldr	r2, [r7, #8]
 8010856:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010858:	683b      	ldr	r3, [r7, #0]
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	4a64      	ldr	r2, [pc, #400]	@ (80109f0 <HAL_TIM_ConfigClockSource+0x1e4>)
 801085e:	4293      	cmp	r3, r2
 8010860:	f000 80a9 	beq.w	80109b6 <HAL_TIM_ConfigClockSource+0x1aa>
 8010864:	4a62      	ldr	r2, [pc, #392]	@ (80109f0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8010866:	4293      	cmp	r3, r2
 8010868:	f200 80ae 	bhi.w	80109c8 <HAL_TIM_ConfigClockSource+0x1bc>
 801086c:	4a61      	ldr	r2, [pc, #388]	@ (80109f4 <HAL_TIM_ConfigClockSource+0x1e8>)
 801086e:	4293      	cmp	r3, r2
 8010870:	f000 80a1 	beq.w	80109b6 <HAL_TIM_ConfigClockSource+0x1aa>
 8010874:	4a5f      	ldr	r2, [pc, #380]	@ (80109f4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8010876:	4293      	cmp	r3, r2
 8010878:	f200 80a6 	bhi.w	80109c8 <HAL_TIM_ConfigClockSource+0x1bc>
 801087c:	4a5e      	ldr	r2, [pc, #376]	@ (80109f8 <HAL_TIM_ConfigClockSource+0x1ec>)
 801087e:	4293      	cmp	r3, r2
 8010880:	f000 8099 	beq.w	80109b6 <HAL_TIM_ConfigClockSource+0x1aa>
 8010884:	4a5c      	ldr	r2, [pc, #368]	@ (80109f8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8010886:	4293      	cmp	r3, r2
 8010888:	f200 809e 	bhi.w	80109c8 <HAL_TIM_ConfigClockSource+0x1bc>
 801088c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8010890:	f000 8091 	beq.w	80109b6 <HAL_TIM_ConfigClockSource+0x1aa>
 8010894:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8010898:	f200 8096 	bhi.w	80109c8 <HAL_TIM_ConfigClockSource+0x1bc>
 801089c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80108a0:	f000 8089 	beq.w	80109b6 <HAL_TIM_ConfigClockSource+0x1aa>
 80108a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80108a8:	f200 808e 	bhi.w	80109c8 <HAL_TIM_ConfigClockSource+0x1bc>
 80108ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80108b0:	d03e      	beq.n	8010930 <HAL_TIM_ConfigClockSource+0x124>
 80108b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80108b6:	f200 8087 	bhi.w	80109c8 <HAL_TIM_ConfigClockSource+0x1bc>
 80108ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80108be:	f000 8086 	beq.w	80109ce <HAL_TIM_ConfigClockSource+0x1c2>
 80108c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80108c6:	d87f      	bhi.n	80109c8 <HAL_TIM_ConfigClockSource+0x1bc>
 80108c8:	2b70      	cmp	r3, #112	@ 0x70
 80108ca:	d01a      	beq.n	8010902 <HAL_TIM_ConfigClockSource+0xf6>
 80108cc:	2b70      	cmp	r3, #112	@ 0x70
 80108ce:	d87b      	bhi.n	80109c8 <HAL_TIM_ConfigClockSource+0x1bc>
 80108d0:	2b60      	cmp	r3, #96	@ 0x60
 80108d2:	d050      	beq.n	8010976 <HAL_TIM_ConfigClockSource+0x16a>
 80108d4:	2b60      	cmp	r3, #96	@ 0x60
 80108d6:	d877      	bhi.n	80109c8 <HAL_TIM_ConfigClockSource+0x1bc>
 80108d8:	2b50      	cmp	r3, #80	@ 0x50
 80108da:	d03c      	beq.n	8010956 <HAL_TIM_ConfigClockSource+0x14a>
 80108dc:	2b50      	cmp	r3, #80	@ 0x50
 80108de:	d873      	bhi.n	80109c8 <HAL_TIM_ConfigClockSource+0x1bc>
 80108e0:	2b40      	cmp	r3, #64	@ 0x40
 80108e2:	d058      	beq.n	8010996 <HAL_TIM_ConfigClockSource+0x18a>
 80108e4:	2b40      	cmp	r3, #64	@ 0x40
 80108e6:	d86f      	bhi.n	80109c8 <HAL_TIM_ConfigClockSource+0x1bc>
 80108e8:	2b30      	cmp	r3, #48	@ 0x30
 80108ea:	d064      	beq.n	80109b6 <HAL_TIM_ConfigClockSource+0x1aa>
 80108ec:	2b30      	cmp	r3, #48	@ 0x30
 80108ee:	d86b      	bhi.n	80109c8 <HAL_TIM_ConfigClockSource+0x1bc>
 80108f0:	2b20      	cmp	r3, #32
 80108f2:	d060      	beq.n	80109b6 <HAL_TIM_ConfigClockSource+0x1aa>
 80108f4:	2b20      	cmp	r3, #32
 80108f6:	d867      	bhi.n	80109c8 <HAL_TIM_ConfigClockSource+0x1bc>
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d05c      	beq.n	80109b6 <HAL_TIM_ConfigClockSource+0x1aa>
 80108fc:	2b10      	cmp	r3, #16
 80108fe:	d05a      	beq.n	80109b6 <HAL_TIM_ConfigClockSource+0x1aa>
 8010900:	e062      	b.n	80109c8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8010906:	683b      	ldr	r3, [r7, #0]
 8010908:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801090a:	683b      	ldr	r3, [r7, #0]
 801090c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801090e:	683b      	ldr	r3, [r7, #0]
 8010910:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8010912:	f000 fca1 	bl	8011258 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	689b      	ldr	r3, [r3, #8]
 801091c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801091e:	68bb      	ldr	r3, [r7, #8]
 8010920:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8010924:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	68ba      	ldr	r2, [r7, #8]
 801092c:	609a      	str	r2, [r3, #8]
      break;
 801092e:	e04f      	b.n	80109d0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8010934:	683b      	ldr	r3, [r7, #0]
 8010936:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8010938:	683b      	ldr	r3, [r7, #0]
 801093a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801093c:	683b      	ldr	r3, [r7, #0]
 801093e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8010940:	f000 fc8a 	bl	8011258 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	689a      	ldr	r2, [r3, #8]
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8010952:	609a      	str	r2, [r3, #8]
      break;
 8010954:	e03c      	b.n	80109d0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801095a:	683b      	ldr	r3, [r7, #0]
 801095c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801095e:	683b      	ldr	r3, [r7, #0]
 8010960:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010962:	461a      	mov	r2, r3
 8010964:	f000 fbfa 	bl	801115c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	2150      	movs	r1, #80	@ 0x50
 801096e:	4618      	mov	r0, r3
 8010970:	f000 fc54 	bl	801121c <TIM_ITRx_SetConfig>
      break;
 8010974:	e02c      	b.n	80109d0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801097a:	683b      	ldr	r3, [r7, #0]
 801097c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801097e:	683b      	ldr	r3, [r7, #0]
 8010980:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010982:	461a      	mov	r2, r3
 8010984:	f000 fc19 	bl	80111ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	2160      	movs	r1, #96	@ 0x60
 801098e:	4618      	mov	r0, r3
 8010990:	f000 fc44 	bl	801121c <TIM_ITRx_SetConfig>
      break;
 8010994:	e01c      	b.n	80109d0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801099a:	683b      	ldr	r3, [r7, #0]
 801099c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801099e:	683b      	ldr	r3, [r7, #0]
 80109a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80109a2:	461a      	mov	r2, r3
 80109a4:	f000 fbda 	bl	801115c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	2140      	movs	r1, #64	@ 0x40
 80109ae:	4618      	mov	r0, r3
 80109b0:	f000 fc34 	bl	801121c <TIM_ITRx_SetConfig>
      break;
 80109b4:	e00c      	b.n	80109d0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	681a      	ldr	r2, [r3, #0]
 80109ba:	683b      	ldr	r3, [r7, #0]
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	4619      	mov	r1, r3
 80109c0:	4610      	mov	r0, r2
 80109c2:	f000 fc2b 	bl	801121c <TIM_ITRx_SetConfig>
      break;
 80109c6:	e003      	b.n	80109d0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80109c8:	2301      	movs	r3, #1
 80109ca:	73fb      	strb	r3, [r7, #15]
      break;
 80109cc:	e000      	b.n	80109d0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80109ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	2201      	movs	r2, #1
 80109d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	2200      	movs	r2, #0
 80109dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80109e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80109e2:	4618      	mov	r0, r3
 80109e4:	3710      	adds	r7, #16
 80109e6:	46bd      	mov	sp, r7
 80109e8:	bd80      	pop	{r7, pc}
 80109ea:	bf00      	nop
 80109ec:	ffceff88 	.word	0xffceff88
 80109f0:	00100040 	.word	0x00100040
 80109f4:	00100030 	.word	0x00100030
 80109f8:	00100020 	.word	0x00100020

080109fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80109fc:	b480      	push	{r7}
 80109fe:	b083      	sub	sp, #12
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010a04:	bf00      	nop
 8010a06:	370c      	adds	r7, #12
 8010a08:	46bd      	mov	sp, r7
 8010a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a0e:	4770      	bx	lr

08010a10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010a10:	b480      	push	{r7}
 8010a12:	b083      	sub	sp, #12
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010a18:	bf00      	nop
 8010a1a:	370c      	adds	r7, #12
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a22:	4770      	bx	lr

08010a24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010a24:	b480      	push	{r7}
 8010a26:	b083      	sub	sp, #12
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010a2c:	bf00      	nop
 8010a2e:	370c      	adds	r7, #12
 8010a30:	46bd      	mov	sp, r7
 8010a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a36:	4770      	bx	lr

08010a38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010a38:	b480      	push	{r7}
 8010a3a:	b083      	sub	sp, #12
 8010a3c:	af00      	add	r7, sp, #0
 8010a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010a40:	bf00      	nop
 8010a42:	370c      	adds	r7, #12
 8010a44:	46bd      	mov	sp, r7
 8010a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a4a:	4770      	bx	lr

08010a4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010a4c:	b480      	push	{r7}
 8010a4e:	b085      	sub	sp, #20
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	6078      	str	r0, [r7, #4]
 8010a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	4a4a      	ldr	r2, [pc, #296]	@ (8010b88 <TIM_Base_SetConfig+0x13c>)
 8010a60:	4293      	cmp	r3, r2
 8010a62:	d013      	beq.n	8010a8c <TIM_Base_SetConfig+0x40>
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010a6a:	d00f      	beq.n	8010a8c <TIM_Base_SetConfig+0x40>
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	4a47      	ldr	r2, [pc, #284]	@ (8010b8c <TIM_Base_SetConfig+0x140>)
 8010a70:	4293      	cmp	r3, r2
 8010a72:	d00b      	beq.n	8010a8c <TIM_Base_SetConfig+0x40>
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	4a46      	ldr	r2, [pc, #280]	@ (8010b90 <TIM_Base_SetConfig+0x144>)
 8010a78:	4293      	cmp	r3, r2
 8010a7a:	d007      	beq.n	8010a8c <TIM_Base_SetConfig+0x40>
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	4a45      	ldr	r2, [pc, #276]	@ (8010b94 <TIM_Base_SetConfig+0x148>)
 8010a80:	4293      	cmp	r3, r2
 8010a82:	d003      	beq.n	8010a8c <TIM_Base_SetConfig+0x40>
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	4a44      	ldr	r2, [pc, #272]	@ (8010b98 <TIM_Base_SetConfig+0x14c>)
 8010a88:	4293      	cmp	r3, r2
 8010a8a:	d108      	bne.n	8010a9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010a92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010a94:	683b      	ldr	r3, [r7, #0]
 8010a96:	685b      	ldr	r3, [r3, #4]
 8010a98:	68fa      	ldr	r2, [r7, #12]
 8010a9a:	4313      	orrs	r3, r2
 8010a9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	4a39      	ldr	r2, [pc, #228]	@ (8010b88 <TIM_Base_SetConfig+0x13c>)
 8010aa2:	4293      	cmp	r3, r2
 8010aa4:	d027      	beq.n	8010af6 <TIM_Base_SetConfig+0xaa>
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010aac:	d023      	beq.n	8010af6 <TIM_Base_SetConfig+0xaa>
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	4a36      	ldr	r2, [pc, #216]	@ (8010b8c <TIM_Base_SetConfig+0x140>)
 8010ab2:	4293      	cmp	r3, r2
 8010ab4:	d01f      	beq.n	8010af6 <TIM_Base_SetConfig+0xaa>
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	4a35      	ldr	r2, [pc, #212]	@ (8010b90 <TIM_Base_SetConfig+0x144>)
 8010aba:	4293      	cmp	r3, r2
 8010abc:	d01b      	beq.n	8010af6 <TIM_Base_SetConfig+0xaa>
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	4a34      	ldr	r2, [pc, #208]	@ (8010b94 <TIM_Base_SetConfig+0x148>)
 8010ac2:	4293      	cmp	r3, r2
 8010ac4:	d017      	beq.n	8010af6 <TIM_Base_SetConfig+0xaa>
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	4a33      	ldr	r2, [pc, #204]	@ (8010b98 <TIM_Base_SetConfig+0x14c>)
 8010aca:	4293      	cmp	r3, r2
 8010acc:	d013      	beq.n	8010af6 <TIM_Base_SetConfig+0xaa>
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	4a32      	ldr	r2, [pc, #200]	@ (8010b9c <TIM_Base_SetConfig+0x150>)
 8010ad2:	4293      	cmp	r3, r2
 8010ad4:	d00f      	beq.n	8010af6 <TIM_Base_SetConfig+0xaa>
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	4a31      	ldr	r2, [pc, #196]	@ (8010ba0 <TIM_Base_SetConfig+0x154>)
 8010ada:	4293      	cmp	r3, r2
 8010adc:	d00b      	beq.n	8010af6 <TIM_Base_SetConfig+0xaa>
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	4a30      	ldr	r2, [pc, #192]	@ (8010ba4 <TIM_Base_SetConfig+0x158>)
 8010ae2:	4293      	cmp	r3, r2
 8010ae4:	d007      	beq.n	8010af6 <TIM_Base_SetConfig+0xaa>
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	4a2f      	ldr	r2, [pc, #188]	@ (8010ba8 <TIM_Base_SetConfig+0x15c>)
 8010aea:	4293      	cmp	r3, r2
 8010aec:	d003      	beq.n	8010af6 <TIM_Base_SetConfig+0xaa>
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	4a2e      	ldr	r2, [pc, #184]	@ (8010bac <TIM_Base_SetConfig+0x160>)
 8010af2:	4293      	cmp	r3, r2
 8010af4:	d108      	bne.n	8010b08 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010afc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010afe:	683b      	ldr	r3, [r7, #0]
 8010b00:	68db      	ldr	r3, [r3, #12]
 8010b02:	68fa      	ldr	r2, [r7, #12]
 8010b04:	4313      	orrs	r3, r2
 8010b06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8010b0e:	683b      	ldr	r3, [r7, #0]
 8010b10:	695b      	ldr	r3, [r3, #20]
 8010b12:	4313      	orrs	r3, r2
 8010b14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	68fa      	ldr	r2, [r7, #12]
 8010b1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010b1c:	683b      	ldr	r3, [r7, #0]
 8010b1e:	689a      	ldr	r2, [r3, #8]
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010b24:	683b      	ldr	r3, [r7, #0]
 8010b26:	681a      	ldr	r2, [r3, #0]
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	4a16      	ldr	r2, [pc, #88]	@ (8010b88 <TIM_Base_SetConfig+0x13c>)
 8010b30:	4293      	cmp	r3, r2
 8010b32:	d00f      	beq.n	8010b54 <TIM_Base_SetConfig+0x108>
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	4a18      	ldr	r2, [pc, #96]	@ (8010b98 <TIM_Base_SetConfig+0x14c>)
 8010b38:	4293      	cmp	r3, r2
 8010b3a:	d00b      	beq.n	8010b54 <TIM_Base_SetConfig+0x108>
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	4a17      	ldr	r2, [pc, #92]	@ (8010b9c <TIM_Base_SetConfig+0x150>)
 8010b40:	4293      	cmp	r3, r2
 8010b42:	d007      	beq.n	8010b54 <TIM_Base_SetConfig+0x108>
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	4a16      	ldr	r2, [pc, #88]	@ (8010ba0 <TIM_Base_SetConfig+0x154>)
 8010b48:	4293      	cmp	r3, r2
 8010b4a:	d003      	beq.n	8010b54 <TIM_Base_SetConfig+0x108>
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	4a15      	ldr	r2, [pc, #84]	@ (8010ba4 <TIM_Base_SetConfig+0x158>)
 8010b50:	4293      	cmp	r3, r2
 8010b52:	d103      	bne.n	8010b5c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010b54:	683b      	ldr	r3, [r7, #0]
 8010b56:	691a      	ldr	r2, [r3, #16]
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	2201      	movs	r2, #1
 8010b60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	691b      	ldr	r3, [r3, #16]
 8010b66:	f003 0301 	and.w	r3, r3, #1
 8010b6a:	2b01      	cmp	r3, #1
 8010b6c:	d105      	bne.n	8010b7a <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	691b      	ldr	r3, [r3, #16]
 8010b72:	f023 0201 	bic.w	r2, r3, #1
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	611a      	str	r2, [r3, #16]
  }
}
 8010b7a:	bf00      	nop
 8010b7c:	3714      	adds	r7, #20
 8010b7e:	46bd      	mov	sp, r7
 8010b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b84:	4770      	bx	lr
 8010b86:	bf00      	nop
 8010b88:	40010000 	.word	0x40010000
 8010b8c:	40000400 	.word	0x40000400
 8010b90:	40000800 	.word	0x40000800
 8010b94:	40000c00 	.word	0x40000c00
 8010b98:	40010400 	.word	0x40010400
 8010b9c:	40014000 	.word	0x40014000
 8010ba0:	40014400 	.word	0x40014400
 8010ba4:	40014800 	.word	0x40014800
 8010ba8:	4000e000 	.word	0x4000e000
 8010bac:	4000e400 	.word	0x4000e400

08010bb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010bb0:	b480      	push	{r7}
 8010bb2:	b087      	sub	sp, #28
 8010bb4:	af00      	add	r7, sp, #0
 8010bb6:	6078      	str	r0, [r7, #4]
 8010bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	6a1b      	ldr	r3, [r3, #32]
 8010bbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	6a1b      	ldr	r3, [r3, #32]
 8010bc4:	f023 0201 	bic.w	r2, r3, #1
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	685b      	ldr	r3, [r3, #4]
 8010bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	699b      	ldr	r3, [r3, #24]
 8010bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010bd8:	68fa      	ldr	r2, [r7, #12]
 8010bda:	4b37      	ldr	r3, [pc, #220]	@ (8010cb8 <TIM_OC1_SetConfig+0x108>)
 8010bdc:	4013      	ands	r3, r2
 8010bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	f023 0303 	bic.w	r3, r3, #3
 8010be6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010be8:	683b      	ldr	r3, [r7, #0]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	68fa      	ldr	r2, [r7, #12]
 8010bee:	4313      	orrs	r3, r2
 8010bf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010bf2:	697b      	ldr	r3, [r7, #20]
 8010bf4:	f023 0302 	bic.w	r3, r3, #2
 8010bf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010bfa:	683b      	ldr	r3, [r7, #0]
 8010bfc:	689b      	ldr	r3, [r3, #8]
 8010bfe:	697a      	ldr	r2, [r7, #20]
 8010c00:	4313      	orrs	r3, r2
 8010c02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	4a2d      	ldr	r2, [pc, #180]	@ (8010cbc <TIM_OC1_SetConfig+0x10c>)
 8010c08:	4293      	cmp	r3, r2
 8010c0a:	d00f      	beq.n	8010c2c <TIM_OC1_SetConfig+0x7c>
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	4a2c      	ldr	r2, [pc, #176]	@ (8010cc0 <TIM_OC1_SetConfig+0x110>)
 8010c10:	4293      	cmp	r3, r2
 8010c12:	d00b      	beq.n	8010c2c <TIM_OC1_SetConfig+0x7c>
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	4a2b      	ldr	r2, [pc, #172]	@ (8010cc4 <TIM_OC1_SetConfig+0x114>)
 8010c18:	4293      	cmp	r3, r2
 8010c1a:	d007      	beq.n	8010c2c <TIM_OC1_SetConfig+0x7c>
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	4a2a      	ldr	r2, [pc, #168]	@ (8010cc8 <TIM_OC1_SetConfig+0x118>)
 8010c20:	4293      	cmp	r3, r2
 8010c22:	d003      	beq.n	8010c2c <TIM_OC1_SetConfig+0x7c>
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	4a29      	ldr	r2, [pc, #164]	@ (8010ccc <TIM_OC1_SetConfig+0x11c>)
 8010c28:	4293      	cmp	r3, r2
 8010c2a:	d10c      	bne.n	8010c46 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010c2c:	697b      	ldr	r3, [r7, #20]
 8010c2e:	f023 0308 	bic.w	r3, r3, #8
 8010c32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010c34:	683b      	ldr	r3, [r7, #0]
 8010c36:	68db      	ldr	r3, [r3, #12]
 8010c38:	697a      	ldr	r2, [r7, #20]
 8010c3a:	4313      	orrs	r3, r2
 8010c3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010c3e:	697b      	ldr	r3, [r7, #20]
 8010c40:	f023 0304 	bic.w	r3, r3, #4
 8010c44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	4a1c      	ldr	r2, [pc, #112]	@ (8010cbc <TIM_OC1_SetConfig+0x10c>)
 8010c4a:	4293      	cmp	r3, r2
 8010c4c:	d00f      	beq.n	8010c6e <TIM_OC1_SetConfig+0xbe>
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	4a1b      	ldr	r2, [pc, #108]	@ (8010cc0 <TIM_OC1_SetConfig+0x110>)
 8010c52:	4293      	cmp	r3, r2
 8010c54:	d00b      	beq.n	8010c6e <TIM_OC1_SetConfig+0xbe>
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	4a1a      	ldr	r2, [pc, #104]	@ (8010cc4 <TIM_OC1_SetConfig+0x114>)
 8010c5a:	4293      	cmp	r3, r2
 8010c5c:	d007      	beq.n	8010c6e <TIM_OC1_SetConfig+0xbe>
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	4a19      	ldr	r2, [pc, #100]	@ (8010cc8 <TIM_OC1_SetConfig+0x118>)
 8010c62:	4293      	cmp	r3, r2
 8010c64:	d003      	beq.n	8010c6e <TIM_OC1_SetConfig+0xbe>
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	4a18      	ldr	r2, [pc, #96]	@ (8010ccc <TIM_OC1_SetConfig+0x11c>)
 8010c6a:	4293      	cmp	r3, r2
 8010c6c:	d111      	bne.n	8010c92 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010c6e:	693b      	ldr	r3, [r7, #16]
 8010c70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010c74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010c76:	693b      	ldr	r3, [r7, #16]
 8010c78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010c7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010c7e:	683b      	ldr	r3, [r7, #0]
 8010c80:	695b      	ldr	r3, [r3, #20]
 8010c82:	693a      	ldr	r2, [r7, #16]
 8010c84:	4313      	orrs	r3, r2
 8010c86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010c88:	683b      	ldr	r3, [r7, #0]
 8010c8a:	699b      	ldr	r3, [r3, #24]
 8010c8c:	693a      	ldr	r2, [r7, #16]
 8010c8e:	4313      	orrs	r3, r2
 8010c90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	693a      	ldr	r2, [r7, #16]
 8010c96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	68fa      	ldr	r2, [r7, #12]
 8010c9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010c9e:	683b      	ldr	r3, [r7, #0]
 8010ca0:	685a      	ldr	r2, [r3, #4]
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	697a      	ldr	r2, [r7, #20]
 8010caa:	621a      	str	r2, [r3, #32]
}
 8010cac:	bf00      	nop
 8010cae:	371c      	adds	r7, #28
 8010cb0:	46bd      	mov	sp, r7
 8010cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb6:	4770      	bx	lr
 8010cb8:	fffeff8f 	.word	0xfffeff8f
 8010cbc:	40010000 	.word	0x40010000
 8010cc0:	40010400 	.word	0x40010400
 8010cc4:	40014000 	.word	0x40014000
 8010cc8:	40014400 	.word	0x40014400
 8010ccc:	40014800 	.word	0x40014800

08010cd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010cd0:	b480      	push	{r7}
 8010cd2:	b087      	sub	sp, #28
 8010cd4:	af00      	add	r7, sp, #0
 8010cd6:	6078      	str	r0, [r7, #4]
 8010cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	6a1b      	ldr	r3, [r3, #32]
 8010cde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	6a1b      	ldr	r3, [r3, #32]
 8010ce4:	f023 0210 	bic.w	r2, r3, #16
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	685b      	ldr	r3, [r3, #4]
 8010cf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	699b      	ldr	r3, [r3, #24]
 8010cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010cf8:	68fa      	ldr	r2, [r7, #12]
 8010cfa:	4b34      	ldr	r3, [pc, #208]	@ (8010dcc <TIM_OC2_SetConfig+0xfc>)
 8010cfc:	4013      	ands	r3, r2
 8010cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010d06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010d08:	683b      	ldr	r3, [r7, #0]
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	021b      	lsls	r3, r3, #8
 8010d0e:	68fa      	ldr	r2, [r7, #12]
 8010d10:	4313      	orrs	r3, r2
 8010d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010d14:	697b      	ldr	r3, [r7, #20]
 8010d16:	f023 0320 	bic.w	r3, r3, #32
 8010d1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010d1c:	683b      	ldr	r3, [r7, #0]
 8010d1e:	689b      	ldr	r3, [r3, #8]
 8010d20:	011b      	lsls	r3, r3, #4
 8010d22:	697a      	ldr	r2, [r7, #20]
 8010d24:	4313      	orrs	r3, r2
 8010d26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	4a29      	ldr	r2, [pc, #164]	@ (8010dd0 <TIM_OC2_SetConfig+0x100>)
 8010d2c:	4293      	cmp	r3, r2
 8010d2e:	d003      	beq.n	8010d38 <TIM_OC2_SetConfig+0x68>
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	4a28      	ldr	r2, [pc, #160]	@ (8010dd4 <TIM_OC2_SetConfig+0x104>)
 8010d34:	4293      	cmp	r3, r2
 8010d36:	d10d      	bne.n	8010d54 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010d38:	697b      	ldr	r3, [r7, #20]
 8010d3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010d3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010d40:	683b      	ldr	r3, [r7, #0]
 8010d42:	68db      	ldr	r3, [r3, #12]
 8010d44:	011b      	lsls	r3, r3, #4
 8010d46:	697a      	ldr	r2, [r7, #20]
 8010d48:	4313      	orrs	r3, r2
 8010d4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010d4c:	697b      	ldr	r3, [r7, #20]
 8010d4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010d52:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	4a1e      	ldr	r2, [pc, #120]	@ (8010dd0 <TIM_OC2_SetConfig+0x100>)
 8010d58:	4293      	cmp	r3, r2
 8010d5a:	d00f      	beq.n	8010d7c <TIM_OC2_SetConfig+0xac>
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	4a1d      	ldr	r2, [pc, #116]	@ (8010dd4 <TIM_OC2_SetConfig+0x104>)
 8010d60:	4293      	cmp	r3, r2
 8010d62:	d00b      	beq.n	8010d7c <TIM_OC2_SetConfig+0xac>
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	4a1c      	ldr	r2, [pc, #112]	@ (8010dd8 <TIM_OC2_SetConfig+0x108>)
 8010d68:	4293      	cmp	r3, r2
 8010d6a:	d007      	beq.n	8010d7c <TIM_OC2_SetConfig+0xac>
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	4a1b      	ldr	r2, [pc, #108]	@ (8010ddc <TIM_OC2_SetConfig+0x10c>)
 8010d70:	4293      	cmp	r3, r2
 8010d72:	d003      	beq.n	8010d7c <TIM_OC2_SetConfig+0xac>
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	4a1a      	ldr	r2, [pc, #104]	@ (8010de0 <TIM_OC2_SetConfig+0x110>)
 8010d78:	4293      	cmp	r3, r2
 8010d7a:	d113      	bne.n	8010da4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010d7c:	693b      	ldr	r3, [r7, #16]
 8010d7e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8010d82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010d84:	693b      	ldr	r3, [r7, #16]
 8010d86:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010d8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010d8c:	683b      	ldr	r3, [r7, #0]
 8010d8e:	695b      	ldr	r3, [r3, #20]
 8010d90:	009b      	lsls	r3, r3, #2
 8010d92:	693a      	ldr	r2, [r7, #16]
 8010d94:	4313      	orrs	r3, r2
 8010d96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010d98:	683b      	ldr	r3, [r7, #0]
 8010d9a:	699b      	ldr	r3, [r3, #24]
 8010d9c:	009b      	lsls	r3, r3, #2
 8010d9e:	693a      	ldr	r2, [r7, #16]
 8010da0:	4313      	orrs	r3, r2
 8010da2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	693a      	ldr	r2, [r7, #16]
 8010da8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	68fa      	ldr	r2, [r7, #12]
 8010dae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010db0:	683b      	ldr	r3, [r7, #0]
 8010db2:	685a      	ldr	r2, [r3, #4]
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	697a      	ldr	r2, [r7, #20]
 8010dbc:	621a      	str	r2, [r3, #32]
}
 8010dbe:	bf00      	nop
 8010dc0:	371c      	adds	r7, #28
 8010dc2:	46bd      	mov	sp, r7
 8010dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc8:	4770      	bx	lr
 8010dca:	bf00      	nop
 8010dcc:	feff8fff 	.word	0xfeff8fff
 8010dd0:	40010000 	.word	0x40010000
 8010dd4:	40010400 	.word	0x40010400
 8010dd8:	40014000 	.word	0x40014000
 8010ddc:	40014400 	.word	0x40014400
 8010de0:	40014800 	.word	0x40014800

08010de4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010de4:	b480      	push	{r7}
 8010de6:	b087      	sub	sp, #28
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	6078      	str	r0, [r7, #4]
 8010dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	6a1b      	ldr	r3, [r3, #32]
 8010df2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	6a1b      	ldr	r3, [r3, #32]
 8010df8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	685b      	ldr	r3, [r3, #4]
 8010e04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	69db      	ldr	r3, [r3, #28]
 8010e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010e0c:	68fa      	ldr	r2, [r7, #12]
 8010e0e:	4b33      	ldr	r3, [pc, #204]	@ (8010edc <TIM_OC3_SetConfig+0xf8>)
 8010e10:	4013      	ands	r3, r2
 8010e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	f023 0303 	bic.w	r3, r3, #3
 8010e1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010e1c:	683b      	ldr	r3, [r7, #0]
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	68fa      	ldr	r2, [r7, #12]
 8010e22:	4313      	orrs	r3, r2
 8010e24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010e26:	697b      	ldr	r3, [r7, #20]
 8010e28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010e2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010e2e:	683b      	ldr	r3, [r7, #0]
 8010e30:	689b      	ldr	r3, [r3, #8]
 8010e32:	021b      	lsls	r3, r3, #8
 8010e34:	697a      	ldr	r2, [r7, #20]
 8010e36:	4313      	orrs	r3, r2
 8010e38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	4a28      	ldr	r2, [pc, #160]	@ (8010ee0 <TIM_OC3_SetConfig+0xfc>)
 8010e3e:	4293      	cmp	r3, r2
 8010e40:	d003      	beq.n	8010e4a <TIM_OC3_SetConfig+0x66>
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	4a27      	ldr	r2, [pc, #156]	@ (8010ee4 <TIM_OC3_SetConfig+0x100>)
 8010e46:	4293      	cmp	r3, r2
 8010e48:	d10d      	bne.n	8010e66 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010e4a:	697b      	ldr	r3, [r7, #20]
 8010e4c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010e50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010e52:	683b      	ldr	r3, [r7, #0]
 8010e54:	68db      	ldr	r3, [r3, #12]
 8010e56:	021b      	lsls	r3, r3, #8
 8010e58:	697a      	ldr	r2, [r7, #20]
 8010e5a:	4313      	orrs	r3, r2
 8010e5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010e5e:	697b      	ldr	r3, [r7, #20]
 8010e60:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8010e64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	4a1d      	ldr	r2, [pc, #116]	@ (8010ee0 <TIM_OC3_SetConfig+0xfc>)
 8010e6a:	4293      	cmp	r3, r2
 8010e6c:	d00f      	beq.n	8010e8e <TIM_OC3_SetConfig+0xaa>
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	4a1c      	ldr	r2, [pc, #112]	@ (8010ee4 <TIM_OC3_SetConfig+0x100>)
 8010e72:	4293      	cmp	r3, r2
 8010e74:	d00b      	beq.n	8010e8e <TIM_OC3_SetConfig+0xaa>
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	4a1b      	ldr	r2, [pc, #108]	@ (8010ee8 <TIM_OC3_SetConfig+0x104>)
 8010e7a:	4293      	cmp	r3, r2
 8010e7c:	d007      	beq.n	8010e8e <TIM_OC3_SetConfig+0xaa>
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	4a1a      	ldr	r2, [pc, #104]	@ (8010eec <TIM_OC3_SetConfig+0x108>)
 8010e82:	4293      	cmp	r3, r2
 8010e84:	d003      	beq.n	8010e8e <TIM_OC3_SetConfig+0xaa>
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	4a19      	ldr	r2, [pc, #100]	@ (8010ef0 <TIM_OC3_SetConfig+0x10c>)
 8010e8a:	4293      	cmp	r3, r2
 8010e8c:	d113      	bne.n	8010eb6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010e8e:	693b      	ldr	r3, [r7, #16]
 8010e90:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010e94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010e96:	693b      	ldr	r3, [r7, #16]
 8010e98:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8010e9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010e9e:	683b      	ldr	r3, [r7, #0]
 8010ea0:	695b      	ldr	r3, [r3, #20]
 8010ea2:	011b      	lsls	r3, r3, #4
 8010ea4:	693a      	ldr	r2, [r7, #16]
 8010ea6:	4313      	orrs	r3, r2
 8010ea8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010eaa:	683b      	ldr	r3, [r7, #0]
 8010eac:	699b      	ldr	r3, [r3, #24]
 8010eae:	011b      	lsls	r3, r3, #4
 8010eb0:	693a      	ldr	r2, [r7, #16]
 8010eb2:	4313      	orrs	r3, r2
 8010eb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	693a      	ldr	r2, [r7, #16]
 8010eba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	68fa      	ldr	r2, [r7, #12]
 8010ec0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010ec2:	683b      	ldr	r3, [r7, #0]
 8010ec4:	685a      	ldr	r2, [r3, #4]
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	697a      	ldr	r2, [r7, #20]
 8010ece:	621a      	str	r2, [r3, #32]
}
 8010ed0:	bf00      	nop
 8010ed2:	371c      	adds	r7, #28
 8010ed4:	46bd      	mov	sp, r7
 8010ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eda:	4770      	bx	lr
 8010edc:	fffeff8f 	.word	0xfffeff8f
 8010ee0:	40010000 	.word	0x40010000
 8010ee4:	40010400 	.word	0x40010400
 8010ee8:	40014000 	.word	0x40014000
 8010eec:	40014400 	.word	0x40014400
 8010ef0:	40014800 	.word	0x40014800

08010ef4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010ef4:	b480      	push	{r7}
 8010ef6:	b087      	sub	sp, #28
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	6078      	str	r0, [r7, #4]
 8010efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	6a1b      	ldr	r3, [r3, #32]
 8010f02:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	6a1b      	ldr	r3, [r3, #32]
 8010f08:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	685b      	ldr	r3, [r3, #4]
 8010f14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	69db      	ldr	r3, [r3, #28]
 8010f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010f1c:	68fa      	ldr	r2, [r7, #12]
 8010f1e:	4b24      	ldr	r3, [pc, #144]	@ (8010fb0 <TIM_OC4_SetConfig+0xbc>)
 8010f20:	4013      	ands	r3, r2
 8010f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010f2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010f2c:	683b      	ldr	r3, [r7, #0]
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	021b      	lsls	r3, r3, #8
 8010f32:	68fa      	ldr	r2, [r7, #12]
 8010f34:	4313      	orrs	r3, r2
 8010f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010f38:	693b      	ldr	r3, [r7, #16]
 8010f3a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8010f3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010f40:	683b      	ldr	r3, [r7, #0]
 8010f42:	689b      	ldr	r3, [r3, #8]
 8010f44:	031b      	lsls	r3, r3, #12
 8010f46:	693a      	ldr	r2, [r7, #16]
 8010f48:	4313      	orrs	r3, r2
 8010f4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	4a19      	ldr	r2, [pc, #100]	@ (8010fb4 <TIM_OC4_SetConfig+0xc0>)
 8010f50:	4293      	cmp	r3, r2
 8010f52:	d00f      	beq.n	8010f74 <TIM_OC4_SetConfig+0x80>
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	4a18      	ldr	r2, [pc, #96]	@ (8010fb8 <TIM_OC4_SetConfig+0xc4>)
 8010f58:	4293      	cmp	r3, r2
 8010f5a:	d00b      	beq.n	8010f74 <TIM_OC4_SetConfig+0x80>
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	4a17      	ldr	r2, [pc, #92]	@ (8010fbc <TIM_OC4_SetConfig+0xc8>)
 8010f60:	4293      	cmp	r3, r2
 8010f62:	d007      	beq.n	8010f74 <TIM_OC4_SetConfig+0x80>
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	4a16      	ldr	r2, [pc, #88]	@ (8010fc0 <TIM_OC4_SetConfig+0xcc>)
 8010f68:	4293      	cmp	r3, r2
 8010f6a:	d003      	beq.n	8010f74 <TIM_OC4_SetConfig+0x80>
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	4a15      	ldr	r2, [pc, #84]	@ (8010fc4 <TIM_OC4_SetConfig+0xd0>)
 8010f70:	4293      	cmp	r3, r2
 8010f72:	d109      	bne.n	8010f88 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010f74:	697b      	ldr	r3, [r7, #20]
 8010f76:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010f7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010f7c:	683b      	ldr	r3, [r7, #0]
 8010f7e:	695b      	ldr	r3, [r3, #20]
 8010f80:	019b      	lsls	r3, r3, #6
 8010f82:	697a      	ldr	r2, [r7, #20]
 8010f84:	4313      	orrs	r3, r2
 8010f86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	697a      	ldr	r2, [r7, #20]
 8010f8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	68fa      	ldr	r2, [r7, #12]
 8010f92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010f94:	683b      	ldr	r3, [r7, #0]
 8010f96:	685a      	ldr	r2, [r3, #4]
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	693a      	ldr	r2, [r7, #16]
 8010fa0:	621a      	str	r2, [r3, #32]
}
 8010fa2:	bf00      	nop
 8010fa4:	371c      	adds	r7, #28
 8010fa6:	46bd      	mov	sp, r7
 8010fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fac:	4770      	bx	lr
 8010fae:	bf00      	nop
 8010fb0:	feff8fff 	.word	0xfeff8fff
 8010fb4:	40010000 	.word	0x40010000
 8010fb8:	40010400 	.word	0x40010400
 8010fbc:	40014000 	.word	0x40014000
 8010fc0:	40014400 	.word	0x40014400
 8010fc4:	40014800 	.word	0x40014800

08010fc8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010fc8:	b480      	push	{r7}
 8010fca:	b087      	sub	sp, #28
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	6078      	str	r0, [r7, #4]
 8010fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	6a1b      	ldr	r3, [r3, #32]
 8010fd6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	6a1b      	ldr	r3, [r3, #32]
 8010fdc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	685b      	ldr	r3, [r3, #4]
 8010fe8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010ff0:	68fa      	ldr	r2, [r7, #12]
 8010ff2:	4b21      	ldr	r3, [pc, #132]	@ (8011078 <TIM_OC5_SetConfig+0xb0>)
 8010ff4:	4013      	ands	r3, r2
 8010ff6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010ff8:	683b      	ldr	r3, [r7, #0]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	68fa      	ldr	r2, [r7, #12]
 8010ffe:	4313      	orrs	r3, r2
 8011000:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8011002:	693b      	ldr	r3, [r7, #16]
 8011004:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8011008:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801100a:	683b      	ldr	r3, [r7, #0]
 801100c:	689b      	ldr	r3, [r3, #8]
 801100e:	041b      	lsls	r3, r3, #16
 8011010:	693a      	ldr	r2, [r7, #16]
 8011012:	4313      	orrs	r3, r2
 8011014:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	4a18      	ldr	r2, [pc, #96]	@ (801107c <TIM_OC5_SetConfig+0xb4>)
 801101a:	4293      	cmp	r3, r2
 801101c:	d00f      	beq.n	801103e <TIM_OC5_SetConfig+0x76>
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	4a17      	ldr	r2, [pc, #92]	@ (8011080 <TIM_OC5_SetConfig+0xb8>)
 8011022:	4293      	cmp	r3, r2
 8011024:	d00b      	beq.n	801103e <TIM_OC5_SetConfig+0x76>
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	4a16      	ldr	r2, [pc, #88]	@ (8011084 <TIM_OC5_SetConfig+0xbc>)
 801102a:	4293      	cmp	r3, r2
 801102c:	d007      	beq.n	801103e <TIM_OC5_SetConfig+0x76>
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	4a15      	ldr	r2, [pc, #84]	@ (8011088 <TIM_OC5_SetConfig+0xc0>)
 8011032:	4293      	cmp	r3, r2
 8011034:	d003      	beq.n	801103e <TIM_OC5_SetConfig+0x76>
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	4a14      	ldr	r2, [pc, #80]	@ (801108c <TIM_OC5_SetConfig+0xc4>)
 801103a:	4293      	cmp	r3, r2
 801103c:	d109      	bne.n	8011052 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801103e:	697b      	ldr	r3, [r7, #20]
 8011040:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8011044:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8011046:	683b      	ldr	r3, [r7, #0]
 8011048:	695b      	ldr	r3, [r3, #20]
 801104a:	021b      	lsls	r3, r3, #8
 801104c:	697a      	ldr	r2, [r7, #20]
 801104e:	4313      	orrs	r3, r2
 8011050:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	697a      	ldr	r2, [r7, #20]
 8011056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	68fa      	ldr	r2, [r7, #12]
 801105c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801105e:	683b      	ldr	r3, [r7, #0]
 8011060:	685a      	ldr	r2, [r3, #4]
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	693a      	ldr	r2, [r7, #16]
 801106a:	621a      	str	r2, [r3, #32]
}
 801106c:	bf00      	nop
 801106e:	371c      	adds	r7, #28
 8011070:	46bd      	mov	sp, r7
 8011072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011076:	4770      	bx	lr
 8011078:	fffeff8f 	.word	0xfffeff8f
 801107c:	40010000 	.word	0x40010000
 8011080:	40010400 	.word	0x40010400
 8011084:	40014000 	.word	0x40014000
 8011088:	40014400 	.word	0x40014400
 801108c:	40014800 	.word	0x40014800

08011090 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011090:	b480      	push	{r7}
 8011092:	b087      	sub	sp, #28
 8011094:	af00      	add	r7, sp, #0
 8011096:	6078      	str	r0, [r7, #4]
 8011098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	6a1b      	ldr	r3, [r3, #32]
 801109e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	6a1b      	ldr	r3, [r3, #32]
 80110a4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	685b      	ldr	r3, [r3, #4]
 80110b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80110b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80110b8:	68fa      	ldr	r2, [r7, #12]
 80110ba:	4b22      	ldr	r3, [pc, #136]	@ (8011144 <TIM_OC6_SetConfig+0xb4>)
 80110bc:	4013      	ands	r3, r2
 80110be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80110c0:	683b      	ldr	r3, [r7, #0]
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	021b      	lsls	r3, r3, #8
 80110c6:	68fa      	ldr	r2, [r7, #12]
 80110c8:	4313      	orrs	r3, r2
 80110ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80110cc:	693b      	ldr	r3, [r7, #16]
 80110ce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80110d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80110d4:	683b      	ldr	r3, [r7, #0]
 80110d6:	689b      	ldr	r3, [r3, #8]
 80110d8:	051b      	lsls	r3, r3, #20
 80110da:	693a      	ldr	r2, [r7, #16]
 80110dc:	4313      	orrs	r3, r2
 80110de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	4a19      	ldr	r2, [pc, #100]	@ (8011148 <TIM_OC6_SetConfig+0xb8>)
 80110e4:	4293      	cmp	r3, r2
 80110e6:	d00f      	beq.n	8011108 <TIM_OC6_SetConfig+0x78>
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	4a18      	ldr	r2, [pc, #96]	@ (801114c <TIM_OC6_SetConfig+0xbc>)
 80110ec:	4293      	cmp	r3, r2
 80110ee:	d00b      	beq.n	8011108 <TIM_OC6_SetConfig+0x78>
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	4a17      	ldr	r2, [pc, #92]	@ (8011150 <TIM_OC6_SetConfig+0xc0>)
 80110f4:	4293      	cmp	r3, r2
 80110f6:	d007      	beq.n	8011108 <TIM_OC6_SetConfig+0x78>
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	4a16      	ldr	r2, [pc, #88]	@ (8011154 <TIM_OC6_SetConfig+0xc4>)
 80110fc:	4293      	cmp	r3, r2
 80110fe:	d003      	beq.n	8011108 <TIM_OC6_SetConfig+0x78>
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	4a15      	ldr	r2, [pc, #84]	@ (8011158 <TIM_OC6_SetConfig+0xc8>)
 8011104:	4293      	cmp	r3, r2
 8011106:	d109      	bne.n	801111c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8011108:	697b      	ldr	r3, [r7, #20]
 801110a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801110e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8011110:	683b      	ldr	r3, [r7, #0]
 8011112:	695b      	ldr	r3, [r3, #20]
 8011114:	029b      	lsls	r3, r3, #10
 8011116:	697a      	ldr	r2, [r7, #20]
 8011118:	4313      	orrs	r3, r2
 801111a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	697a      	ldr	r2, [r7, #20]
 8011120:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	68fa      	ldr	r2, [r7, #12]
 8011126:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8011128:	683b      	ldr	r3, [r7, #0]
 801112a:	685a      	ldr	r2, [r3, #4]
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	693a      	ldr	r2, [r7, #16]
 8011134:	621a      	str	r2, [r3, #32]
}
 8011136:	bf00      	nop
 8011138:	371c      	adds	r7, #28
 801113a:	46bd      	mov	sp, r7
 801113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011140:	4770      	bx	lr
 8011142:	bf00      	nop
 8011144:	feff8fff 	.word	0xfeff8fff
 8011148:	40010000 	.word	0x40010000
 801114c:	40010400 	.word	0x40010400
 8011150:	40014000 	.word	0x40014000
 8011154:	40014400 	.word	0x40014400
 8011158:	40014800 	.word	0x40014800

0801115c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801115c:	b480      	push	{r7}
 801115e:	b087      	sub	sp, #28
 8011160:	af00      	add	r7, sp, #0
 8011162:	60f8      	str	r0, [r7, #12]
 8011164:	60b9      	str	r1, [r7, #8]
 8011166:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	6a1b      	ldr	r3, [r3, #32]
 801116c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	6a1b      	ldr	r3, [r3, #32]
 8011172:	f023 0201 	bic.w	r2, r3, #1
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	699b      	ldr	r3, [r3, #24]
 801117e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011180:	693b      	ldr	r3, [r7, #16]
 8011182:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8011186:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	011b      	lsls	r3, r3, #4
 801118c:	693a      	ldr	r2, [r7, #16]
 801118e:	4313      	orrs	r3, r2
 8011190:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011192:	697b      	ldr	r3, [r7, #20]
 8011194:	f023 030a 	bic.w	r3, r3, #10
 8011198:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801119a:	697a      	ldr	r2, [r7, #20]
 801119c:	68bb      	ldr	r3, [r7, #8]
 801119e:	4313      	orrs	r3, r2
 80111a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	693a      	ldr	r2, [r7, #16]
 80111a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	697a      	ldr	r2, [r7, #20]
 80111ac:	621a      	str	r2, [r3, #32]
}
 80111ae:	bf00      	nop
 80111b0:	371c      	adds	r7, #28
 80111b2:	46bd      	mov	sp, r7
 80111b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b8:	4770      	bx	lr

080111ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80111ba:	b480      	push	{r7}
 80111bc:	b087      	sub	sp, #28
 80111be:	af00      	add	r7, sp, #0
 80111c0:	60f8      	str	r0, [r7, #12]
 80111c2:	60b9      	str	r1, [r7, #8]
 80111c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	6a1b      	ldr	r3, [r3, #32]
 80111ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	6a1b      	ldr	r3, [r3, #32]
 80111d0:	f023 0210 	bic.w	r2, r3, #16
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	699b      	ldr	r3, [r3, #24]
 80111dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80111de:	693b      	ldr	r3, [r7, #16]
 80111e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80111e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	031b      	lsls	r3, r3, #12
 80111ea:	693a      	ldr	r2, [r7, #16]
 80111ec:	4313      	orrs	r3, r2
 80111ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80111f0:	697b      	ldr	r3, [r7, #20]
 80111f2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80111f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80111f8:	68bb      	ldr	r3, [r7, #8]
 80111fa:	011b      	lsls	r3, r3, #4
 80111fc:	697a      	ldr	r2, [r7, #20]
 80111fe:	4313      	orrs	r3, r2
 8011200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	693a      	ldr	r2, [r7, #16]
 8011206:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	697a      	ldr	r2, [r7, #20]
 801120c:	621a      	str	r2, [r3, #32]
}
 801120e:	bf00      	nop
 8011210:	371c      	adds	r7, #28
 8011212:	46bd      	mov	sp, r7
 8011214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011218:	4770      	bx	lr
	...

0801121c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801121c:	b480      	push	{r7}
 801121e:	b085      	sub	sp, #20
 8011220:	af00      	add	r7, sp, #0
 8011222:	6078      	str	r0, [r7, #4]
 8011224:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	689b      	ldr	r3, [r3, #8]
 801122a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801122c:	68fa      	ldr	r2, [r7, #12]
 801122e:	4b09      	ldr	r3, [pc, #36]	@ (8011254 <TIM_ITRx_SetConfig+0x38>)
 8011230:	4013      	ands	r3, r2
 8011232:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8011234:	683a      	ldr	r2, [r7, #0]
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	4313      	orrs	r3, r2
 801123a:	f043 0307 	orr.w	r3, r3, #7
 801123e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	68fa      	ldr	r2, [r7, #12]
 8011244:	609a      	str	r2, [r3, #8]
}
 8011246:	bf00      	nop
 8011248:	3714      	adds	r7, #20
 801124a:	46bd      	mov	sp, r7
 801124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011250:	4770      	bx	lr
 8011252:	bf00      	nop
 8011254:	ffcfff8f 	.word	0xffcfff8f

08011258 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011258:	b480      	push	{r7}
 801125a:	b087      	sub	sp, #28
 801125c:	af00      	add	r7, sp, #0
 801125e:	60f8      	str	r0, [r7, #12]
 8011260:	60b9      	str	r1, [r7, #8]
 8011262:	607a      	str	r2, [r7, #4]
 8011264:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	689b      	ldr	r3, [r3, #8]
 801126a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801126c:	697b      	ldr	r3, [r7, #20]
 801126e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8011272:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011274:	683b      	ldr	r3, [r7, #0]
 8011276:	021a      	lsls	r2, r3, #8
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	431a      	orrs	r2, r3
 801127c:	68bb      	ldr	r3, [r7, #8]
 801127e:	4313      	orrs	r3, r2
 8011280:	697a      	ldr	r2, [r7, #20]
 8011282:	4313      	orrs	r3, r2
 8011284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	697a      	ldr	r2, [r7, #20]
 801128a:	609a      	str	r2, [r3, #8]
}
 801128c:	bf00      	nop
 801128e:	371c      	adds	r7, #28
 8011290:	46bd      	mov	sp, r7
 8011292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011296:	4770      	bx	lr

08011298 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011298:	b480      	push	{r7}
 801129a:	b085      	sub	sp, #20
 801129c:	af00      	add	r7, sp, #0
 801129e:	6078      	str	r0, [r7, #4]
 80112a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80112a8:	2b01      	cmp	r3, #1
 80112aa:	d101      	bne.n	80112b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80112ac:	2302      	movs	r3, #2
 80112ae:	e077      	b.n	80113a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	2201      	movs	r2, #1
 80112b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	2202      	movs	r2, #2
 80112bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	685b      	ldr	r3, [r3, #4]
 80112c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	689b      	ldr	r3, [r3, #8]
 80112ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	4a35      	ldr	r2, [pc, #212]	@ (80113ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80112d6:	4293      	cmp	r3, r2
 80112d8:	d004      	beq.n	80112e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	4a34      	ldr	r2, [pc, #208]	@ (80113b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80112e0:	4293      	cmp	r3, r2
 80112e2:	d108      	bne.n	80112f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80112ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80112ec:	683b      	ldr	r3, [r7, #0]
 80112ee:	685b      	ldr	r3, [r3, #4]
 80112f0:	68fa      	ldr	r2, [r7, #12]
 80112f2:	4313      	orrs	r3, r2
 80112f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80112fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80112fe:	683b      	ldr	r3, [r7, #0]
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	68fa      	ldr	r2, [r7, #12]
 8011304:	4313      	orrs	r3, r2
 8011306:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	68fa      	ldr	r2, [r7, #12]
 801130e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	4a25      	ldr	r2, [pc, #148]	@ (80113ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8011316:	4293      	cmp	r3, r2
 8011318:	d02c      	beq.n	8011374 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011322:	d027      	beq.n	8011374 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	4a22      	ldr	r2, [pc, #136]	@ (80113b4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 801132a:	4293      	cmp	r3, r2
 801132c:	d022      	beq.n	8011374 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	4a21      	ldr	r2, [pc, #132]	@ (80113b8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8011334:	4293      	cmp	r3, r2
 8011336:	d01d      	beq.n	8011374 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	4a1f      	ldr	r2, [pc, #124]	@ (80113bc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 801133e:	4293      	cmp	r3, r2
 8011340:	d018      	beq.n	8011374 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	4a1a      	ldr	r2, [pc, #104]	@ (80113b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8011348:	4293      	cmp	r3, r2
 801134a:	d013      	beq.n	8011374 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	4a1b      	ldr	r2, [pc, #108]	@ (80113c0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8011352:	4293      	cmp	r3, r2
 8011354:	d00e      	beq.n	8011374 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	4a1a      	ldr	r2, [pc, #104]	@ (80113c4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 801135c:	4293      	cmp	r3, r2
 801135e:	d009      	beq.n	8011374 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	4a18      	ldr	r2, [pc, #96]	@ (80113c8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8011366:	4293      	cmp	r3, r2
 8011368:	d004      	beq.n	8011374 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	4a17      	ldr	r2, [pc, #92]	@ (80113cc <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8011370:	4293      	cmp	r3, r2
 8011372:	d10c      	bne.n	801138e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011374:	68bb      	ldr	r3, [r7, #8]
 8011376:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801137a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801137c:	683b      	ldr	r3, [r7, #0]
 801137e:	689b      	ldr	r3, [r3, #8]
 8011380:	68ba      	ldr	r2, [r7, #8]
 8011382:	4313      	orrs	r3, r2
 8011384:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	68ba      	ldr	r2, [r7, #8]
 801138c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	2201      	movs	r2, #1
 8011392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	2200      	movs	r2, #0
 801139a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801139e:	2300      	movs	r3, #0
}
 80113a0:	4618      	mov	r0, r3
 80113a2:	3714      	adds	r7, #20
 80113a4:	46bd      	mov	sp, r7
 80113a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113aa:	4770      	bx	lr
 80113ac:	40010000 	.word	0x40010000
 80113b0:	40010400 	.word	0x40010400
 80113b4:	40000400 	.word	0x40000400
 80113b8:	40000800 	.word	0x40000800
 80113bc:	40000c00 	.word	0x40000c00
 80113c0:	40001800 	.word	0x40001800
 80113c4:	40014000 	.word	0x40014000
 80113c8:	4000e000 	.word	0x4000e000
 80113cc:	4000e400 	.word	0x4000e400

080113d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80113d0:	b480      	push	{r7}
 80113d2:	b085      	sub	sp, #20
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	6078      	str	r0, [r7, #4]
 80113d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80113da:	2300      	movs	r3, #0
 80113dc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80113e4:	2b01      	cmp	r3, #1
 80113e6:	d101      	bne.n	80113ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80113e8:	2302      	movs	r3, #2
 80113ea:	e073      	b.n	80114d4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	2201      	movs	r2, #1
 80113f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80113fa:	683b      	ldr	r3, [r7, #0]
 80113fc:	68db      	ldr	r3, [r3, #12]
 80113fe:	4313      	orrs	r3, r2
 8011400:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8011408:	683b      	ldr	r3, [r7, #0]
 801140a:	689b      	ldr	r3, [r3, #8]
 801140c:	4313      	orrs	r3, r2
 801140e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8011416:	683b      	ldr	r3, [r7, #0]
 8011418:	685b      	ldr	r3, [r3, #4]
 801141a:	4313      	orrs	r3, r2
 801141c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8011424:	683b      	ldr	r3, [r7, #0]
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	4313      	orrs	r3, r2
 801142a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8011432:	683b      	ldr	r3, [r7, #0]
 8011434:	691b      	ldr	r3, [r3, #16]
 8011436:	4313      	orrs	r3, r2
 8011438:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8011440:	683b      	ldr	r3, [r7, #0]
 8011442:	695b      	ldr	r3, [r3, #20]
 8011444:	4313      	orrs	r3, r2
 8011446:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 801144e:	683b      	ldr	r3, [r7, #0]
 8011450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011452:	4313      	orrs	r3, r2
 8011454:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 801145c:	683b      	ldr	r3, [r7, #0]
 801145e:	699b      	ldr	r3, [r3, #24]
 8011460:	041b      	lsls	r3, r3, #16
 8011462:	4313      	orrs	r3, r2
 8011464:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 801146c:	683b      	ldr	r3, [r7, #0]
 801146e:	69db      	ldr	r3, [r3, #28]
 8011470:	4313      	orrs	r3, r2
 8011472:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	4a19      	ldr	r2, [pc, #100]	@ (80114e0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 801147a:	4293      	cmp	r3, r2
 801147c:	d004      	beq.n	8011488 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	4a18      	ldr	r2, [pc, #96]	@ (80114e4 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8011484:	4293      	cmp	r3, r2
 8011486:	d11c      	bne.n	80114c2 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 801148e:	683b      	ldr	r3, [r7, #0]
 8011490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011492:	051b      	lsls	r3, r3, #20
 8011494:	4313      	orrs	r3, r2
 8011496:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 801149e:	683b      	ldr	r3, [r7, #0]
 80114a0:	6a1b      	ldr	r3, [r3, #32]
 80114a2:	4313      	orrs	r3, r2
 80114a4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80114ac:	683b      	ldr	r3, [r7, #0]
 80114ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80114b0:	4313      	orrs	r3, r2
 80114b2:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80114ba:	683b      	ldr	r3, [r7, #0]
 80114bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80114be:	4313      	orrs	r3, r2
 80114c0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	68fa      	ldr	r2, [r7, #12]
 80114c8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	2200      	movs	r2, #0
 80114ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80114d2:	2300      	movs	r3, #0
}
 80114d4:	4618      	mov	r0, r3
 80114d6:	3714      	adds	r7, #20
 80114d8:	46bd      	mov	sp, r7
 80114da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114de:	4770      	bx	lr
 80114e0:	40010000 	.word	0x40010000
 80114e4:	40010400 	.word	0x40010400

080114e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80114e8:	b480      	push	{r7}
 80114ea:	b083      	sub	sp, #12
 80114ec:	af00      	add	r7, sp, #0
 80114ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80114f0:	bf00      	nop
 80114f2:	370c      	adds	r7, #12
 80114f4:	46bd      	mov	sp, r7
 80114f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114fa:	4770      	bx	lr

080114fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80114fc:	b480      	push	{r7}
 80114fe:	b083      	sub	sp, #12
 8011500:	af00      	add	r7, sp, #0
 8011502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011504:	bf00      	nop
 8011506:	370c      	adds	r7, #12
 8011508:	46bd      	mov	sp, r7
 801150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801150e:	4770      	bx	lr

08011510 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8011510:	b480      	push	{r7}
 8011512:	b083      	sub	sp, #12
 8011514:	af00      	add	r7, sp, #0
 8011516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8011518:	bf00      	nop
 801151a:	370c      	adds	r7, #12
 801151c:	46bd      	mov	sp, r7
 801151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011522:	4770      	bx	lr

08011524 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011524:	b580      	push	{r7, lr}
 8011526:	b082      	sub	sp, #8
 8011528:	af00      	add	r7, sp, #0
 801152a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	2b00      	cmp	r3, #0
 8011530:	d101      	bne.n	8011536 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011532:	2301      	movs	r3, #1
 8011534:	e042      	b.n	80115bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801153c:	2b00      	cmp	r3, #0
 801153e:	d106      	bne.n	801154e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	2200      	movs	r2, #0
 8011544:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011548:	6878      	ldr	r0, [r7, #4]
 801154a:	f7f2 f82b 	bl	80035a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	2224      	movs	r2, #36	@ 0x24
 8011552:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	681a      	ldr	r2, [r3, #0]
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	f022 0201 	bic.w	r2, r2, #1
 8011564:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801156a:	2b00      	cmp	r3, #0
 801156c:	d002      	beq.n	8011574 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 801156e:	6878      	ldr	r0, [r7, #4]
 8011570:	f000 ff22 	bl	80123b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011574:	6878      	ldr	r0, [r7, #4]
 8011576:	f000 f8b3 	bl	80116e0 <UART_SetConfig>
 801157a:	4603      	mov	r3, r0
 801157c:	2b01      	cmp	r3, #1
 801157e:	d101      	bne.n	8011584 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8011580:	2301      	movs	r3, #1
 8011582:	e01b      	b.n	80115bc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	685a      	ldr	r2, [r3, #4]
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8011592:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	689a      	ldr	r2, [r3, #8]
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80115a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	681a      	ldr	r2, [r3, #0]
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	f042 0201 	orr.w	r2, r2, #1
 80115b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80115b4:	6878      	ldr	r0, [r7, #4]
 80115b6:	f000 ffa1 	bl	80124fc <UART_CheckIdleState>
 80115ba:	4603      	mov	r3, r0
}
 80115bc:	4618      	mov	r0, r3
 80115be:	3708      	adds	r7, #8
 80115c0:	46bd      	mov	sp, r7
 80115c2:	bd80      	pop	{r7, pc}

080115c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80115c4:	b580      	push	{r7, lr}
 80115c6:	b08a      	sub	sp, #40	@ 0x28
 80115c8:	af02      	add	r7, sp, #8
 80115ca:	60f8      	str	r0, [r7, #12]
 80115cc:	60b9      	str	r1, [r7, #8]
 80115ce:	603b      	str	r3, [r7, #0]
 80115d0:	4613      	mov	r3, r2
 80115d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80115da:	2b20      	cmp	r3, #32
 80115dc:	d17b      	bne.n	80116d6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80115de:	68bb      	ldr	r3, [r7, #8]
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d002      	beq.n	80115ea <HAL_UART_Transmit+0x26>
 80115e4:	88fb      	ldrh	r3, [r7, #6]
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d101      	bne.n	80115ee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80115ea:	2301      	movs	r3, #1
 80115ec:	e074      	b.n	80116d8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	2200      	movs	r2, #0
 80115f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	2221      	movs	r2, #33	@ 0x21
 80115fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80115fe:	f7f2 fa61 	bl	8003ac4 <HAL_GetTick>
 8011602:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	88fa      	ldrh	r2, [r7, #6]
 8011608:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	88fa      	ldrh	r2, [r7, #6]
 8011610:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	689b      	ldr	r3, [r3, #8]
 8011618:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801161c:	d108      	bne.n	8011630 <HAL_UART_Transmit+0x6c>
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	691b      	ldr	r3, [r3, #16]
 8011622:	2b00      	cmp	r3, #0
 8011624:	d104      	bne.n	8011630 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8011626:	2300      	movs	r3, #0
 8011628:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801162a:	68bb      	ldr	r3, [r7, #8]
 801162c:	61bb      	str	r3, [r7, #24]
 801162e:	e003      	b.n	8011638 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8011630:	68bb      	ldr	r3, [r7, #8]
 8011632:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011634:	2300      	movs	r3, #0
 8011636:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8011638:	e030      	b.n	801169c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801163a:	683b      	ldr	r3, [r7, #0]
 801163c:	9300      	str	r3, [sp, #0]
 801163e:	697b      	ldr	r3, [r7, #20]
 8011640:	2200      	movs	r2, #0
 8011642:	2180      	movs	r1, #128	@ 0x80
 8011644:	68f8      	ldr	r0, [r7, #12]
 8011646:	f001 f803 	bl	8012650 <UART_WaitOnFlagUntilTimeout>
 801164a:	4603      	mov	r3, r0
 801164c:	2b00      	cmp	r3, #0
 801164e:	d005      	beq.n	801165c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	2220      	movs	r2, #32
 8011654:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8011658:	2303      	movs	r3, #3
 801165a:	e03d      	b.n	80116d8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 801165c:	69fb      	ldr	r3, [r7, #28]
 801165e:	2b00      	cmp	r3, #0
 8011660:	d10b      	bne.n	801167a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8011662:	69bb      	ldr	r3, [r7, #24]
 8011664:	881b      	ldrh	r3, [r3, #0]
 8011666:	461a      	mov	r2, r3
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011670:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8011672:	69bb      	ldr	r3, [r7, #24]
 8011674:	3302      	adds	r3, #2
 8011676:	61bb      	str	r3, [r7, #24]
 8011678:	e007      	b.n	801168a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801167a:	69fb      	ldr	r3, [r7, #28]
 801167c:	781a      	ldrb	r2, [r3, #0]
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8011684:	69fb      	ldr	r3, [r7, #28]
 8011686:	3301      	adds	r3, #1
 8011688:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8011690:	b29b      	uxth	r3, r3
 8011692:	3b01      	subs	r3, #1
 8011694:	b29a      	uxth	r2, r3
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80116a2:	b29b      	uxth	r3, r3
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d1c8      	bne.n	801163a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80116a8:	683b      	ldr	r3, [r7, #0]
 80116aa:	9300      	str	r3, [sp, #0]
 80116ac:	697b      	ldr	r3, [r7, #20]
 80116ae:	2200      	movs	r2, #0
 80116b0:	2140      	movs	r1, #64	@ 0x40
 80116b2:	68f8      	ldr	r0, [r7, #12]
 80116b4:	f000 ffcc 	bl	8012650 <UART_WaitOnFlagUntilTimeout>
 80116b8:	4603      	mov	r3, r0
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d005      	beq.n	80116ca <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	2220      	movs	r2, #32
 80116c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80116c6:	2303      	movs	r3, #3
 80116c8:	e006      	b.n	80116d8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	2220      	movs	r2, #32
 80116ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80116d2:	2300      	movs	r3, #0
 80116d4:	e000      	b.n	80116d8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80116d6:	2302      	movs	r3, #2
  }
}
 80116d8:	4618      	mov	r0, r3
 80116da:	3720      	adds	r7, #32
 80116dc:	46bd      	mov	sp, r7
 80116de:	bd80      	pop	{r7, pc}

080116e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80116e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80116e4:	b092      	sub	sp, #72	@ 0x48
 80116e6:	af00      	add	r7, sp, #0
 80116e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80116ea:	2300      	movs	r3, #0
 80116ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80116f0:	697b      	ldr	r3, [r7, #20]
 80116f2:	689a      	ldr	r2, [r3, #8]
 80116f4:	697b      	ldr	r3, [r7, #20]
 80116f6:	691b      	ldr	r3, [r3, #16]
 80116f8:	431a      	orrs	r2, r3
 80116fa:	697b      	ldr	r3, [r7, #20]
 80116fc:	695b      	ldr	r3, [r3, #20]
 80116fe:	431a      	orrs	r2, r3
 8011700:	697b      	ldr	r3, [r7, #20]
 8011702:	69db      	ldr	r3, [r3, #28]
 8011704:	4313      	orrs	r3, r2
 8011706:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011708:	697b      	ldr	r3, [r7, #20]
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	681a      	ldr	r2, [r3, #0]
 801170e:	4bbe      	ldr	r3, [pc, #760]	@ (8011a08 <UART_SetConfig+0x328>)
 8011710:	4013      	ands	r3, r2
 8011712:	697a      	ldr	r2, [r7, #20]
 8011714:	6812      	ldr	r2, [r2, #0]
 8011716:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011718:	430b      	orrs	r3, r1
 801171a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801171c:	697b      	ldr	r3, [r7, #20]
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	685b      	ldr	r3, [r3, #4]
 8011722:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8011726:	697b      	ldr	r3, [r7, #20]
 8011728:	68da      	ldr	r2, [r3, #12]
 801172a:	697b      	ldr	r3, [r7, #20]
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	430a      	orrs	r2, r1
 8011730:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011732:	697b      	ldr	r3, [r7, #20]
 8011734:	699b      	ldr	r3, [r3, #24]
 8011736:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011738:	697b      	ldr	r3, [r7, #20]
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	4ab3      	ldr	r2, [pc, #716]	@ (8011a0c <UART_SetConfig+0x32c>)
 801173e:	4293      	cmp	r3, r2
 8011740:	d004      	beq.n	801174c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011742:	697b      	ldr	r3, [r7, #20]
 8011744:	6a1b      	ldr	r3, [r3, #32]
 8011746:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011748:	4313      	orrs	r3, r2
 801174a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801174c:	697b      	ldr	r3, [r7, #20]
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	689a      	ldr	r2, [r3, #8]
 8011752:	4baf      	ldr	r3, [pc, #700]	@ (8011a10 <UART_SetConfig+0x330>)
 8011754:	4013      	ands	r3, r2
 8011756:	697a      	ldr	r2, [r7, #20]
 8011758:	6812      	ldr	r2, [r2, #0]
 801175a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801175c:	430b      	orrs	r3, r1
 801175e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011760:	697b      	ldr	r3, [r7, #20]
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011766:	f023 010f 	bic.w	r1, r3, #15
 801176a:	697b      	ldr	r3, [r7, #20]
 801176c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801176e:	697b      	ldr	r3, [r7, #20]
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	430a      	orrs	r2, r1
 8011774:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011776:	697b      	ldr	r3, [r7, #20]
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	4aa6      	ldr	r2, [pc, #664]	@ (8011a14 <UART_SetConfig+0x334>)
 801177c:	4293      	cmp	r3, r2
 801177e:	d177      	bne.n	8011870 <UART_SetConfig+0x190>
 8011780:	4ba5      	ldr	r3, [pc, #660]	@ (8011a18 <UART_SetConfig+0x338>)
 8011782:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011784:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011788:	2b28      	cmp	r3, #40	@ 0x28
 801178a:	d86d      	bhi.n	8011868 <UART_SetConfig+0x188>
 801178c:	a201      	add	r2, pc, #4	@ (adr r2, 8011794 <UART_SetConfig+0xb4>)
 801178e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011792:	bf00      	nop
 8011794:	08011839 	.word	0x08011839
 8011798:	08011869 	.word	0x08011869
 801179c:	08011869 	.word	0x08011869
 80117a0:	08011869 	.word	0x08011869
 80117a4:	08011869 	.word	0x08011869
 80117a8:	08011869 	.word	0x08011869
 80117ac:	08011869 	.word	0x08011869
 80117b0:	08011869 	.word	0x08011869
 80117b4:	08011841 	.word	0x08011841
 80117b8:	08011869 	.word	0x08011869
 80117bc:	08011869 	.word	0x08011869
 80117c0:	08011869 	.word	0x08011869
 80117c4:	08011869 	.word	0x08011869
 80117c8:	08011869 	.word	0x08011869
 80117cc:	08011869 	.word	0x08011869
 80117d0:	08011869 	.word	0x08011869
 80117d4:	08011849 	.word	0x08011849
 80117d8:	08011869 	.word	0x08011869
 80117dc:	08011869 	.word	0x08011869
 80117e0:	08011869 	.word	0x08011869
 80117e4:	08011869 	.word	0x08011869
 80117e8:	08011869 	.word	0x08011869
 80117ec:	08011869 	.word	0x08011869
 80117f0:	08011869 	.word	0x08011869
 80117f4:	08011851 	.word	0x08011851
 80117f8:	08011869 	.word	0x08011869
 80117fc:	08011869 	.word	0x08011869
 8011800:	08011869 	.word	0x08011869
 8011804:	08011869 	.word	0x08011869
 8011808:	08011869 	.word	0x08011869
 801180c:	08011869 	.word	0x08011869
 8011810:	08011869 	.word	0x08011869
 8011814:	08011859 	.word	0x08011859
 8011818:	08011869 	.word	0x08011869
 801181c:	08011869 	.word	0x08011869
 8011820:	08011869 	.word	0x08011869
 8011824:	08011869 	.word	0x08011869
 8011828:	08011869 	.word	0x08011869
 801182c:	08011869 	.word	0x08011869
 8011830:	08011869 	.word	0x08011869
 8011834:	08011861 	.word	0x08011861
 8011838:	2301      	movs	r3, #1
 801183a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801183e:	e326      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011840:	2304      	movs	r3, #4
 8011842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011846:	e322      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011848:	2308      	movs	r3, #8
 801184a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801184e:	e31e      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011850:	2310      	movs	r3, #16
 8011852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011856:	e31a      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011858:	2320      	movs	r3, #32
 801185a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801185e:	e316      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011860:	2340      	movs	r3, #64	@ 0x40
 8011862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011866:	e312      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011868:	2380      	movs	r3, #128	@ 0x80
 801186a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801186e:	e30e      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011870:	697b      	ldr	r3, [r7, #20]
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	4a69      	ldr	r2, [pc, #420]	@ (8011a1c <UART_SetConfig+0x33c>)
 8011876:	4293      	cmp	r3, r2
 8011878:	d130      	bne.n	80118dc <UART_SetConfig+0x1fc>
 801187a:	4b67      	ldr	r3, [pc, #412]	@ (8011a18 <UART_SetConfig+0x338>)
 801187c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801187e:	f003 0307 	and.w	r3, r3, #7
 8011882:	2b05      	cmp	r3, #5
 8011884:	d826      	bhi.n	80118d4 <UART_SetConfig+0x1f4>
 8011886:	a201      	add	r2, pc, #4	@ (adr r2, 801188c <UART_SetConfig+0x1ac>)
 8011888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801188c:	080118a5 	.word	0x080118a5
 8011890:	080118ad 	.word	0x080118ad
 8011894:	080118b5 	.word	0x080118b5
 8011898:	080118bd 	.word	0x080118bd
 801189c:	080118c5 	.word	0x080118c5
 80118a0:	080118cd 	.word	0x080118cd
 80118a4:	2300      	movs	r3, #0
 80118a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80118aa:	e2f0      	b.n	8011e8e <UART_SetConfig+0x7ae>
 80118ac:	2304      	movs	r3, #4
 80118ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80118b2:	e2ec      	b.n	8011e8e <UART_SetConfig+0x7ae>
 80118b4:	2308      	movs	r3, #8
 80118b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80118ba:	e2e8      	b.n	8011e8e <UART_SetConfig+0x7ae>
 80118bc:	2310      	movs	r3, #16
 80118be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80118c2:	e2e4      	b.n	8011e8e <UART_SetConfig+0x7ae>
 80118c4:	2320      	movs	r3, #32
 80118c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80118ca:	e2e0      	b.n	8011e8e <UART_SetConfig+0x7ae>
 80118cc:	2340      	movs	r3, #64	@ 0x40
 80118ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80118d2:	e2dc      	b.n	8011e8e <UART_SetConfig+0x7ae>
 80118d4:	2380      	movs	r3, #128	@ 0x80
 80118d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80118da:	e2d8      	b.n	8011e8e <UART_SetConfig+0x7ae>
 80118dc:	697b      	ldr	r3, [r7, #20]
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	4a4f      	ldr	r2, [pc, #316]	@ (8011a20 <UART_SetConfig+0x340>)
 80118e2:	4293      	cmp	r3, r2
 80118e4:	d130      	bne.n	8011948 <UART_SetConfig+0x268>
 80118e6:	4b4c      	ldr	r3, [pc, #304]	@ (8011a18 <UART_SetConfig+0x338>)
 80118e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80118ea:	f003 0307 	and.w	r3, r3, #7
 80118ee:	2b05      	cmp	r3, #5
 80118f0:	d826      	bhi.n	8011940 <UART_SetConfig+0x260>
 80118f2:	a201      	add	r2, pc, #4	@ (adr r2, 80118f8 <UART_SetConfig+0x218>)
 80118f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118f8:	08011911 	.word	0x08011911
 80118fc:	08011919 	.word	0x08011919
 8011900:	08011921 	.word	0x08011921
 8011904:	08011929 	.word	0x08011929
 8011908:	08011931 	.word	0x08011931
 801190c:	08011939 	.word	0x08011939
 8011910:	2300      	movs	r3, #0
 8011912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011916:	e2ba      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011918:	2304      	movs	r3, #4
 801191a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801191e:	e2b6      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011920:	2308      	movs	r3, #8
 8011922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011926:	e2b2      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011928:	2310      	movs	r3, #16
 801192a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801192e:	e2ae      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011930:	2320      	movs	r3, #32
 8011932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011936:	e2aa      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011938:	2340      	movs	r3, #64	@ 0x40
 801193a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801193e:	e2a6      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011940:	2380      	movs	r3, #128	@ 0x80
 8011942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011946:	e2a2      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011948:	697b      	ldr	r3, [r7, #20]
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	4a35      	ldr	r2, [pc, #212]	@ (8011a24 <UART_SetConfig+0x344>)
 801194e:	4293      	cmp	r3, r2
 8011950:	d130      	bne.n	80119b4 <UART_SetConfig+0x2d4>
 8011952:	4b31      	ldr	r3, [pc, #196]	@ (8011a18 <UART_SetConfig+0x338>)
 8011954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011956:	f003 0307 	and.w	r3, r3, #7
 801195a:	2b05      	cmp	r3, #5
 801195c:	d826      	bhi.n	80119ac <UART_SetConfig+0x2cc>
 801195e:	a201      	add	r2, pc, #4	@ (adr r2, 8011964 <UART_SetConfig+0x284>)
 8011960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011964:	0801197d 	.word	0x0801197d
 8011968:	08011985 	.word	0x08011985
 801196c:	0801198d 	.word	0x0801198d
 8011970:	08011995 	.word	0x08011995
 8011974:	0801199d 	.word	0x0801199d
 8011978:	080119a5 	.word	0x080119a5
 801197c:	2300      	movs	r3, #0
 801197e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011982:	e284      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011984:	2304      	movs	r3, #4
 8011986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801198a:	e280      	b.n	8011e8e <UART_SetConfig+0x7ae>
 801198c:	2308      	movs	r3, #8
 801198e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011992:	e27c      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011994:	2310      	movs	r3, #16
 8011996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801199a:	e278      	b.n	8011e8e <UART_SetConfig+0x7ae>
 801199c:	2320      	movs	r3, #32
 801199e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80119a2:	e274      	b.n	8011e8e <UART_SetConfig+0x7ae>
 80119a4:	2340      	movs	r3, #64	@ 0x40
 80119a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80119aa:	e270      	b.n	8011e8e <UART_SetConfig+0x7ae>
 80119ac:	2380      	movs	r3, #128	@ 0x80
 80119ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80119b2:	e26c      	b.n	8011e8e <UART_SetConfig+0x7ae>
 80119b4:	697b      	ldr	r3, [r7, #20]
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	4a1b      	ldr	r2, [pc, #108]	@ (8011a28 <UART_SetConfig+0x348>)
 80119ba:	4293      	cmp	r3, r2
 80119bc:	d142      	bne.n	8011a44 <UART_SetConfig+0x364>
 80119be:	4b16      	ldr	r3, [pc, #88]	@ (8011a18 <UART_SetConfig+0x338>)
 80119c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80119c2:	f003 0307 	and.w	r3, r3, #7
 80119c6:	2b05      	cmp	r3, #5
 80119c8:	d838      	bhi.n	8011a3c <UART_SetConfig+0x35c>
 80119ca:	a201      	add	r2, pc, #4	@ (adr r2, 80119d0 <UART_SetConfig+0x2f0>)
 80119cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119d0:	080119e9 	.word	0x080119e9
 80119d4:	080119f1 	.word	0x080119f1
 80119d8:	080119f9 	.word	0x080119f9
 80119dc:	08011a01 	.word	0x08011a01
 80119e0:	08011a2d 	.word	0x08011a2d
 80119e4:	08011a35 	.word	0x08011a35
 80119e8:	2300      	movs	r3, #0
 80119ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80119ee:	e24e      	b.n	8011e8e <UART_SetConfig+0x7ae>
 80119f0:	2304      	movs	r3, #4
 80119f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80119f6:	e24a      	b.n	8011e8e <UART_SetConfig+0x7ae>
 80119f8:	2308      	movs	r3, #8
 80119fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80119fe:	e246      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011a00:	2310      	movs	r3, #16
 8011a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011a06:	e242      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011a08:	cfff69f3 	.word	0xcfff69f3
 8011a0c:	58000c00 	.word	0x58000c00
 8011a10:	11fff4ff 	.word	0x11fff4ff
 8011a14:	40011000 	.word	0x40011000
 8011a18:	58024400 	.word	0x58024400
 8011a1c:	40004400 	.word	0x40004400
 8011a20:	40004800 	.word	0x40004800
 8011a24:	40004c00 	.word	0x40004c00
 8011a28:	40005000 	.word	0x40005000
 8011a2c:	2320      	movs	r3, #32
 8011a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011a32:	e22c      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011a34:	2340      	movs	r3, #64	@ 0x40
 8011a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011a3a:	e228      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011a3c:	2380      	movs	r3, #128	@ 0x80
 8011a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011a42:	e224      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011a44:	697b      	ldr	r3, [r7, #20]
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	4ab1      	ldr	r2, [pc, #708]	@ (8011d10 <UART_SetConfig+0x630>)
 8011a4a:	4293      	cmp	r3, r2
 8011a4c:	d176      	bne.n	8011b3c <UART_SetConfig+0x45c>
 8011a4e:	4bb1      	ldr	r3, [pc, #708]	@ (8011d14 <UART_SetConfig+0x634>)
 8011a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011a52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011a56:	2b28      	cmp	r3, #40	@ 0x28
 8011a58:	d86c      	bhi.n	8011b34 <UART_SetConfig+0x454>
 8011a5a:	a201      	add	r2, pc, #4	@ (adr r2, 8011a60 <UART_SetConfig+0x380>)
 8011a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a60:	08011b05 	.word	0x08011b05
 8011a64:	08011b35 	.word	0x08011b35
 8011a68:	08011b35 	.word	0x08011b35
 8011a6c:	08011b35 	.word	0x08011b35
 8011a70:	08011b35 	.word	0x08011b35
 8011a74:	08011b35 	.word	0x08011b35
 8011a78:	08011b35 	.word	0x08011b35
 8011a7c:	08011b35 	.word	0x08011b35
 8011a80:	08011b0d 	.word	0x08011b0d
 8011a84:	08011b35 	.word	0x08011b35
 8011a88:	08011b35 	.word	0x08011b35
 8011a8c:	08011b35 	.word	0x08011b35
 8011a90:	08011b35 	.word	0x08011b35
 8011a94:	08011b35 	.word	0x08011b35
 8011a98:	08011b35 	.word	0x08011b35
 8011a9c:	08011b35 	.word	0x08011b35
 8011aa0:	08011b15 	.word	0x08011b15
 8011aa4:	08011b35 	.word	0x08011b35
 8011aa8:	08011b35 	.word	0x08011b35
 8011aac:	08011b35 	.word	0x08011b35
 8011ab0:	08011b35 	.word	0x08011b35
 8011ab4:	08011b35 	.word	0x08011b35
 8011ab8:	08011b35 	.word	0x08011b35
 8011abc:	08011b35 	.word	0x08011b35
 8011ac0:	08011b1d 	.word	0x08011b1d
 8011ac4:	08011b35 	.word	0x08011b35
 8011ac8:	08011b35 	.word	0x08011b35
 8011acc:	08011b35 	.word	0x08011b35
 8011ad0:	08011b35 	.word	0x08011b35
 8011ad4:	08011b35 	.word	0x08011b35
 8011ad8:	08011b35 	.word	0x08011b35
 8011adc:	08011b35 	.word	0x08011b35
 8011ae0:	08011b25 	.word	0x08011b25
 8011ae4:	08011b35 	.word	0x08011b35
 8011ae8:	08011b35 	.word	0x08011b35
 8011aec:	08011b35 	.word	0x08011b35
 8011af0:	08011b35 	.word	0x08011b35
 8011af4:	08011b35 	.word	0x08011b35
 8011af8:	08011b35 	.word	0x08011b35
 8011afc:	08011b35 	.word	0x08011b35
 8011b00:	08011b2d 	.word	0x08011b2d
 8011b04:	2301      	movs	r3, #1
 8011b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011b0a:	e1c0      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011b0c:	2304      	movs	r3, #4
 8011b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011b12:	e1bc      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011b14:	2308      	movs	r3, #8
 8011b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011b1a:	e1b8      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011b1c:	2310      	movs	r3, #16
 8011b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011b22:	e1b4      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011b24:	2320      	movs	r3, #32
 8011b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011b2a:	e1b0      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011b2c:	2340      	movs	r3, #64	@ 0x40
 8011b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011b32:	e1ac      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011b34:	2380      	movs	r3, #128	@ 0x80
 8011b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011b3a:	e1a8      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011b3c:	697b      	ldr	r3, [r7, #20]
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	4a75      	ldr	r2, [pc, #468]	@ (8011d18 <UART_SetConfig+0x638>)
 8011b42:	4293      	cmp	r3, r2
 8011b44:	d130      	bne.n	8011ba8 <UART_SetConfig+0x4c8>
 8011b46:	4b73      	ldr	r3, [pc, #460]	@ (8011d14 <UART_SetConfig+0x634>)
 8011b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011b4a:	f003 0307 	and.w	r3, r3, #7
 8011b4e:	2b05      	cmp	r3, #5
 8011b50:	d826      	bhi.n	8011ba0 <UART_SetConfig+0x4c0>
 8011b52:	a201      	add	r2, pc, #4	@ (adr r2, 8011b58 <UART_SetConfig+0x478>)
 8011b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b58:	08011b71 	.word	0x08011b71
 8011b5c:	08011b79 	.word	0x08011b79
 8011b60:	08011b81 	.word	0x08011b81
 8011b64:	08011b89 	.word	0x08011b89
 8011b68:	08011b91 	.word	0x08011b91
 8011b6c:	08011b99 	.word	0x08011b99
 8011b70:	2300      	movs	r3, #0
 8011b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011b76:	e18a      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011b78:	2304      	movs	r3, #4
 8011b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011b7e:	e186      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011b80:	2308      	movs	r3, #8
 8011b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011b86:	e182      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011b88:	2310      	movs	r3, #16
 8011b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011b8e:	e17e      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011b90:	2320      	movs	r3, #32
 8011b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011b96:	e17a      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011b98:	2340      	movs	r3, #64	@ 0x40
 8011b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011b9e:	e176      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011ba0:	2380      	movs	r3, #128	@ 0x80
 8011ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011ba6:	e172      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011ba8:	697b      	ldr	r3, [r7, #20]
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	4a5b      	ldr	r2, [pc, #364]	@ (8011d1c <UART_SetConfig+0x63c>)
 8011bae:	4293      	cmp	r3, r2
 8011bb0:	d130      	bne.n	8011c14 <UART_SetConfig+0x534>
 8011bb2:	4b58      	ldr	r3, [pc, #352]	@ (8011d14 <UART_SetConfig+0x634>)
 8011bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011bb6:	f003 0307 	and.w	r3, r3, #7
 8011bba:	2b05      	cmp	r3, #5
 8011bbc:	d826      	bhi.n	8011c0c <UART_SetConfig+0x52c>
 8011bbe:	a201      	add	r2, pc, #4	@ (adr r2, 8011bc4 <UART_SetConfig+0x4e4>)
 8011bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bc4:	08011bdd 	.word	0x08011bdd
 8011bc8:	08011be5 	.word	0x08011be5
 8011bcc:	08011bed 	.word	0x08011bed
 8011bd0:	08011bf5 	.word	0x08011bf5
 8011bd4:	08011bfd 	.word	0x08011bfd
 8011bd8:	08011c05 	.word	0x08011c05
 8011bdc:	2300      	movs	r3, #0
 8011bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011be2:	e154      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011be4:	2304      	movs	r3, #4
 8011be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011bea:	e150      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011bec:	2308      	movs	r3, #8
 8011bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011bf2:	e14c      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011bf4:	2310      	movs	r3, #16
 8011bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011bfa:	e148      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011bfc:	2320      	movs	r3, #32
 8011bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011c02:	e144      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011c04:	2340      	movs	r3, #64	@ 0x40
 8011c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011c0a:	e140      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011c0c:	2380      	movs	r3, #128	@ 0x80
 8011c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011c12:	e13c      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011c14:	697b      	ldr	r3, [r7, #20]
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	4a41      	ldr	r2, [pc, #260]	@ (8011d20 <UART_SetConfig+0x640>)
 8011c1a:	4293      	cmp	r3, r2
 8011c1c:	f040 8082 	bne.w	8011d24 <UART_SetConfig+0x644>
 8011c20:	4b3c      	ldr	r3, [pc, #240]	@ (8011d14 <UART_SetConfig+0x634>)
 8011c22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011c24:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011c28:	2b28      	cmp	r3, #40	@ 0x28
 8011c2a:	d86d      	bhi.n	8011d08 <UART_SetConfig+0x628>
 8011c2c:	a201      	add	r2, pc, #4	@ (adr r2, 8011c34 <UART_SetConfig+0x554>)
 8011c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c32:	bf00      	nop
 8011c34:	08011cd9 	.word	0x08011cd9
 8011c38:	08011d09 	.word	0x08011d09
 8011c3c:	08011d09 	.word	0x08011d09
 8011c40:	08011d09 	.word	0x08011d09
 8011c44:	08011d09 	.word	0x08011d09
 8011c48:	08011d09 	.word	0x08011d09
 8011c4c:	08011d09 	.word	0x08011d09
 8011c50:	08011d09 	.word	0x08011d09
 8011c54:	08011ce1 	.word	0x08011ce1
 8011c58:	08011d09 	.word	0x08011d09
 8011c5c:	08011d09 	.word	0x08011d09
 8011c60:	08011d09 	.word	0x08011d09
 8011c64:	08011d09 	.word	0x08011d09
 8011c68:	08011d09 	.word	0x08011d09
 8011c6c:	08011d09 	.word	0x08011d09
 8011c70:	08011d09 	.word	0x08011d09
 8011c74:	08011ce9 	.word	0x08011ce9
 8011c78:	08011d09 	.word	0x08011d09
 8011c7c:	08011d09 	.word	0x08011d09
 8011c80:	08011d09 	.word	0x08011d09
 8011c84:	08011d09 	.word	0x08011d09
 8011c88:	08011d09 	.word	0x08011d09
 8011c8c:	08011d09 	.word	0x08011d09
 8011c90:	08011d09 	.word	0x08011d09
 8011c94:	08011cf1 	.word	0x08011cf1
 8011c98:	08011d09 	.word	0x08011d09
 8011c9c:	08011d09 	.word	0x08011d09
 8011ca0:	08011d09 	.word	0x08011d09
 8011ca4:	08011d09 	.word	0x08011d09
 8011ca8:	08011d09 	.word	0x08011d09
 8011cac:	08011d09 	.word	0x08011d09
 8011cb0:	08011d09 	.word	0x08011d09
 8011cb4:	08011cf9 	.word	0x08011cf9
 8011cb8:	08011d09 	.word	0x08011d09
 8011cbc:	08011d09 	.word	0x08011d09
 8011cc0:	08011d09 	.word	0x08011d09
 8011cc4:	08011d09 	.word	0x08011d09
 8011cc8:	08011d09 	.word	0x08011d09
 8011ccc:	08011d09 	.word	0x08011d09
 8011cd0:	08011d09 	.word	0x08011d09
 8011cd4:	08011d01 	.word	0x08011d01
 8011cd8:	2301      	movs	r3, #1
 8011cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011cde:	e0d6      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011ce0:	2304      	movs	r3, #4
 8011ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011ce6:	e0d2      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011ce8:	2308      	movs	r3, #8
 8011cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011cee:	e0ce      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011cf0:	2310      	movs	r3, #16
 8011cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011cf6:	e0ca      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011cf8:	2320      	movs	r3, #32
 8011cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011cfe:	e0c6      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011d00:	2340      	movs	r3, #64	@ 0x40
 8011d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d06:	e0c2      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011d08:	2380      	movs	r3, #128	@ 0x80
 8011d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d0e:	e0be      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011d10:	40011400 	.word	0x40011400
 8011d14:	58024400 	.word	0x58024400
 8011d18:	40007800 	.word	0x40007800
 8011d1c:	40007c00 	.word	0x40007c00
 8011d20:	40011800 	.word	0x40011800
 8011d24:	697b      	ldr	r3, [r7, #20]
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	4aad      	ldr	r2, [pc, #692]	@ (8011fe0 <UART_SetConfig+0x900>)
 8011d2a:	4293      	cmp	r3, r2
 8011d2c:	d176      	bne.n	8011e1c <UART_SetConfig+0x73c>
 8011d2e:	4bad      	ldr	r3, [pc, #692]	@ (8011fe4 <UART_SetConfig+0x904>)
 8011d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011d32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011d36:	2b28      	cmp	r3, #40	@ 0x28
 8011d38:	d86c      	bhi.n	8011e14 <UART_SetConfig+0x734>
 8011d3a:	a201      	add	r2, pc, #4	@ (adr r2, 8011d40 <UART_SetConfig+0x660>)
 8011d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d40:	08011de5 	.word	0x08011de5
 8011d44:	08011e15 	.word	0x08011e15
 8011d48:	08011e15 	.word	0x08011e15
 8011d4c:	08011e15 	.word	0x08011e15
 8011d50:	08011e15 	.word	0x08011e15
 8011d54:	08011e15 	.word	0x08011e15
 8011d58:	08011e15 	.word	0x08011e15
 8011d5c:	08011e15 	.word	0x08011e15
 8011d60:	08011ded 	.word	0x08011ded
 8011d64:	08011e15 	.word	0x08011e15
 8011d68:	08011e15 	.word	0x08011e15
 8011d6c:	08011e15 	.word	0x08011e15
 8011d70:	08011e15 	.word	0x08011e15
 8011d74:	08011e15 	.word	0x08011e15
 8011d78:	08011e15 	.word	0x08011e15
 8011d7c:	08011e15 	.word	0x08011e15
 8011d80:	08011df5 	.word	0x08011df5
 8011d84:	08011e15 	.word	0x08011e15
 8011d88:	08011e15 	.word	0x08011e15
 8011d8c:	08011e15 	.word	0x08011e15
 8011d90:	08011e15 	.word	0x08011e15
 8011d94:	08011e15 	.word	0x08011e15
 8011d98:	08011e15 	.word	0x08011e15
 8011d9c:	08011e15 	.word	0x08011e15
 8011da0:	08011dfd 	.word	0x08011dfd
 8011da4:	08011e15 	.word	0x08011e15
 8011da8:	08011e15 	.word	0x08011e15
 8011dac:	08011e15 	.word	0x08011e15
 8011db0:	08011e15 	.word	0x08011e15
 8011db4:	08011e15 	.word	0x08011e15
 8011db8:	08011e15 	.word	0x08011e15
 8011dbc:	08011e15 	.word	0x08011e15
 8011dc0:	08011e05 	.word	0x08011e05
 8011dc4:	08011e15 	.word	0x08011e15
 8011dc8:	08011e15 	.word	0x08011e15
 8011dcc:	08011e15 	.word	0x08011e15
 8011dd0:	08011e15 	.word	0x08011e15
 8011dd4:	08011e15 	.word	0x08011e15
 8011dd8:	08011e15 	.word	0x08011e15
 8011ddc:	08011e15 	.word	0x08011e15
 8011de0:	08011e0d 	.word	0x08011e0d
 8011de4:	2301      	movs	r3, #1
 8011de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011dea:	e050      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011dec:	2304      	movs	r3, #4
 8011dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011df2:	e04c      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011df4:	2308      	movs	r3, #8
 8011df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011dfa:	e048      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011dfc:	2310      	movs	r3, #16
 8011dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011e02:	e044      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011e04:	2320      	movs	r3, #32
 8011e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011e0a:	e040      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011e0c:	2340      	movs	r3, #64	@ 0x40
 8011e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011e12:	e03c      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011e14:	2380      	movs	r3, #128	@ 0x80
 8011e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011e1a:	e038      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011e1c:	697b      	ldr	r3, [r7, #20]
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	4a71      	ldr	r2, [pc, #452]	@ (8011fe8 <UART_SetConfig+0x908>)
 8011e22:	4293      	cmp	r3, r2
 8011e24:	d130      	bne.n	8011e88 <UART_SetConfig+0x7a8>
 8011e26:	4b6f      	ldr	r3, [pc, #444]	@ (8011fe4 <UART_SetConfig+0x904>)
 8011e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011e2a:	f003 0307 	and.w	r3, r3, #7
 8011e2e:	2b05      	cmp	r3, #5
 8011e30:	d826      	bhi.n	8011e80 <UART_SetConfig+0x7a0>
 8011e32:	a201      	add	r2, pc, #4	@ (adr r2, 8011e38 <UART_SetConfig+0x758>)
 8011e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e38:	08011e51 	.word	0x08011e51
 8011e3c:	08011e59 	.word	0x08011e59
 8011e40:	08011e61 	.word	0x08011e61
 8011e44:	08011e69 	.word	0x08011e69
 8011e48:	08011e71 	.word	0x08011e71
 8011e4c:	08011e79 	.word	0x08011e79
 8011e50:	2302      	movs	r3, #2
 8011e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011e56:	e01a      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011e58:	2304      	movs	r3, #4
 8011e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011e5e:	e016      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011e60:	2308      	movs	r3, #8
 8011e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011e66:	e012      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011e68:	2310      	movs	r3, #16
 8011e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011e6e:	e00e      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011e70:	2320      	movs	r3, #32
 8011e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011e76:	e00a      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011e78:	2340      	movs	r3, #64	@ 0x40
 8011e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011e7e:	e006      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011e80:	2380      	movs	r3, #128	@ 0x80
 8011e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011e86:	e002      	b.n	8011e8e <UART_SetConfig+0x7ae>
 8011e88:	2380      	movs	r3, #128	@ 0x80
 8011e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011e8e:	697b      	ldr	r3, [r7, #20]
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	4a55      	ldr	r2, [pc, #340]	@ (8011fe8 <UART_SetConfig+0x908>)
 8011e94:	4293      	cmp	r3, r2
 8011e96:	f040 80f8 	bne.w	801208a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011e9a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8011e9e:	2b20      	cmp	r3, #32
 8011ea0:	dc46      	bgt.n	8011f30 <UART_SetConfig+0x850>
 8011ea2:	2b02      	cmp	r3, #2
 8011ea4:	db75      	blt.n	8011f92 <UART_SetConfig+0x8b2>
 8011ea6:	3b02      	subs	r3, #2
 8011ea8:	2b1e      	cmp	r3, #30
 8011eaa:	d872      	bhi.n	8011f92 <UART_SetConfig+0x8b2>
 8011eac:	a201      	add	r2, pc, #4	@ (adr r2, 8011eb4 <UART_SetConfig+0x7d4>)
 8011eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011eb2:	bf00      	nop
 8011eb4:	08011f37 	.word	0x08011f37
 8011eb8:	08011f93 	.word	0x08011f93
 8011ebc:	08011f3f 	.word	0x08011f3f
 8011ec0:	08011f93 	.word	0x08011f93
 8011ec4:	08011f93 	.word	0x08011f93
 8011ec8:	08011f93 	.word	0x08011f93
 8011ecc:	08011f4f 	.word	0x08011f4f
 8011ed0:	08011f93 	.word	0x08011f93
 8011ed4:	08011f93 	.word	0x08011f93
 8011ed8:	08011f93 	.word	0x08011f93
 8011edc:	08011f93 	.word	0x08011f93
 8011ee0:	08011f93 	.word	0x08011f93
 8011ee4:	08011f93 	.word	0x08011f93
 8011ee8:	08011f93 	.word	0x08011f93
 8011eec:	08011f5f 	.word	0x08011f5f
 8011ef0:	08011f93 	.word	0x08011f93
 8011ef4:	08011f93 	.word	0x08011f93
 8011ef8:	08011f93 	.word	0x08011f93
 8011efc:	08011f93 	.word	0x08011f93
 8011f00:	08011f93 	.word	0x08011f93
 8011f04:	08011f93 	.word	0x08011f93
 8011f08:	08011f93 	.word	0x08011f93
 8011f0c:	08011f93 	.word	0x08011f93
 8011f10:	08011f93 	.word	0x08011f93
 8011f14:	08011f93 	.word	0x08011f93
 8011f18:	08011f93 	.word	0x08011f93
 8011f1c:	08011f93 	.word	0x08011f93
 8011f20:	08011f93 	.word	0x08011f93
 8011f24:	08011f93 	.word	0x08011f93
 8011f28:	08011f93 	.word	0x08011f93
 8011f2c:	08011f85 	.word	0x08011f85
 8011f30:	2b40      	cmp	r3, #64	@ 0x40
 8011f32:	d02a      	beq.n	8011f8a <UART_SetConfig+0x8aa>
 8011f34:	e02d      	b.n	8011f92 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8011f36:	f7fa fd91 	bl	800ca5c <HAL_RCCEx_GetD3PCLK1Freq>
 8011f3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011f3c:	e02f      	b.n	8011f9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011f3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011f42:	4618      	mov	r0, r3
 8011f44:	f7fa fda0 	bl	800ca88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011f4c:	e027      	b.n	8011f9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011f4e:	f107 0318 	add.w	r3, r7, #24
 8011f52:	4618      	mov	r0, r3
 8011f54:	f7fa feec 	bl	800cd30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011f58:	69fb      	ldr	r3, [r7, #28]
 8011f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011f5c:	e01f      	b.n	8011f9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011f5e:	4b21      	ldr	r3, [pc, #132]	@ (8011fe4 <UART_SetConfig+0x904>)
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	f003 0320 	and.w	r3, r3, #32
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d009      	beq.n	8011f7e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011f6a:	4b1e      	ldr	r3, [pc, #120]	@ (8011fe4 <UART_SetConfig+0x904>)
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	08db      	lsrs	r3, r3, #3
 8011f70:	f003 0303 	and.w	r3, r3, #3
 8011f74:	4a1d      	ldr	r2, [pc, #116]	@ (8011fec <UART_SetConfig+0x90c>)
 8011f76:	fa22 f303 	lsr.w	r3, r2, r3
 8011f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011f7c:	e00f      	b.n	8011f9e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8011f7e:	4b1b      	ldr	r3, [pc, #108]	@ (8011fec <UART_SetConfig+0x90c>)
 8011f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011f82:	e00c      	b.n	8011f9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011f84:	4b1a      	ldr	r3, [pc, #104]	@ (8011ff0 <UART_SetConfig+0x910>)
 8011f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011f88:	e009      	b.n	8011f9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011f8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011f90:	e005      	b.n	8011f9e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8011f92:	2300      	movs	r3, #0
 8011f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8011f96:	2301      	movs	r3, #1
 8011f98:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8011f9c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011f9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	f000 81ee 	beq.w	8012382 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011fa6:	697b      	ldr	r3, [r7, #20]
 8011fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011faa:	4a12      	ldr	r2, [pc, #72]	@ (8011ff4 <UART_SetConfig+0x914>)
 8011fac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011fb0:	461a      	mov	r2, r3
 8011fb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011fb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8011fb8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011fba:	697b      	ldr	r3, [r7, #20]
 8011fbc:	685a      	ldr	r2, [r3, #4]
 8011fbe:	4613      	mov	r3, r2
 8011fc0:	005b      	lsls	r3, r3, #1
 8011fc2:	4413      	add	r3, r2
 8011fc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011fc6:	429a      	cmp	r2, r3
 8011fc8:	d305      	bcc.n	8011fd6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011fca:	697b      	ldr	r3, [r7, #20]
 8011fcc:	685b      	ldr	r3, [r3, #4]
 8011fce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011fd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011fd2:	429a      	cmp	r2, r3
 8011fd4:	d910      	bls.n	8011ff8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8011fd6:	2301      	movs	r3, #1
 8011fd8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8011fdc:	e1d1      	b.n	8012382 <UART_SetConfig+0xca2>
 8011fde:	bf00      	nop
 8011fe0:	40011c00 	.word	0x40011c00
 8011fe4:	58024400 	.word	0x58024400
 8011fe8:	58000c00 	.word	0x58000c00
 8011fec:	03d09000 	.word	0x03d09000
 8011ff0:	003d0900 	.word	0x003d0900
 8011ff4:	08014970 	.word	0x08014970
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011ff8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011ffa:	2200      	movs	r2, #0
 8011ffc:	60bb      	str	r3, [r7, #8]
 8011ffe:	60fa      	str	r2, [r7, #12]
 8012000:	697b      	ldr	r3, [r7, #20]
 8012002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012004:	4ac0      	ldr	r2, [pc, #768]	@ (8012308 <UART_SetConfig+0xc28>)
 8012006:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801200a:	b29b      	uxth	r3, r3
 801200c:	2200      	movs	r2, #0
 801200e:	603b      	str	r3, [r7, #0]
 8012010:	607a      	str	r2, [r7, #4]
 8012012:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012016:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801201a:	f7ee f9d1 	bl	80003c0 <__aeabi_uldivmod>
 801201e:	4602      	mov	r2, r0
 8012020:	460b      	mov	r3, r1
 8012022:	4610      	mov	r0, r2
 8012024:	4619      	mov	r1, r3
 8012026:	f04f 0200 	mov.w	r2, #0
 801202a:	f04f 0300 	mov.w	r3, #0
 801202e:	020b      	lsls	r3, r1, #8
 8012030:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8012034:	0202      	lsls	r2, r0, #8
 8012036:	6979      	ldr	r1, [r7, #20]
 8012038:	6849      	ldr	r1, [r1, #4]
 801203a:	0849      	lsrs	r1, r1, #1
 801203c:	2000      	movs	r0, #0
 801203e:	460c      	mov	r4, r1
 8012040:	4605      	mov	r5, r0
 8012042:	eb12 0804 	adds.w	r8, r2, r4
 8012046:	eb43 0905 	adc.w	r9, r3, r5
 801204a:	697b      	ldr	r3, [r7, #20]
 801204c:	685b      	ldr	r3, [r3, #4]
 801204e:	2200      	movs	r2, #0
 8012050:	469a      	mov	sl, r3
 8012052:	4693      	mov	fp, r2
 8012054:	4652      	mov	r2, sl
 8012056:	465b      	mov	r3, fp
 8012058:	4640      	mov	r0, r8
 801205a:	4649      	mov	r1, r9
 801205c:	f7ee f9b0 	bl	80003c0 <__aeabi_uldivmod>
 8012060:	4602      	mov	r2, r0
 8012062:	460b      	mov	r3, r1
 8012064:	4613      	mov	r3, r2
 8012066:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8012068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801206a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801206e:	d308      	bcc.n	8012082 <UART_SetConfig+0x9a2>
 8012070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012072:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012076:	d204      	bcs.n	8012082 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8012078:	697b      	ldr	r3, [r7, #20]
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801207e:	60da      	str	r2, [r3, #12]
 8012080:	e17f      	b.n	8012382 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8012082:	2301      	movs	r3, #1
 8012084:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8012088:	e17b      	b.n	8012382 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801208a:	697b      	ldr	r3, [r7, #20]
 801208c:	69db      	ldr	r3, [r3, #28]
 801208e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012092:	f040 80bd 	bne.w	8012210 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8012096:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801209a:	2b20      	cmp	r3, #32
 801209c:	dc48      	bgt.n	8012130 <UART_SetConfig+0xa50>
 801209e:	2b00      	cmp	r3, #0
 80120a0:	db7b      	blt.n	801219a <UART_SetConfig+0xaba>
 80120a2:	2b20      	cmp	r3, #32
 80120a4:	d879      	bhi.n	801219a <UART_SetConfig+0xaba>
 80120a6:	a201      	add	r2, pc, #4	@ (adr r2, 80120ac <UART_SetConfig+0x9cc>)
 80120a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120ac:	08012137 	.word	0x08012137
 80120b0:	0801213f 	.word	0x0801213f
 80120b4:	0801219b 	.word	0x0801219b
 80120b8:	0801219b 	.word	0x0801219b
 80120bc:	08012147 	.word	0x08012147
 80120c0:	0801219b 	.word	0x0801219b
 80120c4:	0801219b 	.word	0x0801219b
 80120c8:	0801219b 	.word	0x0801219b
 80120cc:	08012157 	.word	0x08012157
 80120d0:	0801219b 	.word	0x0801219b
 80120d4:	0801219b 	.word	0x0801219b
 80120d8:	0801219b 	.word	0x0801219b
 80120dc:	0801219b 	.word	0x0801219b
 80120e0:	0801219b 	.word	0x0801219b
 80120e4:	0801219b 	.word	0x0801219b
 80120e8:	0801219b 	.word	0x0801219b
 80120ec:	08012167 	.word	0x08012167
 80120f0:	0801219b 	.word	0x0801219b
 80120f4:	0801219b 	.word	0x0801219b
 80120f8:	0801219b 	.word	0x0801219b
 80120fc:	0801219b 	.word	0x0801219b
 8012100:	0801219b 	.word	0x0801219b
 8012104:	0801219b 	.word	0x0801219b
 8012108:	0801219b 	.word	0x0801219b
 801210c:	0801219b 	.word	0x0801219b
 8012110:	0801219b 	.word	0x0801219b
 8012114:	0801219b 	.word	0x0801219b
 8012118:	0801219b 	.word	0x0801219b
 801211c:	0801219b 	.word	0x0801219b
 8012120:	0801219b 	.word	0x0801219b
 8012124:	0801219b 	.word	0x0801219b
 8012128:	0801219b 	.word	0x0801219b
 801212c:	0801218d 	.word	0x0801218d
 8012130:	2b40      	cmp	r3, #64	@ 0x40
 8012132:	d02e      	beq.n	8012192 <UART_SetConfig+0xab2>
 8012134:	e031      	b.n	801219a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012136:	f7f8 fdf3 	bl	800ad20 <HAL_RCC_GetPCLK1Freq>
 801213a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801213c:	e033      	b.n	80121a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801213e:	f7f8 fe05 	bl	800ad4c <HAL_RCC_GetPCLK2Freq>
 8012142:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8012144:	e02f      	b.n	80121a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012146:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801214a:	4618      	mov	r0, r3
 801214c:	f7fa fc9c 	bl	800ca88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012152:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012154:	e027      	b.n	80121a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012156:	f107 0318 	add.w	r3, r7, #24
 801215a:	4618      	mov	r0, r3
 801215c:	f7fa fde8 	bl	800cd30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012160:	69fb      	ldr	r3, [r7, #28]
 8012162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012164:	e01f      	b.n	80121a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012166:	4b69      	ldr	r3, [pc, #420]	@ (801230c <UART_SetConfig+0xc2c>)
 8012168:	681b      	ldr	r3, [r3, #0]
 801216a:	f003 0320 	and.w	r3, r3, #32
 801216e:	2b00      	cmp	r3, #0
 8012170:	d009      	beq.n	8012186 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012172:	4b66      	ldr	r3, [pc, #408]	@ (801230c <UART_SetConfig+0xc2c>)
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	08db      	lsrs	r3, r3, #3
 8012178:	f003 0303 	and.w	r3, r3, #3
 801217c:	4a64      	ldr	r2, [pc, #400]	@ (8012310 <UART_SetConfig+0xc30>)
 801217e:	fa22 f303 	lsr.w	r3, r2, r3
 8012182:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012184:	e00f      	b.n	80121a6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8012186:	4b62      	ldr	r3, [pc, #392]	@ (8012310 <UART_SetConfig+0xc30>)
 8012188:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801218a:	e00c      	b.n	80121a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801218c:	4b61      	ldr	r3, [pc, #388]	@ (8012314 <UART_SetConfig+0xc34>)
 801218e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012190:	e009      	b.n	80121a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012192:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012196:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012198:	e005      	b.n	80121a6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 801219a:	2300      	movs	r3, #0
 801219c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801219e:	2301      	movs	r3, #1
 80121a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80121a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80121a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	f000 80ea 	beq.w	8012382 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80121ae:	697b      	ldr	r3, [r7, #20]
 80121b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80121b2:	4a55      	ldr	r2, [pc, #340]	@ (8012308 <UART_SetConfig+0xc28>)
 80121b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80121b8:	461a      	mov	r2, r3
 80121ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80121bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80121c0:	005a      	lsls	r2, r3, #1
 80121c2:	697b      	ldr	r3, [r7, #20]
 80121c4:	685b      	ldr	r3, [r3, #4]
 80121c6:	085b      	lsrs	r3, r3, #1
 80121c8:	441a      	add	r2, r3
 80121ca:	697b      	ldr	r3, [r7, #20]
 80121cc:	685b      	ldr	r3, [r3, #4]
 80121ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80121d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80121d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80121d6:	2b0f      	cmp	r3, #15
 80121d8:	d916      	bls.n	8012208 <UART_SetConfig+0xb28>
 80121da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80121dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80121e0:	d212      	bcs.n	8012208 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80121e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80121e4:	b29b      	uxth	r3, r3
 80121e6:	f023 030f 	bic.w	r3, r3, #15
 80121ea:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80121ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80121ee:	085b      	lsrs	r3, r3, #1
 80121f0:	b29b      	uxth	r3, r3
 80121f2:	f003 0307 	and.w	r3, r3, #7
 80121f6:	b29a      	uxth	r2, r3
 80121f8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80121fa:	4313      	orrs	r3, r2
 80121fc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80121fe:	697b      	ldr	r3, [r7, #20]
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8012204:	60da      	str	r2, [r3, #12]
 8012206:	e0bc      	b.n	8012382 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8012208:	2301      	movs	r3, #1
 801220a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801220e:	e0b8      	b.n	8012382 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8012210:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8012214:	2b20      	cmp	r3, #32
 8012216:	dc4b      	bgt.n	80122b0 <UART_SetConfig+0xbd0>
 8012218:	2b00      	cmp	r3, #0
 801221a:	f2c0 8087 	blt.w	801232c <UART_SetConfig+0xc4c>
 801221e:	2b20      	cmp	r3, #32
 8012220:	f200 8084 	bhi.w	801232c <UART_SetConfig+0xc4c>
 8012224:	a201      	add	r2, pc, #4	@ (adr r2, 801222c <UART_SetConfig+0xb4c>)
 8012226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801222a:	bf00      	nop
 801222c:	080122b7 	.word	0x080122b7
 8012230:	080122bf 	.word	0x080122bf
 8012234:	0801232d 	.word	0x0801232d
 8012238:	0801232d 	.word	0x0801232d
 801223c:	080122c7 	.word	0x080122c7
 8012240:	0801232d 	.word	0x0801232d
 8012244:	0801232d 	.word	0x0801232d
 8012248:	0801232d 	.word	0x0801232d
 801224c:	080122d7 	.word	0x080122d7
 8012250:	0801232d 	.word	0x0801232d
 8012254:	0801232d 	.word	0x0801232d
 8012258:	0801232d 	.word	0x0801232d
 801225c:	0801232d 	.word	0x0801232d
 8012260:	0801232d 	.word	0x0801232d
 8012264:	0801232d 	.word	0x0801232d
 8012268:	0801232d 	.word	0x0801232d
 801226c:	080122e7 	.word	0x080122e7
 8012270:	0801232d 	.word	0x0801232d
 8012274:	0801232d 	.word	0x0801232d
 8012278:	0801232d 	.word	0x0801232d
 801227c:	0801232d 	.word	0x0801232d
 8012280:	0801232d 	.word	0x0801232d
 8012284:	0801232d 	.word	0x0801232d
 8012288:	0801232d 	.word	0x0801232d
 801228c:	0801232d 	.word	0x0801232d
 8012290:	0801232d 	.word	0x0801232d
 8012294:	0801232d 	.word	0x0801232d
 8012298:	0801232d 	.word	0x0801232d
 801229c:	0801232d 	.word	0x0801232d
 80122a0:	0801232d 	.word	0x0801232d
 80122a4:	0801232d 	.word	0x0801232d
 80122a8:	0801232d 	.word	0x0801232d
 80122ac:	0801231f 	.word	0x0801231f
 80122b0:	2b40      	cmp	r3, #64	@ 0x40
 80122b2:	d037      	beq.n	8012324 <UART_SetConfig+0xc44>
 80122b4:	e03a      	b.n	801232c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80122b6:	f7f8 fd33 	bl	800ad20 <HAL_RCC_GetPCLK1Freq>
 80122ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80122bc:	e03c      	b.n	8012338 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80122be:	f7f8 fd45 	bl	800ad4c <HAL_RCC_GetPCLK2Freq>
 80122c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80122c4:	e038      	b.n	8012338 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80122c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80122ca:	4618      	mov	r0, r3
 80122cc:	f7fa fbdc 	bl	800ca88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80122d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80122d4:	e030      	b.n	8012338 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80122d6:	f107 0318 	add.w	r3, r7, #24
 80122da:	4618      	mov	r0, r3
 80122dc:	f7fa fd28 	bl	800cd30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80122e0:	69fb      	ldr	r3, [r7, #28]
 80122e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80122e4:	e028      	b.n	8012338 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80122e6:	4b09      	ldr	r3, [pc, #36]	@ (801230c <UART_SetConfig+0xc2c>)
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	f003 0320 	and.w	r3, r3, #32
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d012      	beq.n	8012318 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80122f2:	4b06      	ldr	r3, [pc, #24]	@ (801230c <UART_SetConfig+0xc2c>)
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	08db      	lsrs	r3, r3, #3
 80122f8:	f003 0303 	and.w	r3, r3, #3
 80122fc:	4a04      	ldr	r2, [pc, #16]	@ (8012310 <UART_SetConfig+0xc30>)
 80122fe:	fa22 f303 	lsr.w	r3, r2, r3
 8012302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012304:	e018      	b.n	8012338 <UART_SetConfig+0xc58>
 8012306:	bf00      	nop
 8012308:	08014970 	.word	0x08014970
 801230c:	58024400 	.word	0x58024400
 8012310:	03d09000 	.word	0x03d09000
 8012314:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8012318:	4b24      	ldr	r3, [pc, #144]	@ (80123ac <UART_SetConfig+0xccc>)
 801231a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801231c:	e00c      	b.n	8012338 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801231e:	4b24      	ldr	r3, [pc, #144]	@ (80123b0 <UART_SetConfig+0xcd0>)
 8012320:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012322:	e009      	b.n	8012338 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012324:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012328:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801232a:	e005      	b.n	8012338 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 801232c:	2300      	movs	r3, #0
 801232e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8012330:	2301      	movs	r3, #1
 8012332:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8012336:	bf00      	nop
    }

    if (pclk != 0U)
 8012338:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801233a:	2b00      	cmp	r3, #0
 801233c:	d021      	beq.n	8012382 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801233e:	697b      	ldr	r3, [r7, #20]
 8012340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012342:	4a1c      	ldr	r2, [pc, #112]	@ (80123b4 <UART_SetConfig+0xcd4>)
 8012344:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012348:	461a      	mov	r2, r3
 801234a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801234c:	fbb3 f2f2 	udiv	r2, r3, r2
 8012350:	697b      	ldr	r3, [r7, #20]
 8012352:	685b      	ldr	r3, [r3, #4]
 8012354:	085b      	lsrs	r3, r3, #1
 8012356:	441a      	add	r2, r3
 8012358:	697b      	ldr	r3, [r7, #20]
 801235a:	685b      	ldr	r3, [r3, #4]
 801235c:	fbb2 f3f3 	udiv	r3, r2, r3
 8012360:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012364:	2b0f      	cmp	r3, #15
 8012366:	d909      	bls.n	801237c <UART_SetConfig+0xc9c>
 8012368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801236a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801236e:	d205      	bcs.n	801237c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8012370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012372:	b29a      	uxth	r2, r3
 8012374:	697b      	ldr	r3, [r7, #20]
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	60da      	str	r2, [r3, #12]
 801237a:	e002      	b.n	8012382 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 801237c:	2301      	movs	r3, #1
 801237e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8012382:	697b      	ldr	r3, [r7, #20]
 8012384:	2201      	movs	r2, #1
 8012386:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 801238a:	697b      	ldr	r3, [r7, #20]
 801238c:	2201      	movs	r2, #1
 801238e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8012392:	697b      	ldr	r3, [r7, #20]
 8012394:	2200      	movs	r2, #0
 8012396:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8012398:	697b      	ldr	r3, [r7, #20]
 801239a:	2200      	movs	r2, #0
 801239c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 801239e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80123a2:	4618      	mov	r0, r3
 80123a4:	3748      	adds	r7, #72	@ 0x48
 80123a6:	46bd      	mov	sp, r7
 80123a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80123ac:	03d09000 	.word	0x03d09000
 80123b0:	003d0900 	.word	0x003d0900
 80123b4:	08014970 	.word	0x08014970

080123b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80123b8:	b480      	push	{r7}
 80123ba:	b083      	sub	sp, #12
 80123bc:	af00      	add	r7, sp, #0
 80123be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80123c4:	f003 0308 	and.w	r3, r3, #8
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d00a      	beq.n	80123e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	685b      	ldr	r3, [r3, #4]
 80123d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	430a      	orrs	r2, r1
 80123e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80123e6:	f003 0301 	and.w	r3, r3, #1
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d00a      	beq.n	8012404 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	685b      	ldr	r3, [r3, #4]
 80123f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	430a      	orrs	r2, r1
 8012402:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012408:	f003 0302 	and.w	r3, r3, #2
 801240c:	2b00      	cmp	r3, #0
 801240e:	d00a      	beq.n	8012426 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	681b      	ldr	r3, [r3, #0]
 8012414:	685b      	ldr	r3, [r3, #4]
 8012416:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	430a      	orrs	r2, r1
 8012424:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801242a:	f003 0304 	and.w	r3, r3, #4
 801242e:	2b00      	cmp	r3, #0
 8012430:	d00a      	beq.n	8012448 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	685b      	ldr	r3, [r3, #4]
 8012438:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	430a      	orrs	r2, r1
 8012446:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801244c:	f003 0310 	and.w	r3, r3, #16
 8012450:	2b00      	cmp	r3, #0
 8012452:	d00a      	beq.n	801246a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	689b      	ldr	r3, [r3, #8]
 801245a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	430a      	orrs	r2, r1
 8012468:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801246e:	f003 0320 	and.w	r3, r3, #32
 8012472:	2b00      	cmp	r3, #0
 8012474:	d00a      	beq.n	801248c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	689b      	ldr	r3, [r3, #8]
 801247c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	430a      	orrs	r2, r1
 801248a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012494:	2b00      	cmp	r3, #0
 8012496:	d01a      	beq.n	80124ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	685b      	ldr	r3, [r3, #4]
 801249e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	430a      	orrs	r2, r1
 80124ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80124b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80124b6:	d10a      	bne.n	80124ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	685b      	ldr	r3, [r3, #4]
 80124be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	430a      	orrs	r2, r1
 80124cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80124d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d00a      	beq.n	80124f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	685b      	ldr	r3, [r3, #4]
 80124e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	430a      	orrs	r2, r1
 80124ee:	605a      	str	r2, [r3, #4]
  }
}
 80124f0:	bf00      	nop
 80124f2:	370c      	adds	r7, #12
 80124f4:	46bd      	mov	sp, r7
 80124f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124fa:	4770      	bx	lr

080124fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80124fc:	b580      	push	{r7, lr}
 80124fe:	b098      	sub	sp, #96	@ 0x60
 8012500:	af02      	add	r7, sp, #8
 8012502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	2200      	movs	r2, #0
 8012508:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801250c:	f7f1 fada 	bl	8003ac4 <HAL_GetTick>
 8012510:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	f003 0308 	and.w	r3, r3, #8
 801251c:	2b08      	cmp	r3, #8
 801251e:	d12f      	bne.n	8012580 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012520:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8012524:	9300      	str	r3, [sp, #0]
 8012526:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012528:	2200      	movs	r2, #0
 801252a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801252e:	6878      	ldr	r0, [r7, #4]
 8012530:	f000 f88e 	bl	8012650 <UART_WaitOnFlagUntilTimeout>
 8012534:	4603      	mov	r3, r0
 8012536:	2b00      	cmp	r3, #0
 8012538:	d022      	beq.n	8012580 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	681b      	ldr	r3, [r3, #0]
 801253e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012542:	e853 3f00 	ldrex	r3, [r3]
 8012546:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8012548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801254a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801254e:	653b      	str	r3, [r7, #80]	@ 0x50
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	461a      	mov	r2, r3
 8012556:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012558:	647b      	str	r3, [r7, #68]	@ 0x44
 801255a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801255c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801255e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012560:	e841 2300 	strex	r3, r2, [r1]
 8012564:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8012566:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012568:	2b00      	cmp	r3, #0
 801256a:	d1e6      	bne.n	801253a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	2220      	movs	r2, #32
 8012570:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	2200      	movs	r2, #0
 8012578:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801257c:	2303      	movs	r3, #3
 801257e:	e063      	b.n	8012648 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	f003 0304 	and.w	r3, r3, #4
 801258a:	2b04      	cmp	r3, #4
 801258c:	d149      	bne.n	8012622 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801258e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8012592:	9300      	str	r3, [sp, #0]
 8012594:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012596:	2200      	movs	r2, #0
 8012598:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 801259c:	6878      	ldr	r0, [r7, #4]
 801259e:	f000 f857 	bl	8012650 <UART_WaitOnFlagUntilTimeout>
 80125a2:	4603      	mov	r3, r0
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d03c      	beq.n	8012622 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125b0:	e853 3f00 	ldrex	r3, [r3]
 80125b4:	623b      	str	r3, [r7, #32]
   return(result);
 80125b6:	6a3b      	ldr	r3, [r7, #32]
 80125b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80125bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	461a      	mov	r2, r3
 80125c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80125c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80125c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80125cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80125ce:	e841 2300 	strex	r3, r2, [r1]
 80125d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80125d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d1e6      	bne.n	80125a8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	3308      	adds	r3, #8
 80125e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125e2:	693b      	ldr	r3, [r7, #16]
 80125e4:	e853 3f00 	ldrex	r3, [r3]
 80125e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	f023 0301 	bic.w	r3, r3, #1
 80125f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	3308      	adds	r3, #8
 80125f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80125fa:	61fa      	str	r2, [r7, #28]
 80125fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125fe:	69b9      	ldr	r1, [r7, #24]
 8012600:	69fa      	ldr	r2, [r7, #28]
 8012602:	e841 2300 	strex	r3, r2, [r1]
 8012606:	617b      	str	r3, [r7, #20]
   return(result);
 8012608:	697b      	ldr	r3, [r7, #20]
 801260a:	2b00      	cmp	r3, #0
 801260c:	d1e5      	bne.n	80125da <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	2220      	movs	r2, #32
 8012612:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	2200      	movs	r2, #0
 801261a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801261e:	2303      	movs	r3, #3
 8012620:	e012      	b.n	8012648 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	2220      	movs	r2, #32
 8012626:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	2220      	movs	r2, #32
 801262e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	2200      	movs	r2, #0
 8012636:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	2200      	movs	r2, #0
 801263c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	2200      	movs	r2, #0
 8012642:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012646:	2300      	movs	r3, #0
}
 8012648:	4618      	mov	r0, r3
 801264a:	3758      	adds	r7, #88	@ 0x58
 801264c:	46bd      	mov	sp, r7
 801264e:	bd80      	pop	{r7, pc}

08012650 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8012650:	b580      	push	{r7, lr}
 8012652:	b084      	sub	sp, #16
 8012654:	af00      	add	r7, sp, #0
 8012656:	60f8      	str	r0, [r7, #12]
 8012658:	60b9      	str	r1, [r7, #8]
 801265a:	603b      	str	r3, [r7, #0]
 801265c:	4613      	mov	r3, r2
 801265e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012660:	e04f      	b.n	8012702 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012662:	69bb      	ldr	r3, [r7, #24]
 8012664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012668:	d04b      	beq.n	8012702 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801266a:	f7f1 fa2b 	bl	8003ac4 <HAL_GetTick>
 801266e:	4602      	mov	r2, r0
 8012670:	683b      	ldr	r3, [r7, #0]
 8012672:	1ad3      	subs	r3, r2, r3
 8012674:	69ba      	ldr	r2, [r7, #24]
 8012676:	429a      	cmp	r2, r3
 8012678:	d302      	bcc.n	8012680 <UART_WaitOnFlagUntilTimeout+0x30>
 801267a:	69bb      	ldr	r3, [r7, #24]
 801267c:	2b00      	cmp	r3, #0
 801267e:	d101      	bne.n	8012684 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8012680:	2303      	movs	r3, #3
 8012682:	e04e      	b.n	8012722 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	f003 0304 	and.w	r3, r3, #4
 801268e:	2b00      	cmp	r3, #0
 8012690:	d037      	beq.n	8012702 <UART_WaitOnFlagUntilTimeout+0xb2>
 8012692:	68bb      	ldr	r3, [r7, #8]
 8012694:	2b80      	cmp	r3, #128	@ 0x80
 8012696:	d034      	beq.n	8012702 <UART_WaitOnFlagUntilTimeout+0xb2>
 8012698:	68bb      	ldr	r3, [r7, #8]
 801269a:	2b40      	cmp	r3, #64	@ 0x40
 801269c:	d031      	beq.n	8012702 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	69db      	ldr	r3, [r3, #28]
 80126a4:	f003 0308 	and.w	r3, r3, #8
 80126a8:	2b08      	cmp	r3, #8
 80126aa:	d110      	bne.n	80126ce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	2208      	movs	r2, #8
 80126b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80126b4:	68f8      	ldr	r0, [r7, #12]
 80126b6:	f000 f839 	bl	801272c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	2208      	movs	r2, #8
 80126be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	2200      	movs	r2, #0
 80126c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80126ca:	2301      	movs	r3, #1
 80126cc:	e029      	b.n	8012722 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	69db      	ldr	r3, [r3, #28]
 80126d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80126d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80126dc:	d111      	bne.n	8012702 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80126e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80126e8:	68f8      	ldr	r0, [r7, #12]
 80126ea:	f000 f81f 	bl	801272c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	2220      	movs	r2, #32
 80126f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	2200      	movs	r2, #0
 80126fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80126fe:	2303      	movs	r3, #3
 8012700:	e00f      	b.n	8012722 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	69da      	ldr	r2, [r3, #28]
 8012708:	68bb      	ldr	r3, [r7, #8]
 801270a:	4013      	ands	r3, r2
 801270c:	68ba      	ldr	r2, [r7, #8]
 801270e:	429a      	cmp	r2, r3
 8012710:	bf0c      	ite	eq
 8012712:	2301      	moveq	r3, #1
 8012714:	2300      	movne	r3, #0
 8012716:	b2db      	uxtb	r3, r3
 8012718:	461a      	mov	r2, r3
 801271a:	79fb      	ldrb	r3, [r7, #7]
 801271c:	429a      	cmp	r2, r3
 801271e:	d0a0      	beq.n	8012662 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012720:	2300      	movs	r3, #0
}
 8012722:	4618      	mov	r0, r3
 8012724:	3710      	adds	r7, #16
 8012726:	46bd      	mov	sp, r7
 8012728:	bd80      	pop	{r7, pc}
	...

0801272c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801272c:	b480      	push	{r7}
 801272e:	b095      	sub	sp, #84	@ 0x54
 8012730:	af00      	add	r7, sp, #0
 8012732:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801273a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801273c:	e853 3f00 	ldrex	r3, [r3]
 8012740:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8012742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012744:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8012748:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	461a      	mov	r2, r3
 8012750:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012752:	643b      	str	r3, [r7, #64]	@ 0x40
 8012754:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012756:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8012758:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801275a:	e841 2300 	strex	r3, r2, [r1]
 801275e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8012760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012762:	2b00      	cmp	r3, #0
 8012764:	d1e6      	bne.n	8012734 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	3308      	adds	r3, #8
 801276c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801276e:	6a3b      	ldr	r3, [r7, #32]
 8012770:	e853 3f00 	ldrex	r3, [r3]
 8012774:	61fb      	str	r3, [r7, #28]
   return(result);
 8012776:	69fa      	ldr	r2, [r7, #28]
 8012778:	4b1e      	ldr	r3, [pc, #120]	@ (80127f4 <UART_EndRxTransfer+0xc8>)
 801277a:	4013      	ands	r3, r2
 801277c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	3308      	adds	r3, #8
 8012784:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012786:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8012788:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801278a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801278c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801278e:	e841 2300 	strex	r3, r2, [r1]
 8012792:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8012794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012796:	2b00      	cmp	r3, #0
 8012798:	d1e5      	bne.n	8012766 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801279e:	2b01      	cmp	r3, #1
 80127a0:	d118      	bne.n	80127d4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	681b      	ldr	r3, [r3, #0]
 80127a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127a8:	68fb      	ldr	r3, [r7, #12]
 80127aa:	e853 3f00 	ldrex	r3, [r3]
 80127ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80127b0:	68bb      	ldr	r3, [r7, #8]
 80127b2:	f023 0310 	bic.w	r3, r3, #16
 80127b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	461a      	mov	r2, r3
 80127be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80127c0:	61bb      	str	r3, [r7, #24]
 80127c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127c4:	6979      	ldr	r1, [r7, #20]
 80127c6:	69ba      	ldr	r2, [r7, #24]
 80127c8:	e841 2300 	strex	r3, r2, [r1]
 80127cc:	613b      	str	r3, [r7, #16]
   return(result);
 80127ce:	693b      	ldr	r3, [r7, #16]
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d1e6      	bne.n	80127a2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	2220      	movs	r2, #32
 80127d8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	2200      	movs	r2, #0
 80127e0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	2200      	movs	r2, #0
 80127e6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80127e8:	bf00      	nop
 80127ea:	3754      	adds	r7, #84	@ 0x54
 80127ec:	46bd      	mov	sp, r7
 80127ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f2:	4770      	bx	lr
 80127f4:	effffffe 	.word	0xeffffffe

080127f8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80127f8:	b480      	push	{r7}
 80127fa:	b085      	sub	sp, #20
 80127fc:	af00      	add	r7, sp, #0
 80127fe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012806:	2b01      	cmp	r3, #1
 8012808:	d101      	bne.n	801280e <HAL_UARTEx_DisableFifoMode+0x16>
 801280a:	2302      	movs	r3, #2
 801280c:	e027      	b.n	801285e <HAL_UARTEx_DisableFifoMode+0x66>
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	2201      	movs	r2, #1
 8012812:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	2224      	movs	r2, #36	@ 0x24
 801281a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	681a      	ldr	r2, [r3, #0]
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	f022 0201 	bic.w	r2, r2, #1
 8012834:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012836:	68fb      	ldr	r3, [r7, #12]
 8012838:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801283c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	2200      	movs	r2, #0
 8012842:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	68fa      	ldr	r2, [r7, #12]
 801284a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	2220      	movs	r2, #32
 8012850:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	2200      	movs	r2, #0
 8012858:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801285c:	2300      	movs	r3, #0
}
 801285e:	4618      	mov	r0, r3
 8012860:	3714      	adds	r7, #20
 8012862:	46bd      	mov	sp, r7
 8012864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012868:	4770      	bx	lr

0801286a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801286a:	b580      	push	{r7, lr}
 801286c:	b084      	sub	sp, #16
 801286e:	af00      	add	r7, sp, #0
 8012870:	6078      	str	r0, [r7, #4]
 8012872:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801287a:	2b01      	cmp	r3, #1
 801287c:	d101      	bne.n	8012882 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801287e:	2302      	movs	r3, #2
 8012880:	e02d      	b.n	80128de <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	2201      	movs	r2, #1
 8012886:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	2224      	movs	r2, #36	@ 0x24
 801288e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	681a      	ldr	r2, [r3, #0]
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	f022 0201 	bic.w	r2, r2, #1
 80128a8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	689b      	ldr	r3, [r3, #8]
 80128b0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	683a      	ldr	r2, [r7, #0]
 80128ba:	430a      	orrs	r2, r1
 80128bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80128be:	6878      	ldr	r0, [r7, #4]
 80128c0:	f000 f850 	bl	8012964 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	681b      	ldr	r3, [r3, #0]
 80128c8:	68fa      	ldr	r2, [r7, #12]
 80128ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	2220      	movs	r2, #32
 80128d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	2200      	movs	r2, #0
 80128d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80128dc:	2300      	movs	r3, #0
}
 80128de:	4618      	mov	r0, r3
 80128e0:	3710      	adds	r7, #16
 80128e2:	46bd      	mov	sp, r7
 80128e4:	bd80      	pop	{r7, pc}

080128e6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80128e6:	b580      	push	{r7, lr}
 80128e8:	b084      	sub	sp, #16
 80128ea:	af00      	add	r7, sp, #0
 80128ec:	6078      	str	r0, [r7, #4]
 80128ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80128f6:	2b01      	cmp	r3, #1
 80128f8:	d101      	bne.n	80128fe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80128fa:	2302      	movs	r3, #2
 80128fc:	e02d      	b.n	801295a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	2201      	movs	r2, #1
 8012902:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	2224      	movs	r2, #36	@ 0x24
 801290a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	681a      	ldr	r2, [r3, #0]
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	681b      	ldr	r3, [r3, #0]
 8012920:	f022 0201 	bic.w	r2, r2, #1
 8012924:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	681b      	ldr	r3, [r3, #0]
 801292a:	689b      	ldr	r3, [r3, #8]
 801292c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	683a      	ldr	r2, [r7, #0]
 8012936:	430a      	orrs	r2, r1
 8012938:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801293a:	6878      	ldr	r0, [r7, #4]
 801293c:	f000 f812 	bl	8012964 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	68fa      	ldr	r2, [r7, #12]
 8012946:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	2220      	movs	r2, #32
 801294c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	2200      	movs	r2, #0
 8012954:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012958:	2300      	movs	r3, #0
}
 801295a:	4618      	mov	r0, r3
 801295c:	3710      	adds	r7, #16
 801295e:	46bd      	mov	sp, r7
 8012960:	bd80      	pop	{r7, pc}
	...

08012964 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012964:	b480      	push	{r7}
 8012966:	b085      	sub	sp, #20
 8012968:	af00      	add	r7, sp, #0
 801296a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012970:	2b00      	cmp	r3, #0
 8012972:	d108      	bne.n	8012986 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	2201      	movs	r2, #1
 8012978:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	2201      	movs	r2, #1
 8012980:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012984:	e031      	b.n	80129ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012986:	2310      	movs	r3, #16
 8012988:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801298a:	2310      	movs	r3, #16
 801298c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	689b      	ldr	r3, [r3, #8]
 8012994:	0e5b      	lsrs	r3, r3, #25
 8012996:	b2db      	uxtb	r3, r3
 8012998:	f003 0307 	and.w	r3, r3, #7
 801299c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	689b      	ldr	r3, [r3, #8]
 80129a4:	0f5b      	lsrs	r3, r3, #29
 80129a6:	b2db      	uxtb	r3, r3
 80129a8:	f003 0307 	and.w	r3, r3, #7
 80129ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80129ae:	7bbb      	ldrb	r3, [r7, #14]
 80129b0:	7b3a      	ldrb	r2, [r7, #12]
 80129b2:	4911      	ldr	r1, [pc, #68]	@ (80129f8 <UARTEx_SetNbDataToProcess+0x94>)
 80129b4:	5c8a      	ldrb	r2, [r1, r2]
 80129b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80129ba:	7b3a      	ldrb	r2, [r7, #12]
 80129bc:	490f      	ldr	r1, [pc, #60]	@ (80129fc <UARTEx_SetNbDataToProcess+0x98>)
 80129be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80129c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80129c4:	b29a      	uxth	r2, r3
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80129cc:	7bfb      	ldrb	r3, [r7, #15]
 80129ce:	7b7a      	ldrb	r2, [r7, #13]
 80129d0:	4909      	ldr	r1, [pc, #36]	@ (80129f8 <UARTEx_SetNbDataToProcess+0x94>)
 80129d2:	5c8a      	ldrb	r2, [r1, r2]
 80129d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80129d8:	7b7a      	ldrb	r2, [r7, #13]
 80129da:	4908      	ldr	r1, [pc, #32]	@ (80129fc <UARTEx_SetNbDataToProcess+0x98>)
 80129dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80129de:	fb93 f3f2 	sdiv	r3, r3, r2
 80129e2:	b29a      	uxth	r2, r3
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80129ea:	bf00      	nop
 80129ec:	3714      	adds	r7, #20
 80129ee:	46bd      	mov	sp, r7
 80129f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f4:	4770      	bx	lr
 80129f6:	bf00      	nop
 80129f8:	08014988 	.word	0x08014988
 80129fc:	08014990 	.word	0x08014990

08012a00 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8012a00:	b084      	sub	sp, #16
 8012a02:	b480      	push	{r7}
 8012a04:	b085      	sub	sp, #20
 8012a06:	af00      	add	r7, sp, #0
 8012a08:	6078      	str	r0, [r7, #4]
 8012a0a:	f107 001c 	add.w	r0, r7, #28
 8012a0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8012a12:	2300      	movs	r3, #0
 8012a14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8012a16:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8012a18:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8012a1a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8012a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 8012a1e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8012a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 8012a22:	431a      	orrs	r2, r3
             Init.ClockDiv
 8012a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 8012a26:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8012a28:	68fa      	ldr	r2, [r7, #12]
 8012a2a:	4313      	orrs	r3, r2
 8012a2c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	685a      	ldr	r2, [r3, #4]
 8012a32:	4b07      	ldr	r3, [pc, #28]	@ (8012a50 <SDMMC_Init+0x50>)
 8012a34:	4013      	ands	r3, r2
 8012a36:	68fa      	ldr	r2, [r7, #12]
 8012a38:	431a      	orrs	r2, r3
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8012a3e:	2300      	movs	r3, #0
}
 8012a40:	4618      	mov	r0, r3
 8012a42:	3714      	adds	r7, #20
 8012a44:	46bd      	mov	sp, r7
 8012a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a4a:	b004      	add	sp, #16
 8012a4c:	4770      	bx	lr
 8012a4e:	bf00      	nop
 8012a50:	ffc02c00 	.word	0xffc02c00

08012a54 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8012a54:	b480      	push	{r7}
 8012a56:	b083      	sub	sp, #12
 8012a58:	af00      	add	r7, sp, #0
 8012a5a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8012a62:	4618      	mov	r0, r3
 8012a64:	370c      	adds	r7, #12
 8012a66:	46bd      	mov	sp, r7
 8012a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a6c:	4770      	bx	lr

08012a6e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8012a6e:	b480      	push	{r7}
 8012a70:	b083      	sub	sp, #12
 8012a72:	af00      	add	r7, sp, #0
 8012a74:	6078      	str	r0, [r7, #4]
 8012a76:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8012a78:	683b      	ldr	r3, [r7, #0]
 8012a7a:	681a      	ldr	r2, [r3, #0]
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8012a82:	2300      	movs	r3, #0
}
 8012a84:	4618      	mov	r0, r3
 8012a86:	370c      	adds	r7, #12
 8012a88:	46bd      	mov	sp, r7
 8012a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a8e:	4770      	bx	lr

08012a90 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8012a90:	b480      	push	{r7}
 8012a92:	b083      	sub	sp, #12
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	f043 0203 	orr.w	r2, r3, #3
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8012aa4:	2300      	movs	r3, #0
}
 8012aa6:	4618      	mov	r0, r3
 8012aa8:	370c      	adds	r7, #12
 8012aaa:	46bd      	mov	sp, r7
 8012aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ab0:	4770      	bx	lr

08012ab2 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8012ab2:	b480      	push	{r7}
 8012ab4:	b083      	sub	sp, #12
 8012ab6:	af00      	add	r7, sp, #0
 8012ab8:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	f003 0303 	and.w	r3, r3, #3
}
 8012ac2:	4618      	mov	r0, r3
 8012ac4:	370c      	adds	r7, #12
 8012ac6:	46bd      	mov	sp, r7
 8012ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012acc:	4770      	bx	lr
	...

08012ad0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8012ad0:	b480      	push	{r7}
 8012ad2:	b085      	sub	sp, #20
 8012ad4:	af00      	add	r7, sp, #0
 8012ad6:	6078      	str	r0, [r7, #4]
 8012ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012ada:	2300      	movs	r3, #0
 8012adc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8012ade:	683b      	ldr	r3, [r7, #0]
 8012ae0:	681a      	ldr	r2, [r3, #0]
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012ae6:	683b      	ldr	r3, [r7, #0]
 8012ae8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8012aea:	683b      	ldr	r3, [r7, #0]
 8012aec:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012aee:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8012af0:	683b      	ldr	r3, [r7, #0]
 8012af2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8012af4:	431a      	orrs	r2, r3
                       Command->CPSM);
 8012af6:	683b      	ldr	r3, [r7, #0]
 8012af8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8012afa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012afc:	68fa      	ldr	r2, [r7, #12]
 8012afe:	4313      	orrs	r3, r2
 8012b00:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	68da      	ldr	r2, [r3, #12]
 8012b06:	4b06      	ldr	r3, [pc, #24]	@ (8012b20 <SDMMC_SendCommand+0x50>)
 8012b08:	4013      	ands	r3, r2
 8012b0a:	68fa      	ldr	r2, [r7, #12]
 8012b0c:	431a      	orrs	r2, r3
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012b12:	2300      	movs	r3, #0
}
 8012b14:	4618      	mov	r0, r3
 8012b16:	3714      	adds	r7, #20
 8012b18:	46bd      	mov	sp, r7
 8012b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b1e:	4770      	bx	lr
 8012b20:	fffee0c0 	.word	0xfffee0c0

08012b24 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8012b24:	b480      	push	{r7}
 8012b26:	b083      	sub	sp, #12
 8012b28:	af00      	add	r7, sp, #0
 8012b2a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	691b      	ldr	r3, [r3, #16]
 8012b30:	b2db      	uxtb	r3, r3
}
 8012b32:	4618      	mov	r0, r3
 8012b34:	370c      	adds	r7, #12
 8012b36:	46bd      	mov	sp, r7
 8012b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b3c:	4770      	bx	lr

08012b3e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8012b3e:	b480      	push	{r7}
 8012b40:	b085      	sub	sp, #20
 8012b42:	af00      	add	r7, sp, #0
 8012b44:	6078      	str	r0, [r7, #4]
 8012b46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	3314      	adds	r3, #20
 8012b4c:	461a      	mov	r2, r3
 8012b4e:	683b      	ldr	r3, [r7, #0]
 8012b50:	4413      	add	r3, r2
 8012b52:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8012b54:	68fb      	ldr	r3, [r7, #12]
 8012b56:	681b      	ldr	r3, [r3, #0]
}
 8012b58:	4618      	mov	r0, r3
 8012b5a:	3714      	adds	r7, #20
 8012b5c:	46bd      	mov	sp, r7
 8012b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b62:	4770      	bx	lr

08012b64 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8012b64:	b480      	push	{r7}
 8012b66:	b085      	sub	sp, #20
 8012b68:	af00      	add	r7, sp, #0
 8012b6a:	6078      	str	r0, [r7, #4]
 8012b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012b6e:	2300      	movs	r3, #0
 8012b70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8012b72:	683b      	ldr	r3, [r7, #0]
 8012b74:	681a      	ldr	r2, [r3, #0]
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8012b7a:	683b      	ldr	r3, [r7, #0]
 8012b7c:	685a      	ldr	r2, [r3, #4]
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012b82:	683b      	ldr	r3, [r7, #0]
 8012b84:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8012b86:	683b      	ldr	r3, [r7, #0]
 8012b88:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012b8a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8012b8c:	683b      	ldr	r3, [r7, #0]
 8012b8e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8012b90:	431a      	orrs	r2, r3
                       Data->DPSM);
 8012b92:	683b      	ldr	r3, [r7, #0]
 8012b94:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8012b96:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012b98:	68fa      	ldr	r2, [r7, #12]
 8012b9a:	4313      	orrs	r3, r2
 8012b9c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012ba2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	431a      	orrs	r2, r3
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8012bae:	2300      	movs	r3, #0

}
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	3714      	adds	r7, #20
 8012bb4:	46bd      	mov	sp, r7
 8012bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bba:	4770      	bx	lr

08012bbc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8012bbc:	b580      	push	{r7, lr}
 8012bbe:	b088      	sub	sp, #32
 8012bc0:	af00      	add	r7, sp, #0
 8012bc2:	6078      	str	r0, [r7, #4]
 8012bc4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8012bc6:	683b      	ldr	r3, [r7, #0]
 8012bc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8012bca:	2310      	movs	r3, #16
 8012bcc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012bce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012bd2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012bd4:	2300      	movs	r3, #0
 8012bd6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012bd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012bdc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012bde:	f107 0308 	add.w	r3, r7, #8
 8012be2:	4619      	mov	r1, r3
 8012be4:	6878      	ldr	r0, [r7, #4]
 8012be6:	f7ff ff73 	bl	8012ad0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8012bea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012bee:	2110      	movs	r1, #16
 8012bf0:	6878      	ldr	r0, [r7, #4]
 8012bf2:	f000 fa5f 	bl	80130b4 <SDMMC_GetCmdResp1>
 8012bf6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012bf8:	69fb      	ldr	r3, [r7, #28]
}
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	3720      	adds	r7, #32
 8012bfe:	46bd      	mov	sp, r7
 8012c00:	bd80      	pop	{r7, pc}

08012c02 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012c02:	b580      	push	{r7, lr}
 8012c04:	b088      	sub	sp, #32
 8012c06:	af00      	add	r7, sp, #0
 8012c08:	6078      	str	r0, [r7, #4]
 8012c0a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012c0c:	683b      	ldr	r3, [r7, #0]
 8012c0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8012c10:	2311      	movs	r3, #17
 8012c12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012c14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012c18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012c1a:	2300      	movs	r3, #0
 8012c1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012c1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012c22:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012c24:	f107 0308 	add.w	r3, r7, #8
 8012c28:	4619      	mov	r1, r3
 8012c2a:	6878      	ldr	r0, [r7, #4]
 8012c2c:	f7ff ff50 	bl	8012ad0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012c30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012c34:	2111      	movs	r1, #17
 8012c36:	6878      	ldr	r0, [r7, #4]
 8012c38:	f000 fa3c 	bl	80130b4 <SDMMC_GetCmdResp1>
 8012c3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012c3e:	69fb      	ldr	r3, [r7, #28]
}
 8012c40:	4618      	mov	r0, r3
 8012c42:	3720      	adds	r7, #32
 8012c44:	46bd      	mov	sp, r7
 8012c46:	bd80      	pop	{r7, pc}

08012c48 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012c48:	b580      	push	{r7, lr}
 8012c4a:	b088      	sub	sp, #32
 8012c4c:	af00      	add	r7, sp, #0
 8012c4e:	6078      	str	r0, [r7, #4]
 8012c50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012c52:	683b      	ldr	r3, [r7, #0]
 8012c54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8012c56:	2312      	movs	r3, #18
 8012c58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012c5a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012c5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012c60:	2300      	movs	r3, #0
 8012c62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012c64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012c68:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012c6a:	f107 0308 	add.w	r3, r7, #8
 8012c6e:	4619      	mov	r1, r3
 8012c70:	6878      	ldr	r0, [r7, #4]
 8012c72:	f7ff ff2d 	bl	8012ad0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012c76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012c7a:	2112      	movs	r1, #18
 8012c7c:	6878      	ldr	r0, [r7, #4]
 8012c7e:	f000 fa19 	bl	80130b4 <SDMMC_GetCmdResp1>
 8012c82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012c84:	69fb      	ldr	r3, [r7, #28]
}
 8012c86:	4618      	mov	r0, r3
 8012c88:	3720      	adds	r7, #32
 8012c8a:	46bd      	mov	sp, r7
 8012c8c:	bd80      	pop	{r7, pc}

08012c8e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012c8e:	b580      	push	{r7, lr}
 8012c90:	b088      	sub	sp, #32
 8012c92:	af00      	add	r7, sp, #0
 8012c94:	6078      	str	r0, [r7, #4]
 8012c96:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012c98:	683b      	ldr	r3, [r7, #0]
 8012c9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8012c9c:	2318      	movs	r3, #24
 8012c9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012ca0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012ca4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012ca6:	2300      	movs	r3, #0
 8012ca8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012caa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012cae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012cb0:	f107 0308 	add.w	r3, r7, #8
 8012cb4:	4619      	mov	r1, r3
 8012cb6:	6878      	ldr	r0, [r7, #4]
 8012cb8:	f7ff ff0a 	bl	8012ad0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012cbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012cc0:	2118      	movs	r1, #24
 8012cc2:	6878      	ldr	r0, [r7, #4]
 8012cc4:	f000 f9f6 	bl	80130b4 <SDMMC_GetCmdResp1>
 8012cc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012cca:	69fb      	ldr	r3, [r7, #28]
}
 8012ccc:	4618      	mov	r0, r3
 8012cce:	3720      	adds	r7, #32
 8012cd0:	46bd      	mov	sp, r7
 8012cd2:	bd80      	pop	{r7, pc}

08012cd4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012cd4:	b580      	push	{r7, lr}
 8012cd6:	b088      	sub	sp, #32
 8012cd8:	af00      	add	r7, sp, #0
 8012cda:	6078      	str	r0, [r7, #4]
 8012cdc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012cde:	683b      	ldr	r3, [r7, #0]
 8012ce0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8012ce2:	2319      	movs	r3, #25
 8012ce4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012ce6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012cea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012cec:	2300      	movs	r3, #0
 8012cee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012cf0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012cf4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012cf6:	f107 0308 	add.w	r3, r7, #8
 8012cfa:	4619      	mov	r1, r3
 8012cfc:	6878      	ldr	r0, [r7, #4]
 8012cfe:	f7ff fee7 	bl	8012ad0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012d02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012d06:	2119      	movs	r1, #25
 8012d08:	6878      	ldr	r0, [r7, #4]
 8012d0a:	f000 f9d3 	bl	80130b4 <SDMMC_GetCmdResp1>
 8012d0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012d10:	69fb      	ldr	r3, [r7, #28]
}
 8012d12:	4618      	mov	r0, r3
 8012d14:	3720      	adds	r7, #32
 8012d16:	46bd      	mov	sp, r7
 8012d18:	bd80      	pop	{r7, pc}
	...

08012d1c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8012d1c:	b580      	push	{r7, lr}
 8012d1e:	b088      	sub	sp, #32
 8012d20:	af00      	add	r7, sp, #0
 8012d22:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8012d24:	2300      	movs	r3, #0
 8012d26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8012d28:	230c      	movs	r3, #12
 8012d2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012d2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012d30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012d32:	2300      	movs	r3, #0
 8012d34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012d36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012d3a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	68db      	ldr	r3, [r3, #12]
 8012d40:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	68db      	ldr	r3, [r3, #12]
 8012d4c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012d54:	f107 0308 	add.w	r3, r7, #8
 8012d58:	4619      	mov	r1, r3
 8012d5a:	6878      	ldr	r0, [r7, #4]
 8012d5c:	f7ff feb8 	bl	8012ad0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8012d60:	4a0b      	ldr	r2, [pc, #44]	@ (8012d90 <SDMMC_CmdStopTransfer+0x74>)
 8012d62:	210c      	movs	r1, #12
 8012d64:	6878      	ldr	r0, [r7, #4]
 8012d66:	f000 f9a5 	bl	80130b4 <SDMMC_GetCmdResp1>
 8012d6a:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	68db      	ldr	r3, [r3, #12]
 8012d70:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8012d78:	69fb      	ldr	r3, [r7, #28]
 8012d7a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012d7e:	d101      	bne.n	8012d84 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8012d80:	2300      	movs	r3, #0
 8012d82:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8012d84:	69fb      	ldr	r3, [r7, #28]
}
 8012d86:	4618      	mov	r0, r3
 8012d88:	3720      	adds	r7, #32
 8012d8a:	46bd      	mov	sp, r7
 8012d8c:	bd80      	pop	{r7, pc}
 8012d8e:	bf00      	nop
 8012d90:	05f5e100 	.word	0x05f5e100

08012d94 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8012d94:	b580      	push	{r7, lr}
 8012d96:	b088      	sub	sp, #32
 8012d98:	af00      	add	r7, sp, #0
 8012d9a:	6078      	str	r0, [r7, #4]
 8012d9c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8012d9e:	683b      	ldr	r3, [r7, #0]
 8012da0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8012da2:	2307      	movs	r3, #7
 8012da4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012da6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012daa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012dac:	2300      	movs	r3, #0
 8012dae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012db0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012db4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012db6:	f107 0308 	add.w	r3, r7, #8
 8012dba:	4619      	mov	r1, r3
 8012dbc:	6878      	ldr	r0, [r7, #4]
 8012dbe:	f7ff fe87 	bl	8012ad0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8012dc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012dc6:	2107      	movs	r1, #7
 8012dc8:	6878      	ldr	r0, [r7, #4]
 8012dca:	f000 f973 	bl	80130b4 <SDMMC_GetCmdResp1>
 8012dce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012dd0:	69fb      	ldr	r3, [r7, #28]
}
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	3720      	adds	r7, #32
 8012dd6:	46bd      	mov	sp, r7
 8012dd8:	bd80      	pop	{r7, pc}

08012dda <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8012dda:	b580      	push	{r7, lr}
 8012ddc:	b088      	sub	sp, #32
 8012dde:	af00      	add	r7, sp, #0
 8012de0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8012de2:	2300      	movs	r3, #0
 8012de4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8012de6:	2300      	movs	r3, #0
 8012de8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8012dea:	2300      	movs	r3, #0
 8012dec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012dee:	2300      	movs	r3, #0
 8012df0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012df2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012df6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012df8:	f107 0308 	add.w	r3, r7, #8
 8012dfc:	4619      	mov	r1, r3
 8012dfe:	6878      	ldr	r0, [r7, #4]
 8012e00:	f7ff fe66 	bl	8012ad0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8012e04:	6878      	ldr	r0, [r7, #4]
 8012e06:	f000 fb97 	bl	8013538 <SDMMC_GetCmdError>
 8012e0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012e0c:	69fb      	ldr	r3, [r7, #28]
}
 8012e0e:	4618      	mov	r0, r3
 8012e10:	3720      	adds	r7, #32
 8012e12:	46bd      	mov	sp, r7
 8012e14:	bd80      	pop	{r7, pc}

08012e16 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8012e16:	b580      	push	{r7, lr}
 8012e18:	b088      	sub	sp, #32
 8012e1a:	af00      	add	r7, sp, #0
 8012e1c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8012e1e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8012e22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8012e24:	2308      	movs	r3, #8
 8012e26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012e28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012e2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012e2e:	2300      	movs	r3, #0
 8012e30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012e32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012e36:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012e38:	f107 0308 	add.w	r3, r7, #8
 8012e3c:	4619      	mov	r1, r3
 8012e3e:	6878      	ldr	r0, [r7, #4]
 8012e40:	f7ff fe46 	bl	8012ad0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8012e44:	6878      	ldr	r0, [r7, #4]
 8012e46:	f000 fb29 	bl	801349c <SDMMC_GetCmdResp7>
 8012e4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012e4c:	69fb      	ldr	r3, [r7, #28]
}
 8012e4e:	4618      	mov	r0, r3
 8012e50:	3720      	adds	r7, #32
 8012e52:	46bd      	mov	sp, r7
 8012e54:	bd80      	pop	{r7, pc}

08012e56 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012e56:	b580      	push	{r7, lr}
 8012e58:	b088      	sub	sp, #32
 8012e5a:	af00      	add	r7, sp, #0
 8012e5c:	6078      	str	r0, [r7, #4]
 8012e5e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8012e60:	683b      	ldr	r3, [r7, #0]
 8012e62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8012e64:	2337      	movs	r3, #55	@ 0x37
 8012e66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012e68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012e6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012e6e:	2300      	movs	r3, #0
 8012e70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012e72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012e76:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012e78:	f107 0308 	add.w	r3, r7, #8
 8012e7c:	4619      	mov	r1, r3
 8012e7e:	6878      	ldr	r0, [r7, #4]
 8012e80:	f7ff fe26 	bl	8012ad0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8012e84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012e88:	2137      	movs	r1, #55	@ 0x37
 8012e8a:	6878      	ldr	r0, [r7, #4]
 8012e8c:	f000 f912 	bl	80130b4 <SDMMC_GetCmdResp1>
 8012e90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012e92:	69fb      	ldr	r3, [r7, #28]
}
 8012e94:	4618      	mov	r0, r3
 8012e96:	3720      	adds	r7, #32
 8012e98:	46bd      	mov	sp, r7
 8012e9a:	bd80      	pop	{r7, pc}

08012e9c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012e9c:	b580      	push	{r7, lr}
 8012e9e:	b088      	sub	sp, #32
 8012ea0:	af00      	add	r7, sp, #0
 8012ea2:	6078      	str	r0, [r7, #4]
 8012ea4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8012ea6:	683b      	ldr	r3, [r7, #0]
 8012ea8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8012eaa:	2329      	movs	r3, #41	@ 0x29
 8012eac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012eae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012eb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012eb4:	2300      	movs	r3, #0
 8012eb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012eb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012ebc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012ebe:	f107 0308 	add.w	r3, r7, #8
 8012ec2:	4619      	mov	r1, r3
 8012ec4:	6878      	ldr	r0, [r7, #4]
 8012ec6:	f7ff fe03 	bl	8012ad0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8012eca:	6878      	ldr	r0, [r7, #4]
 8012ecc:	f000 fa2e 	bl	801332c <SDMMC_GetCmdResp3>
 8012ed0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012ed2:	69fb      	ldr	r3, [r7, #28]
}
 8012ed4:	4618      	mov	r0, r3
 8012ed6:	3720      	adds	r7, #32
 8012ed8:	46bd      	mov	sp, r7
 8012eda:	bd80      	pop	{r7, pc}

08012edc <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8012edc:	b580      	push	{r7, lr}
 8012ede:	b088      	sub	sp, #32
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	6078      	str	r0, [r7, #4]
 8012ee4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8012ee6:	683b      	ldr	r3, [r7, #0]
 8012ee8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8012eea:	2306      	movs	r3, #6
 8012eec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012eee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012ef2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012ef4:	2300      	movs	r3, #0
 8012ef6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012ef8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012efc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012efe:	f107 0308 	add.w	r3, r7, #8
 8012f02:	4619      	mov	r1, r3
 8012f04:	6878      	ldr	r0, [r7, #4]
 8012f06:	f7ff fde3 	bl	8012ad0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8012f0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012f0e:	2106      	movs	r1, #6
 8012f10:	6878      	ldr	r0, [r7, #4]
 8012f12:	f000 f8cf 	bl	80130b4 <SDMMC_GetCmdResp1>
 8012f16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012f18:	69fb      	ldr	r3, [r7, #28]
}
 8012f1a:	4618      	mov	r0, r3
 8012f1c:	3720      	adds	r7, #32
 8012f1e:	46bd      	mov	sp, r7
 8012f20:	bd80      	pop	{r7, pc}

08012f22 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8012f22:	b580      	push	{r7, lr}
 8012f24:	b088      	sub	sp, #32
 8012f26:	af00      	add	r7, sp, #0
 8012f28:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8012f2a:	2300      	movs	r3, #0
 8012f2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8012f2e:	2333      	movs	r3, #51	@ 0x33
 8012f30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012f32:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012f36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012f38:	2300      	movs	r3, #0
 8012f3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012f3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012f40:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012f42:	f107 0308 	add.w	r3, r7, #8
 8012f46:	4619      	mov	r1, r3
 8012f48:	6878      	ldr	r0, [r7, #4]
 8012f4a:	f7ff fdc1 	bl	8012ad0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8012f4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012f52:	2133      	movs	r1, #51	@ 0x33
 8012f54:	6878      	ldr	r0, [r7, #4]
 8012f56:	f000 f8ad 	bl	80130b4 <SDMMC_GetCmdResp1>
 8012f5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012f5c:	69fb      	ldr	r3, [r7, #28]
}
 8012f5e:	4618      	mov	r0, r3
 8012f60:	3720      	adds	r7, #32
 8012f62:	46bd      	mov	sp, r7
 8012f64:	bd80      	pop	{r7, pc}

08012f66 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8012f66:	b580      	push	{r7, lr}
 8012f68:	b088      	sub	sp, #32
 8012f6a:	af00      	add	r7, sp, #0
 8012f6c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8012f6e:	2300      	movs	r3, #0
 8012f70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8012f72:	2302      	movs	r3, #2
 8012f74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012f76:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8012f7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012f7c:	2300      	movs	r3, #0
 8012f7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012f80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012f84:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012f86:	f107 0308 	add.w	r3, r7, #8
 8012f8a:	4619      	mov	r1, r3
 8012f8c:	6878      	ldr	r0, [r7, #4]
 8012f8e:	f7ff fd9f 	bl	8012ad0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012f92:	6878      	ldr	r0, [r7, #4]
 8012f94:	f000 f980 	bl	8013298 <SDMMC_GetCmdResp2>
 8012f98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012f9a:	69fb      	ldr	r3, [r7, #28]
}
 8012f9c:	4618      	mov	r0, r3
 8012f9e:	3720      	adds	r7, #32
 8012fa0:	46bd      	mov	sp, r7
 8012fa2:	bd80      	pop	{r7, pc}

08012fa4 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012fa4:	b580      	push	{r7, lr}
 8012fa6:	b088      	sub	sp, #32
 8012fa8:	af00      	add	r7, sp, #0
 8012faa:	6078      	str	r0, [r7, #4]
 8012fac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8012fae:	683b      	ldr	r3, [r7, #0]
 8012fb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8012fb2:	2309      	movs	r3, #9
 8012fb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012fb6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8012fba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012fbc:	2300      	movs	r3, #0
 8012fbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012fc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012fc4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012fc6:	f107 0308 	add.w	r3, r7, #8
 8012fca:	4619      	mov	r1, r3
 8012fcc:	6878      	ldr	r0, [r7, #4]
 8012fce:	f7ff fd7f 	bl	8012ad0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012fd2:	6878      	ldr	r0, [r7, #4]
 8012fd4:	f000 f960 	bl	8013298 <SDMMC_GetCmdResp2>
 8012fd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012fda:	69fb      	ldr	r3, [r7, #28]
}
 8012fdc:	4618      	mov	r0, r3
 8012fde:	3720      	adds	r7, #32
 8012fe0:	46bd      	mov	sp, r7
 8012fe2:	bd80      	pop	{r7, pc}

08012fe4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8012fe4:	b580      	push	{r7, lr}
 8012fe6:	b088      	sub	sp, #32
 8012fe8:	af00      	add	r7, sp, #0
 8012fea:	6078      	str	r0, [r7, #4]
 8012fec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8012fee:	2300      	movs	r3, #0
 8012ff0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8012ff2:	2303      	movs	r3, #3
 8012ff4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012ff6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012ffa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012ffc:	2300      	movs	r3, #0
 8012ffe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013000:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8013004:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013006:	f107 0308 	add.w	r3, r7, #8
 801300a:	4619      	mov	r1, r3
 801300c:	6878      	ldr	r0, [r7, #4]
 801300e:	f7ff fd5f 	bl	8012ad0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8013012:	683a      	ldr	r2, [r7, #0]
 8013014:	2103      	movs	r1, #3
 8013016:	6878      	ldr	r0, [r7, #4]
 8013018:	f000 f9c8 	bl	80133ac <SDMMC_GetCmdResp6>
 801301c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801301e:	69fb      	ldr	r3, [r7, #28]
}
 8013020:	4618      	mov	r0, r3
 8013022:	3720      	adds	r7, #32
 8013024:	46bd      	mov	sp, r7
 8013026:	bd80      	pop	{r7, pc}

08013028 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8013028:	b580      	push	{r7, lr}
 801302a:	b088      	sub	sp, #32
 801302c:	af00      	add	r7, sp, #0
 801302e:	6078      	str	r0, [r7, #4]
 8013030:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8013032:	683b      	ldr	r3, [r7, #0]
 8013034:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8013036:	230d      	movs	r3, #13
 8013038:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801303a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801303e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013040:	2300      	movs	r3, #0
 8013042:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013044:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8013048:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801304a:	f107 0308 	add.w	r3, r7, #8
 801304e:	4619      	mov	r1, r3
 8013050:	6878      	ldr	r0, [r7, #4]
 8013052:	f7ff fd3d 	bl	8012ad0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8013056:	f241 3288 	movw	r2, #5000	@ 0x1388
 801305a:	210d      	movs	r1, #13
 801305c:	6878      	ldr	r0, [r7, #4]
 801305e:	f000 f829 	bl	80130b4 <SDMMC_GetCmdResp1>
 8013062:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013064:	69fb      	ldr	r3, [r7, #28]
}
 8013066:	4618      	mov	r0, r3
 8013068:	3720      	adds	r7, #32
 801306a:	46bd      	mov	sp, r7
 801306c:	bd80      	pop	{r7, pc}

0801306e <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 801306e:	b580      	push	{r7, lr}
 8013070:	b088      	sub	sp, #32
 8013072:	af00      	add	r7, sp, #0
 8013074:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8013076:	2300      	movs	r3, #0
 8013078:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 801307a:	230d      	movs	r3, #13
 801307c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801307e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013082:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013084:	2300      	movs	r3, #0
 8013086:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013088:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801308c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801308e:	f107 0308 	add.w	r3, r7, #8
 8013092:	4619      	mov	r1, r3
 8013094:	6878      	ldr	r0, [r7, #4]
 8013096:	f7ff fd1b 	bl	8012ad0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 801309a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801309e:	210d      	movs	r1, #13
 80130a0:	6878      	ldr	r0, [r7, #4]
 80130a2:	f000 f807 	bl	80130b4 <SDMMC_GetCmdResp1>
 80130a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80130a8:	69fb      	ldr	r3, [r7, #28]
}
 80130aa:	4618      	mov	r0, r3
 80130ac:	3720      	adds	r7, #32
 80130ae:	46bd      	mov	sp, r7
 80130b0:	bd80      	pop	{r7, pc}
	...

080130b4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80130b4:	b580      	push	{r7, lr}
 80130b6:	b088      	sub	sp, #32
 80130b8:	af00      	add	r7, sp, #0
 80130ba:	60f8      	str	r0, [r7, #12]
 80130bc:	460b      	mov	r3, r1
 80130be:	607a      	str	r2, [r7, #4]
 80130c0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80130c2:	4b70      	ldr	r3, [pc, #448]	@ (8013284 <SDMMC_GetCmdResp1+0x1d0>)
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	4a70      	ldr	r2, [pc, #448]	@ (8013288 <SDMMC_GetCmdResp1+0x1d4>)
 80130c8:	fba2 2303 	umull	r2, r3, r2, r3
 80130cc:	0a5a      	lsrs	r2, r3, #9
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	fb02 f303 	mul.w	r3, r2, r3
 80130d4:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80130d6:	69fb      	ldr	r3, [r7, #28]
 80130d8:	1e5a      	subs	r2, r3, #1
 80130da:	61fa      	str	r2, [r7, #28]
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d102      	bne.n	80130e6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80130e0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80130e4:	e0c9      	b.n	801327a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80130e6:	68fb      	ldr	r3, [r7, #12]
 80130e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80130ea:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80130ec:	69ba      	ldr	r2, [r7, #24]
 80130ee:	4b67      	ldr	r3, [pc, #412]	@ (801328c <SDMMC_GetCmdResp1+0x1d8>)
 80130f0:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d0ef      	beq.n	80130d6 <SDMMC_GetCmdResp1+0x22>
 80130f6:	69bb      	ldr	r3, [r7, #24]
 80130f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d1ea      	bne.n	80130d6 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013104:	f003 0304 	and.w	r3, r3, #4
 8013108:	2b00      	cmp	r3, #0
 801310a:	d004      	beq.n	8013116 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	2204      	movs	r2, #4
 8013110:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013112:	2304      	movs	r3, #4
 8013114:	e0b1      	b.n	801327a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801311a:	f003 0301 	and.w	r3, r3, #1
 801311e:	2b00      	cmp	r3, #0
 8013120:	d004      	beq.n	801312c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	2201      	movs	r2, #1
 8013126:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013128:	2301      	movs	r3, #1
 801312a:	e0a6      	b.n	801327a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	4a58      	ldr	r2, [pc, #352]	@ (8013290 <SDMMC_GetCmdResp1+0x1dc>)
 8013130:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8013132:	68f8      	ldr	r0, [r7, #12]
 8013134:	f7ff fcf6 	bl	8012b24 <SDMMC_GetCommandResponse>
 8013138:	4603      	mov	r3, r0
 801313a:	461a      	mov	r2, r3
 801313c:	7afb      	ldrb	r3, [r7, #11]
 801313e:	4293      	cmp	r3, r2
 8013140:	d001      	beq.n	8013146 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013142:	2301      	movs	r3, #1
 8013144:	e099      	b.n	801327a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8013146:	2100      	movs	r1, #0
 8013148:	68f8      	ldr	r0, [r7, #12]
 801314a:	f7ff fcf8 	bl	8012b3e <SDMMC_GetResponse>
 801314e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8013150:	697a      	ldr	r2, [r7, #20]
 8013152:	4b50      	ldr	r3, [pc, #320]	@ (8013294 <SDMMC_GetCmdResp1+0x1e0>)
 8013154:	4013      	ands	r3, r2
 8013156:	2b00      	cmp	r3, #0
 8013158:	d101      	bne.n	801315e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 801315a:	2300      	movs	r3, #0
 801315c:	e08d      	b.n	801327a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801315e:	697b      	ldr	r3, [r7, #20]
 8013160:	2b00      	cmp	r3, #0
 8013162:	da02      	bge.n	801316a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8013164:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8013168:	e087      	b.n	801327a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801316a:	697b      	ldr	r3, [r7, #20]
 801316c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8013170:	2b00      	cmp	r3, #0
 8013172:	d001      	beq.n	8013178 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8013174:	2340      	movs	r3, #64	@ 0x40
 8013176:	e080      	b.n	801327a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8013178:	697b      	ldr	r3, [r7, #20]
 801317a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801317e:	2b00      	cmp	r3, #0
 8013180:	d001      	beq.n	8013186 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8013182:	2380      	movs	r3, #128	@ 0x80
 8013184:	e079      	b.n	801327a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8013186:	697b      	ldr	r3, [r7, #20]
 8013188:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801318c:	2b00      	cmp	r3, #0
 801318e:	d002      	beq.n	8013196 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8013190:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013194:	e071      	b.n	801327a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8013196:	697b      	ldr	r3, [r7, #20]
 8013198:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801319c:	2b00      	cmp	r3, #0
 801319e:	d002      	beq.n	80131a6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80131a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80131a4:	e069      	b.n	801327a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80131a6:	697b      	ldr	r3, [r7, #20]
 80131a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d002      	beq.n	80131b6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80131b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80131b4:	e061      	b.n	801327a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80131b6:	697b      	ldr	r3, [r7, #20]
 80131b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d002      	beq.n	80131c6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80131c0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80131c4:	e059      	b.n	801327a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80131c6:	697b      	ldr	r3, [r7, #20]
 80131c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d002      	beq.n	80131d6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80131d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80131d4:	e051      	b.n	801327a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80131d6:	697b      	ldr	r3, [r7, #20]
 80131d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d002      	beq.n	80131e6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80131e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80131e4:	e049      	b.n	801327a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80131e6:	697b      	ldr	r3, [r7, #20]
 80131e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d002      	beq.n	80131f6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80131f0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80131f4:	e041      	b.n	801327a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80131f6:	697b      	ldr	r3, [r7, #20]
 80131f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d002      	beq.n	8013206 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8013200:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013204:	e039      	b.n	801327a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8013206:	697b      	ldr	r3, [r7, #20]
 8013208:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801320c:	2b00      	cmp	r3, #0
 801320e:	d002      	beq.n	8013216 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8013210:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8013214:	e031      	b.n	801327a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8013216:	697b      	ldr	r3, [r7, #20]
 8013218:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801321c:	2b00      	cmp	r3, #0
 801321e:	d002      	beq.n	8013226 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8013220:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8013224:	e029      	b.n	801327a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8013226:	697b      	ldr	r3, [r7, #20]
 8013228:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801322c:	2b00      	cmp	r3, #0
 801322e:	d002      	beq.n	8013236 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8013230:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8013234:	e021      	b.n	801327a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8013236:	697b      	ldr	r3, [r7, #20]
 8013238:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801323c:	2b00      	cmp	r3, #0
 801323e:	d002      	beq.n	8013246 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8013240:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8013244:	e019      	b.n	801327a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8013246:	697b      	ldr	r3, [r7, #20]
 8013248:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801324c:	2b00      	cmp	r3, #0
 801324e:	d002      	beq.n	8013256 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8013250:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8013254:	e011      	b.n	801327a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8013256:	697b      	ldr	r3, [r7, #20]
 8013258:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801325c:	2b00      	cmp	r3, #0
 801325e:	d002      	beq.n	8013266 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8013260:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8013264:	e009      	b.n	801327a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8013266:	697b      	ldr	r3, [r7, #20]
 8013268:	f003 0308 	and.w	r3, r3, #8
 801326c:	2b00      	cmp	r3, #0
 801326e:	d002      	beq.n	8013276 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8013270:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8013274:	e001      	b.n	801327a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8013276:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 801327a:	4618      	mov	r0, r3
 801327c:	3720      	adds	r7, #32
 801327e:	46bd      	mov	sp, r7
 8013280:	bd80      	pop	{r7, pc}
 8013282:	bf00      	nop
 8013284:	24000024 	.word	0x24000024
 8013288:	10624dd3 	.word	0x10624dd3
 801328c:	00200045 	.word	0x00200045
 8013290:	002000c5 	.word	0x002000c5
 8013294:	fdffe008 	.word	0xfdffe008

08013298 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8013298:	b480      	push	{r7}
 801329a:	b085      	sub	sp, #20
 801329c:	af00      	add	r7, sp, #0
 801329e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80132a0:	4b1f      	ldr	r3, [pc, #124]	@ (8013320 <SDMMC_GetCmdResp2+0x88>)
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	4a1f      	ldr	r2, [pc, #124]	@ (8013324 <SDMMC_GetCmdResp2+0x8c>)
 80132a6:	fba2 2303 	umull	r2, r3, r2, r3
 80132aa:	0a5b      	lsrs	r3, r3, #9
 80132ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80132b0:	fb02 f303 	mul.w	r3, r2, r3
 80132b4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	1e5a      	subs	r2, r3, #1
 80132ba:	60fa      	str	r2, [r7, #12]
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d102      	bne.n	80132c6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80132c0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80132c4:	e026      	b.n	8013314 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80132ca:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80132cc:	68bb      	ldr	r3, [r7, #8]
 80132ce:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d0ef      	beq.n	80132b6 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80132d6:	68bb      	ldr	r3, [r7, #8]
 80132d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d1ea      	bne.n	80132b6 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80132e4:	f003 0304 	and.w	r3, r3, #4
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d004      	beq.n	80132f6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	2204      	movs	r2, #4
 80132f0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80132f2:	2304      	movs	r3, #4
 80132f4:	e00e      	b.n	8013314 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80132fa:	f003 0301 	and.w	r3, r3, #1
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d004      	beq.n	801330c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	2201      	movs	r2, #1
 8013306:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013308:	2301      	movs	r3, #1
 801330a:	e003      	b.n	8013314 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	4a06      	ldr	r2, [pc, #24]	@ (8013328 <SDMMC_GetCmdResp2+0x90>)
 8013310:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8013312:	2300      	movs	r3, #0
}
 8013314:	4618      	mov	r0, r3
 8013316:	3714      	adds	r7, #20
 8013318:	46bd      	mov	sp, r7
 801331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801331e:	4770      	bx	lr
 8013320:	24000024 	.word	0x24000024
 8013324:	10624dd3 	.word	0x10624dd3
 8013328:	002000c5 	.word	0x002000c5

0801332c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 801332c:	b480      	push	{r7}
 801332e:	b085      	sub	sp, #20
 8013330:	af00      	add	r7, sp, #0
 8013332:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013334:	4b1a      	ldr	r3, [pc, #104]	@ (80133a0 <SDMMC_GetCmdResp3+0x74>)
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	4a1a      	ldr	r2, [pc, #104]	@ (80133a4 <SDMMC_GetCmdResp3+0x78>)
 801333a:	fba2 2303 	umull	r2, r3, r2, r3
 801333e:	0a5b      	lsrs	r3, r3, #9
 8013340:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013344:	fb02 f303 	mul.w	r3, r2, r3
 8013348:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	1e5a      	subs	r2, r3, #1
 801334e:	60fa      	str	r2, [r7, #12]
 8013350:	2b00      	cmp	r3, #0
 8013352:	d102      	bne.n	801335a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013354:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8013358:	e01b      	b.n	8013392 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801335e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013360:	68bb      	ldr	r3, [r7, #8]
 8013362:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8013366:	2b00      	cmp	r3, #0
 8013368:	d0ef      	beq.n	801334a <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801336a:	68bb      	ldr	r3, [r7, #8]
 801336c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013370:	2b00      	cmp	r3, #0
 8013372:	d1ea      	bne.n	801334a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013378:	f003 0304 	and.w	r3, r3, #4
 801337c:	2b00      	cmp	r3, #0
 801337e:	d004      	beq.n	801338a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	2204      	movs	r2, #4
 8013384:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013386:	2304      	movs	r3, #4
 8013388:	e003      	b.n	8013392 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	4a06      	ldr	r2, [pc, #24]	@ (80133a8 <SDMMC_GetCmdResp3+0x7c>)
 801338e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8013390:	2300      	movs	r3, #0
}
 8013392:	4618      	mov	r0, r3
 8013394:	3714      	adds	r7, #20
 8013396:	46bd      	mov	sp, r7
 8013398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801339c:	4770      	bx	lr
 801339e:	bf00      	nop
 80133a0:	24000024 	.word	0x24000024
 80133a4:	10624dd3 	.word	0x10624dd3
 80133a8:	002000c5 	.word	0x002000c5

080133ac <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80133ac:	b580      	push	{r7, lr}
 80133ae:	b088      	sub	sp, #32
 80133b0:	af00      	add	r7, sp, #0
 80133b2:	60f8      	str	r0, [r7, #12]
 80133b4:	460b      	mov	r3, r1
 80133b6:	607a      	str	r2, [r7, #4]
 80133b8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80133ba:	4b35      	ldr	r3, [pc, #212]	@ (8013490 <SDMMC_GetCmdResp6+0xe4>)
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	4a35      	ldr	r2, [pc, #212]	@ (8013494 <SDMMC_GetCmdResp6+0xe8>)
 80133c0:	fba2 2303 	umull	r2, r3, r2, r3
 80133c4:	0a5b      	lsrs	r3, r3, #9
 80133c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80133ca:	fb02 f303 	mul.w	r3, r2, r3
 80133ce:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80133d0:	69fb      	ldr	r3, [r7, #28]
 80133d2:	1e5a      	subs	r2, r3, #1
 80133d4:	61fa      	str	r2, [r7, #28]
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d102      	bne.n	80133e0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80133da:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80133de:	e052      	b.n	8013486 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80133e4:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80133e6:	69bb      	ldr	r3, [r7, #24]
 80133e8:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d0ef      	beq.n	80133d0 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80133f0:	69bb      	ldr	r3, [r7, #24]
 80133f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d1ea      	bne.n	80133d0 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80133fa:	68fb      	ldr	r3, [r7, #12]
 80133fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80133fe:	f003 0304 	and.w	r3, r3, #4
 8013402:	2b00      	cmp	r3, #0
 8013404:	d004      	beq.n	8013410 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013406:	68fb      	ldr	r3, [r7, #12]
 8013408:	2204      	movs	r2, #4
 801340a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801340c:	2304      	movs	r3, #4
 801340e:	e03a      	b.n	8013486 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013410:	68fb      	ldr	r3, [r7, #12]
 8013412:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013414:	f003 0301 	and.w	r3, r3, #1
 8013418:	2b00      	cmp	r3, #0
 801341a:	d004      	beq.n	8013426 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801341c:	68fb      	ldr	r3, [r7, #12]
 801341e:	2201      	movs	r2, #1
 8013420:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013422:	2301      	movs	r3, #1
 8013424:	e02f      	b.n	8013486 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8013426:	68f8      	ldr	r0, [r7, #12]
 8013428:	f7ff fb7c 	bl	8012b24 <SDMMC_GetCommandResponse>
 801342c:	4603      	mov	r3, r0
 801342e:	461a      	mov	r2, r3
 8013430:	7afb      	ldrb	r3, [r7, #11]
 8013432:	4293      	cmp	r3, r2
 8013434:	d001      	beq.n	801343a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013436:	2301      	movs	r3, #1
 8013438:	e025      	b.n	8013486 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801343a:	68fb      	ldr	r3, [r7, #12]
 801343c:	4a16      	ldr	r2, [pc, #88]	@ (8013498 <SDMMC_GetCmdResp6+0xec>)
 801343e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8013440:	2100      	movs	r1, #0
 8013442:	68f8      	ldr	r0, [r7, #12]
 8013444:	f7ff fb7b 	bl	8012b3e <SDMMC_GetResponse>
 8013448:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 801344a:	697b      	ldr	r3, [r7, #20]
 801344c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8013450:	2b00      	cmp	r3, #0
 8013452:	d106      	bne.n	8013462 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8013454:	697b      	ldr	r3, [r7, #20]
 8013456:	0c1b      	lsrs	r3, r3, #16
 8013458:	b29a      	uxth	r2, r3
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 801345e:	2300      	movs	r3, #0
 8013460:	e011      	b.n	8013486 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8013462:	697b      	ldr	r3, [r7, #20]
 8013464:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8013468:	2b00      	cmp	r3, #0
 801346a:	d002      	beq.n	8013472 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801346c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8013470:	e009      	b.n	8013486 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8013472:	697b      	ldr	r3, [r7, #20]
 8013474:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8013478:	2b00      	cmp	r3, #0
 801347a:	d002      	beq.n	8013482 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801347c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8013480:	e001      	b.n	8013486 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8013482:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8013486:	4618      	mov	r0, r3
 8013488:	3720      	adds	r7, #32
 801348a:	46bd      	mov	sp, r7
 801348c:	bd80      	pop	{r7, pc}
 801348e:	bf00      	nop
 8013490:	24000024 	.word	0x24000024
 8013494:	10624dd3 	.word	0x10624dd3
 8013498:	002000c5 	.word	0x002000c5

0801349c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 801349c:	b480      	push	{r7}
 801349e:	b085      	sub	sp, #20
 80134a0:	af00      	add	r7, sp, #0
 80134a2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80134a4:	4b22      	ldr	r3, [pc, #136]	@ (8013530 <SDMMC_GetCmdResp7+0x94>)
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	4a22      	ldr	r2, [pc, #136]	@ (8013534 <SDMMC_GetCmdResp7+0x98>)
 80134aa:	fba2 2303 	umull	r2, r3, r2, r3
 80134ae:	0a5b      	lsrs	r3, r3, #9
 80134b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80134b4:	fb02 f303 	mul.w	r3, r2, r3
 80134b8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	1e5a      	subs	r2, r3, #1
 80134be:	60fa      	str	r2, [r7, #12]
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d102      	bne.n	80134ca <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80134c4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80134c8:	e02c      	b.n	8013524 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80134ce:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80134d0:	68bb      	ldr	r3, [r7, #8]
 80134d2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d0ef      	beq.n	80134ba <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80134da:	68bb      	ldr	r3, [r7, #8]
 80134dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d1ea      	bne.n	80134ba <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80134e8:	f003 0304 	and.w	r3, r3, #4
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d004      	beq.n	80134fa <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	2204      	movs	r2, #4
 80134f4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80134f6:	2304      	movs	r3, #4
 80134f8:	e014      	b.n	8013524 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80134fe:	f003 0301 	and.w	r3, r3, #1
 8013502:	2b00      	cmp	r3, #0
 8013504:	d004      	beq.n	8013510 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	2201      	movs	r2, #1
 801350a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801350c:	2301      	movs	r3, #1
 801350e:	e009      	b.n	8013524 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013514:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013518:	2b00      	cmp	r3, #0
 801351a:	d002      	beq.n	8013522 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	2240      	movs	r2, #64	@ 0x40
 8013520:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8013522:	2300      	movs	r3, #0

}
 8013524:	4618      	mov	r0, r3
 8013526:	3714      	adds	r7, #20
 8013528:	46bd      	mov	sp, r7
 801352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801352e:	4770      	bx	lr
 8013530:	24000024 	.word	0x24000024
 8013534:	10624dd3 	.word	0x10624dd3

08013538 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8013538:	b480      	push	{r7}
 801353a:	b085      	sub	sp, #20
 801353c:	af00      	add	r7, sp, #0
 801353e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013540:	4b11      	ldr	r3, [pc, #68]	@ (8013588 <SDMMC_GetCmdError+0x50>)
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	4a11      	ldr	r2, [pc, #68]	@ (801358c <SDMMC_GetCmdError+0x54>)
 8013546:	fba2 2303 	umull	r2, r3, r2, r3
 801354a:	0a5b      	lsrs	r3, r3, #9
 801354c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013550:	fb02 f303 	mul.w	r3, r2, r3
 8013554:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	1e5a      	subs	r2, r3, #1
 801355a:	60fa      	str	r2, [r7, #12]
 801355c:	2b00      	cmp	r3, #0
 801355e:	d102      	bne.n	8013566 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013560:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8013564:	e009      	b.n	801357a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801356a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801356e:	2b00      	cmp	r3, #0
 8013570:	d0f1      	beq.n	8013556 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	4a06      	ldr	r2, [pc, #24]	@ (8013590 <SDMMC_GetCmdError+0x58>)
 8013576:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 8013578:	2300      	movs	r3, #0
}
 801357a:	4618      	mov	r0, r3
 801357c:	3714      	adds	r7, #20
 801357e:	46bd      	mov	sp, r7
 8013580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013584:	4770      	bx	lr
 8013586:	bf00      	nop
 8013588:	24000024 	.word	0x24000024
 801358c:	10624dd3 	.word	0x10624dd3
 8013590:	002000c5 	.word	0x002000c5

08013594 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8013594:	b580      	push	{r7, lr}
 8013596:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8013598:	4904      	ldr	r1, [pc, #16]	@ (80135ac <MX_FATFS_Init+0x18>)
 801359a:	4805      	ldr	r0, [pc, #20]	@ (80135b0 <MX_FATFS_Init+0x1c>)
 801359c:	f000 fa8e 	bl	8013abc <FATFS_LinkDriver>
 80135a0:	4603      	mov	r3, r0
 80135a2:	461a      	mov	r2, r3
 80135a4:	4b03      	ldr	r3, [pc, #12]	@ (80135b4 <MX_FATFS_Init+0x20>)
 80135a6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80135a8:	bf00      	nop
 80135aa:	bd80      	pop	{r7, pc}
 80135ac:	24000964 	.word	0x24000964
 80135b0:	08014998 	.word	0x08014998
 80135b4:	24000960 	.word	0x24000960

080135b8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80135b8:	b580      	push	{r7, lr}
 80135ba:	b082      	sub	sp, #8
 80135bc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80135be:	2300      	movs	r3, #0
 80135c0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80135c2:	f000 f885 	bl	80136d0 <BSP_SD_IsDetected>
 80135c6:	4603      	mov	r3, r0
 80135c8:	2b01      	cmp	r3, #1
 80135ca:	d001      	beq.n	80135d0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80135cc:	2302      	movs	r3, #2
 80135ce:	e012      	b.n	80135f6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80135d0:	480b      	ldr	r0, [pc, #44]	@ (8013600 <BSP_SD_Init+0x48>)
 80135d2:	f7f9 ffb7 	bl	800d544 <HAL_SD_Init>
 80135d6:	4603      	mov	r3, r0
 80135d8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80135da:	79fb      	ldrb	r3, [r7, #7]
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d109      	bne.n	80135f4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80135e0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80135e4:	4806      	ldr	r0, [pc, #24]	@ (8013600 <BSP_SD_Init+0x48>)
 80135e6:	f7fa fe6d 	bl	800e2c4 <HAL_SD_ConfigWideBusOperation>
 80135ea:	4603      	mov	r3, r0
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d001      	beq.n	80135f4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80135f0:	2301      	movs	r3, #1
 80135f2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80135f4:	79fb      	ldrb	r3, [r7, #7]
}
 80135f6:	4618      	mov	r0, r3
 80135f8:	3708      	adds	r7, #8
 80135fa:	46bd      	mov	sp, r7
 80135fc:	bd80      	pop	{r7, pc}
 80135fe:	bf00      	nop
 8013600:	240003e4 	.word	0x240003e4

08013604 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8013604:	b580      	push	{r7, lr}
 8013606:	b086      	sub	sp, #24
 8013608:	af00      	add	r7, sp, #0
 801360a:	60f8      	str	r0, [r7, #12]
 801360c:	60b9      	str	r1, [r7, #8]
 801360e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8013610:	2300      	movs	r3, #0
 8013612:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	68ba      	ldr	r2, [r7, #8]
 8013618:	68f9      	ldr	r1, [r7, #12]
 801361a:	4806      	ldr	r0, [pc, #24]	@ (8013634 <BSP_SD_ReadBlocks_DMA+0x30>)
 801361c:	f7fa f8b2 	bl	800d784 <HAL_SD_ReadBlocks_DMA>
 8013620:	4603      	mov	r3, r0
 8013622:	2b00      	cmp	r3, #0
 8013624:	d001      	beq.n	801362a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8013626:	2301      	movs	r3, #1
 8013628:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801362a:	7dfb      	ldrb	r3, [r7, #23]
}
 801362c:	4618      	mov	r0, r3
 801362e:	3718      	adds	r7, #24
 8013630:	46bd      	mov	sp, r7
 8013632:	bd80      	pop	{r7, pc}
 8013634:	240003e4 	.word	0x240003e4

08013638 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8013638:	b580      	push	{r7, lr}
 801363a:	b086      	sub	sp, #24
 801363c:	af00      	add	r7, sp, #0
 801363e:	60f8      	str	r0, [r7, #12]
 8013640:	60b9      	str	r1, [r7, #8]
 8013642:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8013644:	2300      	movs	r3, #0
 8013646:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	68ba      	ldr	r2, [r7, #8]
 801364c:	68f9      	ldr	r1, [r7, #12]
 801364e:	4806      	ldr	r0, [pc, #24]	@ (8013668 <BSP_SD_WriteBlocks_DMA+0x30>)
 8013650:	f7fa f940 	bl	800d8d4 <HAL_SD_WriteBlocks_DMA>
 8013654:	4603      	mov	r3, r0
 8013656:	2b00      	cmp	r3, #0
 8013658:	d001      	beq.n	801365e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801365a:	2301      	movs	r3, #1
 801365c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801365e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013660:	4618      	mov	r0, r3
 8013662:	3718      	adds	r7, #24
 8013664:	46bd      	mov	sp, r7
 8013666:	bd80      	pop	{r7, pc}
 8013668:	240003e4 	.word	0x240003e4

0801366c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 801366c:	b580      	push	{r7, lr}
 801366e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8013670:	4805      	ldr	r0, [pc, #20]	@ (8013688 <BSP_SD_GetCardState+0x1c>)
 8013672:	f7fa ff39 	bl	800e4e8 <HAL_SD_GetCardState>
 8013676:	4603      	mov	r3, r0
 8013678:	2b04      	cmp	r3, #4
 801367a:	bf14      	ite	ne
 801367c:	2301      	movne	r3, #1
 801367e:	2300      	moveq	r3, #0
 8013680:	b2db      	uxtb	r3, r3
}
 8013682:	4618      	mov	r0, r3
 8013684:	bd80      	pop	{r7, pc}
 8013686:	bf00      	nop
 8013688:	240003e4 	.word	0x240003e4

0801368c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 801368c:	b580      	push	{r7, lr}
 801368e:	b082      	sub	sp, #8
 8013690:	af00      	add	r7, sp, #0
 8013692:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8013694:	6879      	ldr	r1, [r7, #4]
 8013696:	4803      	ldr	r0, [pc, #12]	@ (80136a4 <BSP_SD_GetCardInfo+0x18>)
 8013698:	f7fa fde8 	bl	800e26c <HAL_SD_GetCardInfo>
}
 801369c:	bf00      	nop
 801369e:	3708      	adds	r7, #8
 80136a0:	46bd      	mov	sp, r7
 80136a2:	bd80      	pop	{r7, pc}
 80136a4:	240003e4 	.word	0x240003e4

080136a8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80136a8:	b580      	push	{r7, lr}
 80136aa:	b082      	sub	sp, #8
 80136ac:	af00      	add	r7, sp, #0
 80136ae:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80136b0:	f000 f9a0 	bl	80139f4 <BSP_SD_WriteCpltCallback>
}
 80136b4:	bf00      	nop
 80136b6:	3708      	adds	r7, #8
 80136b8:	46bd      	mov	sp, r7
 80136ba:	bd80      	pop	{r7, pc}

080136bc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80136bc:	b580      	push	{r7, lr}
 80136be:	b082      	sub	sp, #8
 80136c0:	af00      	add	r7, sp, #0
 80136c2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80136c4:	f000 f9a2 	bl	8013a0c <BSP_SD_ReadCpltCallback>
}
 80136c8:	bf00      	nop
 80136ca:	3708      	adds	r7, #8
 80136cc:	46bd      	mov	sp, r7
 80136ce:	bd80      	pop	{r7, pc}

080136d0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80136d0:	b580      	push	{r7, lr}
 80136d2:	b082      	sub	sp, #8
 80136d4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80136d6:	2301      	movs	r3, #1
 80136d8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80136da:	f000 f80b 	bl	80136f4 <BSP_PlatformIsDetected>
 80136de:	4603      	mov	r3, r0
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d101      	bne.n	80136e8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80136e4:	2300      	movs	r3, #0
 80136e6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80136e8:	79fb      	ldrb	r3, [r7, #7]
 80136ea:	b2db      	uxtb	r3, r3
}
 80136ec:	4618      	mov	r0, r3
 80136ee:	3708      	adds	r7, #8
 80136f0:	46bd      	mov	sp, r7
 80136f2:	bd80      	pop	{r7, pc}

080136f4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80136f4:	b580      	push	{r7, lr}
 80136f6:	b082      	sub	sp, #8
 80136f8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80136fa:	2301      	movs	r3, #1
 80136fc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80136fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8013702:	4806      	ldr	r0, [pc, #24]	@ (801371c <BSP_PlatformIsDetected+0x28>)
 8013704:	f7f6 fb66 	bl	8009dd4 <HAL_GPIO_ReadPin>
 8013708:	4603      	mov	r3, r0
 801370a:	2b00      	cmp	r3, #0
 801370c:	d001      	beq.n	8013712 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 801370e:	2300      	movs	r3, #0
 8013710:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8013712:	79fb      	ldrb	r3, [r7, #7]
}
 8013714:	4618      	mov	r0, r3
 8013716:	3708      	adds	r7, #8
 8013718:	46bd      	mov	sp, r7
 801371a:	bd80      	pop	{r7, pc}
 801371c:	58021400 	.word	0x58021400

08013720 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8013720:	b580      	push	{r7, lr}
 8013722:	b084      	sub	sp, #16
 8013724:	af00      	add	r7, sp, #0
 8013726:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8013728:	f7f0 f9cc 	bl	8003ac4 <HAL_GetTick>
 801372c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 801372e:	e006      	b.n	801373e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013730:	f7ff ff9c 	bl	801366c <BSP_SD_GetCardState>
 8013734:	4603      	mov	r3, r0
 8013736:	2b00      	cmp	r3, #0
 8013738:	d101      	bne.n	801373e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801373a:	2300      	movs	r3, #0
 801373c:	e009      	b.n	8013752 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 801373e:	f7f0 f9c1 	bl	8003ac4 <HAL_GetTick>
 8013742:	4602      	mov	r2, r0
 8013744:	68fb      	ldr	r3, [r7, #12]
 8013746:	1ad3      	subs	r3, r2, r3
 8013748:	687a      	ldr	r2, [r7, #4]
 801374a:	429a      	cmp	r2, r3
 801374c:	d8f0      	bhi.n	8013730 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801374e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013752:	4618      	mov	r0, r3
 8013754:	3710      	adds	r7, #16
 8013756:	46bd      	mov	sp, r7
 8013758:	bd80      	pop	{r7, pc}
	...

0801375c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 801375c:	b580      	push	{r7, lr}
 801375e:	b082      	sub	sp, #8
 8013760:	af00      	add	r7, sp, #0
 8013762:	4603      	mov	r3, r0
 8013764:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8013766:	4b0b      	ldr	r3, [pc, #44]	@ (8013794 <SD_CheckStatus+0x38>)
 8013768:	2201      	movs	r2, #1
 801376a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 801376c:	f7ff ff7e 	bl	801366c <BSP_SD_GetCardState>
 8013770:	4603      	mov	r3, r0
 8013772:	2b00      	cmp	r3, #0
 8013774:	d107      	bne.n	8013786 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8013776:	4b07      	ldr	r3, [pc, #28]	@ (8013794 <SD_CheckStatus+0x38>)
 8013778:	781b      	ldrb	r3, [r3, #0]
 801377a:	b2db      	uxtb	r3, r3
 801377c:	f023 0301 	bic.w	r3, r3, #1
 8013780:	b2da      	uxtb	r2, r3
 8013782:	4b04      	ldr	r3, [pc, #16]	@ (8013794 <SD_CheckStatus+0x38>)
 8013784:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8013786:	4b03      	ldr	r3, [pc, #12]	@ (8013794 <SD_CheckStatus+0x38>)
 8013788:	781b      	ldrb	r3, [r3, #0]
 801378a:	b2db      	uxtb	r3, r3
}
 801378c:	4618      	mov	r0, r3
 801378e:	3708      	adds	r7, #8
 8013790:	46bd      	mov	sp, r7
 8013792:	bd80      	pop	{r7, pc}
 8013794:	24000031 	.word	0x24000031

08013798 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8013798:	b580      	push	{r7, lr}
 801379a:	b082      	sub	sp, #8
 801379c:	af00      	add	r7, sp, #0
 801379e:	4603      	mov	r3, r0
 80137a0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80137a2:	f7ff ff09 	bl	80135b8 <BSP_SD_Init>
 80137a6:	4603      	mov	r3, r0
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d107      	bne.n	80137bc <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80137ac:	79fb      	ldrb	r3, [r7, #7]
 80137ae:	4618      	mov	r0, r3
 80137b0:	f7ff ffd4 	bl	801375c <SD_CheckStatus>
 80137b4:	4603      	mov	r3, r0
 80137b6:	461a      	mov	r2, r3
 80137b8:	4b04      	ldr	r3, [pc, #16]	@ (80137cc <SD_initialize+0x34>)
 80137ba:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80137bc:	4b03      	ldr	r3, [pc, #12]	@ (80137cc <SD_initialize+0x34>)
 80137be:	781b      	ldrb	r3, [r3, #0]
 80137c0:	b2db      	uxtb	r3, r3
}
 80137c2:	4618      	mov	r0, r3
 80137c4:	3708      	adds	r7, #8
 80137c6:	46bd      	mov	sp, r7
 80137c8:	bd80      	pop	{r7, pc}
 80137ca:	bf00      	nop
 80137cc:	24000031 	.word	0x24000031

080137d0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80137d0:	b580      	push	{r7, lr}
 80137d2:	b082      	sub	sp, #8
 80137d4:	af00      	add	r7, sp, #0
 80137d6:	4603      	mov	r3, r0
 80137d8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80137da:	79fb      	ldrb	r3, [r7, #7]
 80137dc:	4618      	mov	r0, r3
 80137de:	f7ff ffbd 	bl	801375c <SD_CheckStatus>
 80137e2:	4603      	mov	r3, r0
}
 80137e4:	4618      	mov	r0, r3
 80137e6:	3708      	adds	r7, #8
 80137e8:	46bd      	mov	sp, r7
 80137ea:	bd80      	pop	{r7, pc}

080137ec <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80137ec:	b580      	push	{r7, lr}
 80137ee:	b086      	sub	sp, #24
 80137f0:	af00      	add	r7, sp, #0
 80137f2:	60b9      	str	r1, [r7, #8]
 80137f4:	607a      	str	r2, [r7, #4]
 80137f6:	603b      	str	r3, [r7, #0]
 80137f8:	4603      	mov	r3, r0
 80137fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80137fc:	2301      	movs	r3, #1
 80137fe:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8013800:	f247 5030 	movw	r0, #30000	@ 0x7530
 8013804:	f7ff ff8c 	bl	8013720 <SD_CheckStatusWithTimeout>
 8013808:	4603      	mov	r3, r0
 801380a:	2b00      	cmp	r3, #0
 801380c:	da01      	bge.n	8013812 <SD_read+0x26>
  {
    return res;
 801380e:	7dfb      	ldrb	r3, [r7, #23]
 8013810:	e03b      	b.n	801388a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8013812:	683a      	ldr	r2, [r7, #0]
 8013814:	6879      	ldr	r1, [r7, #4]
 8013816:	68b8      	ldr	r0, [r7, #8]
 8013818:	f7ff fef4 	bl	8013604 <BSP_SD_ReadBlocks_DMA>
 801381c:	4603      	mov	r3, r0
 801381e:	2b00      	cmp	r3, #0
 8013820:	d132      	bne.n	8013888 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8013822:	4b1c      	ldr	r3, [pc, #112]	@ (8013894 <SD_read+0xa8>)
 8013824:	2200      	movs	r2, #0
 8013826:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8013828:	f7f0 f94c 	bl	8003ac4 <HAL_GetTick>
 801382c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801382e:	bf00      	nop
 8013830:	4b18      	ldr	r3, [pc, #96]	@ (8013894 <SD_read+0xa8>)
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	2b00      	cmp	r3, #0
 8013836:	d108      	bne.n	801384a <SD_read+0x5e>
 8013838:	f7f0 f944 	bl	8003ac4 <HAL_GetTick>
 801383c:	4602      	mov	r2, r0
 801383e:	693b      	ldr	r3, [r7, #16]
 8013840:	1ad3      	subs	r3, r2, r3
 8013842:	f247 522f 	movw	r2, #29999	@ 0x752f
 8013846:	4293      	cmp	r3, r2
 8013848:	d9f2      	bls.n	8013830 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 801384a:	4b12      	ldr	r3, [pc, #72]	@ (8013894 <SD_read+0xa8>)
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	2b00      	cmp	r3, #0
 8013850:	d102      	bne.n	8013858 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8013852:	2301      	movs	r3, #1
 8013854:	75fb      	strb	r3, [r7, #23]
 8013856:	e017      	b.n	8013888 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8013858:	4b0e      	ldr	r3, [pc, #56]	@ (8013894 <SD_read+0xa8>)
 801385a:	2200      	movs	r2, #0
 801385c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801385e:	f7f0 f931 	bl	8003ac4 <HAL_GetTick>
 8013862:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8013864:	e007      	b.n	8013876 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013866:	f7ff ff01 	bl	801366c <BSP_SD_GetCardState>
 801386a:	4603      	mov	r3, r0
 801386c:	2b00      	cmp	r3, #0
 801386e:	d102      	bne.n	8013876 <SD_read+0x8a>
          {
            res = RES_OK;
 8013870:	2300      	movs	r3, #0
 8013872:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8013874:	e008      	b.n	8013888 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8013876:	f7f0 f925 	bl	8003ac4 <HAL_GetTick>
 801387a:	4602      	mov	r2, r0
 801387c:	693b      	ldr	r3, [r7, #16]
 801387e:	1ad3      	subs	r3, r2, r3
 8013880:	f247 522f 	movw	r2, #29999	@ 0x752f
 8013884:	4293      	cmp	r3, r2
 8013886:	d9ee      	bls.n	8013866 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8013888:	7dfb      	ldrb	r3, [r7, #23]
}
 801388a:	4618      	mov	r0, r3
 801388c:	3718      	adds	r7, #24
 801388e:	46bd      	mov	sp, r7
 8013890:	bd80      	pop	{r7, pc}
 8013892:	bf00      	nop
 8013894:	2400096c 	.word	0x2400096c

08013898 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8013898:	b580      	push	{r7, lr}
 801389a:	b086      	sub	sp, #24
 801389c:	af00      	add	r7, sp, #0
 801389e:	60b9      	str	r1, [r7, #8]
 80138a0:	607a      	str	r2, [r7, #4]
 80138a2:	603b      	str	r3, [r7, #0]
 80138a4:	4603      	mov	r3, r0
 80138a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80138a8:	2301      	movs	r3, #1
 80138aa:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80138ac:	4b24      	ldr	r3, [pc, #144]	@ (8013940 <SD_write+0xa8>)
 80138ae:	2200      	movs	r2, #0
 80138b0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80138b2:	f247 5030 	movw	r0, #30000	@ 0x7530
 80138b6:	f7ff ff33 	bl	8013720 <SD_CheckStatusWithTimeout>
 80138ba:	4603      	mov	r3, r0
 80138bc:	2b00      	cmp	r3, #0
 80138be:	da01      	bge.n	80138c4 <SD_write+0x2c>
  {
    return res;
 80138c0:	7dfb      	ldrb	r3, [r7, #23]
 80138c2:	e038      	b.n	8013936 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80138c4:	683a      	ldr	r2, [r7, #0]
 80138c6:	6879      	ldr	r1, [r7, #4]
 80138c8:	68b8      	ldr	r0, [r7, #8]
 80138ca:	f7ff feb5 	bl	8013638 <BSP_SD_WriteBlocks_DMA>
 80138ce:	4603      	mov	r3, r0
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d12f      	bne.n	8013934 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80138d4:	f7f0 f8f6 	bl	8003ac4 <HAL_GetTick>
 80138d8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80138da:	bf00      	nop
 80138dc:	4b18      	ldr	r3, [pc, #96]	@ (8013940 <SD_write+0xa8>)
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d108      	bne.n	80138f6 <SD_write+0x5e>
 80138e4:	f7f0 f8ee 	bl	8003ac4 <HAL_GetTick>
 80138e8:	4602      	mov	r2, r0
 80138ea:	693b      	ldr	r3, [r7, #16]
 80138ec:	1ad3      	subs	r3, r2, r3
 80138ee:	f247 522f 	movw	r2, #29999	@ 0x752f
 80138f2:	4293      	cmp	r3, r2
 80138f4:	d9f2      	bls.n	80138dc <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80138f6:	4b12      	ldr	r3, [pc, #72]	@ (8013940 <SD_write+0xa8>)
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d102      	bne.n	8013904 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80138fe:	2301      	movs	r3, #1
 8013900:	75fb      	strb	r3, [r7, #23]
 8013902:	e017      	b.n	8013934 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8013904:	4b0e      	ldr	r3, [pc, #56]	@ (8013940 <SD_write+0xa8>)
 8013906:	2200      	movs	r2, #0
 8013908:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801390a:	f7f0 f8db 	bl	8003ac4 <HAL_GetTick>
 801390e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8013910:	e007      	b.n	8013922 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013912:	f7ff feab 	bl	801366c <BSP_SD_GetCardState>
 8013916:	4603      	mov	r3, r0
 8013918:	2b00      	cmp	r3, #0
 801391a:	d102      	bne.n	8013922 <SD_write+0x8a>
          {
            res = RES_OK;
 801391c:	2300      	movs	r3, #0
 801391e:	75fb      	strb	r3, [r7, #23]
            break;
 8013920:	e008      	b.n	8013934 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8013922:	f7f0 f8cf 	bl	8003ac4 <HAL_GetTick>
 8013926:	4602      	mov	r2, r0
 8013928:	693b      	ldr	r3, [r7, #16]
 801392a:	1ad3      	subs	r3, r2, r3
 801392c:	f247 522f 	movw	r2, #29999	@ 0x752f
 8013930:	4293      	cmp	r3, r2
 8013932:	d9ee      	bls.n	8013912 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8013934:	7dfb      	ldrb	r3, [r7, #23]
}
 8013936:	4618      	mov	r0, r3
 8013938:	3718      	adds	r7, #24
 801393a:	46bd      	mov	sp, r7
 801393c:	bd80      	pop	{r7, pc}
 801393e:	bf00      	nop
 8013940:	24000968 	.word	0x24000968

08013944 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8013944:	b580      	push	{r7, lr}
 8013946:	b08c      	sub	sp, #48	@ 0x30
 8013948:	af00      	add	r7, sp, #0
 801394a:	4603      	mov	r3, r0
 801394c:	603a      	str	r2, [r7, #0]
 801394e:	71fb      	strb	r3, [r7, #7]
 8013950:	460b      	mov	r3, r1
 8013952:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8013954:	2301      	movs	r3, #1
 8013956:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801395a:	4b25      	ldr	r3, [pc, #148]	@ (80139f0 <SD_ioctl+0xac>)
 801395c:	781b      	ldrb	r3, [r3, #0]
 801395e:	b2db      	uxtb	r3, r3
 8013960:	f003 0301 	and.w	r3, r3, #1
 8013964:	2b00      	cmp	r3, #0
 8013966:	d001      	beq.n	801396c <SD_ioctl+0x28>
 8013968:	2303      	movs	r3, #3
 801396a:	e03c      	b.n	80139e6 <SD_ioctl+0xa2>

  switch (cmd)
 801396c:	79bb      	ldrb	r3, [r7, #6]
 801396e:	2b03      	cmp	r3, #3
 8013970:	d834      	bhi.n	80139dc <SD_ioctl+0x98>
 8013972:	a201      	add	r2, pc, #4	@ (adr r2, 8013978 <SD_ioctl+0x34>)
 8013974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013978:	08013989 	.word	0x08013989
 801397c:	08013991 	.word	0x08013991
 8013980:	080139a9 	.word	0x080139a9
 8013984:	080139c3 	.word	0x080139c3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8013988:	2300      	movs	r3, #0
 801398a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801398e:	e028      	b.n	80139e2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8013990:	f107 0308 	add.w	r3, r7, #8
 8013994:	4618      	mov	r0, r3
 8013996:	f7ff fe79 	bl	801368c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801399a:	6a3a      	ldr	r2, [r7, #32]
 801399c:	683b      	ldr	r3, [r7, #0]
 801399e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80139a0:	2300      	movs	r3, #0
 80139a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80139a6:	e01c      	b.n	80139e2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80139a8:	f107 0308 	add.w	r3, r7, #8
 80139ac:	4618      	mov	r0, r3
 80139ae:	f7ff fe6d 	bl	801368c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80139b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139b4:	b29a      	uxth	r2, r3
 80139b6:	683b      	ldr	r3, [r7, #0]
 80139b8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80139ba:	2300      	movs	r3, #0
 80139bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80139c0:	e00f      	b.n	80139e2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80139c2:	f107 0308 	add.w	r3, r7, #8
 80139c6:	4618      	mov	r0, r3
 80139c8:	f7ff fe60 	bl	801368c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80139cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139ce:	0a5a      	lsrs	r2, r3, #9
 80139d0:	683b      	ldr	r3, [r7, #0]
 80139d2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80139d4:	2300      	movs	r3, #0
 80139d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80139da:	e002      	b.n	80139e2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80139dc:	2304      	movs	r3, #4
 80139de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80139e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80139e6:	4618      	mov	r0, r3
 80139e8:	3730      	adds	r7, #48	@ 0x30
 80139ea:	46bd      	mov	sp, r7
 80139ec:	bd80      	pop	{r7, pc}
 80139ee:	bf00      	nop
 80139f0:	24000031 	.word	0x24000031

080139f4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80139f4:	b480      	push	{r7}
 80139f6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80139f8:	4b03      	ldr	r3, [pc, #12]	@ (8013a08 <BSP_SD_WriteCpltCallback+0x14>)
 80139fa:	2201      	movs	r2, #1
 80139fc:	601a      	str	r2, [r3, #0]
}
 80139fe:	bf00      	nop
 8013a00:	46bd      	mov	sp, r7
 8013a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a06:	4770      	bx	lr
 8013a08:	24000968 	.word	0x24000968

08013a0c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8013a0c:	b480      	push	{r7}
 8013a0e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8013a10:	4b03      	ldr	r3, [pc, #12]	@ (8013a20 <BSP_SD_ReadCpltCallback+0x14>)
 8013a12:	2201      	movs	r2, #1
 8013a14:	601a      	str	r2, [r3, #0]
}
 8013a16:	bf00      	nop
 8013a18:	46bd      	mov	sp, r7
 8013a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a1e:	4770      	bx	lr
 8013a20:	2400096c 	.word	0x2400096c

08013a24 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8013a24:	b480      	push	{r7}
 8013a26:	b087      	sub	sp, #28
 8013a28:	af00      	add	r7, sp, #0
 8013a2a:	60f8      	str	r0, [r7, #12]
 8013a2c:	60b9      	str	r1, [r7, #8]
 8013a2e:	4613      	mov	r3, r2
 8013a30:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8013a32:	2301      	movs	r3, #1
 8013a34:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8013a36:	2300      	movs	r3, #0
 8013a38:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8013a3a:	4b1f      	ldr	r3, [pc, #124]	@ (8013ab8 <FATFS_LinkDriverEx+0x94>)
 8013a3c:	7a5b      	ldrb	r3, [r3, #9]
 8013a3e:	b2db      	uxtb	r3, r3
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d131      	bne.n	8013aa8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8013a44:	4b1c      	ldr	r3, [pc, #112]	@ (8013ab8 <FATFS_LinkDriverEx+0x94>)
 8013a46:	7a5b      	ldrb	r3, [r3, #9]
 8013a48:	b2db      	uxtb	r3, r3
 8013a4a:	461a      	mov	r2, r3
 8013a4c:	4b1a      	ldr	r3, [pc, #104]	@ (8013ab8 <FATFS_LinkDriverEx+0x94>)
 8013a4e:	2100      	movs	r1, #0
 8013a50:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8013a52:	4b19      	ldr	r3, [pc, #100]	@ (8013ab8 <FATFS_LinkDriverEx+0x94>)
 8013a54:	7a5b      	ldrb	r3, [r3, #9]
 8013a56:	b2db      	uxtb	r3, r3
 8013a58:	4a17      	ldr	r2, [pc, #92]	@ (8013ab8 <FATFS_LinkDriverEx+0x94>)
 8013a5a:	009b      	lsls	r3, r3, #2
 8013a5c:	4413      	add	r3, r2
 8013a5e:	68fa      	ldr	r2, [r7, #12]
 8013a60:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8013a62:	4b15      	ldr	r3, [pc, #84]	@ (8013ab8 <FATFS_LinkDriverEx+0x94>)
 8013a64:	7a5b      	ldrb	r3, [r3, #9]
 8013a66:	b2db      	uxtb	r3, r3
 8013a68:	461a      	mov	r2, r3
 8013a6a:	4b13      	ldr	r3, [pc, #76]	@ (8013ab8 <FATFS_LinkDriverEx+0x94>)
 8013a6c:	4413      	add	r3, r2
 8013a6e:	79fa      	ldrb	r2, [r7, #7]
 8013a70:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8013a72:	4b11      	ldr	r3, [pc, #68]	@ (8013ab8 <FATFS_LinkDriverEx+0x94>)
 8013a74:	7a5b      	ldrb	r3, [r3, #9]
 8013a76:	b2db      	uxtb	r3, r3
 8013a78:	1c5a      	adds	r2, r3, #1
 8013a7a:	b2d1      	uxtb	r1, r2
 8013a7c:	4a0e      	ldr	r2, [pc, #56]	@ (8013ab8 <FATFS_LinkDriverEx+0x94>)
 8013a7e:	7251      	strb	r1, [r2, #9]
 8013a80:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8013a82:	7dbb      	ldrb	r3, [r7, #22]
 8013a84:	3330      	adds	r3, #48	@ 0x30
 8013a86:	b2da      	uxtb	r2, r3
 8013a88:	68bb      	ldr	r3, [r7, #8]
 8013a8a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8013a8c:	68bb      	ldr	r3, [r7, #8]
 8013a8e:	3301      	adds	r3, #1
 8013a90:	223a      	movs	r2, #58	@ 0x3a
 8013a92:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8013a94:	68bb      	ldr	r3, [r7, #8]
 8013a96:	3302      	adds	r3, #2
 8013a98:	222f      	movs	r2, #47	@ 0x2f
 8013a9a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8013a9c:	68bb      	ldr	r3, [r7, #8]
 8013a9e:	3303      	adds	r3, #3
 8013aa0:	2200      	movs	r2, #0
 8013aa2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8013aa4:	2300      	movs	r3, #0
 8013aa6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8013aa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8013aaa:	4618      	mov	r0, r3
 8013aac:	371c      	adds	r7, #28
 8013aae:	46bd      	mov	sp, r7
 8013ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ab4:	4770      	bx	lr
 8013ab6:	bf00      	nop
 8013ab8:	24000970 	.word	0x24000970

08013abc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8013abc:	b580      	push	{r7, lr}
 8013abe:	b082      	sub	sp, #8
 8013ac0:	af00      	add	r7, sp, #0
 8013ac2:	6078      	str	r0, [r7, #4]
 8013ac4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8013ac6:	2200      	movs	r2, #0
 8013ac8:	6839      	ldr	r1, [r7, #0]
 8013aca:	6878      	ldr	r0, [r7, #4]
 8013acc:	f7ff ffaa 	bl	8013a24 <FATFS_LinkDriverEx>
 8013ad0:	4603      	mov	r3, r0
}
 8013ad2:	4618      	mov	r0, r3
 8013ad4:	3708      	adds	r7, #8
 8013ad6:	46bd      	mov	sp, r7
 8013ad8:	bd80      	pop	{r7, pc}
	...

08013adc <sniprintf>:
 8013adc:	b40c      	push	{r2, r3}
 8013ade:	b530      	push	{r4, r5, lr}
 8013ae0:	4b18      	ldr	r3, [pc, #96]	@ (8013b44 <sniprintf+0x68>)
 8013ae2:	1e0c      	subs	r4, r1, #0
 8013ae4:	681d      	ldr	r5, [r3, #0]
 8013ae6:	b09d      	sub	sp, #116	@ 0x74
 8013ae8:	da08      	bge.n	8013afc <sniprintf+0x20>
 8013aea:	238b      	movs	r3, #139	@ 0x8b
 8013aec:	602b      	str	r3, [r5, #0]
 8013aee:	f04f 30ff 	mov.w	r0, #4294967295
 8013af2:	b01d      	add	sp, #116	@ 0x74
 8013af4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013af8:	b002      	add	sp, #8
 8013afa:	4770      	bx	lr
 8013afc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8013b00:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013b04:	f04f 0300 	mov.w	r3, #0
 8013b08:	931b      	str	r3, [sp, #108]	@ 0x6c
 8013b0a:	bf14      	ite	ne
 8013b0c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8013b10:	4623      	moveq	r3, r4
 8013b12:	9304      	str	r3, [sp, #16]
 8013b14:	9307      	str	r3, [sp, #28]
 8013b16:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013b1a:	9002      	str	r0, [sp, #8]
 8013b1c:	9006      	str	r0, [sp, #24]
 8013b1e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013b22:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8013b24:	ab21      	add	r3, sp, #132	@ 0x84
 8013b26:	a902      	add	r1, sp, #8
 8013b28:	4628      	mov	r0, r5
 8013b2a:	9301      	str	r3, [sp, #4]
 8013b2c:	f000 f9c4 	bl	8013eb8 <_svfiprintf_r>
 8013b30:	1c43      	adds	r3, r0, #1
 8013b32:	bfbc      	itt	lt
 8013b34:	238b      	movlt	r3, #139	@ 0x8b
 8013b36:	602b      	strlt	r3, [r5, #0]
 8013b38:	2c00      	cmp	r4, #0
 8013b3a:	d0da      	beq.n	8013af2 <sniprintf+0x16>
 8013b3c:	9b02      	ldr	r3, [sp, #8]
 8013b3e:	2200      	movs	r2, #0
 8013b40:	701a      	strb	r2, [r3, #0]
 8013b42:	e7d6      	b.n	8013af2 <sniprintf+0x16>
 8013b44:	24000034 	.word	0x24000034

08013b48 <siprintf>:
 8013b48:	b40e      	push	{r1, r2, r3}
 8013b4a:	b510      	push	{r4, lr}
 8013b4c:	b09d      	sub	sp, #116	@ 0x74
 8013b4e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8013b50:	9002      	str	r0, [sp, #8]
 8013b52:	9006      	str	r0, [sp, #24]
 8013b54:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013b58:	480a      	ldr	r0, [pc, #40]	@ (8013b84 <siprintf+0x3c>)
 8013b5a:	9107      	str	r1, [sp, #28]
 8013b5c:	9104      	str	r1, [sp, #16]
 8013b5e:	490a      	ldr	r1, [pc, #40]	@ (8013b88 <siprintf+0x40>)
 8013b60:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b64:	9105      	str	r1, [sp, #20]
 8013b66:	2400      	movs	r4, #0
 8013b68:	a902      	add	r1, sp, #8
 8013b6a:	6800      	ldr	r0, [r0, #0]
 8013b6c:	9301      	str	r3, [sp, #4]
 8013b6e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8013b70:	f000 f9a2 	bl	8013eb8 <_svfiprintf_r>
 8013b74:	9b02      	ldr	r3, [sp, #8]
 8013b76:	701c      	strb	r4, [r3, #0]
 8013b78:	b01d      	add	sp, #116	@ 0x74
 8013b7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013b7e:	b003      	add	sp, #12
 8013b80:	4770      	bx	lr
 8013b82:	bf00      	nop
 8013b84:	24000034 	.word	0x24000034
 8013b88:	ffff0208 	.word	0xffff0208

08013b8c <memset>:
 8013b8c:	4402      	add	r2, r0
 8013b8e:	4603      	mov	r3, r0
 8013b90:	4293      	cmp	r3, r2
 8013b92:	d100      	bne.n	8013b96 <memset+0xa>
 8013b94:	4770      	bx	lr
 8013b96:	f803 1b01 	strb.w	r1, [r3], #1
 8013b9a:	e7f9      	b.n	8013b90 <memset+0x4>

08013b9c <__errno>:
 8013b9c:	4b01      	ldr	r3, [pc, #4]	@ (8013ba4 <__errno+0x8>)
 8013b9e:	6818      	ldr	r0, [r3, #0]
 8013ba0:	4770      	bx	lr
 8013ba2:	bf00      	nop
 8013ba4:	24000034 	.word	0x24000034

08013ba8 <__libc_init_array>:
 8013ba8:	b570      	push	{r4, r5, r6, lr}
 8013baa:	4d0d      	ldr	r5, [pc, #52]	@ (8013be0 <__libc_init_array+0x38>)
 8013bac:	4c0d      	ldr	r4, [pc, #52]	@ (8013be4 <__libc_init_array+0x3c>)
 8013bae:	1b64      	subs	r4, r4, r5
 8013bb0:	10a4      	asrs	r4, r4, #2
 8013bb2:	2600      	movs	r6, #0
 8013bb4:	42a6      	cmp	r6, r4
 8013bb6:	d109      	bne.n	8013bcc <__libc_init_array+0x24>
 8013bb8:	4d0b      	ldr	r5, [pc, #44]	@ (8013be8 <__libc_init_array+0x40>)
 8013bba:	4c0c      	ldr	r4, [pc, #48]	@ (8013bec <__libc_init_array+0x44>)
 8013bbc:	f000 fc64 	bl	8014488 <_init>
 8013bc0:	1b64      	subs	r4, r4, r5
 8013bc2:	10a4      	asrs	r4, r4, #2
 8013bc4:	2600      	movs	r6, #0
 8013bc6:	42a6      	cmp	r6, r4
 8013bc8:	d105      	bne.n	8013bd6 <__libc_init_array+0x2e>
 8013bca:	bd70      	pop	{r4, r5, r6, pc}
 8013bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8013bd0:	4798      	blx	r3
 8013bd2:	3601      	adds	r6, #1
 8013bd4:	e7ee      	b.n	8013bb4 <__libc_init_array+0xc>
 8013bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8013bda:	4798      	blx	r3
 8013bdc:	3601      	adds	r6, #1
 8013bde:	e7f2      	b.n	8013bc6 <__libc_init_array+0x1e>
 8013be0:	080149e8 	.word	0x080149e8
 8013be4:	080149e8 	.word	0x080149e8
 8013be8:	080149e8 	.word	0x080149e8
 8013bec:	080149ec 	.word	0x080149ec

08013bf0 <__retarget_lock_acquire_recursive>:
 8013bf0:	4770      	bx	lr

08013bf2 <__retarget_lock_release_recursive>:
 8013bf2:	4770      	bx	lr

08013bf4 <memcpy>:
 8013bf4:	440a      	add	r2, r1
 8013bf6:	4291      	cmp	r1, r2
 8013bf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8013bfc:	d100      	bne.n	8013c00 <memcpy+0xc>
 8013bfe:	4770      	bx	lr
 8013c00:	b510      	push	{r4, lr}
 8013c02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013c06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013c0a:	4291      	cmp	r1, r2
 8013c0c:	d1f9      	bne.n	8013c02 <memcpy+0xe>
 8013c0e:	bd10      	pop	{r4, pc}

08013c10 <_free_r>:
 8013c10:	b538      	push	{r3, r4, r5, lr}
 8013c12:	4605      	mov	r5, r0
 8013c14:	2900      	cmp	r1, #0
 8013c16:	d041      	beq.n	8013c9c <_free_r+0x8c>
 8013c18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013c1c:	1f0c      	subs	r4, r1, #4
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	bfb8      	it	lt
 8013c22:	18e4      	addlt	r4, r4, r3
 8013c24:	f000 f8e0 	bl	8013de8 <__malloc_lock>
 8013c28:	4a1d      	ldr	r2, [pc, #116]	@ (8013ca0 <_free_r+0x90>)
 8013c2a:	6813      	ldr	r3, [r2, #0]
 8013c2c:	b933      	cbnz	r3, 8013c3c <_free_r+0x2c>
 8013c2e:	6063      	str	r3, [r4, #4]
 8013c30:	6014      	str	r4, [r2, #0]
 8013c32:	4628      	mov	r0, r5
 8013c34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013c38:	f000 b8dc 	b.w	8013df4 <__malloc_unlock>
 8013c3c:	42a3      	cmp	r3, r4
 8013c3e:	d908      	bls.n	8013c52 <_free_r+0x42>
 8013c40:	6820      	ldr	r0, [r4, #0]
 8013c42:	1821      	adds	r1, r4, r0
 8013c44:	428b      	cmp	r3, r1
 8013c46:	bf01      	itttt	eq
 8013c48:	6819      	ldreq	r1, [r3, #0]
 8013c4a:	685b      	ldreq	r3, [r3, #4]
 8013c4c:	1809      	addeq	r1, r1, r0
 8013c4e:	6021      	streq	r1, [r4, #0]
 8013c50:	e7ed      	b.n	8013c2e <_free_r+0x1e>
 8013c52:	461a      	mov	r2, r3
 8013c54:	685b      	ldr	r3, [r3, #4]
 8013c56:	b10b      	cbz	r3, 8013c5c <_free_r+0x4c>
 8013c58:	42a3      	cmp	r3, r4
 8013c5a:	d9fa      	bls.n	8013c52 <_free_r+0x42>
 8013c5c:	6811      	ldr	r1, [r2, #0]
 8013c5e:	1850      	adds	r0, r2, r1
 8013c60:	42a0      	cmp	r0, r4
 8013c62:	d10b      	bne.n	8013c7c <_free_r+0x6c>
 8013c64:	6820      	ldr	r0, [r4, #0]
 8013c66:	4401      	add	r1, r0
 8013c68:	1850      	adds	r0, r2, r1
 8013c6a:	4283      	cmp	r3, r0
 8013c6c:	6011      	str	r1, [r2, #0]
 8013c6e:	d1e0      	bne.n	8013c32 <_free_r+0x22>
 8013c70:	6818      	ldr	r0, [r3, #0]
 8013c72:	685b      	ldr	r3, [r3, #4]
 8013c74:	6053      	str	r3, [r2, #4]
 8013c76:	4408      	add	r0, r1
 8013c78:	6010      	str	r0, [r2, #0]
 8013c7a:	e7da      	b.n	8013c32 <_free_r+0x22>
 8013c7c:	d902      	bls.n	8013c84 <_free_r+0x74>
 8013c7e:	230c      	movs	r3, #12
 8013c80:	602b      	str	r3, [r5, #0]
 8013c82:	e7d6      	b.n	8013c32 <_free_r+0x22>
 8013c84:	6820      	ldr	r0, [r4, #0]
 8013c86:	1821      	adds	r1, r4, r0
 8013c88:	428b      	cmp	r3, r1
 8013c8a:	bf04      	itt	eq
 8013c8c:	6819      	ldreq	r1, [r3, #0]
 8013c8e:	685b      	ldreq	r3, [r3, #4]
 8013c90:	6063      	str	r3, [r4, #4]
 8013c92:	bf04      	itt	eq
 8013c94:	1809      	addeq	r1, r1, r0
 8013c96:	6021      	streq	r1, [r4, #0]
 8013c98:	6054      	str	r4, [r2, #4]
 8013c9a:	e7ca      	b.n	8013c32 <_free_r+0x22>
 8013c9c:	bd38      	pop	{r3, r4, r5, pc}
 8013c9e:	bf00      	nop
 8013ca0:	24000ac0 	.word	0x24000ac0

08013ca4 <sbrk_aligned>:
 8013ca4:	b570      	push	{r4, r5, r6, lr}
 8013ca6:	4e0f      	ldr	r6, [pc, #60]	@ (8013ce4 <sbrk_aligned+0x40>)
 8013ca8:	460c      	mov	r4, r1
 8013caa:	6831      	ldr	r1, [r6, #0]
 8013cac:	4605      	mov	r5, r0
 8013cae:	b911      	cbnz	r1, 8013cb6 <sbrk_aligned+0x12>
 8013cb0:	f000 fba4 	bl	80143fc <_sbrk_r>
 8013cb4:	6030      	str	r0, [r6, #0]
 8013cb6:	4621      	mov	r1, r4
 8013cb8:	4628      	mov	r0, r5
 8013cba:	f000 fb9f 	bl	80143fc <_sbrk_r>
 8013cbe:	1c43      	adds	r3, r0, #1
 8013cc0:	d103      	bne.n	8013cca <sbrk_aligned+0x26>
 8013cc2:	f04f 34ff 	mov.w	r4, #4294967295
 8013cc6:	4620      	mov	r0, r4
 8013cc8:	bd70      	pop	{r4, r5, r6, pc}
 8013cca:	1cc4      	adds	r4, r0, #3
 8013ccc:	f024 0403 	bic.w	r4, r4, #3
 8013cd0:	42a0      	cmp	r0, r4
 8013cd2:	d0f8      	beq.n	8013cc6 <sbrk_aligned+0x22>
 8013cd4:	1a21      	subs	r1, r4, r0
 8013cd6:	4628      	mov	r0, r5
 8013cd8:	f000 fb90 	bl	80143fc <_sbrk_r>
 8013cdc:	3001      	adds	r0, #1
 8013cde:	d1f2      	bne.n	8013cc6 <sbrk_aligned+0x22>
 8013ce0:	e7ef      	b.n	8013cc2 <sbrk_aligned+0x1e>
 8013ce2:	bf00      	nop
 8013ce4:	24000abc 	.word	0x24000abc

08013ce8 <_malloc_r>:
 8013ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013cec:	1ccd      	adds	r5, r1, #3
 8013cee:	f025 0503 	bic.w	r5, r5, #3
 8013cf2:	3508      	adds	r5, #8
 8013cf4:	2d0c      	cmp	r5, #12
 8013cf6:	bf38      	it	cc
 8013cf8:	250c      	movcc	r5, #12
 8013cfa:	2d00      	cmp	r5, #0
 8013cfc:	4606      	mov	r6, r0
 8013cfe:	db01      	blt.n	8013d04 <_malloc_r+0x1c>
 8013d00:	42a9      	cmp	r1, r5
 8013d02:	d904      	bls.n	8013d0e <_malloc_r+0x26>
 8013d04:	230c      	movs	r3, #12
 8013d06:	6033      	str	r3, [r6, #0]
 8013d08:	2000      	movs	r0, #0
 8013d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013de4 <_malloc_r+0xfc>
 8013d12:	f000 f869 	bl	8013de8 <__malloc_lock>
 8013d16:	f8d8 3000 	ldr.w	r3, [r8]
 8013d1a:	461c      	mov	r4, r3
 8013d1c:	bb44      	cbnz	r4, 8013d70 <_malloc_r+0x88>
 8013d1e:	4629      	mov	r1, r5
 8013d20:	4630      	mov	r0, r6
 8013d22:	f7ff ffbf 	bl	8013ca4 <sbrk_aligned>
 8013d26:	1c43      	adds	r3, r0, #1
 8013d28:	4604      	mov	r4, r0
 8013d2a:	d158      	bne.n	8013dde <_malloc_r+0xf6>
 8013d2c:	f8d8 4000 	ldr.w	r4, [r8]
 8013d30:	4627      	mov	r7, r4
 8013d32:	2f00      	cmp	r7, #0
 8013d34:	d143      	bne.n	8013dbe <_malloc_r+0xd6>
 8013d36:	2c00      	cmp	r4, #0
 8013d38:	d04b      	beq.n	8013dd2 <_malloc_r+0xea>
 8013d3a:	6823      	ldr	r3, [r4, #0]
 8013d3c:	4639      	mov	r1, r7
 8013d3e:	4630      	mov	r0, r6
 8013d40:	eb04 0903 	add.w	r9, r4, r3
 8013d44:	f000 fb5a 	bl	80143fc <_sbrk_r>
 8013d48:	4581      	cmp	r9, r0
 8013d4a:	d142      	bne.n	8013dd2 <_malloc_r+0xea>
 8013d4c:	6821      	ldr	r1, [r4, #0]
 8013d4e:	1a6d      	subs	r5, r5, r1
 8013d50:	4629      	mov	r1, r5
 8013d52:	4630      	mov	r0, r6
 8013d54:	f7ff ffa6 	bl	8013ca4 <sbrk_aligned>
 8013d58:	3001      	adds	r0, #1
 8013d5a:	d03a      	beq.n	8013dd2 <_malloc_r+0xea>
 8013d5c:	6823      	ldr	r3, [r4, #0]
 8013d5e:	442b      	add	r3, r5
 8013d60:	6023      	str	r3, [r4, #0]
 8013d62:	f8d8 3000 	ldr.w	r3, [r8]
 8013d66:	685a      	ldr	r2, [r3, #4]
 8013d68:	bb62      	cbnz	r2, 8013dc4 <_malloc_r+0xdc>
 8013d6a:	f8c8 7000 	str.w	r7, [r8]
 8013d6e:	e00f      	b.n	8013d90 <_malloc_r+0xa8>
 8013d70:	6822      	ldr	r2, [r4, #0]
 8013d72:	1b52      	subs	r2, r2, r5
 8013d74:	d420      	bmi.n	8013db8 <_malloc_r+0xd0>
 8013d76:	2a0b      	cmp	r2, #11
 8013d78:	d917      	bls.n	8013daa <_malloc_r+0xc2>
 8013d7a:	1961      	adds	r1, r4, r5
 8013d7c:	42a3      	cmp	r3, r4
 8013d7e:	6025      	str	r5, [r4, #0]
 8013d80:	bf18      	it	ne
 8013d82:	6059      	strne	r1, [r3, #4]
 8013d84:	6863      	ldr	r3, [r4, #4]
 8013d86:	bf08      	it	eq
 8013d88:	f8c8 1000 	streq.w	r1, [r8]
 8013d8c:	5162      	str	r2, [r4, r5]
 8013d8e:	604b      	str	r3, [r1, #4]
 8013d90:	4630      	mov	r0, r6
 8013d92:	f000 f82f 	bl	8013df4 <__malloc_unlock>
 8013d96:	f104 000b 	add.w	r0, r4, #11
 8013d9a:	1d23      	adds	r3, r4, #4
 8013d9c:	f020 0007 	bic.w	r0, r0, #7
 8013da0:	1ac2      	subs	r2, r0, r3
 8013da2:	bf1c      	itt	ne
 8013da4:	1a1b      	subne	r3, r3, r0
 8013da6:	50a3      	strne	r3, [r4, r2]
 8013da8:	e7af      	b.n	8013d0a <_malloc_r+0x22>
 8013daa:	6862      	ldr	r2, [r4, #4]
 8013dac:	42a3      	cmp	r3, r4
 8013dae:	bf0c      	ite	eq
 8013db0:	f8c8 2000 	streq.w	r2, [r8]
 8013db4:	605a      	strne	r2, [r3, #4]
 8013db6:	e7eb      	b.n	8013d90 <_malloc_r+0xa8>
 8013db8:	4623      	mov	r3, r4
 8013dba:	6864      	ldr	r4, [r4, #4]
 8013dbc:	e7ae      	b.n	8013d1c <_malloc_r+0x34>
 8013dbe:	463c      	mov	r4, r7
 8013dc0:	687f      	ldr	r7, [r7, #4]
 8013dc2:	e7b6      	b.n	8013d32 <_malloc_r+0x4a>
 8013dc4:	461a      	mov	r2, r3
 8013dc6:	685b      	ldr	r3, [r3, #4]
 8013dc8:	42a3      	cmp	r3, r4
 8013dca:	d1fb      	bne.n	8013dc4 <_malloc_r+0xdc>
 8013dcc:	2300      	movs	r3, #0
 8013dce:	6053      	str	r3, [r2, #4]
 8013dd0:	e7de      	b.n	8013d90 <_malloc_r+0xa8>
 8013dd2:	230c      	movs	r3, #12
 8013dd4:	6033      	str	r3, [r6, #0]
 8013dd6:	4630      	mov	r0, r6
 8013dd8:	f000 f80c 	bl	8013df4 <__malloc_unlock>
 8013ddc:	e794      	b.n	8013d08 <_malloc_r+0x20>
 8013dde:	6005      	str	r5, [r0, #0]
 8013de0:	e7d6      	b.n	8013d90 <_malloc_r+0xa8>
 8013de2:	bf00      	nop
 8013de4:	24000ac0 	.word	0x24000ac0

08013de8 <__malloc_lock>:
 8013de8:	4801      	ldr	r0, [pc, #4]	@ (8013df0 <__malloc_lock+0x8>)
 8013dea:	f7ff bf01 	b.w	8013bf0 <__retarget_lock_acquire_recursive>
 8013dee:	bf00      	nop
 8013df0:	24000ab8 	.word	0x24000ab8

08013df4 <__malloc_unlock>:
 8013df4:	4801      	ldr	r0, [pc, #4]	@ (8013dfc <__malloc_unlock+0x8>)
 8013df6:	f7ff befc 	b.w	8013bf2 <__retarget_lock_release_recursive>
 8013dfa:	bf00      	nop
 8013dfc:	24000ab8 	.word	0x24000ab8

08013e00 <__ssputs_r>:
 8013e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e04:	688e      	ldr	r6, [r1, #8]
 8013e06:	461f      	mov	r7, r3
 8013e08:	42be      	cmp	r6, r7
 8013e0a:	680b      	ldr	r3, [r1, #0]
 8013e0c:	4682      	mov	sl, r0
 8013e0e:	460c      	mov	r4, r1
 8013e10:	4690      	mov	r8, r2
 8013e12:	d82d      	bhi.n	8013e70 <__ssputs_r+0x70>
 8013e14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013e18:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013e1c:	d026      	beq.n	8013e6c <__ssputs_r+0x6c>
 8013e1e:	6965      	ldr	r5, [r4, #20]
 8013e20:	6909      	ldr	r1, [r1, #16]
 8013e22:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013e26:	eba3 0901 	sub.w	r9, r3, r1
 8013e2a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013e2e:	1c7b      	adds	r3, r7, #1
 8013e30:	444b      	add	r3, r9
 8013e32:	106d      	asrs	r5, r5, #1
 8013e34:	429d      	cmp	r5, r3
 8013e36:	bf38      	it	cc
 8013e38:	461d      	movcc	r5, r3
 8013e3a:	0553      	lsls	r3, r2, #21
 8013e3c:	d527      	bpl.n	8013e8e <__ssputs_r+0x8e>
 8013e3e:	4629      	mov	r1, r5
 8013e40:	f7ff ff52 	bl	8013ce8 <_malloc_r>
 8013e44:	4606      	mov	r6, r0
 8013e46:	b360      	cbz	r0, 8013ea2 <__ssputs_r+0xa2>
 8013e48:	6921      	ldr	r1, [r4, #16]
 8013e4a:	464a      	mov	r2, r9
 8013e4c:	f7ff fed2 	bl	8013bf4 <memcpy>
 8013e50:	89a3      	ldrh	r3, [r4, #12]
 8013e52:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8013e56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013e5a:	81a3      	strh	r3, [r4, #12]
 8013e5c:	6126      	str	r6, [r4, #16]
 8013e5e:	6165      	str	r5, [r4, #20]
 8013e60:	444e      	add	r6, r9
 8013e62:	eba5 0509 	sub.w	r5, r5, r9
 8013e66:	6026      	str	r6, [r4, #0]
 8013e68:	60a5      	str	r5, [r4, #8]
 8013e6a:	463e      	mov	r6, r7
 8013e6c:	42be      	cmp	r6, r7
 8013e6e:	d900      	bls.n	8013e72 <__ssputs_r+0x72>
 8013e70:	463e      	mov	r6, r7
 8013e72:	6820      	ldr	r0, [r4, #0]
 8013e74:	4632      	mov	r2, r6
 8013e76:	4641      	mov	r1, r8
 8013e78:	f000 faa6 	bl	80143c8 <memmove>
 8013e7c:	68a3      	ldr	r3, [r4, #8]
 8013e7e:	1b9b      	subs	r3, r3, r6
 8013e80:	60a3      	str	r3, [r4, #8]
 8013e82:	6823      	ldr	r3, [r4, #0]
 8013e84:	4433      	add	r3, r6
 8013e86:	6023      	str	r3, [r4, #0]
 8013e88:	2000      	movs	r0, #0
 8013e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e8e:	462a      	mov	r2, r5
 8013e90:	f000 fac4 	bl	801441c <_realloc_r>
 8013e94:	4606      	mov	r6, r0
 8013e96:	2800      	cmp	r0, #0
 8013e98:	d1e0      	bne.n	8013e5c <__ssputs_r+0x5c>
 8013e9a:	6921      	ldr	r1, [r4, #16]
 8013e9c:	4650      	mov	r0, sl
 8013e9e:	f7ff feb7 	bl	8013c10 <_free_r>
 8013ea2:	230c      	movs	r3, #12
 8013ea4:	f8ca 3000 	str.w	r3, [sl]
 8013ea8:	89a3      	ldrh	r3, [r4, #12]
 8013eaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013eae:	81a3      	strh	r3, [r4, #12]
 8013eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8013eb4:	e7e9      	b.n	8013e8a <__ssputs_r+0x8a>
	...

08013eb8 <_svfiprintf_r>:
 8013eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ebc:	4698      	mov	r8, r3
 8013ebe:	898b      	ldrh	r3, [r1, #12]
 8013ec0:	061b      	lsls	r3, r3, #24
 8013ec2:	b09d      	sub	sp, #116	@ 0x74
 8013ec4:	4607      	mov	r7, r0
 8013ec6:	460d      	mov	r5, r1
 8013ec8:	4614      	mov	r4, r2
 8013eca:	d510      	bpl.n	8013eee <_svfiprintf_r+0x36>
 8013ecc:	690b      	ldr	r3, [r1, #16]
 8013ece:	b973      	cbnz	r3, 8013eee <_svfiprintf_r+0x36>
 8013ed0:	2140      	movs	r1, #64	@ 0x40
 8013ed2:	f7ff ff09 	bl	8013ce8 <_malloc_r>
 8013ed6:	6028      	str	r0, [r5, #0]
 8013ed8:	6128      	str	r0, [r5, #16]
 8013eda:	b930      	cbnz	r0, 8013eea <_svfiprintf_r+0x32>
 8013edc:	230c      	movs	r3, #12
 8013ede:	603b      	str	r3, [r7, #0]
 8013ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8013ee4:	b01d      	add	sp, #116	@ 0x74
 8013ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013eea:	2340      	movs	r3, #64	@ 0x40
 8013eec:	616b      	str	r3, [r5, #20]
 8013eee:	2300      	movs	r3, #0
 8013ef0:	9309      	str	r3, [sp, #36]	@ 0x24
 8013ef2:	2320      	movs	r3, #32
 8013ef4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013ef8:	f8cd 800c 	str.w	r8, [sp, #12]
 8013efc:	2330      	movs	r3, #48	@ 0x30
 8013efe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801409c <_svfiprintf_r+0x1e4>
 8013f02:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013f06:	f04f 0901 	mov.w	r9, #1
 8013f0a:	4623      	mov	r3, r4
 8013f0c:	469a      	mov	sl, r3
 8013f0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013f12:	b10a      	cbz	r2, 8013f18 <_svfiprintf_r+0x60>
 8013f14:	2a25      	cmp	r2, #37	@ 0x25
 8013f16:	d1f9      	bne.n	8013f0c <_svfiprintf_r+0x54>
 8013f18:	ebba 0b04 	subs.w	fp, sl, r4
 8013f1c:	d00b      	beq.n	8013f36 <_svfiprintf_r+0x7e>
 8013f1e:	465b      	mov	r3, fp
 8013f20:	4622      	mov	r2, r4
 8013f22:	4629      	mov	r1, r5
 8013f24:	4638      	mov	r0, r7
 8013f26:	f7ff ff6b 	bl	8013e00 <__ssputs_r>
 8013f2a:	3001      	adds	r0, #1
 8013f2c:	f000 80a7 	beq.w	801407e <_svfiprintf_r+0x1c6>
 8013f30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013f32:	445a      	add	r2, fp
 8013f34:	9209      	str	r2, [sp, #36]	@ 0x24
 8013f36:	f89a 3000 	ldrb.w	r3, [sl]
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	f000 809f 	beq.w	801407e <_svfiprintf_r+0x1c6>
 8013f40:	2300      	movs	r3, #0
 8013f42:	f04f 32ff 	mov.w	r2, #4294967295
 8013f46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013f4a:	f10a 0a01 	add.w	sl, sl, #1
 8013f4e:	9304      	str	r3, [sp, #16]
 8013f50:	9307      	str	r3, [sp, #28]
 8013f52:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013f56:	931a      	str	r3, [sp, #104]	@ 0x68
 8013f58:	4654      	mov	r4, sl
 8013f5a:	2205      	movs	r2, #5
 8013f5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f60:	484e      	ldr	r0, [pc, #312]	@ (801409c <_svfiprintf_r+0x1e4>)
 8013f62:	f7ec f9dd 	bl	8000320 <memchr>
 8013f66:	9a04      	ldr	r2, [sp, #16]
 8013f68:	b9d8      	cbnz	r0, 8013fa2 <_svfiprintf_r+0xea>
 8013f6a:	06d0      	lsls	r0, r2, #27
 8013f6c:	bf44      	itt	mi
 8013f6e:	2320      	movmi	r3, #32
 8013f70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013f74:	0711      	lsls	r1, r2, #28
 8013f76:	bf44      	itt	mi
 8013f78:	232b      	movmi	r3, #43	@ 0x2b
 8013f7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013f7e:	f89a 3000 	ldrb.w	r3, [sl]
 8013f82:	2b2a      	cmp	r3, #42	@ 0x2a
 8013f84:	d015      	beq.n	8013fb2 <_svfiprintf_r+0xfa>
 8013f86:	9a07      	ldr	r2, [sp, #28]
 8013f88:	4654      	mov	r4, sl
 8013f8a:	2000      	movs	r0, #0
 8013f8c:	f04f 0c0a 	mov.w	ip, #10
 8013f90:	4621      	mov	r1, r4
 8013f92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013f96:	3b30      	subs	r3, #48	@ 0x30
 8013f98:	2b09      	cmp	r3, #9
 8013f9a:	d94b      	bls.n	8014034 <_svfiprintf_r+0x17c>
 8013f9c:	b1b0      	cbz	r0, 8013fcc <_svfiprintf_r+0x114>
 8013f9e:	9207      	str	r2, [sp, #28]
 8013fa0:	e014      	b.n	8013fcc <_svfiprintf_r+0x114>
 8013fa2:	eba0 0308 	sub.w	r3, r0, r8
 8013fa6:	fa09 f303 	lsl.w	r3, r9, r3
 8013faa:	4313      	orrs	r3, r2
 8013fac:	9304      	str	r3, [sp, #16]
 8013fae:	46a2      	mov	sl, r4
 8013fb0:	e7d2      	b.n	8013f58 <_svfiprintf_r+0xa0>
 8013fb2:	9b03      	ldr	r3, [sp, #12]
 8013fb4:	1d19      	adds	r1, r3, #4
 8013fb6:	681b      	ldr	r3, [r3, #0]
 8013fb8:	9103      	str	r1, [sp, #12]
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	bfbb      	ittet	lt
 8013fbe:	425b      	neglt	r3, r3
 8013fc0:	f042 0202 	orrlt.w	r2, r2, #2
 8013fc4:	9307      	strge	r3, [sp, #28]
 8013fc6:	9307      	strlt	r3, [sp, #28]
 8013fc8:	bfb8      	it	lt
 8013fca:	9204      	strlt	r2, [sp, #16]
 8013fcc:	7823      	ldrb	r3, [r4, #0]
 8013fce:	2b2e      	cmp	r3, #46	@ 0x2e
 8013fd0:	d10a      	bne.n	8013fe8 <_svfiprintf_r+0x130>
 8013fd2:	7863      	ldrb	r3, [r4, #1]
 8013fd4:	2b2a      	cmp	r3, #42	@ 0x2a
 8013fd6:	d132      	bne.n	801403e <_svfiprintf_r+0x186>
 8013fd8:	9b03      	ldr	r3, [sp, #12]
 8013fda:	1d1a      	adds	r2, r3, #4
 8013fdc:	681b      	ldr	r3, [r3, #0]
 8013fde:	9203      	str	r2, [sp, #12]
 8013fe0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013fe4:	3402      	adds	r4, #2
 8013fe6:	9305      	str	r3, [sp, #20]
 8013fe8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80140ac <_svfiprintf_r+0x1f4>
 8013fec:	7821      	ldrb	r1, [r4, #0]
 8013fee:	2203      	movs	r2, #3
 8013ff0:	4650      	mov	r0, sl
 8013ff2:	f7ec f995 	bl	8000320 <memchr>
 8013ff6:	b138      	cbz	r0, 8014008 <_svfiprintf_r+0x150>
 8013ff8:	9b04      	ldr	r3, [sp, #16]
 8013ffa:	eba0 000a 	sub.w	r0, r0, sl
 8013ffe:	2240      	movs	r2, #64	@ 0x40
 8014000:	4082      	lsls	r2, r0
 8014002:	4313      	orrs	r3, r2
 8014004:	3401      	adds	r4, #1
 8014006:	9304      	str	r3, [sp, #16]
 8014008:	f814 1b01 	ldrb.w	r1, [r4], #1
 801400c:	4824      	ldr	r0, [pc, #144]	@ (80140a0 <_svfiprintf_r+0x1e8>)
 801400e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014012:	2206      	movs	r2, #6
 8014014:	f7ec f984 	bl	8000320 <memchr>
 8014018:	2800      	cmp	r0, #0
 801401a:	d036      	beq.n	801408a <_svfiprintf_r+0x1d2>
 801401c:	4b21      	ldr	r3, [pc, #132]	@ (80140a4 <_svfiprintf_r+0x1ec>)
 801401e:	bb1b      	cbnz	r3, 8014068 <_svfiprintf_r+0x1b0>
 8014020:	9b03      	ldr	r3, [sp, #12]
 8014022:	3307      	adds	r3, #7
 8014024:	f023 0307 	bic.w	r3, r3, #7
 8014028:	3308      	adds	r3, #8
 801402a:	9303      	str	r3, [sp, #12]
 801402c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801402e:	4433      	add	r3, r6
 8014030:	9309      	str	r3, [sp, #36]	@ 0x24
 8014032:	e76a      	b.n	8013f0a <_svfiprintf_r+0x52>
 8014034:	fb0c 3202 	mla	r2, ip, r2, r3
 8014038:	460c      	mov	r4, r1
 801403a:	2001      	movs	r0, #1
 801403c:	e7a8      	b.n	8013f90 <_svfiprintf_r+0xd8>
 801403e:	2300      	movs	r3, #0
 8014040:	3401      	adds	r4, #1
 8014042:	9305      	str	r3, [sp, #20]
 8014044:	4619      	mov	r1, r3
 8014046:	f04f 0c0a 	mov.w	ip, #10
 801404a:	4620      	mov	r0, r4
 801404c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014050:	3a30      	subs	r2, #48	@ 0x30
 8014052:	2a09      	cmp	r2, #9
 8014054:	d903      	bls.n	801405e <_svfiprintf_r+0x1a6>
 8014056:	2b00      	cmp	r3, #0
 8014058:	d0c6      	beq.n	8013fe8 <_svfiprintf_r+0x130>
 801405a:	9105      	str	r1, [sp, #20]
 801405c:	e7c4      	b.n	8013fe8 <_svfiprintf_r+0x130>
 801405e:	fb0c 2101 	mla	r1, ip, r1, r2
 8014062:	4604      	mov	r4, r0
 8014064:	2301      	movs	r3, #1
 8014066:	e7f0      	b.n	801404a <_svfiprintf_r+0x192>
 8014068:	ab03      	add	r3, sp, #12
 801406a:	9300      	str	r3, [sp, #0]
 801406c:	462a      	mov	r2, r5
 801406e:	4b0e      	ldr	r3, [pc, #56]	@ (80140a8 <_svfiprintf_r+0x1f0>)
 8014070:	a904      	add	r1, sp, #16
 8014072:	4638      	mov	r0, r7
 8014074:	f3af 8000 	nop.w
 8014078:	1c42      	adds	r2, r0, #1
 801407a:	4606      	mov	r6, r0
 801407c:	d1d6      	bne.n	801402c <_svfiprintf_r+0x174>
 801407e:	89ab      	ldrh	r3, [r5, #12]
 8014080:	065b      	lsls	r3, r3, #25
 8014082:	f53f af2d 	bmi.w	8013ee0 <_svfiprintf_r+0x28>
 8014086:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014088:	e72c      	b.n	8013ee4 <_svfiprintf_r+0x2c>
 801408a:	ab03      	add	r3, sp, #12
 801408c:	9300      	str	r3, [sp, #0]
 801408e:	462a      	mov	r2, r5
 8014090:	4b05      	ldr	r3, [pc, #20]	@ (80140a8 <_svfiprintf_r+0x1f0>)
 8014092:	a904      	add	r1, sp, #16
 8014094:	4638      	mov	r0, r7
 8014096:	f000 f879 	bl	801418c <_printf_i>
 801409a:	e7ed      	b.n	8014078 <_svfiprintf_r+0x1c0>
 801409c:	080149ac 	.word	0x080149ac
 80140a0:	080149b6 	.word	0x080149b6
 80140a4:	00000000 	.word	0x00000000
 80140a8:	08013e01 	.word	0x08013e01
 80140ac:	080149b2 	.word	0x080149b2

080140b0 <_printf_common>:
 80140b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80140b4:	4616      	mov	r6, r2
 80140b6:	4698      	mov	r8, r3
 80140b8:	688a      	ldr	r2, [r1, #8]
 80140ba:	690b      	ldr	r3, [r1, #16]
 80140bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80140c0:	4293      	cmp	r3, r2
 80140c2:	bfb8      	it	lt
 80140c4:	4613      	movlt	r3, r2
 80140c6:	6033      	str	r3, [r6, #0]
 80140c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80140cc:	4607      	mov	r7, r0
 80140ce:	460c      	mov	r4, r1
 80140d0:	b10a      	cbz	r2, 80140d6 <_printf_common+0x26>
 80140d2:	3301      	adds	r3, #1
 80140d4:	6033      	str	r3, [r6, #0]
 80140d6:	6823      	ldr	r3, [r4, #0]
 80140d8:	0699      	lsls	r1, r3, #26
 80140da:	bf42      	ittt	mi
 80140dc:	6833      	ldrmi	r3, [r6, #0]
 80140de:	3302      	addmi	r3, #2
 80140e0:	6033      	strmi	r3, [r6, #0]
 80140e2:	6825      	ldr	r5, [r4, #0]
 80140e4:	f015 0506 	ands.w	r5, r5, #6
 80140e8:	d106      	bne.n	80140f8 <_printf_common+0x48>
 80140ea:	f104 0a19 	add.w	sl, r4, #25
 80140ee:	68e3      	ldr	r3, [r4, #12]
 80140f0:	6832      	ldr	r2, [r6, #0]
 80140f2:	1a9b      	subs	r3, r3, r2
 80140f4:	42ab      	cmp	r3, r5
 80140f6:	dc26      	bgt.n	8014146 <_printf_common+0x96>
 80140f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80140fc:	6822      	ldr	r2, [r4, #0]
 80140fe:	3b00      	subs	r3, #0
 8014100:	bf18      	it	ne
 8014102:	2301      	movne	r3, #1
 8014104:	0692      	lsls	r2, r2, #26
 8014106:	d42b      	bmi.n	8014160 <_printf_common+0xb0>
 8014108:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801410c:	4641      	mov	r1, r8
 801410e:	4638      	mov	r0, r7
 8014110:	47c8      	blx	r9
 8014112:	3001      	adds	r0, #1
 8014114:	d01e      	beq.n	8014154 <_printf_common+0xa4>
 8014116:	6823      	ldr	r3, [r4, #0]
 8014118:	6922      	ldr	r2, [r4, #16]
 801411a:	f003 0306 	and.w	r3, r3, #6
 801411e:	2b04      	cmp	r3, #4
 8014120:	bf02      	ittt	eq
 8014122:	68e5      	ldreq	r5, [r4, #12]
 8014124:	6833      	ldreq	r3, [r6, #0]
 8014126:	1aed      	subeq	r5, r5, r3
 8014128:	68a3      	ldr	r3, [r4, #8]
 801412a:	bf0c      	ite	eq
 801412c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014130:	2500      	movne	r5, #0
 8014132:	4293      	cmp	r3, r2
 8014134:	bfc4      	itt	gt
 8014136:	1a9b      	subgt	r3, r3, r2
 8014138:	18ed      	addgt	r5, r5, r3
 801413a:	2600      	movs	r6, #0
 801413c:	341a      	adds	r4, #26
 801413e:	42b5      	cmp	r5, r6
 8014140:	d11a      	bne.n	8014178 <_printf_common+0xc8>
 8014142:	2000      	movs	r0, #0
 8014144:	e008      	b.n	8014158 <_printf_common+0xa8>
 8014146:	2301      	movs	r3, #1
 8014148:	4652      	mov	r2, sl
 801414a:	4641      	mov	r1, r8
 801414c:	4638      	mov	r0, r7
 801414e:	47c8      	blx	r9
 8014150:	3001      	adds	r0, #1
 8014152:	d103      	bne.n	801415c <_printf_common+0xac>
 8014154:	f04f 30ff 	mov.w	r0, #4294967295
 8014158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801415c:	3501      	adds	r5, #1
 801415e:	e7c6      	b.n	80140ee <_printf_common+0x3e>
 8014160:	18e1      	adds	r1, r4, r3
 8014162:	1c5a      	adds	r2, r3, #1
 8014164:	2030      	movs	r0, #48	@ 0x30
 8014166:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801416a:	4422      	add	r2, r4
 801416c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8014170:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014174:	3302      	adds	r3, #2
 8014176:	e7c7      	b.n	8014108 <_printf_common+0x58>
 8014178:	2301      	movs	r3, #1
 801417a:	4622      	mov	r2, r4
 801417c:	4641      	mov	r1, r8
 801417e:	4638      	mov	r0, r7
 8014180:	47c8      	blx	r9
 8014182:	3001      	adds	r0, #1
 8014184:	d0e6      	beq.n	8014154 <_printf_common+0xa4>
 8014186:	3601      	adds	r6, #1
 8014188:	e7d9      	b.n	801413e <_printf_common+0x8e>
	...

0801418c <_printf_i>:
 801418c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014190:	7e0f      	ldrb	r7, [r1, #24]
 8014192:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014194:	2f78      	cmp	r7, #120	@ 0x78
 8014196:	4691      	mov	r9, r2
 8014198:	4680      	mov	r8, r0
 801419a:	460c      	mov	r4, r1
 801419c:	469a      	mov	sl, r3
 801419e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80141a2:	d807      	bhi.n	80141b4 <_printf_i+0x28>
 80141a4:	2f62      	cmp	r7, #98	@ 0x62
 80141a6:	d80a      	bhi.n	80141be <_printf_i+0x32>
 80141a8:	2f00      	cmp	r7, #0
 80141aa:	f000 80d1 	beq.w	8014350 <_printf_i+0x1c4>
 80141ae:	2f58      	cmp	r7, #88	@ 0x58
 80141b0:	f000 80b8 	beq.w	8014324 <_printf_i+0x198>
 80141b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80141b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80141bc:	e03a      	b.n	8014234 <_printf_i+0xa8>
 80141be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80141c2:	2b15      	cmp	r3, #21
 80141c4:	d8f6      	bhi.n	80141b4 <_printf_i+0x28>
 80141c6:	a101      	add	r1, pc, #4	@ (adr r1, 80141cc <_printf_i+0x40>)
 80141c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80141cc:	08014225 	.word	0x08014225
 80141d0:	08014239 	.word	0x08014239
 80141d4:	080141b5 	.word	0x080141b5
 80141d8:	080141b5 	.word	0x080141b5
 80141dc:	080141b5 	.word	0x080141b5
 80141e0:	080141b5 	.word	0x080141b5
 80141e4:	08014239 	.word	0x08014239
 80141e8:	080141b5 	.word	0x080141b5
 80141ec:	080141b5 	.word	0x080141b5
 80141f0:	080141b5 	.word	0x080141b5
 80141f4:	080141b5 	.word	0x080141b5
 80141f8:	08014337 	.word	0x08014337
 80141fc:	08014263 	.word	0x08014263
 8014200:	080142f1 	.word	0x080142f1
 8014204:	080141b5 	.word	0x080141b5
 8014208:	080141b5 	.word	0x080141b5
 801420c:	08014359 	.word	0x08014359
 8014210:	080141b5 	.word	0x080141b5
 8014214:	08014263 	.word	0x08014263
 8014218:	080141b5 	.word	0x080141b5
 801421c:	080141b5 	.word	0x080141b5
 8014220:	080142f9 	.word	0x080142f9
 8014224:	6833      	ldr	r3, [r6, #0]
 8014226:	1d1a      	adds	r2, r3, #4
 8014228:	681b      	ldr	r3, [r3, #0]
 801422a:	6032      	str	r2, [r6, #0]
 801422c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014230:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014234:	2301      	movs	r3, #1
 8014236:	e09c      	b.n	8014372 <_printf_i+0x1e6>
 8014238:	6833      	ldr	r3, [r6, #0]
 801423a:	6820      	ldr	r0, [r4, #0]
 801423c:	1d19      	adds	r1, r3, #4
 801423e:	6031      	str	r1, [r6, #0]
 8014240:	0606      	lsls	r6, r0, #24
 8014242:	d501      	bpl.n	8014248 <_printf_i+0xbc>
 8014244:	681d      	ldr	r5, [r3, #0]
 8014246:	e003      	b.n	8014250 <_printf_i+0xc4>
 8014248:	0645      	lsls	r5, r0, #25
 801424a:	d5fb      	bpl.n	8014244 <_printf_i+0xb8>
 801424c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8014250:	2d00      	cmp	r5, #0
 8014252:	da03      	bge.n	801425c <_printf_i+0xd0>
 8014254:	232d      	movs	r3, #45	@ 0x2d
 8014256:	426d      	negs	r5, r5
 8014258:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801425c:	4858      	ldr	r0, [pc, #352]	@ (80143c0 <_printf_i+0x234>)
 801425e:	230a      	movs	r3, #10
 8014260:	e011      	b.n	8014286 <_printf_i+0xfa>
 8014262:	6821      	ldr	r1, [r4, #0]
 8014264:	6833      	ldr	r3, [r6, #0]
 8014266:	0608      	lsls	r0, r1, #24
 8014268:	f853 5b04 	ldr.w	r5, [r3], #4
 801426c:	d402      	bmi.n	8014274 <_printf_i+0xe8>
 801426e:	0649      	lsls	r1, r1, #25
 8014270:	bf48      	it	mi
 8014272:	b2ad      	uxthmi	r5, r5
 8014274:	2f6f      	cmp	r7, #111	@ 0x6f
 8014276:	4852      	ldr	r0, [pc, #328]	@ (80143c0 <_printf_i+0x234>)
 8014278:	6033      	str	r3, [r6, #0]
 801427a:	bf14      	ite	ne
 801427c:	230a      	movne	r3, #10
 801427e:	2308      	moveq	r3, #8
 8014280:	2100      	movs	r1, #0
 8014282:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8014286:	6866      	ldr	r6, [r4, #4]
 8014288:	60a6      	str	r6, [r4, #8]
 801428a:	2e00      	cmp	r6, #0
 801428c:	db05      	blt.n	801429a <_printf_i+0x10e>
 801428e:	6821      	ldr	r1, [r4, #0]
 8014290:	432e      	orrs	r6, r5
 8014292:	f021 0104 	bic.w	r1, r1, #4
 8014296:	6021      	str	r1, [r4, #0]
 8014298:	d04b      	beq.n	8014332 <_printf_i+0x1a6>
 801429a:	4616      	mov	r6, r2
 801429c:	fbb5 f1f3 	udiv	r1, r5, r3
 80142a0:	fb03 5711 	mls	r7, r3, r1, r5
 80142a4:	5dc7      	ldrb	r7, [r0, r7]
 80142a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80142aa:	462f      	mov	r7, r5
 80142ac:	42bb      	cmp	r3, r7
 80142ae:	460d      	mov	r5, r1
 80142b0:	d9f4      	bls.n	801429c <_printf_i+0x110>
 80142b2:	2b08      	cmp	r3, #8
 80142b4:	d10b      	bne.n	80142ce <_printf_i+0x142>
 80142b6:	6823      	ldr	r3, [r4, #0]
 80142b8:	07df      	lsls	r7, r3, #31
 80142ba:	d508      	bpl.n	80142ce <_printf_i+0x142>
 80142bc:	6923      	ldr	r3, [r4, #16]
 80142be:	6861      	ldr	r1, [r4, #4]
 80142c0:	4299      	cmp	r1, r3
 80142c2:	bfde      	ittt	le
 80142c4:	2330      	movle	r3, #48	@ 0x30
 80142c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80142ca:	f106 36ff 	addle.w	r6, r6, #4294967295
 80142ce:	1b92      	subs	r2, r2, r6
 80142d0:	6122      	str	r2, [r4, #16]
 80142d2:	f8cd a000 	str.w	sl, [sp]
 80142d6:	464b      	mov	r3, r9
 80142d8:	aa03      	add	r2, sp, #12
 80142da:	4621      	mov	r1, r4
 80142dc:	4640      	mov	r0, r8
 80142de:	f7ff fee7 	bl	80140b0 <_printf_common>
 80142e2:	3001      	adds	r0, #1
 80142e4:	d14a      	bne.n	801437c <_printf_i+0x1f0>
 80142e6:	f04f 30ff 	mov.w	r0, #4294967295
 80142ea:	b004      	add	sp, #16
 80142ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142f0:	6823      	ldr	r3, [r4, #0]
 80142f2:	f043 0320 	orr.w	r3, r3, #32
 80142f6:	6023      	str	r3, [r4, #0]
 80142f8:	4832      	ldr	r0, [pc, #200]	@ (80143c4 <_printf_i+0x238>)
 80142fa:	2778      	movs	r7, #120	@ 0x78
 80142fc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8014300:	6823      	ldr	r3, [r4, #0]
 8014302:	6831      	ldr	r1, [r6, #0]
 8014304:	061f      	lsls	r7, r3, #24
 8014306:	f851 5b04 	ldr.w	r5, [r1], #4
 801430a:	d402      	bmi.n	8014312 <_printf_i+0x186>
 801430c:	065f      	lsls	r7, r3, #25
 801430e:	bf48      	it	mi
 8014310:	b2ad      	uxthmi	r5, r5
 8014312:	6031      	str	r1, [r6, #0]
 8014314:	07d9      	lsls	r1, r3, #31
 8014316:	bf44      	itt	mi
 8014318:	f043 0320 	orrmi.w	r3, r3, #32
 801431c:	6023      	strmi	r3, [r4, #0]
 801431e:	b11d      	cbz	r5, 8014328 <_printf_i+0x19c>
 8014320:	2310      	movs	r3, #16
 8014322:	e7ad      	b.n	8014280 <_printf_i+0xf4>
 8014324:	4826      	ldr	r0, [pc, #152]	@ (80143c0 <_printf_i+0x234>)
 8014326:	e7e9      	b.n	80142fc <_printf_i+0x170>
 8014328:	6823      	ldr	r3, [r4, #0]
 801432a:	f023 0320 	bic.w	r3, r3, #32
 801432e:	6023      	str	r3, [r4, #0]
 8014330:	e7f6      	b.n	8014320 <_printf_i+0x194>
 8014332:	4616      	mov	r6, r2
 8014334:	e7bd      	b.n	80142b2 <_printf_i+0x126>
 8014336:	6833      	ldr	r3, [r6, #0]
 8014338:	6825      	ldr	r5, [r4, #0]
 801433a:	6961      	ldr	r1, [r4, #20]
 801433c:	1d18      	adds	r0, r3, #4
 801433e:	6030      	str	r0, [r6, #0]
 8014340:	062e      	lsls	r6, r5, #24
 8014342:	681b      	ldr	r3, [r3, #0]
 8014344:	d501      	bpl.n	801434a <_printf_i+0x1be>
 8014346:	6019      	str	r1, [r3, #0]
 8014348:	e002      	b.n	8014350 <_printf_i+0x1c4>
 801434a:	0668      	lsls	r0, r5, #25
 801434c:	d5fb      	bpl.n	8014346 <_printf_i+0x1ba>
 801434e:	8019      	strh	r1, [r3, #0]
 8014350:	2300      	movs	r3, #0
 8014352:	6123      	str	r3, [r4, #16]
 8014354:	4616      	mov	r6, r2
 8014356:	e7bc      	b.n	80142d2 <_printf_i+0x146>
 8014358:	6833      	ldr	r3, [r6, #0]
 801435a:	1d1a      	adds	r2, r3, #4
 801435c:	6032      	str	r2, [r6, #0]
 801435e:	681e      	ldr	r6, [r3, #0]
 8014360:	6862      	ldr	r2, [r4, #4]
 8014362:	2100      	movs	r1, #0
 8014364:	4630      	mov	r0, r6
 8014366:	f7eb ffdb 	bl	8000320 <memchr>
 801436a:	b108      	cbz	r0, 8014370 <_printf_i+0x1e4>
 801436c:	1b80      	subs	r0, r0, r6
 801436e:	6060      	str	r0, [r4, #4]
 8014370:	6863      	ldr	r3, [r4, #4]
 8014372:	6123      	str	r3, [r4, #16]
 8014374:	2300      	movs	r3, #0
 8014376:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801437a:	e7aa      	b.n	80142d2 <_printf_i+0x146>
 801437c:	6923      	ldr	r3, [r4, #16]
 801437e:	4632      	mov	r2, r6
 8014380:	4649      	mov	r1, r9
 8014382:	4640      	mov	r0, r8
 8014384:	47d0      	blx	sl
 8014386:	3001      	adds	r0, #1
 8014388:	d0ad      	beq.n	80142e6 <_printf_i+0x15a>
 801438a:	6823      	ldr	r3, [r4, #0]
 801438c:	079b      	lsls	r3, r3, #30
 801438e:	d413      	bmi.n	80143b8 <_printf_i+0x22c>
 8014390:	68e0      	ldr	r0, [r4, #12]
 8014392:	9b03      	ldr	r3, [sp, #12]
 8014394:	4298      	cmp	r0, r3
 8014396:	bfb8      	it	lt
 8014398:	4618      	movlt	r0, r3
 801439a:	e7a6      	b.n	80142ea <_printf_i+0x15e>
 801439c:	2301      	movs	r3, #1
 801439e:	4632      	mov	r2, r6
 80143a0:	4649      	mov	r1, r9
 80143a2:	4640      	mov	r0, r8
 80143a4:	47d0      	blx	sl
 80143a6:	3001      	adds	r0, #1
 80143a8:	d09d      	beq.n	80142e6 <_printf_i+0x15a>
 80143aa:	3501      	adds	r5, #1
 80143ac:	68e3      	ldr	r3, [r4, #12]
 80143ae:	9903      	ldr	r1, [sp, #12]
 80143b0:	1a5b      	subs	r3, r3, r1
 80143b2:	42ab      	cmp	r3, r5
 80143b4:	dcf2      	bgt.n	801439c <_printf_i+0x210>
 80143b6:	e7eb      	b.n	8014390 <_printf_i+0x204>
 80143b8:	2500      	movs	r5, #0
 80143ba:	f104 0619 	add.w	r6, r4, #25
 80143be:	e7f5      	b.n	80143ac <_printf_i+0x220>
 80143c0:	080149bd 	.word	0x080149bd
 80143c4:	080149ce 	.word	0x080149ce

080143c8 <memmove>:
 80143c8:	4288      	cmp	r0, r1
 80143ca:	b510      	push	{r4, lr}
 80143cc:	eb01 0402 	add.w	r4, r1, r2
 80143d0:	d902      	bls.n	80143d8 <memmove+0x10>
 80143d2:	4284      	cmp	r4, r0
 80143d4:	4623      	mov	r3, r4
 80143d6:	d807      	bhi.n	80143e8 <memmove+0x20>
 80143d8:	1e43      	subs	r3, r0, #1
 80143da:	42a1      	cmp	r1, r4
 80143dc:	d008      	beq.n	80143f0 <memmove+0x28>
 80143de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80143e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80143e6:	e7f8      	b.n	80143da <memmove+0x12>
 80143e8:	4402      	add	r2, r0
 80143ea:	4601      	mov	r1, r0
 80143ec:	428a      	cmp	r2, r1
 80143ee:	d100      	bne.n	80143f2 <memmove+0x2a>
 80143f0:	bd10      	pop	{r4, pc}
 80143f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80143f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80143fa:	e7f7      	b.n	80143ec <memmove+0x24>

080143fc <_sbrk_r>:
 80143fc:	b538      	push	{r3, r4, r5, lr}
 80143fe:	4d06      	ldr	r5, [pc, #24]	@ (8014418 <_sbrk_r+0x1c>)
 8014400:	2300      	movs	r3, #0
 8014402:	4604      	mov	r4, r0
 8014404:	4608      	mov	r0, r1
 8014406:	602b      	str	r3, [r5, #0]
 8014408:	f7ef f9fe 	bl	8003808 <_sbrk>
 801440c:	1c43      	adds	r3, r0, #1
 801440e:	d102      	bne.n	8014416 <_sbrk_r+0x1a>
 8014410:	682b      	ldr	r3, [r5, #0]
 8014412:	b103      	cbz	r3, 8014416 <_sbrk_r+0x1a>
 8014414:	6023      	str	r3, [r4, #0]
 8014416:	bd38      	pop	{r3, r4, r5, pc}
 8014418:	24000ab4 	.word	0x24000ab4

0801441c <_realloc_r>:
 801441c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014420:	4607      	mov	r7, r0
 8014422:	4614      	mov	r4, r2
 8014424:	460d      	mov	r5, r1
 8014426:	b921      	cbnz	r1, 8014432 <_realloc_r+0x16>
 8014428:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801442c:	4611      	mov	r1, r2
 801442e:	f7ff bc5b 	b.w	8013ce8 <_malloc_r>
 8014432:	b92a      	cbnz	r2, 8014440 <_realloc_r+0x24>
 8014434:	f7ff fbec 	bl	8013c10 <_free_r>
 8014438:	4625      	mov	r5, r4
 801443a:	4628      	mov	r0, r5
 801443c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014440:	f000 f81a 	bl	8014478 <_malloc_usable_size_r>
 8014444:	4284      	cmp	r4, r0
 8014446:	4606      	mov	r6, r0
 8014448:	d802      	bhi.n	8014450 <_realloc_r+0x34>
 801444a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801444e:	d8f4      	bhi.n	801443a <_realloc_r+0x1e>
 8014450:	4621      	mov	r1, r4
 8014452:	4638      	mov	r0, r7
 8014454:	f7ff fc48 	bl	8013ce8 <_malloc_r>
 8014458:	4680      	mov	r8, r0
 801445a:	b908      	cbnz	r0, 8014460 <_realloc_r+0x44>
 801445c:	4645      	mov	r5, r8
 801445e:	e7ec      	b.n	801443a <_realloc_r+0x1e>
 8014460:	42b4      	cmp	r4, r6
 8014462:	4622      	mov	r2, r4
 8014464:	4629      	mov	r1, r5
 8014466:	bf28      	it	cs
 8014468:	4632      	movcs	r2, r6
 801446a:	f7ff fbc3 	bl	8013bf4 <memcpy>
 801446e:	4629      	mov	r1, r5
 8014470:	4638      	mov	r0, r7
 8014472:	f7ff fbcd 	bl	8013c10 <_free_r>
 8014476:	e7f1      	b.n	801445c <_realloc_r+0x40>

08014478 <_malloc_usable_size_r>:
 8014478:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801447c:	1f18      	subs	r0, r3, #4
 801447e:	2b00      	cmp	r3, #0
 8014480:	bfbc      	itt	lt
 8014482:	580b      	ldrlt	r3, [r1, r0]
 8014484:	18c0      	addlt	r0, r0, r3
 8014486:	4770      	bx	lr

08014488 <_init>:
 8014488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801448a:	bf00      	nop
 801448c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801448e:	bc08      	pop	{r3}
 8014490:	469e      	mov	lr, r3
 8014492:	4770      	bx	lr

08014494 <_fini>:
 8014494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014496:	bf00      	nop
 8014498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801449a:	bc08      	pop	{r3}
 801449c:	469e      	mov	lr, r3
 801449e:	4770      	bx	lr
