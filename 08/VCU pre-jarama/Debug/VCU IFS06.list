
VCU IFS06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017fd4  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a44  080182a8  080182a8  000192a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018cec  08018cec  00019cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08018cf4  08018cf4  00019cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08018cf8  08018cf8  00019cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e8  24000000  08018cfc  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000092c  240001e8  08018ee4  0001a1e8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000b14  08018ee4  0001ab14  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001a1e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00029e10  00000000  00000000  0001a216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000044e6  00000000  00000000  00044026  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002190  00000000  00000000  00048510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001a17  00000000  00000000  0004a6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003afba  00000000  00000000  0004c0b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002ad66  00000000  00000000  00087071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017eff5  00000000  00000000  000b1dd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00230dcc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a654  00000000  00000000  00230e10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000084  00000000  00000000  0023b464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001e8 	.word	0x240001e8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801828c 	.word	0x0801828c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001ec 	.word	0x240001ec
 800030c:	0801828c 	.word	0x0801828c

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	@ 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9c0 	b.w	8000ad0 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	468e      	mov	lr, r1
 80007e0:	4604      	mov	r4, r0
 80007e2:	4688      	mov	r8, r1
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d14a      	bne.n	800087e <__udivmoddi4+0xa6>
 80007e8:	428a      	cmp	r2, r1
 80007ea:	4617      	mov	r7, r2
 80007ec:	d962      	bls.n	80008b4 <__udivmoddi4+0xdc>
 80007ee:	fab2 f682 	clz	r6, r2
 80007f2:	b14e      	cbz	r6, 8000808 <__udivmoddi4+0x30>
 80007f4:	f1c6 0320 	rsb	r3, r6, #32
 80007f8:	fa01 f806 	lsl.w	r8, r1, r6
 80007fc:	fa20 f303 	lsr.w	r3, r0, r3
 8000800:	40b7      	lsls	r7, r6
 8000802:	ea43 0808 	orr.w	r8, r3, r8
 8000806:	40b4      	lsls	r4, r6
 8000808:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800080c:	fa1f fc87 	uxth.w	ip, r7
 8000810:	fbb8 f1fe 	udiv	r1, r8, lr
 8000814:	0c23      	lsrs	r3, r4, #16
 8000816:	fb0e 8811 	mls	r8, lr, r1, r8
 800081a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800081e:	fb01 f20c 	mul.w	r2, r1, ip
 8000822:	429a      	cmp	r2, r3
 8000824:	d909      	bls.n	800083a <__udivmoddi4+0x62>
 8000826:	18fb      	adds	r3, r7, r3
 8000828:	f101 30ff 	add.w	r0, r1, #4294967295
 800082c:	f080 80ea 	bcs.w	8000a04 <__udivmoddi4+0x22c>
 8000830:	429a      	cmp	r2, r3
 8000832:	f240 80e7 	bls.w	8000a04 <__udivmoddi4+0x22c>
 8000836:	3902      	subs	r1, #2
 8000838:	443b      	add	r3, r7
 800083a:	1a9a      	subs	r2, r3, r2
 800083c:	b2a3      	uxth	r3, r4
 800083e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000842:	fb0e 2210 	mls	r2, lr, r0, r2
 8000846:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800084a:	fb00 fc0c 	mul.w	ip, r0, ip
 800084e:	459c      	cmp	ip, r3
 8000850:	d909      	bls.n	8000866 <__udivmoddi4+0x8e>
 8000852:	18fb      	adds	r3, r7, r3
 8000854:	f100 32ff 	add.w	r2, r0, #4294967295
 8000858:	f080 80d6 	bcs.w	8000a08 <__udivmoddi4+0x230>
 800085c:	459c      	cmp	ip, r3
 800085e:	f240 80d3 	bls.w	8000a08 <__udivmoddi4+0x230>
 8000862:	443b      	add	r3, r7
 8000864:	3802      	subs	r0, #2
 8000866:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800086a:	eba3 030c 	sub.w	r3, r3, ip
 800086e:	2100      	movs	r1, #0
 8000870:	b11d      	cbz	r5, 800087a <__udivmoddi4+0xa2>
 8000872:	40f3      	lsrs	r3, r6
 8000874:	2200      	movs	r2, #0
 8000876:	e9c5 3200 	strd	r3, r2, [r5]
 800087a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800087e:	428b      	cmp	r3, r1
 8000880:	d905      	bls.n	800088e <__udivmoddi4+0xb6>
 8000882:	b10d      	cbz	r5, 8000888 <__udivmoddi4+0xb0>
 8000884:	e9c5 0100 	strd	r0, r1, [r5]
 8000888:	2100      	movs	r1, #0
 800088a:	4608      	mov	r0, r1
 800088c:	e7f5      	b.n	800087a <__udivmoddi4+0xa2>
 800088e:	fab3 f183 	clz	r1, r3
 8000892:	2900      	cmp	r1, #0
 8000894:	d146      	bne.n	8000924 <__udivmoddi4+0x14c>
 8000896:	4573      	cmp	r3, lr
 8000898:	d302      	bcc.n	80008a0 <__udivmoddi4+0xc8>
 800089a:	4282      	cmp	r2, r0
 800089c:	f200 8105 	bhi.w	8000aaa <__udivmoddi4+0x2d2>
 80008a0:	1a84      	subs	r4, r0, r2
 80008a2:	eb6e 0203 	sbc.w	r2, lr, r3
 80008a6:	2001      	movs	r0, #1
 80008a8:	4690      	mov	r8, r2
 80008aa:	2d00      	cmp	r5, #0
 80008ac:	d0e5      	beq.n	800087a <__udivmoddi4+0xa2>
 80008ae:	e9c5 4800 	strd	r4, r8, [r5]
 80008b2:	e7e2      	b.n	800087a <__udivmoddi4+0xa2>
 80008b4:	2a00      	cmp	r2, #0
 80008b6:	f000 8090 	beq.w	80009da <__udivmoddi4+0x202>
 80008ba:	fab2 f682 	clz	r6, r2
 80008be:	2e00      	cmp	r6, #0
 80008c0:	f040 80a4 	bne.w	8000a0c <__udivmoddi4+0x234>
 80008c4:	1a8a      	subs	r2, r1, r2
 80008c6:	0c03      	lsrs	r3, r0, #16
 80008c8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008cc:	b280      	uxth	r0, r0
 80008ce:	b2bc      	uxth	r4, r7
 80008d0:	2101      	movs	r1, #1
 80008d2:	fbb2 fcfe 	udiv	ip, r2, lr
 80008d6:	fb0e 221c 	mls	r2, lr, ip, r2
 80008da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008de:	fb04 f20c 	mul.w	r2, r4, ip
 80008e2:	429a      	cmp	r2, r3
 80008e4:	d907      	bls.n	80008f6 <__udivmoddi4+0x11e>
 80008e6:	18fb      	adds	r3, r7, r3
 80008e8:	f10c 38ff 	add.w	r8, ip, #4294967295
 80008ec:	d202      	bcs.n	80008f4 <__udivmoddi4+0x11c>
 80008ee:	429a      	cmp	r2, r3
 80008f0:	f200 80e0 	bhi.w	8000ab4 <__udivmoddi4+0x2dc>
 80008f4:	46c4      	mov	ip, r8
 80008f6:	1a9b      	subs	r3, r3, r2
 80008f8:	fbb3 f2fe 	udiv	r2, r3, lr
 80008fc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000900:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000904:	fb02 f404 	mul.w	r4, r2, r4
 8000908:	429c      	cmp	r4, r3
 800090a:	d907      	bls.n	800091c <__udivmoddi4+0x144>
 800090c:	18fb      	adds	r3, r7, r3
 800090e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000912:	d202      	bcs.n	800091a <__udivmoddi4+0x142>
 8000914:	429c      	cmp	r4, r3
 8000916:	f200 80ca 	bhi.w	8000aae <__udivmoddi4+0x2d6>
 800091a:	4602      	mov	r2, r0
 800091c:	1b1b      	subs	r3, r3, r4
 800091e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000922:	e7a5      	b.n	8000870 <__udivmoddi4+0x98>
 8000924:	f1c1 0620 	rsb	r6, r1, #32
 8000928:	408b      	lsls	r3, r1
 800092a:	fa22 f706 	lsr.w	r7, r2, r6
 800092e:	431f      	orrs	r7, r3
 8000930:	fa0e f401 	lsl.w	r4, lr, r1
 8000934:	fa20 f306 	lsr.w	r3, r0, r6
 8000938:	fa2e fe06 	lsr.w	lr, lr, r6
 800093c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000940:	4323      	orrs	r3, r4
 8000942:	fa00 f801 	lsl.w	r8, r0, r1
 8000946:	fa1f fc87 	uxth.w	ip, r7
 800094a:	fbbe f0f9 	udiv	r0, lr, r9
 800094e:	0c1c      	lsrs	r4, r3, #16
 8000950:	fb09 ee10 	mls	lr, r9, r0, lr
 8000954:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000958:	fb00 fe0c 	mul.w	lr, r0, ip
 800095c:	45a6      	cmp	lr, r4
 800095e:	fa02 f201 	lsl.w	r2, r2, r1
 8000962:	d909      	bls.n	8000978 <__udivmoddi4+0x1a0>
 8000964:	193c      	adds	r4, r7, r4
 8000966:	f100 3aff 	add.w	sl, r0, #4294967295
 800096a:	f080 809c 	bcs.w	8000aa6 <__udivmoddi4+0x2ce>
 800096e:	45a6      	cmp	lr, r4
 8000970:	f240 8099 	bls.w	8000aa6 <__udivmoddi4+0x2ce>
 8000974:	3802      	subs	r0, #2
 8000976:	443c      	add	r4, r7
 8000978:	eba4 040e 	sub.w	r4, r4, lr
 800097c:	fa1f fe83 	uxth.w	lr, r3
 8000980:	fbb4 f3f9 	udiv	r3, r4, r9
 8000984:	fb09 4413 	mls	r4, r9, r3, r4
 8000988:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800098c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000990:	45a4      	cmp	ip, r4
 8000992:	d908      	bls.n	80009a6 <__udivmoddi4+0x1ce>
 8000994:	193c      	adds	r4, r7, r4
 8000996:	f103 3eff 	add.w	lr, r3, #4294967295
 800099a:	f080 8082 	bcs.w	8000aa2 <__udivmoddi4+0x2ca>
 800099e:	45a4      	cmp	ip, r4
 80009a0:	d97f      	bls.n	8000aa2 <__udivmoddi4+0x2ca>
 80009a2:	3b02      	subs	r3, #2
 80009a4:	443c      	add	r4, r7
 80009a6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80009aa:	eba4 040c 	sub.w	r4, r4, ip
 80009ae:	fba0 ec02 	umull	lr, ip, r0, r2
 80009b2:	4564      	cmp	r4, ip
 80009b4:	4673      	mov	r3, lr
 80009b6:	46e1      	mov	r9, ip
 80009b8:	d362      	bcc.n	8000a80 <__udivmoddi4+0x2a8>
 80009ba:	d05f      	beq.n	8000a7c <__udivmoddi4+0x2a4>
 80009bc:	b15d      	cbz	r5, 80009d6 <__udivmoddi4+0x1fe>
 80009be:	ebb8 0203 	subs.w	r2, r8, r3
 80009c2:	eb64 0409 	sbc.w	r4, r4, r9
 80009c6:	fa04 f606 	lsl.w	r6, r4, r6
 80009ca:	fa22 f301 	lsr.w	r3, r2, r1
 80009ce:	431e      	orrs	r6, r3
 80009d0:	40cc      	lsrs	r4, r1
 80009d2:	e9c5 6400 	strd	r6, r4, [r5]
 80009d6:	2100      	movs	r1, #0
 80009d8:	e74f      	b.n	800087a <__udivmoddi4+0xa2>
 80009da:	fbb1 fcf2 	udiv	ip, r1, r2
 80009de:	0c01      	lsrs	r1, r0, #16
 80009e0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80009e4:	b280      	uxth	r0, r0
 80009e6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80009ea:	463b      	mov	r3, r7
 80009ec:	4638      	mov	r0, r7
 80009ee:	463c      	mov	r4, r7
 80009f0:	46b8      	mov	r8, r7
 80009f2:	46be      	mov	lr, r7
 80009f4:	2620      	movs	r6, #32
 80009f6:	fbb1 f1f7 	udiv	r1, r1, r7
 80009fa:	eba2 0208 	sub.w	r2, r2, r8
 80009fe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000a02:	e766      	b.n	80008d2 <__udivmoddi4+0xfa>
 8000a04:	4601      	mov	r1, r0
 8000a06:	e718      	b.n	800083a <__udivmoddi4+0x62>
 8000a08:	4610      	mov	r0, r2
 8000a0a:	e72c      	b.n	8000866 <__udivmoddi4+0x8e>
 8000a0c:	f1c6 0220 	rsb	r2, r6, #32
 8000a10:	fa2e f302 	lsr.w	r3, lr, r2
 8000a14:	40b7      	lsls	r7, r6
 8000a16:	40b1      	lsls	r1, r6
 8000a18:	fa20 f202 	lsr.w	r2, r0, r2
 8000a1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a20:	430a      	orrs	r2, r1
 8000a22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000a26:	b2bc      	uxth	r4, r7
 8000a28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000a2c:	0c11      	lsrs	r1, r2, #16
 8000a2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a32:	fb08 f904 	mul.w	r9, r8, r4
 8000a36:	40b0      	lsls	r0, r6
 8000a38:	4589      	cmp	r9, r1
 8000a3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000a3e:	b280      	uxth	r0, r0
 8000a40:	d93e      	bls.n	8000ac0 <__udivmoddi4+0x2e8>
 8000a42:	1879      	adds	r1, r7, r1
 8000a44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000a48:	d201      	bcs.n	8000a4e <__udivmoddi4+0x276>
 8000a4a:	4589      	cmp	r9, r1
 8000a4c:	d81f      	bhi.n	8000a8e <__udivmoddi4+0x2b6>
 8000a4e:	eba1 0109 	sub.w	r1, r1, r9
 8000a52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a56:	fb09 f804 	mul.w	r8, r9, r4
 8000a5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a5e:	b292      	uxth	r2, r2
 8000a60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a64:	4542      	cmp	r2, r8
 8000a66:	d229      	bcs.n	8000abc <__udivmoddi4+0x2e4>
 8000a68:	18ba      	adds	r2, r7, r2
 8000a6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000a6e:	d2c4      	bcs.n	80009fa <__udivmoddi4+0x222>
 8000a70:	4542      	cmp	r2, r8
 8000a72:	d2c2      	bcs.n	80009fa <__udivmoddi4+0x222>
 8000a74:	f1a9 0102 	sub.w	r1, r9, #2
 8000a78:	443a      	add	r2, r7
 8000a7a:	e7be      	b.n	80009fa <__udivmoddi4+0x222>
 8000a7c:	45f0      	cmp	r8, lr
 8000a7e:	d29d      	bcs.n	80009bc <__udivmoddi4+0x1e4>
 8000a80:	ebbe 0302 	subs.w	r3, lr, r2
 8000a84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000a88:	3801      	subs	r0, #1
 8000a8a:	46e1      	mov	r9, ip
 8000a8c:	e796      	b.n	80009bc <__udivmoddi4+0x1e4>
 8000a8e:	eba7 0909 	sub.w	r9, r7, r9
 8000a92:	4449      	add	r1, r9
 8000a94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000a98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a9c:	fb09 f804 	mul.w	r8, r9, r4
 8000aa0:	e7db      	b.n	8000a5a <__udivmoddi4+0x282>
 8000aa2:	4673      	mov	r3, lr
 8000aa4:	e77f      	b.n	80009a6 <__udivmoddi4+0x1ce>
 8000aa6:	4650      	mov	r0, sl
 8000aa8:	e766      	b.n	8000978 <__udivmoddi4+0x1a0>
 8000aaa:	4608      	mov	r0, r1
 8000aac:	e6fd      	b.n	80008aa <__udivmoddi4+0xd2>
 8000aae:	443b      	add	r3, r7
 8000ab0:	3a02      	subs	r2, #2
 8000ab2:	e733      	b.n	800091c <__udivmoddi4+0x144>
 8000ab4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ab8:	443b      	add	r3, r7
 8000aba:	e71c      	b.n	80008f6 <__udivmoddi4+0x11e>
 8000abc:	4649      	mov	r1, r9
 8000abe:	e79c      	b.n	80009fa <__udivmoddi4+0x222>
 8000ac0:	eba1 0109 	sub.w	r1, r1, r9
 8000ac4:	46c4      	mov	ip, r8
 8000ac6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000aca:	fb09 f804 	mul.w	r8, r9, r4
 8000ace:	e7c4      	b.n	8000a5a <__udivmoddi4+0x282>

08000ad0 <__aeabi_idiv0>:
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	0000      	movs	r0, r0
	...

08000ad8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ada:	f2ad 4d7c 	subw	sp, sp, #1148	@ 0x47c
 8000ade:	af10      	add	r7, sp, #64	@ 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ae0:	f003 fafa 	bl	80040d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae4:	f000 fbc2 	bl	800126c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ae8:	f000 fc2e 	bl	8001348 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aec:	f001 f8e8 	bl	8001cc0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000af0:	f001 f8c6 	bl	8001c80 <MX_DMA_Init>
  MX_ADC1_Init();
 8000af4:	f000 fc5a 	bl	80013ac <MX_ADC1_Init>
  MX_ADC2_Init();
 8000af8:	f000 fcf4 	bl	80014e4 <MX_ADC2_Init>
  MX_FDCAN1_Init();
 8000afc:	f000 fd5a 	bl	80015b4 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000b00:	f000 fdd6 	bl	80016b0 <MX_FDCAN2_Init>
  MX_TIM1_Init();
 8000b04:	f000 ff44 	bl	8001990 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000b08:	f001 f86e 	bl	8001be8 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8000b0c:	f000 fff8 	bl	8001b00 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 8000b10:	f001 f81e 	bl	8001b50 <MX_USART1_UART_Init>
  MX_SDMMC1_SD_Init();
 8000b14:	f000 fec8 	bl	80018a8 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000b18:	f012 fdb0 	bl	801367c <MX_FATFS_Init>
  MX_FDCAN3_Init();
 8000b1c:	f000 fe46 	bl	80017ac <MX_FDCAN3_Init>
  MX_SPI1_Init();
 8000b20:	f000 fee0 	bl	80018e4 <MX_SPI1_Init>


  /* USER CODE BEGIN 2 */
	// Inicializar tarjeta microSD
  print_early("\r\n=== BOOT ===\r\n");
 8000b24:	48b6      	ldr	r0, [pc, #728]	@ (8000e00 <main+0x328>)
 8000b26:	f001 fff3 	bl	8002b10 <print_early>
  dump_reset_cause();
 8000b2a:	f002 f809 	bl	8002b40 <dump_reset_cause>
  heartbeat_pin_init();
 8000b2e:	f002 f8a5 	bl	8002c7c <heartbeat_pin_init>
	//SDCard_start();
	//HAL_Delay(2000)
  /* USER CODE BEGIN 2 */
  HAL_Delay(5);  // let rails settle
 8000b32:	2005      	movs	r0, #5
 8000b34:	f003 fb62 	bl	80041fc <HAL_Delay>

  // --- Keep radio idle while configuring ---
  HAL_GPIO_WritePin(NRF24_CE_PORT,  NRF24_CE_PIN,  GPIO_PIN_RESET); // CE low
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2140      	movs	r1, #64	@ 0x40
 8000b3c:	48b1      	ldr	r0, [pc, #708]	@ (8000e04 <main+0x32c>)
 8000b3e:	f009 f9d5 	bl	8009eec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);   // CSN high
 8000b42:	2201      	movs	r2, #1
 8000b44:	2108      	movs	r1, #8
 8000b46:	48b0      	ldr	r0, [pc, #704]	@ (8000e08 <main+0x330>)
 8000b48:	f009 f9d0 	bl	8009eec <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f003 fb55 	bl	80041fc <HAL_Delay>


  //CHECK de float formatting
  char t[80];
  int n = snprintf(t, sizeof t, "[SMOKE] %.2f %.2f %.2f\r\n", 0.0f, 1.23f, 456.0f);
 8000b52:	f507 7073 	add.w	r0, r7, #972	@ 0x3cc
 8000b56:	f04f 0200 	mov.w	r2, #0
 8000b5a:	4bac      	ldr	r3, [pc, #688]	@ (8000e0c <main+0x334>)
 8000b5c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000b60:	a3a5      	add	r3, pc, #660	@ (adr r3, 8000df8 <main+0x320>)
 8000b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000b6a:	f04f 0200 	mov.w	r2, #0
 8000b6e:	f04f 0300 	mov.w	r3, #0
 8000b72:	e9cd 2300 	strd	r2, r3, [sp]
 8000b76:	4aa6      	ldr	r2, [pc, #664]	@ (8000e10 <main+0x338>)
 8000b78:	2150      	movs	r1, #80	@ 0x50
 8000b7a:	f013 ffd3 	bl	8014b24 <sniprintf>
 8000b7e:	f8c7 0430 	str.w	r0, [r7, #1072]	@ 0x430
  HAL_UART_Transmit(&huart2, (uint8_t*)t, n, 100);
 8000b82:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 8000b86:	b29a      	uxth	r2, r3
 8000b88:	f507 7173 	add.w	r1, r7, #972	@ 0x3cc
 8000b8c:	2364      	movs	r3, #100	@ 0x64
 8000b8e:	48a1      	ldr	r0, [pc, #644]	@ (8000e14 <main+0x33c>)
 8000b90:	f010 fd8c 	bl	80116ac <HAL_UART_Transmit>

  setvbuf(stdout, NULL, _IONBF, 0);
 8000b94:	4ba0      	ldr	r3, [pc, #640]	@ (8000e18 <main+0x340>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	6898      	ldr	r0, [r3, #8]
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	2202      	movs	r2, #2
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	f013 ff0c 	bl	80149bc <setvbuf>



  // Sanity: write CONFIG=0x0B and read it back
  uint8_t w_cfg[2] = { (uint8_t)(0x20 | 0x00), 0x0B }; // W_REGISTER|CONFIG = 0x0B
 8000ba4:	f44f 6332 	mov.w	r3, #2848	@ 0xb20
 8000ba8:	f8a7 33c8 	strh.w	r3, [r7, #968]	@ 0x3c8
  uint8_t r_cfg[2] = { 0x00, 0xFF };                   // R_REGISTER|CONFIG, dummy
 8000bac:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8000bb0:	f8a7 33c4 	strh.w	r3, [r7, #964]	@ 0x3c4
  uint8_t rxw[2] = {0}, rxr[2] = {0};
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	f8a7 33c0 	strh.w	r3, [r7, #960]	@ 0x3c0
 8000bba:	2300      	movs	r3, #0
 8000bbc:	f8a7 33bc 	strh.w	r3, [r7, #956]	@ 0x3bc

  CSN_LOW();  HAL_SPI_TransmitReceive(&hspi1, w_cfg, rxw, 2, 100);  CSN_HIGH();
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2108      	movs	r1, #8
 8000bc4:	4890      	ldr	r0, [pc, #576]	@ (8000e08 <main+0x330>)
 8000bc6:	f009 f991 	bl	8009eec <HAL_GPIO_WritePin>
 8000bca:	f507 7270 	add.w	r2, r7, #960	@ 0x3c0
 8000bce:	f507 7172 	add.w	r1, r7, #968	@ 0x3c8
 8000bd2:	2364      	movs	r3, #100	@ 0x64
 8000bd4:	9300      	str	r3, [sp, #0]
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	4890      	ldr	r0, [pc, #576]	@ (8000e1c <main+0x344>)
 8000bda:	f00e ff0f 	bl	800f9fc <HAL_SPI_TransmitReceive>
 8000bde:	2201      	movs	r2, #1
 8000be0:	2108      	movs	r1, #8
 8000be2:	4889      	ldr	r0, [pc, #548]	@ (8000e08 <main+0x330>)
 8000be4:	f009 f982 	bl	8009eec <HAL_GPIO_WritePin>
  CSN_LOW();  HAL_SPI_TransmitReceive(&hspi1, r_cfg, rxr, 2, 100);  CSN_HIGH();
 8000be8:	2200      	movs	r2, #0
 8000bea:	2108      	movs	r1, #8
 8000bec:	4886      	ldr	r0, [pc, #536]	@ (8000e08 <main+0x330>)
 8000bee:	f009 f97d 	bl	8009eec <HAL_GPIO_WritePin>
 8000bf2:	f507 726f 	add.w	r2, r7, #956	@ 0x3bc
 8000bf6:	f507 7171 	add.w	r1, r7, #964	@ 0x3c4
 8000bfa:	2364      	movs	r3, #100	@ 0x64
 8000bfc:	9300      	str	r3, [sp, #0]
 8000bfe:	2302      	movs	r3, #2
 8000c00:	4886      	ldr	r0, [pc, #536]	@ (8000e1c <main+0x344>)
 8000c02:	f00e fefb 	bl	800f9fc <HAL_SPI_TransmitReceive>
 8000c06:	2201      	movs	r2, #1
 8000c08:	2108      	movs	r1, #8
 8000c0a:	487f      	ldr	r0, [pc, #508]	@ (8000e08 <main+0x330>)
 8000c0c:	f009 f96e 	bl	8009eec <HAL_GPIO_WritePin>

  char dbg[96];
  snprintf(dbg, sizeof dbg, "[POST-ACTIVATE] status_w=%02X cfg=%02X\r\n", rxw[0], rxr[1]);
 8000c10:	f897 33c0 	ldrb.w	r3, [r7, #960]	@ 0x3c0
 8000c14:	461a      	mov	r2, r3
 8000c16:	f897 33bd 	ldrb.w	r3, [r7, #957]	@ 0x3bd
 8000c1a:	f507 7057 	add.w	r0, r7, #860	@ 0x35c
 8000c1e:	9300      	str	r3, [sp, #0]
 8000c20:	4613      	mov	r3, r2
 8000c22:	4a7f      	ldr	r2, [pc, #508]	@ (8000e20 <main+0x348>)
 8000c24:	2160      	movs	r1, #96	@ 0x60
 8000c26:	f013 ff7d 	bl	8014b24 <sniprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)dbg, strlen(dbg), HAL_MAX_DELAY);
 8000c2a:	f507 7357 	add.w	r3, r7, #860	@ 0x35c
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff fbbe 	bl	80003b0 <strlen>
 8000c34:	4603      	mov	r3, r0
 8000c36:	b29a      	uxth	r2, r3
 8000c38:	f507 7157 	add.w	r1, r7, #860	@ 0x35c
 8000c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c40:	4874      	ldr	r0, [pc, #464]	@ (8000e14 <main+0x33c>)
 8000c42:	f010 fd33 	bl	80116ac <HAL_UART_Transmit>

  // ---- proceed with your driver now ----
  HAL_Delay(5);
 8000c46:	2005      	movs	r0, #5
 8000c48:	f003 fad8 	bl	80041fc <HAL_Delay>
  uint8_t st = NRF24_StatusNOP();
 8000c4c:	f002 fb7a 	bl	8003344 <NRF24_StatusNOP>
 8000c50:	4603      	mov	r3, r0
 8000c52:	f887 342f 	strb.w	r3, [r7, #1071]	@ 0x42f
  char m[64];
  snprintf(m,sizeof(m),"[NRF] STATUS via NOP = 0x%02X\r\n", st);
 8000c56:	f897 342f 	ldrb.w	r3, [r7, #1071]	@ 0x42f
 8000c5a:	f507 7047 	add.w	r0, r7, #796	@ 0x31c
 8000c5e:	4a71      	ldr	r2, [pc, #452]	@ (8000e24 <main+0x34c>)
 8000c60:	2140      	movs	r1, #64	@ 0x40
 8000c62:	f013 ff5f 	bl	8014b24 <sniprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)m,strlen(m),HAL_MAX_DELAY);
 8000c66:	f507 7347 	add.w	r3, r7, #796	@ 0x31c
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff fba0 	bl	80003b0 <strlen>
 8000c70:	4603      	mov	r3, r0
 8000c72:	b29a      	uxth	r2, r3
 8000c74:	f507 7147 	add.w	r1, r7, #796	@ 0x31c
 8000c78:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7c:	4865      	ldr	r0, [pc, #404]	@ (8000e14 <main+0x33c>)
 8000c7e:	f010 fd15 	bl	80116ac <HAL_UART_Transmit>
  NRF24_Init();
 8000c82:	f002 fa1f 	bl	80030c4 <NRF24_Init>
  NRF24_TxMode(rf_addr, TEL_CHAN);
 8000c86:	214c      	movs	r1, #76	@ 0x4c
 8000c88:	4867      	ldr	r0, [pc, #412]	@ (8000e28 <main+0x350>)
 8000c8a:	f002 fa67 	bl	800315c <NRF24_TxMode>
  nrf24_WriteReg(DYNPD, 0x00);        // all pipes DPL off
 8000c8e:	2100      	movs	r1, #0
 8000c90:	201c      	movs	r0, #28
 8000c92:	f002 f8e5 	bl	8002e60 <nrf24_WriteReg>
  nrf24_WriteReg(FEATURE, 0x00);      // disable DPL/ACK pay/NoAck
 8000c96:	2100      	movs	r1, #0
 8000c98:	201d      	movs	r0, #29
 8000c9a:	f002 f8e1 	bl	8002e60 <nrf24_WriteReg>
  nrf24_WriteReg(RX_PW_P0, 32);       // fixed 32 bytes on pipe 0
 8000c9e:	2120      	movs	r1, #32
 8000ca0:	2011      	movs	r0, #17
 8000ca2:	f002 f8dd 	bl	8002e60 <nrf24_WriteReg>
  NRF24_Dump();
 8000ca6:	f002 fac7 	bl	8003238 <NRF24_Dump>
  // After NRF24_Init(); NRF24_TxMode(...); NRF24_Dump();
  uint8_t rd = nrf24_write_readback(RF_CH, TEL_CHAN);
 8000caa:	214c      	movs	r1, #76	@ 0x4c
 8000cac:	2005      	movs	r0, #5
 8000cae:	f001 fef5 	bl	8002a9c <nrf24_write_readback>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	f887 342e 	strb.w	r3, [r7, #1070]	@ 0x42e
  (void)rd;// expect same
  rd = nrf24_write_readback(EN_AA, 0x00);                 // AutoAck OFF expected
 8000cb8:	2100      	movs	r1, #0
 8000cba:	2001      	movs	r0, #1
 8000cbc:	f001 feee 	bl	8002a9c <nrf24_write_readback>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	f887 342e 	strb.w	r3, [r7, #1070]	@ 0x42e
  rd = nrf24_write_readback(SETUP_RETR, 0x00);            // no auto-retry
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	2004      	movs	r0, #4
 8000cca:	f001 fee7 	bl	8002a9c <nrf24_write_readback>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	f887 342e 	strb.w	r3, [r7, #1070]	@ 0x42e
  uint8_t cfg = nrf24_ReadReg(CONFIG);
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	f002 f913 	bl	8002f00 <nrf24_ReadReg>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	f887 342d 	strb.w	r3, [r7, #1069]	@ 0x42d
  uint8_t rf  = nrf24_ReadReg(RF_SETUP);
 8000ce0:	2006      	movs	r0, #6
 8000ce2:	f002 f90d 	bl	8002f00 <nrf24_ReadReg>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	f887 342c 	strb.w	r3, [r7, #1068]	@ 0x42c
  uint8_t ch  = nrf24_ReadReg(RF_CH);
 8000cec:	2005      	movs	r0, #5
 8000cee:	f002 f907 	bl	8002f00 <nrf24_ReadReg>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	f887 342b 	strb.w	r3, [r7, #1067]	@ 0x42b
  char info[64];
  snprintf(info, sizeof(info), "[NRF] CFG=%02X RF=%02X CH=%u\r\n", cfg, rf, ch);
 8000cf8:	f897 142d 	ldrb.w	r1, [r7, #1069]	@ 0x42d
 8000cfc:	f897 342c 	ldrb.w	r3, [r7, #1068]	@ 0x42c
 8000d00:	f897 242b 	ldrb.w	r2, [r7, #1067]	@ 0x42b
 8000d04:	f507 7037 	add.w	r0, r7, #732	@ 0x2dc
 8000d08:	9201      	str	r2, [sp, #4]
 8000d0a:	9300      	str	r3, [sp, #0]
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	4a47      	ldr	r2, [pc, #284]	@ (8000e2c <main+0x354>)
 8000d10:	2140      	movs	r1, #64	@ 0x40
 8000d12:	f013 ff07 	bl	8014b24 <sniprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 8000d16:	f507 7337 	add.w	r3, r7, #732	@ 0x2dc
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff fb48 	bl	80003b0 <strlen>
 8000d20:	4603      	mov	r3, r0
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	f507 7137 	add.w	r1, r7, #732	@ 0x2dc
 8000d28:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2c:	4839      	ldr	r0, [pc, #228]	@ (8000e14 <main+0x33c>)
 8000d2e:	f010 fcbd 	bl	80116ac <HAL_UART_Transmit>
	//sprintf(buffer, "%u,1test,1test1,1test2\n", (unsigned)time(NULL));
	//SDCard_write("data.csv", "1test,1test1,1test2\n", 0); // el modo 0 asume que existe el archivo y añade datos
	//print(buffer);

	// HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)buffer_adc, 3) != HAL_OK)
 8000d32:	2203      	movs	r2, #3
 8000d34:	493e      	ldr	r1, [pc, #248]	@ (8000e30 <main+0x358>)
 8000d36:	483f      	ldr	r0, [pc, #252]	@ (8000e34 <main+0x35c>)
 8000d38:	f003 ff78 	bl	8004c2c <HAL_ADC_Start_DMA>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d004      	beq.n	8000d4c <main+0x274>
	{
#if DEBUG
		print("Error al inicializar ADC_DMA");
 8000d42:	483d      	ldr	r0, [pc, #244]	@ (8000e38 <main+0x360>)
 8000d44:	f001 f8bc 	bl	8001ec0 <print>
#endif
		Error_Handler();
 8000d48:	f002 f84a 	bl	8002de0 <Error_Handler>
	//LPF_EMA_Init(&s1_filt, 0.2f);
	//LPF_EMA_Init(&s2_filt, 0.2f);

	// Inicialización de buses CAN
	// Inversor
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8000d4c:	483b      	ldr	r0, [pc, #236]	@ (8000e3c <main+0x364>)
 8000d4e:	f007 ff4f 	bl	8008bf0 <HAL_FDCAN_Start>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d004      	beq.n	8000d62 <main+0x28a>
	{
#if DEBUG
		print("Error al inicializar CAN_INV");
 8000d58:	4839      	ldr	r0, [pc, #228]	@ (8000e40 <main+0x368>)
 8000d5a:	f001 f8b1 	bl	8001ec0 <print>
#endif
		Error_Handler();
 8000d5e:	f002 f83f 	bl	8002de0 <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000d62:	2200      	movs	r2, #0
 8000d64:	2101      	movs	r1, #1
 8000d66:	4835      	ldr	r0, [pc, #212]	@ (8000e3c <main+0x364>)
 8000d68:	f008 f984 	bl	8009074 <HAL_FDCAN_ActivateNotification>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d004      	beq.n	8000d7c <main+0x2a4>
									   0) != HAL_OK)
	{

#if DEBUG
		print("Error al activar NOTIFICACION CAN_INV");
 8000d72:	4834      	ldr	r0, [pc, #208]	@ (8000e44 <main+0x36c>)
 8000d74:	f001 f8a4 	bl	8001ec0 <print>
#endif
		Error_Handler();
 8000d78:	f002 f832 	bl	8002de0 <Error_Handler>
#endif
		Error_Handler();
	}*/

	// Acumulador
	if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK)
 8000d7c:	4832      	ldr	r0, [pc, #200]	@ (8000e48 <main+0x370>)
 8000d7e:	f007 ff37 	bl	8008bf0 <HAL_FDCAN_Start>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d004      	beq.n	8000d92 <main+0x2ba>
	{

#if DEBUG
		print("Error al inicializar CAN_ACU");
 8000d88:	4830      	ldr	r0, [pc, #192]	@ (8000e4c <main+0x374>)
 8000d8a:	f001 f899 	bl	8001ec0 <print>

#endif
		Error_Handler();
 8000d8e:	f002 f827 	bl	8002de0 <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000d92:	2200      	movs	r2, #0
 8000d94:	2101      	movs	r1, #1
 8000d96:	482c      	ldr	r0, [pc, #176]	@ (8000e48 <main+0x370>)
 8000d98:	f008 f96c 	bl	8009074 <HAL_FDCAN_ActivateNotification>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d004      	beq.n	8000dac <main+0x2d4>
									   0) != HAL_OK)
	{

#if DEBUG
		print("Error al activar NOTIFICATION CAN_ACU");
 8000da2:	482b      	ldr	r0, [pc, #172]	@ (8000e50 <main+0x378>)
 8000da4:	f001 f88c 	bl	8001ec0 <print>
#endif
		Error_Handler();
 8000da8:	f002 f81a 	bl	8002de0 <Error_Handler>
	}

	//Dash
	if (HAL_FDCAN_Start(&hfdcan3) != HAL_OK)
 8000dac:	4829      	ldr	r0, [pc, #164]	@ (8000e54 <main+0x37c>)
 8000dae:	f007 ff1f 	bl	8008bf0 <HAL_FDCAN_Start>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d004      	beq.n	8000dc2 <main+0x2ea>
	{

#if DEBUG
		print("Error al inicializar CAN_DASH");
 8000db8:	4827      	ldr	r0, [pc, #156]	@ (8000e58 <main+0x380>)
 8000dba:	f001 f881 	bl	8001ec0 <print>

#endif
		Error_Handler();
 8000dbe:	f002 f80f 	bl	8002de0 <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan3, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	4823      	ldr	r0, [pc, #140]	@ (8000e54 <main+0x37c>)
 8000dc8:	f008 f954 	bl	8009074 <HAL_FDCAN_ActivateNotification>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d004      	beq.n	8000ddc <main+0x304>
									   0) != HAL_OK)
	{

#if DEBUG
		print("Error al activar NOTIFICATION CAN_DASH");
 8000dd2:	4822      	ldr	r0, [pc, #136]	@ (8000e5c <main+0x384>)
 8000dd4:	f001 f874 	bl	8001ec0 <print>
#endif
		Error_Handler();
 8000dd8:	f002 f802 	bl	8002de0 <Error_Handler>
	}

	//---------- SECUENCIA DE ARRANQUE ----------
#if (DEBUG)
	print("Solicitar tensión inversor");
 8000ddc:	4820      	ldr	r0, [pc, #128]	@ (8000e60 <main+0x388>)
 8000dde:	f001 f86f 	bl	8001ec0 <print>
#endif

#if (CALIBRATION)
	config_inv_lectura_v = 1;
 8000de2:	4b20      	ldr	r3, [pc, #128]	@ (8000e64 <main+0x38c>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	601a      	str	r2, [r3, #0]
#endif

	// Espera ACK inversor (DC bus)
	//Comentar para CAN ID
	HAL_TIM_Base_Start_IT(&htim16);
 8000de8:	481f      	ldr	r0, [pc, #124]	@ (8000e68 <main+0x390>)
 8000dea:	f00f fa81 	bl	80102f0 <HAL_TIM_Base_Start_IT>
	uint32_t _last_req_log = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
	while (config_inv_lectura_v == 0)
 8000df4:	e061      	b.n	8000eba <main+0x3e2>
 8000df6:	bf00      	nop
 8000df8:	80000000 	.word	0x80000000
 8000dfc:	3ff3ae14 	.word	0x3ff3ae14
 8000e00:	080182a8 	.word	0x080182a8
 8000e04:	58020800 	.word	0x58020800
 8000e08:	58021800 	.word	0x58021800
 8000e0c:	407c8000 	.word	0x407c8000
 8000e10:	080182bc 	.word	0x080182bc
 8000e14:	24000774 	.word	0x24000774
 8000e18:	2400002c 	.word	0x2400002c
 8000e1c:	240005c0 	.word	0x240005c0
 8000e20:	080182d8 	.word	0x080182d8
 8000e24:	08018304 	.word	0x08018304
 8000e28:	24000004 	.word	0x24000004
 8000e2c:	08018324 	.word	0x08018324
 8000e30:	240008f4 	.word	0x240008f4
 8000e34:	2400020c 	.word	0x2400020c
 8000e38:	08018344 	.word	0x08018344
 8000e3c:	24000364 	.word	0x24000364
 8000e40:	08018364 	.word	0x08018364
 8000e44:	08018384 	.word	0x08018384
 8000e48:	24000404 	.word	0x24000404
 8000e4c:	080183ac 	.word	0x080183ac
 8000e50:	080183cc 	.word	0x080183cc
 8000e54:	240004a4 	.word	0x240004a4
 8000e58:	080183f4 	.word	0x080183f4
 8000e5c:	08018414 	.word	0x08018414
 8000e60:	0801843c 	.word	0x0801843c
 8000e64:	24000208 	.word	0x24000208
 8000e68:	24000694 	.word	0x24000694
	{
		if ((HAL_GetTick() - _last_req_log) >= 1000) {
 8000e6c:	f003 f9ba 	bl	80041e4 <HAL_GetTick>
 8000e70:	4602      	mov	r2, r0
 8000e72:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000e7c:	d306      	bcc.n	8000e8c <main+0x3b4>
		        _last_req_log = HAL_GetTick();
 8000e7e:	f003 f9b1 	bl	80041e4 <HAL_GetTick>
 8000e82:	f8c7 0434 	str.w	r0, [r7, #1076]	@ 0x434
		        print("Solicitar tensión inversor");
 8000e86:	4846      	ldr	r0, [pc, #280]	@ (8000fa0 <main+0x4c8>)
 8000e88:	f001 f81a 	bl	8001ec0 <print>
		    }
		static uint32_t last = 0;
		    if (HAL_GetTick() - last >= 500) {
 8000e8c:	f003 f9aa 	bl	80041e4 <HAL_GetTick>
 8000e90:	4602      	mov	r2, r0
 8000e92:	4b44      	ldr	r3, [pc, #272]	@ (8000fa4 <main+0x4cc>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000e9c:	d306      	bcc.n	8000eac <main+0x3d4>
		        last = HAL_GetTick();
 8000e9e:	f003 f9a1 	bl	80041e4 <HAL_GetTick>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	4a3f      	ldr	r2, [pc, #252]	@ (8000fa4 <main+0x4cc>)
 8000ea6:	6013      	str	r3, [r2, #0]
		        tel_send_now();   // sends one 32-byte frame
 8000ea8:	f001 fcbc 	bl	8002824 <tel_send_now>

		    }
		if (config_inv_lectura_v == 1)
 8000eac:	4b3e      	ldr	r3, [pc, #248]	@ (8000fa8 <main+0x4d0>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d102      	bne.n	8000eba <main+0x3e2>
		{

#if DEBUG
			print("CAN_INV: Lectura de DC_BUS_VOLTAGE correctamente");
 8000eb4:	483d      	ldr	r0, [pc, #244]	@ (8000fac <main+0x4d4>)
 8000eb6:	f001 f803 	bl	8001ec0 <print>
	while (config_inv_lectura_v == 0)
 8000eba:	4b3b      	ldr	r3, [pc, #236]	@ (8000fa8 <main+0x4d0>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d0d4      	beq.n	8000e6c <main+0x394>
	}
#endif

	// Activar READY-TO-DRIVE-SOUND (RTDS) durante 2s
#if DEBUG
	print("RTDS sonando");
 8000ec2:	483b      	ldr	r0, [pc, #236]	@ (8000fb0 <main+0x4d8>)
 8000ec4:	f000 fffc 	bl	8001ec0 <print>
	HAL_GPIO_WritePin(RTDS_GPIO_Port, RTDS_Pin, GPIO_PIN_RESET); // Apaga RTDS

#endif

#if DEBUG
	print("RTDS apagado");
 8000ec8:	483a      	ldr	r0, [pc, #232]	@ (8000fb4 <main+0x4dc>)
 8000eca:	f000 fff9 	bl	8001ec0 <print>

	}
#endif

#if DEBUG
	print("state: ready");
 8000ece:	483a      	ldr	r0, [pc, #232]	@ (8000fb8 <main+0x4e0>)
 8000ed0:	f000 fff6 	bl	8001ec0 <print>
	{

		// Envío datos telemetría
		static uint32_t last_1s = 0;
		static uint32_t last_irq_seen = 0;
		if (HAL_GetTick() - last_1s >= 1000) {
 8000ed4:	f003 f986 	bl	80041e4 <HAL_GetTick>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	4b38      	ldr	r3, [pc, #224]	@ (8000fbc <main+0x4e4>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000ee4:	d343      	bcc.n	8000f6e <main+0x496>
		    last_1s = HAL_GetTick();
 8000ee6:	f003 f97d 	bl	80041e4 <HAL_GetTick>
 8000eea:	4603      	mov	r3, r0
 8000eec:	4a33      	ldr	r2, [pc, #204]	@ (8000fbc <main+0x4e4>)
 8000eee:	6013      	str	r3, [r2, #0]
		    char hb[180];
		           snprintf(hb, sizeof(hb), // @suppress("Float formatting support")
 8000ef0:	4b33      	ldr	r3, [pc, #204]	@ (8000fc0 <main+0x4e8>)
 8000ef2:	681e      	ldr	r6, [r3, #0]
 8000ef4:	4b33      	ldr	r3, [pc, #204]	@ (8000fc4 <main+0x4ec>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	607b      	str	r3, [r7, #4]
 8000efa:	4a33      	ldr	r2, [pc, #204]	@ (8000fc8 <main+0x4f0>)
 8000efc:	6812      	ldr	r2, [r2, #0]
		                    "[HB] irq=%lu sent=%lu fail=%lu%s  Vdc=%d rpm=%d state=%u vCellMin=%.0f\r\n",
		                    (unsigned long)tel_irq_cnt,
		                    (unsigned long)tel_sent_ok,
		                    (unsigned long)tel_sent_fail,
		                    (tel_irq_cnt == last_irq_seen) ? " (NO NEW IRQ!)" : "",
 8000efe:	4930      	ldr	r1, [pc, #192]	@ (8000fc0 <main+0x4e8>)
 8000f00:	6808      	ldr	r0, [r1, #0]
 8000f02:	4932      	ldr	r1, [pc, #200]	@ (8000fcc <main+0x4f4>)
 8000f04:	6809      	ldr	r1, [r1, #0]
		           snprintf(hb, sizeof(hb), // @suppress("Float formatting support")
 8000f06:	4288      	cmp	r0, r1
 8000f08:	d101      	bne.n	8000f0e <main+0x436>
 8000f0a:	4931      	ldr	r1, [pc, #196]	@ (8000fd0 <main+0x4f8>)
 8000f0c:	e000      	b.n	8000f10 <main+0x438>
 8000f0e:	4931      	ldr	r1, [pc, #196]	@ (8000fd4 <main+0x4fc>)
 8000f10:	4831      	ldr	r0, [pc, #196]	@ (8000fd8 <main+0x500>)
 8000f12:	6800      	ldr	r0, [r0, #0]
 8000f14:	4c31      	ldr	r4, [pc, #196]	@ (8000fdc <main+0x504>)
 8000f16:	6824      	ldr	r4, [r4, #0]
 8000f18:	4d31      	ldr	r5, [pc, #196]	@ (8000fe0 <main+0x508>)
 8000f1a:	782d      	ldrb	r5, [r5, #0]
 8000f1c:	462b      	mov	r3, r5
 8000f1e:	4d31      	ldr	r5, [pc, #196]	@ (8000fe4 <main+0x50c>)
 8000f20:	edd5 7a00 	vldr	s15, [r5]
 8000f24:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f28:	f507 7500 	add.w	r5, r7, #512	@ 0x200
 8000f2c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8000f30:	9305      	str	r3, [sp, #20]
 8000f32:	9404      	str	r4, [sp, #16]
 8000f34:	9003      	str	r0, [sp, #12]
 8000f36:	9102      	str	r1, [sp, #8]
 8000f38:	9201      	str	r2, [sp, #4]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	9300      	str	r3, [sp, #0]
 8000f3e:	4633      	mov	r3, r6
 8000f40:	4a29      	ldr	r2, [pc, #164]	@ (8000fe8 <main+0x510>)
 8000f42:	21b4      	movs	r1, #180	@ 0xb4
 8000f44:	4628      	mov	r0, r5
 8000f46:	f013 fded 	bl	8014b24 <sniprintf>
		                    inv_dc_bus_voltage, e_machine_rpm, state, v_celda_min);

		    HAL_UART_Transmit(&huart2, (uint8_t*)hb, strlen(hb), HAL_MAX_DELAY);
 8000f4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fa2e 	bl	80003b0 <strlen>
 8000f54:	4603      	mov	r3, r0
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	f507 7100 	add.w	r1, r7, #512	@ 0x200
 8000f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f60:	4822      	ldr	r0, [pc, #136]	@ (8000fec <main+0x514>)
 8000f62:	f010 fba3 	bl	80116ac <HAL_UART_Transmit>
		    last_irq_seen = tel_irq_cnt;
 8000f66:	4b16      	ldr	r3, [pc, #88]	@ (8000fc0 <main+0x4e8>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a18      	ldr	r2, [pc, #96]	@ (8000fcc <main+0x4f4>)
 8000f6c:	6013      	str	r3, [r2, #0]

		}

		if (tel_tick >= 500) {
 8000f6e:	4b20      	ldr	r3, [pc, #128]	@ (8000ff0 <main+0x518>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000f76:	d304      	bcc.n	8000f82 <main+0x4aa>
		        tel_tick = 0;          // consume the tick
 8000f78:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff0 <main+0x518>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
		        tel_send_now();        // SPI + UART OK here (foreground)
 8000f7e:	f001 fc51 	bl	8002824 <tel_send_now>
		    }
        // (A) Core counters + a few key signals
        char hb[180];
        snprintf(hb, sizeof(hb), // @suppress("Float formatting support")
 8000f82:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc0 <main+0x4e8>)
 8000f84:	681e      	ldr	r6, [r3, #0]
 8000f86:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc4 <main+0x4ec>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	4a0e      	ldr	r2, [pc, #56]	@ (8000fc8 <main+0x4f0>)
 8000f8e:	6812      	ldr	r2, [r2, #0]
                 "[HB] irq=%lu sent=%lu fail=%lu%s  Vdc=%d rpm=%d state=%u vCellMin=%.0f\r\n",
                 (unsigned long)tel_irq_cnt,
                 (unsigned long)tel_sent_ok,
                 (unsigned long)tel_sent_fail,
                 (tel_irq_cnt == last_irq_seen) ? " (NO NEW IRQ!)" : "",
 8000f90:	490b      	ldr	r1, [pc, #44]	@ (8000fc0 <main+0x4e8>)
 8000f92:	6808      	ldr	r0, [r1, #0]
 8000f94:	490d      	ldr	r1, [pc, #52]	@ (8000fcc <main+0x4f4>)
 8000f96:	6809      	ldr	r1, [r1, #0]
        snprintf(hb, sizeof(hb), // @suppress("Float formatting support")
 8000f98:	4288      	cmp	r0, r1
 8000f9a:	d12b      	bne.n	8000ff4 <main+0x51c>
 8000f9c:	490c      	ldr	r1, [pc, #48]	@ (8000fd0 <main+0x4f8>)
 8000f9e:	e02a      	b.n	8000ff6 <main+0x51e>
 8000fa0:	0801843c 	.word	0x0801843c
 8000fa4:	2400098c 	.word	0x2400098c
 8000fa8:	24000208 	.word	0x24000208
 8000fac:	08018458 	.word	0x08018458
 8000fb0:	0801848c 	.word	0x0801848c
 8000fb4:	0801849c 	.word	0x0801849c
 8000fb8:	080184ac 	.word	0x080184ac
 8000fbc:	24000990 	.word	0x24000990
 8000fc0:	2400080c 	.word	0x2400080c
 8000fc4:	24000810 	.word	0x24000810
 8000fc8:	24000814 	.word	0x24000814
 8000fcc:	24000994 	.word	0x24000994
 8000fd0:	080184bc 	.word	0x080184bc
 8000fd4:	080184cc 	.word	0x080184cc
 8000fd8:	240008d8 	.word	0x240008d8
 8000fdc:	240008dc 	.word	0x240008dc
 8000fe0:	24000912 	.word	0x24000912
 8000fe4:	2400000c 	.word	0x2400000c
 8000fe8:	080184d0 	.word	0x080184d0
 8000fec:	24000774 	.word	0x24000774
 8000ff0:	24000808 	.word	0x24000808
 8000ff4:	498d      	ldr	r1, [pc, #564]	@ (800122c <main+0x754>)
 8000ff6:	488e      	ldr	r0, [pc, #568]	@ (8001230 <main+0x758>)
 8000ff8:	6800      	ldr	r0, [r0, #0]
 8000ffa:	4c8e      	ldr	r4, [pc, #568]	@ (8001234 <main+0x75c>)
 8000ffc:	6824      	ldr	r4, [r4, #0]
 8000ffe:	4d8e      	ldr	r5, [pc, #568]	@ (8001238 <main+0x760>)
 8001000:	782d      	ldrb	r5, [r5, #0]
 8001002:	462b      	mov	r3, r5
 8001004:	4d8d      	ldr	r5, [pc, #564]	@ (800123c <main+0x764>)
 8001006:	edd5 7a00 	vldr	s15, [r5]
 800100a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800100e:	f507 75a6 	add.w	r5, r7, #332	@ 0x14c
 8001012:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001016:	9305      	str	r3, [sp, #20]
 8001018:	9404      	str	r4, [sp, #16]
 800101a:	9003      	str	r0, [sp, #12]
 800101c:	9102      	str	r1, [sp, #8]
 800101e:	9201      	str	r2, [sp, #4]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	4633      	mov	r3, r6
 8001026:	4a86      	ldr	r2, [pc, #536]	@ (8001240 <main+0x768>)
 8001028:	21b4      	movs	r1, #180	@ 0xb4
 800102a:	4628      	mov	r0, r5
 800102c:	f013 fd7a 	bl	8014b24 <sniprintf>
                 inv_dc_bus_voltage, e_machine_rpm, state, v_celda_min);
        HAL_UART_Transmit(&huart2, (uint8_t*)hb, strlen(hb), HAL_MAX_DELAY);
 8001030:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff f9bb 	bl	80003b0 <strlen>
 800103a:	4603      	mov	r3, r0
 800103c:	b29a      	uxth	r2, r3
 800103e:	f507 71a6 	add.w	r1, r7, #332	@ 0x14c
 8001042:	f04f 33ff 	mov.w	r3, #4294967295
 8001046:	487f      	ldr	r0, [pc, #508]	@ (8001244 <main+0x76c>)
 8001048:	f010 fb30 	bl	80116ac <HAL_UART_Transmit>
        last_irq_seen = tel_irq_cnt;
 800104c:	4b7e      	ldr	r3, [pc, #504]	@ (8001248 <main+0x770>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a7e      	ldr	r2, [pc, #504]	@ (800124c <main+0x774>)
 8001052:	6013      	str	r3, [r2, #0]

        // (B) Quick GPIO view of the radio pins (power/wiring sanity)
        gpio_dump_once();
 8001054:	f001 fc9a 	bl	800298c <gpio_dump_once>

        // (C) nRF24 register snapshot
        nrf24_diag_once();
 8001058:	f001 fccc 	bl	80029f4 <nrf24_diag_once>

        // (D) CAN liveness on all three buses
        FDCAN_ProtocolStatusTypeDef ps1, ps2, ps3;
        HAL_FDCAN_GetProtocolStatus(&hfdcan1, &ps1);
 800105c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001060:	4619      	mov	r1, r3
 8001062:	487b      	ldr	r0, [pc, #492]	@ (8001250 <main+0x778>)
 8001064:	f007 ffb6 	bl	8008fd4 <HAL_FDCAN_GetProtocolStatus>
        HAL_FDCAN_GetProtocolStatus(&hfdcan2, &ps2);
 8001068:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800106c:	4619      	mov	r1, r3
 800106e:	4879      	ldr	r0, [pc, #484]	@ (8001254 <main+0x77c>)
 8001070:	f007 ffb0 	bl	8008fd4 <HAL_FDCAN_GetProtocolStatus>
        HAL_FDCAN_GetProtocolStatus(&hfdcan3, &ps3);
 8001074:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001078:	4619      	mov	r1, r3
 800107a:	4877      	ldr	r0, [pc, #476]	@ (8001258 <main+0x780>)
 800107c:	f007 ffaa 	bl	8008fd4 <HAL_FDCAN_GetProtocolStatus>
        char cb[160];
        snprintf(cb, sizeof(cb),
            "[CAN] INV:LEC=%lu BOFF=%lu | ACU:LEC=%lu BOFF=%lu | DASH:LEC=%lu BOFF=%lu\r\n",
            (unsigned long)ps1.LastErrorCode, (unsigned long)ps1.BusOff,
 8001080:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001084:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8001088:	681e      	ldr	r6, [r3, #0]
 800108a:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800108e:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8001092:	695b      	ldr	r3, [r3, #20]
            (unsigned long)ps2.LastErrorCode, (unsigned long)ps2.BusOff,
 8001094:	f507 6287 	add.w	r2, r7, #1080	@ 0x438
 8001098:	f5a2 7279 	sub.w	r2, r2, #996	@ 0x3e4
 800109c:	6812      	ldr	r2, [r2, #0]
 800109e:	f507 6187 	add.w	r1, r7, #1080	@ 0x438
 80010a2:	f5a1 7179 	sub.w	r1, r1, #996	@ 0x3e4
 80010a6:	6949      	ldr	r1, [r1, #20]
            (unsigned long)ps3.LastErrorCode, (unsigned long)ps3.BusOff);
 80010a8:	f507 6087 	add.w	r0, r7, #1080	@ 0x438
 80010ac:	f5a0 706e 	sub.w	r0, r0, #952	@ 0x3b8
 80010b0:	6800      	ldr	r0, [r0, #0]
 80010b2:	f507 6487 	add.w	r4, r7, #1080	@ 0x438
 80010b6:	f5a4 746e 	sub.w	r4, r4, #952	@ 0x3b8
 80010ba:	6964      	ldr	r4, [r4, #20]
        snprintf(cb, sizeof(cb),
 80010bc:	f107 05ac 	add.w	r5, r7, #172	@ 0xac
 80010c0:	9404      	str	r4, [sp, #16]
 80010c2:	9003      	str	r0, [sp, #12]
 80010c4:	9102      	str	r1, [sp, #8]
 80010c6:	9201      	str	r2, [sp, #4]
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	4633      	mov	r3, r6
 80010cc:	4a63      	ldr	r2, [pc, #396]	@ (800125c <main+0x784>)
 80010ce:	21a0      	movs	r1, #160	@ 0xa0
 80010d0:	4628      	mov	r0, r5
 80010d2:	f013 fd27 	bl	8014b24 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)cb, strlen(cb), HAL_MAX_DELAY);
 80010d6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff f968 	bl	80003b0 <strlen>
 80010e0:	4603      	mov	r3, r0
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	f107 01ac 	add.w	r1, r7, #172	@ 0xac
 80010e8:	f04f 33ff 	mov.w	r3, #4294967295
 80010ec:	4855      	ldr	r0, [pc, #340]	@ (8001244 <main+0x76c>)
 80010ee:	f010 fadd 	bl	80116ac <HAL_UART_Transmit>

        // (E) Peek the next telemetry payload (format sanity)
        TelFrame peek;
        tel_build_packet(&peek);
 80010f2:	f107 0308 	add.w	r3, r7, #8
 80010f6:	4618      	mov	r0, r3
 80010f8:	f001 fa58 	bl	80025ac <tel_build_packet>
        char txl[220];
        int n = snprintf(txl, sizeof(txl),
            "[TEL] next ID=0x%X seq=%u v1=%.1f v2=%.1f v3=%.1f v4=%.1f v5=%.1f v6=%.1f v7=%.1f\r\n",
            peek.id, peek.seq, peek.v1, peek.v2, peek.v3, peek.v4, peek.v5, peek.v6, peek.v7);
 80010fc:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001100:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 8001104:	881b      	ldrh	r3, [r3, #0]
        int n = snprintf(txl, sizeof(txl),
 8001106:	4619      	mov	r1, r3
            peek.id, peek.seq, peek.v1, peek.v2, peek.v3, peek.v4, peek.v5, peek.v6, peek.v7);
 8001108:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800110c:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 8001110:	885b      	ldrh	r3, [r3, #2]
        int n = snprintf(txl, sizeof(txl),
 8001112:	461a      	mov	r2, r3
            peek.id, peek.seq, peek.v1, peek.v2, peek.v3, peek.v4, peek.v5, peek.v6, peek.v7);
 8001114:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001118:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 800111c:	edd3 7a01 	vldr	s15, [r3, #4]
        int n = snprintf(txl, sizeof(txl),
 8001120:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
            peek.id, peek.seq, peek.v1, peek.v2, peek.v3, peek.v4, peek.v5, peek.v6, peek.v7);
 8001124:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001128:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 800112c:	edd3 6a02 	vldr	s13, [r3, #8]
        int n = snprintf(txl, sizeof(txl),
 8001130:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
            peek.id, peek.seq, peek.v1, peek.v2, peek.v3, peek.v4, peek.v5, peek.v6, peek.v7);
 8001134:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001138:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 800113c:	edd3 5a03 	vldr	s11, [r3, #12]
        int n = snprintf(txl, sizeof(txl),
 8001140:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
            peek.id, peek.seq, peek.v1, peek.v2, peek.v3, peek.v4, peek.v5, peek.v6, peek.v7);
 8001144:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001148:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 800114c:	edd3 4a04 	vldr	s9, [r3, #16]
        int n = snprintf(txl, sizeof(txl),
 8001150:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
            peek.id, peek.seq, peek.v1, peek.v2, peek.v3, peek.v4, peek.v5, peek.v6, peek.v7);
 8001154:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001158:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 800115c:	edd3 3a05 	vldr	s7, [r3, #20]
        int n = snprintf(txl, sizeof(txl),
 8001160:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
            peek.id, peek.seq, peek.v1, peek.v2, peek.v3, peek.v4, peek.v5, peek.v6, peek.v7);
 8001164:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001168:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 800116c:	edd3 2a06 	vldr	s5, [r3, #24]
        int n = snprintf(txl, sizeof(txl),
 8001170:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
            peek.id, peek.seq, peek.v1, peek.v2, peek.v3, peek.v4, peek.v5, peek.v6, peek.v7);
 8001174:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001178:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 800117c:	edd3 1a07 	vldr	s3, [r3, #28]
        int n = snprintf(txl, sizeof(txl),
 8001180:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
 8001184:	f507 7000 	add.w	r0, r7, #512	@ 0x200
 8001188:	ed8d 1b0e 	vstr	d1, [sp, #56]	@ 0x38
 800118c:	ed8d 2b0c 	vstr	d2, [sp, #48]	@ 0x30
 8001190:	ed8d 3b0a 	vstr	d3, [sp, #40]	@ 0x28
 8001194:	ed8d 4b08 	vstr	d4, [sp, #32]
 8001198:	ed8d 5b06 	vstr	d5, [sp, #24]
 800119c:	ed8d 6b04 	vstr	d6, [sp, #16]
 80011a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80011a4:	9200      	str	r2, [sp, #0]
 80011a6:	460b      	mov	r3, r1
 80011a8:	4a2d      	ldr	r2, [pc, #180]	@ (8001260 <main+0x788>)
 80011aa:	21dc      	movs	r1, #220	@ 0xdc
 80011ac:	f013 fcba 	bl	8014b24 <sniprintf>
 80011b0:	f8c7 0424 	str.w	r0, [r7, #1060]	@ 0x424
        if (n > 0) HAL_UART_Transmit(&huart2, (uint8_t*)txl, (uint16_t)n, HAL_MAX_DELAY);
 80011b4:	f8d7 3424 	ldr.w	r3, [r7, #1060]	@ 0x424
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	dd09      	ble.n	80011d0 <main+0x6f8>
 80011bc:	f8d7 3424 	ldr.w	r3, [r7, #1060]	@ 0x424
 80011c0:	b29a      	uxth	r2, r3
 80011c2:	f507 7100 	add.w	r1, r7, #512	@ 0x200
 80011c6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ca:	481e      	ldr	r0, [pc, #120]	@ (8001244 <main+0x76c>)
 80011cc:	f010 fa6e 	bl	80116ac <HAL_UART_Transmit>

        // (F) Self-heal if radio settings look off (brownout recovery)
        uint8_t cfg_now = nrf24_ReadReg(CONFIG);
 80011d0:	2000      	movs	r0, #0
 80011d2:	f001 fe95 	bl	8002f00 <nrf24_ReadReg>
 80011d6:	4603      	mov	r3, r0
 80011d8:	f887 3423 	strb.w	r3, [r7, #1059]	@ 0x423
        uint8_t ch_now  = nrf24_ReadReg(RF_CH);
 80011dc:	2005      	movs	r0, #5
 80011de:	f001 fe8f 	bl	8002f00 <nrf24_ReadReg>
 80011e2:	4603      	mov	r3, r0
 80011e4:	f887 3422 	strb.w	r3, [r7, #1058]	@ 0x422
        if ( ((cfg_now & 0x0A) != 0x0A) || (ch_now != TEL_CHAN) ) {
 80011e8:	f897 3423 	ldrb.w	r3, [r7, #1059]	@ 0x423
 80011ec:	f003 030a 	and.w	r3, r3, #10
 80011f0:	2b0a      	cmp	r3, #10
 80011f2:	d104      	bne.n	80011fe <main+0x726>
 80011f4:	f897 3422 	ldrb.w	r3, [r7, #1058]	@ 0x422
 80011f8:	2b4c      	cmp	r3, #76	@ 0x4c
 80011fa:	f43f ae6b 	beq.w	8000ed4 <main+0x3fc>
            const char *rx = "[NRF] Reinit (PWR_UP/EN_CRC/CH)\r\n";
 80011fe:	4b19      	ldr	r3, [pc, #100]	@ (8001264 <main+0x78c>)
 8001200:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
            HAL_UART_Transmit(&huart2, (uint8_t*)rx, strlen(rx), HAL_MAX_DELAY);
 8001204:	f8d7 041c 	ldr.w	r0, [r7, #1052]	@ 0x41c
 8001208:	f7ff f8d2 	bl	80003b0 <strlen>
 800120c:	4603      	mov	r3, r0
 800120e:	b29a      	uxth	r2, r3
 8001210:	f04f 33ff 	mov.w	r3, #4294967295
 8001214:	f8d7 141c 	ldr.w	r1, [r7, #1052]	@ 0x41c
 8001218:	480a      	ldr	r0, [pc, #40]	@ (8001244 <main+0x76c>)
 800121a:	f010 fa47 	bl	80116ac <HAL_UART_Transmit>
            NRF24_Init();
 800121e:	f001 ff51 	bl	80030c4 <NRF24_Init>
            NRF24_TxMode(rf_addr, TEL_CHAN);
 8001222:	214c      	movs	r1, #76	@ 0x4c
 8001224:	4810      	ldr	r0, [pc, #64]	@ (8001268 <main+0x790>)
 8001226:	f001 ff99 	bl	800315c <NRF24_TxMode>
	{
 800122a:	e653      	b.n	8000ed4 <main+0x3fc>
 800122c:	080184cc 	.word	0x080184cc
 8001230:	240008d8 	.word	0x240008d8
 8001234:	240008dc 	.word	0x240008dc
 8001238:	24000912 	.word	0x24000912
 800123c:	2400000c 	.word	0x2400000c
 8001240:	080184d0 	.word	0x080184d0
 8001244:	24000774 	.word	0x24000774
 8001248:	2400080c 	.word	0x2400080c
 800124c:	24000994 	.word	0x24000994
 8001250:	24000364 	.word	0x24000364
 8001254:	24000404 	.word	0x24000404
 8001258:	240004a4 	.word	0x240004a4
 800125c:	0801851c 	.word	0x0801851c
 8001260:	08018568 	.word	0x08018568
 8001264:	080185bc 	.word	0x080185bc
 8001268:	24000004 	.word	0x24000004

0800126c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b09c      	sub	sp, #112	@ 0x70
 8001270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001272:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001276:	224c      	movs	r2, #76	@ 0x4c
 8001278:	2100      	movs	r1, #0
 800127a:	4618      	mov	r0, r3
 800127c:	f013 fced 	bl	8014c5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	2220      	movs	r2, #32
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f013 fce7 	bl	8014c5a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800128c:	2002      	movs	r0, #2
 800128e:	f008 fe47 	bl	8009f20 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001292:	2300      	movs	r3, #0
 8001294:	603b      	str	r3, [r7, #0]
 8001296:	4b2b      	ldr	r3, [pc, #172]	@ (8001344 <SystemClock_Config+0xd8>)
 8001298:	699b      	ldr	r3, [r3, #24]
 800129a:	4a2a      	ldr	r2, [pc, #168]	@ (8001344 <SystemClock_Config+0xd8>)
 800129c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80012a0:	6193      	str	r3, [r2, #24]
 80012a2:	4b28      	ldr	r3, [pc, #160]	@ (8001344 <SystemClock_Config+0xd8>)
 80012a4:	699b      	ldr	r3, [r3, #24]
 80012a6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012aa:	603b      	str	r3, [r7, #0]
 80012ac:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80012ae:	bf00      	nop
 80012b0:	4b24      	ldr	r3, [pc, #144]	@ (8001344 <SystemClock_Config+0xd8>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80012bc:	d1f8      	bne.n	80012b0 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012be:	2301      	movs	r3, #1
 80012c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012c8:	2302      	movs	r3, #2
 80012ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012cc:	2302      	movs	r3, #2
 80012ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80012d0:	2302      	movs	r3, #2
 80012d2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 80012d4:	232c      	movs	r3, #44	@ 0x2c
 80012d6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80012d8:	2301      	movs	r3, #1
 80012da:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012dc:	2304      	movs	r3, #4
 80012de:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012e0:	2302      	movs	r3, #2
 80012e2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80012e4:	230c      	movs	r3, #12
 80012e6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80012e8:	2300      	movs	r3, #0
 80012ea:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012f4:	4618      	mov	r0, r3
 80012f6:	f008 fe4d 	bl	8009f94 <HAL_RCC_OscConfig>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001300:	f001 fd6e 	bl	8002de0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001304:	233f      	movs	r3, #63	@ 0x3f
 8001306:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001308:	2303      	movs	r3, #3
 800130a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800130c:	2300      	movs	r3, #0
 800130e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001310:	2308      	movs	r3, #8
 8001312:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001314:	2340      	movs	r3, #64	@ 0x40
 8001316:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001318:	2340      	movs	r3, #64	@ 0x40
 800131a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800131c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001320:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001322:	2340      	movs	r3, #64	@ 0x40
 8001324:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001326:	1d3b      	adds	r3, r7, #4
 8001328:	2103      	movs	r1, #3
 800132a:	4618      	mov	r0, r3
 800132c:	f009 fa0c 	bl	800a748 <HAL_RCC_ClockConfig>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001336:	f001 fd53 	bl	8002de0 <Error_Handler>
  }
}
 800133a:	bf00      	nop
 800133c:	3770      	adds	r7, #112	@ 0x70
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	58024800 	.word	0x58024800

08001348 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b0ae      	sub	sp, #184	@ 0xb8
 800134c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800134e:	463b      	mov	r3, r7
 8001350:	22b8      	movs	r2, #184	@ 0xb8
 8001352:	2100      	movs	r1, #0
 8001354:	4618      	mov	r0, r3
 8001356:	f013 fc80 	bl	8014c5a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SDMMC;
 800135a:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 800135e:	f04f 0300 	mov.w	r3, #0
 8001362:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001366:	2302      	movs	r3, #2
 8001368:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 800136a:	2310      	movs	r3, #16
 800136c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800136e:	2302      	movs	r3, #2
 8001370:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001372:	2302      	movs	r3, #2
 8001374:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 1;
 8001376:	2301      	movs	r3, #1
 8001378:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800137a:	23c0      	movs	r3, #192	@ 0xc0
 800137c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800137e:	2300      	movs	r3, #0
 8001380:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8001386:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800138a:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800138c:	2300      	movs	r3, #0
 800138e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001392:	463b      	mov	r3, r7
 8001394:	4618      	mov	r0, r3
 8001396:	f009 fd63 	bl	800ae60 <HAL_RCCEx_PeriphCLKConfig>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 80013a0:	f001 fd1e 	bl	8002de0 <Error_Handler>
  }
}
 80013a4:	bf00      	nop
 80013a6:	37b8      	adds	r7, #184	@ 0xb8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08c      	sub	sp, #48	@ 0x30
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80013b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80013be:	463b      	mov	r3, r7
 80013c0:	2224      	movs	r2, #36	@ 0x24
 80013c2:	2100      	movs	r1, #0
 80013c4:	4618      	mov	r0, r3
 80013c6:	f013 fc48 	bl	8014c5a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80013ca:	4b41      	ldr	r3, [pc, #260]	@ (80014d0 <MX_ADC1_Init+0x124>)
 80013cc:	4a41      	ldr	r2, [pc, #260]	@ (80014d4 <MX_ADC1_Init+0x128>)
 80013ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80013d0:	4b3f      	ldr	r3, [pc, #252]	@ (80014d0 <MX_ADC1_Init+0x124>)
 80013d2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80013d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013d8:	4b3d      	ldr	r3, [pc, #244]	@ (80014d0 <MX_ADC1_Init+0x124>)
 80013da:	2208      	movs	r2, #8
 80013dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013de:	4b3c      	ldr	r3, [pc, #240]	@ (80014d0 <MX_ADC1_Init+0x124>)
 80013e0:	2201      	movs	r2, #1
 80013e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80013e4:	4b3a      	ldr	r3, [pc, #232]	@ (80014d0 <MX_ADC1_Init+0x124>)
 80013e6:	2208      	movs	r2, #8
 80013e8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80013ea:	4b39      	ldr	r3, [pc, #228]	@ (80014d0 <MX_ADC1_Init+0x124>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80013f0:	4b37      	ldr	r3, [pc, #220]	@ (80014d0 <MX_ADC1_Init+0x124>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 80013f6:	4b36      	ldr	r3, [pc, #216]	@ (80014d0 <MX_ADC1_Init+0x124>)
 80013f8:	2203      	movs	r2, #3
 80013fa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013fc:	4b34      	ldr	r3, [pc, #208]	@ (80014d0 <MX_ADC1_Init+0x124>)
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001404:	4b32      	ldr	r3, [pc, #200]	@ (80014d0 <MX_ADC1_Init+0x124>)
 8001406:	2200      	movs	r2, #0
 8001408:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800140a:	4b31      	ldr	r3, [pc, #196]	@ (80014d0 <MX_ADC1_Init+0x124>)
 800140c:	2200      	movs	r2, #0
 800140e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001410:	4b2f      	ldr	r3, [pc, #188]	@ (80014d0 <MX_ADC1_Init+0x124>)
 8001412:	2203      	movs	r2, #3
 8001414:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001416:	4b2e      	ldr	r3, [pc, #184]	@ (80014d0 <MX_ADC1_Init+0x124>)
 8001418:	2200      	movs	r2, #0
 800141a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800141c:	4b2c      	ldr	r3, [pc, #176]	@ (80014d0 <MX_ADC1_Init+0x124>)
 800141e:	2200      	movs	r2, #0
 8001420:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001422:	4b2b      	ldr	r3, [pc, #172]	@ (80014d0 <MX_ADC1_Init+0x124>)
 8001424:	2200      	movs	r2, #0
 8001426:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 800142a:	4b29      	ldr	r3, [pc, #164]	@ (80014d0 <MX_ADC1_Init+0x124>)
 800142c:	2201      	movs	r2, #1
 800142e:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001430:	4827      	ldr	r0, [pc, #156]	@ (80014d0 <MX_ADC1_Init+0x124>)
 8001432:	f003 f9f3 	bl	800481c <HAL_ADC_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800143c:	f001 fcd0 	bl	8002de0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001440:	2300      	movs	r3, #0
 8001442:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001444:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001448:	4619      	mov	r1, r3
 800144a:	4821      	ldr	r0, [pc, #132]	@ (80014d0 <MX_ADC1_Init+0x124>)
 800144c:	f004 feb6 	bl	80061bc <HAL_ADCEx_MultiModeConfigChannel>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001456:	f001 fcc3 	bl	8002de0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800145a:	4b1f      	ldr	r3, [pc, #124]	@ (80014d8 <MX_ADC1_Init+0x12c>)
 800145c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800145e:	2306      	movs	r3, #6
 8001460:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8001462:	2305      	movs	r3, #5
 8001464:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001466:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800146a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800146c:	2304      	movs	r3, #4
 800146e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001474:	2300      	movs	r3, #0
 8001476:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800147a:	463b      	mov	r3, r7
 800147c:	4619      	mov	r1, r3
 800147e:	4814      	ldr	r0, [pc, #80]	@ (80014d0 <MX_ADC1_Init+0x124>)
 8001480:	f003 ff08 	bl	8005294 <HAL_ADC_ConfigChannel>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800148a:	f001 fca9 	bl	8002de0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800148e:	4b13      	ldr	r3, [pc, #76]	@ (80014dc <MX_ADC1_Init+0x130>)
 8001490:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001492:	230c      	movs	r3, #12
 8001494:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001496:	463b      	mov	r3, r7
 8001498:	4619      	mov	r1, r3
 800149a:	480d      	ldr	r0, [pc, #52]	@ (80014d0 <MX_ADC1_Init+0x124>)
 800149c:	f003 fefa 	bl	8005294 <HAL_ADC_ConfigChannel>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80014a6:	f001 fc9b 	bl	8002de0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80014aa:	4b0d      	ldr	r3, [pc, #52]	@ (80014e0 <MX_ADC1_Init+0x134>)
 80014ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80014ae:	2312      	movs	r3, #18
 80014b0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014b2:	463b      	mov	r3, r7
 80014b4:	4619      	mov	r1, r3
 80014b6:	4806      	ldr	r0, [pc, #24]	@ (80014d0 <MX_ADC1_Init+0x124>)
 80014b8:	f003 feec 	bl	8005294 <HAL_ADC_ConfigChannel>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 80014c2:	f001 fc8d 	bl	8002de0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014c6:	bf00      	nop
 80014c8:	3730      	adds	r7, #48	@ 0x30
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	2400020c 	.word	0x2400020c
 80014d4:	40022000 	.word	0x40022000
 80014d8:	10c00010 	.word	0x10c00010
 80014dc:	14f00020 	.word	0x14f00020
 80014e0:	08600004 	.word	0x08600004

080014e4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08a      	sub	sp, #40	@ 0x28
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	2224      	movs	r2, #36	@ 0x24
 80014ee:	2100      	movs	r1, #0
 80014f0:	4618      	mov	r0, r3
 80014f2:	f013 fbb2 	bl	8014c5a <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80014f6:	4b2c      	ldr	r3, [pc, #176]	@ (80015a8 <MX_ADC2_Init+0xc4>)
 80014f8:	4a2c      	ldr	r2, [pc, #176]	@ (80015ac <MX_ADC2_Init+0xc8>)
 80014fa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80014fc:	4b2a      	ldr	r3, [pc, #168]	@ (80015a8 <MX_ADC2_Init+0xc4>)
 80014fe:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001502:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8001504:	4b28      	ldr	r3, [pc, #160]	@ (80015a8 <MX_ADC2_Init+0xc4>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800150a:	4b27      	ldr	r3, [pc, #156]	@ (80015a8 <MX_ADC2_Init+0xc4>)
 800150c:	2200      	movs	r2, #0
 800150e:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001510:	4b25      	ldr	r3, [pc, #148]	@ (80015a8 <MX_ADC2_Init+0xc4>)
 8001512:	2204      	movs	r2, #4
 8001514:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001516:	4b24      	ldr	r3, [pc, #144]	@ (80015a8 <MX_ADC2_Init+0xc4>)
 8001518:	2200      	movs	r2, #0
 800151a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800151c:	4b22      	ldr	r3, [pc, #136]	@ (80015a8 <MX_ADC2_Init+0xc4>)
 800151e:	2200      	movs	r2, #0
 8001520:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8001522:	4b21      	ldr	r3, [pc, #132]	@ (80015a8 <MX_ADC2_Init+0xc4>)
 8001524:	2201      	movs	r2, #1
 8001526:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001528:	4b1f      	ldr	r3, [pc, #124]	@ (80015a8 <MX_ADC2_Init+0xc4>)
 800152a:	2200      	movs	r2, #0
 800152c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001530:	4b1d      	ldr	r3, [pc, #116]	@ (80015a8 <MX_ADC2_Init+0xc4>)
 8001532:	2200      	movs	r2, #0
 8001534:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001536:	4b1c      	ldr	r3, [pc, #112]	@ (80015a8 <MX_ADC2_Init+0xc4>)
 8001538:	2200      	movs	r2, #0
 800153a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800153c:	4b1a      	ldr	r3, [pc, #104]	@ (80015a8 <MX_ADC2_Init+0xc4>)
 800153e:	2200      	movs	r2, #0
 8001540:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001542:	4b19      	ldr	r3, [pc, #100]	@ (80015a8 <MX_ADC2_Init+0xc4>)
 8001544:	2200      	movs	r2, #0
 8001546:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001548:	4b17      	ldr	r3, [pc, #92]	@ (80015a8 <MX_ADC2_Init+0xc4>)
 800154a:	2200      	movs	r2, #0
 800154c:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 800154e:	4b16      	ldr	r3, [pc, #88]	@ (80015a8 <MX_ADC2_Init+0xc4>)
 8001550:	2200      	movs	r2, #0
 8001552:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8001556:	4b14      	ldr	r3, [pc, #80]	@ (80015a8 <MX_ADC2_Init+0xc4>)
 8001558:	2201      	movs	r2, #1
 800155a:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800155c:	4812      	ldr	r0, [pc, #72]	@ (80015a8 <MX_ADC2_Init+0xc4>)
 800155e:	f003 f95d 	bl	800481c <HAL_ADC_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8001568:	f001 fc3a 	bl	8002de0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800156c:	4b10      	ldr	r3, [pc, #64]	@ (80015b0 <MX_ADC2_Init+0xcc>)
 800156e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001570:	2306      	movs	r3, #6
 8001572:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001578:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800157c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800157e:	2304      	movs	r3, #4
 8001580:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001582:	2300      	movs	r3, #0
 8001584:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001586:	2300      	movs	r3, #0
 8001588:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	4619      	mov	r1, r3
 8001590:	4805      	ldr	r0, [pc, #20]	@ (80015a8 <MX_ADC2_Init+0xc4>)
 8001592:	f003 fe7f 	bl	8005294 <HAL_ADC_ConfigChannel>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_ADC2_Init+0xbc>
  {
    Error_Handler();
 800159c:	f001 fc20 	bl	8002de0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80015a0:	bf00      	nop
 80015a2:	3728      	adds	r7, #40	@ 0x28
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	2400027c 	.word	0x2400027c
 80015ac:	40022100 	.word	0x40022100
 80015b0:	25b00200 	.word	0x25b00200

080015b4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b088      	sub	sp, #32
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80015ba:	4b3b      	ldr	r3, [pc, #236]	@ (80016a8 <MX_FDCAN1_Init+0xf4>)
 80015bc:	4a3b      	ldr	r2, [pc, #236]	@ (80016ac <MX_FDCAN1_Init+0xf8>)
 80015be:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80015c0:	4b39      	ldr	r3, [pc, #228]	@ (80016a8 <MX_FDCAN1_Init+0xf4>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80015c6:	4b38      	ldr	r3, [pc, #224]	@ (80016a8 <MX_FDCAN1_Init+0xf4>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80015cc:	4b36      	ldr	r3, [pc, #216]	@ (80016a8 <MX_FDCAN1_Init+0xf4>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80015d2:	4b35      	ldr	r3, [pc, #212]	@ (80016a8 <MX_FDCAN1_Init+0xf4>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80015d8:	4b33      	ldr	r3, [pc, #204]	@ (80016a8 <MX_FDCAN1_Init+0xf4>)
 80015da:	2200      	movs	r2, #0
 80015dc:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 6;
 80015de:	4b32      	ldr	r3, [pc, #200]	@ (80016a8 <MX_FDCAN1_Init+0xf4>)
 80015e0:	2206      	movs	r2, #6
 80015e2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80015e4:	4b30      	ldr	r3, [pc, #192]	@ (80016a8 <MX_FDCAN1_Init+0xf4>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 80015ea:	4b2f      	ldr	r3, [pc, #188]	@ (80016a8 <MX_FDCAN1_Init+0xf4>)
 80015ec:	2202      	movs	r2, #2
 80015ee:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 80015f0:	4b2d      	ldr	r3, [pc, #180]	@ (80016a8 <MX_FDCAN1_Init+0xf4>)
 80015f2:	2205      	movs	r2, #5
 80015f4:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80015f6:	4b2c      	ldr	r3, [pc, #176]	@ (80016a8 <MX_FDCAN1_Init+0xf4>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80015fc:	4b2a      	ldr	r3, [pc, #168]	@ (80016a8 <MX_FDCAN1_Init+0xf4>)
 80015fe:	2201      	movs	r2, #1
 8001600:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001602:	4b29      	ldr	r3, [pc, #164]	@ (80016a8 <MX_FDCAN1_Init+0xf4>)
 8001604:	2201      	movs	r2, #1
 8001606:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001608:	4b27      	ldr	r3, [pc, #156]	@ (80016a8 <MX_FDCAN1_Init+0xf4>)
 800160a:	2201      	movs	r2, #1
 800160c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800160e:	4b26      	ldr	r3, [pc, #152]	@ (80016a8 <MX_FDCAN1_Init+0xf4>)
 8001610:	2200      	movs	r2, #0
 8001612:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8001614:	4b24      	ldr	r3, [pc, #144]	@ (80016a8 <MX_FDCAN1_Init+0xf4>)
 8001616:	2201      	movs	r2, #1
 8001618:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 1;
 800161a:	4b23      	ldr	r3, [pc, #140]	@ (80016a8 <MX_FDCAN1_Init+0xf4>)
 800161c:	2201      	movs	r2, #1
 800161e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 8001620:	4b21      	ldr	r3, [pc, #132]	@ (80016a8 <MX_FDCAN1_Init+0xf4>)
 8001622:	2220      	movs	r2, #32
 8001624:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001626:	4b20      	ldr	r3, [pc, #128]	@ (80016a8 <MX_FDCAN1_Init+0xf4>)
 8001628:	2204      	movs	r2, #4
 800162a:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 800162c:	4b1e      	ldr	r3, [pc, #120]	@ (80016a8 <MX_FDCAN1_Init+0xf4>)
 800162e:	2220      	movs	r2, #32
 8001630:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001632:	4b1d      	ldr	r3, [pc, #116]	@ (80016a8 <MX_FDCAN1_Init+0xf4>)
 8001634:	2204      	movs	r2, #4
 8001636:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8001638:	4b1b      	ldr	r3, [pc, #108]	@ (80016a8 <MX_FDCAN1_Init+0xf4>)
 800163a:	2200      	movs	r2, #0
 800163c:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800163e:	4b1a      	ldr	r3, [pc, #104]	@ (80016a8 <MX_FDCAN1_Init+0xf4>)
 8001640:	2204      	movs	r2, #4
 8001642:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8001644:	4b18      	ldr	r3, [pc, #96]	@ (80016a8 <MX_FDCAN1_Init+0xf4>)
 8001646:	2200      	movs	r2, #0
 8001648:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 800164a:	4b17      	ldr	r3, [pc, #92]	@ (80016a8 <MX_FDCAN1_Init+0xf4>)
 800164c:	2200      	movs	r2, #0
 800164e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 8001650:	4b15      	ldr	r3, [pc, #84]	@ (80016a8 <MX_FDCAN1_Init+0xf4>)
 8001652:	2220      	movs	r2, #32
 8001654:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001656:	4b14      	ldr	r3, [pc, #80]	@ (80016a8 <MX_FDCAN1_Init+0xf4>)
 8001658:	2200      	movs	r2, #0
 800165a:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800165c:	4b12      	ldr	r3, [pc, #72]	@ (80016a8 <MX_FDCAN1_Init+0xf4>)
 800165e:	2204      	movs	r2, #4
 8001660:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001662:	4811      	ldr	r0, [pc, #68]	@ (80016a8 <MX_FDCAN1_Init+0xf4>)
 8001664:	f007 f870 	bl	8008748 <HAL_FDCAN_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 800166e:	f001 fbb7 	bl	8002de0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8001672:	2300      	movs	r3, #0
 8001674:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8001676:	2300      	movs	r3, #0
 8001678:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800167a:	2302      	movs	r3, #2
 800167c:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800167e:	2301      	movs	r3, #1
 8001680:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 800168a:	463b      	mov	r3, r7
 800168c:	4619      	mov	r1, r3
 800168e:	4806      	ldr	r0, [pc, #24]	@ (80016a8 <MX_FDCAN1_Init+0xf4>)
 8001690:	f007 fa38 	bl	8008b04 <HAL_FDCAN_ConfigFilter>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_FDCAN1_Init+0xea>
	{
		Error_Handler();
 800169a:	f001 fba1 	bl	8002de0 <Error_Handler>
	}
  /* USER CODE END FDCAN1_Init 2 */

}
 800169e:	bf00      	nop
 80016a0:	3720      	adds	r7, #32
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	24000364 	.word	0x24000364
 80016ac:	4000a000 	.word	0x4000a000

080016b0 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b088      	sub	sp, #32
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80016b6:	4b3b      	ldr	r3, [pc, #236]	@ (80017a4 <MX_FDCAN2_Init+0xf4>)
 80016b8:	4a3b      	ldr	r2, [pc, #236]	@ (80017a8 <MX_FDCAN2_Init+0xf8>)
 80016ba:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80016bc:	4b39      	ldr	r3, [pc, #228]	@ (80017a4 <MX_FDCAN2_Init+0xf4>)
 80016be:	2200      	movs	r2, #0
 80016c0:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80016c2:	4b38      	ldr	r3, [pc, #224]	@ (80017a4 <MX_FDCAN2_Init+0xf4>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80016c8:	4b36      	ldr	r3, [pc, #216]	@ (80017a4 <MX_FDCAN2_Init+0xf4>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80016ce:	4b35      	ldr	r3, [pc, #212]	@ (80017a4 <MX_FDCAN2_Init+0xf4>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80016d4:	4b33      	ldr	r3, [pc, #204]	@ (80017a4 <MX_FDCAN2_Init+0xf4>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 6;
 80016da:	4b32      	ldr	r3, [pc, #200]	@ (80017a4 <MX_FDCAN2_Init+0xf4>)
 80016dc:	2206      	movs	r2, #6
 80016de:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80016e0:	4b30      	ldr	r3, [pc, #192]	@ (80017a4 <MX_FDCAN2_Init+0xf4>)
 80016e2:	2201      	movs	r2, #1
 80016e4:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 80016e6:	4b2f      	ldr	r3, [pc, #188]	@ (80017a4 <MX_FDCAN2_Init+0xf4>)
 80016e8:	2202      	movs	r2, #2
 80016ea:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 5;
 80016ec:	4b2d      	ldr	r3, [pc, #180]	@ (80017a4 <MX_FDCAN2_Init+0xf4>)
 80016ee:	2205      	movs	r2, #5
 80016f0:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80016f2:	4b2c      	ldr	r3, [pc, #176]	@ (80017a4 <MX_FDCAN2_Init+0xf4>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80016f8:	4b2a      	ldr	r3, [pc, #168]	@ (80017a4 <MX_FDCAN2_Init+0xf4>)
 80016fa:	2201      	movs	r2, #1
 80016fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80016fe:	4b29      	ldr	r3, [pc, #164]	@ (80017a4 <MX_FDCAN2_Init+0xf4>)
 8001700:	2201      	movs	r2, #1
 8001702:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8001704:	4b27      	ldr	r3, [pc, #156]	@ (80017a4 <MX_FDCAN2_Init+0xf4>)
 8001706:	2201      	movs	r2, #1
 8001708:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 800170a:	4b26      	ldr	r3, [pc, #152]	@ (80017a4 <MX_FDCAN2_Init+0xf4>)
 800170c:	2200      	movs	r2, #0
 800170e:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 1;
 8001710:	4b24      	ldr	r3, [pc, #144]	@ (80017a4 <MX_FDCAN2_Init+0xf4>)
 8001712:	2201      	movs	r2, #1
 8001714:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 1;
 8001716:	4b23      	ldr	r3, [pc, #140]	@ (80017a4 <MX_FDCAN2_Init+0xf4>)
 8001718:	2201      	movs	r2, #1
 800171a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 16;
 800171c:	4b21      	ldr	r3, [pc, #132]	@ (80017a4 <MX_FDCAN2_Init+0xf4>)
 800171e:	2210      	movs	r2, #16
 8001720:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001722:	4b20      	ldr	r3, [pc, #128]	@ (80017a4 <MX_FDCAN2_Init+0xf4>)
 8001724:	2204      	movs	r2, #4
 8001726:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 16;
 8001728:	4b1e      	ldr	r3, [pc, #120]	@ (80017a4 <MX_FDCAN2_Init+0xf4>)
 800172a:	2210      	movs	r2, #16
 800172c:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800172e:	4b1d      	ldr	r3, [pc, #116]	@ (80017a4 <MX_FDCAN2_Init+0xf4>)
 8001730:	2204      	movs	r2, #4
 8001732:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8001734:	4b1b      	ldr	r3, [pc, #108]	@ (80017a4 <MX_FDCAN2_Init+0xf4>)
 8001736:	2200      	movs	r2, #0
 8001738:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800173a:	4b1a      	ldr	r3, [pc, #104]	@ (80017a4 <MX_FDCAN2_Init+0xf4>)
 800173c:	2204      	movs	r2, #4
 800173e:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8001740:	4b18      	ldr	r3, [pc, #96]	@ (80017a4 <MX_FDCAN2_Init+0xf4>)
 8001742:	2200      	movs	r2, #0
 8001744:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8001746:	4b17      	ldr	r3, [pc, #92]	@ (80017a4 <MX_FDCAN2_Init+0xf4>)
 8001748:	2200      	movs	r2, #0
 800174a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 16;
 800174c:	4b15      	ldr	r3, [pc, #84]	@ (80017a4 <MX_FDCAN2_Init+0xf4>)
 800174e:	2210      	movs	r2, #16
 8001750:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001752:	4b14      	ldr	r3, [pc, #80]	@ (80017a4 <MX_FDCAN2_Init+0xf4>)
 8001754:	2200      	movs	r2, #0
 8001756:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001758:	4b12      	ldr	r3, [pc, #72]	@ (80017a4 <MX_FDCAN2_Init+0xf4>)
 800175a:	2204      	movs	r2, #4
 800175c:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 800175e:	4811      	ldr	r0, [pc, #68]	@ (80017a4 <MX_FDCAN2_Init+0xf4>)
 8001760:	f006 fff2 	bl	8008748 <HAL_FDCAN_Init>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_FDCAN2_Init+0xbe>
  {
    Error_Handler();
 800176a:	f001 fb39 	bl	8002de0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 800176e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001772:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8001774:	2300      	movs	r3, #0
 8001776:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001778:	2302      	movs	r3, #2
 800177a:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800177c:	2301      	movs	r3, #1
 800177e:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 8001780:	2300      	movs	r3, #0
 8001782:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 8001788:	463b      	mov	r3, r7
 800178a:	4619      	mov	r1, r3
 800178c:	4805      	ldr	r0, [pc, #20]	@ (80017a4 <MX_FDCAN2_Init+0xf4>)
 800178e:	f007 f9b9 	bl	8008b04 <HAL_FDCAN_ConfigFilter>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_FDCAN2_Init+0xec>
	{
		Error_Handler();
 8001798:	f001 fb22 	bl	8002de0 <Error_Handler>
	}
  /* USER CODE END FDCAN2_Init 2 */

}
 800179c:	bf00      	nop
 800179e:	3720      	adds	r7, #32
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	24000404 	.word	0x24000404
 80017a8:	4000a400 	.word	0x4000a400

080017ac <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b088      	sub	sp, #32
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 80017b2:	4b3b      	ldr	r3, [pc, #236]	@ (80018a0 <MX_FDCAN3_Init+0xf4>)
 80017b4:	4a3b      	ldr	r2, [pc, #236]	@ (80018a4 <MX_FDCAN3_Init+0xf8>)
 80017b6:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80017b8:	4b39      	ldr	r3, [pc, #228]	@ (80018a0 <MX_FDCAN3_Init+0xf4>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 80017be:	4b38      	ldr	r3, [pc, #224]	@ (80018a0 <MX_FDCAN3_Init+0xf4>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 80017c4:	4b36      	ldr	r3, [pc, #216]	@ (80018a0 <MX_FDCAN3_Init+0xf4>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 80017ca:	4b35      	ldr	r3, [pc, #212]	@ (80018a0 <MX_FDCAN3_Init+0xf4>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 80017d0:	4b33      	ldr	r3, [pc, #204]	@ (80018a0 <MX_FDCAN3_Init+0xf4>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 6;
 80017d6:	4b32      	ldr	r3, [pc, #200]	@ (80018a0 <MX_FDCAN3_Init+0xf4>)
 80017d8:	2206      	movs	r2, #6
 80017da:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 80017dc:	4b30      	ldr	r3, [pc, #192]	@ (80018a0 <MX_FDCAN3_Init+0xf4>)
 80017de:	2201      	movs	r2, #1
 80017e0:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 80017e2:	4b2f      	ldr	r3, [pc, #188]	@ (80018a0 <MX_FDCAN3_Init+0xf4>)
 80017e4:	2202      	movs	r2, #2
 80017e6:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 5;
 80017e8:	4b2d      	ldr	r3, [pc, #180]	@ (80018a0 <MX_FDCAN3_Init+0xf4>)
 80017ea:	2205      	movs	r2, #5
 80017ec:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 80017ee:	4b2c      	ldr	r3, [pc, #176]	@ (80018a0 <MX_FDCAN3_Init+0xf4>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 80017f4:	4b2a      	ldr	r3, [pc, #168]	@ (80018a0 <MX_FDCAN3_Init+0xf4>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 80017fa:	4b29      	ldr	r3, [pc, #164]	@ (80018a0 <MX_FDCAN3_Init+0xf4>)
 80017fc:	2201      	movs	r2, #1
 80017fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8001800:	4b27      	ldr	r3, [pc, #156]	@ (80018a0 <MX_FDCAN3_Init+0xf4>)
 8001802:	2201      	movs	r2, #1
 8001804:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8001806:	4b26      	ldr	r3, [pc, #152]	@ (80018a0 <MX_FDCAN3_Init+0xf4>)
 8001808:	2200      	movs	r2, #0
 800180a:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan3.Init.StdFiltersNbr = 1;
 800180c:	4b24      	ldr	r3, [pc, #144]	@ (80018a0 <MX_FDCAN3_Init+0xf4>)
 800180e:	2201      	movs	r2, #1
 8001810:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan3.Init.ExtFiltersNbr = 1;
 8001812:	4b23      	ldr	r3, [pc, #140]	@ (80018a0 <MX_FDCAN3_Init+0xf4>)
 8001814:	2201      	movs	r2, #1
 8001816:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 16;
 8001818:	4b21      	ldr	r3, [pc, #132]	@ (80018a0 <MX_FDCAN3_Init+0xf4>)
 800181a:	2210      	movs	r2, #16
 800181c:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800181e:	4b20      	ldr	r3, [pc, #128]	@ (80018a0 <MX_FDCAN3_Init+0xf4>)
 8001820:	2204      	movs	r2, #4
 8001822:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 16;
 8001824:	4b1e      	ldr	r3, [pc, #120]	@ (80018a0 <MX_FDCAN3_Init+0xf4>)
 8001826:	2210      	movs	r2, #16
 8001828:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800182a:	4b1d      	ldr	r3, [pc, #116]	@ (80018a0 <MX_FDCAN3_Init+0xf4>)
 800182c:	2204      	movs	r2, #4
 800182e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8001830:	4b1b      	ldr	r3, [pc, #108]	@ (80018a0 <MX_FDCAN3_Init+0xf4>)
 8001832:	2200      	movs	r2, #0
 8001834:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001836:	4b1a      	ldr	r3, [pc, #104]	@ (80018a0 <MX_FDCAN3_Init+0xf4>)
 8001838:	2204      	movs	r2, #4
 800183a:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 800183c:	4b18      	ldr	r3, [pc, #96]	@ (80018a0 <MX_FDCAN3_Init+0xf4>)
 800183e:	2200      	movs	r2, #0
 8001840:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8001842:	4b17      	ldr	r3, [pc, #92]	@ (80018a0 <MX_FDCAN3_Init+0xf4>)
 8001844:	2200      	movs	r2, #0
 8001846:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 16;
 8001848:	4b15      	ldr	r3, [pc, #84]	@ (80018a0 <MX_FDCAN3_Init+0xf4>)
 800184a:	2210      	movs	r2, #16
 800184c:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800184e:	4b14      	ldr	r3, [pc, #80]	@ (80018a0 <MX_FDCAN3_Init+0xf4>)
 8001850:	2200      	movs	r2, #0
 8001852:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001854:	4b12      	ldr	r3, [pc, #72]	@ (80018a0 <MX_FDCAN3_Init+0xf4>)
 8001856:	2204      	movs	r2, #4
 8001858:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 800185a:	4811      	ldr	r0, [pc, #68]	@ (80018a0 <MX_FDCAN3_Init+0xf4>)
 800185c:	f006 ff74 	bl	8008748 <HAL_FDCAN_Init>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_FDCAN3_Init+0xbe>
  {
    Error_Handler();
 8001866:	f001 fabb 	bl	8002de0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 800186a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800186e:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8001870:	2300      	movs	r3, #0
 8001872:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001874:	2302      	movs	r3, #2
 8001876:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001878:	2301      	movs	r3, #1
 800187a:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 800187c:	2300      	movs	r3, #0
 800187e:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan3, &sFilterConfig) != HAL_OK)
 8001884:	463b      	mov	r3, r7
 8001886:	4619      	mov	r1, r3
 8001888:	4805      	ldr	r0, [pc, #20]	@ (80018a0 <MX_FDCAN3_Init+0xf4>)
 800188a:	f007 f93b 	bl	8008b04 <HAL_FDCAN_ConfigFilter>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_FDCAN3_Init+0xec>
	{
		Error_Handler();
 8001894:	f001 faa4 	bl	8002de0 <Error_Handler>
	}

  /* USER CODE END FDCAN3_Init 2 */

}
 8001898:	bf00      	nop
 800189a:	3720      	adds	r7, #32
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	240004a4 	.word	0x240004a4
 80018a4:	4000d400 	.word	0x4000d400

080018a8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80018ac:	4b0b      	ldr	r3, [pc, #44]	@ (80018dc <MX_SDMMC1_SD_Init+0x34>)
 80018ae:	4a0c      	ldr	r2, [pc, #48]	@ (80018e0 <MX_SDMMC1_SD_Init+0x38>)
 80018b0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80018b2:	4b0a      	ldr	r3, [pc, #40]	@ (80018dc <MX_SDMMC1_SD_Init+0x34>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80018b8:	4b08      	ldr	r3, [pc, #32]	@ (80018dc <MX_SDMMC1_SD_Init+0x34>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80018be:	4b07      	ldr	r3, [pc, #28]	@ (80018dc <MX_SDMMC1_SD_Init+0x34>)
 80018c0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80018c4:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80018c6:	4b05      	ldr	r3, [pc, #20]	@ (80018dc <MX_SDMMC1_SD_Init+0x34>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 2;
 80018cc:	4b03      	ldr	r3, [pc, #12]	@ (80018dc <MX_SDMMC1_SD_Init+0x34>)
 80018ce:	2202      	movs	r2, #2
 80018d0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80018d2:	bf00      	nop
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	24000544 	.word	0x24000544
 80018e0:	52007000 	.word	0x52007000

080018e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80018e8:	4b27      	ldr	r3, [pc, #156]	@ (8001988 <MX_SPI1_Init+0xa4>)
 80018ea:	4a28      	ldr	r2, [pc, #160]	@ (800198c <MX_SPI1_Init+0xa8>)
 80018ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018ee:	4b26      	ldr	r3, [pc, #152]	@ (8001988 <MX_SPI1_Init+0xa4>)
 80018f0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80018f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018f6:	4b24      	ldr	r3, [pc, #144]	@ (8001988 <MX_SPI1_Init+0xa4>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018fc:	4b22      	ldr	r3, [pc, #136]	@ (8001988 <MX_SPI1_Init+0xa4>)
 80018fe:	2207      	movs	r2, #7
 8001900:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001902:	4b21      	ldr	r3, [pc, #132]	@ (8001988 <MX_SPI1_Init+0xa4>)
 8001904:	2200      	movs	r2, #0
 8001906:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001908:	4b1f      	ldr	r3, [pc, #124]	@ (8001988 <MX_SPI1_Init+0xa4>)
 800190a:	2200      	movs	r2, #0
 800190c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800190e:	4b1e      	ldr	r3, [pc, #120]	@ (8001988 <MX_SPI1_Init+0xa4>)
 8001910:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001914:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001916:	4b1c      	ldr	r3, [pc, #112]	@ (8001988 <MX_SPI1_Init+0xa4>)
 8001918:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800191c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800191e:	4b1a      	ldr	r3, [pc, #104]	@ (8001988 <MX_SPI1_Init+0xa4>)
 8001920:	2200      	movs	r2, #0
 8001922:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001924:	4b18      	ldr	r3, [pc, #96]	@ (8001988 <MX_SPI1_Init+0xa4>)
 8001926:	2200      	movs	r2, #0
 8001928:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800192a:	4b17      	ldr	r3, [pc, #92]	@ (8001988 <MX_SPI1_Init+0xa4>)
 800192c:	2200      	movs	r2, #0
 800192e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001930:	4b15      	ldr	r3, [pc, #84]	@ (8001988 <MX_SPI1_Init+0xa4>)
 8001932:	2200      	movs	r2, #0
 8001934:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001936:	4b14      	ldr	r3, [pc, #80]	@ (8001988 <MX_SPI1_Init+0xa4>)
 8001938:	2200      	movs	r2, #0
 800193a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800193c:	4b12      	ldr	r3, [pc, #72]	@ (8001988 <MX_SPI1_Init+0xa4>)
 800193e:	2200      	movs	r2, #0
 8001940:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001942:	4b11      	ldr	r3, [pc, #68]	@ (8001988 <MX_SPI1_Init+0xa4>)
 8001944:	2200      	movs	r2, #0
 8001946:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001948:	4b0f      	ldr	r3, [pc, #60]	@ (8001988 <MX_SPI1_Init+0xa4>)
 800194a:	2200      	movs	r2, #0
 800194c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800194e:	4b0e      	ldr	r3, [pc, #56]	@ (8001988 <MX_SPI1_Init+0xa4>)
 8001950:	2200      	movs	r2, #0
 8001952:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001954:	4b0c      	ldr	r3, [pc, #48]	@ (8001988 <MX_SPI1_Init+0xa4>)
 8001956:	2200      	movs	r2, #0
 8001958:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800195a:	4b0b      	ldr	r3, [pc, #44]	@ (8001988 <MX_SPI1_Init+0xa4>)
 800195c:	2200      	movs	r2, #0
 800195e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001960:	4b09      	ldr	r3, [pc, #36]	@ (8001988 <MX_SPI1_Init+0xa4>)
 8001962:	2200      	movs	r2, #0
 8001964:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001966:	4b08      	ldr	r3, [pc, #32]	@ (8001988 <MX_SPI1_Init+0xa4>)
 8001968:	2200      	movs	r2, #0
 800196a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800196c:	4b06      	ldr	r3, [pc, #24]	@ (8001988 <MX_SPI1_Init+0xa4>)
 800196e:	2200      	movs	r2, #0
 8001970:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001972:	4805      	ldr	r0, [pc, #20]	@ (8001988 <MX_SPI1_Init+0xa4>)
 8001974:	f00d fabe 	bl	800eef4 <HAL_SPI_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 800197e:	f001 fa2f 	bl	8002de0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	240005c0 	.word	0x240005c0
 800198c:	40013000 	.word	0x40013000

08001990 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b09c      	sub	sp, #112	@ 0x70
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001996:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	605a      	str	r2, [r3, #4]
 80019a0:	609a      	str	r2, [r3, #8]
 80019a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019a4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019b0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
 80019be:	611a      	str	r2, [r3, #16]
 80019c0:	615a      	str	r2, [r3, #20]
 80019c2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019c4:	1d3b      	adds	r3, r7, #4
 80019c6:	2234      	movs	r2, #52	@ 0x34
 80019c8:	2100      	movs	r1, #0
 80019ca:	4618      	mov	r0, r3
 80019cc:	f013 f945 	bl	8014c5a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019d0:	4b49      	ldr	r3, [pc, #292]	@ (8001af8 <MX_TIM1_Init+0x168>)
 80019d2:	4a4a      	ldr	r2, [pc, #296]	@ (8001afc <MX_TIM1_Init+0x16c>)
 80019d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80019d6:	4b48      	ldr	r3, [pc, #288]	@ (8001af8 <MX_TIM1_Init+0x168>)
 80019d8:	2200      	movs	r2, #0
 80019da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019dc:	4b46      	ldr	r3, [pc, #280]	@ (8001af8 <MX_TIM1_Init+0x168>)
 80019de:	2200      	movs	r2, #0
 80019e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80019e2:	4b45      	ldr	r3, [pc, #276]	@ (8001af8 <MX_TIM1_Init+0x168>)
 80019e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ea:	4b43      	ldr	r3, [pc, #268]	@ (8001af8 <MX_TIM1_Init+0x168>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019f0:	4b41      	ldr	r3, [pc, #260]	@ (8001af8 <MX_TIM1_Init+0x168>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019f6:	4b40      	ldr	r3, [pc, #256]	@ (8001af8 <MX_TIM1_Init+0x168>)
 80019f8:	2280      	movs	r2, #128	@ 0x80
 80019fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80019fc:	483e      	ldr	r0, [pc, #248]	@ (8001af8 <MX_TIM1_Init+0x168>)
 80019fe:	f00e fc20 	bl	8010242 <HAL_TIM_Base_Init>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001a08:	f001 f9ea 	bl	8002de0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a10:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a12:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001a16:	4619      	mov	r1, r3
 8001a18:	4837      	ldr	r0, [pc, #220]	@ (8001af8 <MX_TIM1_Init+0x168>)
 8001a1a:	f00e ff6b 	bl	80108f4 <HAL_TIM_ConfigClockSource>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001a24:	f001 f9dc 	bl	8002de0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a28:	4833      	ldr	r0, [pc, #204]	@ (8001af8 <MX_TIM1_Init+0x168>)
 8001a2a:	f00e fce7 	bl	80103fc <HAL_TIM_PWM_Init>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001a34:	f001 f9d4 	bl	8002de0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a40:	2300      	movs	r3, #0
 8001a42:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a44:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a48:	4619      	mov	r1, r3
 8001a4a:	482b      	ldr	r0, [pc, #172]	@ (8001af8 <MX_TIM1_Init+0x168>)
 8001a4c:	f00f fc98 	bl	8011380 <HAL_TIMEx_MasterConfigSynchronization>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001a56:	f001 f9c3 	bl	8002de0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a5a:	2360      	movs	r3, #96	@ 0x60
 8001a5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a62:	2300      	movs	r3, #0
 8001a64:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a66:	2300      	movs	r3, #0
 8001a68:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a72:	2300      	movs	r3, #0
 8001a74:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a76:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	481e      	ldr	r0, [pc, #120]	@ (8001af8 <MX_TIM1_Init+0x168>)
 8001a80:	f00e fe24 	bl	80106cc <HAL_TIM_PWM_ConfigChannel>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001a8a:	f001 f9a9 	bl	8002de0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a8e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a92:	2204      	movs	r2, #4
 8001a94:	4619      	mov	r1, r3
 8001a96:	4818      	ldr	r0, [pc, #96]	@ (8001af8 <MX_TIM1_Init+0x168>)
 8001a98:	f00e fe18 	bl	80106cc <HAL_TIM_PWM_ConfigChannel>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001aa2:	f001 f99d 	bl	8002de0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001aba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001abe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001ac8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001acc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ad6:	1d3b      	adds	r3, r7, #4
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4807      	ldr	r0, [pc, #28]	@ (8001af8 <MX_TIM1_Init+0x168>)
 8001adc:	f00f fcec 	bl	80114b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001ae6:	f001 f97b 	bl	8002de0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001aea:	4803      	ldr	r0, [pc, #12]	@ (8001af8 <MX_TIM1_Init+0x168>)
 8001aec:	f002 f81e 	bl	8003b2c <HAL_TIM_MspPostInit>

}
 8001af0:	bf00      	nop
 8001af2:	3770      	adds	r7, #112	@ 0x70
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	24000648 	.word	0x24000648
 8001afc:	40010000 	.word	0x40010000

08001b00 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001b04:	4b10      	ldr	r3, [pc, #64]	@ (8001b48 <MX_TIM16_Init+0x48>)
 8001b06:	4a11      	ldr	r2, [pc, #68]	@ (8001b4c <MX_TIM16_Init+0x4c>)
 8001b08:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 528;
 8001b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b48 <MX_TIM16_Init+0x48>)
 8001b0c:	f44f 7204 	mov.w	r2, #528	@ 0x210
 8001b10:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b12:	4b0d      	ldr	r3, [pc, #52]	@ (8001b48 <MX_TIM16_Init+0x48>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000 - 1;
 8001b18:	4b0b      	ldr	r3, [pc, #44]	@ (8001b48 <MX_TIM16_Init+0x48>)
 8001b1a:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001b1e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b20:	4b09      	ldr	r3, [pc, #36]	@ (8001b48 <MX_TIM16_Init+0x48>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001b26:	4b08      	ldr	r3, [pc, #32]	@ (8001b48 <MX_TIM16_Init+0x48>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b2c:	4b06      	ldr	r3, [pc, #24]	@ (8001b48 <MX_TIM16_Init+0x48>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001b32:	4805      	ldr	r0, [pc, #20]	@ (8001b48 <MX_TIM16_Init+0x48>)
 8001b34:	f00e fb85 	bl	8010242 <HAL_TIM_Base_Init>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001b3e:	f001 f94f 	bl	8002de0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	24000694 	.word	0x24000694
 8001b4c:	40014400 	.word	0x40014400

08001b50 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b54:	4b22      	ldr	r3, [pc, #136]	@ (8001be0 <MX_USART1_UART_Init+0x90>)
 8001b56:	4a23      	ldr	r2, [pc, #140]	@ (8001be4 <MX_USART1_UART_Init+0x94>)
 8001b58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b5a:	4b21      	ldr	r3, [pc, #132]	@ (8001be0 <MX_USART1_UART_Init+0x90>)
 8001b5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b62:	4b1f      	ldr	r3, [pc, #124]	@ (8001be0 <MX_USART1_UART_Init+0x90>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b68:	4b1d      	ldr	r3, [pc, #116]	@ (8001be0 <MX_USART1_UART_Init+0x90>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8001be0 <MX_USART1_UART_Init+0x90>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b74:	4b1a      	ldr	r3, [pc, #104]	@ (8001be0 <MX_USART1_UART_Init+0x90>)
 8001b76:	220c      	movs	r2, #12
 8001b78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b7a:	4b19      	ldr	r3, [pc, #100]	@ (8001be0 <MX_USART1_UART_Init+0x90>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b80:	4b17      	ldr	r3, [pc, #92]	@ (8001be0 <MX_USART1_UART_Init+0x90>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b86:	4b16      	ldr	r3, [pc, #88]	@ (8001be0 <MX_USART1_UART_Init+0x90>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b8c:	4b14      	ldr	r3, [pc, #80]	@ (8001be0 <MX_USART1_UART_Init+0x90>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b92:	4b13      	ldr	r3, [pc, #76]	@ (8001be0 <MX_USART1_UART_Init+0x90>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b98:	4811      	ldr	r0, [pc, #68]	@ (8001be0 <MX_USART1_UART_Init+0x90>)
 8001b9a:	f00f fd37 	bl	801160c <HAL_UART_Init>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001ba4:	f001 f91c 	bl	8002de0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ba8:	2100      	movs	r1, #0
 8001baa:	480d      	ldr	r0, [pc, #52]	@ (8001be0 <MX_USART1_UART_Init+0x90>)
 8001bac:	f010 fed1 	bl	8012952 <HAL_UARTEx_SetTxFifoThreshold>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001bb6:	f001 f913 	bl	8002de0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bba:	2100      	movs	r1, #0
 8001bbc:	4808      	ldr	r0, [pc, #32]	@ (8001be0 <MX_USART1_UART_Init+0x90>)
 8001bbe:	f010 ff06 	bl	80129ce <HAL_UARTEx_SetRxFifoThreshold>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001bc8:	f001 f90a 	bl	8002de0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001bcc:	4804      	ldr	r0, [pc, #16]	@ (8001be0 <MX_USART1_UART_Init+0x90>)
 8001bce:	f010 fe87 	bl	80128e0 <HAL_UARTEx_DisableFifoMode>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001bd8:	f001 f902 	bl	8002de0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bdc:	bf00      	nop
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	240006e0 	.word	0x240006e0
 8001be4:	40011000 	.word	0x40011000

08001be8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bec:	4b22      	ldr	r3, [pc, #136]	@ (8001c78 <MX_USART2_UART_Init+0x90>)
 8001bee:	4a23      	ldr	r2, [pc, #140]	@ (8001c7c <MX_USART2_UART_Init+0x94>)
 8001bf0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bf2:	4b21      	ldr	r3, [pc, #132]	@ (8001c78 <MX_USART2_UART_Init+0x90>)
 8001bf4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001bf8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bfa:	4b1f      	ldr	r3, [pc, #124]	@ (8001c78 <MX_USART2_UART_Init+0x90>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c00:	4b1d      	ldr	r3, [pc, #116]	@ (8001c78 <MX_USART2_UART_Init+0x90>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c06:	4b1c      	ldr	r3, [pc, #112]	@ (8001c78 <MX_USART2_UART_Init+0x90>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c0c:	4b1a      	ldr	r3, [pc, #104]	@ (8001c78 <MX_USART2_UART_Init+0x90>)
 8001c0e:	220c      	movs	r2, #12
 8001c10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c12:	4b19      	ldr	r3, [pc, #100]	@ (8001c78 <MX_USART2_UART_Init+0x90>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c18:	4b17      	ldr	r3, [pc, #92]	@ (8001c78 <MX_USART2_UART_Init+0x90>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c1e:	4b16      	ldr	r3, [pc, #88]	@ (8001c78 <MX_USART2_UART_Init+0x90>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c24:	4b14      	ldr	r3, [pc, #80]	@ (8001c78 <MX_USART2_UART_Init+0x90>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c2a:	4b13      	ldr	r3, [pc, #76]	@ (8001c78 <MX_USART2_UART_Init+0x90>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c30:	4811      	ldr	r0, [pc, #68]	@ (8001c78 <MX_USART2_UART_Init+0x90>)
 8001c32:	f00f fceb 	bl	801160c <HAL_UART_Init>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001c3c:	f001 f8d0 	bl	8002de0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c40:	2100      	movs	r1, #0
 8001c42:	480d      	ldr	r0, [pc, #52]	@ (8001c78 <MX_USART2_UART_Init+0x90>)
 8001c44:	f010 fe85 	bl	8012952 <HAL_UARTEx_SetTxFifoThreshold>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001c4e:	f001 f8c7 	bl	8002de0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c52:	2100      	movs	r1, #0
 8001c54:	4808      	ldr	r0, [pc, #32]	@ (8001c78 <MX_USART2_UART_Init+0x90>)
 8001c56:	f010 feba 	bl	80129ce <HAL_UARTEx_SetRxFifoThreshold>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001c60:	f001 f8be 	bl	8002de0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001c64:	4804      	ldr	r0, [pc, #16]	@ (8001c78 <MX_USART2_UART_Init+0x90>)
 8001c66:	f010 fe3b 	bl	80128e0 <HAL_UARTEx_DisableFifoMode>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001c70:	f001 f8b6 	bl	8002de0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c74:	bf00      	nop
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	24000774 	.word	0x24000774
 8001c7c:	40004400 	.word	0x40004400

08001c80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c86:	4b0d      	ldr	r3, [pc, #52]	@ (8001cbc <MX_DMA_Init+0x3c>)
 8001c88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001c8c:	4a0b      	ldr	r2, [pc, #44]	@ (8001cbc <MX_DMA_Init+0x3c>)
 8001c8e:	f043 0301 	orr.w	r3, r3, #1
 8001c92:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001c96:	4b09      	ldr	r3, [pc, #36]	@ (8001cbc <MX_DMA_Init+0x3c>)
 8001c98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	607b      	str	r3, [r7, #4]
 8001ca2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	200b      	movs	r0, #11
 8001caa:	f004 fc44 	bl	8006536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001cae:	200b      	movs	r0, #11
 8001cb0:	f004 fc5b 	bl	800656a <HAL_NVIC_EnableIRQ>

}
 8001cb4:	bf00      	nop
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	58024400 	.word	0x58024400

08001cc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08e      	sub	sp, #56	@ 0x38
 8001cc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	605a      	str	r2, [r3, #4]
 8001cd0:	609a      	str	r2, [r3, #8]
 8001cd2:	60da      	str	r2, [r3, #12]
 8001cd4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cd6:	4b75      	ldr	r3, [pc, #468]	@ (8001eac <MX_GPIO_Init+0x1ec>)
 8001cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cdc:	4a73      	ldr	r2, [pc, #460]	@ (8001eac <MX_GPIO_Init+0x1ec>)
 8001cde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ce2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ce6:	4b71      	ldr	r3, [pc, #452]	@ (8001eac <MX_GPIO_Init+0x1ec>)
 8001ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cf0:	623b      	str	r3, [r7, #32]
 8001cf2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cf4:	4b6d      	ldr	r3, [pc, #436]	@ (8001eac <MX_GPIO_Init+0x1ec>)
 8001cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cfa:	4a6c      	ldr	r2, [pc, #432]	@ (8001eac <MX_GPIO_Init+0x1ec>)
 8001cfc:	f043 0304 	orr.w	r3, r3, #4
 8001d00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d04:	4b69      	ldr	r3, [pc, #420]	@ (8001eac <MX_GPIO_Init+0x1ec>)
 8001d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d0a:	f003 0304 	and.w	r3, r3, #4
 8001d0e:	61fb      	str	r3, [r7, #28]
 8001d10:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d12:	4b66      	ldr	r3, [pc, #408]	@ (8001eac <MX_GPIO_Init+0x1ec>)
 8001d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d18:	4a64      	ldr	r2, [pc, #400]	@ (8001eac <MX_GPIO_Init+0x1ec>)
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d22:	4b62      	ldr	r3, [pc, #392]	@ (8001eac <MX_GPIO_Init+0x1ec>)
 8001d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	61bb      	str	r3, [r7, #24]
 8001d2e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d30:	4b5e      	ldr	r3, [pc, #376]	@ (8001eac <MX_GPIO_Init+0x1ec>)
 8001d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d36:	4a5d      	ldr	r2, [pc, #372]	@ (8001eac <MX_GPIO_Init+0x1ec>)
 8001d38:	f043 0302 	orr.w	r3, r3, #2
 8001d3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d40:	4b5a      	ldr	r3, [pc, #360]	@ (8001eac <MX_GPIO_Init+0x1ec>)
 8001d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	617b      	str	r3, [r7, #20]
 8001d4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d4e:	4b57      	ldr	r3, [pc, #348]	@ (8001eac <MX_GPIO_Init+0x1ec>)
 8001d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d54:	4a55      	ldr	r2, [pc, #340]	@ (8001eac <MX_GPIO_Init+0x1ec>)
 8001d56:	f043 0320 	orr.w	r3, r3, #32
 8001d5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d5e:	4b53      	ldr	r3, [pc, #332]	@ (8001eac <MX_GPIO_Init+0x1ec>)
 8001d60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d64:	f003 0320 	and.w	r3, r3, #32
 8001d68:	613b      	str	r3, [r7, #16]
 8001d6a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d6c:	4b4f      	ldr	r3, [pc, #316]	@ (8001eac <MX_GPIO_Init+0x1ec>)
 8001d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d72:	4a4e      	ldr	r2, [pc, #312]	@ (8001eac <MX_GPIO_Init+0x1ec>)
 8001d74:	f043 0310 	orr.w	r3, r3, #16
 8001d78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d7c:	4b4b      	ldr	r3, [pc, #300]	@ (8001eac <MX_GPIO_Init+0x1ec>)
 8001d7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d82:	f003 0310 	and.w	r3, r3, #16
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d8a:	4b48      	ldr	r3, [pc, #288]	@ (8001eac <MX_GPIO_Init+0x1ec>)
 8001d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d90:	4a46      	ldr	r2, [pc, #280]	@ (8001eac <MX_GPIO_Init+0x1ec>)
 8001d92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d9a:	4b44      	ldr	r3, [pc, #272]	@ (8001eac <MX_GPIO_Init+0x1ec>)
 8001d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001da8:	4b40      	ldr	r3, [pc, #256]	@ (8001eac <MX_GPIO_Init+0x1ec>)
 8001daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dae:	4a3f      	ldr	r2, [pc, #252]	@ (8001eac <MX_GPIO_Init+0x1ec>)
 8001db0:	f043 0308 	orr.w	r3, r3, #8
 8001db4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001db8:	4b3c      	ldr	r3, [pc, #240]	@ (8001eac <MX_GPIO_Init+0x1ec>)
 8001dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dbe:	f003 0308 	and.w	r3, r3, #8
 8001dc2:	607b      	str	r3, [r7, #4]
 8001dc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, START_BUTTON_LED_Pin|RTDS_Pin, GPIO_PIN_RESET);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	2103      	movs	r1, #3
 8001dca:	4839      	ldr	r0, [pc, #228]	@ (8001eb0 <MX_GPIO_Init+0x1f0>)
 8001dcc:	f008 f88e 	bl	8009eec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS18B20_Data_GPIO_Port, DS18B20_Data_Pin, GPIO_PIN_RESET);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001dd6:	4837      	ldr	r0, [pc, #220]	@ (8001eb4 <MX_GPIO_Init+0x1f4>)
 8001dd8:	f008 f888 	bl	8009eec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : START_BUTTON_LED_Pin RTDS_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_LED_Pin|RTDS_Pin;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de0:	2301      	movs	r3, #1
 8001de2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de8:	2300      	movs	r3, #0
 8001dea:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001df0:	4619      	mov	r1, r3
 8001df2:	482f      	ldr	r0, [pc, #188]	@ (8001eb0 <MX_GPIO_Init+0x1f0>)
 8001df4:	f007 feba 	bl	8009b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 8001df8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001dfc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e02:	2302      	movs	r3, #2
 8001e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001e06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	482a      	ldr	r0, [pc, #168]	@ (8001eb8 <MX_GPIO_Init+0x1f8>)
 8001e0e:	f007 fead 	bl	8009b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : MICROSD_DET_Pin */
  GPIO_InitStruct.Pin = MICROSD_DET_Pin;
 8001e12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(MICROSD_DET_GPIO_Port, &GPIO_InitStruct);
 8001e20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e24:	4619      	mov	r1, r3
 8001e26:	4824      	ldr	r0, [pc, #144]	@ (8001eb8 <MX_GPIO_Init+0x1f8>)
 8001e28:	f007 fea0 	bl	8009b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : DS18B20_Data_Pin */
  GPIO_InitStruct.Pin = DS18B20_Data_Pin;
 8001e2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e32:	2301      	movs	r3, #1
 8001e34:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(DS18B20_Data_GPIO_Port, &GPIO_InitStruct);
 8001e3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e42:	4619      	mov	r1, r3
 8001e44:	481b      	ldr	r0, [pc, #108]	@ (8001eb4 <MX_GPIO_Init+0x1f4>)
 8001e46:	f007 fe91 	bl	8009b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON1_Pin */
  GPIO_InitStruct.Pin = START_BUTTON1_Pin;
 8001e4a:	2380      	movs	r3, #128	@ 0x80
 8001e4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e52:	2302      	movs	r3, #2
 8001e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(START_BUTTON1_GPIO_Port, &GPIO_InitStruct);
 8001e56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4817      	ldr	r0, [pc, #92]	@ (8001ebc <MX_GPIO_Init+0x1fc>)
 8001e5e:	f007 fe85 	bl	8009b6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  /* --- nRF24 CE/CSN pins (PG3=CSN idle HIGH, PC6=CE idle LOW) --- */

  // Idle levels
  HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);   // CSN idle HIGH
 8001e62:	2201      	movs	r2, #1
 8001e64:	2108      	movs	r1, #8
 8001e66:	4815      	ldr	r0, [pc, #84]	@ (8001ebc <MX_GPIO_Init+0x1fc>)
 8001e68:	f008 f840 	bl	8009eec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(NRF24_CE_PORT,  NRF24_CE_PIN,  GPIO_PIN_RESET); // CE  idle LOW
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2140      	movs	r1, #64	@ 0x40
 8001e70:	480f      	ldr	r0, [pc, #60]	@ (8001eb0 <MX_GPIO_Init+0x1f0>)
 8001e72:	f008 f83b 	bl	8009eec <HAL_GPIO_WritePin>

  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8001e76:	2301      	movs	r3, #1
 8001e78:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	633b      	str	r3, [r7, #48]	@ 0x30

  GPIO_InitStruct.Pin = NRF24_CSN_PIN;
 8001e82:	2308      	movs	r3, #8
 8001e84:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(NRF24_CSN_PORT, &GPIO_InitStruct);
 8001e86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	480b      	ldr	r0, [pc, #44]	@ (8001ebc <MX_GPIO_Init+0x1fc>)
 8001e8e:	f007 fe6d 	bl	8009b6c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = NRF24_CE_PIN;
 8001e92:	2340      	movs	r3, #64	@ 0x40
 8001e94:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(NRF24_CE_PORT, &GPIO_InitStruct);
 8001e96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4804      	ldr	r0, [pc, #16]	@ (8001eb0 <MX_GPIO_Init+0x1f0>)
 8001e9e:	f007 fe65 	bl	8009b6c <HAL_GPIO_Init>



/* USER CODE END MX_GPIO_Init_2 */
}
 8001ea2:	bf00      	nop
 8001ea4:	3738      	adds	r7, #56	@ 0x38
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	58024400 	.word	0x58024400
 8001eb0:	58020800 	.word	0x58020800
 8001eb4:	58021000 	.word	0x58021000
 8001eb8:	58021400 	.word	0x58021400
 8001ebc:	58021800 	.word	0x58021800

08001ec0 <print>:

/* USER CODE BEGIN 4 */
void print(char uart_buffer[])
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s \n\r", uart_buffer);
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	4909      	ldr	r1, [pc, #36]	@ (8001ef0 <print+0x30>)
 8001ecc:	4809      	ldr	r0, [pc, #36]	@ (8001ef4 <print+0x34>)
 8001ece:	f012 fe5f 	bl	8014b90 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_msg, strlen(uart_msg),
 8001ed2:	4808      	ldr	r0, [pc, #32]	@ (8001ef4 <print+0x34>)
 8001ed4:	f7fe fa6c 	bl	80003b0 <strlen>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee0:	4904      	ldr	r1, [pc, #16]	@ (8001ef4 <print+0x34>)
 8001ee2:	4805      	ldr	r0, [pc, #20]	@ (8001ef8 <print+0x38>)
 8001ee4:	f00f fbe2 	bl	80116ac <HAL_UART_Transmit>
					  HAL_MAX_DELAY);
}
 8001ee8:	bf00      	nop
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	080185e0 	.word	0x080185e0
 8001ef4:	24000924 	.word	0x24000924
 8001ef8:	24000774 	.word	0x24000774

08001efc <HAL_ADC_ConvCpltCallback>:
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_msg, strlen(uart_msg),
					  HAL_MAX_DELAY);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
	//s1_aceleracion = buffer_adc[0];
	//s2_aceleracion = buffer_adc[1];
	//s_freno = buffer_adc[2];
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <HAL_FDCAN_RxFifo0Callback>:
		Error_Handler();
	}
}

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f000 8104 	beq.w	800212e <HAL_FDCAN_RxFifo0Callback+0x21e>
	{
		/* Retreive Rx messages from RX FIFO0 */

		if (hfdcan->Instance == FDCAN1)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a83      	ldr	r2, [pc, #524]	@ (8002138 <HAL_FDCAN_RxFifo0Callback+0x228>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	f040 8098 	bne.w	8002062 <HAL_FDCAN_RxFifo0Callback+0x152>
		{
			if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader_Inv,
 8001f32:	4b82      	ldr	r3, [pc, #520]	@ (800213c <HAL_FDCAN_RxFifo0Callback+0x22c>)
 8001f34:	4a82      	ldr	r2, [pc, #520]	@ (8002140 <HAL_FDCAN_RxFifo0Callback+0x230>)
 8001f36:	2140      	movs	r1, #64	@ 0x40
 8001f38:	4882      	ldr	r0, [pc, #520]	@ (8002144 <HAL_FDCAN_RxFifo0Callback+0x234>)
 8001f3a:	f006 fedf 	bl	8008cfc <HAL_FDCAN_GetRxMessage>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f040 80f4 	bne.w	800212e <HAL_FDCAN_RxFifo0Callback+0x21e>
									   RxData_Inv) == HAL_OK)
			{
				switch (RxHeader_Inv.Identifier)
 8001f46:	4b7e      	ldr	r3, [pc, #504]	@ (8002140 <HAL_FDCAN_RxFifo0Callback+0x230>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f2a3 4361 	subw	r3, r3, #1121	@ 0x461
 8001f4e:	2b05      	cmp	r3, #5
 8001f50:	f200 80ed 	bhi.w	800212e <HAL_FDCAN_RxFifo0Callback+0x21e>
 8001f54:	a201      	add	r2, pc, #4	@ (adr r2, 8001f5c <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8001f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f5a:	bf00      	nop
 8001f5c:	08001f75 	.word	0x08001f75
 8001f60:	0800212f 	.word	0x0800212f
 8001f64:	08001f9f 	.word	0x08001f9f
 8001f68:	08001fdd 	.word	0x08001fdd
 8001f6c:	08002007 	.word	0x08002007
 8001f70:	08002033 	.word	0x08002033
				{
				case TX_STATE_2:
					state = RxData_Inv[4] & 0xF;
 8001f74:	4b71      	ldr	r3, [pc, #452]	@ (800213c <HAL_FDCAN_RxFifo0Callback+0x22c>)
 8001f76:	791b      	ldrb	r3, [r3, #4]
 8001f78:	f003 030f 	and.w	r3, r3, #15
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	4b72      	ldr	r3, [pc, #456]	@ (8002148 <HAL_FDCAN_RxFifo0Callback+0x238>)
 8001f80:	701a      	strb	r2, [r3, #0]

					if (state == 10 || state == 11)
 8001f82:	4b71      	ldr	r3, [pc, #452]	@ (8002148 <HAL_FDCAN_RxFifo0Callback+0x238>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	2b0a      	cmp	r3, #10
 8001f88:	d004      	beq.n	8001f94 <HAL_FDCAN_RxFifo0Callback+0x84>
 8001f8a:	4b6f      	ldr	r3, [pc, #444]	@ (8002148 <HAL_FDCAN_RxFifo0Callback+0x238>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b0b      	cmp	r3, #11
 8001f90:	f040 80c2 	bne.w	8002118 <HAL_FDCAN_RxFifo0Callback+0x208>
					{
						error = RxData_Inv[2];
 8001f94:	4b69      	ldr	r3, [pc, #420]	@ (800213c <HAL_FDCAN_RxFifo0Callback+0x22c>)
 8001f96:	789a      	ldrb	r2, [r3, #2]
 8001f98:	4b6c      	ldr	r3, [pc, #432]	@ (800214c <HAL_FDCAN_RxFifo0Callback+0x23c>)
 8001f9a:	701a      	strb	r2, [r3, #0]
						//printHex(error);
					}
					break;
 8001f9c:	e0bc      	b.n	8002118 <HAL_FDCAN_RxFifo0Callback+0x208>

				case TX_STATE_4:
				  if (RxHeader_Inv.DataLength == FDCAN_DLC_BYTES_8) {
 8001f9e:	4b68      	ldr	r3, [pc, #416]	@ (8002140 <HAL_FDCAN_RxFifo0Callback+0x230>)
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	2b08      	cmp	r3, #8
 8001fa4:	f040 80ba 	bne.w	800211c <HAL_FDCAN_RxFifo0Callback+0x20c>
				      uint32_t raw = ((uint32_t)(RxData_Inv[7] & 0x0F) << 16) |
 8001fa8:	4b64      	ldr	r3, [pc, #400]	@ (800213c <HAL_FDCAN_RxFifo0Callback+0x22c>)
 8001faa:	79db      	ldrb	r3, [r3, #7]
 8001fac:	041b      	lsls	r3, r3, #16
 8001fae:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
				                     ((uint32_t)RxData_Inv[6] << 8) |
 8001fb2:	4b62      	ldr	r3, [pc, #392]	@ (800213c <HAL_FDCAN_RxFifo0Callback+0x22c>)
 8001fb4:	799b      	ldrb	r3, [r3, #6]
 8001fb6:	021b      	lsls	r3, r3, #8
				      uint32_t raw = ((uint32_t)(RxData_Inv[7] & 0x0F) << 16) |
 8001fb8:	4313      	orrs	r3, r2
				                     ((uint32_t)RxData_Inv[5]);
 8001fba:	4a60      	ldr	r2, [pc, #384]	@ (800213c <HAL_FDCAN_RxFifo0Callback+0x22c>)
 8001fbc:	7952      	ldrb	r2, [r2, #5]
				      uint32_t raw = ((uint32_t)(RxData_Inv[7] & 0x0F) << 16) |
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	60fb      	str	r3, [r7, #12]
				      // sign-extend 20-bit if needed
				      if (raw & 0x80000u) raw |= 0xFFF00000u;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <HAL_FDCAN_RxFifo0Callback+0xc4>
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	4b60      	ldr	r3, [pc, #384]	@ (8002150 <HAL_FDCAN_RxFifo0Callback+0x240>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	60fb      	str	r3, [r7, #12]
				      e_machine_rpm = (int)raw;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4a5f      	ldr	r2, [pc, #380]	@ (8002154 <HAL_FDCAN_RxFifo0Callback+0x244>)
 8001fd8:	6013      	str	r3, [r2, #0]
				  }
				  break;
 8001fda:	e09f      	b.n	800211c <HAL_FDCAN_RxFifo0Callback+0x20c>

				case TX_STATE_5:  //Temperaturas
				  if (RxHeader_Inv.DataLength == FDCAN_DLC_BYTES_8) {
 8001fdc:	4b58      	ldr	r3, [pc, #352]	@ (8002140 <HAL_FDCAN_RxFifo0Callback+0x230>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	2b08      	cmp	r3, #8
 8001fe2:	f040 809d 	bne.w	8002120 <HAL_FDCAN_RxFifo0Callback+0x210>
				      inv_t_motor = RxData_Inv[0];  // REPLACE with real byte mapping
 8001fe6:	4b55      	ldr	r3, [pc, #340]	@ (800213c <HAL_FDCAN_RxFifo0Callback+0x22c>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	461a      	mov	r2, r3
 8001fec:	4b5a      	ldr	r3, [pc, #360]	@ (8002158 <HAL_FDCAN_RxFifo0Callback+0x248>)
 8001fee:	601a      	str	r2, [r3, #0]
				      inv_t_igbt  = RxData_Inv[1];  // REPLACE
 8001ff0:	4b52      	ldr	r3, [pc, #328]	@ (800213c <HAL_FDCAN_RxFifo0Callback+0x22c>)
 8001ff2:	785b      	ldrb	r3, [r3, #1]
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	4b59      	ldr	r3, [pc, #356]	@ (800215c <HAL_FDCAN_RxFifo0Callback+0x24c>)
 8001ff8:	601a      	str	r2, [r3, #0]
				      inv_t_air   = RxData_Inv[2];  // REPLACE
 8001ffa:	4b50      	ldr	r3, [pc, #320]	@ (800213c <HAL_FDCAN_RxFifo0Callback+0x22c>)
 8001ffc:	789b      	ldrb	r3, [r3, #2]
 8001ffe:	461a      	mov	r2, r3
 8002000:	4b57      	ldr	r3, [pc, #348]	@ (8002160 <HAL_FDCAN_RxFifo0Callback+0x250>)
 8002002:	601a      	str	r2, [r3, #0]
				  }
				  break;
 8002004:	e08c      	b.n	8002120 <HAL_FDCAN_RxFifo0Callback+0x210>

				case TX_STATE_6:  //Movidas inversor
				  if (RxHeader_Inv.DataLength == FDCAN_DLC_BYTES_8) {
 8002006:	4b4e      	ldr	r3, [pc, #312]	@ (8002140 <HAL_FDCAN_RxFifo0Callback+0x230>)
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	2b08      	cmp	r3, #8
 800200c:	f040 808a 	bne.w	8002124 <HAL_FDCAN_RxFifo0Callback+0x214>
				      inv_n_actual = (RxData_Inv[3] << 8) | RxData_Inv[2];   // REPLACE mapping
 8002010:	4b4a      	ldr	r3, [pc, #296]	@ (800213c <HAL_FDCAN_RxFifo0Callback+0x22c>)
 8002012:	78db      	ldrb	r3, [r3, #3]
 8002014:	021b      	lsls	r3, r3, #8
 8002016:	4a49      	ldr	r2, [pc, #292]	@ (800213c <HAL_FDCAN_RxFifo0Callback+0x22c>)
 8002018:	7892      	ldrb	r2, [r2, #2]
 800201a:	4313      	orrs	r3, r2
 800201c:	4a51      	ldr	r2, [pc, #324]	@ (8002164 <HAL_FDCAN_RxFifo0Callback+0x254>)
 800201e:	6013      	str	r3, [r2, #0]
				      inv_i_actual = (RxData_Inv[5] << 8) | RxData_Inv[4];   // REPLACE mapping
 8002020:	4b46      	ldr	r3, [pc, #280]	@ (800213c <HAL_FDCAN_RxFifo0Callback+0x22c>)
 8002022:	795b      	ldrb	r3, [r3, #5]
 8002024:	021b      	lsls	r3, r3, #8
 8002026:	4a45      	ldr	r2, [pc, #276]	@ (800213c <HAL_FDCAN_RxFifo0Callback+0x22c>)
 8002028:	7912      	ldrb	r2, [r2, #4]
 800202a:	4313      	orrs	r3, r2
 800202c:	4a4e      	ldr	r2, [pc, #312]	@ (8002168 <HAL_FDCAN_RxFifo0Callback+0x258>)
 800202e:	6013      	str	r3, [r2, #0]
				  }
				  break;
 8002030:	e078      	b.n	8002124 <HAL_FDCAN_RxFifo0Callback+0x214>

				case TX_STATE_7:
					if (RxHeader_Inv.DataLength == 6)
 8002032:	4b43      	ldr	r3, [pc, #268]	@ (8002140 <HAL_FDCAN_RxFifo0Callback+0x230>)
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	2b06      	cmp	r3, #6
 8002038:	d176      	bne.n	8002128 <HAL_FDCAN_RxFifo0Callback+0x218>
					{
						if (config_inv_lectura_v == 0)
 800203a:	4b4c      	ldr	r3, [pc, #304]	@ (800216c <HAL_FDCAN_RxFifo0Callback+0x25c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d102      	bne.n	8002048 <HAL_FDCAN_RxFifo0Callback+0x138>
						{
							config_inv_lectura_v = 1;
 8002042:	4b4a      	ldr	r3, [pc, #296]	@ (800216c <HAL_FDCAN_RxFifo0Callback+0x25c>)
 8002044:	2201      	movs	r2, #1
 8002046:	601a      	str	r2, [r3, #0]
						}
						if (config_inv_lectura_v == 1)
 8002048:	4b48      	ldr	r3, [pc, #288]	@ (800216c <HAL_FDCAN_RxFifo0Callback+0x25c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d16b      	bne.n	8002128 <HAL_FDCAN_RxFifo0Callback+0x218>
						{
							//inv_dc_bus_voltage = (int)RxData_Inv[1] << 8 | (int)RxData_Inv[0];
							inv_dc_bus_voltage = RxData_Inv[3] << 8 | RxData_Inv[2];
 8002050:	4b3a      	ldr	r3, [pc, #232]	@ (800213c <HAL_FDCAN_RxFifo0Callback+0x22c>)
 8002052:	78db      	ldrb	r3, [r3, #3]
 8002054:	021b      	lsls	r3, r3, #8
 8002056:	4a39      	ldr	r2, [pc, #228]	@ (800213c <HAL_FDCAN_RxFifo0Callback+0x22c>)
 8002058:	7892      	ldrb	r2, [r2, #2]
 800205a:	4313      	orrs	r3, r2
 800205c:	4a44      	ldr	r2, [pc, #272]	@ (8002170 <HAL_FDCAN_RxFifo0Callback+0x260>)
 800205e:	6013      	str	r3, [r2, #0]
							//}
							//inv_dc_bus_power = inv_dc_bus_power * 32767; // Scale factor
						}
					}

					break;
 8002060:	e062      	b.n	8002128 <HAL_FDCAN_RxFifo0Callback+0x218>
				}
			}
		}
		else if (hfdcan->Instance == FDCAN2)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a43      	ldr	r2, [pc, #268]	@ (8002174 <HAL_FDCAN_RxFifo0Callback+0x264>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d126      	bne.n	80020ba <HAL_FDCAN_RxFifo0Callback+0x1aa>
		{
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_Acu,
 800206c:	4b42      	ldr	r3, [pc, #264]	@ (8002178 <HAL_FDCAN_RxFifo0Callback+0x268>)
 800206e:	4a43      	ldr	r2, [pc, #268]	@ (800217c <HAL_FDCAN_RxFifo0Callback+0x26c>)
 8002070:	2140      	movs	r1, #64	@ 0x40
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f006 fe42 	bl	8008cfc <HAL_FDCAN_GetRxMessage>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d157      	bne.n	800212e <HAL_FDCAN_RxFifo0Callback+0x21e>
									   RxData_Acu) == HAL_OK)
			{
				switch (RxHeader_Acu.Identifier)
 800207e:	4b3f      	ldr	r3, [pc, #252]	@ (800217c <HAL_FDCAN_RxFifo0Callback+0x26c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2b20      	cmp	r3, #32
 8002084:	d003      	beq.n	800208e <HAL_FDCAN_RxFifo0Callback+0x17e>
 8002086:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800208a:	d008      	beq.n	800209e <HAL_FDCAN_RxFifo0Callback+0x18e>

				}
			}
		}
	}
}
 800208c:	e04f      	b.n	800212e <HAL_FDCAN_RxFifo0Callback+0x21e>
					if (RxData_Acu[0] == 0)
 800208e:	4b3a      	ldr	r3, [pc, #232]	@ (8002178 <HAL_FDCAN_RxFifo0Callback+0x268>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d14a      	bne.n	800212c <HAL_FDCAN_RxFifo0Callback+0x21c>
						precarga_inv = 1;
 8002096:	4b3a      	ldr	r3, [pc, #232]	@ (8002180 <HAL_FDCAN_RxFifo0Callback+0x270>)
 8002098:	2201      	movs	r2, #1
 800209a:	601a      	str	r2, [r3, #0]
					break;
 800209c:	e046      	b.n	800212c <HAL_FDCAN_RxFifo0Callback+0x21c>
					v_celda_min = (int)(RxData_Acu[0] << 8 | RxData_Acu[1]);
 800209e:	4b36      	ldr	r3, [pc, #216]	@ (8002178 <HAL_FDCAN_RxFifo0Callback+0x268>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	021b      	lsls	r3, r3, #8
 80020a4:	4a34      	ldr	r2, [pc, #208]	@ (8002178 <HAL_FDCAN_RxFifo0Callback+0x268>)
 80020a6:	7852      	ldrb	r2, [r2, #1]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	ee07 3a90 	vmov	s15, r3
 80020ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020b2:	4b34      	ldr	r3, [pc, #208]	@ (8002184 <HAL_FDCAN_RxFifo0Callback+0x274>)
 80020b4:	edc3 7a00 	vstr	s15, [r3]
					break;
 80020b8:	e039      	b.n	800212e <HAL_FDCAN_RxFifo0Callback+0x21e>
		else if (hfdcan->Instance == FDCAN3)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a32      	ldr	r2, [pc, #200]	@ (8002188 <HAL_FDCAN_RxFifo0Callback+0x278>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d134      	bne.n	800212e <HAL_FDCAN_RxFifo0Callback+0x21e>
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_Dash,
 80020c4:	4b31      	ldr	r3, [pc, #196]	@ (800218c <HAL_FDCAN_RxFifo0Callback+0x27c>)
 80020c6:	4a32      	ldr	r2, [pc, #200]	@ (8002190 <HAL_FDCAN_RxFifo0Callback+0x280>)
 80020c8:	2140      	movs	r1, #64	@ 0x40
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f006 fe16 	bl	8008cfc <HAL_FDCAN_GetRxMessage>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d12b      	bne.n	800212e <HAL_FDCAN_RxFifo0Callback+0x21e>
				switch (RxHeader_Dash.Identifier)
 80020d6:	4b2e      	ldr	r3, [pc, #184]	@ (8002190 <HAL_FDCAN_RxFifo0Callback+0x280>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f240 1233 	movw	r2, #307	@ 0x133
 80020de:	4293      	cmp	r3, r2
 80020e0:	d125      	bne.n	800212e <HAL_FDCAN_RxFifo0Callback+0x21e>
					s1_aceleracion = ((uint16_t)RxData_Dash[0] << 8) | RxData_Dash[1];
 80020e2:	4b2a      	ldr	r3, [pc, #168]	@ (800218c <HAL_FDCAN_RxFifo0Callback+0x27c>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	b21b      	sxth	r3, r3
 80020e8:	021b      	lsls	r3, r3, #8
 80020ea:	b21a      	sxth	r2, r3
 80020ec:	4b27      	ldr	r3, [pc, #156]	@ (800218c <HAL_FDCAN_RxFifo0Callback+0x27c>)
 80020ee:	785b      	ldrb	r3, [r3, #1]
 80020f0:	b21b      	sxth	r3, r3
 80020f2:	4313      	orrs	r3, r2
 80020f4:	b21b      	sxth	r3, r3
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	4b26      	ldr	r3, [pc, #152]	@ (8002194 <HAL_FDCAN_RxFifo0Callback+0x284>)
 80020fa:	801a      	strh	r2, [r3, #0]
					s2_aceleracion = ((uint16_t)RxData_Dash[2] << 8) | RxData_Dash[3];
 80020fc:	4b23      	ldr	r3, [pc, #140]	@ (800218c <HAL_FDCAN_RxFifo0Callback+0x27c>)
 80020fe:	789b      	ldrb	r3, [r3, #2]
 8002100:	b21b      	sxth	r3, r3
 8002102:	021b      	lsls	r3, r3, #8
 8002104:	b21a      	sxth	r2, r3
 8002106:	4b21      	ldr	r3, [pc, #132]	@ (800218c <HAL_FDCAN_RxFifo0Callback+0x27c>)
 8002108:	78db      	ldrb	r3, [r3, #3]
 800210a:	b21b      	sxth	r3, r3
 800210c:	4313      	orrs	r3, r2
 800210e:	b21b      	sxth	r3, r3
 8002110:	b29a      	uxth	r2, r3
 8002112:	4b21      	ldr	r3, [pc, #132]	@ (8002198 <HAL_FDCAN_RxFifo0Callback+0x288>)
 8002114:	801a      	strh	r2, [r3, #0]
}
 8002116:	e00a      	b.n	800212e <HAL_FDCAN_RxFifo0Callback+0x21e>
					break;
 8002118:	bf00      	nop
 800211a:	e008      	b.n	800212e <HAL_FDCAN_RxFifo0Callback+0x21e>
				  break;
 800211c:	bf00      	nop
 800211e:	e006      	b.n	800212e <HAL_FDCAN_RxFifo0Callback+0x21e>
				  break;
 8002120:	bf00      	nop
 8002122:	e004      	b.n	800212e <HAL_FDCAN_RxFifo0Callback+0x21e>
				  break;
 8002124:	bf00      	nop
 8002126:	e002      	b.n	800212e <HAL_FDCAN_RxFifo0Callback+0x21e>
					break;
 8002128:	bf00      	nop
 800212a:	e000      	b.n	800212e <HAL_FDCAN_RxFifo0Callback+0x21e>
					break;
 800212c:	bf00      	nop
}
 800212e:	bf00      	nop
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	4000a000 	.word	0x4000a000
 800213c:	240008b4 	.word	0x240008b4
 8002140:	24000818 	.word	0x24000818
 8002144:	24000364 	.word	0x24000364
 8002148:	24000912 	.word	0x24000912
 800214c:	24000988 	.word	0x24000988
 8002150:	fff00000 	.word	0xfff00000
 8002154:	240008dc 	.word	0x240008dc
 8002158:	240008e0 	.word	0x240008e0
 800215c:	240008e4 	.word	0x240008e4
 8002160:	240008e8 	.word	0x240008e8
 8002164:	240008ec 	.word	0x240008ec
 8002168:	240008f0 	.word	0x240008f0
 800216c:	24000208 	.word	0x24000208
 8002170:	240008d8 	.word	0x240008d8
 8002174:	4000a400 	.word	0x4000a400
 8002178:	240008c4 	.word	0x240008c4
 800217c:	24000864 	.word	0x24000864
 8002180:	24000204 	.word	0x24000204
 8002184:	2400000c 	.word	0x2400000c
 8002188:	4000d400 	.word	0x4000d400
 800218c:	240008cc 	.word	0x240008cc
 8002190:	2400088c 	.word	0x2400088c
 8002194:	240008fa 	.word	0x240008fa
 8002198:	240008fc 	.word	0x240008fc

0800219c <HAL_FDCAN_ErrorStatusCallback>:

void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs) {
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
	if (hfdcan == &hfdcan2) {
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a03      	ldr	r2, [pc, #12]	@ (80021b8 <HAL_FDCAN_ErrorStatusCallback+0x1c>)
 80021aa:	4293      	cmp	r3, r2
		if ((ErrorStatusITs & FDCAN_IT_BUS_OFF) != RESET) {
			//CAN_bus_off_check_reset(hfdcan);
		}
	}
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	24000404 	.word	0x24000404
 80021bc:	00000000 	.word	0x00000000

080021c0 <setTorque>:
	}
	return sum / N_LECTURAS;
}*/

uint16_t setTorque()
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
	print("Sensor freno: ");
	printValue(s_freno);
#endif

	// Calculamos % torque  en función de la posición de los sensores
	s1_aceleracion_aux = (s1_aceleracion - 2050) / (29.5 - 20.5);
 80021c6:	4b90      	ldr	r3, [pc, #576]	@ (8002408 <setTorque+0x248>)
 80021c8:	881b      	ldrh	r3, [r3, #0]
 80021ca:	f6a3 0302 	subw	r3, r3, #2050	@ 0x802
 80021ce:	ee07 3a90 	vmov	s15, r3
 80021d2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80021d6:	eeb2 5b02 	vmov.f64	d5, #34	@ 0x41100000  9.0
 80021da:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80021de:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80021e2:	ee17 3a90 	vmov	r3, s15
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	4b88      	ldr	r3, [pc, #544]	@ (800240c <setTorque+0x24c>)
 80021ea:	801a      	strh	r2, [r3, #0]
	if (s1_aceleracion_aux < 0)
	{
		s1_aceleracion_aux = 0;
	}
	else if (s1_aceleracion_aux > 100)
 80021ec:	4b87      	ldr	r3, [pc, #540]	@ (800240c <setTorque+0x24c>)
 80021ee:	881b      	ldrh	r3, [r3, #0]
 80021f0:	2b64      	cmp	r3, #100	@ 0x64
 80021f2:	d902      	bls.n	80021fa <setTorque+0x3a>
	{
		s1_aceleracion_aux = 100;
 80021f4:	4b85      	ldr	r3, [pc, #532]	@ (800240c <setTorque+0x24c>)
 80021f6:	2264      	movs	r2, #100	@ 0x64
 80021f8:	801a      	strh	r2, [r3, #0]
	}

	s2_aceleracion_aux = (s2_aceleracion - 1915) / (25.70 - 19.15);
 80021fa:	4b85      	ldr	r3, [pc, #532]	@ (8002410 <setTorque+0x250>)
 80021fc:	881b      	ldrh	r3, [r3, #0]
 80021fe:	f2a3 737b 	subw	r3, r3, #1915	@ 0x77b
 8002202:	ee07 3a90 	vmov	s15, r3
 8002206:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800220a:	ed9f 5b75 	vldr	d5, [pc, #468]	@ 80023e0 <setTorque+0x220>
 800220e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002212:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002216:	ee17 3a90 	vmov	r3, s15
 800221a:	b29a      	uxth	r2, r3
 800221c:	4b7d      	ldr	r3, [pc, #500]	@ (8002414 <setTorque+0x254>)
 800221e:	801a      	strh	r2, [r3, #0]
	if (s2_aceleracion_aux < 0)
	{
		s2_aceleracion_aux = 0;
	}
	else if (s2_aceleracion_aux > 100)
 8002220:	4b7c      	ldr	r3, [pc, #496]	@ (8002414 <setTorque+0x254>)
 8002222:	881b      	ldrh	r3, [r3, #0]
 8002224:	2b64      	cmp	r3, #100	@ 0x64
 8002226:	d902      	bls.n	800222e <setTorque+0x6e>
	{
		s2_aceleracion_aux = 100;
 8002228:	4b7a      	ldr	r3, [pc, #488]	@ (8002414 <setTorque+0x254>)
 800222a:	2264      	movs	r2, #100	@ 0x64
 800222c:	801a      	strh	r2, [r3, #0]
	printValue(s2_aceleracion_aux);
	print("");
#endif

	// Torque enviado es la media de los dos sensores
	if (s1_aceleracion_aux > 8 && s2_aceleracion_aux > 8)
 800222e:	4b77      	ldr	r3, [pc, #476]	@ (800240c <setTorque+0x24c>)
 8002230:	881b      	ldrh	r3, [r3, #0]
 8002232:	2b08      	cmp	r3, #8
 8002234:	d911      	bls.n	800225a <setTorque+0x9a>
 8002236:	4b77      	ldr	r3, [pc, #476]	@ (8002414 <setTorque+0x254>)
 8002238:	881b      	ldrh	r3, [r3, #0]
 800223a:	2b08      	cmp	r3, #8
 800223c:	d90d      	bls.n	800225a <setTorque+0x9a>
	{
		torque_total = (s1_aceleracion_aux + s2_aceleracion_aux) / 2;
 800223e:	4b73      	ldr	r3, [pc, #460]	@ (800240c <setTorque+0x24c>)
 8002240:	881b      	ldrh	r3, [r3, #0]
 8002242:	461a      	mov	r2, r3
 8002244:	4b73      	ldr	r3, [pc, #460]	@ (8002414 <setTorque+0x254>)
 8002246:	881b      	ldrh	r3, [r3, #0]
 8002248:	4413      	add	r3, r2
 800224a:	2b00      	cmp	r3, #0
 800224c:	da00      	bge.n	8002250 <setTorque+0x90>
 800224e:	3301      	adds	r3, #1
 8002250:	105b      	asrs	r3, r3, #1
 8002252:	b29a      	uxth	r2, r3
 8002254:	4b70      	ldr	r3, [pc, #448]	@ (8002418 <setTorque+0x258>)
 8002256:	801a      	strh	r2, [r3, #0]
 8002258:	e002      	b.n	8002260 <setTorque+0xa0>
	}
	else
	{
		torque_total = 0;
 800225a:	4b6f      	ldr	r3, [pc, #444]	@ (8002418 <setTorque+0x258>)
 800225c:	2200      	movs	r2, #0
 800225e:	801a      	strh	r2, [r3, #0]
	}

	// Por debajo de un 10% no acelera y por encima de un 90% esta a tope
	if (torque_total < 10)
 8002260:	4b6d      	ldr	r3, [pc, #436]	@ (8002418 <setTorque+0x258>)
 8002262:	881b      	ldrh	r3, [r3, #0]
 8002264:	2b09      	cmp	r3, #9
 8002266:	d803      	bhi.n	8002270 <setTorque+0xb0>
	{
		torque_total = 0;
 8002268:	4b6b      	ldr	r3, [pc, #428]	@ (8002418 <setTorque+0x258>)
 800226a:	2200      	movs	r2, #0
 800226c:	801a      	strh	r2, [r3, #0]
 800226e:	e006      	b.n	800227e <setTorque+0xbe>
	}
	else if (torque_total > 90)
 8002270:	4b69      	ldr	r3, [pc, #420]	@ (8002418 <setTorque+0x258>)
 8002272:	881b      	ldrh	r3, [r3, #0]
 8002274:	2b5a      	cmp	r3, #90	@ 0x5a
 8002276:	d902      	bls.n	800227e <setTorque+0xbe>
	{
		torque_total = 100;
 8002278:	4b67      	ldr	r3, [pc, #412]	@ (8002418 <setTorque+0x258>)
 800227a:	2264      	movs	r2, #100	@ 0x64
 800227c:	801a      	strh	r2, [r3, #0]
	}

	// Comprobamos EV 2.3 APPS/Brake Pedal Plausibility Check
	// En caso de que se esté pisando el freno y mas de un 25% del pedal para. Se resetea
	// solo si el acelerador vuelve por debajo del 5%
	if (s_freno > UMBRAL_FRENO_APPS && torque_total > 25)
 800227e:	4b67      	ldr	r3, [pc, #412]	@ (800241c <setTorque+0x25c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002286:	4293      	cmp	r3, r2
 8002288:	dd0a      	ble.n	80022a0 <setTorque+0xe0>
 800228a:	4b63      	ldr	r3, [pc, #396]	@ (8002418 <setTorque+0x258>)
 800228c:	881b      	ldrh	r3, [r3, #0]
 800228e:	2b19      	cmp	r3, #25
 8002290:	d906      	bls.n	80022a0 <setTorque+0xe0>
	{
		print("EV_2_3");
 8002292:	4863      	ldr	r0, [pc, #396]	@ (8002420 <setTorque+0x260>)
 8002294:	f7ff fe14 	bl	8001ec0 <print>
		flag_EV_2_3 = 1;
 8002298:	4b62      	ldr	r3, [pc, #392]	@ (8002424 <setTorque+0x264>)
 800229a:	2201      	movs	r2, #1
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	e00c      	b.n	80022ba <setTorque+0xfa>
	}
	else if (s_freno < UMBRAL_FRENO_APPS && torque_total < 5)
 80022a0:	4b5e      	ldr	r3, [pc, #376]	@ (800241c <setTorque+0x25c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80022a8:	4293      	cmp	r3, r2
 80022aa:	dc06      	bgt.n	80022ba <setTorque+0xfa>
 80022ac:	4b5a      	ldr	r3, [pc, #360]	@ (8002418 <setTorque+0x258>)
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	2b04      	cmp	r3, #4
 80022b2:	d802      	bhi.n	80022ba <setTorque+0xfa>
	{
		flag_EV_2_3 = 0;
 80022b4:	4b5b      	ldr	r3, [pc, #364]	@ (8002424 <setTorque+0x264>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]
	}
	// If an implausibility occurs between the values of the APPSs and persists for more than
	// 100ms The power to the motor(s) must be immediately shut down completely
	// T11.8.9 Implausibility is defined as a deviation of more than ten percentage points
	// pedal travel between any of the used APPSs
	if (abs(s1_aceleracion_aux - s2_aceleracion_aux) > 10)
 80022ba:	4b54      	ldr	r3, [pc, #336]	@ (800240c <setTorque+0x24c>)
 80022bc:	881b      	ldrh	r3, [r3, #0]
 80022be:	461a      	mov	r2, r3
 80022c0:	4b54      	ldr	r3, [pc, #336]	@ (8002414 <setTorque+0x254>)
 80022c2:	881b      	ldrh	r3, [r3, #0]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	bfb8      	it	lt
 80022ca:	425b      	neglt	r3, r3
 80022cc:	2b0a      	cmp	r3, #10
 80022ce:	dd06      	ble.n	80022de <setTorque+0x11e>
	{

		// if (HAL_GetTick() - last_time_t_11_8 > 100) {
		print("T11.8.9");
 80022d0:	4855      	ldr	r0, [pc, #340]	@ (8002428 <setTorque+0x268>)
 80022d2:	f7ff fdf5 	bl	8001ec0 <print>
		flag_T11_8_9 = 1;
 80022d6:	4b55      	ldr	r3, [pc, #340]	@ (800242c <setTorque+0x26c>)
 80022d8:	2201      	movs	r2, #1
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	e007      	b.n	80022ee <setTorque+0x12e>
		//}
	}
	else
	{
		last_time_t_11_8 = HAL_GetTick();
 80022de:	f001 ff81 	bl	80041e4 <HAL_GetTick>
 80022e2:	4603      	mov	r3, r0
 80022e4:	4a52      	ldr	r2, [pc, #328]	@ (8002430 <setTorque+0x270>)
 80022e6:	6013      	str	r3, [r2, #0]
		flag_T11_8_9 = 0;
 80022e8:	4b50      	ldr	r3, [pc, #320]	@ (800242c <setTorque+0x26c>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
	}

	if (flag_EV_2_3 || flag_T11_8_9)
 80022ee:	4b4d      	ldr	r3, [pc, #308]	@ (8002424 <setTorque+0x264>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d103      	bne.n	80022fe <setTorque+0x13e>
 80022f6:	4b4d      	ldr	r3, [pc, #308]	@ (800242c <setTorque+0x26c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d002      	beq.n	8002304 <setTorque+0x144>
	{
		torque_total = 0;
 80022fe:	4b46      	ldr	r3, [pc, #280]	@ (8002418 <setTorque+0x258>)
 8002300:	2200      	movs	r2, #0
 8002302:	801a      	strh	r2, [r3, #0]
	print("Torque total solicitado: ");
	printValue(torque_total);
#endif

	// Limitación del torque en función de la carga
	if (v_celda_min < 3500)
 8002304:	4b4b      	ldr	r3, [pc, #300]	@ (8002434 <setTorque+0x274>)
 8002306:	edd3 7a00 	vldr	s15, [r3]
 800230a:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8002438 <setTorque+0x278>
 800230e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002316:	d53a      	bpl.n	800238e <setTorque+0x1ce>
	{
		if (v_celda_min > 2800)
 8002318:	4b46      	ldr	r3, [pc, #280]	@ (8002434 <setTorque+0x274>)
 800231a:	edd3 7a00 	vldr	s15, [r3]
 800231e:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 800243c <setTorque+0x27c>
 8002322:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800232a:	dd1f      	ble.n	800236c <setTorque+0x1ac>
		{
			torque_limitado = torque_total * (1.357 * v_celda_min - 3750) / 1000;
 800232c:	4b3a      	ldr	r3, [pc, #232]	@ (8002418 <setTorque+0x258>)
 800232e:	881b      	ldrh	r3, [r3, #0]
 8002330:	ee07 3a90 	vmov	s15, r3
 8002334:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002338:	4b3e      	ldr	r3, [pc, #248]	@ (8002434 <setTorque+0x274>)
 800233a:	edd3 7a00 	vldr	s15, [r3]
 800233e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002342:	ed9f 5b29 	vldr	d5, [pc, #164]	@ 80023e8 <setTorque+0x228>
 8002346:	ee27 7b05 	vmul.f64	d7, d7, d5
 800234a:	ed9f 5b29 	vldr	d5, [pc, #164]	@ 80023f0 <setTorque+0x230>
 800234e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8002352:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002356:	ed9f 5b28 	vldr	d5, [pc, #160]	@ 80023f8 <setTorque+0x238>
 800235a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800235e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002362:	ee17 2a90 	vmov	r2, s15
 8002366:	4b36      	ldr	r3, [pc, #216]	@ (8002440 <setTorque+0x280>)
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	e015      	b.n	8002398 <setTorque+0x1d8>
		}
		else
		{
			torque_limitado = torque_total * 0.05;
 800236c:	4b2a      	ldr	r3, [pc, #168]	@ (8002418 <setTorque+0x258>)
 800236e:	881b      	ldrh	r3, [r3, #0]
 8002370:	ee07 3a90 	vmov	s15, r3
 8002374:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002378:	ed9f 6b21 	vldr	d6, [pc, #132]	@ 8002400 <setTorque+0x240>
 800237c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002380:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002384:	ee17 2a90 	vmov	r2, s15
 8002388:	4b2d      	ldr	r3, [pc, #180]	@ (8002440 <setTorque+0x280>)
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	e004      	b.n	8002398 <setTorque+0x1d8>
		}
	}
	else
	{
		torque_limitado = torque_total;
 800238e:	4b22      	ldr	r3, [pc, #136]	@ (8002418 <setTorque+0x258>)
 8002390:	881b      	ldrh	r3, [r3, #0]
 8002392:	461a      	mov	r2, r3
 8002394:	4b2a      	ldr	r3, [pc, #168]	@ (8002440 <setTorque+0x280>)
 8002396:	601a      	str	r2, [r3, #0]
print("Torque limitado en: ");
printValue(torque_limitado);
#endif

	// torque_total = torque_total * 240 / 100;
	if (torque_total >= 10)
 8002398:	4b1f      	ldr	r3, [pc, #124]	@ (8002418 <setTorque+0x258>)
 800239a:	881b      	ldrh	r3, [r3, #0]
 800239c:	2b09      	cmp	r3, #9
 800239e:	d912      	bls.n	80023c6 <setTorque+0x206>
	{
		torque_total = (torque_total * 240 / 90 - 2400 / 90) * (100 / 100);
 80023a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002418 <setTorque+0x258>)
 80023a2:	881b      	ldrh	r3, [r3, #0]
 80023a4:	461a      	mov	r2, r3
 80023a6:	4613      	mov	r3, r2
 80023a8:	011b      	lsls	r3, r3, #4
 80023aa:	1a9b      	subs	r3, r3, r2
 80023ac:	011b      	lsls	r3, r3, #4
 80023ae:	4a25      	ldr	r2, [pc, #148]	@ (8002444 <setTorque+0x284>)
 80023b0:	fb82 1203 	smull	r1, r2, r2, r3
 80023b4:	441a      	add	r2, r3
 80023b6:	1192      	asrs	r2, r2, #6
 80023b8:	17db      	asrs	r3, r3, #31
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	b29b      	uxth	r3, r3
 80023be:	3b1a      	subs	r3, #26
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	4b15      	ldr	r3, [pc, #84]	@ (8002418 <setTorque+0x258>)
 80023c4:	801a      	strh	r2, [r3, #0]
	/*if(torque_total < 0){
		torque_total = 0;
	}*/

	// Invertir todos los bits (complemento a uno)
	uint16_t complement_one = ~torque_total;
 80023c6:	4b14      	ldr	r3, [pc, #80]	@ (8002418 <setTorque+0x258>)
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	43db      	mvns	r3, r3
 80023cc:	80fb      	strh	r3, [r7, #6]

	// Sumar 1 para obtener el complemento a dos
	uint16_t torque_real = complement_one + 1;
 80023ce:	88fb      	ldrh	r3, [r7, #6]
 80023d0:	3301      	adds	r3, #1
 80023d2:	80bb      	strh	r3, [r7, #4]

#if 0
	print("Torque mandado al inversor: ");
	printHex(torque_real);
#endif
	return torque_real;
 80023d4:	88bb      	ldrh	r3, [r7, #4]
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	33333334 	.word	0x33333334
 80023e4:	401a3333 	.word	0x401a3333
 80023e8:	a1cac083 	.word	0xa1cac083
 80023ec:	3ff5b645 	.word	0x3ff5b645
 80023f0:	00000000 	.word	0x00000000
 80023f4:	40ad4c00 	.word	0x40ad4c00
 80023f8:	00000000 	.word	0x00000000
 80023fc:	408f4000 	.word	0x408f4000
 8002400:	9999999a 	.word	0x9999999a
 8002404:	3fa99999 	.word	0x3fa99999
 8002408:	240008fa 	.word	0x240008fa
 800240c:	240008fe 	.word	0x240008fe
 8002410:	240008fc 	.word	0x240008fc
 8002414:	24000900 	.word	0x24000900
 8002418:	24000908 	.word	0x24000908
 800241c:	24000904 	.word	0x24000904
 8002420:	080185fc 	.word	0x080185fc
 8002424:	24000918 	.word	0x24000918
 8002428:	08018604 	.word	0x08018604
 800242c:	2400091c 	.word	0x2400091c
 8002430:	24000914 	.word	0x24000914
 8002434:	2400000c 	.word	0x2400000c
 8002438:	455ac000 	.word	0x455ac000
 800243c:	452f0000 	.word	0x452f0000
 8002440:	2400090c 	.word	0x2400090c
 8002444:	b60b60b7 	.word	0xb60b60b7

08002448 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]

	if (htim == &htim16)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a49      	ldr	r2, [pc, #292]	@ (8002578 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8002454:	4293      	cmp	r3, r2
 8002456:	f040 808a 	bne.w	800256e <HAL_TIM_PeriodElapsedCallback+0x126>
	{
		// Reenvío DC_BUS_VOLTAGE al AMS por CAN_ACU
		TxHeader_Acu.Identifier = ID_dc_bus_voltage;
 800245a:	4b48      	ldr	r3, [pc, #288]	@ (800257c <HAL_TIM_PeriodElapsedCallback+0x134>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a48      	ldr	r2, [pc, #288]	@ (8002580 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002460:	6013      	str	r3, [r2, #0]
		TxHeader_Acu.DataLength = 2;
 8002462:	4b47      	ldr	r3, [pc, #284]	@ (8002580 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002464:	2202      	movs	r2, #2
 8002466:	60da      	str	r2, [r3, #12]
		TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 8002468:	4b45      	ldr	r3, [pc, #276]	@ (8002580 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800246a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800246e:	605a      	str	r2, [r3, #4]
		TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 8002470:	4b43      	ldr	r3, [pc, #268]	@ (8002580 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002472:	2200      	movs	r2, #0
 8002474:	619a      	str	r2, [r3, #24]
		TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 8002476:	4b42      	ldr	r3, [pc, #264]	@ (8002580 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002478:	2200      	movs	r2, #0
 800247a:	609a      	str	r2, [r3, #8]

		/*		TxData_Acu[0] = byte0_voltage;
		 TxData_Acu[1] = byte1_voltage;*/
		TxData_Acu[0] = inv_dc_bus_voltage & 0xFF;
 800247c:	4b41      	ldr	r3, [pc, #260]	@ (8002584 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	b2da      	uxtb	r2, r3
 8002482:	4b41      	ldr	r3, [pc, #260]	@ (8002588 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002484:	701a      	strb	r2, [r3, #0]
		TxData_Acu[1] = (inv_dc_bus_voltage >> 8) & 0xFF;
 8002486:	4b3f      	ldr	r3, [pc, #252]	@ (8002584 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	121b      	asrs	r3, r3, #8
 800248c:	b2da      	uxtb	r2, r3
 800248e:	4b3e      	ldr	r3, [pc, #248]	@ (8002588 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002490:	705a      	strb	r2, [r3, #1]
		//printValue(inv_dc_bus_voltage);
		/* --- Telemetry tick: 10ms base --- */
		    tel_irq_cnt++;                // <--- ADD
 8002492:	4b3e      	ldr	r3, [pc, #248]	@ (800258c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	3301      	adds	r3, #1
 8002498:	4a3c      	ldr	r2, [pc, #240]	@ (800258c <HAL_TIM_PeriodElapsedCallback+0x144>)
 800249a:	6013      	str	r3, [r2, #0]
		    tel_tick += 10;
 800249c:	4b3c      	ldr	r3, [pc, #240]	@ (8002590 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	330a      	adds	r3, #10
 80024a2:	4a3b      	ldr	r2, [pc, #236]	@ (8002590 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80024a4:	6013      	str	r3, [r2, #0]

		    (void)HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu);
 80024a6:	4a38      	ldr	r2, [pc, #224]	@ (8002588 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80024a8:	4935      	ldr	r1, [pc, #212]	@ (8002580 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80024aa:	483a      	ldr	r0, [pc, #232]	@ (8002594 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80024ac:	f006 fbcb 	bl	8008c46 <HAL_FDCAN_AddMessageToTxFifoQ>

		    precharge_button = HAL_GPIO_ReadPin(START_BUTTON_GPIO_Port, START_BUTTON_Pin);
 80024b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80024b4:	4838      	ldr	r0, [pc, #224]	@ (8002598 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80024b6:	f007 fd01 	bl	8009ebc <HAL_GPIO_ReadPin>
 80024ba:	4603      	mov	r3, r0
 80024bc:	461a      	mov	r2, r3
 80024be:	4b37      	ldr	r3, [pc, #220]	@ (800259c <HAL_TIM_PeriodElapsedCallback+0x154>)
 80024c0:	601a      	str	r2, [r3, #0]

		    TxHeader_Acu.Identifier = 0x600;
 80024c2:	4b2f      	ldr	r3, [pc, #188]	@ (8002580 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80024c4:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80024c8:	601a      	str	r2, [r3, #0]
		    TxHeader_Acu.DataLength = 2;
 80024ca:	4b2d      	ldr	r3, [pc, #180]	@ (8002580 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80024cc:	2202      	movs	r2, #2
 80024ce:	60da      	str	r2, [r3, #12]
		    TxHeader_Acu.IdType     = FDCAN_EXTENDED_ID;
 80024d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002580 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80024d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80024d6:	605a      	str	r2, [r3, #4]
		    TxHeader_Acu.FDFormat   = FDCAN_CLASSIC_CAN;
 80024d8:	4b29      	ldr	r3, [pc, #164]	@ (8002580 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80024da:	2200      	movs	r2, #0
 80024dc:	619a      	str	r2, [r3, #24]
		    TxHeader_Acu.TxFrameType= FDCAN_DATA_FRAME;
 80024de:	4b28      	ldr	r3, [pc, #160]	@ (8002580 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	609a      	str	r2, [r3, #8]
		    TxData_Acu[0] = precharge_button;
 80024e4:	4b2d      	ldr	r3, [pc, #180]	@ (800259c <HAL_TIM_PeriodElapsedCallback+0x154>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	b2da      	uxtb	r2, r3
 80024ea:	4b27      	ldr	r3, [pc, #156]	@ (8002588 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80024ec:	701a      	strb	r2, [r3, #0]

		    /* REMOVE noisy ISR print:
		       printValue(TxData_Acu[0]);  // <-- delete this (no UART in ISR) */

		    (void)HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu);
 80024ee:	4a26      	ldr	r2, [pc, #152]	@ (8002588 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80024f0:	4923      	ldr	r1, [pc, #140]	@ (8002580 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80024f2:	4828      	ldr	r0, [pc, #160]	@ (8002594 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80024f4:	f006 fba7 	bl	8008c46 <HAL_FDCAN_AddMessageToTxFifoQ>

		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK)
 80024f8:	4a23      	ldr	r2, [pc, #140]	@ (8002588 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80024fa:	4921      	ldr	r1, [pc, #132]	@ (8002580 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80024fc:	4825      	ldr	r0, [pc, #148]	@ (8002594 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80024fe:	f006 fba2 	bl	8008c46 <HAL_FDCAN_AddMessageToTxFifoQ>
#if DEBUG
			//print("CAN_ACU: DC_BUS_VOLTAGE enviado a AMS");
#endif
		}

		precharge_button = HAL_GPIO_ReadPin(START_BUTTON_GPIO_Port, START_BUTTON_Pin);
 8002502:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002506:	4824      	ldr	r0, [pc, #144]	@ (8002598 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8002508:	f007 fcd8 	bl	8009ebc <HAL_GPIO_ReadPin>
 800250c:	4603      	mov	r3, r0
 800250e:	461a      	mov	r2, r3
 8002510:	4b22      	ldr	r3, [pc, #136]	@ (800259c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8002512:	601a      	str	r2, [r3, #0]

		TxHeader_Acu.Identifier = 0x600;
 8002514:	4b1a      	ldr	r3, [pc, #104]	@ (8002580 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002516:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800251a:	601a      	str	r2, [r3, #0]
		TxHeader_Acu.DataLength = 2;
 800251c:	4b18      	ldr	r3, [pc, #96]	@ (8002580 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800251e:	2202      	movs	r2, #2
 8002520:	60da      	str	r2, [r3, #12]
		TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 8002522:	4b17      	ldr	r3, [pc, #92]	@ (8002580 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002524:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002528:	605a      	str	r2, [r3, #4]
		TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 800252a:	4b15      	ldr	r3, [pc, #84]	@ (8002580 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800252c:	2200      	movs	r2, #0
 800252e:	619a      	str	r2, [r3, #24]
		TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 8002530:	4b13      	ldr	r3, [pc, #76]	@ (8002580 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002532:	2200      	movs	r2, #0
 8002534:	609a      	str	r2, [r3, #8]


		TxData_Acu[0] = precharge_button;
 8002536:	4b19      	ldr	r3, [pc, #100]	@ (800259c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	b2da      	uxtb	r2, r3
 800253c:	4b12      	ldr	r3, [pc, #72]	@ (8002588 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800253e:	701a      	strb	r2, [r3, #0]
		//printValue(TxData_Acu[0]);

		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK)
 8002540:	4a11      	ldr	r2, [pc, #68]	@ (8002588 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002542:	490f      	ldr	r1, [pc, #60]	@ (8002580 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002544:	4813      	ldr	r0, [pc, #76]	@ (8002594 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8002546:	f006 fb7e 	bl	8008c46 <HAL_FDCAN_AddMessageToTxFifoQ>
#endif
		}


#if CALIBRATION
		real_torque = setTorque();
 800254a:	f7ff fe39 	bl	80021c0 <setTorque>
 800254e:	4603      	mov	r3, r0
 8002550:	461a      	mov	r2, r3
 8002552:	4b13      	ldr	r3, [pc, #76]	@ (80025a0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8002554:	801a      	strh	r2, [r3, #0]
		byte_torque_1 = real_torque & 0xFF;
 8002556:	4b12      	ldr	r3, [pc, #72]	@ (80025a0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	b2da      	uxtb	r2, r3
 800255c:	4b11      	ldr	r3, [pc, #68]	@ (80025a4 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800255e:	701a      	strb	r2, [r3, #0]
		byte_torque_2 = (real_torque >> 8) & 0xFF;
 8002560:	4b0f      	ldr	r3, [pc, #60]	@ (80025a0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	0a1b      	lsrs	r3, r3, #8
 8002566:	b29b      	uxth	r3, r3
 8002568:	b2da      	uxtb	r2, r3
 800256a:	4b0f      	ldr	r3, [pc, #60]	@ (80025a8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800256c:	701a      	strb	r2, [r3, #0]
				break;
			}
		}
#endif
	}
}
 800256e:	bf00      	nop
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	24000694 	.word	0x24000694
 800257c:	24000000 	.word	0x24000000
 8002580:	24000840 	.word	0x24000840
 8002584:	240008d8 	.word	0x240008d8
 8002588:	240008bc 	.word	0x240008bc
 800258c:	2400080c 	.word	0x2400080c
 8002590:	24000808 	.word	0x24000808
 8002594:	24000404 	.word	0x24000404
 8002598:	58021400 	.word	0x58021400
 800259c:	24000920 	.word	0x24000920
 80025a0:	24000910 	.word	0x24000910
 80025a4:	2400090a 	.word	0x2400090a
 80025a8:	2400090b 	.word	0x2400090b

080025ac <tel_build_packet>:

// Packs 8 floats (32 bytes). f[0] is the "frame ID".
static void tel_build_packet(TelFrame *p)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
    static uint16_t seq   = 0;
    static uint8_t  which = 0;  // 0:0x600, 1:0x610, 2:0x620, 3:0x630

    p->seq = seq++;
 80025b4:	4b8a      	ldr	r3, [pc, #552]	@ (80027e0 <tel_build_packet+0x234>)
 80025b6:	881b      	ldrh	r3, [r3, #0]
 80025b8:	1c5a      	adds	r2, r3, #1
 80025ba:	b291      	uxth	r1, r2
 80025bc:	4a88      	ldr	r2, [pc, #544]	@ (80027e0 <tel_build_packet+0x234>)
 80025be:	8011      	strh	r1, [r2, #0]
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	8053      	strh	r3, [r2, #2]
        p->v5 = 0.0f; p->v6 = 0.0f; p->v7 = 0.0f;
        break;
    }
#else
    // ---------- REAL DATA ----------
    switch (which) {
 80025c4:	4b87      	ldr	r3, [pc, #540]	@ (80027e4 <tel_build_packet+0x238>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	2b03      	cmp	r3, #3
 80025ca:	f000 80ca 	beq.w	8002762 <tel_build_packet+0x1b6>
 80025ce:	2b03      	cmp	r3, #3
 80025d0:	dc03      	bgt.n	80025da <tel_build_packet+0x2e>
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d03d      	beq.n	8002652 <tel_build_packet+0xa6>
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d07f      	beq.n	80026da <tel_build_packet+0x12e>
    default:
    case 0: // 0x600 Powertrain basic
        p->id = 0x600;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	701a      	strb	r2, [r3, #0]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f042 0206 	orr.w	r2, r2, #6
 80025e6:	705a      	strb	r2, [r3, #1]
        p->v1 = (float)inv_dc_bus_voltage;
 80025e8:	4b7f      	ldr	r3, [pc, #508]	@ (80027e8 <tel_build_packet+0x23c>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	ee07 3a90 	vmov	s15, r3
 80025f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	ee17 2a90 	vmov	r2, s15
 80025fa:	605a      	str	r2, [r3, #4]
        p->v2 = (float)e_machine_rpm;
 80025fc:	4b7b      	ldr	r3, [pc, #492]	@ (80027ec <tel_build_packet+0x240>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	ee07 3a90 	vmov	s15, r3
 8002604:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	ee17 2a90 	vmov	r2, s15
 800260e:	609a      	str	r2, [r3, #8]
        p->v3 = (float)torque_total;
 8002610:	4b77      	ldr	r3, [pc, #476]	@ (80027f0 <tel_build_packet+0x244>)
 8002612:	881b      	ldrh	r3, [r3, #0]
 8002614:	ee07 3a90 	vmov	s15, r3
 8002618:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	ee17 2a90 	vmov	r2, s15
 8002622:	60da      	str	r2, [r3, #12]
        p->v4 = (float)v_celda_min;
 8002624:	4b73      	ldr	r3, [pc, #460]	@ (80027f4 <tel_build_packet+0x248>)
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	611a      	str	r2, [r3, #16]
        p->v5 = (float)state;
 800262c:	4b72      	ldr	r3, [pc, #456]	@ (80027f8 <tel_build_packet+0x24c>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	ee07 3a90 	vmov	s15, r3
 8002634:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	ee17 2a90 	vmov	r2, s15
 800263e:	615a      	str	r2, [r3, #20]
        p->v6 = 0.0f;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f04f 0200 	mov.w	r2, #0
 8002646:	619a      	str	r2, [r3, #24]
        p->v7 = 0.0f;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f04f 0200 	mov.w	r2, #0
 800264e:	61da      	str	r2, [r3, #28]
        break;
 8002650:	e0b3      	b.n	80027ba <tel_build_packet+0x20e>

    case 1: // 0x610 Inverter temps & currents
        p->id = 0x610;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f042 0210 	orr.w	r2, r2, #16
 800265a:	701a      	strb	r2, [r3, #0]
 800265c:	2200      	movs	r2, #0
 800265e:	f042 0206 	orr.w	r2, r2, #6
 8002662:	705a      	strb	r2, [r3, #1]
        p->v1 = (float)inv_t_motor;
 8002664:	4b65      	ldr	r3, [pc, #404]	@ (80027fc <tel_build_packet+0x250>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	ee07 3a90 	vmov	s15, r3
 800266c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	ee17 2a90 	vmov	r2, s15
 8002676:	605a      	str	r2, [r3, #4]
        p->v2 = (float)inv_t_igbt;
 8002678:	4b61      	ldr	r3, [pc, #388]	@ (8002800 <tel_build_packet+0x254>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	ee07 3a90 	vmov	s15, r3
 8002680:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	ee17 2a90 	vmov	r2, s15
 800268a:	609a      	str	r2, [r3, #8]
        p->v3 = (float)inv_t_air;
 800268c:	4b5d      	ldr	r3, [pc, #372]	@ (8002804 <tel_build_packet+0x258>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	ee07 3a90 	vmov	s15, r3
 8002694:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	ee17 2a90 	vmov	r2, s15
 800269e:	60da      	str	r2, [r3, #12]
        p->v4 = (float)inv_n_actual;
 80026a0:	4b59      	ldr	r3, [pc, #356]	@ (8002808 <tel_build_packet+0x25c>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	ee07 3a90 	vmov	s15, r3
 80026a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	ee17 2a90 	vmov	r2, s15
 80026b2:	611a      	str	r2, [r3, #16]
        p->v5 = (float)inv_i_actual;
 80026b4:	4b55      	ldr	r3, [pc, #340]	@ (800280c <tel_build_packet+0x260>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	ee07 3a90 	vmov	s15, r3
 80026bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	ee17 2a90 	vmov	r2, s15
 80026c6:	615a      	str	r2, [r3, #20]
        p->v6 = 0.0f;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f04f 0200 	mov.w	r2, #0
 80026ce:	619a      	str	r2, [r3, #24]
        p->v7 = 0.0f;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f04f 0200 	mov.w	r2, #0
 80026d6:	61da      	str	r2, [r3, #28]
        break;
 80026d8:	e06f      	b.n	80027ba <tel_build_packet+0x20e>

    case 2: // 0x620 Driver inputs
        p->id = 0x620;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f042 0220 	orr.w	r2, r2, #32
 80026e2:	701a      	strb	r2, [r3, #0]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f042 0206 	orr.w	r2, r2, #6
 80026ea:	705a      	strb	r2, [r3, #1]
        p->v1 = (float)s1_aceleracion;
 80026ec:	4b48      	ldr	r3, [pc, #288]	@ (8002810 <tel_build_packet+0x264>)
 80026ee:	881b      	ldrh	r3, [r3, #0]
 80026f0:	ee07 3a90 	vmov	s15, r3
 80026f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	ee17 2a90 	vmov	r2, s15
 80026fe:	605a      	str	r2, [r3, #4]
        p->v2 = (float)s2_aceleracion;
 8002700:	4b44      	ldr	r3, [pc, #272]	@ (8002814 <tel_build_packet+0x268>)
 8002702:	881b      	ldrh	r3, [r3, #0]
 8002704:	ee07 3a90 	vmov	s15, r3
 8002708:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	ee17 2a90 	vmov	r2, s15
 8002712:	609a      	str	r2, [r3, #8]
        p->v3 = (float)s_freno;
 8002714:	4b40      	ldr	r3, [pc, #256]	@ (8002818 <tel_build_packet+0x26c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	ee07 3a90 	vmov	s15, r3
 800271c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	ee17 2a90 	vmov	r2, s15
 8002726:	60da      	str	r2, [r3, #12]
        p->v4 = (float)precharge_button;
 8002728:	4b3c      	ldr	r3, [pc, #240]	@ (800281c <tel_build_packet+0x270>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	ee07 3a90 	vmov	s15, r3
 8002730:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	ee17 2a90 	vmov	r2, s15
 800273a:	611a      	str	r2, [r3, #16]
        p->v5 = (float)start_button_act;
 800273c:	4b38      	ldr	r3, [pc, #224]	@ (8002820 <tel_build_packet+0x274>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	ee07 3a90 	vmov	s15, r3
 8002744:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	ee17 2a90 	vmov	r2, s15
 800274e:	615a      	str	r2, [r3, #20]
        #ifdef DINPUT1_GPIO_Port
            p->v6 = (float)HAL_GPIO_ReadPin(DINPUT1_GPIO_Port, DINPUT1_Pin);
        #else
            p->v6 = 0.0f;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f04f 0200 	mov.w	r2, #0
 8002756:	619a      	str	r2, [r3, #24]
        #endif
        #ifdef DINPUT2_GPIO_Port
            p->v7 = (float)HAL_GPIO_ReadPin(DINPUT2_GPIO_Port, DINPUT2_Pin);
        #else
            p->v7 = 0.0f;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f04f 0200 	mov.w	r2, #0
 800275e:	61da      	str	r2, [r3, #28]
        #endif
        break;
 8002760:	e02b      	b.n	80027ba <tel_build_packet+0x20e>

    case 3: // 0x630 Accumulator/HV summary
        p->id = 0x630;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 800276a:	701a      	strb	r2, [r3, #0]
 800276c:	2200      	movs	r2, #0
 800276e:	f042 0206 	orr.w	r2, r2, #6
 8002772:	705a      	strb	r2, [r3, #1]
        p->v1 = (float)inv_dc_bus_voltage;
 8002774:	4b1c      	ldr	r3, [pc, #112]	@ (80027e8 <tel_build_packet+0x23c>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	ee07 3a90 	vmov	s15, r3
 800277c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	ee17 2a90 	vmov	r2, s15
 8002786:	605a      	str	r2, [r3, #4]
        p->v2 = 0.0f; p->v3 = 0.0f; p->v4 = 0.0f;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f04f 0200 	mov.w	r2, #0
 800278e:	609a      	str	r2, [r3, #8]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f04f 0200 	mov.w	r2, #0
 8002796:	60da      	str	r2, [r3, #12]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f04f 0200 	mov.w	r2, #0
 800279e:	611a      	str	r2, [r3, #16]
        p->v5 = 0.0f; p->v6 = 0.0f; p->v7 = 0.0f;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f04f 0200 	mov.w	r2, #0
 80027a6:	615a      	str	r2, [r3, #20]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f04f 0200 	mov.w	r2, #0
 80027ae:	619a      	str	r2, [r3, #24]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f04f 0200 	mov.w	r2, #0
 80027b6:	61da      	str	r2, [r3, #28]
        break;
 80027b8:	bf00      	nop
    }
#endif

    if (++which > 3) which = 0;
 80027ba:	4b0a      	ldr	r3, [pc, #40]	@ (80027e4 <tel_build_packet+0x238>)
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	3301      	adds	r3, #1
 80027c0:	b2da      	uxtb	r2, r3
 80027c2:	4b08      	ldr	r3, [pc, #32]	@ (80027e4 <tel_build_packet+0x238>)
 80027c4:	701a      	strb	r2, [r3, #0]
 80027c6:	4b07      	ldr	r3, [pc, #28]	@ (80027e4 <tel_build_packet+0x238>)
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	2b03      	cmp	r3, #3
 80027cc:	d902      	bls.n	80027d4 <tel_build_packet+0x228>
 80027ce:	4b05      	ldr	r3, [pc, #20]	@ (80027e4 <tel_build_packet+0x238>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	701a      	strb	r2, [r3, #0]
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr
 80027e0:	24000998 	.word	0x24000998
 80027e4:	2400099a 	.word	0x2400099a
 80027e8:	240008d8 	.word	0x240008d8
 80027ec:	240008dc 	.word	0x240008dc
 80027f0:	24000908 	.word	0x24000908
 80027f4:	2400000c 	.word	0x2400000c
 80027f8:	24000912 	.word	0x24000912
 80027fc:	240008e0 	.word	0x240008e0
 8002800:	240008e4 	.word	0x240008e4
 8002804:	240008e8 	.word	0x240008e8
 8002808:	240008ec 	.word	0x240008ec
 800280c:	240008f0 	.word	0x240008f0
 8002810:	240008fa 	.word	0x240008fa
 8002814:	240008fc 	.word	0x240008fc
 8002818:	24000904 	.word	0x24000904
 800281c:	24000920 	.word	0x24000920
 8002820:	240008d4 	.word	0x240008d4

08002824 <tel_send_now>:



static void tel_send_now(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b0d4      	sub	sp, #336	@ 0x150
 8002828:	af10      	add	r7, sp, #64	@ 0x40
    TelFrame pkt;
    tel_build_packet(&pkt);
 800282a:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff febc 	bl	80025ac <tel_build_packet>

#if DEBUG
    char msg[220];
    int n = snprintf(msg, sizeof(msg), // @suppress("Float formatting support")
        "\r\n[TX] ID: 0x%X seq:%u, V1:%.2f, V2:%.2f, V3:%.2f, V4:%.2f, V5:%.2f, V6:%.2f, V7:%.2f\r\n",
        pkt.id, pkt.seq, pkt.v1, pkt.v2, pkt.v3, pkt.v4, pkt.v5, pkt.v6, pkt.v7);
 8002834:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	@ 0xe0
    int n = snprintf(msg, sizeof(msg), // @suppress("Float formatting support")
 8002838:	461a      	mov	r2, r3
        pkt.id, pkt.seq, pkt.v1, pkt.v2, pkt.v3, pkt.v4, pkt.v5, pkt.v6, pkt.v7);
 800283a:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	@ 0xe2
 800283e:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
    int n = snprintf(msg, sizeof(msg), // @suppress("Float formatting support")
 8002842:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
        pkt.id, pkt.seq, pkt.v1, pkt.v2, pkt.v3, pkt.v4, pkt.v5, pkt.v6, pkt.v7);
 8002846:	edd7 6a3a 	vldr	s13, [r7, #232]	@ 0xe8
    int n = snprintf(msg, sizeof(msg), // @suppress("Float formatting support")
 800284a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
        pkt.id, pkt.seq, pkt.v1, pkt.v2, pkt.v3, pkt.v4, pkt.v5, pkt.v6, pkt.v7);
 800284e:	edd7 5a3b 	vldr	s11, [r7, #236]	@ 0xec
    int n = snprintf(msg, sizeof(msg), // @suppress("Float formatting support")
 8002852:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
        pkt.id, pkt.seq, pkt.v1, pkt.v2, pkt.v3, pkt.v4, pkt.v5, pkt.v6, pkt.v7);
 8002856:	edd7 4a3c 	vldr	s9, [r7, #240]	@ 0xf0
    int n = snprintf(msg, sizeof(msg), // @suppress("Float formatting support")
 800285a:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
        pkt.id, pkt.seq, pkt.v1, pkt.v2, pkt.v3, pkt.v4, pkt.v5, pkt.v6, pkt.v7);
 800285e:	edd7 3a3d 	vldr	s7, [r7, #244]	@ 0xf4
    int n = snprintf(msg, sizeof(msg), // @suppress("Float formatting support")
 8002862:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
        pkt.id, pkt.seq, pkt.v1, pkt.v2, pkt.v3, pkt.v4, pkt.v5, pkt.v6, pkt.v7);
 8002866:	edd7 2a3e 	vldr	s5, [r7, #248]	@ 0xf8
    int n = snprintf(msg, sizeof(msg), // @suppress("Float formatting support")
 800286a:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
        pkt.id, pkt.seq, pkt.v1, pkt.v2, pkt.v3, pkt.v4, pkt.v5, pkt.v6, pkt.v7);
 800286e:	edd7 1a3f 	vldr	s3, [r7, #252]	@ 0xfc
    int n = snprintf(msg, sizeof(msg), // @suppress("Float formatting support")
 8002872:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
 8002876:	1d38      	adds	r0, r7, #4
 8002878:	ed8d 1b0e 	vstr	d1, [sp, #56]	@ 0x38
 800287c:	ed8d 2b0c 	vstr	d2, [sp, #48]	@ 0x30
 8002880:	ed8d 3b0a 	vstr	d3, [sp, #40]	@ 0x28
 8002884:	ed8d 4b08 	vstr	d4, [sp, #32]
 8002888:	ed8d 5b06 	vstr	d5, [sp, #24]
 800288c:	ed8d 6b04 	vstr	d6, [sp, #16]
 8002890:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	4613      	mov	r3, r2
 8002898:	4a35      	ldr	r2, [pc, #212]	@ (8002970 <tel_send_now+0x14c>)
 800289a:	21dc      	movs	r1, #220	@ 0xdc
 800289c:	f012 f942 	bl	8014b24 <sniprintf>
 80028a0:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
    if (n > 0) HAL_UART_Transmit(&huart2, (uint8_t*)msg, (uint16_t)n, HAL_MAX_DELAY);
 80028a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	dd08      	ble.n	80028be <tel_send_now+0x9a>
 80028ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	1d39      	adds	r1, r7, #4
 80028b4:	f04f 33ff 	mov.w	r3, #4294967295
 80028b8:	482e      	ldr	r0, [pc, #184]	@ (8002974 <tel_send_now+0x150>)
 80028ba:	f00e fef7 	bl	80116ac <HAL_UART_Transmit>
#endif

    // Raw 32-byte TX (nRF24 payload)
    uint8_t ok = nrf24_tx32(&pkt);
 80028be:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80028c2:	4618      	mov	r0, r3
 80028c4:	f000 fa28 	bl	8002d18 <nrf24_tx32>
 80028c8:	4603      	mov	r3, r0
 80028ca:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b

#if DEBUG
    uint8_t st = nrf24_ReadReg(STATUS);
 80028ce:	2007      	movs	r0, #7
 80028d0:	f000 fb16 	bl	8002f00 <nrf24_ReadReg>
 80028d4:	4603      	mov	r3, r0
 80028d6:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    uint8_t ob = nrf24_ReadReg(OBSERVE_TX);
 80028da:	2008      	movs	r0, #8
 80028dc:	f000 fb10 	bl	8002f00 <nrf24_ReadReg>
 80028e0:	4603      	mov	r3, r0
 80028e2:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    const char *tag = ok ? "[TX] OK " : "[TX] FAIL ";
 80028e6:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <tel_send_now+0xce>
 80028ee:	4b22      	ldr	r3, [pc, #136]	@ (8002978 <tel_send_now+0x154>)
 80028f0:	e000      	b.n	80028f4 <tel_send_now+0xd0>
 80028f2:	4b22      	ldr	r3, [pc, #136]	@ (800297c <tel_send_now+0x158>)
 80028f4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_UART_Transmit(&huart2, (uint8_t*)tag, (uint16_t)strlen(tag), HAL_MAX_DELAY);
 80028f8:	f8d7 0104 	ldr.w	r0, [r7, #260]	@ 0x104
 80028fc:	f7fd fd58 	bl	80003b0 <strlen>
 8002900:	4603      	mov	r3, r0
 8002902:	b29a      	uxth	r2, r3
 8002904:	f04f 33ff 	mov.w	r3, #4294967295
 8002908:	f8d7 1104 	ldr.w	r1, [r7, #260]	@ 0x104
 800290c:	4819      	ldr	r0, [pc, #100]	@ (8002974 <tel_send_now+0x150>)
 800290e:	f00e fecd 	bl	80116ac <HAL_UART_Transmit>
    int n2 = snprintf(msg, sizeof(msg), "STATUS=%02X OBSERVE_TX=%02X\r\n", st, ob);
 8002912:	f897 210a 	ldrb.w	r2, [r7, #266]	@ 0x10a
 8002916:	f897 3109 	ldrb.w	r3, [r7, #265]	@ 0x109
 800291a:	1d38      	adds	r0, r7, #4
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	4613      	mov	r3, r2
 8002920:	4a17      	ldr	r2, [pc, #92]	@ (8002980 <tel_send_now+0x15c>)
 8002922:	21dc      	movs	r1, #220	@ 0xdc
 8002924:	f012 f8fe 	bl	8014b24 <sniprintf>
 8002928:	f8c7 0100 	str.w	r0, [r7, #256]	@ 0x100
    if (n2 > 0) HAL_UART_Transmit(&huart2, (uint8_t*)msg, (uint16_t)n2, HAL_MAX_DELAY);
 800292c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8002930:	2b00      	cmp	r3, #0
 8002932:	dd08      	ble.n	8002946 <tel_send_now+0x122>
 8002934:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8002938:	b29a      	uxth	r2, r3
 800293a:	1d39      	adds	r1, r7, #4
 800293c:	f04f 33ff 	mov.w	r3, #4294967295
 8002940:	480c      	ldr	r0, [pc, #48]	@ (8002974 <tel_send_now+0x150>)
 8002942:	f00e feb3 	bl	80116ac <HAL_UART_Transmit>
#endif

    if (ok) tel_sent_ok++; else tel_sent_fail++;
 8002946:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800294a:	2b00      	cmp	r3, #0
 800294c:	d005      	beq.n	800295a <tel_send_now+0x136>
 800294e:	4b0d      	ldr	r3, [pc, #52]	@ (8002984 <tel_send_now+0x160>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	3301      	adds	r3, #1
 8002954:	4a0b      	ldr	r2, [pc, #44]	@ (8002984 <tel_send_now+0x160>)
 8002956:	6013      	str	r3, [r2, #0]
}
 8002958:	e004      	b.n	8002964 <tel_send_now+0x140>
    if (ok) tel_sent_ok++; else tel_sent_fail++;
 800295a:	4b0b      	ldr	r3, [pc, #44]	@ (8002988 <tel_send_now+0x164>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	3301      	adds	r3, #1
 8002960:	4a09      	ldr	r2, [pc, #36]	@ (8002988 <tel_send_now+0x164>)
 8002962:	6013      	str	r3, [r2, #0]
}
 8002964:	bf00      	nop
 8002966:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	0801860c 	.word	0x0801860c
 8002974:	24000774 	.word	0x24000774
 8002978:	08018664 	.word	0x08018664
 800297c:	08018670 	.word	0x08018670
 8002980:	0801867c 	.word	0x0801867c
 8002984:	24000810 	.word	0x24000810
 8002988:	24000814 	.word	0x24000814

0800298c <gpio_dump_once>:


//----- Debugging Telemetry con LVB
static void gpio_dump_once(void) {
 800298c:	b580      	push	{r7, lr}
 800298e:	b09e      	sub	sp, #120	@ 0x78
 8002990:	af02      	add	r7, sp, #8
    // Read CE/CSN/IRQ pins to detect wiring/power issues
    int ce  = HAL_GPIO_ReadPin(NRF24_CE_PORT,  NRF24_CE_PIN);
 8002992:	2140      	movs	r1, #64	@ 0x40
 8002994:	4813      	ldr	r0, [pc, #76]	@ (80029e4 <gpio_dump_once+0x58>)
 8002996:	f007 fa91 	bl	8009ebc <HAL_GPIO_ReadPin>
 800299a:	4603      	mov	r3, r0
 800299c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    int csn = HAL_GPIO_ReadPin(NRF24_CSN_PORT, NRF24_CSN_PIN);
 800299e:	2108      	movs	r1, #8
 80029a0:	4811      	ldr	r0, [pc, #68]	@ (80029e8 <gpio_dump_once+0x5c>)
 80029a2:	f007 fa8b 	bl	8009ebc <HAL_GPIO_ReadPin>
 80029a6:	4603      	mov	r3, r0
 80029a8:	66bb      	str	r3, [r7, #104]	@ 0x68
#ifdef NRF24_IRQ_PORT
    int irq = HAL_GPIO_ReadPin(NRF24_IRQ_PORT, NRF24_IRQ_PIN);
#else
    int irq = -1; // not wired
 80029aa:	f04f 33ff 	mov.w	r3, #4294967295
 80029ae:	667b      	str	r3, [r7, #100]	@ 0x64
#endif
    char b[96];
    snprintf(b,sizeof(b),"[GPIO] CE=%d CSN=%d IRQ=%d\r\n", ce, csn, irq);
 80029b0:	1d38      	adds	r0, r7, #4
 80029b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80029b4:	9301      	str	r3, [sp, #4]
 80029b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029bc:	4a0b      	ldr	r2, [pc, #44]	@ (80029ec <gpio_dump_once+0x60>)
 80029be:	2160      	movs	r1, #96	@ 0x60
 80029c0:	f012 f8b0 	bl	8014b24 <sniprintf>
    HAL_UART_Transmit(&huart2,(uint8_t*)b,strlen(b),HAL_MAX_DELAY);
 80029c4:	1d3b      	adds	r3, r7, #4
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7fd fcf2 	bl	80003b0 <strlen>
 80029cc:	4603      	mov	r3, r0
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	1d39      	adds	r1, r7, #4
 80029d2:	f04f 33ff 	mov.w	r3, #4294967295
 80029d6:	4806      	ldr	r0, [pc, #24]	@ (80029f0 <gpio_dump_once+0x64>)
 80029d8:	f00e fe68 	bl	80116ac <HAL_UART_Transmit>
}
 80029dc:	bf00      	nop
 80029de:	3770      	adds	r7, #112	@ 0x70
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	58020800 	.word	0x58020800
 80029e8:	58021800 	.word	0x58021800
 80029ec:	0801869c 	.word	0x0801869c
 80029f0:	24000774 	.word	0x24000774

080029f4 <nrf24_diag_once>:

static void nrf24_diag_once(void) {
 80029f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029f6:	b0a9      	sub	sp, #164	@ 0xa4
 80029f8:	af06      	add	r7, sp, #24
    uint8_t status = nrf24_ReadReg(STATUS);
 80029fa:	2007      	movs	r0, #7
 80029fc:	f000 fa80 	bl	8002f00 <nrf24_ReadReg>
 8002a00:	4603      	mov	r3, r0
 8002a02:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    uint8_t cfg    = nrf24_ReadReg(CONFIG);
 8002a06:	2000      	movs	r0, #0
 8002a08:	f000 fa7a 	bl	8002f00 <nrf24_ReadReg>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
    uint8_t rf     = nrf24_ReadReg(RF_SETUP);
 8002a12:	2006      	movs	r0, #6
 8002a14:	f000 fa74 	bl	8002f00 <nrf24_ReadReg>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
    uint8_t ch     = nrf24_ReadReg(RF_CH);
 8002a1e:	2005      	movs	r0, #5
 8002a20:	f000 fa6e 	bl	8002f00 <nrf24_ReadReg>
 8002a24:	4603      	mov	r3, r0
 8002a26:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
    uint8_t fifo   = nrf24_ReadReg(FIFO_STATUS);
 8002a2a:	2017      	movs	r0, #23
 8002a2c:	f000 fa68 	bl	8002f00 <nrf24_ReadReg>
 8002a30:	4603      	mov	r3, r0
 8002a32:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
    uint8_t obs    = nrf24_ReadReg(OBSERVE_TX);
 8002a36:	2008      	movs	r0, #8
 8002a38:	f000 fa62 	bl	8002f00 <nrf24_ReadReg>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
    char b[128];
    snprintf(b,sizeof(b),
 8002a42:	f897 6087 	ldrb.w	r6, [r7, #135]	@ 0x87
 8002a46:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8002a4a:	f897 2085 	ldrb.w	r2, [r7, #133]	@ 0x85
 8002a4e:	f897 1084 	ldrb.w	r1, [r7, #132]	@ 0x84
 8002a52:	f897 0083 	ldrb.w	r0, [r7, #131]	@ 0x83
 8002a56:	f897 4082 	ldrb.w	r4, [r7, #130]	@ 0x82
 8002a5a:	463d      	mov	r5, r7
 8002a5c:	9404      	str	r4, [sp, #16]
 8002a5e:	9003      	str	r0, [sp, #12]
 8002a60:	9102      	str	r1, [sp, #8]
 8002a62:	9201      	str	r2, [sp, #4]
 8002a64:	9300      	str	r3, [sp, #0]
 8002a66:	4633      	mov	r3, r6
 8002a68:	4a0a      	ldr	r2, [pc, #40]	@ (8002a94 <nrf24_diag_once+0xa0>)
 8002a6a:	2180      	movs	r1, #128	@ 0x80
 8002a6c:	4628      	mov	r0, r5
 8002a6e:	f012 f859 	bl	8014b24 <sniprintf>
        "[NRF] ST=%02X CFG=%02X RF=%02X CH=%u FIFO=%02X OBS=%02X\r\n",
        status,cfg,rf,ch,fifo,obs);
    HAL_UART_Transmit(&huart2,(uint8_t*)b,strlen(b),HAL_MAX_DELAY);
 8002a72:	463b      	mov	r3, r7
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7fd fc9b 	bl	80003b0 <strlen>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	4639      	mov	r1, r7
 8002a80:	f04f 33ff 	mov.w	r3, #4294967295
 8002a84:	4804      	ldr	r0, [pc, #16]	@ (8002a98 <nrf24_diag_once+0xa4>)
 8002a86:	f00e fe11 	bl	80116ac <HAL_UART_Transmit>
}
 8002a8a:	bf00      	nop
 8002a8c:	378c      	adds	r7, #140	@ 0x8c
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a92:	bf00      	nop
 8002a94:	080186bc 	.word	0x080186bc
 8002a98:	24000774 	.word	0x24000774

08002a9c <nrf24_write_readback>:

static uint8_t nrf24_write_readback(uint8_t reg, uint8_t val) {
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b096      	sub	sp, #88	@ 0x58
 8002aa0:	af02      	add	r7, sp, #8
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	460a      	mov	r2, r1
 8002aa6:	71fb      	strb	r3, [r7, #7]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	71bb      	strb	r3, [r7, #6]
    nrf24_WriteReg(reg, val);
 8002aac:	79ba      	ldrb	r2, [r7, #6]
 8002aae:	79fb      	ldrb	r3, [r7, #7]
 8002ab0:	4611      	mov	r1, r2
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 f9d4 	bl	8002e60 <nrf24_WriteReg>
    uint8_t rd = nrf24_ReadReg(reg);
 8002ab8:	79fb      	ldrb	r3, [r7, #7]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f000 fa20 	bl	8002f00 <nrf24_ReadReg>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    char b[64];
    snprintf(b,sizeof(b),"[NRF] WR/RD reg %02X -> %02X/%02X\r\n", reg, val, rd);
 8002ac6:	79f9      	ldrb	r1, [r7, #7]
 8002ac8:	79bb      	ldrb	r3, [r7, #6]
 8002aca:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8002ace:	f107 000c 	add.w	r0, r7, #12
 8002ad2:	9201      	str	r2, [sp, #4]
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	4a0b      	ldr	r2, [pc, #44]	@ (8002b08 <nrf24_write_readback+0x6c>)
 8002ada:	2140      	movs	r1, #64	@ 0x40
 8002adc:	f012 f822 	bl	8014b24 <sniprintf>
    HAL_UART_Transmit(&huart2,(uint8_t*)b,strlen(b),HAL_MAX_DELAY);
 8002ae0:	f107 030c 	add.w	r3, r7, #12
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7fd fc63 	bl	80003b0 <strlen>
 8002aea:	4603      	mov	r3, r0
 8002aec:	b29a      	uxth	r2, r3
 8002aee:	f107 010c 	add.w	r1, r7, #12
 8002af2:	f04f 33ff 	mov.w	r3, #4294967295
 8002af6:	4805      	ldr	r0, [pc, #20]	@ (8002b0c <nrf24_write_readback+0x70>)
 8002af8:	f00e fdd8 	bl	80116ac <HAL_UART_Transmit>
    return rd;
 8002afc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3750      	adds	r7, #80	@ 0x50
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	080186f8 	.word	0x080186f8
 8002b0c:	24000774 	.word	0x24000774

08002b10 <print_early>:
    snprintf(b,sizeof(b),"[NRF] TX test: %s  STATUS=%02X FIFO=%02X\r\n",
             ok ? "OK" : "FAIL", st, fi);
    HAL_UART_Transmit(&huart2,(uint8_t*)b,strlen(b),HAL_MAX_DELAY);
}

static void print_early(const char *s) {
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
    // Safe, blocking TX on USART2 if already init'd; otherwise no-op
    if (huart2.Instance) {
 8002b18:	4b08      	ldr	r3, [pc, #32]	@ (8002b3c <print_early+0x2c>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d009      	beq.n	8002b34 <print_early+0x24>
        HAL_UART_Transmit(&huart2, (uint8_t*)s, strlen(s), 100);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f7fd fc45 	bl	80003b0 <strlen>
 8002b26:	4603      	mov	r3, r0
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	2364      	movs	r3, #100	@ 0x64
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	4803      	ldr	r0, [pc, #12]	@ (8002b3c <print_early+0x2c>)
 8002b30:	f00e fdbc 	bl	80116ac <HAL_UART_Transmit>
    }
}
 8002b34:	bf00      	nop
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	24000774 	.word	0x24000774

08002b40 <dump_reset_cause>:

static void dump_reset_cause(void) {
 8002b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b42:	b0a1      	sub	sp, #132	@ 0x84
 8002b44:	af06      	add	r7, sp, #24
    uint32_t csr = __HAL_RCC_GET_FLAG(RCC_FLAG_PINRST)   ? 1u<<0 : 0;
 8002b46:	4b4a      	ldr	r3, [pc, #296]	@ (8002c70 <dump_reset_cause+0x130>)
 8002b48:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8002b4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <dump_reset_cause+0x18>
 8002b54:	2301      	movs	r3, #1
 8002b56:	e000      	b.n	8002b5a <dump_reset_cause+0x1a>
 8002b58:	2300      	movs	r3, #0
 8002b5a:	667b      	str	r3, [r7, #100]	@ 0x64
    csr |= __HAL_RCC_GET_FLAG(RCC_FLAG_BORRST)  ? 1u<<1 : 0;
 8002b5c:	4b44      	ldr	r3, [pc, #272]	@ (8002c70 <dump_reset_cause+0x130>)
 8002b5e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8002b62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <dump_reset_cause+0x2e>
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	e000      	b.n	8002b70 <dump_reset_cause+0x30>
 8002b6e:	2300      	movs	r3, #0
 8002b70:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002b72:	4313      	orrs	r3, r2
 8002b74:	667b      	str	r3, [r7, #100]	@ 0x64
    csr |= __HAL_RCC_GET_FLAG(RCC_FLAG_PORRST)  ? 1u<<2 : 0;
 8002b76:	4b3e      	ldr	r3, [pc, #248]	@ (8002c70 <dump_reset_cause+0x130>)
 8002b78:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8002b7c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <dump_reset_cause+0x48>
 8002b84:	2304      	movs	r3, #4
 8002b86:	e000      	b.n	8002b8a <dump_reset_cause+0x4a>
 8002b88:	2300      	movs	r3, #0
 8002b8a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	667b      	str	r3, [r7, #100]	@ 0x64
    csr |= __HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST)  ? 1u<<3 : 0;
 8002b90:	4b37      	ldr	r3, [pc, #220]	@ (8002c70 <dump_reset_cause+0x130>)
 8002b92:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8002b96:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <dump_reset_cause+0x62>
 8002b9e:	2308      	movs	r3, #8
 8002ba0:	e000      	b.n	8002ba4 <dump_reset_cause+0x64>
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	667b      	str	r3, [r7, #100]	@ 0x64

    char msg[96];
    snprintf(msg, sizeof msg, "[RST] flags: PIN=%d BOR=%d POR=%d SFT=%d IWDG=%d WWDG=%d LPWR=%d\r\n",
        !!(csr&(1u<<0)), !!(csr&(1u<<1)), !!(csr&(1u<<2)),
 8002baa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002bac:	f003 0301 	and.w	r3, r3, #1
    snprintf(msg, sizeof msg, "[RST] flags: PIN=%d BOR=%d POR=%d SFT=%d IWDG=%d WWDG=%d LPWR=%d\r\n",
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	bf14      	ite	ne
 8002bb4:	2301      	movne	r3, #1
 8002bb6:	2300      	moveq	r3, #0
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	469c      	mov	ip, r3
        !!(csr&(1u<<0)), !!(csr&(1u<<1)), !!(csr&(1u<<2)),
 8002bbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002bbe:	f003 0302 	and.w	r3, r3, #2
    snprintf(msg, sizeof msg, "[RST] flags: PIN=%d BOR=%d POR=%d SFT=%d IWDG=%d WWDG=%d LPWR=%d\r\n",
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	bf14      	ite	ne
 8002bc6:	2301      	movne	r3, #1
 8002bc8:	2300      	moveq	r3, #0
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	461a      	mov	r2, r3
        !!(csr&(1u<<0)), !!(csr&(1u<<1)), !!(csr&(1u<<2)),
 8002bce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002bd0:	f003 0304 	and.w	r3, r3, #4
    snprintf(msg, sizeof msg, "[RST] flags: PIN=%d BOR=%d POR=%d SFT=%d IWDG=%d WWDG=%d LPWR=%d\r\n",
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	bf14      	ite	ne
 8002bd8:	2301      	movne	r3, #1
 8002bda:	2300      	moveq	r3, #0
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	4619      	mov	r1, r3
        !!(csr&(1u<<3)), !!(csr&(1u<<4)), !!(csr&(1u<<5)), !!(csr&(1u<<6)));
 8002be0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002be2:	f003 0308 	and.w	r3, r3, #8
    snprintf(msg, sizeof msg, "[RST] flags: PIN=%d BOR=%d POR=%d SFT=%d IWDG=%d WWDG=%d LPWR=%d\r\n",
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	bf14      	ite	ne
 8002bea:	2301      	movne	r3, #1
 8002bec:	2300      	moveq	r3, #0
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	461c      	mov	r4, r3
        !!(csr&(1u<<3)), !!(csr&(1u<<4)), !!(csr&(1u<<5)), !!(csr&(1u<<6)));
 8002bf2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002bf4:	f003 0310 	and.w	r3, r3, #16
    snprintf(msg, sizeof msg, "[RST] flags: PIN=%d BOR=%d POR=%d SFT=%d IWDG=%d WWDG=%d LPWR=%d\r\n",
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	bf14      	ite	ne
 8002bfc:	2301      	movne	r3, #1
 8002bfe:	2300      	moveq	r3, #0
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	461d      	mov	r5, r3
        !!(csr&(1u<<3)), !!(csr&(1u<<4)), !!(csr&(1u<<5)), !!(csr&(1u<<6)));
 8002c04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c06:	f003 0320 	and.w	r3, r3, #32
    snprintf(msg, sizeof msg, "[RST] flags: PIN=%d BOR=%d POR=%d SFT=%d IWDG=%d WWDG=%d LPWR=%d\r\n",
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	bf14      	ite	ne
 8002c0e:	2301      	movne	r3, #1
 8002c10:	2300      	moveq	r3, #0
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	461e      	mov	r6, r3
        !!(csr&(1u<<3)), !!(csr&(1u<<4)), !!(csr&(1u<<5)), !!(csr&(1u<<6)));
 8002c16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    snprintf(msg, sizeof msg, "[RST] flags: PIN=%d BOR=%d POR=%d SFT=%d IWDG=%d WWDG=%d LPWR=%d\r\n",
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	bf14      	ite	ne
 8002c20:	2301      	movne	r3, #1
 8002c22:	2300      	moveq	r3, #0
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	1d38      	adds	r0, r7, #4
 8002c28:	9305      	str	r3, [sp, #20]
 8002c2a:	9604      	str	r6, [sp, #16]
 8002c2c:	9503      	str	r5, [sp, #12]
 8002c2e:	9402      	str	r4, [sp, #8]
 8002c30:	9101      	str	r1, [sp, #4]
 8002c32:	9200      	str	r2, [sp, #0]
 8002c34:	4663      	mov	r3, ip
 8002c36:	4a0f      	ldr	r2, [pc, #60]	@ (8002c74 <dump_reset_cause+0x134>)
 8002c38:	2160      	movs	r1, #96	@ 0x60
 8002c3a:	f011 ff73 	bl	8014b24 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002c3e:	1d3b      	adds	r3, r7, #4
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7fd fbb5 	bl	80003b0 <strlen>
 8002c46:	4603      	mov	r3, r0
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	1d39      	adds	r1, r7, #4
 8002c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c50:	4809      	ldr	r0, [pc, #36]	@ (8002c78 <dump_reset_cause+0x138>)
 8002c52:	f00e fd2b 	bl	80116ac <HAL_UART_Transmit>

    __HAL_RCC_CLEAR_RESET_FLAGS();
 8002c56:	4b06      	ldr	r3, [pc, #24]	@ (8002c70 <dump_reset_cause+0x130>)
 8002c58:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8002c5c:	4a04      	ldr	r2, [pc, #16]	@ (8002c70 <dump_reset_cause+0x130>)
 8002c5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c62:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
}
 8002c66:	bf00      	nop
 8002c68:	376c      	adds	r7, #108	@ 0x6c
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	58024400 	.word	0x58024400
 8002c74:	08018754 	.word	0x08018754
 8002c78:	24000774 	.word	0x24000774

08002c7c <heartbeat_pin_init>:

static void heartbeat_pin_init(void) {
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c82:	4b14      	ldr	r3, [pc, #80]	@ (8002cd4 <heartbeat_pin_init+0x58>)
 8002c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c88:	4a12      	ldr	r2, [pc, #72]	@ (8002cd4 <heartbeat_pin_init+0x58>)
 8002c8a:	f043 0304 	orr.w	r3, r3, #4
 8002c8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002c92:	4b10      	ldr	r3, [pc, #64]	@ (8002cd4 <heartbeat_pin_init+0x58>)
 8002c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	603b      	str	r3, [r7, #0]
 8002c9e:	683b      	ldr	r3, [r7, #0]
    GPIO_InitTypeDef g = {0};
 8002ca0:	1d3b      	adds	r3, r7, #4
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	605a      	str	r2, [r3, #4]
 8002ca8:	609a      	str	r2, [r3, #8]
 8002caa:	60da      	str	r2, [r3, #12]
 8002cac:	611a      	str	r2, [r3, #16]
    g.Pin = GPIO_PIN_13;               // pick a free LED/pin you can probe
 8002cae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002cb2:	607b      	str	r3, [r7, #4]
    g.Mode = GPIO_MODE_OUTPUT_PP;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	60bb      	str	r3, [r7, #8]
    g.Pull = GPIO_NOPULL;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	60fb      	str	r3, [r7, #12]
    g.Speed = GPIO_SPEED_FREQ_LOW;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOC, &g);
 8002cc0:	1d3b      	adds	r3, r7, #4
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	4804      	ldr	r0, [pc, #16]	@ (8002cd8 <heartbeat_pin_init+0x5c>)
 8002cc6:	f006 ff51 	bl	8009b6c <HAL_GPIO_Init>
}
 8002cca:	bf00      	nop
 8002ccc:	3718      	adds	r7, #24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	58024400 	.word	0x58024400
 8002cd8:	58020800 	.word	0x58020800

08002cdc <nrf24_flush_tx>:
    }
}

// Local FLUSH_TX (no dependency on external driver symbol)
static void nrf24_flush_tx(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
    CSN_LOW();
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	2108      	movs	r1, #8
 8002ce6:	480a      	ldr	r0, [pc, #40]	@ (8002d10 <nrf24_flush_tx+0x34>)
 8002ce8:	f007 f900 	bl	8009eec <HAL_GPIO_WritePin>
    uint8_t cmd = 0xE1; // FLUSH_TX
 8002cec:	23e1      	movs	r3, #225	@ 0xe1
 8002cee:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi1, &cmd, 1, 100);
 8002cf0:	1df9      	adds	r1, r7, #7
 8002cf2:	2364      	movs	r3, #100	@ 0x64
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	4807      	ldr	r0, [pc, #28]	@ (8002d14 <nrf24_flush_tx+0x38>)
 8002cf8:	f00c fa20 	bl	800f13c <HAL_SPI_Transmit>
    CSN_HIGH();
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	2108      	movs	r1, #8
 8002d00:	4803      	ldr	r0, [pc, #12]	@ (8002d10 <nrf24_flush_tx+0x34>)
 8002d02:	f007 f8f3 	bl	8009eec <HAL_GPIO_WritePin>
}
 8002d06:	bf00      	nop
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	58021800 	.word	0x58021800
 8002d14:	240005c0 	.word	0x240005c0

08002d18 <nrf24_tx32>:


// Write a 32B payload and transmit, waiting for TX_DS or MAX_RT
static uint8_t nrf24_tx32(const void *buf32)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
    // Clear IRQs: RX_DR | TX_DS | MAX_RT
    nrf24_WriteReg(STATUS, (1u<<6)|(1u<<5)|(1u<<4));
 8002d20:	2170      	movs	r1, #112	@ 0x70
 8002d22:	2007      	movs	r0, #7
 8002d24:	f000 f89c 	bl	8002e60 <nrf24_WriteReg>

    // Load payload
    CSN_LOW();
 8002d28:	2200      	movs	r2, #0
 8002d2a:	2108      	movs	r1, #8
 8002d2c:	4829      	ldr	r0, [pc, #164]	@ (8002dd4 <nrf24_tx32+0xbc>)
 8002d2e:	f007 f8dd 	bl	8009eec <HAL_GPIO_WritePin>
    uint8_t cmd = 0xA0; // W_TX_PAYLOAD
 8002d32:	23a0      	movs	r3, #160	@ 0xa0
 8002d34:	72bb      	strb	r3, [r7, #10]
    HAL_SPI_Transmit(&hspi1, &cmd, 1, 100);
 8002d36:	f107 010a 	add.w	r1, r7, #10
 8002d3a:	2364      	movs	r3, #100	@ 0x64
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	4826      	ldr	r0, [pc, #152]	@ (8002dd8 <nrf24_tx32+0xc0>)
 8002d40:	f00c f9fc 	bl	800f13c <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)buf32, 32, 100);
 8002d44:	2364      	movs	r3, #100	@ 0x64
 8002d46:	2220      	movs	r2, #32
 8002d48:	6879      	ldr	r1, [r7, #4]
 8002d4a:	4823      	ldr	r0, [pc, #140]	@ (8002dd8 <nrf24_tx32+0xc0>)
 8002d4c:	f00c f9f6 	bl	800f13c <HAL_SPI_Transmit>
    CSN_HIGH();
 8002d50:	2201      	movs	r2, #1
 8002d52:	2108      	movs	r1, #8
 8002d54:	481f      	ldr	r0, [pc, #124]	@ (8002dd4 <nrf24_tx32+0xbc>)
 8002d56:	f007 f8c9 	bl	8009eec <HAL_GPIO_WritePin>

    // Pulse CE to start the transmit. Spec says >10 µs; 1 ms is fine here.
    HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	2140      	movs	r1, #64	@ 0x40
 8002d5e:	481f      	ldr	r0, [pc, #124]	@ (8002ddc <nrf24_tx32+0xc4>)
 8002d60:	f007 f8c4 	bl	8009eec <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8002d64:	2001      	movs	r0, #1
 8002d66:	f001 fa49 	bl	80041fc <HAL_Delay>
    HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	2140      	movs	r1, #64	@ 0x40
 8002d6e:	481b      	ldr	r0, [pc, #108]	@ (8002ddc <nrf24_tx32+0xc4>)
 8002d70:	f007 f8bc 	bl	8009eec <HAL_GPIO_WritePin>

    // Wait up to ~5 ms for completion
    uint32_t t0 = HAL_GetTick();
 8002d74:	f001 fa36 	bl	80041e4 <HAL_GetTick>
 8002d78:	60f8      	str	r0, [r7, #12]
    while ((HAL_GetTick() - t0) < 5) {
 8002d7a:	e01c      	b.n	8002db6 <nrf24_tx32+0x9e>
        uint8_t st = nrf24_ReadReg(STATUS);
 8002d7c:	2007      	movs	r0, #7
 8002d7e:	f000 f8bf 	bl	8002f00 <nrf24_ReadReg>
 8002d82:	4603      	mov	r3, r0
 8002d84:	72fb      	strb	r3, [r7, #11]

        if (st & (1u<<5)) {                 // TX_DS set
 8002d86:	7afb      	ldrb	r3, [r7, #11]
 8002d88:	f003 0320 	and.w	r3, r3, #32
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d005      	beq.n	8002d9c <nrf24_tx32+0x84>
            nrf24_WriteReg(STATUS, (1u<<5));
 8002d90:	2120      	movs	r1, #32
 8002d92:	2007      	movs	r0, #7
 8002d94:	f000 f864 	bl	8002e60 <nrf24_WriteReg>
            return 1;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e016      	b.n	8002dca <nrf24_tx32+0xb2>
        }
        if (st & (1u<<4)) {                 // MAX_RT set
 8002d9c:	7afb      	ldrb	r3, [r7, #11]
 8002d9e:	f003 0310 	and.w	r3, r3, #16
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d007      	beq.n	8002db6 <nrf24_tx32+0x9e>
            nrf24_WriteReg(STATUS, (1u<<4));
 8002da6:	2110      	movs	r1, #16
 8002da8:	2007      	movs	r0, #7
 8002daa:	f000 f859 	bl	8002e60 <nrf24_WriteReg>
            nrf24_flush_tx();               // use our local flush
 8002dae:	f7ff ff95 	bl	8002cdc <nrf24_flush_tx>
            return 0;
 8002db2:	2300      	movs	r3, #0
 8002db4:	e009      	b.n	8002dca <nrf24_tx32+0xb2>
    while ((HAL_GetTick() - t0) < 5) {
 8002db6:	f001 fa15 	bl	80041e4 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b04      	cmp	r3, #4
 8002dc2:	d9db      	bls.n	8002d7c <nrf24_tx32+0x64>
        }
    }

    // Timeout — clean up
    nrf24_flush_tx();
 8002dc4:	f7ff ff8a 	bl	8002cdc <nrf24_flush_tx>
    return 0;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	58021800 	.word	0x58021800
 8002dd8:	240005c0 	.word	0x240005c0
 8002ddc:	58020800 	.word	0x58020800

08002de0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002de4:	b672      	cpsid	i
}
 8002de6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002de8:	bf00      	nop
 8002dea:	e7fd      	b.n	8002de8 <Error_Handler+0x8>

08002dec <CS_Select>:
#define NRF24_CE_PIN     GPIO_PIN_6
#define NRF24_CSN_PORT   GPIOG
#define NRF24_CSN_PIN    GPIO_PIN_3

/* ==== Local helpers ====================================================== */
static inline void CS_Select(void)   { HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET); }
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	2200      	movs	r2, #0
 8002df2:	2108      	movs	r1, #8
 8002df4:	4802      	ldr	r0, [pc, #8]	@ (8002e00 <CS_Select+0x14>)
 8002df6:	f007 f879 	bl	8009eec <HAL_GPIO_WritePin>
 8002dfa:	bf00      	nop
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	58021800 	.word	0x58021800

08002e04 <CS_UnSelect>:
static inline void CS_UnSelect(void) { HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);   }
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	2201      	movs	r2, #1
 8002e0a:	2108      	movs	r1, #8
 8002e0c:	4802      	ldr	r0, [pc, #8]	@ (8002e18 <CS_UnSelect+0x14>)
 8002e0e:	f007 f86d 	bl	8009eec <HAL_GPIO_WritePin>
 8002e12:	bf00      	nop
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	58021800 	.word	0x58021800

08002e1c <CE_Disable>:
static inline void CE_Enable(void)   { HAL_GPIO_WritePin(NRF24_CE_PORT,  NRF24_CE_PIN,  GPIO_PIN_SET);   }
static inline void CE_Disable(void)  { HAL_GPIO_WritePin(NRF24_CE_PORT,  NRF24_CE_PIN,  GPIO_PIN_RESET); }
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	2200      	movs	r2, #0
 8002e22:	2140      	movs	r1, #64	@ 0x40
 8002e24:	4802      	ldr	r0, [pc, #8]	@ (8002e30 <CE_Disable+0x14>)
 8002e26:	f007 f861 	bl	8009eec <HAL_GPIO_WritePin>
 8002e2a:	bf00      	nop
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	58020800 	.word	0x58020800

08002e34 <uputs>:

static void uputs(const char *s){ HAL_UART_Transmit(NRF24_UART, (uint8_t*)s, strlen(s), HAL_MAX_DELAY); }
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f7fd fab7 	bl	80003b0 <strlen>
 8002e42:	4603      	mov	r3, r0
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	f04f 33ff 	mov.w	r3, #4294967295
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	4803      	ldr	r0, [pc, #12]	@ (8002e5c <uputs+0x28>)
 8002e4e:	f00e fc2d 	bl	80116ac <HAL_UART_Transmit>
 8002e52:	bf00      	nop
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	24000774 	.word	0x24000774

08002e60 <nrf24_WriteReg>:
#define T_SHORT   100U
#define T_LONG   1000U

/* ==== Low-level SPI access ============================================== */
void nrf24_WriteReg(uint8_t reg, uint8_t val)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	4603      	mov	r3, r0
 8002e68:	460a      	mov	r2, r1
 8002e6a:	71fb      	strb	r3, [r7, #7]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];
    buf[0] = (uint8_t)(W_REGISTER | (reg & REGISTER_MASK));
 8002e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e74:	f003 031f 	and.w	r3, r3, #31
 8002e78:	b25b      	sxtb	r3, r3
 8002e7a:	f043 0320 	orr.w	r3, r3, #32
 8002e7e:	b25b      	sxtb	r3, r3
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	733b      	strb	r3, [r7, #12]
    buf[1] = val;
 8002e84:	79bb      	ldrb	r3, [r7, #6]
 8002e86:	737b      	strb	r3, [r7, #13]
    CS_Select();
 8002e88:	f7ff ffb0 	bl	8002dec <CS_Select>
    HAL_SPI_Transmit(NRF24_SPI, buf, 2, T_SHORT);
 8002e8c:	f107 010c 	add.w	r1, r7, #12
 8002e90:	2364      	movs	r3, #100	@ 0x64
 8002e92:	2202      	movs	r2, #2
 8002e94:	4804      	ldr	r0, [pc, #16]	@ (8002ea8 <nrf24_WriteReg+0x48>)
 8002e96:	f00c f951 	bl	800f13c <HAL_SPI_Transmit>
    CS_UnSelect();
 8002e9a:	f7ff ffb3 	bl	8002e04 <CS_UnSelect>
}
 8002e9e:	bf00      	nop
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	240005c0 	.word	0x240005c0

08002eac <nrf24_WriteRegMulti>:
void nrf24_WriteRegMulti(uint8_t reg, const uint8_t *data, int size)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
 8002eb8:	73fb      	strb	r3, [r7, #15]
    uint8_t cmd = (uint8_t)(W_REGISTER | (reg & REGISTER_MASK));
 8002eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ebe:	f003 031f 	and.w	r3, r3, #31
 8002ec2:	b25b      	sxtb	r3, r3
 8002ec4:	f043 0320 	orr.w	r3, r3, #32
 8002ec8:	b25b      	sxtb	r3, r3
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	75fb      	strb	r3, [r7, #23]
    CS_Select();
 8002ece:	f7ff ff8d 	bl	8002dec <CS_Select>
    HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, T_SHORT);
 8002ed2:	f107 0117 	add.w	r1, r7, #23
 8002ed6:	2364      	movs	r3, #100	@ 0x64
 8002ed8:	2201      	movs	r2, #1
 8002eda:	4808      	ldr	r0, [pc, #32]	@ (8002efc <nrf24_WriteRegMulti+0x50>)
 8002edc:	f00c f92e 	bl	800f13c <HAL_SPI_Transmit>
    HAL_SPI_Transmit(NRF24_SPI, (uint8_t*)data, size, T_LONG);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ee8:	68b9      	ldr	r1, [r7, #8]
 8002eea:	4804      	ldr	r0, [pc, #16]	@ (8002efc <nrf24_WriteRegMulti+0x50>)
 8002eec:	f00c f926 	bl	800f13c <HAL_SPI_Transmit>
    CS_UnSelect();
 8002ef0:	f7ff ff88 	bl	8002e04 <CS_UnSelect>
}
 8002ef4:	bf00      	nop
 8002ef6:	3718      	adds	r7, #24
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	240005c0 	.word	0x240005c0

08002f00 <nrf24_ReadReg>:

 uint8_t nrf24_ReadReg(uint8_t reg)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	4603      	mov	r3, r0
 8002f08:	71fb      	strb	r3, [r7, #7]
    uint8_t cmd = (uint8_t)(R_REGISTER | (reg & REGISTER_MASK));
 8002f0a:	79fb      	ldrb	r3, [r7, #7]
 8002f0c:	f003 031f 	and.w	r3, r3, #31
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	73fb      	strb	r3, [r7, #15]
    uint8_t val = 0;
 8002f14:	2300      	movs	r3, #0
 8002f16:	73bb      	strb	r3, [r7, #14]
    CS_Select();
 8002f18:	f7ff ff68 	bl	8002dec <CS_Select>
    HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, T_SHORT);
 8002f1c:	f107 010f 	add.w	r1, r7, #15
 8002f20:	2364      	movs	r3, #100	@ 0x64
 8002f22:	2201      	movs	r2, #1
 8002f24:	4808      	ldr	r0, [pc, #32]	@ (8002f48 <nrf24_ReadReg+0x48>)
 8002f26:	f00c f909 	bl	800f13c <HAL_SPI_Transmit>
    HAL_SPI_Receive (NRF24_SPI, &val, 1, T_SHORT);
 8002f2a:	f107 010e 	add.w	r1, r7, #14
 8002f2e:	2364      	movs	r3, #100	@ 0x64
 8002f30:	2201      	movs	r2, #1
 8002f32:	4805      	ldr	r0, [pc, #20]	@ (8002f48 <nrf24_ReadReg+0x48>)
 8002f34:	f00c faf0 	bl	800f518 <HAL_SPI_Receive>
    CS_UnSelect();
 8002f38:	f7ff ff64 	bl	8002e04 <CS_UnSelect>
    return val;
 8002f3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	240005c0 	.word	0x240005c0

08002f4c <nrf24_ReadRegMulti>:

static void nrf24_ReadRegMulti(uint8_t reg, uint8_t *data, int size)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	4603      	mov	r3, r0
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
 8002f58:	73fb      	strb	r3, [r7, #15]
    uint8_t cmd = (uint8_t)(R_REGISTER | (reg & REGISTER_MASK));
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
 8002f5c:	f003 031f 	and.w	r3, r3, #31
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	75fb      	strb	r3, [r7, #23]
    CS_Select();
 8002f64:	f7ff ff42 	bl	8002dec <CS_Select>
    HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, T_SHORT);
 8002f68:	f107 0117 	add.w	r1, r7, #23
 8002f6c:	2364      	movs	r3, #100	@ 0x64
 8002f6e:	2201      	movs	r2, #1
 8002f70:	4808      	ldr	r0, [pc, #32]	@ (8002f94 <nrf24_ReadRegMulti+0x48>)
 8002f72:	f00c f8e3 	bl	800f13c <HAL_SPI_Transmit>
    HAL_SPI_Receive (NRF24_SPI, data, size, T_LONG);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f7e:	68b9      	ldr	r1, [r7, #8]
 8002f80:	4804      	ldr	r0, [pc, #16]	@ (8002f94 <nrf24_ReadRegMulti+0x48>)
 8002f82:	f00c fac9 	bl	800f518 <HAL_SPI_Receive>
    CS_UnSelect();
 8002f86:	f7ff ff3d 	bl	8002e04 <CS_UnSelect>
}
 8002f8a:	bf00      	nop
 8002f8c:	3718      	adds	r7, #24
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	240005c0 	.word	0x240005c0

08002f98 <nrf24_reset>:
    CS_UnSelect();
}

/* ==== Soft reset (subset) =============================================== */
static void nrf24_reset(uint8_t reg)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	71fb      	strb	r3, [r7, #7]
    if (reg == STATUS) {
 8002fa2:	79fb      	ldrb	r3, [r7, #7]
 8002fa4:	2b07      	cmp	r3, #7
 8002fa6:	d104      	bne.n	8002fb2 <nrf24_reset+0x1a>
        /* clear IRQs (RX_DR | TX_DS | MAX_RT) */
        nrf24_WriteReg(STATUS, 0x70);
 8002fa8:	2170      	movs	r1, #112	@ 0x70
 8002faa:	2007      	movs	r0, #7
 8002fac:	f7ff ff58 	bl	8002e60 <nrf24_WriteReg>
        nrf24_WriteReg(RX_PW_P2, 0);
        nrf24_WriteReg(RX_PW_P3, 0);
        nrf24_WriteReg(RX_PW_P4, 0);
        nrf24_WriteReg(RX_PW_P5, 0);
    }
}
 8002fb0:	e080      	b.n	80030b4 <nrf24_reset+0x11c>
    else if (reg == FIFO_STATUS) {
 8002fb2:	79fb      	ldrb	r3, [r7, #7]
 8002fb4:	2b17      	cmp	r3, #23
 8002fb6:	d104      	bne.n	8002fc2 <nrf24_reset+0x2a>
        nrf24_WriteReg(FIFO_STATUS, 0x11);
 8002fb8:	2111      	movs	r1, #17
 8002fba:	2017      	movs	r0, #23
 8002fbc:	f7ff ff50 	bl	8002e60 <nrf24_WriteReg>
}
 8002fc0:	e078      	b.n	80030b4 <nrf24_reset+0x11c>
        nrf24_WriteReg(CONFIG,      0x08);  /* CRC off, PWR_DOWN */
 8002fc2:	2108      	movs	r1, #8
 8002fc4:	2000      	movs	r0, #0
 8002fc6:	f7ff ff4b 	bl	8002e60 <nrf24_WriteReg>
        nrf24_WriteReg(EN_AA,       0x00);  /* no Auto-ACK */
 8002fca:	2100      	movs	r1, #0
 8002fcc:	2001      	movs	r0, #1
 8002fce:	f7ff ff47 	bl	8002e60 <nrf24_WriteReg>
        nrf24_WriteReg(EN_RXADDR,   0x03);  /* P0,P1 enabled */
 8002fd2:	2103      	movs	r1, #3
 8002fd4:	2002      	movs	r0, #2
 8002fd6:	f7ff ff43 	bl	8002e60 <nrf24_WriteReg>
        nrf24_WriteReg(SETUP_AW,    0x03);  /* 5-byte addr */
 8002fda:	2103      	movs	r1, #3
 8002fdc:	2003      	movs	r0, #3
 8002fde:	f7ff ff3f 	bl	8002e60 <nrf24_WriteReg>
        nrf24_WriteReg(SETUP_RETR,  0x00);  /* no retries */
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	2004      	movs	r0, #4
 8002fe6:	f7ff ff3b 	bl	8002e60 <nrf24_WriteReg>
        nrf24_WriteReg(RF_CH,       76);    /* ch=76 */
 8002fea:	214c      	movs	r1, #76	@ 0x4c
 8002fec:	2005      	movs	r0, #5
 8002fee:	f7ff ff37 	bl	8002e60 <nrf24_WriteReg>
        nrf24_WriteReg(RF_SETUP,    0x06);  /* 1 Mbps, 0 dBm */
 8002ff2:	2106      	movs	r1, #6
 8002ff4:	2006      	movs	r0, #6
 8002ff6:	f7ff ff33 	bl	8002e60 <nrf24_WriteReg>
        nrf24_WriteReg(FEATURE,     0x00);  /* no dyn payloads */
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	201d      	movs	r0, #29
 8002ffe:	f7ff ff2f 	bl	8002e60 <nrf24_WriteReg>
        nrf24_WriteReg(DYNPD,       0x00);
 8003002:	2100      	movs	r1, #0
 8003004:	201c      	movs	r0, #28
 8003006:	f7ff ff2b 	bl	8002e60 <nrf24_WriteReg>
        nrf24_WriteReg(FIFO_STATUS, 0x11);
 800300a:	2111      	movs	r1, #17
 800300c:	2017      	movs	r0, #23
 800300e:	f7ff ff27 	bl	8002e60 <nrf24_WriteReg>
        nrf24_WriteReg(STATUS,      0x70);  /* clear IRQs */
 8003012:	2170      	movs	r1, #112	@ 0x70
 8003014:	2007      	movs	r0, #7
 8003016:	f7ff ff23 	bl	8002e60 <nrf24_WriteReg>
        uint8_t def0[5] = {0xE7,0xE7,0xE7,0xE7,0xE7};
 800301a:	4a28      	ldr	r2, [pc, #160]	@ (80030bc <nrf24_reset+0x124>)
 800301c:	f107 0310 	add.w	r3, r7, #16
 8003020:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003024:	6018      	str	r0, [r3, #0]
 8003026:	3304      	adds	r3, #4
 8003028:	7019      	strb	r1, [r3, #0]
        uint8_t def1[5] = {0xC2,0xC2,0xC2,0xC2,0xC2};
 800302a:	4a25      	ldr	r2, [pc, #148]	@ (80030c0 <nrf24_reset+0x128>)
 800302c:	f107 0308 	add.w	r3, r7, #8
 8003030:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003034:	6018      	str	r0, [r3, #0]
 8003036:	3304      	adds	r3, #4
 8003038:	7019      	strb	r1, [r3, #0]
        nrf24_WriteRegMulti(RX_ADDR_P0, def0, 5);
 800303a:	f107 0310 	add.w	r3, r7, #16
 800303e:	2205      	movs	r2, #5
 8003040:	4619      	mov	r1, r3
 8003042:	200a      	movs	r0, #10
 8003044:	f7ff ff32 	bl	8002eac <nrf24_WriteRegMulti>
        nrf24_WriteRegMulti(RX_ADDR_P1, def1, 5);
 8003048:	f107 0308 	add.w	r3, r7, #8
 800304c:	2205      	movs	r2, #5
 800304e:	4619      	mov	r1, r3
 8003050:	200b      	movs	r0, #11
 8003052:	f7ff ff2b 	bl	8002eac <nrf24_WriteRegMulti>
        nrf24_WriteReg    (RX_ADDR_P2, 0xC3);
 8003056:	21c3      	movs	r1, #195	@ 0xc3
 8003058:	200c      	movs	r0, #12
 800305a:	f7ff ff01 	bl	8002e60 <nrf24_WriteReg>
        nrf24_WriteReg    (RX_ADDR_P3, 0xC4);
 800305e:	21c4      	movs	r1, #196	@ 0xc4
 8003060:	200d      	movs	r0, #13
 8003062:	f7ff fefd 	bl	8002e60 <nrf24_WriteReg>
        nrf24_WriteReg    (RX_ADDR_P4, 0xC5);
 8003066:	21c5      	movs	r1, #197	@ 0xc5
 8003068:	200e      	movs	r0, #14
 800306a:	f7ff fef9 	bl	8002e60 <nrf24_WriteReg>
        nrf24_WriteReg    (RX_ADDR_P5, 0xC6);
 800306e:	21c6      	movs	r1, #198	@ 0xc6
 8003070:	200f      	movs	r0, #15
 8003072:	f7ff fef5 	bl	8002e60 <nrf24_WriteReg>
        nrf24_WriteRegMulti(TX_ADDR,    def0, 5);
 8003076:	f107 0310 	add.w	r3, r7, #16
 800307a:	2205      	movs	r2, #5
 800307c:	4619      	mov	r1, r3
 800307e:	2010      	movs	r0, #16
 8003080:	f7ff ff14 	bl	8002eac <nrf24_WriteRegMulti>
        nrf24_WriteReg(RX_PW_P0, 0);
 8003084:	2100      	movs	r1, #0
 8003086:	2011      	movs	r0, #17
 8003088:	f7ff feea 	bl	8002e60 <nrf24_WriteReg>
        nrf24_WriteReg(RX_PW_P1, 0);
 800308c:	2100      	movs	r1, #0
 800308e:	2012      	movs	r0, #18
 8003090:	f7ff fee6 	bl	8002e60 <nrf24_WriteReg>
        nrf24_WriteReg(RX_PW_P2, 0);
 8003094:	2100      	movs	r1, #0
 8003096:	2013      	movs	r0, #19
 8003098:	f7ff fee2 	bl	8002e60 <nrf24_WriteReg>
        nrf24_WriteReg(RX_PW_P3, 0);
 800309c:	2100      	movs	r1, #0
 800309e:	2014      	movs	r0, #20
 80030a0:	f7ff fede 	bl	8002e60 <nrf24_WriteReg>
        nrf24_WriteReg(RX_PW_P4, 0);
 80030a4:	2100      	movs	r1, #0
 80030a6:	2015      	movs	r0, #21
 80030a8:	f7ff feda 	bl	8002e60 <nrf24_WriteReg>
        nrf24_WriteReg(RX_PW_P5, 0);
 80030ac:	2100      	movs	r1, #0
 80030ae:	2016      	movs	r0, #22
 80030b0:	f7ff fed6 	bl	8002e60 <nrf24_WriteReg>
}
 80030b4:	bf00      	nop
 80030b6:	3718      	adds	r7, #24
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	08018798 	.word	0x08018798
 80030c0:	080187a0 	.word	0x080187a0

080030c4 <NRF24_Init>:

/* ==== Public API ========================================================= */

void NRF24_Init(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
	CE_Disable();
 80030ca:	f7ff fea7 	bl	8002e1c <CE_Disable>
	CS_UnSelect();
 80030ce:	f7ff fe99 	bl	8002e04 <CS_UnSelect>
	HAL_Delay(1);
 80030d2:	2001      	movs	r0, #1
 80030d4:	f001 f892 	bl	80041fc <HAL_Delay>

	// ACTIVATE 0x73 (needed by many BK24xx/nRF24 clones)
	uint8_t act[2] = { ACTIVATE, 0x73 };
 80030d8:	f247 3350 	movw	r3, #29520	@ 0x7350
 80030dc:	80bb      	strh	r3, [r7, #4]
	CS_Select(); HAL_SPI_Transmit(NRF24_SPI, act, 2, T_SHORT); CS_UnSelect();
 80030de:	f7ff fe85 	bl	8002dec <CS_Select>
 80030e2:	1d39      	adds	r1, r7, #4
 80030e4:	2364      	movs	r3, #100	@ 0x64
 80030e6:	2202      	movs	r2, #2
 80030e8:	481b      	ldr	r0, [pc, #108]	@ (8003158 <NRF24_Init+0x94>)
 80030ea:	f00c f827 	bl	800f13c <HAL_SPI_Transmit>
 80030ee:	f7ff fe89 	bl	8002e04 <CS_UnSelect>
	HAL_Delay(1);
 80030f2:	2001      	movs	r0, #1
 80030f4:	f001 f882 	bl	80041fc <HAL_Delay>

    nrf24_reset(0);
 80030f8:	2000      	movs	r0, #0
 80030fa:	f7ff ff4d 	bl	8002f98 <nrf24_reset>

    /* fixed settings for link bring-up */
    nrf24_WriteReg(EN_AA,        0x00);  /* NO ACK */
 80030fe:	2100      	movs	r1, #0
 8003100:	2001      	movs	r0, #1
 8003102:	f7ff fead 	bl	8002e60 <nrf24_WriteReg>
    nrf24_WriteReg(SETUP_RETR,   0x00);  /* NO retries */
 8003106:	2100      	movs	r1, #0
 8003108:	2004      	movs	r0, #4
 800310a:	f7ff fea9 	bl	8002e60 <nrf24_WriteReg>
    nrf24_WriteReg(EN_RXADDR,    0x03);  /* P0,P1 */
 800310e:	2103      	movs	r1, #3
 8003110:	2002      	movs	r0, #2
 8003112:	f7ff fea5 	bl	8002e60 <nrf24_WriteReg>
    nrf24_WriteReg(SETUP_AW,     0x03);  /* 5-byte */
 8003116:	2103      	movs	r1, #3
 8003118:	2003      	movs	r0, #3
 800311a:	f7ff fea1 	bl	8002e60 <nrf24_WriteReg>
    nrf24_WriteReg(RF_CH,        76);    /* channel 76 */
 800311e:	214c      	movs	r1, #76	@ 0x4c
 8003120:	2005      	movs	r0, #5
 8003122:	f7ff fe9d 	bl	8002e60 <nrf24_WriteReg>
    nrf24_WriteReg(RF_SETUP,     0x06);  /* 1 Mbps, 0 dBm */
 8003126:	2106      	movs	r1, #6
 8003128:	2006      	movs	r0, #6
 800312a:	f7ff fe99 	bl	8002e60 <nrf24_WriteReg>
    nrf24_WriteReg(FEATURE,      0x00);
 800312e:	2100      	movs	r1, #0
 8003130:	201d      	movs	r0, #29
 8003132:	f7ff fe95 	bl	8002e60 <nrf24_WriteReg>
    nrf24_WriteReg(DYNPD,        0x00);
 8003136:	2100      	movs	r1, #0
 8003138:	201c      	movs	r0, #28
 800313a:	f7ff fe91 	bl	8002e60 <nrf24_WriteReg>
    nrf24_WriteReg(FIFO_STATUS,  0x11);
 800313e:	2111      	movs	r1, #17
 8003140:	2017      	movs	r0, #23
 8003142:	f7ff fe8d 	bl	8002e60 <nrf24_WriteReg>
    nrf24_WriteReg(STATUS,       0x70);  /* clear IRQs */
 8003146:	2170      	movs	r1, #112	@ 0x70
 8003148:	2007      	movs	r0, #7
 800314a:	f7ff fe89 	bl	8002e60 <nrf24_WriteReg>

    //CE_Enable();    /* power state will be set in TxMode/RxMode */
}
 800314e:	bf00      	nop
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	240005c0 	.word	0x240005c0

0800315c <NRF24_TxMode>:

void NRF24_TxMode(uint8_t *Address, uint8_t channel)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	460b      	mov	r3, r1
 8003166:	70fb      	strb	r3, [r7, #3]
    CE_Disable();
 8003168:	f7ff fe58 	bl	8002e1c <CE_Disable>

    nrf24_WriteReg(RF_CH, channel);
 800316c:	78fb      	ldrb	r3, [r7, #3]
 800316e:	4619      	mov	r1, r3
 8003170:	2005      	movs	r0, #5
 8003172:	f7ff fe75 	bl	8002e60 <nrf24_WriteReg>
    nrf24_WriteRegMulti(TX_ADDR,    Address, 5);
 8003176:	2205      	movs	r2, #5
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	2010      	movs	r0, #16
 800317c:	f7ff fe96 	bl	8002eac <nrf24_WriteRegMulti>
    nrf24_WriteRegMulti(RX_ADDR_P0, Address, 5);  /* ACK return path if enabled later */
 8003180:	2205      	movs	r2, #5
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	200a      	movs	r0, #10
 8003186:	f7ff fe91 	bl	8002eac <nrf24_WriteRegMulti>

    /* CONFIG: PWR_UP(1) | EN_CRC(1) | CRCO(1=16bit) | PRIM_RX(0) */
    uint8_t cfg = (1<<1) | (1<<3) | (1<<2);   /* 0x0E */
 800318a:	230e      	movs	r3, #14
 800318c:	73fb      	strb	r3, [r7, #15]
    nrf24_WriteReg(CONFIG, cfg);
 800318e:	7bfb      	ldrb	r3, [r7, #15]
 8003190:	4619      	mov	r1, r3
 8003192:	2000      	movs	r0, #0
 8003194:	f7ff fe64 	bl	8002e60 <nrf24_WriteReg>
    HAL_Delay(3);
 8003198:	2003      	movs	r0, #3
 800319a:	f001 f82f 	bl	80041fc <HAL_Delay>

    //CE_Enable();
}
 800319e:	bf00      	nop
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
	...

080031a8 <hex1>:

    for (int i = 29; i < 38; i++) data[i] = nrf24_ReadReg(i - 12);
}

/* ===== Simple UART dump ================================================== */
static void hex1(const char *name, uint8_t v){
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b08c      	sub	sp, #48	@ 0x30
 80031ac:	af02      	add	r7, sp, #8
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	460b      	mov	r3, r1
 80031b2:	70fb      	strb	r3, [r7, #3]
    char s[32];
    snprintf(s, sizeof(s), "%s=%02X ", name, v);
 80031b4:	78fb      	ldrb	r3, [r7, #3]
 80031b6:	f107 0008 	add.w	r0, r7, #8
 80031ba:	9300      	str	r3, [sp, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a06      	ldr	r2, [pc, #24]	@ (80031d8 <hex1+0x30>)
 80031c0:	2120      	movs	r1, #32
 80031c2:	f011 fcaf 	bl	8014b24 <sniprintf>
    uputs(s);
 80031c6:	f107 0308 	add.w	r3, r7, #8
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7ff fe32 	bl	8002e34 <uputs>
}
 80031d0:	bf00      	nop
 80031d2:	3728      	adds	r7, #40	@ 0x28
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	080187a8 	.word	0x080187a8

080031dc <dump_hex5>:

static void dump_hex5(const char *name, const uint8_t *v){
 80031dc:	b5b0      	push	{r4, r5, r7, lr}
 80031de:	b098      	sub	sp, #96	@ 0x60
 80031e0:	af06      	add	r7, sp, #24
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
    char s[64];
    snprintf(s, sizeof(s), "%s=%02X %02X %02X %02X %02X  ",
            name, v[0], v[1], v[2], v[3], v[4]);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	781b      	ldrb	r3, [r3, #0]
    snprintf(s, sizeof(s), "%s=%02X %02X %02X %02X %02X  ",
 80031ea:	461a      	mov	r2, r3
            name, v[0], v[1], v[2], v[3], v[4]);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	3301      	adds	r3, #1
 80031f0:	781b      	ldrb	r3, [r3, #0]
    snprintf(s, sizeof(s), "%s=%02X %02X %02X %02X %02X  ",
 80031f2:	4619      	mov	r1, r3
            name, v[0], v[1], v[2], v[3], v[4]);
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	3302      	adds	r3, #2
 80031f8:	781b      	ldrb	r3, [r3, #0]
    snprintf(s, sizeof(s), "%s=%02X %02X %02X %02X %02X  ",
 80031fa:	461c      	mov	r4, r3
            name, v[0], v[1], v[2], v[3], v[4]);
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	3303      	adds	r3, #3
 8003200:	781b      	ldrb	r3, [r3, #0]
    snprintf(s, sizeof(s), "%s=%02X %02X %02X %02X %02X  ",
 8003202:	461d      	mov	r5, r3
            name, v[0], v[1], v[2], v[3], v[4]);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	3304      	adds	r3, #4
 8003208:	781b      	ldrb	r3, [r3, #0]
    snprintf(s, sizeof(s), "%s=%02X %02X %02X %02X %02X  ",
 800320a:	f107 0008 	add.w	r0, r7, #8
 800320e:	9304      	str	r3, [sp, #16]
 8003210:	9503      	str	r5, [sp, #12]
 8003212:	9402      	str	r4, [sp, #8]
 8003214:	9101      	str	r1, [sp, #4]
 8003216:	9200      	str	r2, [sp, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a06      	ldr	r2, [pc, #24]	@ (8003234 <dump_hex5+0x58>)
 800321c:	2140      	movs	r1, #64	@ 0x40
 800321e:	f011 fc81 	bl	8014b24 <sniprintf>
    uputs(s);
 8003222:	f107 0308 	add.w	r3, r7, #8
 8003226:	4618      	mov	r0, r3
 8003228:	f7ff fe04 	bl	8002e34 <uputs>
}
 800322c:	bf00      	nop
 800322e:	3748      	adds	r7, #72	@ 0x48
 8003230:	46bd      	mov	sp, r7
 8003232:	bdb0      	pop	{r4, r5, r7, pc}
 8003234:	080187b4 	.word	0x080187b4

08003238 <NRF24_Dump>:

void NRF24_Dump(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
    uint8_t v, addr[5];
    v = nrf24_ReadReg(CONFIG);     hex1("CFG",   v);
 800323e:	2000      	movs	r0, #0
 8003240:	f7ff fe5e 	bl	8002f00 <nrf24_ReadReg>
 8003244:	4603      	mov	r3, r0
 8003246:	71fb      	strb	r3, [r7, #7]
 8003248:	79fb      	ldrb	r3, [r7, #7]
 800324a:	4619      	mov	r1, r3
 800324c:	4832      	ldr	r0, [pc, #200]	@ (8003318 <NRF24_Dump+0xe0>)
 800324e:	f7ff ffab 	bl	80031a8 <hex1>
    v = nrf24_ReadReg(EN_AA);      hex1("EN_AA", v);
 8003252:	2001      	movs	r0, #1
 8003254:	f7ff fe54 	bl	8002f00 <nrf24_ReadReg>
 8003258:	4603      	mov	r3, r0
 800325a:	71fb      	strb	r3, [r7, #7]
 800325c:	79fb      	ldrb	r3, [r7, #7]
 800325e:	4619      	mov	r1, r3
 8003260:	482e      	ldr	r0, [pc, #184]	@ (800331c <NRF24_Dump+0xe4>)
 8003262:	f7ff ffa1 	bl	80031a8 <hex1>
    v = nrf24_ReadReg(SETUP_RETR); hex1("RETR",  v);
 8003266:	2004      	movs	r0, #4
 8003268:	f7ff fe4a 	bl	8002f00 <nrf24_ReadReg>
 800326c:	4603      	mov	r3, r0
 800326e:	71fb      	strb	r3, [r7, #7]
 8003270:	79fb      	ldrb	r3, [r7, #7]
 8003272:	4619      	mov	r1, r3
 8003274:	482a      	ldr	r0, [pc, #168]	@ (8003320 <NRF24_Dump+0xe8>)
 8003276:	f7ff ff97 	bl	80031a8 <hex1>
    v = nrf24_ReadReg(RF_CH);      hex1("CH",    v);
 800327a:	2005      	movs	r0, #5
 800327c:	f7ff fe40 	bl	8002f00 <nrf24_ReadReg>
 8003280:	4603      	mov	r3, r0
 8003282:	71fb      	strb	r3, [r7, #7]
 8003284:	79fb      	ldrb	r3, [r7, #7]
 8003286:	4619      	mov	r1, r3
 8003288:	4826      	ldr	r0, [pc, #152]	@ (8003324 <NRF24_Dump+0xec>)
 800328a:	f7ff ff8d 	bl	80031a8 <hex1>
    v = nrf24_ReadReg(RF_SETUP);   hex1("RF",    v);
 800328e:	2006      	movs	r0, #6
 8003290:	f7ff fe36 	bl	8002f00 <nrf24_ReadReg>
 8003294:	4603      	mov	r3, r0
 8003296:	71fb      	strb	r3, [r7, #7]
 8003298:	79fb      	ldrb	r3, [r7, #7]
 800329a:	4619      	mov	r1, r3
 800329c:	4822      	ldr	r0, [pc, #136]	@ (8003328 <NRF24_Dump+0xf0>)
 800329e:	f7ff ff83 	bl	80031a8 <hex1>
    v = nrf24_ReadReg(FEATURE);    hex1("FEAT",  v);
 80032a2:	201d      	movs	r0, #29
 80032a4:	f7ff fe2c 	bl	8002f00 <nrf24_ReadReg>
 80032a8:	4603      	mov	r3, r0
 80032aa:	71fb      	strb	r3, [r7, #7]
 80032ac:	79fb      	ldrb	r3, [r7, #7]
 80032ae:	4619      	mov	r1, r3
 80032b0:	481e      	ldr	r0, [pc, #120]	@ (800332c <NRF24_Dump+0xf4>)
 80032b2:	f7ff ff79 	bl	80031a8 <hex1>
    v = nrf24_ReadReg(DYNPD);      hex1("DYNPD", v);
 80032b6:	201c      	movs	r0, #28
 80032b8:	f7ff fe22 	bl	8002f00 <nrf24_ReadReg>
 80032bc:	4603      	mov	r3, r0
 80032be:	71fb      	strb	r3, [r7, #7]
 80032c0:	79fb      	ldrb	r3, [r7, #7]
 80032c2:	4619      	mov	r1, r3
 80032c4:	481a      	ldr	r0, [pc, #104]	@ (8003330 <NRF24_Dump+0xf8>)
 80032c6:	f7ff ff6f 	bl	80031a8 <hex1>

    nrf24_ReadRegMulti(TX_ADDR,    addr, 5); dump_hex5("TX",  addr);
 80032ca:	463b      	mov	r3, r7
 80032cc:	2205      	movs	r2, #5
 80032ce:	4619      	mov	r1, r3
 80032d0:	2010      	movs	r0, #16
 80032d2:	f7ff fe3b 	bl	8002f4c <nrf24_ReadRegMulti>
 80032d6:	463b      	mov	r3, r7
 80032d8:	4619      	mov	r1, r3
 80032da:	4816      	ldr	r0, [pc, #88]	@ (8003334 <NRF24_Dump+0xfc>)
 80032dc:	f7ff ff7e 	bl	80031dc <dump_hex5>
    nrf24_ReadRegMulti(RX_ADDR_P0, addr, 5); dump_hex5("RX0", addr);
 80032e0:	463b      	mov	r3, r7
 80032e2:	2205      	movs	r2, #5
 80032e4:	4619      	mov	r1, r3
 80032e6:	200a      	movs	r0, #10
 80032e8:	f7ff fe30 	bl	8002f4c <nrf24_ReadRegMulti>
 80032ec:	463b      	mov	r3, r7
 80032ee:	4619      	mov	r1, r3
 80032f0:	4811      	ldr	r0, [pc, #68]	@ (8003338 <NRF24_Dump+0x100>)
 80032f2:	f7ff ff73 	bl	80031dc <dump_hex5>

    v = nrf24_ReadReg(STATUS);     hex1("STAT",  v);
 80032f6:	2007      	movs	r0, #7
 80032f8:	f7ff fe02 	bl	8002f00 <nrf24_ReadReg>
 80032fc:	4603      	mov	r3, r0
 80032fe:	71fb      	strb	r3, [r7, #7]
 8003300:	79fb      	ldrb	r3, [r7, #7]
 8003302:	4619      	mov	r1, r3
 8003304:	480d      	ldr	r0, [pc, #52]	@ (800333c <NRF24_Dump+0x104>)
 8003306:	f7ff ff4f 	bl	80031a8 <hex1>
    uputs("\r\n");
 800330a:	480d      	ldr	r0, [pc, #52]	@ (8003340 <NRF24_Dump+0x108>)
 800330c:	f7ff fd92 	bl	8002e34 <uputs>
}
 8003310:	bf00      	nop
 8003312:	3708      	adds	r7, #8
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	080187d4 	.word	0x080187d4
 800331c:	080187d8 	.word	0x080187d8
 8003320:	080187e0 	.word	0x080187e0
 8003324:	080187e8 	.word	0x080187e8
 8003328:	080187ec 	.word	0x080187ec
 800332c:	080187f0 	.word	0x080187f0
 8003330:	080187f8 	.word	0x080187f8
 8003334:	08018800 	.word	0x08018800
 8003338:	08018804 	.word	0x08018804
 800333c:	08018808 	.word	0x08018808
 8003340:	08018810 	.word	0x08018810

08003344 <NRF24_StatusNOP>:
uint8_t NRF24_StatusNOP(void) {
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af02      	add	r7, sp, #8
    uint8_t cmd = NOP, st = 0x00;
 800334a:	23ff      	movs	r3, #255	@ 0xff
 800334c:	71fb      	strb	r3, [r7, #7]
 800334e:	2300      	movs	r3, #0
 8003350:	71bb      	strb	r3, [r7, #6]
    CS_Select();
 8003352:	f7ff fd4b 	bl	8002dec <CS_Select>
    HAL_SPI_TransmitReceive(NRF24_SPI, &cmd, &st, 1, 100);
 8003356:	1dba      	adds	r2, r7, #6
 8003358:	1df9      	adds	r1, r7, #7
 800335a:	2364      	movs	r3, #100	@ 0x64
 800335c:	9300      	str	r3, [sp, #0]
 800335e:	2301      	movs	r3, #1
 8003360:	4804      	ldr	r0, [pc, #16]	@ (8003374 <NRF24_StatusNOP+0x30>)
 8003362:	f00c fb4b 	bl	800f9fc <HAL_SPI_TransmitReceive>
    CS_UnSelect();
 8003366:	f7ff fd4d 	bl	8002e04 <CS_UnSelect>
    return st;
 800336a:	79bb      	ldrb	r3, [r7, #6]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	240005c0 	.word	0x240005c0

08003378 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800337e:	4b0a      	ldr	r3, [pc, #40]	@ (80033a8 <HAL_MspInit+0x30>)
 8003380:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003384:	4a08      	ldr	r2, [pc, #32]	@ (80033a8 <HAL_MspInit+0x30>)
 8003386:	f043 0302 	orr.w	r3, r3, #2
 800338a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800338e:	4b06      	ldr	r3, [pc, #24]	@ (80033a8 <HAL_MspInit+0x30>)
 8003390:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	607b      	str	r3, [r7, #4]
 800339a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	58024400 	.word	0x58024400

080033ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b090      	sub	sp, #64	@ 0x40
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	605a      	str	r2, [r3, #4]
 80033be:	609a      	str	r2, [r3, #8]
 80033c0:	60da      	str	r2, [r3, #12]
 80033c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a90      	ldr	r2, [pc, #576]	@ (800360c <HAL_ADC_MspInit+0x260>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	f040 80a3 	bne.w	8003516 <HAL_ADC_MspInit+0x16a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80033d0:	4b8f      	ldr	r3, [pc, #572]	@ (8003610 <HAL_ADC_MspInit+0x264>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	3301      	adds	r3, #1
 80033d6:	4a8e      	ldr	r2, [pc, #568]	@ (8003610 <HAL_ADC_MspInit+0x264>)
 80033d8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80033da:	4b8d      	ldr	r3, [pc, #564]	@ (8003610 <HAL_ADC_MspInit+0x264>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d10e      	bne.n	8003400 <HAL_ADC_MspInit+0x54>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80033e2:	4b8c      	ldr	r3, [pc, #560]	@ (8003614 <HAL_ADC_MspInit+0x268>)
 80033e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80033e8:	4a8a      	ldr	r2, [pc, #552]	@ (8003614 <HAL_ADC_MspInit+0x268>)
 80033ea:	f043 0320 	orr.w	r3, r3, #32
 80033ee:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80033f2:	4b88      	ldr	r3, [pc, #544]	@ (8003614 <HAL_ADC_MspInit+0x268>)
 80033f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80033f8:	f003 0320 	and.w	r3, r3, #32
 80033fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003400:	4b84      	ldr	r3, [pc, #528]	@ (8003614 <HAL_ADC_MspInit+0x268>)
 8003402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003406:	4a83      	ldr	r2, [pc, #524]	@ (8003614 <HAL_ADC_MspInit+0x268>)
 8003408:	f043 0304 	orr.w	r3, r3, #4
 800340c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003410:	4b80      	ldr	r3, [pc, #512]	@ (8003614 <HAL_ADC_MspInit+0x268>)
 8003412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003416:	f003 0304 	and.w	r3, r3, #4
 800341a:	627b      	str	r3, [r7, #36]	@ 0x24
 800341c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800341e:	4b7d      	ldr	r3, [pc, #500]	@ (8003614 <HAL_ADC_MspInit+0x268>)
 8003420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003424:	4a7b      	ldr	r2, [pc, #492]	@ (8003614 <HAL_ADC_MspInit+0x268>)
 8003426:	f043 0302 	orr.w	r3, r3, #2
 800342a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800342e:	4b79      	ldr	r3, [pc, #484]	@ (8003614 <HAL_ADC_MspInit+0x268>)
 8003430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	623b      	str	r3, [r7, #32]
 800343a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800343c:	4b75      	ldr	r3, [pc, #468]	@ (8003614 <HAL_ADC_MspInit+0x268>)
 800343e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003442:	4a74      	ldr	r2, [pc, #464]	@ (8003614 <HAL_ADC_MspInit+0x268>)
 8003444:	f043 0320 	orr.w	r3, r3, #32
 8003448:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800344c:	4b71      	ldr	r3, [pc, #452]	@ (8003614 <HAL_ADC_MspInit+0x268>)
 800344e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003452:	f003 0320 	and.w	r3, r3, #32
 8003456:	61fb      	str	r3, [r7, #28]
 8003458:	69fb      	ldr	r3, [r7, #28]
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = S_APPS_1_Pin|SUSPENSION_RL_Pin;
 800345a:	2330      	movs	r3, #48	@ 0x30
 800345c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800345e:	2303      	movs	r3, #3
 8003460:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003462:	2300      	movs	r3, #0
 8003464:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003466:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800346a:	4619      	mov	r1, r3
 800346c:	486a      	ldr	r0, [pc, #424]	@ (8003618 <HAL_ADC_MspInit+0x26c>)
 800346e:	f006 fb7d 	bl	8009b6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SUSPENSION_RR_Pin|S_APPS_2_Pin;
 8003472:	2303      	movs	r3, #3
 8003474:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003476:	2303      	movs	r3, #3
 8003478:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347a:	2300      	movs	r3, #0
 800347c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800347e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003482:	4619      	mov	r1, r3
 8003484:	4865      	ldr	r0, [pc, #404]	@ (800361c <HAL_ADC_MspInit+0x270>)
 8003486:	f006 fb71 	bl	8009b6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = S_FRENO_Pin;
 800348a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800348e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003490:	2303      	movs	r3, #3
 8003492:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003494:	2300      	movs	r3, #0
 8003496:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(S_FRENO_GPIO_Port, &GPIO_InitStruct);
 8003498:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800349c:	4619      	mov	r1, r3
 800349e:	4860      	ldr	r0, [pc, #384]	@ (8003620 <HAL_ADC_MspInit+0x274>)
 80034a0:	f006 fb64 	bl	8009b6c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80034a4:	4b5f      	ldr	r3, [pc, #380]	@ (8003624 <HAL_ADC_MspInit+0x278>)
 80034a6:	4a60      	ldr	r2, [pc, #384]	@ (8003628 <HAL_ADC_MspInit+0x27c>)
 80034a8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80034aa:	4b5e      	ldr	r3, [pc, #376]	@ (8003624 <HAL_ADC_MspInit+0x278>)
 80034ac:	2209      	movs	r2, #9
 80034ae:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034b0:	4b5c      	ldr	r3, [pc, #368]	@ (8003624 <HAL_ADC_MspInit+0x278>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80034b6:	4b5b      	ldr	r3, [pc, #364]	@ (8003624 <HAL_ADC_MspInit+0x278>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80034bc:	4b59      	ldr	r3, [pc, #356]	@ (8003624 <HAL_ADC_MspInit+0x278>)
 80034be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80034c2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80034c4:	4b57      	ldr	r3, [pc, #348]	@ (8003624 <HAL_ADC_MspInit+0x278>)
 80034c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80034ca:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80034cc:	4b55      	ldr	r3, [pc, #340]	@ (8003624 <HAL_ADC_MspInit+0x278>)
 80034ce:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80034d2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80034d4:	4b53      	ldr	r3, [pc, #332]	@ (8003624 <HAL_ADC_MspInit+0x278>)
 80034d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80034da:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80034dc:	4b51      	ldr	r3, [pc, #324]	@ (8003624 <HAL_ADC_MspInit+0x278>)
 80034de:	2200      	movs	r2, #0
 80034e0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034e2:	4b50      	ldr	r3, [pc, #320]	@ (8003624 <HAL_ADC_MspInit+0x278>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80034e8:	484e      	ldr	r0, [pc, #312]	@ (8003624 <HAL_ADC_MspInit+0x278>)
 80034ea:	f003 f859 	bl	80065a0 <HAL_DMA_Init>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <HAL_ADC_MspInit+0x14c>
    {
      Error_Handler();
 80034f4:	f7ff fc74 	bl	8002de0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a4a      	ldr	r2, [pc, #296]	@ (8003624 <HAL_ADC_MspInit+0x278>)
 80034fc:	659a      	str	r2, [r3, #88]	@ 0x58
 80034fe:	4a49      	ldr	r2, [pc, #292]	@ (8003624 <HAL_ADC_MspInit+0x278>)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003504:	2200      	movs	r2, #0
 8003506:	2100      	movs	r1, #0
 8003508:	2012      	movs	r0, #18
 800350a:	f003 f814 	bl	8006536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800350e:	2012      	movs	r0, #18
 8003510:	f003 f82b 	bl	800656a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003514:	e076      	b.n	8003604 <HAL_ADC_MspInit+0x258>
  else if(hadc->Instance==ADC2)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a44      	ldr	r2, [pc, #272]	@ (800362c <HAL_ADC_MspInit+0x280>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d171      	bne.n	8003604 <HAL_ADC_MspInit+0x258>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003520:	4b3b      	ldr	r3, [pc, #236]	@ (8003610 <HAL_ADC_MspInit+0x264>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	3301      	adds	r3, #1
 8003526:	4a3a      	ldr	r2, [pc, #232]	@ (8003610 <HAL_ADC_MspInit+0x264>)
 8003528:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800352a:	4b39      	ldr	r3, [pc, #228]	@ (8003610 <HAL_ADC_MspInit+0x264>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d10e      	bne.n	8003550 <HAL_ADC_MspInit+0x1a4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003532:	4b38      	ldr	r3, [pc, #224]	@ (8003614 <HAL_ADC_MspInit+0x268>)
 8003534:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003538:	4a36      	ldr	r2, [pc, #216]	@ (8003614 <HAL_ADC_MspInit+0x268>)
 800353a:	f043 0320 	orr.w	r3, r3, #32
 800353e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003542:	4b34      	ldr	r3, [pc, #208]	@ (8003614 <HAL_ADC_MspInit+0x268>)
 8003544:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003548:	f003 0320 	and.w	r3, r3, #32
 800354c:	61bb      	str	r3, [r7, #24]
 800354e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003550:	4b30      	ldr	r3, [pc, #192]	@ (8003614 <HAL_ADC_MspInit+0x268>)
 8003552:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003556:	4a2f      	ldr	r2, [pc, #188]	@ (8003614 <HAL_ADC_MspInit+0x268>)
 8003558:	f043 0304 	orr.w	r3, r3, #4
 800355c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003560:	4b2c      	ldr	r3, [pc, #176]	@ (8003614 <HAL_ADC_MspInit+0x268>)
 8003562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003566:	f003 0304 	and.w	r3, r3, #4
 800356a:	617b      	str	r3, [r7, #20]
 800356c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800356e:	4b29      	ldr	r3, [pc, #164]	@ (8003614 <HAL_ADC_MspInit+0x268>)
 8003570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003574:	4a27      	ldr	r2, [pc, #156]	@ (8003614 <HAL_ADC_MspInit+0x268>)
 8003576:	f043 0302 	orr.w	r3, r3, #2
 800357a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800357e:	4b25      	ldr	r3, [pc, #148]	@ (8003614 <HAL_ADC_MspInit+0x268>)
 8003580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	613b      	str	r3, [r7, #16]
 800358a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800358c:	4b21      	ldr	r3, [pc, #132]	@ (8003614 <HAL_ADC_MspInit+0x268>)
 800358e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003592:	4a20      	ldr	r2, [pc, #128]	@ (8003614 <HAL_ADC_MspInit+0x268>)
 8003594:	f043 0320 	orr.w	r3, r3, #32
 8003598:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800359c:	4b1d      	ldr	r3, [pc, #116]	@ (8003614 <HAL_ADC_MspInit+0x268>)
 800359e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035a2:	f003 0320 	and.w	r3, r3, #32
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SUSPENSION_RL_Pin;
 80035aa:	2320      	movs	r3, #32
 80035ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035ae:	2303      	movs	r3, #3
 80035b0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b2:	2300      	movs	r3, #0
 80035b4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SUSPENSION_RL_GPIO_Port, &GPIO_InitStruct);
 80035b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80035ba:	4619      	mov	r1, r3
 80035bc:	4816      	ldr	r0, [pc, #88]	@ (8003618 <HAL_ADC_MspInit+0x26c>)
 80035be:	f006 fad5 	bl	8009b6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SUSPENSION_RR_Pin;
 80035c2:	2301      	movs	r3, #1
 80035c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035c6:	2303      	movs	r3, #3
 80035c8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ca:	2300      	movs	r3, #0
 80035cc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SUSPENSION_RR_GPIO_Port, &GPIO_InitStruct);
 80035ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80035d2:	4619      	mov	r1, r3
 80035d4:	4811      	ldr	r0, [pc, #68]	@ (800361c <HAL_ADC_MspInit+0x270>)
 80035d6:	f006 fac9 	bl	8009b6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SUSPENSION_FR_Pin;
 80035da:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80035de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035e0:	2303      	movs	r3, #3
 80035e2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e4:	2300      	movs	r3, #0
 80035e6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SUSPENSION_FR_GPIO_Port, &GPIO_InitStruct);
 80035e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80035ec:	4619      	mov	r1, r3
 80035ee:	480c      	ldr	r0, [pc, #48]	@ (8003620 <HAL_ADC_MspInit+0x274>)
 80035f0:	f006 fabc 	bl	8009b6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80035f4:	2200      	movs	r2, #0
 80035f6:	2100      	movs	r1, #0
 80035f8:	2012      	movs	r0, #18
 80035fa:	f002 ff9c 	bl	8006536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80035fe:	2012      	movs	r0, #18
 8003600:	f002 ffb3 	bl	800656a <HAL_NVIC_EnableIRQ>
}
 8003604:	bf00      	nop
 8003606:	3740      	adds	r7, #64	@ 0x40
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	40022000 	.word	0x40022000
 8003610:	2400099c 	.word	0x2400099c
 8003614:	58024400 	.word	0x58024400
 8003618:	58020800 	.word	0x58020800
 800361c:	58020400 	.word	0x58020400
 8003620:	58021400 	.word	0x58021400
 8003624:	240002ec 	.word	0x240002ec
 8003628:	40020010 	.word	0x40020010
 800362c:	40022100 	.word	0x40022100

08003630 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b0bc      	sub	sp, #240	@ 0xf0
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003638:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800363c:	2200      	movs	r2, #0
 800363e:	601a      	str	r2, [r3, #0]
 8003640:	605a      	str	r2, [r3, #4]
 8003642:	609a      	str	r2, [r3, #8]
 8003644:	60da      	str	r2, [r3, #12]
 8003646:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003648:	f107 0320 	add.w	r3, r7, #32
 800364c:	22b8      	movs	r2, #184	@ 0xb8
 800364e:	2100      	movs	r1, #0
 8003650:	4618      	mov	r0, r3
 8003652:	f011 fb02 	bl	8014c5a <memset>
  if(hfdcan->Instance==FDCAN1)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a8d      	ldr	r2, [pc, #564]	@ (8003890 <HAL_FDCAN_MspInit+0x260>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d157      	bne.n	8003710 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003660:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003664:	f04f 0300 	mov.w	r3, #0
 8003668:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 800366c:	2300      	movs	r3, #0
 800366e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003672:	f107 0320 	add.w	r3, r7, #32
 8003676:	4618      	mov	r0, r3
 8003678:	f007 fbf2 	bl	800ae60 <HAL_RCCEx_PeriphCLKConfig>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8003682:	f7ff fbad 	bl	8002de0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8003686:	4b83      	ldr	r3, [pc, #524]	@ (8003894 <HAL_FDCAN_MspInit+0x264>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	3301      	adds	r3, #1
 800368c:	4a81      	ldr	r2, [pc, #516]	@ (8003894 <HAL_FDCAN_MspInit+0x264>)
 800368e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8003690:	4b80      	ldr	r3, [pc, #512]	@ (8003894 <HAL_FDCAN_MspInit+0x264>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d10e      	bne.n	80036b6 <HAL_FDCAN_MspInit+0x86>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8003698:	4b7f      	ldr	r3, [pc, #508]	@ (8003898 <HAL_FDCAN_MspInit+0x268>)
 800369a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800369e:	4a7e      	ldr	r2, [pc, #504]	@ (8003898 <HAL_FDCAN_MspInit+0x268>)
 80036a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036a4:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80036a8:	4b7b      	ldr	r3, [pc, #492]	@ (8003898 <HAL_FDCAN_MspInit+0x268>)
 80036aa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80036ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036b2:	61fb      	str	r3, [r7, #28]
 80036b4:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036b6:	4b78      	ldr	r3, [pc, #480]	@ (8003898 <HAL_FDCAN_MspInit+0x268>)
 80036b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036bc:	4a76      	ldr	r2, [pc, #472]	@ (8003898 <HAL_FDCAN_MspInit+0x268>)
 80036be:	f043 0308 	orr.w	r3, r3, #8
 80036c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80036c6:	4b74      	ldr	r3, [pc, #464]	@ (8003898 <HAL_FDCAN_MspInit+0x268>)
 80036c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036cc:	f003 0308 	and.w	r3, r3, #8
 80036d0:	61bb      	str	r3, [r7, #24]
 80036d2:	69bb      	ldr	r3, [r7, #24]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80036d4:	2303      	movs	r3, #3
 80036d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036da:	2302      	movs	r3, #2
 80036dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e0:	2300      	movs	r3, #0
 80036e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036e6:	2300      	movs	r3, #0
 80036e8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80036ec:	2309      	movs	r3, #9
 80036ee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036f2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80036f6:	4619      	mov	r1, r3
 80036f8:	4868      	ldr	r0, [pc, #416]	@ (800389c <HAL_FDCAN_MspInit+0x26c>)
 80036fa:	f006 fa37 	bl	8009b6c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 1, 0);
 80036fe:	2200      	movs	r2, #0
 8003700:	2101      	movs	r1, #1
 8003702:	2013      	movs	r0, #19
 8003704:	f002 ff17 	bl	8006536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8003708:	2013      	movs	r0, #19
 800370a:	f002 ff2e 	bl	800656a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 800370e:	e0ba      	b.n	8003886 <HAL_FDCAN_MspInit+0x256>
  else if(hfdcan->Instance==FDCAN2)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a62      	ldr	r2, [pc, #392]	@ (80038a0 <HAL_FDCAN_MspInit+0x270>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d158      	bne.n	80037cc <HAL_FDCAN_MspInit+0x19c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800371a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800371e:	f04f 0300 	mov.w	r3, #0
 8003722:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8003726:	2300      	movs	r3, #0
 8003728:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800372c:	f107 0320 	add.w	r3, r7, #32
 8003730:	4618      	mov	r0, r3
 8003732:	f007 fb95 	bl	800ae60 <HAL_RCCEx_PeriphCLKConfig>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d001      	beq.n	8003740 <HAL_FDCAN_MspInit+0x110>
      Error_Handler();
 800373c:	f7ff fb50 	bl	8002de0 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8003740:	4b54      	ldr	r3, [pc, #336]	@ (8003894 <HAL_FDCAN_MspInit+0x264>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	3301      	adds	r3, #1
 8003746:	4a53      	ldr	r2, [pc, #332]	@ (8003894 <HAL_FDCAN_MspInit+0x264>)
 8003748:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800374a:	4b52      	ldr	r3, [pc, #328]	@ (8003894 <HAL_FDCAN_MspInit+0x264>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d10e      	bne.n	8003770 <HAL_FDCAN_MspInit+0x140>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8003752:	4b51      	ldr	r3, [pc, #324]	@ (8003898 <HAL_FDCAN_MspInit+0x268>)
 8003754:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8003758:	4a4f      	ldr	r2, [pc, #316]	@ (8003898 <HAL_FDCAN_MspInit+0x268>)
 800375a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800375e:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8003762:	4b4d      	ldr	r3, [pc, #308]	@ (8003898 <HAL_FDCAN_MspInit+0x268>)
 8003764:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8003768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800376c:	617b      	str	r3, [r7, #20]
 800376e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003770:	4b49      	ldr	r3, [pc, #292]	@ (8003898 <HAL_FDCAN_MspInit+0x268>)
 8003772:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003776:	4a48      	ldr	r2, [pc, #288]	@ (8003898 <HAL_FDCAN_MspInit+0x268>)
 8003778:	f043 0302 	orr.w	r3, r3, #2
 800377c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003780:	4b45      	ldr	r3, [pc, #276]	@ (8003898 <HAL_FDCAN_MspInit+0x268>)
 8003782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	613b      	str	r3, [r7, #16]
 800378c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800378e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003792:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003796:	2302      	movs	r3, #2
 8003798:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379c:	2300      	movs	r3, #0
 800379e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037a2:	2300      	movs	r3, #0
 80037a4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80037a8:	2309      	movs	r3, #9
 80037aa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037ae:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80037b2:	4619      	mov	r1, r3
 80037b4:	483b      	ldr	r0, [pc, #236]	@ (80038a4 <HAL_FDCAN_MspInit+0x274>)
 80037b6:	f006 f9d9 	bl	8009b6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 2, 0);
 80037ba:	2200      	movs	r2, #0
 80037bc:	2102      	movs	r1, #2
 80037be:	2014      	movs	r0, #20
 80037c0:	f002 feb9 	bl	8006536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 80037c4:	2014      	movs	r0, #20
 80037c6:	f002 fed0 	bl	800656a <HAL_NVIC_EnableIRQ>
}
 80037ca:	e05c      	b.n	8003886 <HAL_FDCAN_MspInit+0x256>
  else if(hfdcan->Instance==FDCAN3)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a35      	ldr	r2, [pc, #212]	@ (80038a8 <HAL_FDCAN_MspInit+0x278>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d157      	bne.n	8003886 <HAL_FDCAN_MspInit+0x256>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80037d6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80037da:	f04f 0300 	mov.w	r3, #0
 80037de:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80037e2:	2300      	movs	r3, #0
 80037e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80037e8:	f107 0320 	add.w	r3, r7, #32
 80037ec:	4618      	mov	r0, r3
 80037ee:	f007 fb37 	bl	800ae60 <HAL_RCCEx_PeriphCLKConfig>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <HAL_FDCAN_MspInit+0x1cc>
      Error_Handler();
 80037f8:	f7ff faf2 	bl	8002de0 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80037fc:	4b25      	ldr	r3, [pc, #148]	@ (8003894 <HAL_FDCAN_MspInit+0x264>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	3301      	adds	r3, #1
 8003802:	4a24      	ldr	r2, [pc, #144]	@ (8003894 <HAL_FDCAN_MspInit+0x264>)
 8003804:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8003806:	4b23      	ldr	r3, [pc, #140]	@ (8003894 <HAL_FDCAN_MspInit+0x264>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d10e      	bne.n	800382c <HAL_FDCAN_MspInit+0x1fc>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800380e:	4b22      	ldr	r3, [pc, #136]	@ (8003898 <HAL_FDCAN_MspInit+0x268>)
 8003810:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8003814:	4a20      	ldr	r2, [pc, #128]	@ (8003898 <HAL_FDCAN_MspInit+0x268>)
 8003816:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800381a:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800381e:	4b1e      	ldr	r3, [pc, #120]	@ (8003898 <HAL_FDCAN_MspInit+0x268>)
 8003820:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8003824:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003828:	60fb      	str	r3, [r7, #12]
 800382a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800382c:	4b1a      	ldr	r3, [pc, #104]	@ (8003898 <HAL_FDCAN_MspInit+0x268>)
 800382e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003832:	4a19      	ldr	r2, [pc, #100]	@ (8003898 <HAL_FDCAN_MspInit+0x268>)
 8003834:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003838:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800383c:	4b16      	ldr	r3, [pc, #88]	@ (8003898 <HAL_FDCAN_MspInit+0x268>)
 800383e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003846:	60bb      	str	r3, [r7, #8]
 8003848:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800384a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800384e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003852:	2302      	movs	r3, #2
 8003854:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003858:	2300      	movs	r3, #0
 800385a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800385e:	2300      	movs	r3, #0
 8003860:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8003864:	2302      	movs	r3, #2
 8003866:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800386a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800386e:	4619      	mov	r1, r3
 8003870:	480e      	ldr	r0, [pc, #56]	@ (80038ac <HAL_FDCAN_MspInit+0x27c>)
 8003872:	f006 f97b 	bl	8009b6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN3_IT0_IRQn, 0, 0);
 8003876:	2200      	movs	r2, #0
 8003878:	2100      	movs	r1, #0
 800387a:	209f      	movs	r0, #159	@ 0x9f
 800387c:	f002 fe5b 	bl	8006536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT0_IRQn);
 8003880:	209f      	movs	r0, #159	@ 0x9f
 8003882:	f002 fe72 	bl	800656a <HAL_NVIC_EnableIRQ>
}
 8003886:	bf00      	nop
 8003888:	37f0      	adds	r7, #240	@ 0xf0
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	4000a000 	.word	0x4000a000
 8003894:	240009a0 	.word	0x240009a0
 8003898:	58024400 	.word	0x58024400
 800389c:	58020c00 	.word	0x58020c00
 80038a0:	4000a400 	.word	0x4000a400
 80038a4:	58020400 	.word	0x58020400
 80038a8:	4000d400 	.word	0x4000d400
 80038ac:	58021800 	.word	0x58021800

080038b0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b08c      	sub	sp, #48	@ 0x30
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038b8:	f107 031c 	add.w	r3, r7, #28
 80038bc:	2200      	movs	r2, #0
 80038be:	601a      	str	r2, [r3, #0]
 80038c0:	605a      	str	r2, [r3, #4]
 80038c2:	609a      	str	r2, [r3, #8]
 80038c4:	60da      	str	r2, [r3, #12]
 80038c6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a3e      	ldr	r2, [pc, #248]	@ (80039c8 <HAL_SD_MspInit+0x118>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d175      	bne.n	80039be <HAL_SD_MspInit+0x10e>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80038d2:	4b3e      	ldr	r3, [pc, #248]	@ (80039cc <HAL_SD_MspInit+0x11c>)
 80038d4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80038d8:	4a3c      	ldr	r2, [pc, #240]	@ (80039cc <HAL_SD_MspInit+0x11c>)
 80038da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038de:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80038e2:	4b3a      	ldr	r3, [pc, #232]	@ (80039cc <HAL_SD_MspInit+0x11c>)
 80038e4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80038e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038ec:	61bb      	str	r3, [r7, #24]
 80038ee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038f0:	4b36      	ldr	r3, [pc, #216]	@ (80039cc <HAL_SD_MspInit+0x11c>)
 80038f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038f6:	4a35      	ldr	r2, [pc, #212]	@ (80039cc <HAL_SD_MspInit+0x11c>)
 80038f8:	f043 0304 	orr.w	r3, r3, #4
 80038fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003900:	4b32      	ldr	r3, [pc, #200]	@ (80039cc <HAL_SD_MspInit+0x11c>)
 8003902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003906:	f003 0304 	and.w	r3, r3, #4
 800390a:	617b      	str	r3, [r7, #20]
 800390c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800390e:	4b2f      	ldr	r3, [pc, #188]	@ (80039cc <HAL_SD_MspInit+0x11c>)
 8003910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003914:	4a2d      	ldr	r2, [pc, #180]	@ (80039cc <HAL_SD_MspInit+0x11c>)
 8003916:	f043 0308 	orr.w	r3, r3, #8
 800391a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800391e:	4b2b      	ldr	r3, [pc, #172]	@ (80039cc <HAL_SD_MspInit+0x11c>)
 8003920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003924:	f003 0308 	and.w	r3, r3, #8
 8003928:	613b      	str	r3, [r7, #16]
 800392a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800392c:	4b27      	ldr	r3, [pc, #156]	@ (80039cc <HAL_SD_MspInit+0x11c>)
 800392e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003932:	4a26      	ldr	r2, [pc, #152]	@ (80039cc <HAL_SD_MspInit+0x11c>)
 8003934:	f043 0302 	orr.w	r3, r3, #2
 8003938:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800393c:	4b23      	ldr	r3, [pc, #140]	@ (80039cc <HAL_SD_MspInit+0x11c>)
 800393e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	60fb      	str	r3, [r7, #12]
 8003948:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PB8     ------> SDMMC1_CKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800394a:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800394e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003950:	2302      	movs	r3, #2
 8003952:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003954:	2300      	movs	r3, #0
 8003956:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003958:	2303      	movs	r3, #3
 800395a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800395c:	230c      	movs	r3, #12
 800395e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003960:	f107 031c 	add.w	r3, r7, #28
 8003964:	4619      	mov	r1, r3
 8003966:	481a      	ldr	r0, [pc, #104]	@ (80039d0 <HAL_SD_MspInit+0x120>)
 8003968:	f006 f900 	bl	8009b6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800396c:	2304      	movs	r3, #4
 800396e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003970:	2302      	movs	r3, #2
 8003972:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003974:	2300      	movs	r3, #0
 8003976:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003978:	2303      	movs	r3, #3
 800397a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800397c:	230c      	movs	r3, #12
 800397e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003980:	f107 031c 	add.w	r3, r7, #28
 8003984:	4619      	mov	r1, r3
 8003986:	4813      	ldr	r0, [pc, #76]	@ (80039d4 <HAL_SD_MspInit+0x124>)
 8003988:	f006 f8f0 	bl	8009b6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800398c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003992:	2302      	movs	r3, #2
 8003994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003996:	2300      	movs	r3, #0
 8003998:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800399a:	2303      	movs	r3, #3
 800399c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SDMMC1;
 800399e:	2307      	movs	r3, #7
 80039a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039a2:	f107 031c 	add.w	r3, r7, #28
 80039a6:	4619      	mov	r1, r3
 80039a8:	480b      	ldr	r0, [pc, #44]	@ (80039d8 <HAL_SD_MspInit+0x128>)
 80039aa:	f006 f8df 	bl	8009b6c <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80039ae:	2200      	movs	r2, #0
 80039b0:	2100      	movs	r1, #0
 80039b2:	2031      	movs	r0, #49	@ 0x31
 80039b4:	f002 fdbf 	bl	8006536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80039b8:	2031      	movs	r0, #49	@ 0x31
 80039ba:	f002 fdd6 	bl	800656a <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 80039be:	bf00      	nop
 80039c0:	3730      	adds	r7, #48	@ 0x30
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	52007000 	.word	0x52007000
 80039cc:	58024400 	.word	0x58024400
 80039d0:	58020800 	.word	0x58020800
 80039d4:	58020c00 	.word	0x58020c00
 80039d8:	58020400 	.word	0x58020400

080039dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b0b8      	sub	sp, #224	@ 0xe0
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039e4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80039e8:	2200      	movs	r2, #0
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	605a      	str	r2, [r3, #4]
 80039ee:	609a      	str	r2, [r3, #8]
 80039f0:	60da      	str	r2, [r3, #12]
 80039f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80039f4:	f107 0310 	add.w	r3, r7, #16
 80039f8:	22b8      	movs	r2, #184	@ 0xb8
 80039fa:	2100      	movs	r1, #0
 80039fc:	4618      	mov	r0, r3
 80039fe:	f011 f92c 	bl	8014c5a <memset>
  if(hspi->Instance==SPI1)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a26      	ldr	r2, [pc, #152]	@ (8003aa0 <HAL_SPI_MspInit+0xc4>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d144      	bne.n	8003a96 <HAL_SPI_MspInit+0xba>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8003a0c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003a10:	f04f 0300 	mov.w	r3, #0
 8003a14:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a1c:	f107 0310 	add.w	r3, r7, #16
 8003a20:	4618      	mov	r0, r3
 8003a22:	f007 fa1d 	bl	800ae60 <HAL_RCCEx_PeriphCLKConfig>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8003a2c:	f7ff f9d8 	bl	8002de0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003a30:	4b1c      	ldr	r3, [pc, #112]	@ (8003aa4 <HAL_SPI_MspInit+0xc8>)
 8003a32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a36:	4a1b      	ldr	r2, [pc, #108]	@ (8003aa4 <HAL_SPI_MspInit+0xc8>)
 8003a38:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003a3c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003a40:	4b18      	ldr	r3, [pc, #96]	@ (8003aa4 <HAL_SPI_MspInit+0xc8>)
 8003a42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a46:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a4a:	60fb      	str	r3, [r7, #12]
 8003a4c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a4e:	4b15      	ldr	r3, [pc, #84]	@ (8003aa4 <HAL_SPI_MspInit+0xc8>)
 8003a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a54:	4a13      	ldr	r2, [pc, #76]	@ (8003aa4 <HAL_SPI_MspInit+0xc8>)
 8003a56:	f043 0301 	orr.w	r3, r3, #1
 8003a5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003a5e:	4b11      	ldr	r3, [pc, #68]	@ (8003aa4 <HAL_SPI_MspInit+0xc8>)
 8003a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	60bb      	str	r3, [r7, #8]
 8003a6a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003a6c:	23e0      	movs	r3, #224	@ 0xe0
 8003a6e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a72:	2302      	movs	r3, #2
 8003a74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003a84:	2305      	movs	r3, #5
 8003a86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a8a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8003a8e:	4619      	mov	r1, r3
 8003a90:	4805      	ldr	r0, [pc, #20]	@ (8003aa8 <HAL_SPI_MspInit+0xcc>)
 8003a92:	f006 f86b 	bl	8009b6c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003a96:	bf00      	nop
 8003a98:	37e0      	adds	r7, #224	@ 0xe0
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	40013000 	.word	0x40013000
 8003aa4:	58024400 	.word	0x58024400
 8003aa8:	58020000 	.word	0x58020000

08003aac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a19      	ldr	r2, [pc, #100]	@ (8003b20 <HAL_TIM_Base_MspInit+0x74>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d10f      	bne.n	8003ade <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003abe:	4b19      	ldr	r3, [pc, #100]	@ (8003b24 <HAL_TIM_Base_MspInit+0x78>)
 8003ac0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ac4:	4a17      	ldr	r2, [pc, #92]	@ (8003b24 <HAL_TIM_Base_MspInit+0x78>)
 8003ac6:	f043 0301 	orr.w	r3, r3, #1
 8003aca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003ace:	4b15      	ldr	r3, [pc, #84]	@ (8003b24 <HAL_TIM_Base_MspInit+0x78>)
 8003ad0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	60fb      	str	r3, [r7, #12]
 8003ada:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003adc:	e01b      	b.n	8003b16 <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM16)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a11      	ldr	r2, [pc, #68]	@ (8003b28 <HAL_TIM_Base_MspInit+0x7c>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d116      	bne.n	8003b16 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8003b24 <HAL_TIM_Base_MspInit+0x78>)
 8003aea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003aee:	4a0d      	ldr	r2, [pc, #52]	@ (8003b24 <HAL_TIM_Base_MspInit+0x78>)
 8003af0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003af4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003af8:	4b0a      	ldr	r3, [pc, #40]	@ (8003b24 <HAL_TIM_Base_MspInit+0x78>)
 8003afa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b02:	60bb      	str	r3, [r7, #8]
 8003b04:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8003b06:	2200      	movs	r2, #0
 8003b08:	2100      	movs	r1, #0
 8003b0a:	2075      	movs	r0, #117	@ 0x75
 8003b0c:	f002 fd13 	bl	8006536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8003b10:	2075      	movs	r0, #117	@ 0x75
 8003b12:	f002 fd2a 	bl	800656a <HAL_NVIC_EnableIRQ>
}
 8003b16:	bf00      	nop
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	40010000 	.word	0x40010000
 8003b24:	58024400 	.word	0x58024400
 8003b28:	40014400 	.word	0x40014400

08003b2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b088      	sub	sp, #32
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b34:	f107 030c 	add.w	r3, r7, #12
 8003b38:	2200      	movs	r2, #0
 8003b3a:	601a      	str	r2, [r3, #0]
 8003b3c:	605a      	str	r2, [r3, #4]
 8003b3e:	609a      	str	r2, [r3, #8]
 8003b40:	60da      	str	r2, [r3, #12]
 8003b42:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a13      	ldr	r2, [pc, #76]	@ (8003b98 <HAL_TIM_MspPostInit+0x6c>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d11f      	bne.n	8003b8e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b4e:	4b13      	ldr	r3, [pc, #76]	@ (8003b9c <HAL_TIM_MspPostInit+0x70>)
 8003b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b54:	4a11      	ldr	r2, [pc, #68]	@ (8003b9c <HAL_TIM_MspPostInit+0x70>)
 8003b56:	f043 0310 	orr.w	r3, r3, #16
 8003b5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003b5e:	4b0f      	ldr	r3, [pc, #60]	@ (8003b9c <HAL_TIM_MspPostInit+0x70>)
 8003b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b64:	f003 0310 	and.w	r3, r3, #16
 8003b68:	60bb      	str	r3, [r7, #8]
 8003b6a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_FAN1_Pin|PWM_FAN2_Pin;
 8003b6c:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8003b70:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b72:	2302      	movs	r3, #2
 8003b74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b76:	2300      	movs	r3, #0
 8003b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b82:	f107 030c 	add.w	r3, r7, #12
 8003b86:	4619      	mov	r1, r3
 8003b88:	4805      	ldr	r0, [pc, #20]	@ (8003ba0 <HAL_TIM_MspPostInit+0x74>)
 8003b8a:	f005 ffef 	bl	8009b6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003b8e:	bf00      	nop
 8003b90:	3720      	adds	r7, #32
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	40010000 	.word	0x40010000
 8003b9c:	58024400 	.word	0x58024400
 8003ba0:	58021000 	.word	0x58021000

08003ba4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b0ba      	sub	sp, #232	@ 0xe8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bac:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	601a      	str	r2, [r3, #0]
 8003bb4:	605a      	str	r2, [r3, #4]
 8003bb6:	609a      	str	r2, [r3, #8]
 8003bb8:	60da      	str	r2, [r3, #12]
 8003bba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003bbc:	f107 0318 	add.w	r3, r7, #24
 8003bc0:	22b8      	movs	r2, #184	@ 0xb8
 8003bc2:	2100      	movs	r1, #0
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f011 f848 	bl	8014c5a <memset>
  if(huart->Instance==USART1)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a4d      	ldr	r2, [pc, #308]	@ (8003d04 <HAL_UART_MspInit+0x160>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d147      	bne.n	8003c64 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003bd4:	f04f 0201 	mov.w	r2, #1
 8003bd8:	f04f 0300 	mov.w	r3, #0
 8003bdc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003be0:	2300      	movs	r3, #0
 8003be2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003be6:	f107 0318 	add.w	r3, r7, #24
 8003bea:	4618      	mov	r0, r3
 8003bec:	f007 f938 	bl	800ae60 <HAL_RCCEx_PeriphCLKConfig>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003bf6:	f7ff f8f3 	bl	8002de0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003bfa:	4b43      	ldr	r3, [pc, #268]	@ (8003d08 <HAL_UART_MspInit+0x164>)
 8003bfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c00:	4a41      	ldr	r2, [pc, #260]	@ (8003d08 <HAL_UART_MspInit+0x164>)
 8003c02:	f043 0310 	orr.w	r3, r3, #16
 8003c06:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003c0a:	4b3f      	ldr	r3, [pc, #252]	@ (8003d08 <HAL_UART_MspInit+0x164>)
 8003c0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c10:	f003 0310 	and.w	r3, r3, #16
 8003c14:	617b      	str	r3, [r7, #20]
 8003c16:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c18:	4b3b      	ldr	r3, [pc, #236]	@ (8003d08 <HAL_UART_MspInit+0x164>)
 8003c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c1e:	4a3a      	ldr	r2, [pc, #232]	@ (8003d08 <HAL_UART_MspInit+0x164>)
 8003c20:	f043 0301 	orr.w	r3, r3, #1
 8003c24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003c28:	4b37      	ldr	r3, [pc, #220]	@ (8003d08 <HAL_UART_MspInit+0x164>)
 8003c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	613b      	str	r3, [r7, #16]
 8003c34:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_GPS_Pin|USART1_RX_GPS_Pin;
 8003c36:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003c3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c3e:	2302      	movs	r3, #2
 8003c40:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c44:	2300      	movs	r3, #0
 8003c46:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c50:	2307      	movs	r3, #7
 8003c52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c56:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	482b      	ldr	r0, [pc, #172]	@ (8003d0c <HAL_UART_MspInit+0x168>)
 8003c5e:	f005 ff85 	bl	8009b6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003c62:	e04a      	b.n	8003cfa <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART2)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a29      	ldr	r2, [pc, #164]	@ (8003d10 <HAL_UART_MspInit+0x16c>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d145      	bne.n	8003cfa <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003c6e:	f04f 0202 	mov.w	r2, #2
 8003c72:	f04f 0300 	mov.w	r3, #0
 8003c76:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c80:	f107 0318 	add.w	r3, r7, #24
 8003c84:	4618      	mov	r0, r3
 8003c86:	f007 f8eb 	bl	800ae60 <HAL_RCCEx_PeriphCLKConfig>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d001      	beq.n	8003c94 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8003c90:	f7ff f8a6 	bl	8002de0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c94:	4b1c      	ldr	r3, [pc, #112]	@ (8003d08 <HAL_UART_MspInit+0x164>)
 8003c96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003c9a:	4a1b      	ldr	r2, [pc, #108]	@ (8003d08 <HAL_UART_MspInit+0x164>)
 8003c9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ca0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003ca4:	4b18      	ldr	r3, [pc, #96]	@ (8003d08 <HAL_UART_MspInit+0x164>)
 8003ca6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cae:	60fb      	str	r3, [r7, #12]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cb2:	4b15      	ldr	r3, [pc, #84]	@ (8003d08 <HAL_UART_MspInit+0x164>)
 8003cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003cb8:	4a13      	ldr	r2, [pc, #76]	@ (8003d08 <HAL_UART_MspInit+0x164>)
 8003cba:	f043 0301 	orr.w	r3, r3, #1
 8003cbe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003cc2:	4b11      	ldr	r3, [pc, #68]	@ (8003d08 <HAL_UART_MspInit+0x164>)
 8003cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003cc8:	f003 0301 	and.w	r3, r3, #1
 8003ccc:	60bb      	str	r3, [r7, #8]
 8003cce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003cd0:	230c      	movs	r3, #12
 8003cd2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003ce8:	2307      	movs	r3, #7
 8003cea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cee:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	4805      	ldr	r0, [pc, #20]	@ (8003d0c <HAL_UART_MspInit+0x168>)
 8003cf6:	f005 ff39 	bl	8009b6c <HAL_GPIO_Init>
}
 8003cfa:	bf00      	nop
 8003cfc:	37e8      	adds	r7, #232	@ 0xe8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	40011000 	.word	0x40011000
 8003d08:	58024400 	.word	0x58024400
 8003d0c:	58020000 	.word	0x58020000
 8003d10:	40004400 	.word	0x40004400

08003d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d18:	bf00      	nop
 8003d1a:	e7fd      	b.n	8003d18 <NMI_Handler+0x4>

08003d1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d20:	bf00      	nop
 8003d22:	e7fd      	b.n	8003d20 <HardFault_Handler+0x4>

08003d24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d28:	bf00      	nop
 8003d2a:	e7fd      	b.n	8003d28 <MemManage_Handler+0x4>

08003d2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d30:	bf00      	nop
 8003d32:	e7fd      	b.n	8003d30 <BusFault_Handler+0x4>

08003d34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d38:	bf00      	nop
 8003d3a:	e7fd      	b.n	8003d38 <UsageFault_Handler+0x4>

08003d3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d40:	bf00      	nop
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d4e:	bf00      	nop
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d5c:	bf00      	nop
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr

08003d66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d6a:	f000 fa27 	bl	80041bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d6e:	bf00      	nop
 8003d70:	bd80      	pop	{r7, pc}
	...

08003d74 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003d78:	4802      	ldr	r0, [pc, #8]	@ (8003d84 <DMA1_Stream0_IRQHandler+0x10>)
 8003d7a:	f003 f9d3 	bl	8007124 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003d7e:	bf00      	nop
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	240002ec 	.word	0x240002ec

08003d88 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003d8c:	4803      	ldr	r0, [pc, #12]	@ (8003d9c <ADC_IRQHandler+0x14>)
 8003d8e:	f001 f829 	bl	8004de4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8003d92:	4803      	ldr	r0, [pc, #12]	@ (8003da0 <ADC_IRQHandler+0x18>)
 8003d94:	f001 f826 	bl	8004de4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003d98:	bf00      	nop
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	2400020c 	.word	0x2400020c
 8003da0:	2400027c 	.word	0x2400027c

08003da4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8003da8:	4802      	ldr	r0, [pc, #8]	@ (8003db4 <FDCAN1_IT0_IRQHandler+0x10>)
 8003daa:	f005 f9dd 	bl	8009168 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8003dae:	bf00      	nop
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	24000364 	.word	0x24000364

08003db8 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8003dbc:	4802      	ldr	r0, [pc, #8]	@ (8003dc8 <FDCAN2_IT0_IRQHandler+0x10>)
 8003dbe:	f005 f9d3 	bl	8009168 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8003dc2:	bf00      	nop
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	24000404 	.word	0x24000404

08003dcc <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8003dd0:	4802      	ldr	r0, [pc, #8]	@ (8003ddc <SDMMC1_IRQHandler+0x10>)
 8003dd2:	f009 fe9b 	bl	800db0c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8003dd6:	bf00      	nop
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	24000544 	.word	0x24000544

08003de0 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003de4:	4802      	ldr	r0, [pc, #8]	@ (8003df0 <TIM16_IRQHandler+0x10>)
 8003de6:	f00c fb6a 	bl	80104be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8003dea:	bf00      	nop
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	24000694 	.word	0x24000694

08003df4 <FDCAN3_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 0.
  */
void FDCAN3_IT0_IRQHandler(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 0 */

  /* USER CODE END FDCAN3_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 8003df8:	4802      	ldr	r0, [pc, #8]	@ (8003e04 <FDCAN3_IT0_IRQHandler+0x10>)
 8003dfa:	f005 f9b5 	bl	8009168 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 1 */

  /* USER CODE END FDCAN3_IT0_IRQn 1 */
}
 8003dfe:	bf00      	nop
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	240004a4 	.word	0x240004a4

08003e08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	af00      	add	r7, sp, #0
  return 1;
 8003e0c:	2301      	movs	r3, #1
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <_kill>:

int _kill(int pid, int sig)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003e22:	f010 ff6d 	bl	8014d00 <__errno>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2216      	movs	r2, #22
 8003e2a:	601a      	str	r2, [r3, #0]
  return -1;
 8003e2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3708      	adds	r7, #8
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <_exit>:

void _exit (int status)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003e40:	f04f 31ff 	mov.w	r1, #4294967295
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f7ff ffe7 	bl	8003e18 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003e4a:	bf00      	nop
 8003e4c:	e7fd      	b.n	8003e4a <_exit+0x12>

08003e4e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b086      	sub	sp, #24
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	60f8      	str	r0, [r7, #12]
 8003e56:	60b9      	str	r1, [r7, #8]
 8003e58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	617b      	str	r3, [r7, #20]
 8003e5e:	e00a      	b.n	8003e76 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003e60:	f3af 8000 	nop.w
 8003e64:	4601      	mov	r1, r0
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	1c5a      	adds	r2, r3, #1
 8003e6a:	60ba      	str	r2, [r7, #8]
 8003e6c:	b2ca      	uxtb	r2, r1
 8003e6e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	3301      	adds	r3, #1
 8003e74:	617b      	str	r3, [r7, #20]
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	dbf0      	blt.n	8003e60 <_read+0x12>
  }

  return len;
 8003e7e:	687b      	ldr	r3, [r7, #4]
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3718      	adds	r7, #24
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b086      	sub	sp, #24
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e94:	2300      	movs	r3, #0
 8003e96:	617b      	str	r3, [r7, #20]
 8003e98:	e009      	b.n	8003eae <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	1c5a      	adds	r2, r3, #1
 8003e9e:	60ba      	str	r2, [r7, #8]
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	3301      	adds	r3, #1
 8003eac:	617b      	str	r3, [r7, #20]
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	dbf1      	blt.n	8003e9a <_write+0x12>
  }
  return len;
 8003eb6:	687b      	ldr	r3, [r7, #4]
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3718      	adds	r7, #24
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <_close>:

int _close(int file)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003ec8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ee8:	605a      	str	r2, [r3, #4]
  return 0;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <_isatty>:

int _isatty(int file)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003f00:	2301      	movs	r3, #1
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr

08003f0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	b085      	sub	sp, #20
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	60f8      	str	r0, [r7, #12]
 8003f16:	60b9      	str	r1, [r7, #8]
 8003f18:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3714      	adds	r7, #20
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f30:	4a14      	ldr	r2, [pc, #80]	@ (8003f84 <_sbrk+0x5c>)
 8003f32:	4b15      	ldr	r3, [pc, #84]	@ (8003f88 <_sbrk+0x60>)
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f3c:	4b13      	ldr	r3, [pc, #76]	@ (8003f8c <_sbrk+0x64>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d102      	bne.n	8003f4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f44:	4b11      	ldr	r3, [pc, #68]	@ (8003f8c <_sbrk+0x64>)
 8003f46:	4a12      	ldr	r2, [pc, #72]	@ (8003f90 <_sbrk+0x68>)
 8003f48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f4a:	4b10      	ldr	r3, [pc, #64]	@ (8003f8c <_sbrk+0x64>)
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4413      	add	r3, r2
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d207      	bcs.n	8003f68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f58:	f010 fed2 	bl	8014d00 <__errno>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	220c      	movs	r2, #12
 8003f60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f62:	f04f 33ff 	mov.w	r3, #4294967295
 8003f66:	e009      	b.n	8003f7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f68:	4b08      	ldr	r3, [pc, #32]	@ (8003f8c <_sbrk+0x64>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f6e:	4b07      	ldr	r3, [pc, #28]	@ (8003f8c <_sbrk+0x64>)
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4413      	add	r3, r2
 8003f76:	4a05      	ldr	r2, [pc, #20]	@ (8003f8c <_sbrk+0x64>)
 8003f78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3718      	adds	r7, #24
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	24050000 	.word	0x24050000
 8003f88:	00000400 	.word	0x00000400
 8003f8c:	240009a4 	.word	0x240009a4
 8003f90:	24000b18 	.word	0x24000b18

08003f94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003f98:	4b32      	ldr	r3, [pc, #200]	@ (8004064 <SystemInit+0xd0>)
 8003f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f9e:	4a31      	ldr	r2, [pc, #196]	@ (8004064 <SystemInit+0xd0>)
 8003fa0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003fa4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003fa8:	4b2f      	ldr	r3, [pc, #188]	@ (8004068 <SystemInit+0xd4>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 030f 	and.w	r3, r3, #15
 8003fb0:	2b06      	cmp	r3, #6
 8003fb2:	d807      	bhi.n	8003fc4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003fb4:	4b2c      	ldr	r3, [pc, #176]	@ (8004068 <SystemInit+0xd4>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f023 030f 	bic.w	r3, r3, #15
 8003fbc:	4a2a      	ldr	r2, [pc, #168]	@ (8004068 <SystemInit+0xd4>)
 8003fbe:	f043 0307 	orr.w	r3, r3, #7
 8003fc2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003fc4:	4b29      	ldr	r3, [pc, #164]	@ (800406c <SystemInit+0xd8>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a28      	ldr	r2, [pc, #160]	@ (800406c <SystemInit+0xd8>)
 8003fca:	f043 0301 	orr.w	r3, r3, #1
 8003fce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003fd0:	4b26      	ldr	r3, [pc, #152]	@ (800406c <SystemInit+0xd8>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003fd6:	4b25      	ldr	r3, [pc, #148]	@ (800406c <SystemInit+0xd8>)
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	4924      	ldr	r1, [pc, #144]	@ (800406c <SystemInit+0xd8>)
 8003fdc:	4b24      	ldr	r3, [pc, #144]	@ (8004070 <SystemInit+0xdc>)
 8003fde:	4013      	ands	r3, r2
 8003fe0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003fe2:	4b21      	ldr	r3, [pc, #132]	@ (8004068 <SystemInit+0xd4>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0308 	and.w	r3, r3, #8
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d007      	beq.n	8003ffe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003fee:	4b1e      	ldr	r3, [pc, #120]	@ (8004068 <SystemInit+0xd4>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f023 030f 	bic.w	r3, r3, #15
 8003ff6:	4a1c      	ldr	r2, [pc, #112]	@ (8004068 <SystemInit+0xd4>)
 8003ff8:	f043 0307 	orr.w	r3, r3, #7
 8003ffc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003ffe:	4b1b      	ldr	r3, [pc, #108]	@ (800406c <SystemInit+0xd8>)
 8004000:	2200      	movs	r2, #0
 8004002:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004004:	4b19      	ldr	r3, [pc, #100]	@ (800406c <SystemInit+0xd8>)
 8004006:	2200      	movs	r2, #0
 8004008:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800400a:	4b18      	ldr	r3, [pc, #96]	@ (800406c <SystemInit+0xd8>)
 800400c:	2200      	movs	r2, #0
 800400e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004010:	4b16      	ldr	r3, [pc, #88]	@ (800406c <SystemInit+0xd8>)
 8004012:	4a18      	ldr	r2, [pc, #96]	@ (8004074 <SystemInit+0xe0>)
 8004014:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004016:	4b15      	ldr	r3, [pc, #84]	@ (800406c <SystemInit+0xd8>)
 8004018:	4a17      	ldr	r2, [pc, #92]	@ (8004078 <SystemInit+0xe4>)
 800401a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800401c:	4b13      	ldr	r3, [pc, #76]	@ (800406c <SystemInit+0xd8>)
 800401e:	4a17      	ldr	r2, [pc, #92]	@ (800407c <SystemInit+0xe8>)
 8004020:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004022:	4b12      	ldr	r3, [pc, #72]	@ (800406c <SystemInit+0xd8>)
 8004024:	2200      	movs	r2, #0
 8004026:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004028:	4b10      	ldr	r3, [pc, #64]	@ (800406c <SystemInit+0xd8>)
 800402a:	4a14      	ldr	r2, [pc, #80]	@ (800407c <SystemInit+0xe8>)
 800402c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800402e:	4b0f      	ldr	r3, [pc, #60]	@ (800406c <SystemInit+0xd8>)
 8004030:	2200      	movs	r2, #0
 8004032:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004034:	4b0d      	ldr	r3, [pc, #52]	@ (800406c <SystemInit+0xd8>)
 8004036:	4a11      	ldr	r2, [pc, #68]	@ (800407c <SystemInit+0xe8>)
 8004038:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800403a:	4b0c      	ldr	r3, [pc, #48]	@ (800406c <SystemInit+0xd8>)
 800403c:	2200      	movs	r2, #0
 800403e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004040:	4b0a      	ldr	r3, [pc, #40]	@ (800406c <SystemInit+0xd8>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a09      	ldr	r2, [pc, #36]	@ (800406c <SystemInit+0xd8>)
 8004046:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800404a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800404c:	4b07      	ldr	r3, [pc, #28]	@ (800406c <SystemInit+0xd8>)
 800404e:	2200      	movs	r2, #0
 8004050:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004052:	4b0b      	ldr	r3, [pc, #44]	@ (8004080 <SystemInit+0xec>)
 8004054:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8004058:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800405a:	bf00      	nop
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	e000ed00 	.word	0xe000ed00
 8004068:	52002000 	.word	0x52002000
 800406c:	58024400 	.word	0x58024400
 8004070:	eaf6ed7f 	.word	0xeaf6ed7f
 8004074:	02020200 	.word	0x02020200
 8004078:	01ff0000 	.word	0x01ff0000
 800407c:	01010280 	.word	0x01010280
 8004080:	52004000 	.word	0x52004000

08004084 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004084:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80040bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004088:	f7ff ff84 	bl	8003f94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800408c:	480c      	ldr	r0, [pc, #48]	@ (80040c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800408e:	490d      	ldr	r1, [pc, #52]	@ (80040c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004090:	4a0d      	ldr	r2, [pc, #52]	@ (80040c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004092:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004094:	e002      	b.n	800409c <LoopCopyDataInit>

08004096 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004096:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004098:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800409a:	3304      	adds	r3, #4

0800409c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800409c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800409e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040a0:	d3f9      	bcc.n	8004096 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040a2:	4a0a      	ldr	r2, [pc, #40]	@ (80040cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80040a4:	4c0a      	ldr	r4, [pc, #40]	@ (80040d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80040a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040a8:	e001      	b.n	80040ae <LoopFillZerobss>

080040aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040ac:	3204      	adds	r2, #4

080040ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040b0:	d3fb      	bcc.n	80040aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80040b2:	f010 fe2b 	bl	8014d0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80040b6:	f7fc fd0f 	bl	8000ad8 <main>
  bx  lr
 80040ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80040bc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80040c0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80040c4:	240001e8 	.word	0x240001e8
  ldr r2, =_sidata
 80040c8:	08018cfc 	.word	0x08018cfc
  ldr r2, =_sbss
 80040cc:	240001e8 	.word	0x240001e8
  ldr r4, =_ebss
 80040d0:	24000b14 	.word	0x24000b14

080040d4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80040d4:	e7fe      	b.n	80040d4 <ADC3_IRQHandler>
	...

080040d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040de:	2003      	movs	r0, #3
 80040e0:	f002 fa1e 	bl	8006520 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80040e4:	f006 fce6 	bl	800aab4 <HAL_RCC_GetSysClockFreq>
 80040e8:	4602      	mov	r2, r0
 80040ea:	4b15      	ldr	r3, [pc, #84]	@ (8004140 <HAL_Init+0x68>)
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	0a1b      	lsrs	r3, r3, #8
 80040f0:	f003 030f 	and.w	r3, r3, #15
 80040f4:	4913      	ldr	r1, [pc, #76]	@ (8004144 <HAL_Init+0x6c>)
 80040f6:	5ccb      	ldrb	r3, [r1, r3]
 80040f8:	f003 031f 	and.w	r3, r3, #31
 80040fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004100:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004102:	4b0f      	ldr	r3, [pc, #60]	@ (8004140 <HAL_Init+0x68>)
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	f003 030f 	and.w	r3, r3, #15
 800410a:	4a0e      	ldr	r2, [pc, #56]	@ (8004144 <HAL_Init+0x6c>)
 800410c:	5cd3      	ldrb	r3, [r2, r3]
 800410e:	f003 031f 	and.w	r3, r3, #31
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	fa22 f303 	lsr.w	r3, r2, r3
 8004118:	4a0b      	ldr	r2, [pc, #44]	@ (8004148 <HAL_Init+0x70>)
 800411a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800411c:	4a0b      	ldr	r2, [pc, #44]	@ (800414c <HAL_Init+0x74>)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004122:	200f      	movs	r0, #15
 8004124:	f000 f814 	bl	8004150 <HAL_InitTick>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e002      	b.n	8004138 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004132:	f7ff f921 	bl	8003378 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3708      	adds	r7, #8
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	58024400 	.word	0x58024400
 8004144:	08018860 	.word	0x08018860
 8004148:	24000014 	.word	0x24000014
 800414c:	24000010 	.word	0x24000010

08004150 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004158:	4b15      	ldr	r3, [pc, #84]	@ (80041b0 <HAL_InitTick+0x60>)
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d101      	bne.n	8004164 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e021      	b.n	80041a8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004164:	4b13      	ldr	r3, [pc, #76]	@ (80041b4 <HAL_InitTick+0x64>)
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	4b11      	ldr	r3, [pc, #68]	@ (80041b0 <HAL_InitTick+0x60>)
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	4619      	mov	r1, r3
 800416e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004172:	fbb3 f3f1 	udiv	r3, r3, r1
 8004176:	fbb2 f3f3 	udiv	r3, r2, r3
 800417a:	4618      	mov	r0, r3
 800417c:	f002 fa03 	bl	8006586 <HAL_SYSTICK_Config>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e00e      	b.n	80041a8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2b0f      	cmp	r3, #15
 800418e:	d80a      	bhi.n	80041a6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004190:	2200      	movs	r2, #0
 8004192:	6879      	ldr	r1, [r7, #4]
 8004194:	f04f 30ff 	mov.w	r0, #4294967295
 8004198:	f002 f9cd 	bl	8006536 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800419c:	4a06      	ldr	r2, [pc, #24]	@ (80041b8 <HAL_InitTick+0x68>)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80041a2:	2300      	movs	r3, #0
 80041a4:	e000      	b.n	80041a8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3708      	adds	r7, #8
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	2400001c 	.word	0x2400001c
 80041b4:	24000010 	.word	0x24000010
 80041b8:	24000018 	.word	0x24000018

080041bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80041c0:	4b06      	ldr	r3, [pc, #24]	@ (80041dc <HAL_IncTick+0x20>)
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	461a      	mov	r2, r3
 80041c6:	4b06      	ldr	r3, [pc, #24]	@ (80041e0 <HAL_IncTick+0x24>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4413      	add	r3, r2
 80041cc:	4a04      	ldr	r2, [pc, #16]	@ (80041e0 <HAL_IncTick+0x24>)
 80041ce:	6013      	str	r3, [r2, #0]
}
 80041d0:	bf00      	nop
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	2400001c 	.word	0x2400001c
 80041e0:	240009a8 	.word	0x240009a8

080041e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041e4:	b480      	push	{r7}
 80041e6:	af00      	add	r7, sp, #0
  return uwTick;
 80041e8:	4b03      	ldr	r3, [pc, #12]	@ (80041f8 <HAL_GetTick+0x14>)
 80041ea:	681b      	ldr	r3, [r3, #0]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	240009a8 	.word	0x240009a8

080041fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004204:	f7ff ffee 	bl	80041e4 <HAL_GetTick>
 8004208:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004214:	d005      	beq.n	8004222 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004216:	4b0a      	ldr	r3, [pc, #40]	@ (8004240 <HAL_Delay+0x44>)
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	461a      	mov	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	4413      	add	r3, r2
 8004220:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004222:	bf00      	nop
 8004224:	f7ff ffde 	bl	80041e4 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	429a      	cmp	r2, r3
 8004232:	d8f7      	bhi.n	8004224 <HAL_Delay+0x28>
  {
  }
}
 8004234:	bf00      	nop
 8004236:	bf00      	nop
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	2400001c 	.word	0x2400001c

08004244 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	431a      	orrs	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	609a      	str	r2, [r3, #8]
}
 800425e:	bf00      	nop
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800426a:	b480      	push	{r7}
 800426c:	b083      	sub	sp, #12
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
 8004272:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	431a      	orrs	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	609a      	str	r2, [r3, #8]
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b087      	sub	sp, #28
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
 80042b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	3360      	adds	r3, #96	@ 0x60
 80042be:	461a      	mov	r2, r3
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	4413      	add	r3, r2
 80042c6:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	4a10      	ldr	r2, [pc, #64]	@ (800430c <LL_ADC_SetOffset+0x60>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d10b      	bne.n	80042e8 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	4313      	orrs	r3, r2
 80042de:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80042e6:	e00b      	b.n	8004300 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	430b      	orrs	r3, r1
 80042fa:	431a      	orrs	r2, r3
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	601a      	str	r2, [r3, #0]
}
 8004300:	bf00      	nop
 8004302:	371c      	adds	r7, #28
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr
 800430c:	58026000 	.word	0x58026000

08004310 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	3360      	adds	r3, #96	@ 0x60
 800431e:	461a      	mov	r2, r3
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	4413      	add	r3, r2
 8004326:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004330:	4618      	mov	r0, r3
 8004332:	3714      	adds	r7, #20
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	f003 031f 	and.w	r3, r3, #31
 8004356:	6879      	ldr	r1, [r7, #4]
 8004358:	fa01 f303 	lsl.w	r3, r1, r3
 800435c:	431a      	orrs	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	611a      	str	r2, [r3, #16]
}
 8004362:	bf00      	nop
 8004364:	3714      	adds	r7, #20
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
	...

08004370 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004370:	b480      	push	{r7}
 8004372:	b087      	sub	sp, #28
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4a0c      	ldr	r2, [pc, #48]	@ (80043b0 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d00e      	beq.n	80043a2 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	3360      	adds	r3, #96	@ 0x60
 8004388:	461a      	mov	r2, r3
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	4413      	add	r3, r2
 8004390:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	431a      	orrs	r2, r3
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	601a      	str	r2, [r3, #0]
  }
}
 80043a2:	bf00      	nop
 80043a4:	371c      	adds	r7, #28
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	58026000 	.word	0x58026000

080043b4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b087      	sub	sp, #28
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	4a0c      	ldr	r2, [pc, #48]	@ (80043f4 <LL_ADC_SetOffsetSaturation+0x40>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d10e      	bne.n	80043e6 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	3360      	adds	r3, #96	@ 0x60
 80043cc:	461a      	mov	r2, r3
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4413      	add	r3, r2
 80043d4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	431a      	orrs	r2, r3
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80043e6:	bf00      	nop
 80043e8:	371c      	adds	r7, #28
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	58026000 	.word	0x58026000

080043f8 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b087      	sub	sp, #28
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	4a0c      	ldr	r2, [pc, #48]	@ (8004438 <LL_ADC_SetOffsetSign+0x40>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d10e      	bne.n	800442a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	3360      	adds	r3, #96	@ 0x60
 8004410:	461a      	mov	r2, r3
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	4413      	add	r3, r2
 8004418:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	431a      	orrs	r2, r3
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800442a:	bf00      	nop
 800442c:	371c      	adds	r7, #28
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	58026000 	.word	0x58026000

0800443c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800443c:	b480      	push	{r7}
 800443e:	b087      	sub	sp, #28
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	3360      	adds	r3, #96	@ 0x60
 800444c:	461a      	mov	r2, r3
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	4413      	add	r3, r2
 8004454:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	4a0c      	ldr	r2, [pc, #48]	@ (800448c <LL_ADC_SetOffsetState+0x50>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d108      	bne.n	8004470 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	431a      	orrs	r2, r3
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800446e:	e007      	b.n	8004480 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	431a      	orrs	r2, r3
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	601a      	str	r2, [r3, #0]
}
 8004480:	bf00      	nop
 8004482:	371c      	adds	r7, #28
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr
 800448c:	58026000 	.word	0x58026000

08004490 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d101      	bne.n	80044a8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80044a4:	2301      	movs	r3, #1
 80044a6:	e000      	b.n	80044aa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b087      	sub	sp, #28
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	60f8      	str	r0, [r7, #12]
 80044be:	60b9      	str	r1, [r7, #8]
 80044c0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	3330      	adds	r3, #48	@ 0x30
 80044c6:	461a      	mov	r2, r3
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	0a1b      	lsrs	r3, r3, #8
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	f003 030c 	and.w	r3, r3, #12
 80044d2:	4413      	add	r3, r2
 80044d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	f003 031f 	and.w	r3, r3, #31
 80044e0:	211f      	movs	r1, #31
 80044e2:	fa01 f303 	lsl.w	r3, r1, r3
 80044e6:	43db      	mvns	r3, r3
 80044e8:	401a      	ands	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	0e9b      	lsrs	r3, r3, #26
 80044ee:	f003 011f 	and.w	r1, r3, #31
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	f003 031f 	and.w	r3, r3, #31
 80044f8:	fa01 f303 	lsl.w	r3, r1, r3
 80044fc:	431a      	orrs	r2, r3
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004502:	bf00      	nop
 8004504:	371c      	adds	r7, #28
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800450e:	b480      	push	{r7}
 8004510:	b083      	sub	sp, #12
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
 8004516:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	f023 0203 	bic.w	r2, r3, #3
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	431a      	orrs	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	60da      	str	r2, [r3, #12]
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f043 0201 	orr.w	r2, r3, #1
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	60da      	str	r2, [r3, #12]
}
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a08      	ldr	r2, [pc, #32]	@ (8004584 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d107      	bne.n	8004576 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	f023 0203 	bic.w	r2, r3, #3
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	431a      	orrs	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	60da      	str	r2, [r3, #12]
  }
}
 8004576:	bf00      	nop
 8004578:	370c      	adds	r7, #12
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	58026000 	.word	0x58026000

08004588 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004594:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8004598:	2b00      	cmp	r3, #0
 800459a:	d101      	bne.n	80045a0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800459c:	2301      	movs	r3, #1
 800459e:	e000      	b.n	80045a2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr

080045ae <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80045ae:	b480      	push	{r7}
 80045b0:	b087      	sub	sp, #28
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	60f8      	str	r0, [r7, #12]
 80045b6:	60b9      	str	r1, [r7, #8]
 80045b8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	3314      	adds	r3, #20
 80045be:	461a      	mov	r2, r3
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	0e5b      	lsrs	r3, r3, #25
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	f003 0304 	and.w	r3, r3, #4
 80045ca:	4413      	add	r3, r2
 80045cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	0d1b      	lsrs	r3, r3, #20
 80045d6:	f003 031f 	and.w	r3, r3, #31
 80045da:	2107      	movs	r1, #7
 80045dc:	fa01 f303 	lsl.w	r3, r1, r3
 80045e0:	43db      	mvns	r3, r3
 80045e2:	401a      	ands	r2, r3
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	0d1b      	lsrs	r3, r3, #20
 80045e8:	f003 031f 	and.w	r3, r3, #31
 80045ec:	6879      	ldr	r1, [r7, #4]
 80045ee:	fa01 f303 	lsl.w	r3, r1, r3
 80045f2:	431a      	orrs	r2, r3
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80045f8:	bf00      	nop
 80045fa:	371c      	adds	r7, #28
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	4a1a      	ldr	r2, [pc, #104]	@ (800467c <LL_ADC_SetChannelSingleDiff+0x78>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d115      	bne.n	8004644 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004624:	43db      	mvns	r3, r3
 8004626:	401a      	ands	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f003 0318 	and.w	r3, r3, #24
 800462e:	4914      	ldr	r1, [pc, #80]	@ (8004680 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004630:	40d9      	lsrs	r1, r3
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	400b      	ands	r3, r1
 8004636:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800463a:	431a      	orrs	r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8004642:	e014      	b.n	800466e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004650:	43db      	mvns	r3, r3
 8004652:	401a      	ands	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f003 0318 	and.w	r3, r3, #24
 800465a:	4909      	ldr	r1, [pc, #36]	@ (8004680 <LL_ADC_SetChannelSingleDiff+0x7c>)
 800465c:	40d9      	lsrs	r1, r3
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	400b      	ands	r3, r1
 8004662:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004666:	431a      	orrs	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 800466e:	bf00      	nop
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	58026000 	.word	0x58026000
 8004680:	000fffff 	.word	0x000fffff

08004684 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f003 031f 	and.w	r3, r3, #31
}
 8004694:	4618      	mov	r0, r3
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689a      	ldr	r2, [r3, #8]
 80046c8:	4b04      	ldr	r3, [pc, #16]	@ (80046dc <LL_ADC_DisableDeepPowerDown+0x20>)
 80046ca:	4013      	ands	r3, r2
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	6093      	str	r3, [r2, #8]
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr
 80046dc:	5fffffc0 	.word	0x5fffffc0

080046e0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80046f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046f4:	d101      	bne.n	80046fa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80046f6:	2301      	movs	r3, #1
 80046f8:	e000      	b.n	80046fc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689a      	ldr	r2, [r3, #8]
 8004714:	4b05      	ldr	r3, [pc, #20]	@ (800472c <LL_ADC_EnableInternalRegulator+0x24>)
 8004716:	4013      	ands	r3, r2
 8004718:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004720:	bf00      	nop
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr
 800472c:	6fffffc0 	.word	0x6fffffc0

08004730 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004740:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004744:	d101      	bne.n	800474a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004746:	2301      	movs	r3, #1
 8004748:	e000      	b.n	800474c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689a      	ldr	r2, [r3, #8]
 8004764:	4b05      	ldr	r3, [pc, #20]	@ (800477c <LL_ADC_Enable+0x24>)
 8004766:	4013      	ands	r3, r2
 8004768:	f043 0201 	orr.w	r2, r3, #1
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004770:	bf00      	nop
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr
 800477c:	7fffffc0 	.word	0x7fffffc0

08004780 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f003 0301 	and.w	r3, r3, #1
 8004790:	2b01      	cmp	r3, #1
 8004792:	d101      	bne.n	8004798 <LL_ADC_IsEnabled+0x18>
 8004794:	2301      	movs	r3, #1
 8004796:	e000      	b.n	800479a <LL_ADC_IsEnabled+0x1a>
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
	...

080047a8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689a      	ldr	r2, [r3, #8]
 80047b4:	4b05      	ldr	r3, [pc, #20]	@ (80047cc <LL_ADC_REG_StartConversion+0x24>)
 80047b6:	4013      	ands	r3, r2
 80047b8:	f043 0204 	orr.w	r2, r3, #4
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr
 80047cc:	7fffffc0 	.word	0x7fffffc0

080047d0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f003 0304 	and.w	r3, r3, #4
 80047e0:	2b04      	cmp	r3, #4
 80047e2:	d101      	bne.n	80047e8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80047e4:	2301      	movs	r3, #1
 80047e6:	e000      	b.n	80047ea <LL_ADC_REG_IsConversionOngoing+0x1a>
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	370c      	adds	r7, #12
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr

080047f6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80047f6:	b480      	push	{r7}
 80047f8:	b083      	sub	sp, #12
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f003 0308 	and.w	r3, r3, #8
 8004806:	2b08      	cmp	r3, #8
 8004808:	d101      	bne.n	800480e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800480a:	2301      	movs	r3, #1
 800480c:	e000      	b.n	8004810 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800481c:	b590      	push	{r4, r7, lr}
 800481e:	b089      	sub	sp, #36	@ 0x24
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004824:	2300      	movs	r3, #0
 8004826:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004828:	2300      	movs	r3, #0
 800482a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d101      	bne.n	8004836 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e1ee      	b.n	8004c14 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004840:	2b00      	cmp	r3, #0
 8004842:	d109      	bne.n	8004858 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f7fe fdb1 	bl	80033ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4618      	mov	r0, r3
 800485e:	f7ff ff3f 	bl	80046e0 <LL_ADC_IsDeepPowerDownEnabled>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d004      	beq.n	8004872 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4618      	mov	r0, r3
 800486e:	f7ff ff25 	bl	80046bc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4618      	mov	r0, r3
 8004878:	f7ff ff5a 	bl	8004730 <LL_ADC_IsInternalRegulatorEnabled>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d114      	bne.n	80048ac <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4618      	mov	r0, r3
 8004888:	f7ff ff3e 	bl	8004708 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800488c:	4b8e      	ldr	r3, [pc, #568]	@ (8004ac8 <HAL_ADC_Init+0x2ac>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	099b      	lsrs	r3, r3, #6
 8004892:	4a8e      	ldr	r2, [pc, #568]	@ (8004acc <HAL_ADC_Init+0x2b0>)
 8004894:	fba2 2303 	umull	r2, r3, r2, r3
 8004898:	099b      	lsrs	r3, r3, #6
 800489a:	3301      	adds	r3, #1
 800489c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800489e:	e002      	b.n	80048a6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	3b01      	subs	r3, #1
 80048a4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1f9      	bne.n	80048a0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7ff ff3d 	bl	8004730 <LL_ADC_IsInternalRegulatorEnabled>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d10d      	bne.n	80048d8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048c0:	f043 0210 	orr.w	r2, r3, #16
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048cc:	f043 0201 	orr.w	r2, r3, #1
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4618      	mov	r0, r3
 80048de:	f7ff ff77 	bl	80047d0 <LL_ADC_REG_IsConversionOngoing>
 80048e2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048e8:	f003 0310 	and.w	r3, r3, #16
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f040 8188 	bne.w	8004c02 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f040 8184 	bne.w	8004c02 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048fe:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004902:	f043 0202 	orr.w	r2, r3, #2
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4618      	mov	r0, r3
 8004910:	f7ff ff36 	bl	8004780 <LL_ADC_IsEnabled>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d136      	bne.n	8004988 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a6c      	ldr	r2, [pc, #432]	@ (8004ad0 <HAL_ADC_Init+0x2b4>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d004      	beq.n	800492e <HAL_ADC_Init+0x112>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a6a      	ldr	r2, [pc, #424]	@ (8004ad4 <HAL_ADC_Init+0x2b8>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d10e      	bne.n	800494c <HAL_ADC_Init+0x130>
 800492e:	4868      	ldr	r0, [pc, #416]	@ (8004ad0 <HAL_ADC_Init+0x2b4>)
 8004930:	f7ff ff26 	bl	8004780 <LL_ADC_IsEnabled>
 8004934:	4604      	mov	r4, r0
 8004936:	4867      	ldr	r0, [pc, #412]	@ (8004ad4 <HAL_ADC_Init+0x2b8>)
 8004938:	f7ff ff22 	bl	8004780 <LL_ADC_IsEnabled>
 800493c:	4603      	mov	r3, r0
 800493e:	4323      	orrs	r3, r4
 8004940:	2b00      	cmp	r3, #0
 8004942:	bf0c      	ite	eq
 8004944:	2301      	moveq	r3, #1
 8004946:	2300      	movne	r3, #0
 8004948:	b2db      	uxtb	r3, r3
 800494a:	e008      	b.n	800495e <HAL_ADC_Init+0x142>
 800494c:	4862      	ldr	r0, [pc, #392]	@ (8004ad8 <HAL_ADC_Init+0x2bc>)
 800494e:	f7ff ff17 	bl	8004780 <LL_ADC_IsEnabled>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	bf0c      	ite	eq
 8004958:	2301      	moveq	r3, #1
 800495a:	2300      	movne	r3, #0
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d012      	beq.n	8004988 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a5a      	ldr	r2, [pc, #360]	@ (8004ad0 <HAL_ADC_Init+0x2b4>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d004      	beq.n	8004976 <HAL_ADC_Init+0x15a>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a58      	ldr	r2, [pc, #352]	@ (8004ad4 <HAL_ADC_Init+0x2b8>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d101      	bne.n	800497a <HAL_ADC_Init+0x15e>
 8004976:	4a59      	ldr	r2, [pc, #356]	@ (8004adc <HAL_ADC_Init+0x2c0>)
 8004978:	e000      	b.n	800497c <HAL_ADC_Init+0x160>
 800497a:	4a59      	ldr	r2, [pc, #356]	@ (8004ae0 <HAL_ADC_Init+0x2c4>)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	4619      	mov	r1, r3
 8004982:	4610      	mov	r0, r2
 8004984:	f7ff fc5e 	bl	8004244 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a52      	ldr	r2, [pc, #328]	@ (8004ad8 <HAL_ADC_Init+0x2bc>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d129      	bne.n	80049e6 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	7e5b      	ldrb	r3, [r3, #25]
 8004996:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800499c:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80049a2:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	2b08      	cmp	r3, #8
 80049aa:	d013      	beq.n	80049d4 <HAL_ADC_Init+0x1b8>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	2b0c      	cmp	r3, #12
 80049b2:	d00d      	beq.n	80049d0 <HAL_ADC_Init+0x1b4>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	2b1c      	cmp	r3, #28
 80049ba:	d007      	beq.n	80049cc <HAL_ADC_Init+0x1b0>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	2b18      	cmp	r3, #24
 80049c2:	d101      	bne.n	80049c8 <HAL_ADC_Init+0x1ac>
 80049c4:	2318      	movs	r3, #24
 80049c6:	e006      	b.n	80049d6 <HAL_ADC_Init+0x1ba>
 80049c8:	2300      	movs	r3, #0
 80049ca:	e004      	b.n	80049d6 <HAL_ADC_Init+0x1ba>
 80049cc:	2310      	movs	r3, #16
 80049ce:	e002      	b.n	80049d6 <HAL_ADC_Init+0x1ba>
 80049d0:	2308      	movs	r3, #8
 80049d2:	e000      	b.n	80049d6 <HAL_ADC_Init+0x1ba>
 80049d4:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80049d6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049de:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80049e0:	4313      	orrs	r3, r2
 80049e2:	61bb      	str	r3, [r7, #24]
 80049e4:	e00e      	b.n	8004a04 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	7e5b      	ldrb	r3, [r3, #25]
 80049ea:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80049f0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80049f6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049fe:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004a00:	4313      	orrs	r3, r2
 8004a02:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d106      	bne.n	8004a1c <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a12:	3b01      	subs	r3, #1
 8004a14:	045b      	lsls	r3, r3, #17
 8004a16:	69ba      	ldr	r2, [r7, #24]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d009      	beq.n	8004a38 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a28:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a30:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004a32:	69ba      	ldr	r2, [r7, #24]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a26      	ldr	r2, [pc, #152]	@ (8004ad8 <HAL_ADC_Init+0x2bc>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d115      	bne.n	8004a6e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68da      	ldr	r2, [r3, #12]
 8004a48:	4b26      	ldr	r3, [pc, #152]	@ (8004ae4 <HAL_ADC_Init+0x2c8>)
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	6812      	ldr	r2, [r2, #0]
 8004a50:	69b9      	ldr	r1, [r7, #24]
 8004a52:	430b      	orrs	r3, r1
 8004a54:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	611a      	str	r2, [r3, #16]
 8004a6c:	e009      	b.n	8004a82 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68da      	ldr	r2, [r3, #12]
 8004a74:	4b1c      	ldr	r3, [pc, #112]	@ (8004ae8 <HAL_ADC_Init+0x2cc>)
 8004a76:	4013      	ands	r3, r2
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	6812      	ldr	r2, [r2, #0]
 8004a7c:	69b9      	ldr	r1, [r7, #24]
 8004a7e:	430b      	orrs	r3, r1
 8004a80:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7ff fea2 	bl	80047d0 <LL_ADC_REG_IsConversionOngoing>
 8004a8c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7ff feaf 	bl	80047f6 <LL_ADC_INJ_IsConversionOngoing>
 8004a98:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f040 808e 	bne.w	8004bbe <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f040 808a 	bne.w	8004bbe <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a0a      	ldr	r2, [pc, #40]	@ (8004ad8 <HAL_ADC_Init+0x2bc>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d11b      	bne.n	8004aec <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	7e1b      	ldrb	r3, [r3, #24]
 8004ab8:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004ac0:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	61bb      	str	r3, [r7, #24]
 8004ac6:	e018      	b.n	8004afa <HAL_ADC_Init+0x2de>
 8004ac8:	24000010 	.word	0x24000010
 8004acc:	053e2d63 	.word	0x053e2d63
 8004ad0:	40022000 	.word	0x40022000
 8004ad4:	40022100 	.word	0x40022100
 8004ad8:	58026000 	.word	0x58026000
 8004adc:	40022300 	.word	0x40022300
 8004ae0:	58026300 	.word	0x58026300
 8004ae4:	fff04007 	.word	0xfff04007
 8004ae8:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	7e1b      	ldrb	r3, [r3, #24]
 8004af0:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8004af6:	4313      	orrs	r3, r2
 8004af8:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68da      	ldr	r2, [r3, #12]
 8004b00:	4b46      	ldr	r3, [pc, #280]	@ (8004c1c <HAL_ADC_Init+0x400>)
 8004b02:	4013      	ands	r3, r2
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	6812      	ldr	r2, [r2, #0]
 8004b08:	69b9      	ldr	r1, [r7, #24]
 8004b0a:	430b      	orrs	r3, r1
 8004b0c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d137      	bne.n	8004b88 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b1c:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a3f      	ldr	r2, [pc, #252]	@ (8004c20 <HAL_ADC_Init+0x404>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d116      	bne.n	8004b56 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	691a      	ldr	r2, [r3, #16]
 8004b2e:	4b3d      	ldr	r3, [pc, #244]	@ (8004c24 <HAL_ADC_Init+0x408>)
 8004b30:	4013      	ands	r3, r2
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004b3a:	4311      	orrs	r1, r2
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004b40:	4311      	orrs	r1, r2
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004b46:	430a      	orrs	r2, r1
 8004b48:	431a      	orrs	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f042 0201 	orr.w	r2, r2, #1
 8004b52:	611a      	str	r2, [r3, #16]
 8004b54:	e020      	b.n	8004b98 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	691a      	ldr	r2, [r3, #16]
 8004b5c:	4b32      	ldr	r3, [pc, #200]	@ (8004c28 <HAL_ADC_Init+0x40c>)
 8004b5e:	4013      	ands	r3, r2
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004b64:	3a01      	subs	r2, #1
 8004b66:	0411      	lsls	r1, r2, #16
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004b6c:	4311      	orrs	r1, r2
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004b72:	4311      	orrs	r1, r2
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f042 0201 	orr.w	r2, r2, #1
 8004b84:	611a      	str	r2, [r3, #16]
 8004b86:	e007      	b.n	8004b98 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	691a      	ldr	r2, [r3, #16]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f022 0201 	bic.w	r2, r2, #1
 8004b96:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	430a      	orrs	r2, r1
 8004bac:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a1b      	ldr	r2, [pc, #108]	@ (8004c20 <HAL_ADC_Init+0x404>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d002      	beq.n	8004bbe <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f001 f9b9 	bl	8005f30 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d10c      	bne.n	8004be0 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bcc:	f023 010f 	bic.w	r1, r3, #15
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	69db      	ldr	r3, [r3, #28]
 8004bd4:	1e5a      	subs	r2, r3, #1
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	631a      	str	r2, [r3, #48]	@ 0x30
 8004bde:	e007      	b.n	8004bf0 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f022 020f 	bic.w	r2, r2, #15
 8004bee:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bf4:	f023 0303 	bic.w	r3, r3, #3
 8004bf8:	f043 0201 	orr.w	r2, r3, #1
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	661a      	str	r2, [r3, #96]	@ 0x60
 8004c00:	e007      	b.n	8004c12 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c06:	f043 0210 	orr.w	r2, r3, #16
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004c12:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3724      	adds	r7, #36	@ 0x24
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd90      	pop	{r4, r7, pc}
 8004c1c:	ffffbffc 	.word	0xffffbffc
 8004c20:	58026000 	.word	0x58026000
 8004c24:	fc00f81f 	.word	0xfc00f81f
 8004c28:	fc00f81e 	.word	0xfc00f81e

08004c2c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a60      	ldr	r2, [pc, #384]	@ (8004dc0 <HAL_ADC_Start_DMA+0x194>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d004      	beq.n	8004c4c <HAL_ADC_Start_DMA+0x20>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a5f      	ldr	r2, [pc, #380]	@ (8004dc4 <HAL_ADC_Start_DMA+0x198>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d101      	bne.n	8004c50 <HAL_ADC_Start_DMA+0x24>
 8004c4c:	4b5e      	ldr	r3, [pc, #376]	@ (8004dc8 <HAL_ADC_Start_DMA+0x19c>)
 8004c4e:	e000      	b.n	8004c52 <HAL_ADC_Start_DMA+0x26>
 8004c50:	4b5e      	ldr	r3, [pc, #376]	@ (8004dcc <HAL_ADC_Start_DMA+0x1a0>)
 8004c52:	4618      	mov	r0, r3
 8004c54:	f7ff fd16 	bl	8004684 <LL_ADC_GetMultimode>
 8004c58:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7ff fdb6 	bl	80047d0 <LL_ADC_REG_IsConversionOngoing>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	f040 80a2 	bne.w	8004db0 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d101      	bne.n	8004c7a <HAL_ADC_Start_DMA+0x4e>
 8004c76:	2302      	movs	r3, #2
 8004c78:	e09d      	b.n	8004db6 <HAL_ADC_Start_DMA+0x18a>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d006      	beq.n	8004c96 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	2b05      	cmp	r3, #5
 8004c8c:	d003      	beq.n	8004c96 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	2b09      	cmp	r3, #9
 8004c92:	f040 8086 	bne.w	8004da2 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f001 f82c 	bl	8005cf4 <ADC_Enable>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004ca0:	7dfb      	ldrb	r3, [r7, #23]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d178      	bne.n	8004d98 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004caa:	4b49      	ldr	r3, [pc, #292]	@ (8004dd0 <HAL_ADC_Start_DMA+0x1a4>)
 8004cac:	4013      	ands	r3, r2
 8004cae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a42      	ldr	r2, [pc, #264]	@ (8004dc4 <HAL_ADC_Start_DMA+0x198>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d002      	beq.n	8004cc6 <HAL_ADC_Start_DMA+0x9a>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	e000      	b.n	8004cc8 <HAL_ADC_Start_DMA+0x9c>
 8004cc6:	4b3e      	ldr	r3, [pc, #248]	@ (8004dc0 <HAL_ADC_Start_DMA+0x194>)
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	6812      	ldr	r2, [r2, #0]
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d002      	beq.n	8004cd6 <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d105      	bne.n	8004ce2 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cda:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ce6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d006      	beq.n	8004cfc <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cf2:	f023 0206 	bic.w	r2, r3, #6
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	665a      	str	r2, [r3, #100]	@ 0x64
 8004cfa:	e002      	b.n	8004d02 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d06:	4a33      	ldr	r2, [pc, #204]	@ (8004dd4 <HAL_ADC_Start_DMA+0x1a8>)
 8004d08:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d0e:	4a32      	ldr	r2, [pc, #200]	@ (8004dd8 <HAL_ADC_Start_DMA+0x1ac>)
 8004d10:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d16:	4a31      	ldr	r2, [pc, #196]	@ (8004ddc <HAL_ADC_Start_DMA+0x1b0>)
 8004d18:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	221c      	movs	r2, #28
 8004d20:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	685a      	ldr	r2, [r3, #4]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f042 0210 	orr.w	r2, r2, #16
 8004d38:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a28      	ldr	r2, [pc, #160]	@ (8004de0 <HAL_ADC_Start_DMA+0x1b4>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d10f      	bne.n	8004d64 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004d4e:	005b      	lsls	r3, r3, #1
 8004d50:	4619      	mov	r1, r3
 8004d52:	4610      	mov	r0, r2
 8004d54:	f7ff fbfe 	bl	8004554 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7ff fbe9 	bl	8004534 <LL_ADC_EnableDMAReq>
 8004d62:	e007      	b.n	8004d74 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	4610      	mov	r0, r2
 8004d70:	f7ff fbcd 	bl	800450e <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	3340      	adds	r3, #64	@ 0x40
 8004d7e:	4619      	mov	r1, r3
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f001 ff64 	bl	8006c50 <HAL_DMA_Start_IT>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7ff fd09 	bl	80047a8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004d96:	e00d      	b.n	8004db4 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 8004da0:	e008      	b.n	8004db4 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8004dae:	e001      	b.n	8004db4 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004db0:	2302      	movs	r3, #2
 8004db2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004db4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3718      	adds	r7, #24
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	40022000 	.word	0x40022000
 8004dc4:	40022100 	.word	0x40022100
 8004dc8:	40022300 	.word	0x40022300
 8004dcc:	58026300 	.word	0x58026300
 8004dd0:	fffff0fe 	.word	0xfffff0fe
 8004dd4:	08005e09 	.word	0x08005e09
 8004dd8:	08005ee1 	.word	0x08005ee1
 8004ddc:	08005efd 	.word	0x08005efd
 8004de0:	58026000 	.word	0x58026000

08004de4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b08a      	sub	sp, #40	@ 0x28
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004dec:	2300      	movs	r3, #0
 8004dee:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a87      	ldr	r2, [pc, #540]	@ (8005024 <HAL_ADC_IRQHandler+0x240>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d004      	beq.n	8004e14 <HAL_ADC_IRQHandler+0x30>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a86      	ldr	r2, [pc, #536]	@ (8005028 <HAL_ADC_IRQHandler+0x244>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d101      	bne.n	8004e18 <HAL_ADC_IRQHandler+0x34>
 8004e14:	4b85      	ldr	r3, [pc, #532]	@ (800502c <HAL_ADC_IRQHandler+0x248>)
 8004e16:	e000      	b.n	8004e1a <HAL_ADC_IRQHandler+0x36>
 8004e18:	4b85      	ldr	r3, [pc, #532]	@ (8005030 <HAL_ADC_IRQHandler+0x24c>)
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7ff fc32 	bl	8004684 <LL_ADC_GetMultimode>
 8004e20:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	f003 0302 	and.w	r3, r3, #2
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d017      	beq.n	8004e5c <HAL_ADC_IRQHandler+0x78>
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	f003 0302 	and.w	r3, r3, #2
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d012      	beq.n	8004e5c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e3a:	f003 0310 	and.w	r3, r3, #16
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d105      	bne.n	8004e4e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e46:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f001 f9aa 	bl	80061a8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2202      	movs	r2, #2
 8004e5a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	f003 0304 	and.w	r3, r3, #4
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d004      	beq.n	8004e70 <HAL_ADC_IRQHandler+0x8c>
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	f003 0304 	and.w	r3, r3, #4
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10a      	bne.n	8004e86 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f000 8083 	beq.w	8004f82 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	f003 0308 	and.w	r3, r3, #8
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d07d      	beq.n	8004f82 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e8a:	f003 0310 	and.w	r3, r3, #16
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d105      	bne.n	8004e9e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e96:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7ff faf4 	bl	8004490 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d062      	beq.n	8004f74 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a5d      	ldr	r2, [pc, #372]	@ (8005028 <HAL_ADC_IRQHandler+0x244>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d002      	beq.n	8004ebe <HAL_ADC_IRQHandler+0xda>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	e000      	b.n	8004ec0 <HAL_ADC_IRQHandler+0xdc>
 8004ebe:	4b59      	ldr	r3, [pc, #356]	@ (8005024 <HAL_ADC_IRQHandler+0x240>)
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	6812      	ldr	r2, [r2, #0]
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d008      	beq.n	8004eda <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d005      	beq.n	8004eda <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	2b05      	cmp	r3, #5
 8004ed2:	d002      	beq.n	8004eda <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	2b09      	cmp	r3, #9
 8004ed8:	d104      	bne.n	8004ee4 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	623b      	str	r3, [r7, #32]
 8004ee2:	e00c      	b.n	8004efe <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a4f      	ldr	r2, [pc, #316]	@ (8005028 <HAL_ADC_IRQHandler+0x244>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d002      	beq.n	8004ef4 <HAL_ADC_IRQHandler+0x110>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	e000      	b.n	8004ef6 <HAL_ADC_IRQHandler+0x112>
 8004ef4:	4b4b      	ldr	r3, [pc, #300]	@ (8005024 <HAL_ADC_IRQHandler+0x240>)
 8004ef6:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004efe:	6a3b      	ldr	r3, [r7, #32]
 8004f00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d135      	bne.n	8004f74 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0308 	and.w	r3, r3, #8
 8004f12:	2b08      	cmp	r3, #8
 8004f14:	d12e      	bne.n	8004f74 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7ff fc58 	bl	80047d0 <LL_ADC_REG_IsConversionOngoing>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d11a      	bne.n	8004f5c <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	685a      	ldr	r2, [r3, #4]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f022 020c 	bic.w	r2, r2, #12
 8004f34:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f3a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f46:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d112      	bne.n	8004f74 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f52:	f043 0201 	orr.w	r2, r3, #1
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	661a      	str	r2, [r3, #96]	@ 0x60
 8004f5a:	e00b      	b.n	8004f74 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f60:	f043 0210 	orr.w	r2, r3, #16
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f6c:	f043 0201 	orr.w	r2, r3, #1
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f7fc ffc1 	bl	8001efc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	220c      	movs	r2, #12
 8004f80:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	f003 0320 	and.w	r3, r3, #32
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d004      	beq.n	8004f96 <HAL_ADC_IRQHandler+0x1b2>
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	f003 0320 	and.w	r3, r3, #32
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d10b      	bne.n	8004fae <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f000 80a0 	beq.w	80050e2 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f000 809a 	beq.w	80050e2 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fb2:	f003 0310 	and.w	r3, r3, #16
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d105      	bne.n	8004fc6 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fbe:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7ff fadc 	bl	8004588 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004fd0:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7ff fa5a 	bl	8004490 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004fdc:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a11      	ldr	r2, [pc, #68]	@ (8005028 <HAL_ADC_IRQHandler+0x244>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d002      	beq.n	8004fee <HAL_ADC_IRQHandler+0x20a>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	e000      	b.n	8004ff0 <HAL_ADC_IRQHandler+0x20c>
 8004fee:	4b0d      	ldr	r3, [pc, #52]	@ (8005024 <HAL_ADC_IRQHandler+0x240>)
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	6812      	ldr	r2, [r2, #0]
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d008      	beq.n	800500a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d005      	beq.n	800500a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	2b06      	cmp	r3, #6
 8005002:	d002      	beq.n	800500a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	2b07      	cmp	r3, #7
 8005008:	d104      	bne.n	8005014 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	623b      	str	r3, [r7, #32]
 8005012:	e014      	b.n	800503e <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a03      	ldr	r2, [pc, #12]	@ (8005028 <HAL_ADC_IRQHandler+0x244>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d00a      	beq.n	8005034 <HAL_ADC_IRQHandler+0x250>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	e008      	b.n	8005036 <HAL_ADC_IRQHandler+0x252>
 8005024:	40022000 	.word	0x40022000
 8005028:	40022100 	.word	0x40022100
 800502c:	40022300 	.word	0x40022300
 8005030:	58026300 	.word	0x58026300
 8005034:	4b84      	ldr	r3, [pc, #528]	@ (8005248 <HAL_ADC_IRQHandler+0x464>)
 8005036:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d047      	beq.n	80050d4 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005044:	6a3b      	ldr	r3, [r7, #32]
 8005046:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d007      	beq.n	800505e <HAL_ADC_IRQHandler+0x27a>
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d03f      	beq.n	80050d4 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005054:	6a3b      	ldr	r3, [r7, #32]
 8005056:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800505a:	2b00      	cmp	r3, #0
 800505c:	d13a      	bne.n	80050d4 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005068:	2b40      	cmp	r3, #64	@ 0x40
 800506a:	d133      	bne.n	80050d4 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800506c:	6a3b      	ldr	r3, [r7, #32]
 800506e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d12e      	bne.n	80050d4 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4618      	mov	r0, r3
 800507c:	f7ff fbbb 	bl	80047f6 <LL_ADC_INJ_IsConversionOngoing>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d11a      	bne.n	80050bc <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	685a      	ldr	r2, [r3, #4]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005094:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800509a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d112      	bne.n	80050d4 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050b2:	f043 0201 	orr.w	r2, r3, #1
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	661a      	str	r2, [r3, #96]	@ 0x60
 80050ba:	e00b      	b.n	80050d4 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050c0:	f043 0210 	orr.w	r2, r3, #16
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80050cc:	f043 0201 	orr.w	r2, r3, #1
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f001 f83f 	bl	8006158 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2260      	movs	r2, #96	@ 0x60
 80050e0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d011      	beq.n	8005110 <HAL_ADC_IRQHandler+0x32c>
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00c      	beq.n	8005110 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050fa:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f8b2 	bl	800526c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2280      	movs	r2, #128	@ 0x80
 800510e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005116:	2b00      	cmp	r3, #0
 8005118:	d012      	beq.n	8005140 <HAL_ADC_IRQHandler+0x35c>
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005120:	2b00      	cmp	r3, #0
 8005122:	d00d      	beq.n	8005140 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005128:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f001 f825 	bl	8006180 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800513e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005146:	2b00      	cmp	r3, #0
 8005148:	d012      	beq.n	8005170 <HAL_ADC_IRQHandler+0x38c>
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00d      	beq.n	8005170 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005158:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f001 f817 	bl	8006194 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800516e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	f003 0310 	and.w	r3, r3, #16
 8005176:	2b00      	cmp	r3, #0
 8005178:	d043      	beq.n	8005202 <HAL_ADC_IRQHandler+0x41e>
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	f003 0310 	and.w	r3, r3, #16
 8005180:	2b00      	cmp	r3, #0
 8005182:	d03e      	beq.n	8005202 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005188:	2b00      	cmp	r3, #0
 800518a:	d102      	bne.n	8005192 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 800518c:	2301      	movs	r3, #1
 800518e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005190:	e021      	b.n	80051d6 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d015      	beq.n	80051c4 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a2a      	ldr	r2, [pc, #168]	@ (8005248 <HAL_ADC_IRQHandler+0x464>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d004      	beq.n	80051ac <HAL_ADC_IRQHandler+0x3c8>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a29      	ldr	r2, [pc, #164]	@ (800524c <HAL_ADC_IRQHandler+0x468>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d101      	bne.n	80051b0 <HAL_ADC_IRQHandler+0x3cc>
 80051ac:	4b28      	ldr	r3, [pc, #160]	@ (8005250 <HAL_ADC_IRQHandler+0x46c>)
 80051ae:	e000      	b.n	80051b2 <HAL_ADC_IRQHandler+0x3ce>
 80051b0:	4b28      	ldr	r3, [pc, #160]	@ (8005254 <HAL_ADC_IRQHandler+0x470>)
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7ff fa74 	bl	80046a0 <LL_ADC_GetMultiDMATransfer>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00b      	beq.n	80051d6 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80051be:	2301      	movs	r3, #1
 80051c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80051c2:	e008      	b.n	80051d6 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	f003 0303 	and.w	r3, r3, #3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d001      	beq.n	80051d6 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80051d2:	2301      	movs	r3, #1
 80051d4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80051d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d10e      	bne.n	80051fa <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051e0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051ec:	f043 0202 	orr.w	r2, r3, #2
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 f843 	bl	8005280 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2210      	movs	r2, #16
 8005200:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005208:	2b00      	cmp	r3, #0
 800520a:	d018      	beq.n	800523e <HAL_ADC_IRQHandler+0x45a>
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005212:	2b00      	cmp	r3, #0
 8005214:	d013      	beq.n	800523e <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800521a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005226:	f043 0208 	orr.w	r2, r3, #8
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005236:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 ff97 	bl	800616c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800523e:	bf00      	nop
 8005240:	3728      	adds	r7, #40	@ 0x28
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	40022000 	.word	0x40022000
 800524c:	40022100 	.word	0x40022100
 8005250:	40022300 	.word	0x40022300
 8005254:	58026300 	.word	0x58026300

08005258 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005288:	bf00      	nop
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005294:	b590      	push	{r4, r7, lr}
 8005296:	b0b9      	sub	sp, #228	@ 0xe4
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800529e:	2300      	movs	r3, #0
 80052a0:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80052a4:	2300      	movs	r3, #0
 80052a6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80052ae:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	4aab      	ldr	r2, [pc, #684]	@ (8005564 <HAL_ADC_ConfigChannel+0x2d0>)
 80052b6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d102      	bne.n	80052c8 <HAL_ADC_ConfigChannel+0x34>
 80052c2:	2302      	movs	r3, #2
 80052c4:	f000 bcfe 	b.w	8005cc4 <HAL_ADC_ConfigChannel+0xa30>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7ff fa7b 	bl	80047d0 <LL_ADC_REG_IsConversionOngoing>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f040 84e2 	bne.w	8005ca6 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	db38      	blt.n	800535c <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a9e      	ldr	r2, [pc, #632]	@ (8005568 <HAL_ADC_ConfigChannel+0x2d4>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d033      	beq.n	800535c <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d108      	bne.n	8005312 <HAL_ADC_ConfigChannel+0x7e>
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	0e9b      	lsrs	r3, r3, #26
 8005306:	f003 031f 	and.w	r3, r3, #31
 800530a:	2201      	movs	r2, #1
 800530c:	fa02 f303 	lsl.w	r3, r2, r3
 8005310:	e01d      	b.n	800534e <HAL_ADC_ConfigChannel+0xba>
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800531a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800531e:	fa93 f3a3 	rbit	r3, r3
 8005322:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005326:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800532a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800532e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005332:	2b00      	cmp	r3, #0
 8005334:	d101      	bne.n	800533a <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8005336:	2320      	movs	r3, #32
 8005338:	e004      	b.n	8005344 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 800533a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800533e:	fab3 f383 	clz	r3, r3
 8005342:	b2db      	uxtb	r3, r3
 8005344:	f003 031f 	and.w	r3, r3, #31
 8005348:	2201      	movs	r2, #1
 800534a:	fa02 f303 	lsl.w	r3, r2, r3
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	6812      	ldr	r2, [r2, #0]
 8005352:	69d1      	ldr	r1, [r2, #28]
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	6812      	ldr	r2, [r2, #0]
 8005358:	430b      	orrs	r3, r1
 800535a:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6818      	ldr	r0, [r3, #0]
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	6859      	ldr	r1, [r3, #4]
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	461a      	mov	r2, r3
 800536a:	f7ff f8a4 	bl	80044b6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4618      	mov	r0, r3
 8005374:	f7ff fa2c 	bl	80047d0 <LL_ADC_REG_IsConversionOngoing>
 8005378:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4618      	mov	r0, r3
 8005382:	f7ff fa38 	bl	80047f6 <LL_ADC_INJ_IsConversionOngoing>
 8005386:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800538a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800538e:	2b00      	cmp	r3, #0
 8005390:	f040 8270 	bne.w	8005874 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005394:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005398:	2b00      	cmp	r3, #0
 800539a:	f040 826b 	bne.w	8005874 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6818      	ldr	r0, [r3, #0]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	6819      	ldr	r1, [r3, #0]
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	461a      	mov	r2, r3
 80053ac:	f7ff f8ff 	bl	80045ae <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a6c      	ldr	r2, [pc, #432]	@ (8005568 <HAL_ADC_ConfigChannel+0x2d4>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d10d      	bne.n	80053d6 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	695a      	ldr	r2, [r3, #20]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	08db      	lsrs	r3, r3, #3
 80053c6:	f003 0303 	and.w	r3, r3, #3
 80053ca:	005b      	lsls	r3, r3, #1
 80053cc:	fa02 f303 	lsl.w	r3, r2, r3
 80053d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80053d4:	e032      	b.n	800543c <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80053d6:	4b65      	ldr	r3, [pc, #404]	@ (800556c <HAL_ADC_ConfigChannel+0x2d8>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80053de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053e2:	d10b      	bne.n	80053fc <HAL_ADC_ConfigChannel+0x168>
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	695a      	ldr	r2, [r3, #20]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	089b      	lsrs	r3, r3, #2
 80053f0:	f003 0307 	and.w	r3, r3, #7
 80053f4:	005b      	lsls	r3, r3, #1
 80053f6:	fa02 f303 	lsl.w	r3, r2, r3
 80053fa:	e01d      	b.n	8005438 <HAL_ADC_ConfigChannel+0x1a4>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	f003 0310 	and.w	r3, r3, #16
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10b      	bne.n	8005422 <HAL_ADC_ConfigChannel+0x18e>
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	695a      	ldr	r2, [r3, #20]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	089b      	lsrs	r3, r3, #2
 8005416:	f003 0307 	and.w	r3, r3, #7
 800541a:	005b      	lsls	r3, r3, #1
 800541c:	fa02 f303 	lsl.w	r3, r2, r3
 8005420:	e00a      	b.n	8005438 <HAL_ADC_ConfigChannel+0x1a4>
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	695a      	ldr	r2, [r3, #20]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	089b      	lsrs	r3, r3, #2
 800542e:	f003 0304 	and.w	r3, r3, #4
 8005432:	005b      	lsls	r3, r3, #1
 8005434:	fa02 f303 	lsl.w	r3, r2, r3
 8005438:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	2b04      	cmp	r3, #4
 8005442:	d048      	beq.n	80054d6 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6818      	ldr	r0, [r3, #0]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	6919      	ldr	r1, [r3, #16]
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005454:	f7fe ff2a 	bl	80042ac <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a42      	ldr	r2, [pc, #264]	@ (8005568 <HAL_ADC_ConfigChannel+0x2d4>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d119      	bne.n	8005496 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6818      	ldr	r0, [r3, #0]
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	6919      	ldr	r1, [r3, #16]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	69db      	ldr	r3, [r3, #28]
 800546e:	461a      	mov	r2, r3
 8005470:	f7fe ffc2 	bl	80043f8 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6818      	ldr	r0, [r3, #0]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	6919      	ldr	r1, [r3, #16]
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d102      	bne.n	800548c <HAL_ADC_ConfigChannel+0x1f8>
 8005486:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800548a:	e000      	b.n	800548e <HAL_ADC_ConfigChannel+0x1fa>
 800548c:	2300      	movs	r3, #0
 800548e:	461a      	mov	r2, r3
 8005490:	f7fe ff90 	bl	80043b4 <LL_ADC_SetOffsetSaturation>
 8005494:	e1ee      	b.n	8005874 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6818      	ldr	r0, [r3, #0]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	6919      	ldr	r1, [r3, #16]
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d102      	bne.n	80054ae <HAL_ADC_ConfigChannel+0x21a>
 80054a8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80054ac:	e000      	b.n	80054b0 <HAL_ADC_ConfigChannel+0x21c>
 80054ae:	2300      	movs	r3, #0
 80054b0:	461a      	mov	r2, r3
 80054b2:	f7fe ff5d 	bl	8004370 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6818      	ldr	r0, [r3, #0]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	6919      	ldr	r1, [r3, #16]
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	7e1b      	ldrb	r3, [r3, #24]
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d102      	bne.n	80054cc <HAL_ADC_ConfigChannel+0x238>
 80054c6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80054ca:	e000      	b.n	80054ce <HAL_ADC_ConfigChannel+0x23a>
 80054cc:	2300      	movs	r3, #0
 80054ce:	461a      	mov	r2, r3
 80054d0:	f7fe ff34 	bl	800433c <LL_ADC_SetDataRightShift>
 80054d4:	e1ce      	b.n	8005874 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a23      	ldr	r2, [pc, #140]	@ (8005568 <HAL_ADC_ConfigChannel+0x2d4>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	f040 8181 	bne.w	80057e4 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2100      	movs	r1, #0
 80054e8:	4618      	mov	r0, r3
 80054ea:	f7fe ff11 	bl	8004310 <LL_ADC_GetOffsetChannel>
 80054ee:	4603      	mov	r3, r0
 80054f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d10a      	bne.n	800550e <HAL_ADC_ConfigChannel+0x27a>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2100      	movs	r1, #0
 80054fe:	4618      	mov	r0, r3
 8005500:	f7fe ff06 	bl	8004310 <LL_ADC_GetOffsetChannel>
 8005504:	4603      	mov	r3, r0
 8005506:	0e9b      	lsrs	r3, r3, #26
 8005508:	f003 021f 	and.w	r2, r3, #31
 800550c:	e01e      	b.n	800554c <HAL_ADC_ConfigChannel+0x2b8>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2100      	movs	r1, #0
 8005514:	4618      	mov	r0, r3
 8005516:	f7fe fefb 	bl	8004310 <LL_ADC_GetOffsetChannel>
 800551a:	4603      	mov	r3, r0
 800551c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005520:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005524:	fa93 f3a3 	rbit	r3, r3
 8005528:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 800552c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005530:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  if (value == 0U)
 8005534:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005538:	2b00      	cmp	r3, #0
 800553a:	d101      	bne.n	8005540 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 800553c:	2320      	movs	r3, #32
 800553e:	e004      	b.n	800554a <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8005540:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005544:	fab3 f383 	clz	r3, r3
 8005548:	b2db      	uxtb	r3, r3
 800554a:	461a      	mov	r2, r3
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005554:	2b00      	cmp	r3, #0
 8005556:	d10b      	bne.n	8005570 <HAL_ADC_ConfigChannel+0x2dc>
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	0e9b      	lsrs	r3, r3, #26
 800555e:	f003 031f 	and.w	r3, r3, #31
 8005562:	e01e      	b.n	80055a2 <HAL_ADC_ConfigChannel+0x30e>
 8005564:	47ff0000 	.word	0x47ff0000
 8005568:	58026000 	.word	0x58026000
 800556c:	5c001000 	.word	0x5c001000
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005578:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800557c:	fa93 f3a3 	rbit	r3, r3
 8005580:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8005584:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005588:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800558c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d101      	bne.n	8005598 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8005594:	2320      	movs	r3, #32
 8005596:	e004      	b.n	80055a2 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8005598:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800559c:	fab3 f383 	clz	r3, r3
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d106      	bne.n	80055b4 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2200      	movs	r2, #0
 80055ac:	2100      	movs	r1, #0
 80055ae:	4618      	mov	r0, r3
 80055b0:	f7fe ff44 	bl	800443c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2101      	movs	r1, #1
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7fe fea8 	bl	8004310 <LL_ADC_GetOffsetChannel>
 80055c0:	4603      	mov	r3, r0
 80055c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10a      	bne.n	80055e0 <HAL_ADC_ConfigChannel+0x34c>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2101      	movs	r1, #1
 80055d0:	4618      	mov	r0, r3
 80055d2:	f7fe fe9d 	bl	8004310 <LL_ADC_GetOffsetChannel>
 80055d6:	4603      	mov	r3, r0
 80055d8:	0e9b      	lsrs	r3, r3, #26
 80055da:	f003 021f 	and.w	r2, r3, #31
 80055de:	e01e      	b.n	800561e <HAL_ADC_ConfigChannel+0x38a>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2101      	movs	r1, #1
 80055e6:	4618      	mov	r0, r3
 80055e8:	f7fe fe92 	bl	8004310 <LL_ADC_GetOffsetChannel>
 80055ec:	4603      	mov	r3, r0
 80055ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80055f6:	fa93 f3a3 	rbit	r3, r3
 80055fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80055fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005602:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8005606:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 800560e:	2320      	movs	r3, #32
 8005610:	e004      	b.n	800561c <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8005612:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005616:	fab3 f383 	clz	r3, r3
 800561a:	b2db      	uxtb	r3, r3
 800561c:	461a      	mov	r2, r3
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005626:	2b00      	cmp	r3, #0
 8005628:	d105      	bne.n	8005636 <HAL_ADC_ConfigChannel+0x3a2>
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	0e9b      	lsrs	r3, r3, #26
 8005630:	f003 031f 	and.w	r3, r3, #31
 8005634:	e018      	b.n	8005668 <HAL_ADC_ConfigChannel+0x3d4>
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800563e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005642:	fa93 f3a3 	rbit	r3, r3
 8005646:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800564a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800564e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8005652:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005656:	2b00      	cmp	r3, #0
 8005658:	d101      	bne.n	800565e <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 800565a:	2320      	movs	r3, #32
 800565c:	e004      	b.n	8005668 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 800565e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005662:	fab3 f383 	clz	r3, r3
 8005666:	b2db      	uxtb	r3, r3
 8005668:	429a      	cmp	r2, r3
 800566a:	d106      	bne.n	800567a <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2200      	movs	r2, #0
 8005672:	2101      	movs	r1, #1
 8005674:	4618      	mov	r0, r3
 8005676:	f7fe fee1 	bl	800443c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2102      	movs	r1, #2
 8005680:	4618      	mov	r0, r3
 8005682:	f7fe fe45 	bl	8004310 <LL_ADC_GetOffsetChannel>
 8005686:	4603      	mov	r3, r0
 8005688:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800568c:	2b00      	cmp	r3, #0
 800568e:	d10a      	bne.n	80056a6 <HAL_ADC_ConfigChannel+0x412>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2102      	movs	r1, #2
 8005696:	4618      	mov	r0, r3
 8005698:	f7fe fe3a 	bl	8004310 <LL_ADC_GetOffsetChannel>
 800569c:	4603      	mov	r3, r0
 800569e:	0e9b      	lsrs	r3, r3, #26
 80056a0:	f003 021f 	and.w	r2, r3, #31
 80056a4:	e01e      	b.n	80056e4 <HAL_ADC_ConfigChannel+0x450>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2102      	movs	r1, #2
 80056ac:	4618      	mov	r0, r3
 80056ae:	f7fe fe2f 	bl	8004310 <LL_ADC_GetOffsetChannel>
 80056b2:	4603      	mov	r3, r0
 80056b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80056bc:	fa93 f3a3 	rbit	r3, r3
 80056c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80056c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80056c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80056cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d101      	bne.n	80056d8 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 80056d4:	2320      	movs	r3, #32
 80056d6:	e004      	b.n	80056e2 <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 80056d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056dc:	fab3 f383 	clz	r3, r3
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	461a      	mov	r2, r3
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d105      	bne.n	80056fc <HAL_ADC_ConfigChannel+0x468>
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	0e9b      	lsrs	r3, r3, #26
 80056f6:	f003 031f 	and.w	r3, r3, #31
 80056fa:	e014      	b.n	8005726 <HAL_ADC_ConfigChannel+0x492>
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005702:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005704:	fa93 f3a3 	rbit	r3, r3
 8005708:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800570a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800570c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8005710:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005714:	2b00      	cmp	r3, #0
 8005716:	d101      	bne.n	800571c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8005718:	2320      	movs	r3, #32
 800571a:	e004      	b.n	8005726 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800571c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005720:	fab3 f383 	clz	r3, r3
 8005724:	b2db      	uxtb	r3, r3
 8005726:	429a      	cmp	r2, r3
 8005728:	d106      	bne.n	8005738 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2200      	movs	r2, #0
 8005730:	2102      	movs	r1, #2
 8005732:	4618      	mov	r0, r3
 8005734:	f7fe fe82 	bl	800443c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2103      	movs	r1, #3
 800573e:	4618      	mov	r0, r3
 8005740:	f7fe fde6 	bl	8004310 <LL_ADC_GetOffsetChannel>
 8005744:	4603      	mov	r3, r0
 8005746:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800574a:	2b00      	cmp	r3, #0
 800574c:	d10a      	bne.n	8005764 <HAL_ADC_ConfigChannel+0x4d0>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2103      	movs	r1, #3
 8005754:	4618      	mov	r0, r3
 8005756:	f7fe fddb 	bl	8004310 <LL_ADC_GetOffsetChannel>
 800575a:	4603      	mov	r3, r0
 800575c:	0e9b      	lsrs	r3, r3, #26
 800575e:	f003 021f 	and.w	r2, r3, #31
 8005762:	e017      	b.n	8005794 <HAL_ADC_ConfigChannel+0x500>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2103      	movs	r1, #3
 800576a:	4618      	mov	r0, r3
 800576c:	f7fe fdd0 	bl	8004310 <LL_ADC_GetOffsetChannel>
 8005770:	4603      	mov	r3, r0
 8005772:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005774:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005776:	fa93 f3a3 	rbit	r3, r3
 800577a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800577c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800577e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8005780:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005782:	2b00      	cmp	r3, #0
 8005784:	d101      	bne.n	800578a <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8005786:	2320      	movs	r3, #32
 8005788:	e003      	b.n	8005792 <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 800578a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800578c:	fab3 f383 	clz	r3, r3
 8005790:	b2db      	uxtb	r3, r3
 8005792:	461a      	mov	r2, r3
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800579c:	2b00      	cmp	r3, #0
 800579e:	d105      	bne.n	80057ac <HAL_ADC_ConfigChannel+0x518>
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	0e9b      	lsrs	r3, r3, #26
 80057a6:	f003 031f 	and.w	r3, r3, #31
 80057aa:	e011      	b.n	80057d0 <HAL_ADC_ConfigChannel+0x53c>
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057b4:	fa93 f3a3 	rbit	r3, r3
 80057b8:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80057ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80057bc:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80057be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d101      	bne.n	80057c8 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 80057c4:	2320      	movs	r3, #32
 80057c6:	e003      	b.n	80057d0 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 80057c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80057ca:	fab3 f383 	clz	r3, r3
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d14f      	bne.n	8005874 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2200      	movs	r2, #0
 80057da:	2103      	movs	r1, #3
 80057dc:	4618      	mov	r0, r3
 80057de:	f7fe fe2d 	bl	800443c <LL_ADC_SetOffsetState>
 80057e2:	e047      	b.n	8005874 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	069b      	lsls	r3, r3, #26
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d107      	bne.n	8005808 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005806:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800580e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	069b      	lsls	r3, r3, #26
 8005818:	429a      	cmp	r2, r3
 800581a:	d107      	bne.n	800582c <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800582a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005832:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	069b      	lsls	r3, r3, #26
 800583c:	429a      	cmp	r2, r3
 800583e:	d107      	bne.n	8005850 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800584e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005856:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	069b      	lsls	r3, r3, #26
 8005860:	429a      	cmp	r2, r3
 8005862:	d107      	bne.n	8005874 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005872:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4618      	mov	r0, r3
 800587a:	f7fe ff81 	bl	8004780 <LL_ADC_IsEnabled>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	f040 8219 	bne.w	8005cb8 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6818      	ldr	r0, [r3, #0]
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	6819      	ldr	r1, [r3, #0]
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	461a      	mov	r2, r3
 8005894:	f7fe feb6 	bl	8004604 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	4aa1      	ldr	r2, [pc, #644]	@ (8005b24 <HAL_ADC_ConfigChannel+0x890>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	f040 812e 	bne.w	8005b00 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d10b      	bne.n	80058cc <HAL_ADC_ConfigChannel+0x638>
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	0e9b      	lsrs	r3, r3, #26
 80058ba:	3301      	adds	r3, #1
 80058bc:	f003 031f 	and.w	r3, r3, #31
 80058c0:	2b09      	cmp	r3, #9
 80058c2:	bf94      	ite	ls
 80058c4:	2301      	movls	r3, #1
 80058c6:	2300      	movhi	r3, #0
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	e019      	b.n	8005900 <HAL_ADC_ConfigChannel+0x66c>
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80058d4:	fa93 f3a3 	rbit	r3, r3
 80058d8:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80058da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80058de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d101      	bne.n	80058e8 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80058e4:	2320      	movs	r3, #32
 80058e6:	e003      	b.n	80058f0 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80058e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80058ea:	fab3 f383 	clz	r3, r3
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	3301      	adds	r3, #1
 80058f2:	f003 031f 	and.w	r3, r3, #31
 80058f6:	2b09      	cmp	r3, #9
 80058f8:	bf94      	ite	ls
 80058fa:	2301      	movls	r3, #1
 80058fc:	2300      	movhi	r3, #0
 80058fe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005900:	2b00      	cmp	r3, #0
 8005902:	d079      	beq.n	80059f8 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800590c:	2b00      	cmp	r3, #0
 800590e:	d107      	bne.n	8005920 <HAL_ADC_ConfigChannel+0x68c>
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	0e9b      	lsrs	r3, r3, #26
 8005916:	3301      	adds	r3, #1
 8005918:	069b      	lsls	r3, r3, #26
 800591a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800591e:	e015      	b.n	800594c <HAL_ADC_ConfigChannel+0x6b8>
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005926:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005928:	fa93 f3a3 	rbit	r3, r3
 800592c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800592e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005930:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8005932:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005934:	2b00      	cmp	r3, #0
 8005936:	d101      	bne.n	800593c <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8005938:	2320      	movs	r3, #32
 800593a:	e003      	b.n	8005944 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 800593c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800593e:	fab3 f383 	clz	r3, r3
 8005942:	b2db      	uxtb	r3, r3
 8005944:	3301      	adds	r3, #1
 8005946:	069b      	lsls	r3, r3, #26
 8005948:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005954:	2b00      	cmp	r3, #0
 8005956:	d109      	bne.n	800596c <HAL_ADC_ConfigChannel+0x6d8>
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	0e9b      	lsrs	r3, r3, #26
 800595e:	3301      	adds	r3, #1
 8005960:	f003 031f 	and.w	r3, r3, #31
 8005964:	2101      	movs	r1, #1
 8005966:	fa01 f303 	lsl.w	r3, r1, r3
 800596a:	e017      	b.n	800599c <HAL_ADC_ConfigChannel+0x708>
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005972:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005974:	fa93 f3a3 	rbit	r3, r3
 8005978:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800597a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800597c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800597e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005980:	2b00      	cmp	r3, #0
 8005982:	d101      	bne.n	8005988 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8005984:	2320      	movs	r3, #32
 8005986:	e003      	b.n	8005990 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8005988:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800598a:	fab3 f383 	clz	r3, r3
 800598e:	b2db      	uxtb	r3, r3
 8005990:	3301      	adds	r3, #1
 8005992:	f003 031f 	and.w	r3, r3, #31
 8005996:	2101      	movs	r1, #1
 8005998:	fa01 f303 	lsl.w	r3, r1, r3
 800599c:	ea42 0103 	orr.w	r1, r2, r3
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d10a      	bne.n	80059c2 <HAL_ADC_ConfigChannel+0x72e>
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	0e9b      	lsrs	r3, r3, #26
 80059b2:	3301      	adds	r3, #1
 80059b4:	f003 021f 	and.w	r2, r3, #31
 80059b8:	4613      	mov	r3, r2
 80059ba:	005b      	lsls	r3, r3, #1
 80059bc:	4413      	add	r3, r2
 80059be:	051b      	lsls	r3, r3, #20
 80059c0:	e018      	b.n	80059f4 <HAL_ADC_ConfigChannel+0x760>
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059ca:	fa93 f3a3 	rbit	r3, r3
 80059ce:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80059d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80059d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d101      	bne.n	80059de <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 80059da:	2320      	movs	r3, #32
 80059dc:	e003      	b.n	80059e6 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 80059de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059e0:	fab3 f383 	clz	r3, r3
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	3301      	adds	r3, #1
 80059e8:	f003 021f 	and.w	r2, r3, #31
 80059ec:	4613      	mov	r3, r2
 80059ee:	005b      	lsls	r3, r3, #1
 80059f0:	4413      	add	r3, r2
 80059f2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80059f4:	430b      	orrs	r3, r1
 80059f6:	e07e      	b.n	8005af6 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d107      	bne.n	8005a14 <HAL_ADC_ConfigChannel+0x780>
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	0e9b      	lsrs	r3, r3, #26
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	069b      	lsls	r3, r3, #26
 8005a0e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005a12:	e015      	b.n	8005a40 <HAL_ADC_ConfigChannel+0x7ac>
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a1c:	fa93 f3a3 	rbit	r3, r3
 8005a20:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8005a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8005a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d101      	bne.n	8005a30 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8005a2c:	2320      	movs	r3, #32
 8005a2e:	e003      	b.n	8005a38 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8005a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a32:	fab3 f383 	clz	r3, r3
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	3301      	adds	r3, #1
 8005a3a:	069b      	lsls	r3, r3, #26
 8005a3c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d109      	bne.n	8005a60 <HAL_ADC_ConfigChannel+0x7cc>
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	0e9b      	lsrs	r3, r3, #26
 8005a52:	3301      	adds	r3, #1
 8005a54:	f003 031f 	and.w	r3, r3, #31
 8005a58:	2101      	movs	r1, #1
 8005a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a5e:	e017      	b.n	8005a90 <HAL_ADC_ConfigChannel+0x7fc>
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	fa93 f3a3 	rbit	r3, r3
 8005a6c:	61bb      	str	r3, [r7, #24]
  return result;
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005a72:	6a3b      	ldr	r3, [r7, #32]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d101      	bne.n	8005a7c <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8005a78:	2320      	movs	r3, #32
 8005a7a:	e003      	b.n	8005a84 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8005a7c:	6a3b      	ldr	r3, [r7, #32]
 8005a7e:	fab3 f383 	clz	r3, r3
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	3301      	adds	r3, #1
 8005a86:	f003 031f 	and.w	r3, r3, #31
 8005a8a:	2101      	movs	r1, #1
 8005a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a90:	ea42 0103 	orr.w	r1, r2, r3
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d10d      	bne.n	8005abc <HAL_ADC_ConfigChannel+0x828>
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	0e9b      	lsrs	r3, r3, #26
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	f003 021f 	and.w	r2, r3, #31
 8005aac:	4613      	mov	r3, r2
 8005aae:	005b      	lsls	r3, r3, #1
 8005ab0:	4413      	add	r3, r2
 8005ab2:	3b1e      	subs	r3, #30
 8005ab4:	051b      	lsls	r3, r3, #20
 8005ab6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005aba:	e01b      	b.n	8005af4 <HAL_ADC_ConfigChannel+0x860>
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	fa93 f3a3 	rbit	r3, r3
 8005ac8:	60fb      	str	r3, [r7, #12]
  return result;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d101      	bne.n	8005ad8 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8005ad4:	2320      	movs	r3, #32
 8005ad6:	e003      	b.n	8005ae0 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	fab3 f383 	clz	r3, r3
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	f003 021f 	and.w	r2, r3, #31
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	005b      	lsls	r3, r3, #1
 8005aea:	4413      	add	r3, r2
 8005aec:	3b1e      	subs	r3, #30
 8005aee:	051b      	lsls	r3, r3, #20
 8005af0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005af4:	430b      	orrs	r3, r1
 8005af6:	683a      	ldr	r2, [r7, #0]
 8005af8:	6892      	ldr	r2, [r2, #8]
 8005afa:	4619      	mov	r1, r3
 8005afc:	f7fe fd57 	bl	80045ae <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f280 80d7 	bge.w	8005cb8 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a06      	ldr	r2, [pc, #24]	@ (8005b28 <HAL_ADC_ConfigChannel+0x894>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d004      	beq.n	8005b1e <HAL_ADC_ConfigChannel+0x88a>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a04      	ldr	r2, [pc, #16]	@ (8005b2c <HAL_ADC_ConfigChannel+0x898>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d10a      	bne.n	8005b34 <HAL_ADC_ConfigChannel+0x8a0>
 8005b1e:	4b04      	ldr	r3, [pc, #16]	@ (8005b30 <HAL_ADC_ConfigChannel+0x89c>)
 8005b20:	e009      	b.n	8005b36 <HAL_ADC_ConfigChannel+0x8a2>
 8005b22:	bf00      	nop
 8005b24:	47ff0000 	.word	0x47ff0000
 8005b28:	40022000 	.word	0x40022000
 8005b2c:	40022100 	.word	0x40022100
 8005b30:	40022300 	.word	0x40022300
 8005b34:	4b65      	ldr	r3, [pc, #404]	@ (8005ccc <HAL_ADC_ConfigChannel+0xa38>)
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7fe fbaa 	bl	8004290 <LL_ADC_GetCommonPathInternalCh>
 8005b3c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a62      	ldr	r2, [pc, #392]	@ (8005cd0 <HAL_ADC_ConfigChannel+0xa3c>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d004      	beq.n	8005b54 <HAL_ADC_ConfigChannel+0x8c0>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a61      	ldr	r2, [pc, #388]	@ (8005cd4 <HAL_ADC_ConfigChannel+0xa40>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d10e      	bne.n	8005b72 <HAL_ADC_ConfigChannel+0x8de>
 8005b54:	485e      	ldr	r0, [pc, #376]	@ (8005cd0 <HAL_ADC_ConfigChannel+0xa3c>)
 8005b56:	f7fe fe13 	bl	8004780 <LL_ADC_IsEnabled>
 8005b5a:	4604      	mov	r4, r0
 8005b5c:	485d      	ldr	r0, [pc, #372]	@ (8005cd4 <HAL_ADC_ConfigChannel+0xa40>)
 8005b5e:	f7fe fe0f 	bl	8004780 <LL_ADC_IsEnabled>
 8005b62:	4603      	mov	r3, r0
 8005b64:	4323      	orrs	r3, r4
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	bf0c      	ite	eq
 8005b6a:	2301      	moveq	r3, #1
 8005b6c:	2300      	movne	r3, #0
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	e008      	b.n	8005b84 <HAL_ADC_ConfigChannel+0x8f0>
 8005b72:	4859      	ldr	r0, [pc, #356]	@ (8005cd8 <HAL_ADC_ConfigChannel+0xa44>)
 8005b74:	f7fe fe04 	bl	8004780 <LL_ADC_IsEnabled>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	bf0c      	ite	eq
 8005b7e:	2301      	moveq	r3, #1
 8005b80:	2300      	movne	r3, #0
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f000 8084 	beq.w	8005c92 <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a53      	ldr	r2, [pc, #332]	@ (8005cdc <HAL_ADC_ConfigChannel+0xa48>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d132      	bne.n	8005bfa <HAL_ADC_ConfigChannel+0x966>
 8005b94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005b98:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d12c      	bne.n	8005bfa <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a4c      	ldr	r2, [pc, #304]	@ (8005cd8 <HAL_ADC_ConfigChannel+0xa44>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	f040 8086 	bne.w	8005cb8 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a47      	ldr	r2, [pc, #284]	@ (8005cd0 <HAL_ADC_ConfigChannel+0xa3c>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d004      	beq.n	8005bc0 <HAL_ADC_ConfigChannel+0x92c>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a46      	ldr	r2, [pc, #280]	@ (8005cd4 <HAL_ADC_ConfigChannel+0xa40>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d101      	bne.n	8005bc4 <HAL_ADC_ConfigChannel+0x930>
 8005bc0:	4a47      	ldr	r2, [pc, #284]	@ (8005ce0 <HAL_ADC_ConfigChannel+0xa4c>)
 8005bc2:	e000      	b.n	8005bc6 <HAL_ADC_ConfigChannel+0x932>
 8005bc4:	4a41      	ldr	r2, [pc, #260]	@ (8005ccc <HAL_ADC_ConfigChannel+0xa38>)
 8005bc6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005bca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005bce:	4619      	mov	r1, r3
 8005bd0:	4610      	mov	r0, r2
 8005bd2:	f7fe fb4a 	bl	800426a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005bd6:	4b43      	ldr	r3, [pc, #268]	@ (8005ce4 <HAL_ADC_ConfigChannel+0xa50>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	099b      	lsrs	r3, r3, #6
 8005bdc:	4a42      	ldr	r2, [pc, #264]	@ (8005ce8 <HAL_ADC_ConfigChannel+0xa54>)
 8005bde:	fba2 2303 	umull	r2, r3, r2, r3
 8005be2:	099b      	lsrs	r3, r3, #6
 8005be4:	3301      	adds	r3, #1
 8005be6:	005b      	lsls	r3, r3, #1
 8005be8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005bea:	e002      	b.n	8005bf2 <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d1f9      	bne.n	8005bec <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005bf8:	e05e      	b.n	8005cb8 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a3b      	ldr	r2, [pc, #236]	@ (8005cec <HAL_ADC_ConfigChannel+0xa58>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d120      	bne.n	8005c46 <HAL_ADC_ConfigChannel+0x9b2>
 8005c04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005c08:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d11a      	bne.n	8005c46 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a30      	ldr	r2, [pc, #192]	@ (8005cd8 <HAL_ADC_ConfigChannel+0xa44>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d14e      	bne.n	8005cb8 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a2c      	ldr	r2, [pc, #176]	@ (8005cd0 <HAL_ADC_ConfigChannel+0xa3c>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d004      	beq.n	8005c2e <HAL_ADC_ConfigChannel+0x99a>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a2a      	ldr	r2, [pc, #168]	@ (8005cd4 <HAL_ADC_ConfigChannel+0xa40>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d101      	bne.n	8005c32 <HAL_ADC_ConfigChannel+0x99e>
 8005c2e:	4a2c      	ldr	r2, [pc, #176]	@ (8005ce0 <HAL_ADC_ConfigChannel+0xa4c>)
 8005c30:	e000      	b.n	8005c34 <HAL_ADC_ConfigChannel+0x9a0>
 8005c32:	4a26      	ldr	r2, [pc, #152]	@ (8005ccc <HAL_ADC_ConfigChannel+0xa38>)
 8005c34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005c38:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	4610      	mov	r0, r2
 8005c40:	f7fe fb13 	bl	800426a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005c44:	e038      	b.n	8005cb8 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a29      	ldr	r2, [pc, #164]	@ (8005cf0 <HAL_ADC_ConfigChannel+0xa5c>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d133      	bne.n	8005cb8 <HAL_ADC_ConfigChannel+0xa24>
 8005c50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005c54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d12d      	bne.n	8005cb8 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a1d      	ldr	r2, [pc, #116]	@ (8005cd8 <HAL_ADC_ConfigChannel+0xa44>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d128      	bne.n	8005cb8 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a19      	ldr	r2, [pc, #100]	@ (8005cd0 <HAL_ADC_ConfigChannel+0xa3c>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d004      	beq.n	8005c7a <HAL_ADC_ConfigChannel+0x9e6>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a17      	ldr	r2, [pc, #92]	@ (8005cd4 <HAL_ADC_ConfigChannel+0xa40>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d101      	bne.n	8005c7e <HAL_ADC_ConfigChannel+0x9ea>
 8005c7a:	4a19      	ldr	r2, [pc, #100]	@ (8005ce0 <HAL_ADC_ConfigChannel+0xa4c>)
 8005c7c:	e000      	b.n	8005c80 <HAL_ADC_ConfigChannel+0x9ec>
 8005c7e:	4a13      	ldr	r2, [pc, #76]	@ (8005ccc <HAL_ADC_ConfigChannel+0xa38>)
 8005c80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005c84:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005c88:	4619      	mov	r1, r3
 8005c8a:	4610      	mov	r0, r2
 8005c8c:	f7fe faed 	bl	800426a <LL_ADC_SetCommonPathInternalCh>
 8005c90:	e012      	b.n	8005cb8 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c96:	f043 0220 	orr.w	r2, r3, #32
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8005ca4:	e008      	b.n	8005cb8 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005caa:	f043 0220 	orr.w	r2, r3, #32
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005cc0:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	37e4      	adds	r7, #228	@ 0xe4
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd90      	pop	{r4, r7, pc}
 8005ccc:	58026300 	.word	0x58026300
 8005cd0:	40022000 	.word	0x40022000
 8005cd4:	40022100 	.word	0x40022100
 8005cd8:	58026000 	.word	0x58026000
 8005cdc:	c7520000 	.word	0xc7520000
 8005ce0:	40022300 	.word	0x40022300
 8005ce4:	24000010 	.word	0x24000010
 8005ce8:	053e2d63 	.word	0x053e2d63
 8005cec:	c3210000 	.word	0xc3210000
 8005cf0:	cb840000 	.word	0xcb840000

08005cf4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4618      	mov	r0, r3
 8005d02:	f7fe fd3d 	bl	8004780 <LL_ADC_IsEnabled>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d16e      	bne.n	8005dea <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	689a      	ldr	r2, [r3, #8]
 8005d12:	4b38      	ldr	r3, [pc, #224]	@ (8005df4 <ADC_Enable+0x100>)
 8005d14:	4013      	ands	r3, r2
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00d      	beq.n	8005d36 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d1e:	f043 0210 	orr.w	r2, r3, #16
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d2a:	f043 0201 	orr.w	r2, r3, #1
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e05a      	b.n	8005dec <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f7fe fd0c 	bl	8004758 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005d40:	f7fe fa50 	bl	80041e4 <HAL_GetTick>
 8005d44:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a2b      	ldr	r2, [pc, #172]	@ (8005df8 <ADC_Enable+0x104>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d004      	beq.n	8005d5a <ADC_Enable+0x66>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a29      	ldr	r2, [pc, #164]	@ (8005dfc <ADC_Enable+0x108>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d101      	bne.n	8005d5e <ADC_Enable+0x6a>
 8005d5a:	4b29      	ldr	r3, [pc, #164]	@ (8005e00 <ADC_Enable+0x10c>)
 8005d5c:	e000      	b.n	8005d60 <ADC_Enable+0x6c>
 8005d5e:	4b29      	ldr	r3, [pc, #164]	@ (8005e04 <ADC_Enable+0x110>)
 8005d60:	4618      	mov	r0, r3
 8005d62:	f7fe fc8f 	bl	8004684 <LL_ADC_GetMultimode>
 8005d66:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a23      	ldr	r2, [pc, #140]	@ (8005dfc <ADC_Enable+0x108>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d002      	beq.n	8005d78 <ADC_Enable+0x84>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	e000      	b.n	8005d7a <ADC_Enable+0x86>
 8005d78:	4b1f      	ldr	r3, [pc, #124]	@ (8005df8 <ADC_Enable+0x104>)
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	6812      	ldr	r2, [r2, #0]
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d02c      	beq.n	8005ddc <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d130      	bne.n	8005dea <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005d88:	e028      	b.n	8005ddc <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7fe fcf6 	bl	8004780 <LL_ADC_IsEnabled>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d104      	bne.n	8005da4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7fe fcda 	bl	8004758 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005da4:	f7fe fa1e 	bl	80041e4 <HAL_GetTick>
 8005da8:	4602      	mov	r2, r0
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d914      	bls.n	8005ddc <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0301 	and.w	r3, r3, #1
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d00d      	beq.n	8005ddc <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dc4:	f043 0210 	orr.w	r2, r3, #16
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005dd0:	f043 0201 	orr.w	r2, r3, #1
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e007      	b.n	8005dec <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d1cf      	bne.n	8005d8a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3710      	adds	r7, #16
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	8000003f 	.word	0x8000003f
 8005df8:	40022000 	.word	0x40022000
 8005dfc:	40022100 	.word	0x40022100
 8005e00:	40022300 	.word	0x40022300
 8005e04:	58026300 	.word	0x58026300

08005e08 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e14:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e1a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d14b      	bne.n	8005eba <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e26:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 0308 	and.w	r3, r3, #8
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d021      	beq.n	8005e80 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7fe fb25 	bl	8004490 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d032      	beq.n	8005eb2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d12b      	bne.n	8005eb2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e5e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d11f      	bne.n	8005eb2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e76:	f043 0201 	orr.w	r2, r3, #1
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	661a      	str	r2, [r3, #96]	@ 0x60
 8005e7e:	e018      	b.n	8005eb2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	f003 0303 	and.w	r3, r3, #3
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d111      	bne.n	8005eb2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e92:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d105      	bne.n	8005eb2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005eaa:	f043 0201 	orr.w	r2, r3, #1
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005eb2:	68f8      	ldr	r0, [r7, #12]
 8005eb4:	f7fc f822 	bl	8001efc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005eb8:	e00e      	b.n	8005ed8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ebe:	f003 0310 	and.w	r3, r3, #16
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d003      	beq.n	8005ece <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005ec6:	68f8      	ldr	r0, [r7, #12]
 8005ec8:	f7ff f9da 	bl	8005280 <HAL_ADC_ErrorCallback>
}
 8005ecc:	e004      	b.n	8005ed8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ed2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	4798      	blx	r3
}
 8005ed8:	bf00      	nop
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eec:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005eee:	68f8      	ldr	r0, [r7, #12]
 8005ef0:	f7ff f9b2 	bl	8005258 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005ef4:	bf00      	nop
 8005ef6:	3710      	adds	r7, #16
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f08:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f0e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f1a:	f043 0204 	orr.w	r2, r3, #4
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005f22:	68f8      	ldr	r0, [r7, #12]
 8005f24:	f7ff f9ac 	bl	8005280 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005f28:	bf00      	nop
 8005f2a:	3710      	adds	r7, #16
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a6c      	ldr	r2, [pc, #432]	@ (80060f0 <ADC_ConfigureBoostMode+0x1c0>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d004      	beq.n	8005f4c <ADC_ConfigureBoostMode+0x1c>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a6b      	ldr	r2, [pc, #428]	@ (80060f4 <ADC_ConfigureBoostMode+0x1c4>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d109      	bne.n	8005f60 <ADC_ConfigureBoostMode+0x30>
 8005f4c:	4b6a      	ldr	r3, [pc, #424]	@ (80060f8 <ADC_ConfigureBoostMode+0x1c8>)
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	bf14      	ite	ne
 8005f58:	2301      	movne	r3, #1
 8005f5a:	2300      	moveq	r3, #0
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	e008      	b.n	8005f72 <ADC_ConfigureBoostMode+0x42>
 8005f60:	4b66      	ldr	r3, [pc, #408]	@ (80060fc <ADC_ConfigureBoostMode+0x1cc>)
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	bf14      	ite	ne
 8005f6c:	2301      	movne	r3, #1
 8005f6e:	2300      	moveq	r3, #0
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d01c      	beq.n	8005fb0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005f76:	f004 ff17 	bl	800ada8 <HAL_RCC_GetHCLKFreq>
 8005f7a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f84:	d010      	beq.n	8005fa8 <ADC_ConfigureBoostMode+0x78>
 8005f86:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f8a:	d873      	bhi.n	8006074 <ADC_ConfigureBoostMode+0x144>
 8005f8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f90:	d002      	beq.n	8005f98 <ADC_ConfigureBoostMode+0x68>
 8005f92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f96:	d16d      	bne.n	8006074 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	0c1b      	lsrs	r3, r3, #16
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fa4:	60fb      	str	r3, [r7, #12]
        break;
 8005fa6:	e068      	b.n	800607a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	089b      	lsrs	r3, r3, #2
 8005fac:	60fb      	str	r3, [r7, #12]
        break;
 8005fae:	e064      	b.n	800607a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005fb0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8005fb4:	f04f 0100 	mov.w	r1, #0
 8005fb8:	f006 f8f2 	bl	800c1a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8005fbc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8005fc6:	d051      	beq.n	800606c <ADC_ConfigureBoostMode+0x13c>
 8005fc8:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8005fcc:	d854      	bhi.n	8006078 <ADC_ConfigureBoostMode+0x148>
 8005fce:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8005fd2:	d047      	beq.n	8006064 <ADC_ConfigureBoostMode+0x134>
 8005fd4:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8005fd8:	d84e      	bhi.n	8006078 <ADC_ConfigureBoostMode+0x148>
 8005fda:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8005fde:	d03d      	beq.n	800605c <ADC_ConfigureBoostMode+0x12c>
 8005fe0:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8005fe4:	d848      	bhi.n	8006078 <ADC_ConfigureBoostMode+0x148>
 8005fe6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005fea:	d033      	beq.n	8006054 <ADC_ConfigureBoostMode+0x124>
 8005fec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ff0:	d842      	bhi.n	8006078 <ADC_ConfigureBoostMode+0x148>
 8005ff2:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8005ff6:	d029      	beq.n	800604c <ADC_ConfigureBoostMode+0x11c>
 8005ff8:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8005ffc:	d83c      	bhi.n	8006078 <ADC_ConfigureBoostMode+0x148>
 8005ffe:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006002:	d01a      	beq.n	800603a <ADC_ConfigureBoostMode+0x10a>
 8006004:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006008:	d836      	bhi.n	8006078 <ADC_ConfigureBoostMode+0x148>
 800600a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800600e:	d014      	beq.n	800603a <ADC_ConfigureBoostMode+0x10a>
 8006010:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8006014:	d830      	bhi.n	8006078 <ADC_ConfigureBoostMode+0x148>
 8006016:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800601a:	d00e      	beq.n	800603a <ADC_ConfigureBoostMode+0x10a>
 800601c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006020:	d82a      	bhi.n	8006078 <ADC_ConfigureBoostMode+0x148>
 8006022:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006026:	d008      	beq.n	800603a <ADC_ConfigureBoostMode+0x10a>
 8006028:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800602c:	d824      	bhi.n	8006078 <ADC_ConfigureBoostMode+0x148>
 800602e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006032:	d002      	beq.n	800603a <ADC_ConfigureBoostMode+0x10a>
 8006034:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006038:	d11e      	bne.n	8006078 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	0c9b      	lsrs	r3, r3, #18
 8006040:	005b      	lsls	r3, r3, #1
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	fbb2 f3f3 	udiv	r3, r2, r3
 8006048:	60fb      	str	r3, [r7, #12]
        break;
 800604a:	e016      	b.n	800607a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	091b      	lsrs	r3, r3, #4
 8006050:	60fb      	str	r3, [r7, #12]
        break;
 8006052:	e012      	b.n	800607a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	095b      	lsrs	r3, r3, #5
 8006058:	60fb      	str	r3, [r7, #12]
        break;
 800605a:	e00e      	b.n	800607a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	099b      	lsrs	r3, r3, #6
 8006060:	60fb      	str	r3, [r7, #12]
        break;
 8006062:	e00a      	b.n	800607a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	09db      	lsrs	r3, r3, #7
 8006068:	60fb      	str	r3, [r7, #12]
        break;
 800606a:	e006      	b.n	800607a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	0a1b      	lsrs	r3, r3, #8
 8006070:	60fb      	str	r3, [r7, #12]
        break;
 8006072:	e002      	b.n	800607a <ADC_ConfigureBoostMode+0x14a>
        break;
 8006074:	bf00      	nop
 8006076:	e000      	b.n	800607a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8006078:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	085b      	lsrs	r3, r3, #1
 800607e:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	4a1f      	ldr	r2, [pc, #124]	@ (8006100 <ADC_ConfigureBoostMode+0x1d0>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d808      	bhi.n	800609a <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	689a      	ldr	r2, [r3, #8]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006096:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006098:	e025      	b.n	80060e6 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	4a19      	ldr	r2, [pc, #100]	@ (8006104 <ADC_ConfigureBoostMode+0x1d4>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d80a      	bhi.n	80060b8 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80060b4:	609a      	str	r2, [r3, #8]
}
 80060b6:	e016      	b.n	80060e6 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	4a13      	ldr	r2, [pc, #76]	@ (8006108 <ADC_ConfigureBoostMode+0x1d8>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d80a      	bhi.n	80060d6 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060d2:	609a      	str	r2, [r3, #8]
}
 80060d4:	e007      	b.n	80060e6 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	689a      	ldr	r2, [r3, #8]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80060e4:	609a      	str	r2, [r3, #8]
}
 80060e6:	bf00      	nop
 80060e8:	3710      	adds	r7, #16
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	40022000 	.word	0x40022000
 80060f4:	40022100 	.word	0x40022100
 80060f8:	40022300 	.word	0x40022300
 80060fc:	58026300 	.word	0x58026300
 8006100:	005f5e10 	.word	0x005f5e10
 8006104:	00bebc20 	.word	0x00bebc20
 8006108:	017d7840 	.word	0x017d7840

0800610c <LL_ADC_IsEnabled>:
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	f003 0301 	and.w	r3, r3, #1
 800611c:	2b01      	cmp	r3, #1
 800611e:	d101      	bne.n	8006124 <LL_ADC_IsEnabled+0x18>
 8006120:	2301      	movs	r3, #1
 8006122:	e000      	b.n	8006126 <LL_ADC_IsEnabled+0x1a>
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	370c      	adds	r7, #12
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr

08006132 <LL_ADC_REG_IsConversionOngoing>:
{
 8006132:	b480      	push	{r7}
 8006134:	b083      	sub	sp, #12
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f003 0304 	and.w	r3, r3, #4
 8006142:	2b04      	cmp	r3, #4
 8006144:	d101      	bne.n	800614a <LL_ADC_REG_IsConversionOngoing+0x18>
 8006146:	2301      	movs	r3, #1
 8006148:	e000      	b.n	800614c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006160:	bf00      	nop
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006174:	bf00      	nop
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006188:	bf00      	nop
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800619c:	bf00      	nop
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80061b0:	bf00      	nop
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80061bc:	b590      	push	{r4, r7, lr}
 80061be:	b0a3      	sub	sp, #140	@ 0x8c
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80061c6:	2300      	movs	r3, #0
 80061c8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d101      	bne.n	80061da <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80061d6:	2302      	movs	r3, #2
 80061d8:	e0c1      	b.n	800635e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80061e2:	2300      	movs	r3, #0
 80061e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80061e6:	2300      	movs	r3, #0
 80061e8:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a5e      	ldr	r2, [pc, #376]	@ (8006368 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d102      	bne.n	80061fa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80061f4:	4b5d      	ldr	r3, [pc, #372]	@ (800636c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80061f6:	60fb      	str	r3, [r7, #12]
 80061f8:	e001      	b.n	80061fe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80061fa:	2300      	movs	r3, #0
 80061fc:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d10b      	bne.n	800621c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006208:	f043 0220 	orr.w	r2, r3, #32
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	e0a0      	b.n	800635e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	4618      	mov	r0, r3
 8006220:	f7ff ff87 	bl	8006132 <LL_ADC_REG_IsConversionOngoing>
 8006224:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4618      	mov	r0, r3
 800622e:	f7ff ff80 	bl	8006132 <LL_ADC_REG_IsConversionOngoing>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	f040 8081 	bne.w	800633c <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800623a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800623e:	2b00      	cmp	r3, #0
 8006240:	d17c      	bne.n	800633c <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a48      	ldr	r2, [pc, #288]	@ (8006368 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d004      	beq.n	8006256 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a46      	ldr	r2, [pc, #280]	@ (800636c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d101      	bne.n	800625a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8006256:	4b46      	ldr	r3, [pc, #280]	@ (8006370 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006258:	e000      	b.n	800625c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800625a:	4b46      	ldr	r3, [pc, #280]	@ (8006374 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800625c:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d039      	beq.n	80062da <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8006266:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	431a      	orrs	r2, r3
 8006274:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006276:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a3a      	ldr	r2, [pc, #232]	@ (8006368 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d004      	beq.n	800628c <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a39      	ldr	r2, [pc, #228]	@ (800636c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d10e      	bne.n	80062aa <HAL_ADCEx_MultiModeConfigChannel+0xee>
 800628c:	4836      	ldr	r0, [pc, #216]	@ (8006368 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800628e:	f7ff ff3d 	bl	800610c <LL_ADC_IsEnabled>
 8006292:	4604      	mov	r4, r0
 8006294:	4835      	ldr	r0, [pc, #212]	@ (800636c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006296:	f7ff ff39 	bl	800610c <LL_ADC_IsEnabled>
 800629a:	4603      	mov	r3, r0
 800629c:	4323      	orrs	r3, r4
 800629e:	2b00      	cmp	r3, #0
 80062a0:	bf0c      	ite	eq
 80062a2:	2301      	moveq	r3, #1
 80062a4:	2300      	movne	r3, #0
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	e008      	b.n	80062bc <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80062aa:	4833      	ldr	r0, [pc, #204]	@ (8006378 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80062ac:	f7ff ff2e 	bl	800610c <LL_ADC_IsEnabled>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	bf0c      	ite	eq
 80062b6:	2301      	moveq	r3, #1
 80062b8:	2300      	movne	r3, #0
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d047      	beq.n	8006350 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80062c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80062c2:	689a      	ldr	r2, [r3, #8]
 80062c4:	4b2d      	ldr	r3, [pc, #180]	@ (800637c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80062c6:	4013      	ands	r3, r2
 80062c8:	683a      	ldr	r2, [r7, #0]
 80062ca:	6811      	ldr	r1, [r2, #0]
 80062cc:	683a      	ldr	r2, [r7, #0]
 80062ce:	6892      	ldr	r2, [r2, #8]
 80062d0:	430a      	orrs	r2, r1
 80062d2:	431a      	orrs	r2, r3
 80062d4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80062d6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80062d8:	e03a      	b.n	8006350 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80062da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80062e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80062e4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a1f      	ldr	r2, [pc, #124]	@ (8006368 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d004      	beq.n	80062fa <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a1d      	ldr	r2, [pc, #116]	@ (800636c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d10e      	bne.n	8006318 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80062fa:	481b      	ldr	r0, [pc, #108]	@ (8006368 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80062fc:	f7ff ff06 	bl	800610c <LL_ADC_IsEnabled>
 8006300:	4604      	mov	r4, r0
 8006302:	481a      	ldr	r0, [pc, #104]	@ (800636c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006304:	f7ff ff02 	bl	800610c <LL_ADC_IsEnabled>
 8006308:	4603      	mov	r3, r0
 800630a:	4323      	orrs	r3, r4
 800630c:	2b00      	cmp	r3, #0
 800630e:	bf0c      	ite	eq
 8006310:	2301      	moveq	r3, #1
 8006312:	2300      	movne	r3, #0
 8006314:	b2db      	uxtb	r3, r3
 8006316:	e008      	b.n	800632a <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8006318:	4817      	ldr	r0, [pc, #92]	@ (8006378 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800631a:	f7ff fef7 	bl	800610c <LL_ADC_IsEnabled>
 800631e:	4603      	mov	r3, r0
 8006320:	2b00      	cmp	r3, #0
 8006322:	bf0c      	ite	eq
 8006324:	2301      	moveq	r3, #1
 8006326:	2300      	movne	r3, #0
 8006328:	b2db      	uxtb	r3, r3
 800632a:	2b00      	cmp	r3, #0
 800632c:	d010      	beq.n	8006350 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800632e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006330:	689a      	ldr	r2, [r3, #8]
 8006332:	4b12      	ldr	r3, [pc, #72]	@ (800637c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006334:	4013      	ands	r3, r2
 8006336:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006338:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800633a:	e009      	b.n	8006350 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006340:	f043 0220 	orr.w	r2, r3, #32
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800634e:	e000      	b.n	8006352 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006350:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800635a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 800635e:	4618      	mov	r0, r3
 8006360:	378c      	adds	r7, #140	@ 0x8c
 8006362:	46bd      	mov	sp, r7
 8006364:	bd90      	pop	{r4, r7, pc}
 8006366:	bf00      	nop
 8006368:	40022000 	.word	0x40022000
 800636c:	40022100 	.word	0x40022100
 8006370:	40022300 	.word	0x40022300
 8006374:	58026300 	.word	0x58026300
 8006378:	58026000 	.word	0x58026000
 800637c:	fffff0e0 	.word	0xfffff0e0

08006380 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f003 0307 	and.w	r3, r3, #7
 800638e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006390:	4b0b      	ldr	r3, [pc, #44]	@ (80063c0 <__NVIC_SetPriorityGrouping+0x40>)
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006396:	68ba      	ldr	r2, [r7, #8]
 8006398:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800639c:	4013      	ands	r3, r2
 800639e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80063a8:	4b06      	ldr	r3, [pc, #24]	@ (80063c4 <__NVIC_SetPriorityGrouping+0x44>)
 80063aa:	4313      	orrs	r3, r2
 80063ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80063ae:	4a04      	ldr	r2, [pc, #16]	@ (80063c0 <__NVIC_SetPriorityGrouping+0x40>)
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	60d3      	str	r3, [r2, #12]
}
 80063b4:	bf00      	nop
 80063b6:	3714      	adds	r7, #20
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr
 80063c0:	e000ed00 	.word	0xe000ed00
 80063c4:	05fa0000 	.word	0x05fa0000

080063c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80063c8:	b480      	push	{r7}
 80063ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80063cc:	4b04      	ldr	r3, [pc, #16]	@ (80063e0 <__NVIC_GetPriorityGrouping+0x18>)
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	0a1b      	lsrs	r3, r3, #8
 80063d2:	f003 0307 	and.w	r3, r3, #7
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr
 80063e0:	e000ed00 	.word	0xe000ed00

080063e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	4603      	mov	r3, r0
 80063ec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80063ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	db0b      	blt.n	800640e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80063f6:	88fb      	ldrh	r3, [r7, #6]
 80063f8:	f003 021f 	and.w	r2, r3, #31
 80063fc:	4907      	ldr	r1, [pc, #28]	@ (800641c <__NVIC_EnableIRQ+0x38>)
 80063fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006402:	095b      	lsrs	r3, r3, #5
 8006404:	2001      	movs	r0, #1
 8006406:	fa00 f202 	lsl.w	r2, r0, r2
 800640a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800640e:	bf00      	nop
 8006410:	370c      	adds	r7, #12
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr
 800641a:	bf00      	nop
 800641c:	e000e100 	.word	0xe000e100

08006420 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	4603      	mov	r3, r0
 8006428:	6039      	str	r1, [r7, #0]
 800642a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800642c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006430:	2b00      	cmp	r3, #0
 8006432:	db0a      	blt.n	800644a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	b2da      	uxtb	r2, r3
 8006438:	490c      	ldr	r1, [pc, #48]	@ (800646c <__NVIC_SetPriority+0x4c>)
 800643a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800643e:	0112      	lsls	r2, r2, #4
 8006440:	b2d2      	uxtb	r2, r2
 8006442:	440b      	add	r3, r1
 8006444:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006448:	e00a      	b.n	8006460 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	b2da      	uxtb	r2, r3
 800644e:	4908      	ldr	r1, [pc, #32]	@ (8006470 <__NVIC_SetPriority+0x50>)
 8006450:	88fb      	ldrh	r3, [r7, #6]
 8006452:	f003 030f 	and.w	r3, r3, #15
 8006456:	3b04      	subs	r3, #4
 8006458:	0112      	lsls	r2, r2, #4
 800645a:	b2d2      	uxtb	r2, r2
 800645c:	440b      	add	r3, r1
 800645e:	761a      	strb	r2, [r3, #24]
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr
 800646c:	e000e100 	.word	0xe000e100
 8006470:	e000ed00 	.word	0xe000ed00

08006474 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006474:	b480      	push	{r7}
 8006476:	b089      	sub	sp, #36	@ 0x24
 8006478:	af00      	add	r7, sp, #0
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	60b9      	str	r1, [r7, #8]
 800647e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f003 0307 	and.w	r3, r3, #7
 8006486:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	f1c3 0307 	rsb	r3, r3, #7
 800648e:	2b04      	cmp	r3, #4
 8006490:	bf28      	it	cs
 8006492:	2304      	movcs	r3, #4
 8006494:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	3304      	adds	r3, #4
 800649a:	2b06      	cmp	r3, #6
 800649c:	d902      	bls.n	80064a4 <NVIC_EncodePriority+0x30>
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	3b03      	subs	r3, #3
 80064a2:	e000      	b.n	80064a6 <NVIC_EncodePriority+0x32>
 80064a4:	2300      	movs	r3, #0
 80064a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064a8:	f04f 32ff 	mov.w	r2, #4294967295
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	fa02 f303 	lsl.w	r3, r2, r3
 80064b2:	43da      	mvns	r2, r3
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	401a      	ands	r2, r3
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80064bc:	f04f 31ff 	mov.w	r1, #4294967295
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	fa01 f303 	lsl.w	r3, r1, r3
 80064c6:	43d9      	mvns	r1, r3
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064cc:	4313      	orrs	r3, r2
         );
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3724      	adds	r7, #36	@ 0x24
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr
	...

080064dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	3b01      	subs	r3, #1
 80064e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80064ec:	d301      	bcc.n	80064f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80064ee:	2301      	movs	r3, #1
 80064f0:	e00f      	b.n	8006512 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80064f2:	4a0a      	ldr	r2, [pc, #40]	@ (800651c <SysTick_Config+0x40>)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	3b01      	subs	r3, #1
 80064f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80064fa:	210f      	movs	r1, #15
 80064fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006500:	f7ff ff8e 	bl	8006420 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006504:	4b05      	ldr	r3, [pc, #20]	@ (800651c <SysTick_Config+0x40>)
 8006506:	2200      	movs	r2, #0
 8006508:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800650a:	4b04      	ldr	r3, [pc, #16]	@ (800651c <SysTick_Config+0x40>)
 800650c:	2207      	movs	r2, #7
 800650e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	3708      	adds	r7, #8
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	e000e010 	.word	0xe000e010

08006520 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b082      	sub	sp, #8
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f7ff ff29 	bl	8006380 <__NVIC_SetPriorityGrouping>
}
 800652e:	bf00      	nop
 8006530:	3708      	adds	r7, #8
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006536:	b580      	push	{r7, lr}
 8006538:	b086      	sub	sp, #24
 800653a:	af00      	add	r7, sp, #0
 800653c:	4603      	mov	r3, r0
 800653e:	60b9      	str	r1, [r7, #8]
 8006540:	607a      	str	r2, [r7, #4]
 8006542:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006544:	f7ff ff40 	bl	80063c8 <__NVIC_GetPriorityGrouping>
 8006548:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	68b9      	ldr	r1, [r7, #8]
 800654e:	6978      	ldr	r0, [r7, #20]
 8006550:	f7ff ff90 	bl	8006474 <NVIC_EncodePriority>
 8006554:	4602      	mov	r2, r0
 8006556:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800655a:	4611      	mov	r1, r2
 800655c:	4618      	mov	r0, r3
 800655e:	f7ff ff5f 	bl	8006420 <__NVIC_SetPriority>
}
 8006562:	bf00      	nop
 8006564:	3718      	adds	r7, #24
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}

0800656a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800656a:	b580      	push	{r7, lr}
 800656c:	b082      	sub	sp, #8
 800656e:	af00      	add	r7, sp, #0
 8006570:	4603      	mov	r3, r0
 8006572:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006574:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006578:	4618      	mov	r0, r3
 800657a:	f7ff ff33 	bl	80063e4 <__NVIC_EnableIRQ>
}
 800657e:	bf00      	nop
 8006580:	3708      	adds	r7, #8
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006586:	b580      	push	{r7, lr}
 8006588:	b082      	sub	sp, #8
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f7ff ffa4 	bl	80064dc <SysTick_Config>
 8006594:	4603      	mov	r3, r0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3708      	adds	r7, #8
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
	...

080065a0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b086      	sub	sp, #24
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80065a8:	f7fd fe1c 	bl	80041e4 <HAL_GetTick>
 80065ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d101      	bne.n	80065b8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	e312      	b.n	8006bde <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a66      	ldr	r2, [pc, #408]	@ (8006758 <HAL_DMA_Init+0x1b8>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d04a      	beq.n	8006658 <HAL_DMA_Init+0xb8>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a65      	ldr	r2, [pc, #404]	@ (800675c <HAL_DMA_Init+0x1bc>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d045      	beq.n	8006658 <HAL_DMA_Init+0xb8>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a63      	ldr	r2, [pc, #396]	@ (8006760 <HAL_DMA_Init+0x1c0>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d040      	beq.n	8006658 <HAL_DMA_Init+0xb8>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a62      	ldr	r2, [pc, #392]	@ (8006764 <HAL_DMA_Init+0x1c4>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d03b      	beq.n	8006658 <HAL_DMA_Init+0xb8>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a60      	ldr	r2, [pc, #384]	@ (8006768 <HAL_DMA_Init+0x1c8>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d036      	beq.n	8006658 <HAL_DMA_Init+0xb8>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a5f      	ldr	r2, [pc, #380]	@ (800676c <HAL_DMA_Init+0x1cc>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d031      	beq.n	8006658 <HAL_DMA_Init+0xb8>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a5d      	ldr	r2, [pc, #372]	@ (8006770 <HAL_DMA_Init+0x1d0>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d02c      	beq.n	8006658 <HAL_DMA_Init+0xb8>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a5c      	ldr	r2, [pc, #368]	@ (8006774 <HAL_DMA_Init+0x1d4>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d027      	beq.n	8006658 <HAL_DMA_Init+0xb8>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a5a      	ldr	r2, [pc, #360]	@ (8006778 <HAL_DMA_Init+0x1d8>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d022      	beq.n	8006658 <HAL_DMA_Init+0xb8>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a59      	ldr	r2, [pc, #356]	@ (800677c <HAL_DMA_Init+0x1dc>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d01d      	beq.n	8006658 <HAL_DMA_Init+0xb8>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a57      	ldr	r2, [pc, #348]	@ (8006780 <HAL_DMA_Init+0x1e0>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d018      	beq.n	8006658 <HAL_DMA_Init+0xb8>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a56      	ldr	r2, [pc, #344]	@ (8006784 <HAL_DMA_Init+0x1e4>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d013      	beq.n	8006658 <HAL_DMA_Init+0xb8>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a54      	ldr	r2, [pc, #336]	@ (8006788 <HAL_DMA_Init+0x1e8>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d00e      	beq.n	8006658 <HAL_DMA_Init+0xb8>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a53      	ldr	r2, [pc, #332]	@ (800678c <HAL_DMA_Init+0x1ec>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d009      	beq.n	8006658 <HAL_DMA_Init+0xb8>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a51      	ldr	r2, [pc, #324]	@ (8006790 <HAL_DMA_Init+0x1f0>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d004      	beq.n	8006658 <HAL_DMA_Init+0xb8>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a50      	ldr	r2, [pc, #320]	@ (8006794 <HAL_DMA_Init+0x1f4>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d101      	bne.n	800665c <HAL_DMA_Init+0xbc>
 8006658:	2301      	movs	r3, #1
 800665a:	e000      	b.n	800665e <HAL_DMA_Init+0xbe>
 800665c:	2300      	movs	r3, #0
 800665e:	2b00      	cmp	r3, #0
 8006660:	f000 813c 	beq.w	80068dc <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2202      	movs	r2, #2
 8006668:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a37      	ldr	r2, [pc, #220]	@ (8006758 <HAL_DMA_Init+0x1b8>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d04a      	beq.n	8006714 <HAL_DMA_Init+0x174>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a36      	ldr	r2, [pc, #216]	@ (800675c <HAL_DMA_Init+0x1bc>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d045      	beq.n	8006714 <HAL_DMA_Init+0x174>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a34      	ldr	r2, [pc, #208]	@ (8006760 <HAL_DMA_Init+0x1c0>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d040      	beq.n	8006714 <HAL_DMA_Init+0x174>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a33      	ldr	r2, [pc, #204]	@ (8006764 <HAL_DMA_Init+0x1c4>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d03b      	beq.n	8006714 <HAL_DMA_Init+0x174>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a31      	ldr	r2, [pc, #196]	@ (8006768 <HAL_DMA_Init+0x1c8>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d036      	beq.n	8006714 <HAL_DMA_Init+0x174>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a30      	ldr	r2, [pc, #192]	@ (800676c <HAL_DMA_Init+0x1cc>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d031      	beq.n	8006714 <HAL_DMA_Init+0x174>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a2e      	ldr	r2, [pc, #184]	@ (8006770 <HAL_DMA_Init+0x1d0>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d02c      	beq.n	8006714 <HAL_DMA_Init+0x174>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a2d      	ldr	r2, [pc, #180]	@ (8006774 <HAL_DMA_Init+0x1d4>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d027      	beq.n	8006714 <HAL_DMA_Init+0x174>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a2b      	ldr	r2, [pc, #172]	@ (8006778 <HAL_DMA_Init+0x1d8>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d022      	beq.n	8006714 <HAL_DMA_Init+0x174>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a2a      	ldr	r2, [pc, #168]	@ (800677c <HAL_DMA_Init+0x1dc>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d01d      	beq.n	8006714 <HAL_DMA_Init+0x174>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a28      	ldr	r2, [pc, #160]	@ (8006780 <HAL_DMA_Init+0x1e0>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d018      	beq.n	8006714 <HAL_DMA_Init+0x174>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a27      	ldr	r2, [pc, #156]	@ (8006784 <HAL_DMA_Init+0x1e4>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d013      	beq.n	8006714 <HAL_DMA_Init+0x174>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a25      	ldr	r2, [pc, #148]	@ (8006788 <HAL_DMA_Init+0x1e8>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d00e      	beq.n	8006714 <HAL_DMA_Init+0x174>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a24      	ldr	r2, [pc, #144]	@ (800678c <HAL_DMA_Init+0x1ec>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d009      	beq.n	8006714 <HAL_DMA_Init+0x174>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a22      	ldr	r2, [pc, #136]	@ (8006790 <HAL_DMA_Init+0x1f0>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d004      	beq.n	8006714 <HAL_DMA_Init+0x174>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a21      	ldr	r2, [pc, #132]	@ (8006794 <HAL_DMA_Init+0x1f4>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d108      	bne.n	8006726 <HAL_DMA_Init+0x186>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f022 0201 	bic.w	r2, r2, #1
 8006722:	601a      	str	r2, [r3, #0]
 8006724:	e007      	b.n	8006736 <HAL_DMA_Init+0x196>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f022 0201 	bic.w	r2, r2, #1
 8006734:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006736:	e02f      	b.n	8006798 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006738:	f7fd fd54 	bl	80041e4 <HAL_GetTick>
 800673c:	4602      	mov	r2, r0
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	2b05      	cmp	r3, #5
 8006744:	d928      	bls.n	8006798 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2220      	movs	r2, #32
 800674a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2203      	movs	r2, #3
 8006750:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e242      	b.n	8006bde <HAL_DMA_Init+0x63e>
 8006758:	40020010 	.word	0x40020010
 800675c:	40020028 	.word	0x40020028
 8006760:	40020040 	.word	0x40020040
 8006764:	40020058 	.word	0x40020058
 8006768:	40020070 	.word	0x40020070
 800676c:	40020088 	.word	0x40020088
 8006770:	400200a0 	.word	0x400200a0
 8006774:	400200b8 	.word	0x400200b8
 8006778:	40020410 	.word	0x40020410
 800677c:	40020428 	.word	0x40020428
 8006780:	40020440 	.word	0x40020440
 8006784:	40020458 	.word	0x40020458
 8006788:	40020470 	.word	0x40020470
 800678c:	40020488 	.word	0x40020488
 8006790:	400204a0 	.word	0x400204a0
 8006794:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 0301 	and.w	r3, r3, #1
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d1c8      	bne.n	8006738 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80067ae:	697a      	ldr	r2, [r7, #20]
 80067b0:	4b83      	ldr	r3, [pc, #524]	@ (80069c0 <HAL_DMA_Init+0x420>)
 80067b2:	4013      	ands	r3, r2
 80067b4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80067be:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80067ca:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	699b      	ldr	r3, [r3, #24]
 80067d0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80067d6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6a1b      	ldr	r3, [r3, #32]
 80067dc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e8:	2b04      	cmp	r3, #4
 80067ea:	d107      	bne.n	80067fc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067f4:	4313      	orrs	r3, r2
 80067f6:	697a      	ldr	r2, [r7, #20]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	2b28      	cmp	r3, #40	@ 0x28
 8006802:	d903      	bls.n	800680c <HAL_DMA_Init+0x26c>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	2b2e      	cmp	r3, #46	@ 0x2e
 800680a:	d91f      	bls.n	800684c <HAL_DMA_Init+0x2ac>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	2b3e      	cmp	r3, #62	@ 0x3e
 8006812:	d903      	bls.n	800681c <HAL_DMA_Init+0x27c>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	2b42      	cmp	r3, #66	@ 0x42
 800681a:	d917      	bls.n	800684c <HAL_DMA_Init+0x2ac>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	2b46      	cmp	r3, #70	@ 0x46
 8006822:	d903      	bls.n	800682c <HAL_DMA_Init+0x28c>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	2b48      	cmp	r3, #72	@ 0x48
 800682a:	d90f      	bls.n	800684c <HAL_DMA_Init+0x2ac>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	2b4e      	cmp	r3, #78	@ 0x4e
 8006832:	d903      	bls.n	800683c <HAL_DMA_Init+0x29c>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	2b52      	cmp	r3, #82	@ 0x52
 800683a:	d907      	bls.n	800684c <HAL_DMA_Init+0x2ac>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	2b73      	cmp	r3, #115	@ 0x73
 8006842:	d905      	bls.n	8006850 <HAL_DMA_Init+0x2b0>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	2b77      	cmp	r3, #119	@ 0x77
 800684a:	d801      	bhi.n	8006850 <HAL_DMA_Init+0x2b0>
 800684c:	2301      	movs	r3, #1
 800684e:	e000      	b.n	8006852 <HAL_DMA_Init+0x2b2>
 8006850:	2300      	movs	r3, #0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d003      	beq.n	800685e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800685c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	697a      	ldr	r2, [r7, #20]
 8006864:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	695b      	ldr	r3, [r3, #20]
 800686c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	f023 0307 	bic.w	r3, r3, #7
 8006874:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800687a:	697a      	ldr	r2, [r7, #20]
 800687c:	4313      	orrs	r3, r2
 800687e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006884:	2b04      	cmp	r3, #4
 8006886:	d117      	bne.n	80068b8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800688c:	697a      	ldr	r2, [r7, #20]
 800688e:	4313      	orrs	r3, r2
 8006890:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00e      	beq.n	80068b8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f001 fdca 	bl	8008434 <DMA_CheckFifoParam>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d008      	beq.n	80068b8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2240      	movs	r2, #64	@ 0x40
 80068aa:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e192      	b.n	8006bde <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	697a      	ldr	r2, [r7, #20]
 80068be:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f001 fd05 	bl	80082d0 <DMA_CalcBaseAndBitshift>
 80068c6:	4603      	mov	r3, r0
 80068c8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068ce:	f003 031f 	and.w	r3, r3, #31
 80068d2:	223f      	movs	r2, #63	@ 0x3f
 80068d4:	409a      	lsls	r2, r3
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	609a      	str	r2, [r3, #8]
 80068da:	e0c8      	b.n	8006a6e <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a38      	ldr	r2, [pc, #224]	@ (80069c4 <HAL_DMA_Init+0x424>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d022      	beq.n	800692c <HAL_DMA_Init+0x38c>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a37      	ldr	r2, [pc, #220]	@ (80069c8 <HAL_DMA_Init+0x428>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d01d      	beq.n	800692c <HAL_DMA_Init+0x38c>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a35      	ldr	r2, [pc, #212]	@ (80069cc <HAL_DMA_Init+0x42c>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d018      	beq.n	800692c <HAL_DMA_Init+0x38c>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a34      	ldr	r2, [pc, #208]	@ (80069d0 <HAL_DMA_Init+0x430>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d013      	beq.n	800692c <HAL_DMA_Init+0x38c>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a32      	ldr	r2, [pc, #200]	@ (80069d4 <HAL_DMA_Init+0x434>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d00e      	beq.n	800692c <HAL_DMA_Init+0x38c>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a31      	ldr	r2, [pc, #196]	@ (80069d8 <HAL_DMA_Init+0x438>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d009      	beq.n	800692c <HAL_DMA_Init+0x38c>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a2f      	ldr	r2, [pc, #188]	@ (80069dc <HAL_DMA_Init+0x43c>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d004      	beq.n	800692c <HAL_DMA_Init+0x38c>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a2e      	ldr	r2, [pc, #184]	@ (80069e0 <HAL_DMA_Init+0x440>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d101      	bne.n	8006930 <HAL_DMA_Init+0x390>
 800692c:	2301      	movs	r3, #1
 800692e:	e000      	b.n	8006932 <HAL_DMA_Init+0x392>
 8006930:	2300      	movs	r3, #0
 8006932:	2b00      	cmp	r3, #0
 8006934:	f000 8092 	beq.w	8006a5c <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a21      	ldr	r2, [pc, #132]	@ (80069c4 <HAL_DMA_Init+0x424>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d021      	beq.n	8006986 <HAL_DMA_Init+0x3e6>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a20      	ldr	r2, [pc, #128]	@ (80069c8 <HAL_DMA_Init+0x428>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d01c      	beq.n	8006986 <HAL_DMA_Init+0x3e6>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a1e      	ldr	r2, [pc, #120]	@ (80069cc <HAL_DMA_Init+0x42c>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d017      	beq.n	8006986 <HAL_DMA_Init+0x3e6>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a1d      	ldr	r2, [pc, #116]	@ (80069d0 <HAL_DMA_Init+0x430>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d012      	beq.n	8006986 <HAL_DMA_Init+0x3e6>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a1b      	ldr	r2, [pc, #108]	@ (80069d4 <HAL_DMA_Init+0x434>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d00d      	beq.n	8006986 <HAL_DMA_Init+0x3e6>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a1a      	ldr	r2, [pc, #104]	@ (80069d8 <HAL_DMA_Init+0x438>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d008      	beq.n	8006986 <HAL_DMA_Init+0x3e6>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a18      	ldr	r2, [pc, #96]	@ (80069dc <HAL_DMA_Init+0x43c>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d003      	beq.n	8006986 <HAL_DMA_Init+0x3e6>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a17      	ldr	r2, [pc, #92]	@ (80069e0 <HAL_DMA_Init+0x440>)
 8006984:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2202      	movs	r2, #2
 800698a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800699e:	697a      	ldr	r2, [r7, #20]
 80069a0:	4b10      	ldr	r3, [pc, #64]	@ (80069e4 <HAL_DMA_Init+0x444>)
 80069a2:	4013      	ands	r3, r2
 80069a4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	2b40      	cmp	r3, #64	@ 0x40
 80069ac:	d01c      	beq.n	80069e8 <HAL_DMA_Init+0x448>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	2b80      	cmp	r3, #128	@ 0x80
 80069b4:	d102      	bne.n	80069bc <HAL_DMA_Init+0x41c>
 80069b6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80069ba:	e016      	b.n	80069ea <HAL_DMA_Init+0x44a>
 80069bc:	2300      	movs	r3, #0
 80069be:	e014      	b.n	80069ea <HAL_DMA_Init+0x44a>
 80069c0:	fe10803f 	.word	0xfe10803f
 80069c4:	58025408 	.word	0x58025408
 80069c8:	5802541c 	.word	0x5802541c
 80069cc:	58025430 	.word	0x58025430
 80069d0:	58025444 	.word	0x58025444
 80069d4:	58025458 	.word	0x58025458
 80069d8:	5802546c 	.word	0x5802546c
 80069dc:	58025480 	.word	0x58025480
 80069e0:	58025494 	.word	0x58025494
 80069e4:	fffe000f 	.word	0xfffe000f
 80069e8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	68d2      	ldr	r2, [r2, #12]
 80069ee:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80069f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80069f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	695b      	ldr	r3, [r3, #20]
 80069fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006a00:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	699b      	ldr	r3, [r3, #24]
 8006a06:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006a08:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	69db      	ldr	r3, [r3, #28]
 8006a0e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006a10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a1b      	ldr	r3, [r3, #32]
 8006a16:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006a18:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006a1a:	697a      	ldr	r2, [r7, #20]
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	697a      	ldr	r2, [r7, #20]
 8006a26:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	4b6e      	ldr	r3, [pc, #440]	@ (8006be8 <HAL_DMA_Init+0x648>)
 8006a30:	4413      	add	r3, r2
 8006a32:	4a6e      	ldr	r2, [pc, #440]	@ (8006bec <HAL_DMA_Init+0x64c>)
 8006a34:	fba2 2303 	umull	r2, r3, r2, r3
 8006a38:	091b      	lsrs	r3, r3, #4
 8006a3a:	009a      	lsls	r2, r3, #2
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f001 fc45 	bl	80082d0 <DMA_CalcBaseAndBitshift>
 8006a46:	4603      	mov	r3, r0
 8006a48:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a4e:	f003 031f 	and.w	r3, r3, #31
 8006a52:	2201      	movs	r2, #1
 8006a54:	409a      	lsls	r2, r3
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	605a      	str	r2, [r3, #4]
 8006a5a:	e008      	b.n	8006a6e <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2240      	movs	r2, #64	@ 0x40
 8006a60:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2203      	movs	r2, #3
 8006a66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e0b7      	b.n	8006bde <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a5f      	ldr	r2, [pc, #380]	@ (8006bf0 <HAL_DMA_Init+0x650>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d072      	beq.n	8006b5e <HAL_DMA_Init+0x5be>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a5d      	ldr	r2, [pc, #372]	@ (8006bf4 <HAL_DMA_Init+0x654>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d06d      	beq.n	8006b5e <HAL_DMA_Init+0x5be>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a5c      	ldr	r2, [pc, #368]	@ (8006bf8 <HAL_DMA_Init+0x658>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d068      	beq.n	8006b5e <HAL_DMA_Init+0x5be>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a5a      	ldr	r2, [pc, #360]	@ (8006bfc <HAL_DMA_Init+0x65c>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d063      	beq.n	8006b5e <HAL_DMA_Init+0x5be>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a59      	ldr	r2, [pc, #356]	@ (8006c00 <HAL_DMA_Init+0x660>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d05e      	beq.n	8006b5e <HAL_DMA_Init+0x5be>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a57      	ldr	r2, [pc, #348]	@ (8006c04 <HAL_DMA_Init+0x664>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d059      	beq.n	8006b5e <HAL_DMA_Init+0x5be>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a56      	ldr	r2, [pc, #344]	@ (8006c08 <HAL_DMA_Init+0x668>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d054      	beq.n	8006b5e <HAL_DMA_Init+0x5be>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a54      	ldr	r2, [pc, #336]	@ (8006c0c <HAL_DMA_Init+0x66c>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d04f      	beq.n	8006b5e <HAL_DMA_Init+0x5be>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a53      	ldr	r2, [pc, #332]	@ (8006c10 <HAL_DMA_Init+0x670>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d04a      	beq.n	8006b5e <HAL_DMA_Init+0x5be>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a51      	ldr	r2, [pc, #324]	@ (8006c14 <HAL_DMA_Init+0x674>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d045      	beq.n	8006b5e <HAL_DMA_Init+0x5be>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a50      	ldr	r2, [pc, #320]	@ (8006c18 <HAL_DMA_Init+0x678>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d040      	beq.n	8006b5e <HAL_DMA_Init+0x5be>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a4e      	ldr	r2, [pc, #312]	@ (8006c1c <HAL_DMA_Init+0x67c>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d03b      	beq.n	8006b5e <HAL_DMA_Init+0x5be>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a4d      	ldr	r2, [pc, #308]	@ (8006c20 <HAL_DMA_Init+0x680>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d036      	beq.n	8006b5e <HAL_DMA_Init+0x5be>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a4b      	ldr	r2, [pc, #300]	@ (8006c24 <HAL_DMA_Init+0x684>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d031      	beq.n	8006b5e <HAL_DMA_Init+0x5be>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a4a      	ldr	r2, [pc, #296]	@ (8006c28 <HAL_DMA_Init+0x688>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d02c      	beq.n	8006b5e <HAL_DMA_Init+0x5be>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a48      	ldr	r2, [pc, #288]	@ (8006c2c <HAL_DMA_Init+0x68c>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d027      	beq.n	8006b5e <HAL_DMA_Init+0x5be>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a47      	ldr	r2, [pc, #284]	@ (8006c30 <HAL_DMA_Init+0x690>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d022      	beq.n	8006b5e <HAL_DMA_Init+0x5be>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a45      	ldr	r2, [pc, #276]	@ (8006c34 <HAL_DMA_Init+0x694>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d01d      	beq.n	8006b5e <HAL_DMA_Init+0x5be>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a44      	ldr	r2, [pc, #272]	@ (8006c38 <HAL_DMA_Init+0x698>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d018      	beq.n	8006b5e <HAL_DMA_Init+0x5be>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a42      	ldr	r2, [pc, #264]	@ (8006c3c <HAL_DMA_Init+0x69c>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d013      	beq.n	8006b5e <HAL_DMA_Init+0x5be>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a41      	ldr	r2, [pc, #260]	@ (8006c40 <HAL_DMA_Init+0x6a0>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d00e      	beq.n	8006b5e <HAL_DMA_Init+0x5be>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a3f      	ldr	r2, [pc, #252]	@ (8006c44 <HAL_DMA_Init+0x6a4>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d009      	beq.n	8006b5e <HAL_DMA_Init+0x5be>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a3e      	ldr	r2, [pc, #248]	@ (8006c48 <HAL_DMA_Init+0x6a8>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d004      	beq.n	8006b5e <HAL_DMA_Init+0x5be>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a3c      	ldr	r2, [pc, #240]	@ (8006c4c <HAL_DMA_Init+0x6ac>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d101      	bne.n	8006b62 <HAL_DMA_Init+0x5c2>
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e000      	b.n	8006b64 <HAL_DMA_Init+0x5c4>
 8006b62:	2300      	movs	r3, #0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d032      	beq.n	8006bce <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f001 fcdf 	bl	800852c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	2b80      	cmp	r3, #128	@ 0x80
 8006b74:	d102      	bne.n	8006b7c <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	685a      	ldr	r2, [r3, #4]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b84:	b2d2      	uxtb	r2, r2
 8006b86:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006b90:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d010      	beq.n	8006bbc <HAL_DMA_Init+0x61c>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	2b08      	cmp	r3, #8
 8006ba0:	d80c      	bhi.n	8006bbc <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f001 fd5c 	bl	8008660 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006bac:	2200      	movs	r2, #0
 8006bae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006bb8:	605a      	str	r2, [r3, #4]
 8006bba:	e008      	b.n	8006bce <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3718      	adds	r7, #24
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	a7fdabf8 	.word	0xa7fdabf8
 8006bec:	cccccccd 	.word	0xcccccccd
 8006bf0:	40020010 	.word	0x40020010
 8006bf4:	40020028 	.word	0x40020028
 8006bf8:	40020040 	.word	0x40020040
 8006bfc:	40020058 	.word	0x40020058
 8006c00:	40020070 	.word	0x40020070
 8006c04:	40020088 	.word	0x40020088
 8006c08:	400200a0 	.word	0x400200a0
 8006c0c:	400200b8 	.word	0x400200b8
 8006c10:	40020410 	.word	0x40020410
 8006c14:	40020428 	.word	0x40020428
 8006c18:	40020440 	.word	0x40020440
 8006c1c:	40020458 	.word	0x40020458
 8006c20:	40020470 	.word	0x40020470
 8006c24:	40020488 	.word	0x40020488
 8006c28:	400204a0 	.word	0x400204a0
 8006c2c:	400204b8 	.word	0x400204b8
 8006c30:	58025408 	.word	0x58025408
 8006c34:	5802541c 	.word	0x5802541c
 8006c38:	58025430 	.word	0x58025430
 8006c3c:	58025444 	.word	0x58025444
 8006c40:	58025458 	.word	0x58025458
 8006c44:	5802546c 	.word	0x5802546c
 8006c48:	58025480 	.word	0x58025480
 8006c4c:	58025494 	.word	0x58025494

08006c50 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b086      	sub	sp, #24
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	607a      	str	r2, [r7, #4]
 8006c5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d101      	bne.n	8006c6c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e226      	b.n	80070ba <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d101      	bne.n	8006c7a <HAL_DMA_Start_IT+0x2a>
 8006c76:	2302      	movs	r3, #2
 8006c78:	e21f      	b.n	80070ba <HAL_DMA_Start_IT+0x46a>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	f040 820a 	bne.w	80070a4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2202      	movs	r2, #2
 8006c94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a68      	ldr	r2, [pc, #416]	@ (8006e44 <HAL_DMA_Start_IT+0x1f4>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d04a      	beq.n	8006d3e <HAL_DMA_Start_IT+0xee>
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a66      	ldr	r2, [pc, #408]	@ (8006e48 <HAL_DMA_Start_IT+0x1f8>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d045      	beq.n	8006d3e <HAL_DMA_Start_IT+0xee>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a65      	ldr	r2, [pc, #404]	@ (8006e4c <HAL_DMA_Start_IT+0x1fc>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d040      	beq.n	8006d3e <HAL_DMA_Start_IT+0xee>
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a63      	ldr	r2, [pc, #396]	@ (8006e50 <HAL_DMA_Start_IT+0x200>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d03b      	beq.n	8006d3e <HAL_DMA_Start_IT+0xee>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a62      	ldr	r2, [pc, #392]	@ (8006e54 <HAL_DMA_Start_IT+0x204>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d036      	beq.n	8006d3e <HAL_DMA_Start_IT+0xee>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a60      	ldr	r2, [pc, #384]	@ (8006e58 <HAL_DMA_Start_IT+0x208>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d031      	beq.n	8006d3e <HAL_DMA_Start_IT+0xee>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a5f      	ldr	r2, [pc, #380]	@ (8006e5c <HAL_DMA_Start_IT+0x20c>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d02c      	beq.n	8006d3e <HAL_DMA_Start_IT+0xee>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a5d      	ldr	r2, [pc, #372]	@ (8006e60 <HAL_DMA_Start_IT+0x210>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d027      	beq.n	8006d3e <HAL_DMA_Start_IT+0xee>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a5c      	ldr	r2, [pc, #368]	@ (8006e64 <HAL_DMA_Start_IT+0x214>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d022      	beq.n	8006d3e <HAL_DMA_Start_IT+0xee>
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a5a      	ldr	r2, [pc, #360]	@ (8006e68 <HAL_DMA_Start_IT+0x218>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d01d      	beq.n	8006d3e <HAL_DMA_Start_IT+0xee>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a59      	ldr	r2, [pc, #356]	@ (8006e6c <HAL_DMA_Start_IT+0x21c>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d018      	beq.n	8006d3e <HAL_DMA_Start_IT+0xee>
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a57      	ldr	r2, [pc, #348]	@ (8006e70 <HAL_DMA_Start_IT+0x220>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d013      	beq.n	8006d3e <HAL_DMA_Start_IT+0xee>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a56      	ldr	r2, [pc, #344]	@ (8006e74 <HAL_DMA_Start_IT+0x224>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d00e      	beq.n	8006d3e <HAL_DMA_Start_IT+0xee>
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a54      	ldr	r2, [pc, #336]	@ (8006e78 <HAL_DMA_Start_IT+0x228>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d009      	beq.n	8006d3e <HAL_DMA_Start_IT+0xee>
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a53      	ldr	r2, [pc, #332]	@ (8006e7c <HAL_DMA_Start_IT+0x22c>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d004      	beq.n	8006d3e <HAL_DMA_Start_IT+0xee>
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a51      	ldr	r2, [pc, #324]	@ (8006e80 <HAL_DMA_Start_IT+0x230>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d108      	bne.n	8006d50 <HAL_DMA_Start_IT+0x100>
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f022 0201 	bic.w	r2, r2, #1
 8006d4c:	601a      	str	r2, [r3, #0]
 8006d4e:	e007      	b.n	8006d60 <HAL_DMA_Start_IT+0x110>
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f022 0201 	bic.w	r2, r2, #1
 8006d5e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	68b9      	ldr	r1, [r7, #8]
 8006d66:	68f8      	ldr	r0, [r7, #12]
 8006d68:	f001 f906 	bl	8007f78 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a34      	ldr	r2, [pc, #208]	@ (8006e44 <HAL_DMA_Start_IT+0x1f4>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d04a      	beq.n	8006e0c <HAL_DMA_Start_IT+0x1bc>
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a33      	ldr	r2, [pc, #204]	@ (8006e48 <HAL_DMA_Start_IT+0x1f8>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d045      	beq.n	8006e0c <HAL_DMA_Start_IT+0x1bc>
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a31      	ldr	r2, [pc, #196]	@ (8006e4c <HAL_DMA_Start_IT+0x1fc>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d040      	beq.n	8006e0c <HAL_DMA_Start_IT+0x1bc>
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a30      	ldr	r2, [pc, #192]	@ (8006e50 <HAL_DMA_Start_IT+0x200>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d03b      	beq.n	8006e0c <HAL_DMA_Start_IT+0x1bc>
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a2e      	ldr	r2, [pc, #184]	@ (8006e54 <HAL_DMA_Start_IT+0x204>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d036      	beq.n	8006e0c <HAL_DMA_Start_IT+0x1bc>
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a2d      	ldr	r2, [pc, #180]	@ (8006e58 <HAL_DMA_Start_IT+0x208>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d031      	beq.n	8006e0c <HAL_DMA_Start_IT+0x1bc>
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a2b      	ldr	r2, [pc, #172]	@ (8006e5c <HAL_DMA_Start_IT+0x20c>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d02c      	beq.n	8006e0c <HAL_DMA_Start_IT+0x1bc>
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a2a      	ldr	r2, [pc, #168]	@ (8006e60 <HAL_DMA_Start_IT+0x210>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d027      	beq.n	8006e0c <HAL_DMA_Start_IT+0x1bc>
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a28      	ldr	r2, [pc, #160]	@ (8006e64 <HAL_DMA_Start_IT+0x214>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d022      	beq.n	8006e0c <HAL_DMA_Start_IT+0x1bc>
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a27      	ldr	r2, [pc, #156]	@ (8006e68 <HAL_DMA_Start_IT+0x218>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d01d      	beq.n	8006e0c <HAL_DMA_Start_IT+0x1bc>
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a25      	ldr	r2, [pc, #148]	@ (8006e6c <HAL_DMA_Start_IT+0x21c>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d018      	beq.n	8006e0c <HAL_DMA_Start_IT+0x1bc>
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a24      	ldr	r2, [pc, #144]	@ (8006e70 <HAL_DMA_Start_IT+0x220>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d013      	beq.n	8006e0c <HAL_DMA_Start_IT+0x1bc>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a22      	ldr	r2, [pc, #136]	@ (8006e74 <HAL_DMA_Start_IT+0x224>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d00e      	beq.n	8006e0c <HAL_DMA_Start_IT+0x1bc>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a21      	ldr	r2, [pc, #132]	@ (8006e78 <HAL_DMA_Start_IT+0x228>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d009      	beq.n	8006e0c <HAL_DMA_Start_IT+0x1bc>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a1f      	ldr	r2, [pc, #124]	@ (8006e7c <HAL_DMA_Start_IT+0x22c>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d004      	beq.n	8006e0c <HAL_DMA_Start_IT+0x1bc>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a1e      	ldr	r2, [pc, #120]	@ (8006e80 <HAL_DMA_Start_IT+0x230>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d101      	bne.n	8006e10 <HAL_DMA_Start_IT+0x1c0>
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e000      	b.n	8006e12 <HAL_DMA_Start_IT+0x1c2>
 8006e10:	2300      	movs	r3, #0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d036      	beq.n	8006e84 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f023 021e 	bic.w	r2, r3, #30
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f042 0216 	orr.w	r2, r2, #22
 8006e28:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d03e      	beq.n	8006eb0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f042 0208 	orr.w	r2, r2, #8
 8006e40:	601a      	str	r2, [r3, #0]
 8006e42:	e035      	b.n	8006eb0 <HAL_DMA_Start_IT+0x260>
 8006e44:	40020010 	.word	0x40020010
 8006e48:	40020028 	.word	0x40020028
 8006e4c:	40020040 	.word	0x40020040
 8006e50:	40020058 	.word	0x40020058
 8006e54:	40020070 	.word	0x40020070
 8006e58:	40020088 	.word	0x40020088
 8006e5c:	400200a0 	.word	0x400200a0
 8006e60:	400200b8 	.word	0x400200b8
 8006e64:	40020410 	.word	0x40020410
 8006e68:	40020428 	.word	0x40020428
 8006e6c:	40020440 	.word	0x40020440
 8006e70:	40020458 	.word	0x40020458
 8006e74:	40020470 	.word	0x40020470
 8006e78:	40020488 	.word	0x40020488
 8006e7c:	400204a0 	.word	0x400204a0
 8006e80:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f023 020e 	bic.w	r2, r3, #14
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f042 020a 	orr.w	r2, r2, #10
 8006e96:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d007      	beq.n	8006eb0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f042 0204 	orr.w	r2, r2, #4
 8006eae:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a83      	ldr	r2, [pc, #524]	@ (80070c4 <HAL_DMA_Start_IT+0x474>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d072      	beq.n	8006fa0 <HAL_DMA_Start_IT+0x350>
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a82      	ldr	r2, [pc, #520]	@ (80070c8 <HAL_DMA_Start_IT+0x478>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d06d      	beq.n	8006fa0 <HAL_DMA_Start_IT+0x350>
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a80      	ldr	r2, [pc, #512]	@ (80070cc <HAL_DMA_Start_IT+0x47c>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d068      	beq.n	8006fa0 <HAL_DMA_Start_IT+0x350>
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a7f      	ldr	r2, [pc, #508]	@ (80070d0 <HAL_DMA_Start_IT+0x480>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d063      	beq.n	8006fa0 <HAL_DMA_Start_IT+0x350>
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a7d      	ldr	r2, [pc, #500]	@ (80070d4 <HAL_DMA_Start_IT+0x484>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d05e      	beq.n	8006fa0 <HAL_DMA_Start_IT+0x350>
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a7c      	ldr	r2, [pc, #496]	@ (80070d8 <HAL_DMA_Start_IT+0x488>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d059      	beq.n	8006fa0 <HAL_DMA_Start_IT+0x350>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a7a      	ldr	r2, [pc, #488]	@ (80070dc <HAL_DMA_Start_IT+0x48c>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d054      	beq.n	8006fa0 <HAL_DMA_Start_IT+0x350>
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a79      	ldr	r2, [pc, #484]	@ (80070e0 <HAL_DMA_Start_IT+0x490>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d04f      	beq.n	8006fa0 <HAL_DMA_Start_IT+0x350>
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a77      	ldr	r2, [pc, #476]	@ (80070e4 <HAL_DMA_Start_IT+0x494>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d04a      	beq.n	8006fa0 <HAL_DMA_Start_IT+0x350>
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a76      	ldr	r2, [pc, #472]	@ (80070e8 <HAL_DMA_Start_IT+0x498>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d045      	beq.n	8006fa0 <HAL_DMA_Start_IT+0x350>
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a74      	ldr	r2, [pc, #464]	@ (80070ec <HAL_DMA_Start_IT+0x49c>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d040      	beq.n	8006fa0 <HAL_DMA_Start_IT+0x350>
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a73      	ldr	r2, [pc, #460]	@ (80070f0 <HAL_DMA_Start_IT+0x4a0>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d03b      	beq.n	8006fa0 <HAL_DMA_Start_IT+0x350>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a71      	ldr	r2, [pc, #452]	@ (80070f4 <HAL_DMA_Start_IT+0x4a4>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d036      	beq.n	8006fa0 <HAL_DMA_Start_IT+0x350>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a70      	ldr	r2, [pc, #448]	@ (80070f8 <HAL_DMA_Start_IT+0x4a8>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d031      	beq.n	8006fa0 <HAL_DMA_Start_IT+0x350>
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a6e      	ldr	r2, [pc, #440]	@ (80070fc <HAL_DMA_Start_IT+0x4ac>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d02c      	beq.n	8006fa0 <HAL_DMA_Start_IT+0x350>
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a6d      	ldr	r2, [pc, #436]	@ (8007100 <HAL_DMA_Start_IT+0x4b0>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d027      	beq.n	8006fa0 <HAL_DMA_Start_IT+0x350>
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a6b      	ldr	r2, [pc, #428]	@ (8007104 <HAL_DMA_Start_IT+0x4b4>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d022      	beq.n	8006fa0 <HAL_DMA_Start_IT+0x350>
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a6a      	ldr	r2, [pc, #424]	@ (8007108 <HAL_DMA_Start_IT+0x4b8>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d01d      	beq.n	8006fa0 <HAL_DMA_Start_IT+0x350>
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a68      	ldr	r2, [pc, #416]	@ (800710c <HAL_DMA_Start_IT+0x4bc>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d018      	beq.n	8006fa0 <HAL_DMA_Start_IT+0x350>
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a67      	ldr	r2, [pc, #412]	@ (8007110 <HAL_DMA_Start_IT+0x4c0>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d013      	beq.n	8006fa0 <HAL_DMA_Start_IT+0x350>
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a65      	ldr	r2, [pc, #404]	@ (8007114 <HAL_DMA_Start_IT+0x4c4>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d00e      	beq.n	8006fa0 <HAL_DMA_Start_IT+0x350>
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a64      	ldr	r2, [pc, #400]	@ (8007118 <HAL_DMA_Start_IT+0x4c8>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d009      	beq.n	8006fa0 <HAL_DMA_Start_IT+0x350>
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a62      	ldr	r2, [pc, #392]	@ (800711c <HAL_DMA_Start_IT+0x4cc>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d004      	beq.n	8006fa0 <HAL_DMA_Start_IT+0x350>
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a61      	ldr	r2, [pc, #388]	@ (8007120 <HAL_DMA_Start_IT+0x4d0>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d101      	bne.n	8006fa4 <HAL_DMA_Start_IT+0x354>
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e000      	b.n	8006fa6 <HAL_DMA_Start_IT+0x356>
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d01a      	beq.n	8006fe0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d007      	beq.n	8006fc8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fc2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006fc6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d007      	beq.n	8006fe0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fda:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006fde:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a37      	ldr	r2, [pc, #220]	@ (80070c4 <HAL_DMA_Start_IT+0x474>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d04a      	beq.n	8007080 <HAL_DMA_Start_IT+0x430>
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a36      	ldr	r2, [pc, #216]	@ (80070c8 <HAL_DMA_Start_IT+0x478>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d045      	beq.n	8007080 <HAL_DMA_Start_IT+0x430>
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a34      	ldr	r2, [pc, #208]	@ (80070cc <HAL_DMA_Start_IT+0x47c>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d040      	beq.n	8007080 <HAL_DMA_Start_IT+0x430>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a33      	ldr	r2, [pc, #204]	@ (80070d0 <HAL_DMA_Start_IT+0x480>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d03b      	beq.n	8007080 <HAL_DMA_Start_IT+0x430>
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a31      	ldr	r2, [pc, #196]	@ (80070d4 <HAL_DMA_Start_IT+0x484>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d036      	beq.n	8007080 <HAL_DMA_Start_IT+0x430>
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a30      	ldr	r2, [pc, #192]	@ (80070d8 <HAL_DMA_Start_IT+0x488>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d031      	beq.n	8007080 <HAL_DMA_Start_IT+0x430>
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a2e      	ldr	r2, [pc, #184]	@ (80070dc <HAL_DMA_Start_IT+0x48c>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d02c      	beq.n	8007080 <HAL_DMA_Start_IT+0x430>
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a2d      	ldr	r2, [pc, #180]	@ (80070e0 <HAL_DMA_Start_IT+0x490>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d027      	beq.n	8007080 <HAL_DMA_Start_IT+0x430>
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a2b      	ldr	r2, [pc, #172]	@ (80070e4 <HAL_DMA_Start_IT+0x494>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d022      	beq.n	8007080 <HAL_DMA_Start_IT+0x430>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a2a      	ldr	r2, [pc, #168]	@ (80070e8 <HAL_DMA_Start_IT+0x498>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d01d      	beq.n	8007080 <HAL_DMA_Start_IT+0x430>
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a28      	ldr	r2, [pc, #160]	@ (80070ec <HAL_DMA_Start_IT+0x49c>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d018      	beq.n	8007080 <HAL_DMA_Start_IT+0x430>
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a27      	ldr	r2, [pc, #156]	@ (80070f0 <HAL_DMA_Start_IT+0x4a0>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d013      	beq.n	8007080 <HAL_DMA_Start_IT+0x430>
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a25      	ldr	r2, [pc, #148]	@ (80070f4 <HAL_DMA_Start_IT+0x4a4>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d00e      	beq.n	8007080 <HAL_DMA_Start_IT+0x430>
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a24      	ldr	r2, [pc, #144]	@ (80070f8 <HAL_DMA_Start_IT+0x4a8>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d009      	beq.n	8007080 <HAL_DMA_Start_IT+0x430>
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a22      	ldr	r2, [pc, #136]	@ (80070fc <HAL_DMA_Start_IT+0x4ac>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d004      	beq.n	8007080 <HAL_DMA_Start_IT+0x430>
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a21      	ldr	r2, [pc, #132]	@ (8007100 <HAL_DMA_Start_IT+0x4b0>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d108      	bne.n	8007092 <HAL_DMA_Start_IT+0x442>
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f042 0201 	orr.w	r2, r2, #1
 800708e:	601a      	str	r2, [r3, #0]
 8007090:	e012      	b.n	80070b8 <HAL_DMA_Start_IT+0x468>
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f042 0201 	orr.w	r2, r2, #1
 80070a0:	601a      	str	r2, [r3, #0]
 80070a2:	e009      	b.n	80070b8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80070aa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80070b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3718      	adds	r7, #24
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	40020010 	.word	0x40020010
 80070c8:	40020028 	.word	0x40020028
 80070cc:	40020040 	.word	0x40020040
 80070d0:	40020058 	.word	0x40020058
 80070d4:	40020070 	.word	0x40020070
 80070d8:	40020088 	.word	0x40020088
 80070dc:	400200a0 	.word	0x400200a0
 80070e0:	400200b8 	.word	0x400200b8
 80070e4:	40020410 	.word	0x40020410
 80070e8:	40020428 	.word	0x40020428
 80070ec:	40020440 	.word	0x40020440
 80070f0:	40020458 	.word	0x40020458
 80070f4:	40020470 	.word	0x40020470
 80070f8:	40020488 	.word	0x40020488
 80070fc:	400204a0 	.word	0x400204a0
 8007100:	400204b8 	.word	0x400204b8
 8007104:	58025408 	.word	0x58025408
 8007108:	5802541c 	.word	0x5802541c
 800710c:	58025430 	.word	0x58025430
 8007110:	58025444 	.word	0x58025444
 8007114:	58025458 	.word	0x58025458
 8007118:	5802546c 	.word	0x5802546c
 800711c:	58025480 	.word	0x58025480
 8007120:	58025494 	.word	0x58025494

08007124 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b08a      	sub	sp, #40	@ 0x28
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800712c:	2300      	movs	r3, #0
 800712e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007130:	4b67      	ldr	r3, [pc, #412]	@ (80072d0 <HAL_DMA_IRQHandler+0x1ac>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a67      	ldr	r2, [pc, #412]	@ (80072d4 <HAL_DMA_IRQHandler+0x1b0>)
 8007136:	fba2 2303 	umull	r2, r3, r2, r3
 800713a:	0a9b      	lsrs	r3, r3, #10
 800713c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007142:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007148:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800714a:	6a3b      	ldr	r3, [r7, #32]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007150:	69fb      	ldr	r3, [r7, #28]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a5f      	ldr	r2, [pc, #380]	@ (80072d8 <HAL_DMA_IRQHandler+0x1b4>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d04a      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xd2>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a5d      	ldr	r2, [pc, #372]	@ (80072dc <HAL_DMA_IRQHandler+0x1b8>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d045      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xd2>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a5c      	ldr	r2, [pc, #368]	@ (80072e0 <HAL_DMA_IRQHandler+0x1bc>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d040      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xd2>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a5a      	ldr	r2, [pc, #360]	@ (80072e4 <HAL_DMA_IRQHandler+0x1c0>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d03b      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xd2>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a59      	ldr	r2, [pc, #356]	@ (80072e8 <HAL_DMA_IRQHandler+0x1c4>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d036      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xd2>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a57      	ldr	r2, [pc, #348]	@ (80072ec <HAL_DMA_IRQHandler+0x1c8>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d031      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xd2>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a56      	ldr	r2, [pc, #344]	@ (80072f0 <HAL_DMA_IRQHandler+0x1cc>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d02c      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xd2>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a54      	ldr	r2, [pc, #336]	@ (80072f4 <HAL_DMA_IRQHandler+0x1d0>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d027      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xd2>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a53      	ldr	r2, [pc, #332]	@ (80072f8 <HAL_DMA_IRQHandler+0x1d4>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d022      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xd2>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a51      	ldr	r2, [pc, #324]	@ (80072fc <HAL_DMA_IRQHandler+0x1d8>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d01d      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xd2>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a50      	ldr	r2, [pc, #320]	@ (8007300 <HAL_DMA_IRQHandler+0x1dc>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d018      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xd2>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a4e      	ldr	r2, [pc, #312]	@ (8007304 <HAL_DMA_IRQHandler+0x1e0>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d013      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xd2>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a4d      	ldr	r2, [pc, #308]	@ (8007308 <HAL_DMA_IRQHandler+0x1e4>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d00e      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xd2>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a4b      	ldr	r2, [pc, #300]	@ (800730c <HAL_DMA_IRQHandler+0x1e8>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d009      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xd2>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a4a      	ldr	r2, [pc, #296]	@ (8007310 <HAL_DMA_IRQHandler+0x1ec>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d004      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xd2>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a48      	ldr	r2, [pc, #288]	@ (8007314 <HAL_DMA_IRQHandler+0x1f0>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d101      	bne.n	80071fa <HAL_DMA_IRQHandler+0xd6>
 80071f6:	2301      	movs	r3, #1
 80071f8:	e000      	b.n	80071fc <HAL_DMA_IRQHandler+0xd8>
 80071fa:	2300      	movs	r3, #0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f000 842b 	beq.w	8007a58 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007206:	f003 031f 	and.w	r3, r3, #31
 800720a:	2208      	movs	r2, #8
 800720c:	409a      	lsls	r2, r3
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	4013      	ands	r3, r2
 8007212:	2b00      	cmp	r3, #0
 8007214:	f000 80a2 	beq.w	800735c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a2e      	ldr	r2, [pc, #184]	@ (80072d8 <HAL_DMA_IRQHandler+0x1b4>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d04a      	beq.n	80072b8 <HAL_DMA_IRQHandler+0x194>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a2d      	ldr	r2, [pc, #180]	@ (80072dc <HAL_DMA_IRQHandler+0x1b8>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d045      	beq.n	80072b8 <HAL_DMA_IRQHandler+0x194>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a2b      	ldr	r2, [pc, #172]	@ (80072e0 <HAL_DMA_IRQHandler+0x1bc>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d040      	beq.n	80072b8 <HAL_DMA_IRQHandler+0x194>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a2a      	ldr	r2, [pc, #168]	@ (80072e4 <HAL_DMA_IRQHandler+0x1c0>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d03b      	beq.n	80072b8 <HAL_DMA_IRQHandler+0x194>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a28      	ldr	r2, [pc, #160]	@ (80072e8 <HAL_DMA_IRQHandler+0x1c4>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d036      	beq.n	80072b8 <HAL_DMA_IRQHandler+0x194>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a27      	ldr	r2, [pc, #156]	@ (80072ec <HAL_DMA_IRQHandler+0x1c8>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d031      	beq.n	80072b8 <HAL_DMA_IRQHandler+0x194>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a25      	ldr	r2, [pc, #148]	@ (80072f0 <HAL_DMA_IRQHandler+0x1cc>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d02c      	beq.n	80072b8 <HAL_DMA_IRQHandler+0x194>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a24      	ldr	r2, [pc, #144]	@ (80072f4 <HAL_DMA_IRQHandler+0x1d0>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d027      	beq.n	80072b8 <HAL_DMA_IRQHandler+0x194>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a22      	ldr	r2, [pc, #136]	@ (80072f8 <HAL_DMA_IRQHandler+0x1d4>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d022      	beq.n	80072b8 <HAL_DMA_IRQHandler+0x194>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a21      	ldr	r2, [pc, #132]	@ (80072fc <HAL_DMA_IRQHandler+0x1d8>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d01d      	beq.n	80072b8 <HAL_DMA_IRQHandler+0x194>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a1f      	ldr	r2, [pc, #124]	@ (8007300 <HAL_DMA_IRQHandler+0x1dc>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d018      	beq.n	80072b8 <HAL_DMA_IRQHandler+0x194>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a1e      	ldr	r2, [pc, #120]	@ (8007304 <HAL_DMA_IRQHandler+0x1e0>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d013      	beq.n	80072b8 <HAL_DMA_IRQHandler+0x194>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a1c      	ldr	r2, [pc, #112]	@ (8007308 <HAL_DMA_IRQHandler+0x1e4>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d00e      	beq.n	80072b8 <HAL_DMA_IRQHandler+0x194>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a1b      	ldr	r2, [pc, #108]	@ (800730c <HAL_DMA_IRQHandler+0x1e8>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d009      	beq.n	80072b8 <HAL_DMA_IRQHandler+0x194>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a19      	ldr	r2, [pc, #100]	@ (8007310 <HAL_DMA_IRQHandler+0x1ec>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d004      	beq.n	80072b8 <HAL_DMA_IRQHandler+0x194>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a18      	ldr	r2, [pc, #96]	@ (8007314 <HAL_DMA_IRQHandler+0x1f0>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d12f      	bne.n	8007318 <HAL_DMA_IRQHandler+0x1f4>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f003 0304 	and.w	r3, r3, #4
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	bf14      	ite	ne
 80072c6:	2301      	movne	r3, #1
 80072c8:	2300      	moveq	r3, #0
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	e02e      	b.n	800732c <HAL_DMA_IRQHandler+0x208>
 80072ce:	bf00      	nop
 80072d0:	24000010 	.word	0x24000010
 80072d4:	1b4e81b5 	.word	0x1b4e81b5
 80072d8:	40020010 	.word	0x40020010
 80072dc:	40020028 	.word	0x40020028
 80072e0:	40020040 	.word	0x40020040
 80072e4:	40020058 	.word	0x40020058
 80072e8:	40020070 	.word	0x40020070
 80072ec:	40020088 	.word	0x40020088
 80072f0:	400200a0 	.word	0x400200a0
 80072f4:	400200b8 	.word	0x400200b8
 80072f8:	40020410 	.word	0x40020410
 80072fc:	40020428 	.word	0x40020428
 8007300:	40020440 	.word	0x40020440
 8007304:	40020458 	.word	0x40020458
 8007308:	40020470 	.word	0x40020470
 800730c:	40020488 	.word	0x40020488
 8007310:	400204a0 	.word	0x400204a0
 8007314:	400204b8 	.word	0x400204b8
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f003 0308 	and.w	r3, r3, #8
 8007322:	2b00      	cmp	r3, #0
 8007324:	bf14      	ite	ne
 8007326:	2301      	movne	r3, #1
 8007328:	2300      	moveq	r3, #0
 800732a:	b2db      	uxtb	r3, r3
 800732c:	2b00      	cmp	r3, #0
 800732e:	d015      	beq.n	800735c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f022 0204 	bic.w	r2, r2, #4
 800733e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007344:	f003 031f 	and.w	r3, r3, #31
 8007348:	2208      	movs	r2, #8
 800734a:	409a      	lsls	r2, r3
 800734c:	6a3b      	ldr	r3, [r7, #32]
 800734e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007354:	f043 0201 	orr.w	r2, r3, #1
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007360:	f003 031f 	and.w	r3, r3, #31
 8007364:	69ba      	ldr	r2, [r7, #24]
 8007366:	fa22 f303 	lsr.w	r3, r2, r3
 800736a:	f003 0301 	and.w	r3, r3, #1
 800736e:	2b00      	cmp	r3, #0
 8007370:	d06e      	beq.n	8007450 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a69      	ldr	r2, [pc, #420]	@ (800751c <HAL_DMA_IRQHandler+0x3f8>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d04a      	beq.n	8007412 <HAL_DMA_IRQHandler+0x2ee>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a67      	ldr	r2, [pc, #412]	@ (8007520 <HAL_DMA_IRQHandler+0x3fc>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d045      	beq.n	8007412 <HAL_DMA_IRQHandler+0x2ee>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a66      	ldr	r2, [pc, #408]	@ (8007524 <HAL_DMA_IRQHandler+0x400>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d040      	beq.n	8007412 <HAL_DMA_IRQHandler+0x2ee>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a64      	ldr	r2, [pc, #400]	@ (8007528 <HAL_DMA_IRQHandler+0x404>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d03b      	beq.n	8007412 <HAL_DMA_IRQHandler+0x2ee>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a63      	ldr	r2, [pc, #396]	@ (800752c <HAL_DMA_IRQHandler+0x408>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d036      	beq.n	8007412 <HAL_DMA_IRQHandler+0x2ee>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a61      	ldr	r2, [pc, #388]	@ (8007530 <HAL_DMA_IRQHandler+0x40c>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d031      	beq.n	8007412 <HAL_DMA_IRQHandler+0x2ee>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a60      	ldr	r2, [pc, #384]	@ (8007534 <HAL_DMA_IRQHandler+0x410>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d02c      	beq.n	8007412 <HAL_DMA_IRQHandler+0x2ee>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a5e      	ldr	r2, [pc, #376]	@ (8007538 <HAL_DMA_IRQHandler+0x414>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d027      	beq.n	8007412 <HAL_DMA_IRQHandler+0x2ee>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a5d      	ldr	r2, [pc, #372]	@ (800753c <HAL_DMA_IRQHandler+0x418>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d022      	beq.n	8007412 <HAL_DMA_IRQHandler+0x2ee>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a5b      	ldr	r2, [pc, #364]	@ (8007540 <HAL_DMA_IRQHandler+0x41c>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d01d      	beq.n	8007412 <HAL_DMA_IRQHandler+0x2ee>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a5a      	ldr	r2, [pc, #360]	@ (8007544 <HAL_DMA_IRQHandler+0x420>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d018      	beq.n	8007412 <HAL_DMA_IRQHandler+0x2ee>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a58      	ldr	r2, [pc, #352]	@ (8007548 <HAL_DMA_IRQHandler+0x424>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d013      	beq.n	8007412 <HAL_DMA_IRQHandler+0x2ee>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a57      	ldr	r2, [pc, #348]	@ (800754c <HAL_DMA_IRQHandler+0x428>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d00e      	beq.n	8007412 <HAL_DMA_IRQHandler+0x2ee>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a55      	ldr	r2, [pc, #340]	@ (8007550 <HAL_DMA_IRQHandler+0x42c>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d009      	beq.n	8007412 <HAL_DMA_IRQHandler+0x2ee>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a54      	ldr	r2, [pc, #336]	@ (8007554 <HAL_DMA_IRQHandler+0x430>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d004      	beq.n	8007412 <HAL_DMA_IRQHandler+0x2ee>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a52      	ldr	r2, [pc, #328]	@ (8007558 <HAL_DMA_IRQHandler+0x434>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d10a      	bne.n	8007428 <HAL_DMA_IRQHandler+0x304>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	695b      	ldr	r3, [r3, #20]
 8007418:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800741c:	2b00      	cmp	r3, #0
 800741e:	bf14      	ite	ne
 8007420:	2301      	movne	r3, #1
 8007422:	2300      	moveq	r3, #0
 8007424:	b2db      	uxtb	r3, r3
 8007426:	e003      	b.n	8007430 <HAL_DMA_IRQHandler+0x30c>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2300      	movs	r3, #0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00d      	beq.n	8007450 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007438:	f003 031f 	and.w	r3, r3, #31
 800743c:	2201      	movs	r2, #1
 800743e:	409a      	lsls	r2, r3
 8007440:	6a3b      	ldr	r3, [r7, #32]
 8007442:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007448:	f043 0202 	orr.w	r2, r3, #2
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007454:	f003 031f 	and.w	r3, r3, #31
 8007458:	2204      	movs	r2, #4
 800745a:	409a      	lsls	r2, r3
 800745c:	69bb      	ldr	r3, [r7, #24]
 800745e:	4013      	ands	r3, r2
 8007460:	2b00      	cmp	r3, #0
 8007462:	f000 808f 	beq.w	8007584 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a2c      	ldr	r2, [pc, #176]	@ (800751c <HAL_DMA_IRQHandler+0x3f8>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d04a      	beq.n	8007506 <HAL_DMA_IRQHandler+0x3e2>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a2a      	ldr	r2, [pc, #168]	@ (8007520 <HAL_DMA_IRQHandler+0x3fc>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d045      	beq.n	8007506 <HAL_DMA_IRQHandler+0x3e2>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a29      	ldr	r2, [pc, #164]	@ (8007524 <HAL_DMA_IRQHandler+0x400>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d040      	beq.n	8007506 <HAL_DMA_IRQHandler+0x3e2>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a27      	ldr	r2, [pc, #156]	@ (8007528 <HAL_DMA_IRQHandler+0x404>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d03b      	beq.n	8007506 <HAL_DMA_IRQHandler+0x3e2>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a26      	ldr	r2, [pc, #152]	@ (800752c <HAL_DMA_IRQHandler+0x408>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d036      	beq.n	8007506 <HAL_DMA_IRQHandler+0x3e2>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a24      	ldr	r2, [pc, #144]	@ (8007530 <HAL_DMA_IRQHandler+0x40c>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d031      	beq.n	8007506 <HAL_DMA_IRQHandler+0x3e2>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a23      	ldr	r2, [pc, #140]	@ (8007534 <HAL_DMA_IRQHandler+0x410>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d02c      	beq.n	8007506 <HAL_DMA_IRQHandler+0x3e2>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a21      	ldr	r2, [pc, #132]	@ (8007538 <HAL_DMA_IRQHandler+0x414>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d027      	beq.n	8007506 <HAL_DMA_IRQHandler+0x3e2>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a20      	ldr	r2, [pc, #128]	@ (800753c <HAL_DMA_IRQHandler+0x418>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d022      	beq.n	8007506 <HAL_DMA_IRQHandler+0x3e2>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a1e      	ldr	r2, [pc, #120]	@ (8007540 <HAL_DMA_IRQHandler+0x41c>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d01d      	beq.n	8007506 <HAL_DMA_IRQHandler+0x3e2>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a1d      	ldr	r2, [pc, #116]	@ (8007544 <HAL_DMA_IRQHandler+0x420>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d018      	beq.n	8007506 <HAL_DMA_IRQHandler+0x3e2>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a1b      	ldr	r2, [pc, #108]	@ (8007548 <HAL_DMA_IRQHandler+0x424>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d013      	beq.n	8007506 <HAL_DMA_IRQHandler+0x3e2>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a1a      	ldr	r2, [pc, #104]	@ (800754c <HAL_DMA_IRQHandler+0x428>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d00e      	beq.n	8007506 <HAL_DMA_IRQHandler+0x3e2>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a18      	ldr	r2, [pc, #96]	@ (8007550 <HAL_DMA_IRQHandler+0x42c>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d009      	beq.n	8007506 <HAL_DMA_IRQHandler+0x3e2>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a17      	ldr	r2, [pc, #92]	@ (8007554 <HAL_DMA_IRQHandler+0x430>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d004      	beq.n	8007506 <HAL_DMA_IRQHandler+0x3e2>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a15      	ldr	r2, [pc, #84]	@ (8007558 <HAL_DMA_IRQHandler+0x434>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d12a      	bne.n	800755c <HAL_DMA_IRQHandler+0x438>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 0302 	and.w	r3, r3, #2
 8007510:	2b00      	cmp	r3, #0
 8007512:	bf14      	ite	ne
 8007514:	2301      	movne	r3, #1
 8007516:	2300      	moveq	r3, #0
 8007518:	b2db      	uxtb	r3, r3
 800751a:	e023      	b.n	8007564 <HAL_DMA_IRQHandler+0x440>
 800751c:	40020010 	.word	0x40020010
 8007520:	40020028 	.word	0x40020028
 8007524:	40020040 	.word	0x40020040
 8007528:	40020058 	.word	0x40020058
 800752c:	40020070 	.word	0x40020070
 8007530:	40020088 	.word	0x40020088
 8007534:	400200a0 	.word	0x400200a0
 8007538:	400200b8 	.word	0x400200b8
 800753c:	40020410 	.word	0x40020410
 8007540:	40020428 	.word	0x40020428
 8007544:	40020440 	.word	0x40020440
 8007548:	40020458 	.word	0x40020458
 800754c:	40020470 	.word	0x40020470
 8007550:	40020488 	.word	0x40020488
 8007554:	400204a0 	.word	0x400204a0
 8007558:	400204b8 	.word	0x400204b8
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	2300      	movs	r3, #0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d00d      	beq.n	8007584 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800756c:	f003 031f 	and.w	r3, r3, #31
 8007570:	2204      	movs	r2, #4
 8007572:	409a      	lsls	r2, r3
 8007574:	6a3b      	ldr	r3, [r7, #32]
 8007576:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800757c:	f043 0204 	orr.w	r2, r3, #4
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007588:	f003 031f 	and.w	r3, r3, #31
 800758c:	2210      	movs	r2, #16
 800758e:	409a      	lsls	r2, r3
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	4013      	ands	r3, r2
 8007594:	2b00      	cmp	r3, #0
 8007596:	f000 80a6 	beq.w	80076e6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a85      	ldr	r2, [pc, #532]	@ (80077b4 <HAL_DMA_IRQHandler+0x690>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d04a      	beq.n	800763a <HAL_DMA_IRQHandler+0x516>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a83      	ldr	r2, [pc, #524]	@ (80077b8 <HAL_DMA_IRQHandler+0x694>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d045      	beq.n	800763a <HAL_DMA_IRQHandler+0x516>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a82      	ldr	r2, [pc, #520]	@ (80077bc <HAL_DMA_IRQHandler+0x698>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d040      	beq.n	800763a <HAL_DMA_IRQHandler+0x516>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a80      	ldr	r2, [pc, #512]	@ (80077c0 <HAL_DMA_IRQHandler+0x69c>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d03b      	beq.n	800763a <HAL_DMA_IRQHandler+0x516>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a7f      	ldr	r2, [pc, #508]	@ (80077c4 <HAL_DMA_IRQHandler+0x6a0>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d036      	beq.n	800763a <HAL_DMA_IRQHandler+0x516>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a7d      	ldr	r2, [pc, #500]	@ (80077c8 <HAL_DMA_IRQHandler+0x6a4>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d031      	beq.n	800763a <HAL_DMA_IRQHandler+0x516>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a7c      	ldr	r2, [pc, #496]	@ (80077cc <HAL_DMA_IRQHandler+0x6a8>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d02c      	beq.n	800763a <HAL_DMA_IRQHandler+0x516>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a7a      	ldr	r2, [pc, #488]	@ (80077d0 <HAL_DMA_IRQHandler+0x6ac>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d027      	beq.n	800763a <HAL_DMA_IRQHandler+0x516>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a79      	ldr	r2, [pc, #484]	@ (80077d4 <HAL_DMA_IRQHandler+0x6b0>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d022      	beq.n	800763a <HAL_DMA_IRQHandler+0x516>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a77      	ldr	r2, [pc, #476]	@ (80077d8 <HAL_DMA_IRQHandler+0x6b4>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d01d      	beq.n	800763a <HAL_DMA_IRQHandler+0x516>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a76      	ldr	r2, [pc, #472]	@ (80077dc <HAL_DMA_IRQHandler+0x6b8>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d018      	beq.n	800763a <HAL_DMA_IRQHandler+0x516>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a74      	ldr	r2, [pc, #464]	@ (80077e0 <HAL_DMA_IRQHandler+0x6bc>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d013      	beq.n	800763a <HAL_DMA_IRQHandler+0x516>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a73      	ldr	r2, [pc, #460]	@ (80077e4 <HAL_DMA_IRQHandler+0x6c0>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d00e      	beq.n	800763a <HAL_DMA_IRQHandler+0x516>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a71      	ldr	r2, [pc, #452]	@ (80077e8 <HAL_DMA_IRQHandler+0x6c4>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d009      	beq.n	800763a <HAL_DMA_IRQHandler+0x516>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a70      	ldr	r2, [pc, #448]	@ (80077ec <HAL_DMA_IRQHandler+0x6c8>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d004      	beq.n	800763a <HAL_DMA_IRQHandler+0x516>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a6e      	ldr	r2, [pc, #440]	@ (80077f0 <HAL_DMA_IRQHandler+0x6cc>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d10a      	bne.n	8007650 <HAL_DMA_IRQHandler+0x52c>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 0308 	and.w	r3, r3, #8
 8007644:	2b00      	cmp	r3, #0
 8007646:	bf14      	ite	ne
 8007648:	2301      	movne	r3, #1
 800764a:	2300      	moveq	r3, #0
 800764c:	b2db      	uxtb	r3, r3
 800764e:	e009      	b.n	8007664 <HAL_DMA_IRQHandler+0x540>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f003 0304 	and.w	r3, r3, #4
 800765a:	2b00      	cmp	r3, #0
 800765c:	bf14      	ite	ne
 800765e:	2301      	movne	r3, #1
 8007660:	2300      	moveq	r3, #0
 8007662:	b2db      	uxtb	r3, r3
 8007664:	2b00      	cmp	r3, #0
 8007666:	d03e      	beq.n	80076e6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800766c:	f003 031f 	and.w	r3, r3, #31
 8007670:	2210      	movs	r2, #16
 8007672:	409a      	lsls	r2, r3
 8007674:	6a3b      	ldr	r3, [r7, #32]
 8007676:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007682:	2b00      	cmp	r3, #0
 8007684:	d018      	beq.n	80076b8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007690:	2b00      	cmp	r3, #0
 8007692:	d108      	bne.n	80076a6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007698:	2b00      	cmp	r3, #0
 800769a:	d024      	beq.n	80076e6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	4798      	blx	r3
 80076a4:	e01f      	b.n	80076e6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d01b      	beq.n	80076e6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	4798      	blx	r3
 80076b6:	e016      	b.n	80076e6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d107      	bne.n	80076d6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f022 0208 	bic.w	r2, r2, #8
 80076d4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d003      	beq.n	80076e6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076ea:	f003 031f 	and.w	r3, r3, #31
 80076ee:	2220      	movs	r2, #32
 80076f0:	409a      	lsls	r2, r3
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	4013      	ands	r3, r2
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	f000 8110 	beq.w	800791c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a2c      	ldr	r2, [pc, #176]	@ (80077b4 <HAL_DMA_IRQHandler+0x690>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d04a      	beq.n	800779c <HAL_DMA_IRQHandler+0x678>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a2b      	ldr	r2, [pc, #172]	@ (80077b8 <HAL_DMA_IRQHandler+0x694>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d045      	beq.n	800779c <HAL_DMA_IRQHandler+0x678>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a29      	ldr	r2, [pc, #164]	@ (80077bc <HAL_DMA_IRQHandler+0x698>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d040      	beq.n	800779c <HAL_DMA_IRQHandler+0x678>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a28      	ldr	r2, [pc, #160]	@ (80077c0 <HAL_DMA_IRQHandler+0x69c>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d03b      	beq.n	800779c <HAL_DMA_IRQHandler+0x678>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a26      	ldr	r2, [pc, #152]	@ (80077c4 <HAL_DMA_IRQHandler+0x6a0>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d036      	beq.n	800779c <HAL_DMA_IRQHandler+0x678>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a25      	ldr	r2, [pc, #148]	@ (80077c8 <HAL_DMA_IRQHandler+0x6a4>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d031      	beq.n	800779c <HAL_DMA_IRQHandler+0x678>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a23      	ldr	r2, [pc, #140]	@ (80077cc <HAL_DMA_IRQHandler+0x6a8>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d02c      	beq.n	800779c <HAL_DMA_IRQHandler+0x678>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a22      	ldr	r2, [pc, #136]	@ (80077d0 <HAL_DMA_IRQHandler+0x6ac>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d027      	beq.n	800779c <HAL_DMA_IRQHandler+0x678>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a20      	ldr	r2, [pc, #128]	@ (80077d4 <HAL_DMA_IRQHandler+0x6b0>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d022      	beq.n	800779c <HAL_DMA_IRQHandler+0x678>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a1f      	ldr	r2, [pc, #124]	@ (80077d8 <HAL_DMA_IRQHandler+0x6b4>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d01d      	beq.n	800779c <HAL_DMA_IRQHandler+0x678>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a1d      	ldr	r2, [pc, #116]	@ (80077dc <HAL_DMA_IRQHandler+0x6b8>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d018      	beq.n	800779c <HAL_DMA_IRQHandler+0x678>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a1c      	ldr	r2, [pc, #112]	@ (80077e0 <HAL_DMA_IRQHandler+0x6bc>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d013      	beq.n	800779c <HAL_DMA_IRQHandler+0x678>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a1a      	ldr	r2, [pc, #104]	@ (80077e4 <HAL_DMA_IRQHandler+0x6c0>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d00e      	beq.n	800779c <HAL_DMA_IRQHandler+0x678>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a19      	ldr	r2, [pc, #100]	@ (80077e8 <HAL_DMA_IRQHandler+0x6c4>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d009      	beq.n	800779c <HAL_DMA_IRQHandler+0x678>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a17      	ldr	r2, [pc, #92]	@ (80077ec <HAL_DMA_IRQHandler+0x6c8>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d004      	beq.n	800779c <HAL_DMA_IRQHandler+0x678>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a16      	ldr	r2, [pc, #88]	@ (80077f0 <HAL_DMA_IRQHandler+0x6cc>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d12b      	bne.n	80077f4 <HAL_DMA_IRQHandler+0x6d0>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 0310 	and.w	r3, r3, #16
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	bf14      	ite	ne
 80077aa:	2301      	movne	r3, #1
 80077ac:	2300      	moveq	r3, #0
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	e02a      	b.n	8007808 <HAL_DMA_IRQHandler+0x6e4>
 80077b2:	bf00      	nop
 80077b4:	40020010 	.word	0x40020010
 80077b8:	40020028 	.word	0x40020028
 80077bc:	40020040 	.word	0x40020040
 80077c0:	40020058 	.word	0x40020058
 80077c4:	40020070 	.word	0x40020070
 80077c8:	40020088 	.word	0x40020088
 80077cc:	400200a0 	.word	0x400200a0
 80077d0:	400200b8 	.word	0x400200b8
 80077d4:	40020410 	.word	0x40020410
 80077d8:	40020428 	.word	0x40020428
 80077dc:	40020440 	.word	0x40020440
 80077e0:	40020458 	.word	0x40020458
 80077e4:	40020470 	.word	0x40020470
 80077e8:	40020488 	.word	0x40020488
 80077ec:	400204a0 	.word	0x400204a0
 80077f0:	400204b8 	.word	0x400204b8
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f003 0302 	and.w	r3, r3, #2
 80077fe:	2b00      	cmp	r3, #0
 8007800:	bf14      	ite	ne
 8007802:	2301      	movne	r3, #1
 8007804:	2300      	moveq	r3, #0
 8007806:	b2db      	uxtb	r3, r3
 8007808:	2b00      	cmp	r3, #0
 800780a:	f000 8087 	beq.w	800791c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007812:	f003 031f 	and.w	r3, r3, #31
 8007816:	2220      	movs	r2, #32
 8007818:	409a      	lsls	r2, r3
 800781a:	6a3b      	ldr	r3, [r7, #32]
 800781c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007824:	b2db      	uxtb	r3, r3
 8007826:	2b04      	cmp	r3, #4
 8007828:	d139      	bne.n	800789e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f022 0216 	bic.w	r2, r2, #22
 8007838:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	695a      	ldr	r2, [r3, #20]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007848:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800784e:	2b00      	cmp	r3, #0
 8007850:	d103      	bne.n	800785a <HAL_DMA_IRQHandler+0x736>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007856:	2b00      	cmp	r3, #0
 8007858:	d007      	beq.n	800786a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f022 0208 	bic.w	r2, r2, #8
 8007868:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800786e:	f003 031f 	and.w	r3, r3, #31
 8007872:	223f      	movs	r2, #63	@ 0x3f
 8007874:	409a      	lsls	r2, r3
 8007876:	6a3b      	ldr	r3, [r7, #32]
 8007878:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2201      	movs	r2, #1
 800787e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800788e:	2b00      	cmp	r3, #0
 8007890:	f000 834a 	beq.w	8007f28 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	4798      	blx	r3
          }
          return;
 800789c:	e344      	b.n	8007f28 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d018      	beq.n	80078de <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d108      	bne.n	80078cc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d02c      	beq.n	800791c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	4798      	blx	r3
 80078ca:	e027      	b.n	800791c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d023      	beq.n	800791c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	4798      	blx	r3
 80078dc:	e01e      	b.n	800791c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d10f      	bne.n	800790c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f022 0210 	bic.w	r2, r2, #16
 80078fa:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007910:	2b00      	cmp	r3, #0
 8007912:	d003      	beq.n	800791c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007920:	2b00      	cmp	r3, #0
 8007922:	f000 8306 	beq.w	8007f32 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800792a:	f003 0301 	and.w	r3, r3, #1
 800792e:	2b00      	cmp	r3, #0
 8007930:	f000 8088 	beq.w	8007a44 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2204      	movs	r2, #4
 8007938:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a7a      	ldr	r2, [pc, #488]	@ (8007b2c <HAL_DMA_IRQHandler+0xa08>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d04a      	beq.n	80079dc <HAL_DMA_IRQHandler+0x8b8>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a79      	ldr	r2, [pc, #484]	@ (8007b30 <HAL_DMA_IRQHandler+0xa0c>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d045      	beq.n	80079dc <HAL_DMA_IRQHandler+0x8b8>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a77      	ldr	r2, [pc, #476]	@ (8007b34 <HAL_DMA_IRQHandler+0xa10>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d040      	beq.n	80079dc <HAL_DMA_IRQHandler+0x8b8>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a76      	ldr	r2, [pc, #472]	@ (8007b38 <HAL_DMA_IRQHandler+0xa14>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d03b      	beq.n	80079dc <HAL_DMA_IRQHandler+0x8b8>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a74      	ldr	r2, [pc, #464]	@ (8007b3c <HAL_DMA_IRQHandler+0xa18>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d036      	beq.n	80079dc <HAL_DMA_IRQHandler+0x8b8>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a73      	ldr	r2, [pc, #460]	@ (8007b40 <HAL_DMA_IRQHandler+0xa1c>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d031      	beq.n	80079dc <HAL_DMA_IRQHandler+0x8b8>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a71      	ldr	r2, [pc, #452]	@ (8007b44 <HAL_DMA_IRQHandler+0xa20>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d02c      	beq.n	80079dc <HAL_DMA_IRQHandler+0x8b8>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a70      	ldr	r2, [pc, #448]	@ (8007b48 <HAL_DMA_IRQHandler+0xa24>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d027      	beq.n	80079dc <HAL_DMA_IRQHandler+0x8b8>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a6e      	ldr	r2, [pc, #440]	@ (8007b4c <HAL_DMA_IRQHandler+0xa28>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d022      	beq.n	80079dc <HAL_DMA_IRQHandler+0x8b8>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a6d      	ldr	r2, [pc, #436]	@ (8007b50 <HAL_DMA_IRQHandler+0xa2c>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d01d      	beq.n	80079dc <HAL_DMA_IRQHandler+0x8b8>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a6b      	ldr	r2, [pc, #428]	@ (8007b54 <HAL_DMA_IRQHandler+0xa30>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d018      	beq.n	80079dc <HAL_DMA_IRQHandler+0x8b8>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a6a      	ldr	r2, [pc, #424]	@ (8007b58 <HAL_DMA_IRQHandler+0xa34>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d013      	beq.n	80079dc <HAL_DMA_IRQHandler+0x8b8>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a68      	ldr	r2, [pc, #416]	@ (8007b5c <HAL_DMA_IRQHandler+0xa38>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d00e      	beq.n	80079dc <HAL_DMA_IRQHandler+0x8b8>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a67      	ldr	r2, [pc, #412]	@ (8007b60 <HAL_DMA_IRQHandler+0xa3c>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d009      	beq.n	80079dc <HAL_DMA_IRQHandler+0x8b8>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a65      	ldr	r2, [pc, #404]	@ (8007b64 <HAL_DMA_IRQHandler+0xa40>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d004      	beq.n	80079dc <HAL_DMA_IRQHandler+0x8b8>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a64      	ldr	r2, [pc, #400]	@ (8007b68 <HAL_DMA_IRQHandler+0xa44>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d108      	bne.n	80079ee <HAL_DMA_IRQHandler+0x8ca>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f022 0201 	bic.w	r2, r2, #1
 80079ea:	601a      	str	r2, [r3, #0]
 80079ec:	e007      	b.n	80079fe <HAL_DMA_IRQHandler+0x8da>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f022 0201 	bic.w	r2, r2, #1
 80079fc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	3301      	adds	r3, #1
 8007a02:	60fb      	str	r3, [r7, #12]
 8007a04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d307      	bcc.n	8007a1a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f003 0301 	and.w	r3, r3, #1
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d1f2      	bne.n	80079fe <HAL_DMA_IRQHandler+0x8da>
 8007a18:	e000      	b.n	8007a1c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007a1a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f003 0301 	and.w	r3, r3, #1
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d004      	beq.n	8007a34 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2203      	movs	r2, #3
 8007a2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8007a32:	e003      	b.n	8007a3c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	f000 8272 	beq.w	8007f32 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	4798      	blx	r3
 8007a56:	e26c      	b.n	8007f32 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a43      	ldr	r2, [pc, #268]	@ (8007b6c <HAL_DMA_IRQHandler+0xa48>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d022      	beq.n	8007aa8 <HAL_DMA_IRQHandler+0x984>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a42      	ldr	r2, [pc, #264]	@ (8007b70 <HAL_DMA_IRQHandler+0xa4c>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d01d      	beq.n	8007aa8 <HAL_DMA_IRQHandler+0x984>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a40      	ldr	r2, [pc, #256]	@ (8007b74 <HAL_DMA_IRQHandler+0xa50>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d018      	beq.n	8007aa8 <HAL_DMA_IRQHandler+0x984>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a3f      	ldr	r2, [pc, #252]	@ (8007b78 <HAL_DMA_IRQHandler+0xa54>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d013      	beq.n	8007aa8 <HAL_DMA_IRQHandler+0x984>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a3d      	ldr	r2, [pc, #244]	@ (8007b7c <HAL_DMA_IRQHandler+0xa58>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d00e      	beq.n	8007aa8 <HAL_DMA_IRQHandler+0x984>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a3c      	ldr	r2, [pc, #240]	@ (8007b80 <HAL_DMA_IRQHandler+0xa5c>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d009      	beq.n	8007aa8 <HAL_DMA_IRQHandler+0x984>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a3a      	ldr	r2, [pc, #232]	@ (8007b84 <HAL_DMA_IRQHandler+0xa60>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d004      	beq.n	8007aa8 <HAL_DMA_IRQHandler+0x984>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a39      	ldr	r2, [pc, #228]	@ (8007b88 <HAL_DMA_IRQHandler+0xa64>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d101      	bne.n	8007aac <HAL_DMA_IRQHandler+0x988>
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e000      	b.n	8007aae <HAL_DMA_IRQHandler+0x98a>
 8007aac:	2300      	movs	r3, #0
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	f000 823f 	beq.w	8007f32 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ac0:	f003 031f 	and.w	r3, r3, #31
 8007ac4:	2204      	movs	r2, #4
 8007ac6:	409a      	lsls	r2, r3
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	4013      	ands	r3, r2
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	f000 80cd 	beq.w	8007c6c <HAL_DMA_IRQHandler+0xb48>
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	f003 0304 	and.w	r3, r3, #4
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	f000 80c7 	beq.w	8007c6c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ae2:	f003 031f 	and.w	r3, r3, #31
 8007ae6:	2204      	movs	r2, #4
 8007ae8:	409a      	lsls	r2, r3
 8007aea:	69fb      	ldr	r3, [r7, #28]
 8007aec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d049      	beq.n	8007b8c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d109      	bne.n	8007b16 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	f000 8210 	beq.w	8007f2c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b14:	e20a      	b.n	8007f2c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	f000 8206 	beq.w	8007f2c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b28:	e200      	b.n	8007f2c <HAL_DMA_IRQHandler+0xe08>
 8007b2a:	bf00      	nop
 8007b2c:	40020010 	.word	0x40020010
 8007b30:	40020028 	.word	0x40020028
 8007b34:	40020040 	.word	0x40020040
 8007b38:	40020058 	.word	0x40020058
 8007b3c:	40020070 	.word	0x40020070
 8007b40:	40020088 	.word	0x40020088
 8007b44:	400200a0 	.word	0x400200a0
 8007b48:	400200b8 	.word	0x400200b8
 8007b4c:	40020410 	.word	0x40020410
 8007b50:	40020428 	.word	0x40020428
 8007b54:	40020440 	.word	0x40020440
 8007b58:	40020458 	.word	0x40020458
 8007b5c:	40020470 	.word	0x40020470
 8007b60:	40020488 	.word	0x40020488
 8007b64:	400204a0 	.word	0x400204a0
 8007b68:	400204b8 	.word	0x400204b8
 8007b6c:	58025408 	.word	0x58025408
 8007b70:	5802541c 	.word	0x5802541c
 8007b74:	58025430 	.word	0x58025430
 8007b78:	58025444 	.word	0x58025444
 8007b7c:	58025458 	.word	0x58025458
 8007b80:	5802546c 	.word	0x5802546c
 8007b84:	58025480 	.word	0x58025480
 8007b88:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	f003 0320 	and.w	r3, r3, #32
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d160      	bne.n	8007c58 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a7f      	ldr	r2, [pc, #508]	@ (8007d98 <HAL_DMA_IRQHandler+0xc74>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d04a      	beq.n	8007c36 <HAL_DMA_IRQHandler+0xb12>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a7d      	ldr	r2, [pc, #500]	@ (8007d9c <HAL_DMA_IRQHandler+0xc78>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d045      	beq.n	8007c36 <HAL_DMA_IRQHandler+0xb12>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a7c      	ldr	r2, [pc, #496]	@ (8007da0 <HAL_DMA_IRQHandler+0xc7c>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d040      	beq.n	8007c36 <HAL_DMA_IRQHandler+0xb12>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a7a      	ldr	r2, [pc, #488]	@ (8007da4 <HAL_DMA_IRQHandler+0xc80>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d03b      	beq.n	8007c36 <HAL_DMA_IRQHandler+0xb12>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a79      	ldr	r2, [pc, #484]	@ (8007da8 <HAL_DMA_IRQHandler+0xc84>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d036      	beq.n	8007c36 <HAL_DMA_IRQHandler+0xb12>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a77      	ldr	r2, [pc, #476]	@ (8007dac <HAL_DMA_IRQHandler+0xc88>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d031      	beq.n	8007c36 <HAL_DMA_IRQHandler+0xb12>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a76      	ldr	r2, [pc, #472]	@ (8007db0 <HAL_DMA_IRQHandler+0xc8c>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d02c      	beq.n	8007c36 <HAL_DMA_IRQHandler+0xb12>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a74      	ldr	r2, [pc, #464]	@ (8007db4 <HAL_DMA_IRQHandler+0xc90>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d027      	beq.n	8007c36 <HAL_DMA_IRQHandler+0xb12>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a73      	ldr	r2, [pc, #460]	@ (8007db8 <HAL_DMA_IRQHandler+0xc94>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d022      	beq.n	8007c36 <HAL_DMA_IRQHandler+0xb12>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a71      	ldr	r2, [pc, #452]	@ (8007dbc <HAL_DMA_IRQHandler+0xc98>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d01d      	beq.n	8007c36 <HAL_DMA_IRQHandler+0xb12>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a70      	ldr	r2, [pc, #448]	@ (8007dc0 <HAL_DMA_IRQHandler+0xc9c>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d018      	beq.n	8007c36 <HAL_DMA_IRQHandler+0xb12>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a6e      	ldr	r2, [pc, #440]	@ (8007dc4 <HAL_DMA_IRQHandler+0xca0>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d013      	beq.n	8007c36 <HAL_DMA_IRQHandler+0xb12>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a6d      	ldr	r2, [pc, #436]	@ (8007dc8 <HAL_DMA_IRQHandler+0xca4>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d00e      	beq.n	8007c36 <HAL_DMA_IRQHandler+0xb12>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a6b      	ldr	r2, [pc, #428]	@ (8007dcc <HAL_DMA_IRQHandler+0xca8>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d009      	beq.n	8007c36 <HAL_DMA_IRQHandler+0xb12>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a6a      	ldr	r2, [pc, #424]	@ (8007dd0 <HAL_DMA_IRQHandler+0xcac>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d004      	beq.n	8007c36 <HAL_DMA_IRQHandler+0xb12>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a68      	ldr	r2, [pc, #416]	@ (8007dd4 <HAL_DMA_IRQHandler+0xcb0>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d108      	bne.n	8007c48 <HAL_DMA_IRQHandler+0xb24>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f022 0208 	bic.w	r2, r2, #8
 8007c44:	601a      	str	r2, [r3, #0]
 8007c46:	e007      	b.n	8007c58 <HAL_DMA_IRQHandler+0xb34>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f022 0204 	bic.w	r2, r2, #4
 8007c56:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	f000 8165 	beq.w	8007f2c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c6a:	e15f      	b.n	8007f2c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c70:	f003 031f 	and.w	r3, r3, #31
 8007c74:	2202      	movs	r2, #2
 8007c76:	409a      	lsls	r2, r3
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	4013      	ands	r3, r2
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	f000 80c5 	beq.w	8007e0c <HAL_DMA_IRQHandler+0xce8>
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	f003 0302 	and.w	r3, r3, #2
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	f000 80bf 	beq.w	8007e0c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c92:	f003 031f 	and.w	r3, r3, #31
 8007c96:	2202      	movs	r2, #2
 8007c98:	409a      	lsls	r2, r3
 8007c9a:	69fb      	ldr	r3, [r7, #28]
 8007c9c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d018      	beq.n	8007cda <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d109      	bne.n	8007cc6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	f000 813a 	beq.w	8007f30 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007cc4:	e134      	b.n	8007f30 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	f000 8130 	beq.w	8007f30 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007cd8:	e12a      	b.n	8007f30 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	f003 0320 	and.w	r3, r3, #32
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	f040 8089 	bne.w	8007df8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a2b      	ldr	r2, [pc, #172]	@ (8007d98 <HAL_DMA_IRQHandler+0xc74>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d04a      	beq.n	8007d86 <HAL_DMA_IRQHandler+0xc62>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a29      	ldr	r2, [pc, #164]	@ (8007d9c <HAL_DMA_IRQHandler+0xc78>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d045      	beq.n	8007d86 <HAL_DMA_IRQHandler+0xc62>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a28      	ldr	r2, [pc, #160]	@ (8007da0 <HAL_DMA_IRQHandler+0xc7c>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d040      	beq.n	8007d86 <HAL_DMA_IRQHandler+0xc62>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a26      	ldr	r2, [pc, #152]	@ (8007da4 <HAL_DMA_IRQHandler+0xc80>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d03b      	beq.n	8007d86 <HAL_DMA_IRQHandler+0xc62>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a25      	ldr	r2, [pc, #148]	@ (8007da8 <HAL_DMA_IRQHandler+0xc84>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d036      	beq.n	8007d86 <HAL_DMA_IRQHandler+0xc62>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a23      	ldr	r2, [pc, #140]	@ (8007dac <HAL_DMA_IRQHandler+0xc88>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d031      	beq.n	8007d86 <HAL_DMA_IRQHandler+0xc62>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a22      	ldr	r2, [pc, #136]	@ (8007db0 <HAL_DMA_IRQHandler+0xc8c>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d02c      	beq.n	8007d86 <HAL_DMA_IRQHandler+0xc62>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a20      	ldr	r2, [pc, #128]	@ (8007db4 <HAL_DMA_IRQHandler+0xc90>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d027      	beq.n	8007d86 <HAL_DMA_IRQHandler+0xc62>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a1f      	ldr	r2, [pc, #124]	@ (8007db8 <HAL_DMA_IRQHandler+0xc94>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d022      	beq.n	8007d86 <HAL_DMA_IRQHandler+0xc62>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a1d      	ldr	r2, [pc, #116]	@ (8007dbc <HAL_DMA_IRQHandler+0xc98>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d01d      	beq.n	8007d86 <HAL_DMA_IRQHandler+0xc62>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a1c      	ldr	r2, [pc, #112]	@ (8007dc0 <HAL_DMA_IRQHandler+0xc9c>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d018      	beq.n	8007d86 <HAL_DMA_IRQHandler+0xc62>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a1a      	ldr	r2, [pc, #104]	@ (8007dc4 <HAL_DMA_IRQHandler+0xca0>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d013      	beq.n	8007d86 <HAL_DMA_IRQHandler+0xc62>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a19      	ldr	r2, [pc, #100]	@ (8007dc8 <HAL_DMA_IRQHandler+0xca4>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d00e      	beq.n	8007d86 <HAL_DMA_IRQHandler+0xc62>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a17      	ldr	r2, [pc, #92]	@ (8007dcc <HAL_DMA_IRQHandler+0xca8>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d009      	beq.n	8007d86 <HAL_DMA_IRQHandler+0xc62>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a16      	ldr	r2, [pc, #88]	@ (8007dd0 <HAL_DMA_IRQHandler+0xcac>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d004      	beq.n	8007d86 <HAL_DMA_IRQHandler+0xc62>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a14      	ldr	r2, [pc, #80]	@ (8007dd4 <HAL_DMA_IRQHandler+0xcb0>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d128      	bne.n	8007dd8 <HAL_DMA_IRQHandler+0xcb4>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f022 0214 	bic.w	r2, r2, #20
 8007d94:	601a      	str	r2, [r3, #0]
 8007d96:	e027      	b.n	8007de8 <HAL_DMA_IRQHandler+0xcc4>
 8007d98:	40020010 	.word	0x40020010
 8007d9c:	40020028 	.word	0x40020028
 8007da0:	40020040 	.word	0x40020040
 8007da4:	40020058 	.word	0x40020058
 8007da8:	40020070 	.word	0x40020070
 8007dac:	40020088 	.word	0x40020088
 8007db0:	400200a0 	.word	0x400200a0
 8007db4:	400200b8 	.word	0x400200b8
 8007db8:	40020410 	.word	0x40020410
 8007dbc:	40020428 	.word	0x40020428
 8007dc0:	40020440 	.word	0x40020440
 8007dc4:	40020458 	.word	0x40020458
 8007dc8:	40020470 	.word	0x40020470
 8007dcc:	40020488 	.word	0x40020488
 8007dd0:	400204a0 	.word	0x400204a0
 8007dd4:	400204b8 	.word	0x400204b8
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f022 020a 	bic.w	r2, r2, #10
 8007de6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	f000 8097 	beq.w	8007f30 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e0a:	e091      	b.n	8007f30 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e10:	f003 031f 	and.w	r3, r3, #31
 8007e14:	2208      	movs	r2, #8
 8007e16:	409a      	lsls	r2, r3
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	4013      	ands	r3, r2
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	f000 8088 	beq.w	8007f32 <HAL_DMA_IRQHandler+0xe0e>
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	f003 0308 	and.w	r3, r3, #8
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f000 8082 	beq.w	8007f32 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a41      	ldr	r2, [pc, #260]	@ (8007f38 <HAL_DMA_IRQHandler+0xe14>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d04a      	beq.n	8007ece <HAL_DMA_IRQHandler+0xdaa>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a3f      	ldr	r2, [pc, #252]	@ (8007f3c <HAL_DMA_IRQHandler+0xe18>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d045      	beq.n	8007ece <HAL_DMA_IRQHandler+0xdaa>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a3e      	ldr	r2, [pc, #248]	@ (8007f40 <HAL_DMA_IRQHandler+0xe1c>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d040      	beq.n	8007ece <HAL_DMA_IRQHandler+0xdaa>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a3c      	ldr	r2, [pc, #240]	@ (8007f44 <HAL_DMA_IRQHandler+0xe20>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d03b      	beq.n	8007ece <HAL_DMA_IRQHandler+0xdaa>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a3b      	ldr	r2, [pc, #236]	@ (8007f48 <HAL_DMA_IRQHandler+0xe24>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d036      	beq.n	8007ece <HAL_DMA_IRQHandler+0xdaa>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a39      	ldr	r2, [pc, #228]	@ (8007f4c <HAL_DMA_IRQHandler+0xe28>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d031      	beq.n	8007ece <HAL_DMA_IRQHandler+0xdaa>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a38      	ldr	r2, [pc, #224]	@ (8007f50 <HAL_DMA_IRQHandler+0xe2c>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d02c      	beq.n	8007ece <HAL_DMA_IRQHandler+0xdaa>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a36      	ldr	r2, [pc, #216]	@ (8007f54 <HAL_DMA_IRQHandler+0xe30>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d027      	beq.n	8007ece <HAL_DMA_IRQHandler+0xdaa>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a35      	ldr	r2, [pc, #212]	@ (8007f58 <HAL_DMA_IRQHandler+0xe34>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d022      	beq.n	8007ece <HAL_DMA_IRQHandler+0xdaa>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a33      	ldr	r2, [pc, #204]	@ (8007f5c <HAL_DMA_IRQHandler+0xe38>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d01d      	beq.n	8007ece <HAL_DMA_IRQHandler+0xdaa>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a32      	ldr	r2, [pc, #200]	@ (8007f60 <HAL_DMA_IRQHandler+0xe3c>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d018      	beq.n	8007ece <HAL_DMA_IRQHandler+0xdaa>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a30      	ldr	r2, [pc, #192]	@ (8007f64 <HAL_DMA_IRQHandler+0xe40>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d013      	beq.n	8007ece <HAL_DMA_IRQHandler+0xdaa>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a2f      	ldr	r2, [pc, #188]	@ (8007f68 <HAL_DMA_IRQHandler+0xe44>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d00e      	beq.n	8007ece <HAL_DMA_IRQHandler+0xdaa>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a2d      	ldr	r2, [pc, #180]	@ (8007f6c <HAL_DMA_IRQHandler+0xe48>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d009      	beq.n	8007ece <HAL_DMA_IRQHandler+0xdaa>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a2c      	ldr	r2, [pc, #176]	@ (8007f70 <HAL_DMA_IRQHandler+0xe4c>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d004      	beq.n	8007ece <HAL_DMA_IRQHandler+0xdaa>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a2a      	ldr	r2, [pc, #168]	@ (8007f74 <HAL_DMA_IRQHandler+0xe50>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d108      	bne.n	8007ee0 <HAL_DMA_IRQHandler+0xdbc>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f022 021c 	bic.w	r2, r2, #28
 8007edc:	601a      	str	r2, [r3, #0]
 8007ede:	e007      	b.n	8007ef0 <HAL_DMA_IRQHandler+0xdcc>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f022 020e 	bic.w	r2, r2, #14
 8007eee:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ef4:	f003 031f 	and.w	r3, r3, #31
 8007ef8:	2201      	movs	r2, #1
 8007efa:	409a      	lsls	r2, r3
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d009      	beq.n	8007f32 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	4798      	blx	r3
 8007f26:	e004      	b.n	8007f32 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007f28:	bf00      	nop
 8007f2a:	e002      	b.n	8007f32 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f2c:	bf00      	nop
 8007f2e:	e000      	b.n	8007f32 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f30:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007f32:	3728      	adds	r7, #40	@ 0x28
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}
 8007f38:	40020010 	.word	0x40020010
 8007f3c:	40020028 	.word	0x40020028
 8007f40:	40020040 	.word	0x40020040
 8007f44:	40020058 	.word	0x40020058
 8007f48:	40020070 	.word	0x40020070
 8007f4c:	40020088 	.word	0x40020088
 8007f50:	400200a0 	.word	0x400200a0
 8007f54:	400200b8 	.word	0x400200b8
 8007f58:	40020410 	.word	0x40020410
 8007f5c:	40020428 	.word	0x40020428
 8007f60:	40020440 	.word	0x40020440
 8007f64:	40020458 	.word	0x40020458
 8007f68:	40020470 	.word	0x40020470
 8007f6c:	40020488 	.word	0x40020488
 8007f70:	400204a0 	.word	0x400204a0
 8007f74:	400204b8 	.word	0x400204b8

08007f78 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b087      	sub	sp, #28
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	607a      	str	r2, [r7, #4]
 8007f84:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f8a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f90:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a7f      	ldr	r2, [pc, #508]	@ (8008194 <DMA_SetConfig+0x21c>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d072      	beq.n	8008082 <DMA_SetConfig+0x10a>
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a7d      	ldr	r2, [pc, #500]	@ (8008198 <DMA_SetConfig+0x220>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d06d      	beq.n	8008082 <DMA_SetConfig+0x10a>
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a7c      	ldr	r2, [pc, #496]	@ (800819c <DMA_SetConfig+0x224>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d068      	beq.n	8008082 <DMA_SetConfig+0x10a>
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a7a      	ldr	r2, [pc, #488]	@ (80081a0 <DMA_SetConfig+0x228>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d063      	beq.n	8008082 <DMA_SetConfig+0x10a>
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a79      	ldr	r2, [pc, #484]	@ (80081a4 <DMA_SetConfig+0x22c>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d05e      	beq.n	8008082 <DMA_SetConfig+0x10a>
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a77      	ldr	r2, [pc, #476]	@ (80081a8 <DMA_SetConfig+0x230>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d059      	beq.n	8008082 <DMA_SetConfig+0x10a>
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a76      	ldr	r2, [pc, #472]	@ (80081ac <DMA_SetConfig+0x234>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d054      	beq.n	8008082 <DMA_SetConfig+0x10a>
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a74      	ldr	r2, [pc, #464]	@ (80081b0 <DMA_SetConfig+0x238>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d04f      	beq.n	8008082 <DMA_SetConfig+0x10a>
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a73      	ldr	r2, [pc, #460]	@ (80081b4 <DMA_SetConfig+0x23c>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d04a      	beq.n	8008082 <DMA_SetConfig+0x10a>
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a71      	ldr	r2, [pc, #452]	@ (80081b8 <DMA_SetConfig+0x240>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d045      	beq.n	8008082 <DMA_SetConfig+0x10a>
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a70      	ldr	r2, [pc, #448]	@ (80081bc <DMA_SetConfig+0x244>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d040      	beq.n	8008082 <DMA_SetConfig+0x10a>
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a6e      	ldr	r2, [pc, #440]	@ (80081c0 <DMA_SetConfig+0x248>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d03b      	beq.n	8008082 <DMA_SetConfig+0x10a>
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a6d      	ldr	r2, [pc, #436]	@ (80081c4 <DMA_SetConfig+0x24c>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d036      	beq.n	8008082 <DMA_SetConfig+0x10a>
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a6b      	ldr	r2, [pc, #428]	@ (80081c8 <DMA_SetConfig+0x250>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d031      	beq.n	8008082 <DMA_SetConfig+0x10a>
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a6a      	ldr	r2, [pc, #424]	@ (80081cc <DMA_SetConfig+0x254>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d02c      	beq.n	8008082 <DMA_SetConfig+0x10a>
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a68      	ldr	r2, [pc, #416]	@ (80081d0 <DMA_SetConfig+0x258>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d027      	beq.n	8008082 <DMA_SetConfig+0x10a>
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a67      	ldr	r2, [pc, #412]	@ (80081d4 <DMA_SetConfig+0x25c>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d022      	beq.n	8008082 <DMA_SetConfig+0x10a>
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a65      	ldr	r2, [pc, #404]	@ (80081d8 <DMA_SetConfig+0x260>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d01d      	beq.n	8008082 <DMA_SetConfig+0x10a>
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a64      	ldr	r2, [pc, #400]	@ (80081dc <DMA_SetConfig+0x264>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d018      	beq.n	8008082 <DMA_SetConfig+0x10a>
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a62      	ldr	r2, [pc, #392]	@ (80081e0 <DMA_SetConfig+0x268>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d013      	beq.n	8008082 <DMA_SetConfig+0x10a>
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a61      	ldr	r2, [pc, #388]	@ (80081e4 <DMA_SetConfig+0x26c>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d00e      	beq.n	8008082 <DMA_SetConfig+0x10a>
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a5f      	ldr	r2, [pc, #380]	@ (80081e8 <DMA_SetConfig+0x270>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d009      	beq.n	8008082 <DMA_SetConfig+0x10a>
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a5e      	ldr	r2, [pc, #376]	@ (80081ec <DMA_SetConfig+0x274>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d004      	beq.n	8008082 <DMA_SetConfig+0x10a>
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a5c      	ldr	r2, [pc, #368]	@ (80081f0 <DMA_SetConfig+0x278>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d101      	bne.n	8008086 <DMA_SetConfig+0x10e>
 8008082:	2301      	movs	r3, #1
 8008084:	e000      	b.n	8008088 <DMA_SetConfig+0x110>
 8008086:	2300      	movs	r3, #0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d00d      	beq.n	80080a8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008090:	68fa      	ldr	r2, [r7, #12]
 8008092:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8008094:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800809a:	2b00      	cmp	r3, #0
 800809c:	d004      	beq.n	80080a8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080a2:	68fa      	ldr	r2, [r7, #12]
 80080a4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80080a6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a39      	ldr	r2, [pc, #228]	@ (8008194 <DMA_SetConfig+0x21c>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d04a      	beq.n	8008148 <DMA_SetConfig+0x1d0>
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a38      	ldr	r2, [pc, #224]	@ (8008198 <DMA_SetConfig+0x220>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d045      	beq.n	8008148 <DMA_SetConfig+0x1d0>
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a36      	ldr	r2, [pc, #216]	@ (800819c <DMA_SetConfig+0x224>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d040      	beq.n	8008148 <DMA_SetConfig+0x1d0>
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a35      	ldr	r2, [pc, #212]	@ (80081a0 <DMA_SetConfig+0x228>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d03b      	beq.n	8008148 <DMA_SetConfig+0x1d0>
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a33      	ldr	r2, [pc, #204]	@ (80081a4 <DMA_SetConfig+0x22c>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d036      	beq.n	8008148 <DMA_SetConfig+0x1d0>
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a32      	ldr	r2, [pc, #200]	@ (80081a8 <DMA_SetConfig+0x230>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d031      	beq.n	8008148 <DMA_SetConfig+0x1d0>
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a30      	ldr	r2, [pc, #192]	@ (80081ac <DMA_SetConfig+0x234>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d02c      	beq.n	8008148 <DMA_SetConfig+0x1d0>
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a2f      	ldr	r2, [pc, #188]	@ (80081b0 <DMA_SetConfig+0x238>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d027      	beq.n	8008148 <DMA_SetConfig+0x1d0>
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a2d      	ldr	r2, [pc, #180]	@ (80081b4 <DMA_SetConfig+0x23c>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d022      	beq.n	8008148 <DMA_SetConfig+0x1d0>
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a2c      	ldr	r2, [pc, #176]	@ (80081b8 <DMA_SetConfig+0x240>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d01d      	beq.n	8008148 <DMA_SetConfig+0x1d0>
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a2a      	ldr	r2, [pc, #168]	@ (80081bc <DMA_SetConfig+0x244>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d018      	beq.n	8008148 <DMA_SetConfig+0x1d0>
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a29      	ldr	r2, [pc, #164]	@ (80081c0 <DMA_SetConfig+0x248>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d013      	beq.n	8008148 <DMA_SetConfig+0x1d0>
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a27      	ldr	r2, [pc, #156]	@ (80081c4 <DMA_SetConfig+0x24c>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d00e      	beq.n	8008148 <DMA_SetConfig+0x1d0>
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a26      	ldr	r2, [pc, #152]	@ (80081c8 <DMA_SetConfig+0x250>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d009      	beq.n	8008148 <DMA_SetConfig+0x1d0>
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a24      	ldr	r2, [pc, #144]	@ (80081cc <DMA_SetConfig+0x254>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d004      	beq.n	8008148 <DMA_SetConfig+0x1d0>
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a23      	ldr	r2, [pc, #140]	@ (80081d0 <DMA_SetConfig+0x258>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d101      	bne.n	800814c <DMA_SetConfig+0x1d4>
 8008148:	2301      	movs	r3, #1
 800814a:	e000      	b.n	800814e <DMA_SetConfig+0x1d6>
 800814c:	2300      	movs	r3, #0
 800814e:	2b00      	cmp	r3, #0
 8008150:	d059      	beq.n	8008206 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008156:	f003 031f 	and.w	r3, r3, #31
 800815a:	223f      	movs	r2, #63	@ 0x3f
 800815c:	409a      	lsls	r2, r3
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008170:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	683a      	ldr	r2, [r7, #0]
 8008178:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	689b      	ldr	r3, [r3, #8]
 800817e:	2b40      	cmp	r3, #64	@ 0x40
 8008180:	d138      	bne.n	80081f4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	68ba      	ldr	r2, [r7, #8]
 8008190:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008192:	e086      	b.n	80082a2 <DMA_SetConfig+0x32a>
 8008194:	40020010 	.word	0x40020010
 8008198:	40020028 	.word	0x40020028
 800819c:	40020040 	.word	0x40020040
 80081a0:	40020058 	.word	0x40020058
 80081a4:	40020070 	.word	0x40020070
 80081a8:	40020088 	.word	0x40020088
 80081ac:	400200a0 	.word	0x400200a0
 80081b0:	400200b8 	.word	0x400200b8
 80081b4:	40020410 	.word	0x40020410
 80081b8:	40020428 	.word	0x40020428
 80081bc:	40020440 	.word	0x40020440
 80081c0:	40020458 	.word	0x40020458
 80081c4:	40020470 	.word	0x40020470
 80081c8:	40020488 	.word	0x40020488
 80081cc:	400204a0 	.word	0x400204a0
 80081d0:	400204b8 	.word	0x400204b8
 80081d4:	58025408 	.word	0x58025408
 80081d8:	5802541c 	.word	0x5802541c
 80081dc:	58025430 	.word	0x58025430
 80081e0:	58025444 	.word	0x58025444
 80081e4:	58025458 	.word	0x58025458
 80081e8:	5802546c 	.word	0x5802546c
 80081ec:	58025480 	.word	0x58025480
 80081f0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	68ba      	ldr	r2, [r7, #8]
 80081fa:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	60da      	str	r2, [r3, #12]
}
 8008204:	e04d      	b.n	80082a2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a29      	ldr	r2, [pc, #164]	@ (80082b0 <DMA_SetConfig+0x338>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d022      	beq.n	8008256 <DMA_SetConfig+0x2de>
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a27      	ldr	r2, [pc, #156]	@ (80082b4 <DMA_SetConfig+0x33c>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d01d      	beq.n	8008256 <DMA_SetConfig+0x2de>
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a26      	ldr	r2, [pc, #152]	@ (80082b8 <DMA_SetConfig+0x340>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d018      	beq.n	8008256 <DMA_SetConfig+0x2de>
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a24      	ldr	r2, [pc, #144]	@ (80082bc <DMA_SetConfig+0x344>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d013      	beq.n	8008256 <DMA_SetConfig+0x2de>
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a23      	ldr	r2, [pc, #140]	@ (80082c0 <DMA_SetConfig+0x348>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d00e      	beq.n	8008256 <DMA_SetConfig+0x2de>
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a21      	ldr	r2, [pc, #132]	@ (80082c4 <DMA_SetConfig+0x34c>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d009      	beq.n	8008256 <DMA_SetConfig+0x2de>
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a20      	ldr	r2, [pc, #128]	@ (80082c8 <DMA_SetConfig+0x350>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d004      	beq.n	8008256 <DMA_SetConfig+0x2de>
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a1e      	ldr	r2, [pc, #120]	@ (80082cc <DMA_SetConfig+0x354>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d101      	bne.n	800825a <DMA_SetConfig+0x2e2>
 8008256:	2301      	movs	r3, #1
 8008258:	e000      	b.n	800825c <DMA_SetConfig+0x2e4>
 800825a:	2300      	movs	r3, #0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d020      	beq.n	80082a2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008264:	f003 031f 	and.w	r3, r3, #31
 8008268:	2201      	movs	r2, #1
 800826a:	409a      	lsls	r2, r3
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	683a      	ldr	r2, [r7, #0]
 8008276:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	2b40      	cmp	r3, #64	@ 0x40
 800827e:	d108      	bne.n	8008292 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	68ba      	ldr	r2, [r7, #8]
 800828e:	60da      	str	r2, [r3, #12]
}
 8008290:	e007      	b.n	80082a2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	68ba      	ldr	r2, [r7, #8]
 8008298:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	60da      	str	r2, [r3, #12]
}
 80082a2:	bf00      	nop
 80082a4:	371c      	adds	r7, #28
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr
 80082ae:	bf00      	nop
 80082b0:	58025408 	.word	0x58025408
 80082b4:	5802541c 	.word	0x5802541c
 80082b8:	58025430 	.word	0x58025430
 80082bc:	58025444 	.word	0x58025444
 80082c0:	58025458 	.word	0x58025458
 80082c4:	5802546c 	.word	0x5802546c
 80082c8:	58025480 	.word	0x58025480
 80082cc:	58025494 	.word	0x58025494

080082d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b085      	sub	sp, #20
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a42      	ldr	r2, [pc, #264]	@ (80083e8 <DMA_CalcBaseAndBitshift+0x118>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d04a      	beq.n	8008378 <DMA_CalcBaseAndBitshift+0xa8>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a41      	ldr	r2, [pc, #260]	@ (80083ec <DMA_CalcBaseAndBitshift+0x11c>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d045      	beq.n	8008378 <DMA_CalcBaseAndBitshift+0xa8>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a3f      	ldr	r2, [pc, #252]	@ (80083f0 <DMA_CalcBaseAndBitshift+0x120>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d040      	beq.n	8008378 <DMA_CalcBaseAndBitshift+0xa8>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a3e      	ldr	r2, [pc, #248]	@ (80083f4 <DMA_CalcBaseAndBitshift+0x124>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d03b      	beq.n	8008378 <DMA_CalcBaseAndBitshift+0xa8>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a3c      	ldr	r2, [pc, #240]	@ (80083f8 <DMA_CalcBaseAndBitshift+0x128>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d036      	beq.n	8008378 <DMA_CalcBaseAndBitshift+0xa8>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a3b      	ldr	r2, [pc, #236]	@ (80083fc <DMA_CalcBaseAndBitshift+0x12c>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d031      	beq.n	8008378 <DMA_CalcBaseAndBitshift+0xa8>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a39      	ldr	r2, [pc, #228]	@ (8008400 <DMA_CalcBaseAndBitshift+0x130>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d02c      	beq.n	8008378 <DMA_CalcBaseAndBitshift+0xa8>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a38      	ldr	r2, [pc, #224]	@ (8008404 <DMA_CalcBaseAndBitshift+0x134>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d027      	beq.n	8008378 <DMA_CalcBaseAndBitshift+0xa8>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a36      	ldr	r2, [pc, #216]	@ (8008408 <DMA_CalcBaseAndBitshift+0x138>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d022      	beq.n	8008378 <DMA_CalcBaseAndBitshift+0xa8>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a35      	ldr	r2, [pc, #212]	@ (800840c <DMA_CalcBaseAndBitshift+0x13c>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d01d      	beq.n	8008378 <DMA_CalcBaseAndBitshift+0xa8>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a33      	ldr	r2, [pc, #204]	@ (8008410 <DMA_CalcBaseAndBitshift+0x140>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d018      	beq.n	8008378 <DMA_CalcBaseAndBitshift+0xa8>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a32      	ldr	r2, [pc, #200]	@ (8008414 <DMA_CalcBaseAndBitshift+0x144>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d013      	beq.n	8008378 <DMA_CalcBaseAndBitshift+0xa8>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a30      	ldr	r2, [pc, #192]	@ (8008418 <DMA_CalcBaseAndBitshift+0x148>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d00e      	beq.n	8008378 <DMA_CalcBaseAndBitshift+0xa8>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a2f      	ldr	r2, [pc, #188]	@ (800841c <DMA_CalcBaseAndBitshift+0x14c>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d009      	beq.n	8008378 <DMA_CalcBaseAndBitshift+0xa8>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a2d      	ldr	r2, [pc, #180]	@ (8008420 <DMA_CalcBaseAndBitshift+0x150>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d004      	beq.n	8008378 <DMA_CalcBaseAndBitshift+0xa8>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a2c      	ldr	r2, [pc, #176]	@ (8008424 <DMA_CalcBaseAndBitshift+0x154>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d101      	bne.n	800837c <DMA_CalcBaseAndBitshift+0xac>
 8008378:	2301      	movs	r3, #1
 800837a:	e000      	b.n	800837e <DMA_CalcBaseAndBitshift+0xae>
 800837c:	2300      	movs	r3, #0
 800837e:	2b00      	cmp	r3, #0
 8008380:	d024      	beq.n	80083cc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	b2db      	uxtb	r3, r3
 8008388:	3b10      	subs	r3, #16
 800838a:	4a27      	ldr	r2, [pc, #156]	@ (8008428 <DMA_CalcBaseAndBitshift+0x158>)
 800838c:	fba2 2303 	umull	r2, r3, r2, r3
 8008390:	091b      	lsrs	r3, r3, #4
 8008392:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f003 0307 	and.w	r3, r3, #7
 800839a:	4a24      	ldr	r2, [pc, #144]	@ (800842c <DMA_CalcBaseAndBitshift+0x15c>)
 800839c:	5cd3      	ldrb	r3, [r2, r3]
 800839e:	461a      	mov	r2, r3
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2b03      	cmp	r3, #3
 80083a8:	d908      	bls.n	80083bc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	461a      	mov	r2, r3
 80083b0:	4b1f      	ldr	r3, [pc, #124]	@ (8008430 <DMA_CalcBaseAndBitshift+0x160>)
 80083b2:	4013      	ands	r3, r2
 80083b4:	1d1a      	adds	r2, r3, #4
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	659a      	str	r2, [r3, #88]	@ 0x58
 80083ba:	e00d      	b.n	80083d8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	461a      	mov	r2, r3
 80083c2:	4b1b      	ldr	r3, [pc, #108]	@ (8008430 <DMA_CalcBaseAndBitshift+0x160>)
 80083c4:	4013      	ands	r3, r2
 80083c6:	687a      	ldr	r2, [r7, #4]
 80083c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80083ca:	e005      	b.n	80083d8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3714      	adds	r7, #20
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr
 80083e8:	40020010 	.word	0x40020010
 80083ec:	40020028 	.word	0x40020028
 80083f0:	40020040 	.word	0x40020040
 80083f4:	40020058 	.word	0x40020058
 80083f8:	40020070 	.word	0x40020070
 80083fc:	40020088 	.word	0x40020088
 8008400:	400200a0 	.word	0x400200a0
 8008404:	400200b8 	.word	0x400200b8
 8008408:	40020410 	.word	0x40020410
 800840c:	40020428 	.word	0x40020428
 8008410:	40020440 	.word	0x40020440
 8008414:	40020458 	.word	0x40020458
 8008418:	40020470 	.word	0x40020470
 800841c:	40020488 	.word	0x40020488
 8008420:	400204a0 	.word	0x400204a0
 8008424:	400204b8 	.word	0x400204b8
 8008428:	aaaaaaab 	.word	0xaaaaaaab
 800842c:	08018870 	.word	0x08018870
 8008430:	fffffc00 	.word	0xfffffc00

08008434 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008434:	b480      	push	{r7}
 8008436:	b085      	sub	sp, #20
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800843c:	2300      	movs	r3, #0
 800843e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	699b      	ldr	r3, [r3, #24]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d120      	bne.n	800848a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800844c:	2b03      	cmp	r3, #3
 800844e:	d858      	bhi.n	8008502 <DMA_CheckFifoParam+0xce>
 8008450:	a201      	add	r2, pc, #4	@ (adr r2, 8008458 <DMA_CheckFifoParam+0x24>)
 8008452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008456:	bf00      	nop
 8008458:	08008469 	.word	0x08008469
 800845c:	0800847b 	.word	0x0800847b
 8008460:	08008469 	.word	0x08008469
 8008464:	08008503 	.word	0x08008503
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800846c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008470:	2b00      	cmp	r3, #0
 8008472:	d048      	beq.n	8008506 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008474:	2301      	movs	r3, #1
 8008476:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008478:	e045      	b.n	8008506 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800847e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008482:	d142      	bne.n	800850a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008484:	2301      	movs	r3, #1
 8008486:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008488:	e03f      	b.n	800850a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	699b      	ldr	r3, [r3, #24]
 800848e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008492:	d123      	bne.n	80084dc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008498:	2b03      	cmp	r3, #3
 800849a:	d838      	bhi.n	800850e <DMA_CheckFifoParam+0xda>
 800849c:	a201      	add	r2, pc, #4	@ (adr r2, 80084a4 <DMA_CheckFifoParam+0x70>)
 800849e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a2:	bf00      	nop
 80084a4:	080084b5 	.word	0x080084b5
 80084a8:	080084bb 	.word	0x080084bb
 80084ac:	080084b5 	.word	0x080084b5
 80084b0:	080084cd 	.word	0x080084cd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80084b4:	2301      	movs	r3, #1
 80084b6:	73fb      	strb	r3, [r7, #15]
        break;
 80084b8:	e030      	b.n	800851c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d025      	beq.n	8008512 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80084ca:	e022      	b.n	8008512 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084d0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80084d4:	d11f      	bne.n	8008516 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80084d6:	2301      	movs	r3, #1
 80084d8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80084da:	e01c      	b.n	8008516 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084e0:	2b02      	cmp	r3, #2
 80084e2:	d902      	bls.n	80084ea <DMA_CheckFifoParam+0xb6>
 80084e4:	2b03      	cmp	r3, #3
 80084e6:	d003      	beq.n	80084f0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80084e8:	e018      	b.n	800851c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	73fb      	strb	r3, [r7, #15]
        break;
 80084ee:	e015      	b.n	800851c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d00e      	beq.n	800851a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80084fc:	2301      	movs	r3, #1
 80084fe:	73fb      	strb	r3, [r7, #15]
    break;
 8008500:	e00b      	b.n	800851a <DMA_CheckFifoParam+0xe6>
        break;
 8008502:	bf00      	nop
 8008504:	e00a      	b.n	800851c <DMA_CheckFifoParam+0xe8>
        break;
 8008506:	bf00      	nop
 8008508:	e008      	b.n	800851c <DMA_CheckFifoParam+0xe8>
        break;
 800850a:	bf00      	nop
 800850c:	e006      	b.n	800851c <DMA_CheckFifoParam+0xe8>
        break;
 800850e:	bf00      	nop
 8008510:	e004      	b.n	800851c <DMA_CheckFifoParam+0xe8>
        break;
 8008512:	bf00      	nop
 8008514:	e002      	b.n	800851c <DMA_CheckFifoParam+0xe8>
        break;
 8008516:	bf00      	nop
 8008518:	e000      	b.n	800851c <DMA_CheckFifoParam+0xe8>
    break;
 800851a:	bf00      	nop
    }
  }

  return status;
 800851c:	7bfb      	ldrb	r3, [r7, #15]
}
 800851e:	4618      	mov	r0, r3
 8008520:	3714      	adds	r7, #20
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr
 800852a:	bf00      	nop

0800852c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800852c:	b480      	push	{r7}
 800852e:	b085      	sub	sp, #20
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a38      	ldr	r2, [pc, #224]	@ (8008620 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d022      	beq.n	800858a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a36      	ldr	r2, [pc, #216]	@ (8008624 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d01d      	beq.n	800858a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a35      	ldr	r2, [pc, #212]	@ (8008628 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d018      	beq.n	800858a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a33      	ldr	r2, [pc, #204]	@ (800862c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d013      	beq.n	800858a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a32      	ldr	r2, [pc, #200]	@ (8008630 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d00e      	beq.n	800858a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a30      	ldr	r2, [pc, #192]	@ (8008634 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d009      	beq.n	800858a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a2f      	ldr	r2, [pc, #188]	@ (8008638 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d004      	beq.n	800858a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a2d      	ldr	r2, [pc, #180]	@ (800863c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d101      	bne.n	800858e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800858a:	2301      	movs	r3, #1
 800858c:	e000      	b.n	8008590 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800858e:	2300      	movs	r3, #0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d01a      	beq.n	80085ca <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	b2db      	uxtb	r3, r3
 800859a:	3b08      	subs	r3, #8
 800859c:	4a28      	ldr	r2, [pc, #160]	@ (8008640 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800859e:	fba2 2303 	umull	r2, r3, r2, r3
 80085a2:	091b      	lsrs	r3, r3, #4
 80085a4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80085a6:	68fa      	ldr	r2, [r7, #12]
 80085a8:	4b26      	ldr	r3, [pc, #152]	@ (8008644 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80085aa:	4413      	add	r3, r2
 80085ac:	009b      	lsls	r3, r3, #2
 80085ae:	461a      	mov	r2, r3
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	4a24      	ldr	r2, [pc, #144]	@ (8008648 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80085b8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f003 031f 	and.w	r3, r3, #31
 80085c0:	2201      	movs	r2, #1
 80085c2:	409a      	lsls	r2, r3
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80085c8:	e024      	b.n	8008614 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	3b10      	subs	r3, #16
 80085d2:	4a1e      	ldr	r2, [pc, #120]	@ (800864c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80085d4:	fba2 2303 	umull	r2, r3, r2, r3
 80085d8:	091b      	lsrs	r3, r3, #4
 80085da:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	4a1c      	ldr	r2, [pc, #112]	@ (8008650 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d806      	bhi.n	80085f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	4a1b      	ldr	r2, [pc, #108]	@ (8008654 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d902      	bls.n	80085f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	3308      	adds	r3, #8
 80085f0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80085f2:	68fa      	ldr	r2, [r7, #12]
 80085f4:	4b18      	ldr	r3, [pc, #96]	@ (8008658 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80085f6:	4413      	add	r3, r2
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	461a      	mov	r2, r3
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	4a16      	ldr	r2, [pc, #88]	@ (800865c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008604:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	f003 031f 	and.w	r3, r3, #31
 800860c:	2201      	movs	r2, #1
 800860e:	409a      	lsls	r2, r3
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008614:	bf00      	nop
 8008616:	3714      	adds	r7, #20
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr
 8008620:	58025408 	.word	0x58025408
 8008624:	5802541c 	.word	0x5802541c
 8008628:	58025430 	.word	0x58025430
 800862c:	58025444 	.word	0x58025444
 8008630:	58025458 	.word	0x58025458
 8008634:	5802546c 	.word	0x5802546c
 8008638:	58025480 	.word	0x58025480
 800863c:	58025494 	.word	0x58025494
 8008640:	cccccccd 	.word	0xcccccccd
 8008644:	16009600 	.word	0x16009600
 8008648:	58025880 	.word	0x58025880
 800864c:	aaaaaaab 	.word	0xaaaaaaab
 8008650:	400204b8 	.word	0x400204b8
 8008654:	4002040f 	.word	0x4002040f
 8008658:	10008200 	.word	0x10008200
 800865c:	40020880 	.word	0x40020880

08008660 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008660:	b480      	push	{r7}
 8008662:	b085      	sub	sp, #20
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	b2db      	uxtb	r3, r3
 800866e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d04a      	beq.n	800870c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2b08      	cmp	r3, #8
 800867a:	d847      	bhi.n	800870c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a25      	ldr	r2, [pc, #148]	@ (8008718 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d022      	beq.n	80086cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a24      	ldr	r2, [pc, #144]	@ (800871c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d01d      	beq.n	80086cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a22      	ldr	r2, [pc, #136]	@ (8008720 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d018      	beq.n	80086cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a21      	ldr	r2, [pc, #132]	@ (8008724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d013      	beq.n	80086cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a1f      	ldr	r2, [pc, #124]	@ (8008728 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d00e      	beq.n	80086cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a1e      	ldr	r2, [pc, #120]	@ (800872c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d009      	beq.n	80086cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a1c      	ldr	r2, [pc, #112]	@ (8008730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d004      	beq.n	80086cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a1b      	ldr	r2, [pc, #108]	@ (8008734 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d101      	bne.n	80086d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80086cc:	2301      	movs	r3, #1
 80086ce:	e000      	b.n	80086d2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80086d0:	2300      	movs	r3, #0
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d00a      	beq.n	80086ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80086d6:	68fa      	ldr	r2, [r7, #12]
 80086d8:	4b17      	ldr	r3, [pc, #92]	@ (8008738 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80086da:	4413      	add	r3, r2
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	461a      	mov	r2, r3
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	4a15      	ldr	r2, [pc, #84]	@ (800873c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80086e8:	671a      	str	r2, [r3, #112]	@ 0x70
 80086ea:	e009      	b.n	8008700 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80086ec:	68fa      	ldr	r2, [r7, #12]
 80086ee:	4b14      	ldr	r3, [pc, #80]	@ (8008740 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80086f0:	4413      	add	r3, r2
 80086f2:	009b      	lsls	r3, r3, #2
 80086f4:	461a      	mov	r2, r3
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4a11      	ldr	r2, [pc, #68]	@ (8008744 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80086fe:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	3b01      	subs	r3, #1
 8008704:	2201      	movs	r2, #1
 8008706:	409a      	lsls	r2, r3
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800870c:	bf00      	nop
 800870e:	3714      	adds	r7, #20
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr
 8008718:	58025408 	.word	0x58025408
 800871c:	5802541c 	.word	0x5802541c
 8008720:	58025430 	.word	0x58025430
 8008724:	58025444 	.word	0x58025444
 8008728:	58025458 	.word	0x58025458
 800872c:	5802546c 	.word	0x5802546c
 8008730:	58025480 	.word	0x58025480
 8008734:	58025494 	.word	0x58025494
 8008738:	1600963f 	.word	0x1600963f
 800873c:	58025940 	.word	0x58025940
 8008740:	1000823f 	.word	0x1000823f
 8008744:	40020940 	.word	0x40020940

08008748 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b098      	sub	sp, #96	@ 0x60
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8008750:	4a84      	ldr	r2, [pc, #528]	@ (8008964 <HAL_FDCAN_Init+0x21c>)
 8008752:	f107 030c 	add.w	r3, r7, #12
 8008756:	4611      	mov	r1, r2
 8008758:	224c      	movs	r2, #76	@ 0x4c
 800875a:	4618      	mov	r0, r3
 800875c:	f00c fafd 	bl	8014d5a <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d101      	bne.n	800876a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8008766:	2301      	movs	r3, #1
 8008768:	e1c6      	b.n	8008af8 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a7e      	ldr	r2, [pc, #504]	@ (8008968 <HAL_FDCAN_Init+0x220>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d106      	bne.n	8008782 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800877c:	461a      	mov	r2, r3
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008788:	b2db      	uxtb	r3, r3
 800878a:	2b00      	cmp	r3, #0
 800878c:	d106      	bne.n	800879c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2200      	movs	r2, #0
 8008792:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f7fa ff4a 	bl	8003630 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	699a      	ldr	r2, [r3, #24]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f022 0210 	bic.w	r2, r2, #16
 80087aa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80087ac:	f7fb fd1a 	bl	80041e4 <HAL_GetTick>
 80087b0:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80087b2:	e014      	b.n	80087de <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80087b4:	f7fb fd16 	bl	80041e4 <HAL_GetTick>
 80087b8:	4602      	mov	r2, r0
 80087ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80087bc:	1ad3      	subs	r3, r2, r3
 80087be:	2b0a      	cmp	r3, #10
 80087c0:	d90d      	bls.n	80087de <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80087c8:	f043 0201 	orr.w	r2, r3, #1
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2203      	movs	r2, #3
 80087d6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80087da:	2301      	movs	r3, #1
 80087dc:	e18c      	b.n	8008af8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	699b      	ldr	r3, [r3, #24]
 80087e4:	f003 0308 	and.w	r3, r3, #8
 80087e8:	2b08      	cmp	r3, #8
 80087ea:	d0e3      	beq.n	80087b4 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	699a      	ldr	r2, [r3, #24]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f042 0201 	orr.w	r2, r2, #1
 80087fa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80087fc:	f7fb fcf2 	bl	80041e4 <HAL_GetTick>
 8008800:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8008802:	e014      	b.n	800882e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008804:	f7fb fcee 	bl	80041e4 <HAL_GetTick>
 8008808:	4602      	mov	r2, r0
 800880a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800880c:	1ad3      	subs	r3, r2, r3
 800880e:	2b0a      	cmp	r3, #10
 8008810:	d90d      	bls.n	800882e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008818:	f043 0201 	orr.w	r2, r3, #1
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2203      	movs	r2, #3
 8008826:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	e164      	b.n	8008af8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	699b      	ldr	r3, [r3, #24]
 8008834:	f003 0301 	and.w	r3, r3, #1
 8008838:	2b00      	cmp	r3, #0
 800883a:	d0e3      	beq.n	8008804 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	699a      	ldr	r2, [r3, #24]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f042 0202 	orr.w	r2, r2, #2
 800884a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	7c1b      	ldrb	r3, [r3, #16]
 8008850:	2b01      	cmp	r3, #1
 8008852:	d108      	bne.n	8008866 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	699a      	ldr	r2, [r3, #24]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008862:	619a      	str	r2, [r3, #24]
 8008864:	e007      	b.n	8008876 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	699a      	ldr	r2, [r3, #24]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008874:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	7c5b      	ldrb	r3, [r3, #17]
 800887a:	2b01      	cmp	r3, #1
 800887c:	d108      	bne.n	8008890 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	699a      	ldr	r2, [r3, #24]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800888c:	619a      	str	r2, [r3, #24]
 800888e:	e007      	b.n	80088a0 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	699a      	ldr	r2, [r3, #24]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800889e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	7c9b      	ldrb	r3, [r3, #18]
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d108      	bne.n	80088ba <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	699a      	ldr	r2, [r3, #24]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80088b6:	619a      	str	r2, [r3, #24]
 80088b8:	e007      	b.n	80088ca <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	699a      	ldr	r2, [r3, #24]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80088c8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	699b      	ldr	r3, [r3, #24]
 80088d0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	689a      	ldr	r2, [r3, #8]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	430a      	orrs	r2, r1
 80088de:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	699a      	ldr	r2, [r3, #24]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80088ee:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	691a      	ldr	r2, [r3, #16]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f022 0210 	bic.w	r2, r2, #16
 80088fe:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	68db      	ldr	r3, [r3, #12]
 8008904:	2b01      	cmp	r3, #1
 8008906:	d108      	bne.n	800891a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	699a      	ldr	r2, [r3, #24]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f042 0204 	orr.w	r2, r2, #4
 8008916:	619a      	str	r2, [r3, #24]
 8008918:	e030      	b.n	800897c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	68db      	ldr	r3, [r3, #12]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d02c      	beq.n	800897c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	68db      	ldr	r3, [r3, #12]
 8008926:	2b02      	cmp	r3, #2
 8008928:	d020      	beq.n	800896c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	699a      	ldr	r2, [r3, #24]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008938:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	691a      	ldr	r2, [r3, #16]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f042 0210 	orr.w	r2, r2, #16
 8008948:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	68db      	ldr	r3, [r3, #12]
 800894e:	2b03      	cmp	r3, #3
 8008950:	d114      	bne.n	800897c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	699a      	ldr	r2, [r3, #24]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f042 0220 	orr.w	r2, r2, #32
 8008960:	619a      	str	r2, [r3, #24]
 8008962:	e00b      	b.n	800897c <HAL_FDCAN_Init+0x234>
 8008964:	08018814 	.word	0x08018814
 8008968:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	699a      	ldr	r2, [r3, #24]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f042 0220 	orr.w	r2, r2, #32
 800897a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	699b      	ldr	r3, [r3, #24]
 8008980:	3b01      	subs	r3, #1
 8008982:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	69db      	ldr	r3, [r3, #28]
 8008988:	3b01      	subs	r3, #1
 800898a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800898c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6a1b      	ldr	r3, [r3, #32]
 8008992:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008994:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	695b      	ldr	r3, [r3, #20]
 800899c:	3b01      	subs	r3, #1
 800899e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80089a4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80089a6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80089b0:	d115      	bne.n	80089de <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089b6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089bc:	3b01      	subs	r3, #1
 80089be:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80089c0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089c6:	3b01      	subs	r3, #1
 80089c8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80089ca:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089d2:	3b01      	subs	r3, #1
 80089d4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80089da:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80089dc:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d00a      	beq.n	80089fc <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	430a      	orrs	r2, r1
 80089f8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a04:	4413      	add	r3, r2
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d011      	beq.n	8008a2e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8008a12:	f023 0107 	bic.w	r1, r3, #7
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a1a:	009b      	lsls	r3, r3, #2
 8008a1c:	3360      	adds	r3, #96	@ 0x60
 8008a1e:	443b      	add	r3, r7
 8008a20:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	430a      	orrs	r2, r1
 8008a2a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d011      	beq.n	8008a5a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008a3e:	f023 0107 	bic.w	r1, r3, #7
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	3360      	adds	r3, #96	@ 0x60
 8008a4a:	443b      	add	r3, r7
 8008a4c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	430a      	orrs	r2, r1
 8008a56:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d012      	beq.n	8008a88 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008a6a:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	3360      	adds	r3, #96	@ 0x60
 8008a76:	443b      	add	r3, r7
 8008a78:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8008a7c:	011a      	lsls	r2, r3, #4
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	430a      	orrs	r2, r1
 8008a84:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d012      	beq.n	8008ab6 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008a98:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	3360      	adds	r3, #96	@ 0x60
 8008aa4:	443b      	add	r3, r7
 8008aa6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8008aaa:	021a      	lsls	r2, r3, #8
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	430a      	orrs	r2, r1
 8008ab2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a11      	ldr	r2, [pc, #68]	@ (8008b00 <HAL_FDCAN_Init+0x3b8>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d107      	bne.n	8008ad0 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	689a      	ldr	r2, [r3, #8]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	f022 0203 	bic.w	r2, r2, #3
 8008ace:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2200      	movs	r2, #0
 8008adc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 fe3b 	bl	8009764 <FDCAN_CalcultateRamBlockAddresses>
 8008aee:	4603      	mov	r3, r0
 8008af0:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8008af4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3760      	adds	r7, #96	@ 0x60
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}
 8008b00:	4000a000 	.word	0x4000a000

08008b04 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b087      	sub	sp, #28
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008b14:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8008b16:	7bfb      	ldrb	r3, [r7, #15]
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d002      	beq.n	8008b22 <HAL_FDCAN_ConfigFilter+0x1e>
 8008b1c:	7bfb      	ldrb	r3, [r7, #15]
 8008b1e:	2b02      	cmp	r3, #2
 8008b20:	d157      	bne.n	8008bd2 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d12b      	bne.n	8008b82 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	68db      	ldr	r3, [r3, #12]
 8008b2e:	2b07      	cmp	r3, #7
 8008b30:	d10d      	bne.n	8008b4e <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	691b      	ldr	r3, [r3, #16]
 8008b36:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	69db      	ldr	r3, [r3, #28]
 8008b3c:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8008b3e:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8008b44:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8008b46:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 8008b4a:	617b      	str	r3, [r7, #20]
 8008b4c:	e00e      	b.n	8008b6c <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	689b      	ldr	r3, [r3, #8]
 8008b52:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	68db      	ldr	r3, [r3, #12]
 8008b58:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8008b5a:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	691b      	ldr	r3, [r3, #16]
 8008b60:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8008b62:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	009b      	lsls	r3, r3, #2
 8008b76:	4413      	add	r3, r2
 8008b78:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	697a      	ldr	r2, [r7, #20]
 8008b7e:	601a      	str	r2, [r3, #0]
 8008b80:	e025      	b.n	8008bce <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	68db      	ldr	r3, [r3, #12]
 8008b86:	075a      	lsls	r2, r3, #29
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	691b      	ldr	r3, [r3, #16]
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	68db      	ldr	r3, [r3, #12]
 8008b94:	2b07      	cmp	r3, #7
 8008b96:	d103      	bne.n	8008ba0 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	699b      	ldr	r3, [r3, #24]
 8008b9c:	613b      	str	r3, [r7, #16]
 8008b9e:	e006      	b.n	8008bae <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	079a      	lsls	r2, r3, #30
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	695b      	ldr	r3, [r3, #20]
 8008baa:	4313      	orrs	r3, r2
 8008bac:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	00db      	lsls	r3, r3, #3
 8008bb8:	4413      	add	r3, r2
 8008bba:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	697a      	ldr	r2, [r7, #20]
 8008bc0:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	3304      	adds	r3, #4
 8008bc6:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	693a      	ldr	r2, [r7, #16]
 8008bcc:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	e008      	b.n	8008be4 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008bd8:	f043 0202 	orr.w	r2, r3, #2
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8008be2:	2301      	movs	r3, #1
  }
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	371c      	adds	r7, #28
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr

08008bf0 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b083      	sub	sp, #12
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d111      	bne.n	8008c28 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2202      	movs	r2, #2
 8008c08:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	699a      	ldr	r2, [r3, #24]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f022 0201 	bic.w	r2, r2, #1
 8008c1a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8008c24:	2300      	movs	r3, #0
 8008c26:	e008      	b.n	8008c3a <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008c2e:	f043 0204 	orr.w	r2, r3, #4
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8008c38:	2301      	movs	r3, #1
  }
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	370c      	adds	r7, #12
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr

08008c46 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8008c46:	b580      	push	{r7, lr}
 8008c48:	b086      	sub	sp, #24
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	60f8      	str	r0, [r7, #12]
 8008c4e:	60b9      	str	r1, [r7, #8]
 8008c50:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	2b02      	cmp	r3, #2
 8008c5c:	d141      	bne.n	8008ce2 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008c66:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d109      	bne.n	8008c82 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008c74:	f043 0220 	orr.w	r2, r3, #32
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	e038      	b.n	8008cf4 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008c8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d009      	beq.n	8008ca6 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008c98:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	e026      	b.n	8008cf4 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008cae:	0c1b      	lsrs	r3, r3, #16
 8008cb0:	f003 031f 	and.w	r3, r3, #31
 8008cb4:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	68b9      	ldr	r1, [r7, #8]
 8008cbc:	68f8      	ldr	r0, [r7, #12]
 8008cbe:	f000 fed7 	bl	8009a70 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	2101      	movs	r1, #1
 8008cc8:	697a      	ldr	r2, [r7, #20]
 8008cca:	fa01 f202 	lsl.w	r2, r1, r2
 8008cce:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	409a      	lsls	r2, r3
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	e008      	b.n	8008cf4 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008ce8:	f043 0208 	orr.w	r2, r3, #8
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8008cf2:	2301      	movs	r3, #1
  }
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3718      	adds	r7, #24
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b08b      	sub	sp, #44	@ 0x2c
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	60b9      	str	r1, [r7, #8]
 8008d06:	607a      	str	r2, [r7, #4]
 8008d08:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008d14:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8008d16:	7efb      	ldrb	r3, [r7, #27]
 8008d18:	2b02      	cmp	r3, #2
 8008d1a:	f040 8149 	bne.w	8008fb0 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	2b40      	cmp	r3, #64	@ 0x40
 8008d22:	d14c      	bne.n	8008dbe <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008d2c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d109      	bne.n	8008d48 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008d3a:	f043 0220 	orr.w	r2, r3, #32
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8008d44:	2301      	movs	r3, #1
 8008d46:	e13c      	b.n	8008fc2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008d50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d109      	bne.n	8008d6c <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008d5e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	e12a      	b.n	8008fc2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008d74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008d78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008d7c:	d10a      	bne.n	8008d94 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008d86:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d8e:	d101      	bne.n	8008d94 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8008d90:	2301      	movs	r3, #1
 8008d92:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008d9c:	0a1b      	lsrs	r3, r3, #8
 8008d9e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008da2:	69fa      	ldr	r2, [r7, #28]
 8008da4:	4413      	add	r3, r2
 8008da6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008db0:	69f9      	ldr	r1, [r7, #28]
 8008db2:	fb01 f303 	mul.w	r3, r1, r3
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	4413      	add	r3, r2
 8008dba:	627b      	str	r3, [r7, #36]	@ 0x24
 8008dbc:	e068      	b.n	8008e90 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	2b41      	cmp	r3, #65	@ 0x41
 8008dc2:	d14c      	bne.n	8008e5e <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008dcc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d109      	bne.n	8008de8 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008dda:	f043 0220 	orr.w	r2, r3, #32
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8008de4:	2301      	movs	r3, #1
 8008de6:	e0ec      	b.n	8008fc2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008df0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d109      	bne.n	8008e0c <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008dfe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	e0da      	b.n	8008fc2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008e14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008e18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008e1c:	d10a      	bne.n	8008e34 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008e26:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008e2a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e2e:	d101      	bne.n	8008e34 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8008e30:	2301      	movs	r3, #1
 8008e32:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008e3c:	0a1b      	lsrs	r3, r3, #8
 8008e3e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008e42:	69fa      	ldr	r2, [r7, #28]
 8008e44:	4413      	add	r3, r2
 8008e46:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e50:	69f9      	ldr	r1, [r7, #28]
 8008e52:	fb01 f303 	mul.w	r3, r1, r3
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	4413      	add	r3, r2
 8008e5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e5c:	e018      	b.n	8008e90 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e62:	68ba      	ldr	r2, [r7, #8]
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d309      	bcc.n	8008e7c <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008e6e:	f043 0220 	orr.w	r2, r3, #32
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	e0a2      	b.n	8008fc2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e84:	68b9      	ldr	r1, [r7, #8]
 8008e86:	fb01 f303 	mul.w	r3, r1, r3
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	4413      	add	r3, r2
 8008e8e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8008e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d107      	bne.n	8008eb4 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8008ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	0c9b      	lsrs	r3, r3, #18
 8008eaa:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	601a      	str	r2, [r3, #0]
 8008eb2:	e005      	b.n	8008ec0 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8008eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8008ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8008ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8008ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eda:	3304      	adds	r3, #4
 8008edc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8008ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	b29a      	uxth	r2, r3
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8008ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	0c1b      	lsrs	r3, r3, #16
 8008eee:	f003 020f 	and.w	r2, r3, #15
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8008ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8008f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8008f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	0e1b      	lsrs	r3, r3, #24
 8008f14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8008f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	0fda      	lsrs	r2, r3, #31
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8008f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f28:	3304      	adds	r3, #4
 8008f2a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8008f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f2e:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8008f30:	2300      	movs	r3, #0
 8008f32:	623b      	str	r3, [r7, #32]
 8008f34:	e00a      	b.n	8008f4c <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8008f36:	697a      	ldr	r2, [r7, #20]
 8008f38:	6a3b      	ldr	r3, [r7, #32]
 8008f3a:	441a      	add	r2, r3
 8008f3c:	6839      	ldr	r1, [r7, #0]
 8008f3e:	6a3b      	ldr	r3, [r7, #32]
 8008f40:	440b      	add	r3, r1
 8008f42:	7812      	ldrb	r2, [r2, #0]
 8008f44:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8008f46:	6a3b      	ldr	r3, [r7, #32]
 8008f48:	3301      	adds	r3, #1
 8008f4a:	623b      	str	r3, [r7, #32]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	68db      	ldr	r3, [r3, #12]
 8008f50:	4a1f      	ldr	r2, [pc, #124]	@ (8008fd0 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8008f52:	5cd3      	ldrb	r3, [r2, r3]
 8008f54:	461a      	mov	r2, r3
 8008f56:	6a3b      	ldr	r3, [r7, #32]
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d3ec      	bcc.n	8008f36 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	2b40      	cmp	r3, #64	@ 0x40
 8008f60:	d105      	bne.n	8008f6e <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	69fa      	ldr	r2, [r7, #28]
 8008f68:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8008f6c:	e01e      	b.n	8008fac <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	2b41      	cmp	r3, #65	@ 0x41
 8008f72:	d105      	bne.n	8008f80 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	69fa      	ldr	r2, [r7, #28]
 8008f7a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8008f7e:	e015      	b.n	8008fac <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	2b1f      	cmp	r3, #31
 8008f84:	d808      	bhi.n	8008f98 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	2101      	movs	r1, #1
 8008f8c:	68ba      	ldr	r2, [r7, #8]
 8008f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8008f92:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8008f96:	e009      	b.n	8008fac <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	f003 021f 	and.w	r2, r3, #31
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	2101      	movs	r1, #1
 8008fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8008fa8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8008fac:	2300      	movs	r3, #0
 8008fae:	e008      	b.n	8008fc2 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008fb6:	f043 0208 	orr.w	r2, r3, #8
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8008fc0:	2301      	movs	r3, #1
  }
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	372c      	adds	r7, #44	@ 0x2c
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fcc:	4770      	bx	lr
 8008fce:	bf00      	nop
 8008fd0:	08018878 	.word	0x08018878

08008fd4 <HAL_FDCAN_GetProtocolStatus>:
  * @param  ProtocolStatus pointer to an FDCAN_ProtocolStatusTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetProtocolStatus(const FDCAN_HandleTypeDef *hfdcan,
                                              FDCAN_ProtocolStatusTypeDef *ProtocolStatus)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b085      	sub	sp, #20
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	6039      	str	r1, [r7, #0]
  uint32_t StatusReg;

  /* Read the protocol status register */
  StatusReg = READ_REG(hfdcan->Instance->PSR);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fe4:	60fb      	str	r3, [r7, #12]

  /* Fill the protocol status structure */
  ProtocolStatus->LastErrorCode = (StatusReg & FDCAN_PSR_LEC);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	f003 0207 	and.w	r2, r3, #7
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	601a      	str	r2, [r3, #0]
  ProtocolStatus->DataLastErrorCode = ((StatusReg & FDCAN_PSR_DLEC) >> FDCAN_PSR_DLEC_Pos);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	0a1b      	lsrs	r3, r3, #8
 8008ff4:	f003 0207 	and.w	r2, r3, #7
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	605a      	str	r2, [r3, #4]
  ProtocolStatus->Activity = (StatusReg & FDCAN_PSR_ACT);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f003 0218 	and.w	r2, r3, #24
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	609a      	str	r2, [r3, #8]
  ProtocolStatus->ErrorPassive = ((StatusReg & FDCAN_PSR_EP) >> FDCAN_PSR_EP_Pos);
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	095b      	lsrs	r3, r3, #5
 800900a:	f003 0201 	and.w	r2, r3, #1
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	60da      	str	r2, [r3, #12]
  ProtocolStatus->Warning = ((StatusReg & FDCAN_PSR_EW) >> FDCAN_PSR_EW_Pos);
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	099b      	lsrs	r3, r3, #6
 8009016:	f003 0201 	and.w	r2, r3, #1
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	611a      	str	r2, [r3, #16]
  ProtocolStatus->BusOff = ((StatusReg & FDCAN_PSR_BO) >> FDCAN_PSR_BO_Pos);
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	09db      	lsrs	r3, r3, #7
 8009022:	f003 0201 	and.w	r2, r3, #1
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	615a      	str	r2, [r3, #20]
  ProtocolStatus->RxESIflag = ((StatusReg & FDCAN_PSR_RESI) >> FDCAN_PSR_RESI_Pos);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	0adb      	lsrs	r3, r3, #11
 800902e:	f003 0201 	and.w	r2, r3, #1
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	619a      	str	r2, [r3, #24]
  ProtocolStatus->RxBRSflag = ((StatusReg & FDCAN_PSR_RBRS) >> FDCAN_PSR_RBRS_Pos);
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	0b1b      	lsrs	r3, r3, #12
 800903a:	f003 0201 	and.w	r2, r3, #1
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	61da      	str	r2, [r3, #28]
  ProtocolStatus->RxFDFflag = ((StatusReg & FDCAN_PSR_REDL) >> FDCAN_PSR_REDL_Pos);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	0b5b      	lsrs	r3, r3, #13
 8009046:	f003 0201 	and.w	r2, r3, #1
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	621a      	str	r2, [r3, #32]
  ProtocolStatus->ProtocolException = ((StatusReg & FDCAN_PSR_PXE) >> FDCAN_PSR_PXE_Pos);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	0b9b      	lsrs	r3, r3, #14
 8009052:	f003 0201 	and.w	r2, r3, #1
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	625a      	str	r2, [r3, #36]	@ 0x24
  ProtocolStatus->TDCvalue = ((StatusReg & FDCAN_PSR_TDCV) >> FDCAN_PSR_TDCV_Pos);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	0c1b      	lsrs	r3, r3, #16
 800905e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Return function status */
  return HAL_OK;
 8009066:	2300      	movs	r3, #0
}
 8009068:	4618      	mov	r0, r3
 800906a:	3714      	adds	r7, #20
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr

08009074 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8009074:	b480      	push	{r7}
 8009076:	b087      	sub	sp, #28
 8009078:	af00      	add	r7, sp, #0
 800907a:	60f8      	str	r0, [r7, #12]
 800907c:	60b9      	str	r1, [r7, #8]
 800907e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009086:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8009088:	7dfb      	ldrb	r3, [r7, #23]
 800908a:	2b01      	cmp	r3, #1
 800908c:	d002      	beq.n	8009094 <HAL_FDCAN_ActivateNotification+0x20>
 800908e:	7dfb      	ldrb	r3, [r7, #23]
 8009090:	2b02      	cmp	r3, #2
 8009092:	d155      	bne.n	8009140 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	4013      	ands	r3, r2
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d108      	bne.n	80090b4 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f042 0201 	orr.w	r2, r2, #1
 80090b0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80090b2:	e014      	b.n	80090de <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	4013      	ands	r3, r2
 80090be:	68ba      	ldr	r2, [r7, #8]
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d108      	bne.n	80090d6 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f042 0202 	orr.w	r2, r2, #2
 80090d2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80090d4:	e003      	b.n	80090de <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	2203      	movs	r2, #3
 80090dc:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d009      	beq.n	80090fc <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	430a      	orrs	r2, r1
 80090f8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009102:	2b00      	cmp	r3, #0
 8009104:	d009      	beq.n	800911a <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	430a      	orrs	r2, r1
 8009116:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009120:	68ba      	ldr	r2, [r7, #8]
 8009122:	4b0f      	ldr	r3, [pc, #60]	@ (8009160 <HAL_FDCAN_ActivateNotification+0xec>)
 8009124:	4013      	ands	r3, r2
 8009126:	68fa      	ldr	r2, [r7, #12]
 8009128:	6812      	ldr	r2, [r2, #0]
 800912a:	430b      	orrs	r3, r1
 800912c:	6553      	str	r3, [r2, #84]	@ 0x54
 800912e:	4b0d      	ldr	r3, [pc, #52]	@ (8009164 <HAL_FDCAN_ActivateNotification+0xf0>)
 8009130:	695a      	ldr	r2, [r3, #20]
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	0f9b      	lsrs	r3, r3, #30
 8009136:	490b      	ldr	r1, [pc, #44]	@ (8009164 <HAL_FDCAN_ActivateNotification+0xf0>)
 8009138:	4313      	orrs	r3, r2
 800913a:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 800913c:	2300      	movs	r3, #0
 800913e:	e008      	b.n	8009152 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009146:	f043 0202 	orr.w	r2, r3, #2
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8009150:	2301      	movs	r3, #1
  }
}
 8009152:	4618      	mov	r0, r3
 8009154:	371c      	adds	r7, #28
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr
 800915e:	bf00      	nop
 8009160:	3fcfffff 	.word	0x3fcfffff
 8009164:	4000a800 	.word	0x4000a800

08009168 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b096      	sub	sp, #88	@ 0x58
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8009170:	4b9a      	ldr	r3, [pc, #616]	@ (80093dc <HAL_FDCAN_IRQHandler+0x274>)
 8009172:	691b      	ldr	r3, [r3, #16]
 8009174:	079b      	lsls	r3, r3, #30
 8009176:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8009178:	4b98      	ldr	r3, [pc, #608]	@ (80093dc <HAL_FDCAN_IRQHandler+0x274>)
 800917a:	695b      	ldr	r3, [r3, #20]
 800917c:	079b      	lsls	r3, r3, #30
 800917e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009180:	4013      	ands	r3, r2
 8009182:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800918a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800918e:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009196:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009198:	4013      	ands	r3, r2
 800919a:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091a2:	f003 030f 	and.w	r3, r3, #15
 80091a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80091b0:	4013      	ands	r3, r2
 80091b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80091be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80091c8:	4013      	ands	r3, r2
 80091ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091d2:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 80091d6:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80091e0:	4013      	ands	r3, r2
 80091e2:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091ea:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 80091ee:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80091f8:	4013      	ands	r3, r2
 80091fa:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009202:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800920a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800920c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800920e:	0a1b      	lsrs	r3, r3, #8
 8009210:	f003 0301 	and.w	r3, r3, #1
 8009214:	2b00      	cmp	r3, #0
 8009216:	d010      	beq.n	800923a <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8009218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800921a:	0a1b      	lsrs	r3, r3, #8
 800921c:	f003 0301 	and.w	r3, r3, #1
 8009220:	2b00      	cmp	r3, #0
 8009222:	d00a      	beq.n	800923a <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800922c:	651a      	str	r2, [r3, #80]	@ 0x50
 800922e:	4b6b      	ldr	r3, [pc, #428]	@ (80093dc <HAL_FDCAN_IRQHandler+0x274>)
 8009230:	2200      	movs	r2, #0
 8009232:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f000 fa54 	bl	80096e2 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800923a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800923c:	0a9b      	lsrs	r3, r3, #10
 800923e:	f003 0301 	and.w	r3, r3, #1
 8009242:	2b00      	cmp	r3, #0
 8009244:	d01d      	beq.n	8009282 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8009246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009248:	0a9b      	lsrs	r3, r3, #10
 800924a:	f003 0301 	and.w	r3, r3, #1
 800924e:	2b00      	cmp	r3, #0
 8009250:	d017      	beq.n	8009282 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800925a:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009264:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009266:	4013      	ands	r3, r2
 8009268:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009272:	651a      	str	r2, [r3, #80]	@ 0x50
 8009274:	4b59      	ldr	r3, [pc, #356]	@ (80093dc <HAL_FDCAN_IRQHandler+0x274>)
 8009276:	2200      	movs	r2, #0
 8009278:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800927a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f000 fa07 	bl	8009690 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8009282:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009284:	2b00      	cmp	r3, #0
 8009286:	d00d      	beq.n	80092a4 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800928e:	4b54      	ldr	r3, [pc, #336]	@ (80093e0 <HAL_FDCAN_IRQHandler+0x278>)
 8009290:	400b      	ands	r3, r1
 8009292:	6513      	str	r3, [r2, #80]	@ 0x50
 8009294:	4a51      	ldr	r2, [pc, #324]	@ (80093dc <HAL_FDCAN_IRQHandler+0x274>)
 8009296:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009298:	0f9b      	lsrs	r3, r3, #30
 800929a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 800929c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f000 f9c0 	bl	8009624 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80092a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d00d      	beq.n	80092c6 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681a      	ldr	r2, [r3, #0]
 80092ae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80092b0:	4b4b      	ldr	r3, [pc, #300]	@ (80093e0 <HAL_FDCAN_IRQHandler+0x278>)
 80092b2:	400b      	ands	r3, r1
 80092b4:	6513      	str	r3, [r2, #80]	@ 0x50
 80092b6:	4a49      	ldr	r2, [pc, #292]	@ (80093dc <HAL_FDCAN_IRQHandler+0x274>)
 80092b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80092ba:	0f9b      	lsrs	r3, r3, #30
 80092bc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80092be:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f000 f9ba 	bl	800963a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80092c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d00d      	beq.n	80092e8 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681a      	ldr	r2, [r3, #0]
 80092d0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80092d2:	4b43      	ldr	r3, [pc, #268]	@ (80093e0 <HAL_FDCAN_IRQHandler+0x278>)
 80092d4:	400b      	ands	r3, r1
 80092d6:	6513      	str	r3, [r2, #80]	@ 0x50
 80092d8:	4a40      	ldr	r2, [pc, #256]	@ (80093dc <HAL_FDCAN_IRQHandler+0x274>)
 80092da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092dc:	0f9b      	lsrs	r3, r3, #30
 80092de:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80092e0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f7f8 fe14 	bl	8001f10 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80092e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d00d      	beq.n	800930a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681a      	ldr	r2, [r3, #0]
 80092f2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80092f4:	4b3a      	ldr	r3, [pc, #232]	@ (80093e0 <HAL_FDCAN_IRQHandler+0x278>)
 80092f6:	400b      	ands	r3, r1
 80092f8:	6513      	str	r3, [r2, #80]	@ 0x50
 80092fa:	4a38      	ldr	r2, [pc, #224]	@ (80093dc <HAL_FDCAN_IRQHandler+0x274>)
 80092fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80092fe:	0f9b      	lsrs	r3, r3, #30
 8009300:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8009302:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 f9a3 	bl	8009650 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800930a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800930c:	0adb      	lsrs	r3, r3, #11
 800930e:	f003 0301 	and.w	r3, r3, #1
 8009312:	2b00      	cmp	r3, #0
 8009314:	d010      	beq.n	8009338 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8009316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009318:	0adb      	lsrs	r3, r3, #11
 800931a:	f003 0301 	and.w	r3, r3, #1
 800931e:	2b00      	cmp	r3, #0
 8009320:	d00a      	beq.n	8009338 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800932a:	651a      	str	r2, [r3, #80]	@ 0x50
 800932c:	4b2b      	ldr	r3, [pc, #172]	@ (80093dc <HAL_FDCAN_IRQHandler+0x274>)
 800932e:	2200      	movs	r2, #0
 8009330:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 f997 	bl	8009666 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8009338:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800933a:	0a5b      	lsrs	r3, r3, #9
 800933c:	f003 0301 	and.w	r3, r3, #1
 8009340:	2b00      	cmp	r3, #0
 8009342:	d01d      	beq.n	8009380 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8009344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009346:	0a5b      	lsrs	r3, r3, #9
 8009348:	f003 0301 	and.w	r3, r3, #1
 800934c:	2b00      	cmp	r3, #0
 800934e:	d017      	beq.n	8009380 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009358:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009362:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009364:	4013      	ands	r3, r2
 8009366:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009370:	651a      	str	r2, [r3, #80]	@ 0x50
 8009372:	4b1a      	ldr	r3, [pc, #104]	@ (80093dc <HAL_FDCAN_IRQHandler+0x274>)
 8009374:	2200      	movs	r2, #0
 8009376:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8009378:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 f97d 	bl	800967a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8009380:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009382:	0cdb      	lsrs	r3, r3, #19
 8009384:	f003 0301 	and.w	r3, r3, #1
 8009388:	2b00      	cmp	r3, #0
 800938a:	d010      	beq.n	80093ae <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 800938c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800938e:	0cdb      	lsrs	r3, r3, #19
 8009390:	f003 0301 	and.w	r3, r3, #1
 8009394:	2b00      	cmp	r3, #0
 8009396:	d00a      	beq.n	80093ae <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80093a0:	651a      	str	r2, [r3, #80]	@ 0x50
 80093a2:	4b0e      	ldr	r3, [pc, #56]	@ (80093dc <HAL_FDCAN_IRQHandler+0x274>)
 80093a4:	2200      	movs	r2, #0
 80093a6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f000 f97c 	bl	80096a6 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80093ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093b0:	0c1b      	lsrs	r3, r3, #16
 80093b2:	f003 0301 	and.w	r3, r3, #1
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d016      	beq.n	80093e8 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80093ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093bc:	0c1b      	lsrs	r3, r3, #16
 80093be:	f003 0301 	and.w	r3, r3, #1
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d010      	beq.n	80093e8 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80093ce:	651a      	str	r2, [r3, #80]	@ 0x50
 80093d0:	4b02      	ldr	r3, [pc, #8]	@ (80093dc <HAL_FDCAN_IRQHandler+0x274>)
 80093d2:	2200      	movs	r2, #0
 80093d4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	e004      	b.n	80093e4 <HAL_FDCAN_IRQHandler+0x27c>
 80093da:	bf00      	nop
 80093dc:	4000a800 	.word	0x4000a800
 80093e0:	3fcfffff 	.word	0x3fcfffff
 80093e4:	f000 f969 	bl	80096ba <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80093e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093ea:	0c9b      	lsrs	r3, r3, #18
 80093ec:	f003 0301 	and.w	r3, r3, #1
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d010      	beq.n	8009416 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80093f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093f6:	0c9b      	lsrs	r3, r3, #18
 80093f8:	f003 0301 	and.w	r3, r3, #1
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d00a      	beq.n	8009416 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8009408:	651a      	str	r2, [r3, #80]	@ 0x50
 800940a:	4b83      	ldr	r3, [pc, #524]	@ (8009618 <HAL_FDCAN_IRQHandler+0x4b0>)
 800940c:	2200      	movs	r2, #0
 800940e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f000 f95c 	bl	80096ce <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8009416:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009418:	0c5b      	lsrs	r3, r3, #17
 800941a:	f003 0301 	and.w	r3, r3, #1
 800941e:	2b00      	cmp	r3, #0
 8009420:	d015      	beq.n	800944e <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8009422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009424:	0c5b      	lsrs	r3, r3, #17
 8009426:	f003 0301 	and.w	r3, r3, #1
 800942a:	2b00      	cmp	r3, #0
 800942c:	d00f      	beq.n	800944e <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8009436:	651a      	str	r2, [r3, #80]	@ 0x50
 8009438:	4b77      	ldr	r3, [pc, #476]	@ (8009618 <HAL_FDCAN_IRQHandler+0x4b0>)
 800943a:	2200      	movs	r2, #0
 800943c:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009444:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800944e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009450:	2b00      	cmp	r3, #0
 8009452:	d00d      	beq.n	8009470 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681a      	ldr	r2, [r3, #0]
 8009458:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800945a:	4b70      	ldr	r3, [pc, #448]	@ (800961c <HAL_FDCAN_IRQHandler+0x4b4>)
 800945c:	400b      	ands	r3, r1
 800945e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009460:	4a6d      	ldr	r2, [pc, #436]	@ (8009618 <HAL_FDCAN_IRQHandler+0x4b0>)
 8009462:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009464:	0f9b      	lsrs	r3, r3, #30
 8009466:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8009468:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f7f8 fe96 	bl	800219c <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8009470:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009472:	2b00      	cmp	r3, #0
 8009474:	d011      	beq.n	800949a <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800947c:	4b67      	ldr	r3, [pc, #412]	@ (800961c <HAL_FDCAN_IRQHandler+0x4b4>)
 800947e:	400b      	ands	r3, r1
 8009480:	6513      	str	r3, [r2, #80]	@ 0x50
 8009482:	4a65      	ldr	r2, [pc, #404]	@ (8009618 <HAL_FDCAN_IRQHandler+0x4b0>)
 8009484:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009486:	0f9b      	lsrs	r3, r3, #30
 8009488:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8009490:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009492:	431a      	orrs	r2, r3
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4a60      	ldr	r2, [pc, #384]	@ (8009620 <HAL_FDCAN_IRQHandler+0x4b8>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	f040 80ac 	bne.w	80095fe <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	f003 0303 	and.w	r3, r3, #3
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	f000 80a4 	beq.w	80095fe <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	6a1b      	ldr	r3, [r3, #32]
 80094bc:	f003 030f 	and.w	r3, r3, #15
 80094c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80094ca:	4013      	ands	r3, r2
 80094cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	6a1b      	ldr	r3, [r3, #32]
 80094d4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80094d8:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80094e2:	4013      	ands	r3, r2
 80094e4:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	685b      	ldr	r3, [r3, #4]
 80094ea:	6a1b      	ldr	r3, [r3, #32]
 80094ec:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80094f0:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094fa:	4013      	ands	r3, r2
 80094fc:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	6a1b      	ldr	r3, [r3, #32]
 8009504:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8009508:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	685b      	ldr	r3, [r3, #4]
 800950e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009510:	6a3a      	ldr	r2, [r7, #32]
 8009512:	4013      	ands	r3, r2
 8009514:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	6a1b      	ldr	r3, [r3, #32]
 800951c:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8009520:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	685b      	ldr	r3, [r3, #4]
 8009526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009528:	69fa      	ldr	r2, [r7, #28]
 800952a:	4013      	ands	r3, r2
 800952c:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	685b      	ldr	r3, [r3, #4]
 8009532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009534:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	6a1b      	ldr	r3, [r3, #32]
 800953c:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 800953e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009540:	2b00      	cmp	r3, #0
 8009542:	d007      	beq.n	8009554 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800954a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 800954c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 f8db 	bl	800970a <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8009554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009556:	2b00      	cmp	r3, #0
 8009558:	d007      	beq.n	800956a <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009560:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8009562:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 f8db 	bl	8009720 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 800956a:	69bb      	ldr	r3, [r7, #24]
 800956c:	099b      	lsrs	r3, r3, #6
 800956e:	f003 0301 	and.w	r3, r3, #1
 8009572:	2b00      	cmp	r3, #0
 8009574:	d01a      	beq.n	80095ac <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	099b      	lsrs	r3, r3, #6
 800957a:	f003 0301 	and.w	r3, r3, #1
 800957e:	2b00      	cmp	r3, #0
 8009580:	d014      	beq.n	80095ac <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009588:	0c1b      	lsrs	r3, r3, #16
 800958a:	b29b      	uxth	r3, r3
 800958c:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	685b      	ldr	r3, [r3, #4]
 8009592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009594:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009598:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	2240      	movs	r2, #64	@ 0x40
 80095a0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80095a2:	68fa      	ldr	r2, [r7, #12]
 80095a4:	6939      	ldr	r1, [r7, #16]
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 f8c5 	bl	8009736 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 80095ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d007      	beq.n	80095c2 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	685b      	ldr	r3, [r3, #4]
 80095b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095b8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80095ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f000 f8c6 	bl	800974e <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80095c2:	6a3b      	ldr	r3, [r7, #32]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d00b      	beq.n	80095e0 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	6a3a      	ldr	r2, [r7, #32]
 80095ce:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80095d6:	6a3b      	ldr	r3, [r7, #32]
 80095d8:	431a      	orrs	r2, r3
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 80095e0:	69fb      	ldr	r3, [r7, #28]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d00b      	beq.n	80095fe <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	685b      	ldr	r3, [r3, #4]
 80095ea:	69fa      	ldr	r2, [r7, #28]
 80095ec:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80095f4:	69fb      	ldr	r3, [r7, #28]
 80095f6:	431a      	orrs	r2, r3
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009604:	2b00      	cmp	r3, #0
 8009606:	d002      	beq.n	800960e <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 f874 	bl	80096f6 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800960e:	bf00      	nop
 8009610:	3758      	adds	r7, #88	@ 0x58
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
 8009616:	bf00      	nop
 8009618:	4000a800 	.word	0x4000a800
 800961c:	3fcfffff 	.word	0x3fcfffff
 8009620:	4000a000 	.word	0x4000a000

08009624 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8009624:	b480      	push	{r7}
 8009626:	b083      	sub	sp, #12
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800962e:	bf00      	nop
 8009630:	370c      	adds	r7, #12
 8009632:	46bd      	mov	sp, r7
 8009634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009638:	4770      	bx	lr

0800963a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800963a:	b480      	push	{r7}
 800963c:	b083      	sub	sp, #12
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
 8009642:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8009644:	bf00      	nop
 8009646:	370c      	adds	r7, #12
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr

08009650 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8009650:	b480      	push	{r7}
 8009652:	b083      	sub	sp, #12
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800965a:	bf00      	nop
 800965c:	370c      	adds	r7, #12
 800965e:	46bd      	mov	sp, r7
 8009660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009664:	4770      	bx	lr

08009666 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8009666:	b480      	push	{r7}
 8009668:	b083      	sub	sp, #12
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800966e:	bf00      	nop
 8009670:	370c      	adds	r7, #12
 8009672:	46bd      	mov	sp, r7
 8009674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009678:	4770      	bx	lr

0800967a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800967a:	b480      	push	{r7}
 800967c:	b083      	sub	sp, #12
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
 8009682:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8009684:	bf00      	nop
 8009686:	370c      	adds	r7, #12
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr

08009690 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8009690:	b480      	push	{r7}
 8009692:	b083      	sub	sp, #12
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800969a:	bf00      	nop
 800969c:	370c      	adds	r7, #12
 800969e:	46bd      	mov	sp, r7
 80096a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a4:	4770      	bx	lr

080096a6 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80096a6:	b480      	push	{r7}
 80096a8:	b083      	sub	sp, #12
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80096ae:	bf00      	nop
 80096b0:	370c      	adds	r7, #12
 80096b2:	46bd      	mov	sp, r7
 80096b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b8:	4770      	bx	lr

080096ba <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80096ba:	b480      	push	{r7}
 80096bc:	b083      	sub	sp, #12
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80096c2:	bf00      	nop
 80096c4:	370c      	adds	r7, #12
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr

080096ce <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80096ce:	b480      	push	{r7}
 80096d0:	b083      	sub	sp, #12
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80096d6:	bf00      	nop
 80096d8:	370c      	adds	r7, #12
 80096da:	46bd      	mov	sp, r7
 80096dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e0:	4770      	bx	lr

080096e2 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80096e2:	b480      	push	{r7}
 80096e4:	b083      	sub	sp, #12
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80096ea:	bf00      	nop
 80096ec:	370c      	adds	r7, #12
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr

080096f6 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80096f6:	b480      	push	{r7}
 80096f8:	b083      	sub	sp, #12
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80096fe:	bf00      	nop
 8009700:	370c      	adds	r7, #12
 8009702:	46bd      	mov	sp, r7
 8009704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009708:	4770      	bx	lr

0800970a <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 800970a:	b480      	push	{r7}
 800970c:	b083      	sub	sp, #12
 800970e:	af00      	add	r7, sp, #0
 8009710:	6078      	str	r0, [r7, #4]
 8009712:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8009714:	bf00      	nop
 8009716:	370c      	adds	r7, #12
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr

08009720 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8009720:	b480      	push	{r7}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 800972a:	bf00      	nop
 800972c:	370c      	adds	r7, #12
 800972e:	46bd      	mov	sp, r7
 8009730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009734:	4770      	bx	lr

08009736 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8009736:	b480      	push	{r7}
 8009738:	b085      	sub	sp, #20
 800973a:	af00      	add	r7, sp, #0
 800973c:	60f8      	str	r0, [r7, #12]
 800973e:	60b9      	str	r1, [r7, #8]
 8009740:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8009742:	bf00      	nop
 8009744:	3714      	adds	r7, #20
 8009746:	46bd      	mov	sp, r7
 8009748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974c:	4770      	bx	lr

0800974e <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 800974e:	b480      	push	{r7}
 8009750:	b083      	sub	sp, #12
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]
 8009756:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8009758:	bf00      	nop
 800975a:	370c      	adds	r7, #12
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr

08009764 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8009764:	b480      	push	{r7}
 8009766:	b085      	sub	sp, #20
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009770:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800977a:	4ba7      	ldr	r3, [pc, #668]	@ (8009a18 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800977c:	4013      	ands	r3, r2
 800977e:	68ba      	ldr	r2, [r7, #8]
 8009780:	0091      	lsls	r1, r2, #2
 8009782:	687a      	ldr	r2, [r7, #4]
 8009784:	6812      	ldr	r2, [r2, #0]
 8009786:	430b      	orrs	r3, r1
 8009788:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009794:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800979c:	041a      	lsls	r2, r3, #16
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	430a      	orrs	r2, r1
 80097a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097ac:	68ba      	ldr	r2, [r7, #8]
 80097ae:	4413      	add	r3, r2
 80097b0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80097ba:	4b97      	ldr	r3, [pc, #604]	@ (8009a18 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80097bc:	4013      	ands	r3, r2
 80097be:	68ba      	ldr	r2, [r7, #8]
 80097c0:	0091      	lsls	r1, r2, #2
 80097c2:	687a      	ldr	r2, [r7, #4]
 80097c4:	6812      	ldr	r2, [r2, #0]
 80097c6:	430b      	orrs	r3, r1
 80097c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097d4:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097dc:	041a      	lsls	r2, r3, #16
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	430a      	orrs	r2, r1
 80097e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097ec:	005b      	lsls	r3, r3, #1
 80097ee:	68ba      	ldr	r2, [r7, #8]
 80097f0:	4413      	add	r3, r2
 80097f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80097fc:	4b86      	ldr	r3, [pc, #536]	@ (8009a18 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80097fe:	4013      	ands	r3, r2
 8009800:	68ba      	ldr	r2, [r7, #8]
 8009802:	0091      	lsls	r1, r2, #2
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	6812      	ldr	r2, [r2, #0]
 8009808:	430b      	orrs	r3, r1
 800980a:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009816:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800981e:	041a      	lsls	r2, r3, #16
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	430a      	orrs	r2, r1
 8009826:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800982e:	687a      	ldr	r2, [r7, #4]
 8009830:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8009832:	fb02 f303 	mul.w	r3, r2, r3
 8009836:	68ba      	ldr	r2, [r7, #8]
 8009838:	4413      	add	r3, r2
 800983a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8009844:	4b74      	ldr	r3, [pc, #464]	@ (8009a18 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009846:	4013      	ands	r3, r2
 8009848:	68ba      	ldr	r2, [r7, #8]
 800984a:	0091      	lsls	r1, r2, #2
 800984c:	687a      	ldr	r2, [r7, #4]
 800984e:	6812      	ldr	r2, [r2, #0]
 8009850:	430b      	orrs	r3, r1
 8009852:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800985e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009866:	041a      	lsls	r2, r3, #16
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	430a      	orrs	r2, r1
 800986e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009876:	687a      	ldr	r2, [r7, #4]
 8009878:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800987a:	fb02 f303 	mul.w	r3, r2, r3
 800987e:	68ba      	ldr	r2, [r7, #8]
 8009880:	4413      	add	r3, r2
 8009882:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 800988c:	4b62      	ldr	r3, [pc, #392]	@ (8009a18 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800988e:	4013      	ands	r3, r2
 8009890:	68ba      	ldr	r2, [r7, #8]
 8009892:	0091      	lsls	r1, r2, #2
 8009894:	687a      	ldr	r2, [r7, #4]
 8009896:	6812      	ldr	r2, [r2, #0]
 8009898:	430b      	orrs	r3, r1
 800989a:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098a2:	687a      	ldr	r2, [r7, #4]
 80098a4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80098a6:	fb02 f303 	mul.w	r3, r2, r3
 80098aa:	68ba      	ldr	r2, [r7, #8]
 80098ac:	4413      	add	r3, r2
 80098ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80098b8:	4b57      	ldr	r3, [pc, #348]	@ (8009a18 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80098ba:	4013      	ands	r3, r2
 80098bc:	68ba      	ldr	r2, [r7, #8]
 80098be:	0091      	lsls	r1, r2, #2
 80098c0:	687a      	ldr	r2, [r7, #4]
 80098c2:	6812      	ldr	r2, [r2, #0]
 80098c4:	430b      	orrs	r3, r1
 80098c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80098d2:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098da:	041a      	lsls	r2, r3, #16
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	430a      	orrs	r2, r1
 80098e2:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098ea:	005b      	lsls	r3, r3, #1
 80098ec:	68ba      	ldr	r2, [r7, #8]
 80098ee:	4413      	add	r3, r2
 80098f0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80098fa:	4b47      	ldr	r3, [pc, #284]	@ (8009a18 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80098fc:	4013      	ands	r3, r2
 80098fe:	68ba      	ldr	r2, [r7, #8]
 8009900:	0091      	lsls	r1, r2, #2
 8009902:	687a      	ldr	r2, [r7, #4]
 8009904:	6812      	ldr	r2, [r2, #0]
 8009906:	430b      	orrs	r3, r1
 8009908:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009914:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800991c:	041a      	lsls	r2, r3, #16
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	430a      	orrs	r2, r1
 8009924:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009930:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009938:	061a      	lsls	r2, r3, #24
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	430a      	orrs	r2, r1
 8009940:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009948:	4b34      	ldr	r3, [pc, #208]	@ (8009a1c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800994a:	4413      	add	r3, r2
 800994c:	009a      	lsls	r2, r3, #2
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800995a:	009b      	lsls	r3, r3, #2
 800995c:	441a      	add	r2, r3
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800996a:	00db      	lsls	r3, r3, #3
 800996c:	441a      	add	r2, r3
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800997a:	6879      	ldr	r1, [r7, #4]
 800997c:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 800997e:	fb01 f303 	mul.w	r3, r1, r3
 8009982:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8009984:	441a      	add	r2, r3
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009992:	6879      	ldr	r1, [r7, #4]
 8009994:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8009996:	fb01 f303 	mul.w	r3, r1, r3
 800999a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800999c:	441a      	add	r2, r3
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099aa:	6879      	ldr	r1, [r7, #4]
 80099ac:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 80099ae:	fb01 f303 	mul.w	r3, r1, r3
 80099b2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80099b4:	441a      	add	r2, r3
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099c6:	00db      	lsls	r3, r3, #3
 80099c8:	441a      	add	r2, r3
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80099da:	6879      	ldr	r1, [r7, #4]
 80099dc:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80099de:	fb01 f303 	mul.w	r3, r1, r3
 80099e2:	009b      	lsls	r3, r3, #2
 80099e4:	441a      	add	r2, r3
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80099f6:	6879      	ldr	r1, [r7, #4]
 80099f8:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80099fa:	fb01 f303 	mul.w	r3, r1, r3
 80099fe:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8009a00:	441a      	add	r2, r3
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a0e:	4a04      	ldr	r2, [pc, #16]	@ (8009a20 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d915      	bls.n	8009a40 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8009a14:	e006      	b.n	8009a24 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8009a16:	bf00      	nop
 8009a18:	ffff0003 	.word	0xffff0003
 8009a1c:	10002b00 	.word	0x10002b00
 8009a20:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009a2a:	f043 0220 	orr.w	r2, r3, #32
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2203      	movs	r2, #3
 8009a38:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	e010      	b.n	8009a62 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a44:	60fb      	str	r3, [r7, #12]
 8009a46:	e005      	b.n	8009a54 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	3304      	adds	r3, #4
 8009a52:	60fb      	str	r3, [r7, #12]
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a5a:	68fa      	ldr	r2, [r7, #12]
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	d3f3      	bcc.n	8009a48 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8009a60:	2300      	movs	r3, #0
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3714      	adds	r7, #20
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr
 8009a6e:	bf00      	nop

08009a70 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b089      	sub	sp, #36	@ 0x24
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	60f8      	str	r0, [r7, #12]
 8009a78:	60b9      	str	r1, [r7, #8]
 8009a7a:	607a      	str	r2, [r7, #4]
 8009a7c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d10a      	bne.n	8009a9c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8009a8e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8009a96:	4313      	orrs	r3, r2
 8009a98:	61fb      	str	r3, [r7, #28]
 8009a9a:	e00a      	b.n	8009ab2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8009aa4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8009aaa:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8009aac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009ab0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	6a1b      	ldr	r3, [r3, #32]
 8009ab6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8009abc:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8009ac2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8009ac8:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	68db      	ldr	r3, [r3, #12]
 8009ace:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8009ad0:	4313      	orrs	r3, r2
 8009ad2:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009ade:	6839      	ldr	r1, [r7, #0]
 8009ae0:	fb01 f303 	mul.w	r3, r1, r3
 8009ae4:	009b      	lsls	r3, r3, #2
 8009ae6:	4413      	add	r3, r2
 8009ae8:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8009aea:	69bb      	ldr	r3, [r7, #24]
 8009aec:	69fa      	ldr	r2, [r7, #28]
 8009aee:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8009af0:	69bb      	ldr	r3, [r7, #24]
 8009af2:	3304      	adds	r3, #4
 8009af4:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8009af6:	69bb      	ldr	r3, [r7, #24]
 8009af8:	693a      	ldr	r2, [r7, #16]
 8009afa:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8009afc:	69bb      	ldr	r3, [r7, #24]
 8009afe:	3304      	adds	r3, #4
 8009b00:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8009b02:	2300      	movs	r3, #0
 8009b04:	617b      	str	r3, [r7, #20]
 8009b06:	e020      	b.n	8009b4a <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	3303      	adds	r3, #3
 8009b0c:	687a      	ldr	r2, [r7, #4]
 8009b0e:	4413      	add	r3, r2
 8009b10:	781b      	ldrb	r3, [r3, #0]
 8009b12:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	3302      	adds	r3, #2
 8009b18:	6879      	ldr	r1, [r7, #4]
 8009b1a:	440b      	add	r3, r1
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8009b20:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	3301      	adds	r3, #1
 8009b26:	6879      	ldr	r1, [r7, #4]
 8009b28:	440b      	add	r3, r1
 8009b2a:	781b      	ldrb	r3, [r3, #0]
 8009b2c:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8009b2e:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8009b30:	6879      	ldr	r1, [r7, #4]
 8009b32:	697a      	ldr	r2, [r7, #20]
 8009b34:	440a      	add	r2, r1
 8009b36:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8009b38:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8009b3a:	69bb      	ldr	r3, [r7, #24]
 8009b3c:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8009b3e:	69bb      	ldr	r3, [r7, #24]
 8009b40:	3304      	adds	r3, #4
 8009b42:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	3304      	adds	r3, #4
 8009b48:	617b      	str	r3, [r7, #20]
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	68db      	ldr	r3, [r3, #12]
 8009b4e:	4a06      	ldr	r2, [pc, #24]	@ (8009b68 <FDCAN_CopyMessageToRAM+0xf8>)
 8009b50:	5cd3      	ldrb	r3, [r2, r3]
 8009b52:	461a      	mov	r2, r3
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d3d6      	bcc.n	8009b08 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8009b5a:	bf00      	nop
 8009b5c:	bf00      	nop
 8009b5e:	3724      	adds	r7, #36	@ 0x24
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr
 8009b68:	08018878 	.word	0x08018878

08009b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b089      	sub	sp, #36	@ 0x24
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009b76:	2300      	movs	r3, #0
 8009b78:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009b7a:	4b86      	ldr	r3, [pc, #536]	@ (8009d94 <HAL_GPIO_Init+0x228>)
 8009b7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009b7e:	e18c      	b.n	8009e9a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	681a      	ldr	r2, [r3, #0]
 8009b84:	2101      	movs	r1, #1
 8009b86:	69fb      	ldr	r3, [r7, #28]
 8009b88:	fa01 f303 	lsl.w	r3, r1, r3
 8009b8c:	4013      	ands	r3, r2
 8009b8e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	f000 817e 	beq.w	8009e94 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	685b      	ldr	r3, [r3, #4]
 8009b9c:	f003 0303 	and.w	r3, r3, #3
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d005      	beq.n	8009bb0 <HAL_GPIO_Init+0x44>
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	685b      	ldr	r3, [r3, #4]
 8009ba8:	f003 0303 	and.w	r3, r3, #3
 8009bac:	2b02      	cmp	r3, #2
 8009bae:	d130      	bne.n	8009c12 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	689b      	ldr	r3, [r3, #8]
 8009bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009bb6:	69fb      	ldr	r3, [r7, #28]
 8009bb8:	005b      	lsls	r3, r3, #1
 8009bba:	2203      	movs	r2, #3
 8009bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8009bc0:	43db      	mvns	r3, r3
 8009bc2:	69ba      	ldr	r2, [r7, #24]
 8009bc4:	4013      	ands	r3, r2
 8009bc6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	68da      	ldr	r2, [r3, #12]
 8009bcc:	69fb      	ldr	r3, [r7, #28]
 8009bce:	005b      	lsls	r3, r3, #1
 8009bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8009bd4:	69ba      	ldr	r2, [r7, #24]
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	69ba      	ldr	r2, [r7, #24]
 8009bde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009be6:	2201      	movs	r2, #1
 8009be8:	69fb      	ldr	r3, [r7, #28]
 8009bea:	fa02 f303 	lsl.w	r3, r2, r3
 8009bee:	43db      	mvns	r3, r3
 8009bf0:	69ba      	ldr	r2, [r7, #24]
 8009bf2:	4013      	ands	r3, r2
 8009bf4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	685b      	ldr	r3, [r3, #4]
 8009bfa:	091b      	lsrs	r3, r3, #4
 8009bfc:	f003 0201 	and.w	r2, r3, #1
 8009c00:	69fb      	ldr	r3, [r7, #28]
 8009c02:	fa02 f303 	lsl.w	r3, r2, r3
 8009c06:	69ba      	ldr	r2, [r7, #24]
 8009c08:	4313      	orrs	r3, r2
 8009c0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	69ba      	ldr	r2, [r7, #24]
 8009c10:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	f003 0303 	and.w	r3, r3, #3
 8009c1a:	2b03      	cmp	r3, #3
 8009c1c:	d017      	beq.n	8009c4e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	68db      	ldr	r3, [r3, #12]
 8009c22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009c24:	69fb      	ldr	r3, [r7, #28]
 8009c26:	005b      	lsls	r3, r3, #1
 8009c28:	2203      	movs	r2, #3
 8009c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8009c2e:	43db      	mvns	r3, r3
 8009c30:	69ba      	ldr	r2, [r7, #24]
 8009c32:	4013      	ands	r3, r2
 8009c34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	689a      	ldr	r2, [r3, #8]
 8009c3a:	69fb      	ldr	r3, [r7, #28]
 8009c3c:	005b      	lsls	r3, r3, #1
 8009c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c42:	69ba      	ldr	r2, [r7, #24]
 8009c44:	4313      	orrs	r3, r2
 8009c46:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	69ba      	ldr	r2, [r7, #24]
 8009c4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	f003 0303 	and.w	r3, r3, #3
 8009c56:	2b02      	cmp	r3, #2
 8009c58:	d123      	bne.n	8009ca2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009c5a:	69fb      	ldr	r3, [r7, #28]
 8009c5c:	08da      	lsrs	r2, r3, #3
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	3208      	adds	r2, #8
 8009c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009c68:	69fb      	ldr	r3, [r7, #28]
 8009c6a:	f003 0307 	and.w	r3, r3, #7
 8009c6e:	009b      	lsls	r3, r3, #2
 8009c70:	220f      	movs	r2, #15
 8009c72:	fa02 f303 	lsl.w	r3, r2, r3
 8009c76:	43db      	mvns	r3, r3
 8009c78:	69ba      	ldr	r2, [r7, #24]
 8009c7a:	4013      	ands	r3, r2
 8009c7c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	691a      	ldr	r2, [r3, #16]
 8009c82:	69fb      	ldr	r3, [r7, #28]
 8009c84:	f003 0307 	and.w	r3, r3, #7
 8009c88:	009b      	lsls	r3, r3, #2
 8009c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8009c8e:	69ba      	ldr	r2, [r7, #24]
 8009c90:	4313      	orrs	r3, r2
 8009c92:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009c94:	69fb      	ldr	r3, [r7, #28]
 8009c96:	08da      	lsrs	r2, r3, #3
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	3208      	adds	r2, #8
 8009c9c:	69b9      	ldr	r1, [r7, #24]
 8009c9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009ca8:	69fb      	ldr	r3, [r7, #28]
 8009caa:	005b      	lsls	r3, r3, #1
 8009cac:	2203      	movs	r2, #3
 8009cae:	fa02 f303 	lsl.w	r3, r2, r3
 8009cb2:	43db      	mvns	r3, r3
 8009cb4:	69ba      	ldr	r2, [r7, #24]
 8009cb6:	4013      	ands	r3, r2
 8009cb8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	f003 0203 	and.w	r2, r3, #3
 8009cc2:	69fb      	ldr	r3, [r7, #28]
 8009cc4:	005b      	lsls	r3, r3, #1
 8009cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8009cca:	69ba      	ldr	r2, [r7, #24]
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	69ba      	ldr	r2, [r7, #24]
 8009cd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	685b      	ldr	r3, [r3, #4]
 8009cda:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	f000 80d8 	beq.w	8009e94 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009ce4:	4b2c      	ldr	r3, [pc, #176]	@ (8009d98 <HAL_GPIO_Init+0x22c>)
 8009ce6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009cea:	4a2b      	ldr	r2, [pc, #172]	@ (8009d98 <HAL_GPIO_Init+0x22c>)
 8009cec:	f043 0302 	orr.w	r3, r3, #2
 8009cf0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8009cf4:	4b28      	ldr	r3, [pc, #160]	@ (8009d98 <HAL_GPIO_Init+0x22c>)
 8009cf6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009cfa:	f003 0302 	and.w	r3, r3, #2
 8009cfe:	60fb      	str	r3, [r7, #12]
 8009d00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009d02:	4a26      	ldr	r2, [pc, #152]	@ (8009d9c <HAL_GPIO_Init+0x230>)
 8009d04:	69fb      	ldr	r3, [r7, #28]
 8009d06:	089b      	lsrs	r3, r3, #2
 8009d08:	3302      	adds	r3, #2
 8009d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009d10:	69fb      	ldr	r3, [r7, #28]
 8009d12:	f003 0303 	and.w	r3, r3, #3
 8009d16:	009b      	lsls	r3, r3, #2
 8009d18:	220f      	movs	r2, #15
 8009d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d1e:	43db      	mvns	r3, r3
 8009d20:	69ba      	ldr	r2, [r7, #24]
 8009d22:	4013      	ands	r3, r2
 8009d24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	4a1d      	ldr	r2, [pc, #116]	@ (8009da0 <HAL_GPIO_Init+0x234>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d04a      	beq.n	8009dc4 <HAL_GPIO_Init+0x258>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	4a1c      	ldr	r2, [pc, #112]	@ (8009da4 <HAL_GPIO_Init+0x238>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d02b      	beq.n	8009d8e <HAL_GPIO_Init+0x222>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	4a1b      	ldr	r2, [pc, #108]	@ (8009da8 <HAL_GPIO_Init+0x23c>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d025      	beq.n	8009d8a <HAL_GPIO_Init+0x21e>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	4a1a      	ldr	r2, [pc, #104]	@ (8009dac <HAL_GPIO_Init+0x240>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d01f      	beq.n	8009d86 <HAL_GPIO_Init+0x21a>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	4a19      	ldr	r2, [pc, #100]	@ (8009db0 <HAL_GPIO_Init+0x244>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d019      	beq.n	8009d82 <HAL_GPIO_Init+0x216>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	4a18      	ldr	r2, [pc, #96]	@ (8009db4 <HAL_GPIO_Init+0x248>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d013      	beq.n	8009d7e <HAL_GPIO_Init+0x212>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	4a17      	ldr	r2, [pc, #92]	@ (8009db8 <HAL_GPIO_Init+0x24c>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d00d      	beq.n	8009d7a <HAL_GPIO_Init+0x20e>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	4a16      	ldr	r2, [pc, #88]	@ (8009dbc <HAL_GPIO_Init+0x250>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d007      	beq.n	8009d76 <HAL_GPIO_Init+0x20a>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	4a15      	ldr	r2, [pc, #84]	@ (8009dc0 <HAL_GPIO_Init+0x254>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d101      	bne.n	8009d72 <HAL_GPIO_Init+0x206>
 8009d6e:	2309      	movs	r3, #9
 8009d70:	e029      	b.n	8009dc6 <HAL_GPIO_Init+0x25a>
 8009d72:	230a      	movs	r3, #10
 8009d74:	e027      	b.n	8009dc6 <HAL_GPIO_Init+0x25a>
 8009d76:	2307      	movs	r3, #7
 8009d78:	e025      	b.n	8009dc6 <HAL_GPIO_Init+0x25a>
 8009d7a:	2306      	movs	r3, #6
 8009d7c:	e023      	b.n	8009dc6 <HAL_GPIO_Init+0x25a>
 8009d7e:	2305      	movs	r3, #5
 8009d80:	e021      	b.n	8009dc6 <HAL_GPIO_Init+0x25a>
 8009d82:	2304      	movs	r3, #4
 8009d84:	e01f      	b.n	8009dc6 <HAL_GPIO_Init+0x25a>
 8009d86:	2303      	movs	r3, #3
 8009d88:	e01d      	b.n	8009dc6 <HAL_GPIO_Init+0x25a>
 8009d8a:	2302      	movs	r3, #2
 8009d8c:	e01b      	b.n	8009dc6 <HAL_GPIO_Init+0x25a>
 8009d8e:	2301      	movs	r3, #1
 8009d90:	e019      	b.n	8009dc6 <HAL_GPIO_Init+0x25a>
 8009d92:	bf00      	nop
 8009d94:	58000080 	.word	0x58000080
 8009d98:	58024400 	.word	0x58024400
 8009d9c:	58000400 	.word	0x58000400
 8009da0:	58020000 	.word	0x58020000
 8009da4:	58020400 	.word	0x58020400
 8009da8:	58020800 	.word	0x58020800
 8009dac:	58020c00 	.word	0x58020c00
 8009db0:	58021000 	.word	0x58021000
 8009db4:	58021400 	.word	0x58021400
 8009db8:	58021800 	.word	0x58021800
 8009dbc:	58021c00 	.word	0x58021c00
 8009dc0:	58022400 	.word	0x58022400
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	69fa      	ldr	r2, [r7, #28]
 8009dc8:	f002 0203 	and.w	r2, r2, #3
 8009dcc:	0092      	lsls	r2, r2, #2
 8009dce:	4093      	lsls	r3, r2
 8009dd0:	69ba      	ldr	r2, [r7, #24]
 8009dd2:	4313      	orrs	r3, r2
 8009dd4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009dd6:	4938      	ldr	r1, [pc, #224]	@ (8009eb8 <HAL_GPIO_Init+0x34c>)
 8009dd8:	69fb      	ldr	r3, [r7, #28]
 8009dda:	089b      	lsrs	r3, r3, #2
 8009ddc:	3302      	adds	r3, #2
 8009dde:	69ba      	ldr	r2, [r7, #24]
 8009de0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009de4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	43db      	mvns	r3, r3
 8009df0:	69ba      	ldr	r2, [r7, #24]
 8009df2:	4013      	ands	r3, r2
 8009df4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d003      	beq.n	8009e0a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8009e02:	69ba      	ldr	r2, [r7, #24]
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	4313      	orrs	r3, r2
 8009e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8009e0a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009e0e:	69bb      	ldr	r3, [r7, #24]
 8009e10:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009e12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	43db      	mvns	r3, r3
 8009e1e:	69ba      	ldr	r2, [r7, #24]
 8009e20:	4013      	ands	r3, r2
 8009e22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d003      	beq.n	8009e38 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8009e30:	69ba      	ldr	r2, [r7, #24]
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	4313      	orrs	r3, r2
 8009e36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009e38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009e3c:	69bb      	ldr	r3, [r7, #24]
 8009e3e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	43db      	mvns	r3, r3
 8009e4a:	69ba      	ldr	r2, [r7, #24]
 8009e4c:	4013      	ands	r3, r2
 8009e4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d003      	beq.n	8009e64 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8009e5c:	69ba      	ldr	r2, [r7, #24]
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	4313      	orrs	r3, r2
 8009e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	69ba      	ldr	r2, [r7, #24]
 8009e68:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	43db      	mvns	r3, r3
 8009e74:	69ba      	ldr	r2, [r7, #24]
 8009e76:	4013      	ands	r3, r2
 8009e78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d003      	beq.n	8009e8e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8009e86:	69ba      	ldr	r2, [r7, #24]
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	69ba      	ldr	r2, [r7, #24]
 8009e92:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009e94:	69fb      	ldr	r3, [r7, #28]
 8009e96:	3301      	adds	r3, #1
 8009e98:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	681a      	ldr	r2, [r3, #0]
 8009e9e:	69fb      	ldr	r3, [r7, #28]
 8009ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	f47f ae6b 	bne.w	8009b80 <HAL_GPIO_Init+0x14>
  }
}
 8009eaa:	bf00      	nop
 8009eac:	bf00      	nop
 8009eae:	3724      	adds	r7, #36	@ 0x24
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb6:	4770      	bx	lr
 8009eb8:	58000400 	.word	0x58000400

08009ebc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b085      	sub	sp, #20
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	460b      	mov	r3, r1
 8009ec6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	691a      	ldr	r2, [r3, #16]
 8009ecc:	887b      	ldrh	r3, [r7, #2]
 8009ece:	4013      	ands	r3, r2
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d002      	beq.n	8009eda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	73fb      	strb	r3, [r7, #15]
 8009ed8:	e001      	b.n	8009ede <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009eda:	2300      	movs	r3, #0
 8009edc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3714      	adds	r7, #20
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr

08009eec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b083      	sub	sp, #12
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	460b      	mov	r3, r1
 8009ef6:	807b      	strh	r3, [r7, #2]
 8009ef8:	4613      	mov	r3, r2
 8009efa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009efc:	787b      	ldrb	r3, [r7, #1]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d003      	beq.n	8009f0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009f02:	887a      	ldrh	r2, [r7, #2]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009f08:	e003      	b.n	8009f12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009f0a:	887b      	ldrh	r3, [r7, #2]
 8009f0c:	041a      	lsls	r2, r3, #16
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	619a      	str	r2, [r3, #24]
}
 8009f12:	bf00      	nop
 8009f14:	370c      	adds	r7, #12
 8009f16:	46bd      	mov	sp, r7
 8009f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1c:	4770      	bx	lr
	...

08009f20 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b084      	sub	sp, #16
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009f28:	4b19      	ldr	r3, [pc, #100]	@ (8009f90 <HAL_PWREx_ConfigSupply+0x70>)
 8009f2a:	68db      	ldr	r3, [r3, #12]
 8009f2c:	f003 0304 	and.w	r3, r3, #4
 8009f30:	2b04      	cmp	r3, #4
 8009f32:	d00a      	beq.n	8009f4a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009f34:	4b16      	ldr	r3, [pc, #88]	@ (8009f90 <HAL_PWREx_ConfigSupply+0x70>)
 8009f36:	68db      	ldr	r3, [r3, #12]
 8009f38:	f003 0307 	and.w	r3, r3, #7
 8009f3c:	687a      	ldr	r2, [r7, #4]
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d001      	beq.n	8009f46 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009f42:	2301      	movs	r3, #1
 8009f44:	e01f      	b.n	8009f86 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009f46:	2300      	movs	r3, #0
 8009f48:	e01d      	b.n	8009f86 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009f4a:	4b11      	ldr	r3, [pc, #68]	@ (8009f90 <HAL_PWREx_ConfigSupply+0x70>)
 8009f4c:	68db      	ldr	r3, [r3, #12]
 8009f4e:	f023 0207 	bic.w	r2, r3, #7
 8009f52:	490f      	ldr	r1, [pc, #60]	@ (8009f90 <HAL_PWREx_ConfigSupply+0x70>)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	4313      	orrs	r3, r2
 8009f58:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009f5a:	f7fa f943 	bl	80041e4 <HAL_GetTick>
 8009f5e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009f60:	e009      	b.n	8009f76 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009f62:	f7fa f93f 	bl	80041e4 <HAL_GetTick>
 8009f66:	4602      	mov	r2, r0
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	1ad3      	subs	r3, r2, r3
 8009f6c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009f70:	d901      	bls.n	8009f76 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009f72:	2301      	movs	r3, #1
 8009f74:	e007      	b.n	8009f86 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009f76:	4b06      	ldr	r3, [pc, #24]	@ (8009f90 <HAL_PWREx_ConfigSupply+0x70>)
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009f7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f82:	d1ee      	bne.n	8009f62 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009f84:	2300      	movs	r3, #0
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3710      	adds	r7, #16
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}
 8009f8e:	bf00      	nop
 8009f90:	58024800 	.word	0x58024800

08009f94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b08c      	sub	sp, #48	@ 0x30
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d101      	bne.n	8009fa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	e3c8      	b.n	800a738 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f003 0301 	and.w	r3, r3, #1
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	f000 8087 	beq.w	800a0c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009fb4:	4b88      	ldr	r3, [pc, #544]	@ (800a1d8 <HAL_RCC_OscConfig+0x244>)
 8009fb6:	691b      	ldr	r3, [r3, #16]
 8009fb8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009fbe:	4b86      	ldr	r3, [pc, #536]	@ (800a1d8 <HAL_RCC_OscConfig+0x244>)
 8009fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fc6:	2b10      	cmp	r3, #16
 8009fc8:	d007      	beq.n	8009fda <HAL_RCC_OscConfig+0x46>
 8009fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fcc:	2b18      	cmp	r3, #24
 8009fce:	d110      	bne.n	8009ff2 <HAL_RCC_OscConfig+0x5e>
 8009fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fd2:	f003 0303 	and.w	r3, r3, #3
 8009fd6:	2b02      	cmp	r3, #2
 8009fd8:	d10b      	bne.n	8009ff2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009fda:	4b7f      	ldr	r3, [pc, #508]	@ (800a1d8 <HAL_RCC_OscConfig+0x244>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d06c      	beq.n	800a0c0 <HAL_RCC_OscConfig+0x12c>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d168      	bne.n	800a0c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009fee:	2301      	movs	r3, #1
 8009ff0:	e3a2      	b.n	800a738 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	685b      	ldr	r3, [r3, #4]
 8009ff6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ffa:	d106      	bne.n	800a00a <HAL_RCC_OscConfig+0x76>
 8009ffc:	4b76      	ldr	r3, [pc, #472]	@ (800a1d8 <HAL_RCC_OscConfig+0x244>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	4a75      	ldr	r2, [pc, #468]	@ (800a1d8 <HAL_RCC_OscConfig+0x244>)
 800a002:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a006:	6013      	str	r3, [r2, #0]
 800a008:	e02e      	b.n	800a068 <HAL_RCC_OscConfig+0xd4>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d10c      	bne.n	800a02c <HAL_RCC_OscConfig+0x98>
 800a012:	4b71      	ldr	r3, [pc, #452]	@ (800a1d8 <HAL_RCC_OscConfig+0x244>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4a70      	ldr	r2, [pc, #448]	@ (800a1d8 <HAL_RCC_OscConfig+0x244>)
 800a018:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a01c:	6013      	str	r3, [r2, #0]
 800a01e:	4b6e      	ldr	r3, [pc, #440]	@ (800a1d8 <HAL_RCC_OscConfig+0x244>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	4a6d      	ldr	r2, [pc, #436]	@ (800a1d8 <HAL_RCC_OscConfig+0x244>)
 800a024:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a028:	6013      	str	r3, [r2, #0]
 800a02a:	e01d      	b.n	800a068 <HAL_RCC_OscConfig+0xd4>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	685b      	ldr	r3, [r3, #4]
 800a030:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a034:	d10c      	bne.n	800a050 <HAL_RCC_OscConfig+0xbc>
 800a036:	4b68      	ldr	r3, [pc, #416]	@ (800a1d8 <HAL_RCC_OscConfig+0x244>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4a67      	ldr	r2, [pc, #412]	@ (800a1d8 <HAL_RCC_OscConfig+0x244>)
 800a03c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a040:	6013      	str	r3, [r2, #0]
 800a042:	4b65      	ldr	r3, [pc, #404]	@ (800a1d8 <HAL_RCC_OscConfig+0x244>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4a64      	ldr	r2, [pc, #400]	@ (800a1d8 <HAL_RCC_OscConfig+0x244>)
 800a048:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a04c:	6013      	str	r3, [r2, #0]
 800a04e:	e00b      	b.n	800a068 <HAL_RCC_OscConfig+0xd4>
 800a050:	4b61      	ldr	r3, [pc, #388]	@ (800a1d8 <HAL_RCC_OscConfig+0x244>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	4a60      	ldr	r2, [pc, #384]	@ (800a1d8 <HAL_RCC_OscConfig+0x244>)
 800a056:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a05a:	6013      	str	r3, [r2, #0]
 800a05c:	4b5e      	ldr	r3, [pc, #376]	@ (800a1d8 <HAL_RCC_OscConfig+0x244>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	4a5d      	ldr	r2, [pc, #372]	@ (800a1d8 <HAL_RCC_OscConfig+0x244>)
 800a062:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a066:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d013      	beq.n	800a098 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a070:	f7fa f8b8 	bl	80041e4 <HAL_GetTick>
 800a074:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a076:	e008      	b.n	800a08a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a078:	f7fa f8b4 	bl	80041e4 <HAL_GetTick>
 800a07c:	4602      	mov	r2, r0
 800a07e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a080:	1ad3      	subs	r3, r2, r3
 800a082:	2b64      	cmp	r3, #100	@ 0x64
 800a084:	d901      	bls.n	800a08a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a086:	2303      	movs	r3, #3
 800a088:	e356      	b.n	800a738 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a08a:	4b53      	ldr	r3, [pc, #332]	@ (800a1d8 <HAL_RCC_OscConfig+0x244>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a092:	2b00      	cmp	r3, #0
 800a094:	d0f0      	beq.n	800a078 <HAL_RCC_OscConfig+0xe4>
 800a096:	e014      	b.n	800a0c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a098:	f7fa f8a4 	bl	80041e4 <HAL_GetTick>
 800a09c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a09e:	e008      	b.n	800a0b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a0a0:	f7fa f8a0 	bl	80041e4 <HAL_GetTick>
 800a0a4:	4602      	mov	r2, r0
 800a0a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0a8:	1ad3      	subs	r3, r2, r3
 800a0aa:	2b64      	cmp	r3, #100	@ 0x64
 800a0ac:	d901      	bls.n	800a0b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a0ae:	2303      	movs	r3, #3
 800a0b0:	e342      	b.n	800a738 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a0b2:	4b49      	ldr	r3, [pc, #292]	@ (800a1d8 <HAL_RCC_OscConfig+0x244>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d1f0      	bne.n	800a0a0 <HAL_RCC_OscConfig+0x10c>
 800a0be:	e000      	b.n	800a0c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a0c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f003 0302 	and.w	r3, r3, #2
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	f000 808c 	beq.w	800a1e8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a0d0:	4b41      	ldr	r3, [pc, #260]	@ (800a1d8 <HAL_RCC_OscConfig+0x244>)
 800a0d2:	691b      	ldr	r3, [r3, #16]
 800a0d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a0d8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a0da:	4b3f      	ldr	r3, [pc, #252]	@ (800a1d8 <HAL_RCC_OscConfig+0x244>)
 800a0dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0de:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a0e0:	6a3b      	ldr	r3, [r7, #32]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d007      	beq.n	800a0f6 <HAL_RCC_OscConfig+0x162>
 800a0e6:	6a3b      	ldr	r3, [r7, #32]
 800a0e8:	2b18      	cmp	r3, #24
 800a0ea:	d137      	bne.n	800a15c <HAL_RCC_OscConfig+0x1c8>
 800a0ec:	69fb      	ldr	r3, [r7, #28]
 800a0ee:	f003 0303 	and.w	r3, r3, #3
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d132      	bne.n	800a15c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a0f6:	4b38      	ldr	r3, [pc, #224]	@ (800a1d8 <HAL_RCC_OscConfig+0x244>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f003 0304 	and.w	r3, r3, #4
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d005      	beq.n	800a10e <HAL_RCC_OscConfig+0x17a>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	68db      	ldr	r3, [r3, #12]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d101      	bne.n	800a10e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a10a:	2301      	movs	r3, #1
 800a10c:	e314      	b.n	800a738 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a10e:	4b32      	ldr	r3, [pc, #200]	@ (800a1d8 <HAL_RCC_OscConfig+0x244>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f023 0219 	bic.w	r2, r3, #25
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	68db      	ldr	r3, [r3, #12]
 800a11a:	492f      	ldr	r1, [pc, #188]	@ (800a1d8 <HAL_RCC_OscConfig+0x244>)
 800a11c:	4313      	orrs	r3, r2
 800a11e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a120:	f7fa f860 	bl	80041e4 <HAL_GetTick>
 800a124:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a126:	e008      	b.n	800a13a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a128:	f7fa f85c 	bl	80041e4 <HAL_GetTick>
 800a12c:	4602      	mov	r2, r0
 800a12e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a130:	1ad3      	subs	r3, r2, r3
 800a132:	2b02      	cmp	r3, #2
 800a134:	d901      	bls.n	800a13a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800a136:	2303      	movs	r3, #3
 800a138:	e2fe      	b.n	800a738 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a13a:	4b27      	ldr	r3, [pc, #156]	@ (800a1d8 <HAL_RCC_OscConfig+0x244>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f003 0304 	and.w	r3, r3, #4
 800a142:	2b00      	cmp	r3, #0
 800a144:	d0f0      	beq.n	800a128 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a146:	4b24      	ldr	r3, [pc, #144]	@ (800a1d8 <HAL_RCC_OscConfig+0x244>)
 800a148:	685b      	ldr	r3, [r3, #4]
 800a14a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	691b      	ldr	r3, [r3, #16]
 800a152:	061b      	lsls	r3, r3, #24
 800a154:	4920      	ldr	r1, [pc, #128]	@ (800a1d8 <HAL_RCC_OscConfig+0x244>)
 800a156:	4313      	orrs	r3, r2
 800a158:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a15a:	e045      	b.n	800a1e8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	68db      	ldr	r3, [r3, #12]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d026      	beq.n	800a1b2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a164:	4b1c      	ldr	r3, [pc, #112]	@ (800a1d8 <HAL_RCC_OscConfig+0x244>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f023 0219 	bic.w	r2, r3, #25
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	68db      	ldr	r3, [r3, #12]
 800a170:	4919      	ldr	r1, [pc, #100]	@ (800a1d8 <HAL_RCC_OscConfig+0x244>)
 800a172:	4313      	orrs	r3, r2
 800a174:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a176:	f7fa f835 	bl	80041e4 <HAL_GetTick>
 800a17a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a17c:	e008      	b.n	800a190 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a17e:	f7fa f831 	bl	80041e4 <HAL_GetTick>
 800a182:	4602      	mov	r2, r0
 800a184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a186:	1ad3      	subs	r3, r2, r3
 800a188:	2b02      	cmp	r3, #2
 800a18a:	d901      	bls.n	800a190 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800a18c:	2303      	movs	r3, #3
 800a18e:	e2d3      	b.n	800a738 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a190:	4b11      	ldr	r3, [pc, #68]	@ (800a1d8 <HAL_RCC_OscConfig+0x244>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f003 0304 	and.w	r3, r3, #4
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d0f0      	beq.n	800a17e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a19c:	4b0e      	ldr	r3, [pc, #56]	@ (800a1d8 <HAL_RCC_OscConfig+0x244>)
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	691b      	ldr	r3, [r3, #16]
 800a1a8:	061b      	lsls	r3, r3, #24
 800a1aa:	490b      	ldr	r1, [pc, #44]	@ (800a1d8 <HAL_RCC_OscConfig+0x244>)
 800a1ac:	4313      	orrs	r3, r2
 800a1ae:	604b      	str	r3, [r1, #4]
 800a1b0:	e01a      	b.n	800a1e8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a1b2:	4b09      	ldr	r3, [pc, #36]	@ (800a1d8 <HAL_RCC_OscConfig+0x244>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	4a08      	ldr	r2, [pc, #32]	@ (800a1d8 <HAL_RCC_OscConfig+0x244>)
 800a1b8:	f023 0301 	bic.w	r3, r3, #1
 800a1bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1be:	f7fa f811 	bl	80041e4 <HAL_GetTick>
 800a1c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a1c4:	e00a      	b.n	800a1dc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a1c6:	f7fa f80d 	bl	80041e4 <HAL_GetTick>
 800a1ca:	4602      	mov	r2, r0
 800a1cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ce:	1ad3      	subs	r3, r2, r3
 800a1d0:	2b02      	cmp	r3, #2
 800a1d2:	d903      	bls.n	800a1dc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800a1d4:	2303      	movs	r3, #3
 800a1d6:	e2af      	b.n	800a738 <HAL_RCC_OscConfig+0x7a4>
 800a1d8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a1dc:	4b96      	ldr	r3, [pc, #600]	@ (800a438 <HAL_RCC_OscConfig+0x4a4>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f003 0304 	and.w	r3, r3, #4
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d1ee      	bne.n	800a1c6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f003 0310 	and.w	r3, r3, #16
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d06a      	beq.n	800a2ca <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a1f4:	4b90      	ldr	r3, [pc, #576]	@ (800a438 <HAL_RCC_OscConfig+0x4a4>)
 800a1f6:	691b      	ldr	r3, [r3, #16]
 800a1f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a1fc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a1fe:	4b8e      	ldr	r3, [pc, #568]	@ (800a438 <HAL_RCC_OscConfig+0x4a4>)
 800a200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a202:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a204:	69bb      	ldr	r3, [r7, #24]
 800a206:	2b08      	cmp	r3, #8
 800a208:	d007      	beq.n	800a21a <HAL_RCC_OscConfig+0x286>
 800a20a:	69bb      	ldr	r3, [r7, #24]
 800a20c:	2b18      	cmp	r3, #24
 800a20e:	d11b      	bne.n	800a248 <HAL_RCC_OscConfig+0x2b4>
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	f003 0303 	and.w	r3, r3, #3
 800a216:	2b01      	cmp	r3, #1
 800a218:	d116      	bne.n	800a248 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a21a:	4b87      	ldr	r3, [pc, #540]	@ (800a438 <HAL_RCC_OscConfig+0x4a4>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a222:	2b00      	cmp	r3, #0
 800a224:	d005      	beq.n	800a232 <HAL_RCC_OscConfig+0x29e>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	69db      	ldr	r3, [r3, #28]
 800a22a:	2b80      	cmp	r3, #128	@ 0x80
 800a22c:	d001      	beq.n	800a232 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800a22e:	2301      	movs	r3, #1
 800a230:	e282      	b.n	800a738 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a232:	4b81      	ldr	r3, [pc, #516]	@ (800a438 <HAL_RCC_OscConfig+0x4a4>)
 800a234:	68db      	ldr	r3, [r3, #12]
 800a236:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6a1b      	ldr	r3, [r3, #32]
 800a23e:	061b      	lsls	r3, r3, #24
 800a240:	497d      	ldr	r1, [pc, #500]	@ (800a438 <HAL_RCC_OscConfig+0x4a4>)
 800a242:	4313      	orrs	r3, r2
 800a244:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a246:	e040      	b.n	800a2ca <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	69db      	ldr	r3, [r3, #28]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d023      	beq.n	800a298 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a250:	4b79      	ldr	r3, [pc, #484]	@ (800a438 <HAL_RCC_OscConfig+0x4a4>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4a78      	ldr	r2, [pc, #480]	@ (800a438 <HAL_RCC_OscConfig+0x4a4>)
 800a256:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a25a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a25c:	f7f9 ffc2 	bl	80041e4 <HAL_GetTick>
 800a260:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a262:	e008      	b.n	800a276 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a264:	f7f9 ffbe 	bl	80041e4 <HAL_GetTick>
 800a268:	4602      	mov	r2, r0
 800a26a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a26c:	1ad3      	subs	r3, r2, r3
 800a26e:	2b02      	cmp	r3, #2
 800a270:	d901      	bls.n	800a276 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800a272:	2303      	movs	r3, #3
 800a274:	e260      	b.n	800a738 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a276:	4b70      	ldr	r3, [pc, #448]	@ (800a438 <HAL_RCC_OscConfig+0x4a4>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d0f0      	beq.n	800a264 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a282:	4b6d      	ldr	r3, [pc, #436]	@ (800a438 <HAL_RCC_OscConfig+0x4a4>)
 800a284:	68db      	ldr	r3, [r3, #12]
 800a286:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6a1b      	ldr	r3, [r3, #32]
 800a28e:	061b      	lsls	r3, r3, #24
 800a290:	4969      	ldr	r1, [pc, #420]	@ (800a438 <HAL_RCC_OscConfig+0x4a4>)
 800a292:	4313      	orrs	r3, r2
 800a294:	60cb      	str	r3, [r1, #12]
 800a296:	e018      	b.n	800a2ca <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a298:	4b67      	ldr	r3, [pc, #412]	@ (800a438 <HAL_RCC_OscConfig+0x4a4>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4a66      	ldr	r2, [pc, #408]	@ (800a438 <HAL_RCC_OscConfig+0x4a4>)
 800a29e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a2a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2a4:	f7f9 ff9e 	bl	80041e4 <HAL_GetTick>
 800a2a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a2aa:	e008      	b.n	800a2be <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a2ac:	f7f9 ff9a 	bl	80041e4 <HAL_GetTick>
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2b4:	1ad3      	subs	r3, r2, r3
 800a2b6:	2b02      	cmp	r3, #2
 800a2b8:	d901      	bls.n	800a2be <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800a2ba:	2303      	movs	r3, #3
 800a2bc:	e23c      	b.n	800a738 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a2be:	4b5e      	ldr	r3, [pc, #376]	@ (800a438 <HAL_RCC_OscConfig+0x4a4>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d1f0      	bne.n	800a2ac <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f003 0308 	and.w	r3, r3, #8
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d036      	beq.n	800a344 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	695b      	ldr	r3, [r3, #20]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d019      	beq.n	800a312 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a2de:	4b56      	ldr	r3, [pc, #344]	@ (800a438 <HAL_RCC_OscConfig+0x4a4>)
 800a2e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2e2:	4a55      	ldr	r2, [pc, #340]	@ (800a438 <HAL_RCC_OscConfig+0x4a4>)
 800a2e4:	f043 0301 	orr.w	r3, r3, #1
 800a2e8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2ea:	f7f9 ff7b 	bl	80041e4 <HAL_GetTick>
 800a2ee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a2f0:	e008      	b.n	800a304 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a2f2:	f7f9 ff77 	bl	80041e4 <HAL_GetTick>
 800a2f6:	4602      	mov	r2, r0
 800a2f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2fa:	1ad3      	subs	r3, r2, r3
 800a2fc:	2b02      	cmp	r3, #2
 800a2fe:	d901      	bls.n	800a304 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800a300:	2303      	movs	r3, #3
 800a302:	e219      	b.n	800a738 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a304:	4b4c      	ldr	r3, [pc, #304]	@ (800a438 <HAL_RCC_OscConfig+0x4a4>)
 800a306:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a308:	f003 0302 	and.w	r3, r3, #2
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d0f0      	beq.n	800a2f2 <HAL_RCC_OscConfig+0x35e>
 800a310:	e018      	b.n	800a344 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a312:	4b49      	ldr	r3, [pc, #292]	@ (800a438 <HAL_RCC_OscConfig+0x4a4>)
 800a314:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a316:	4a48      	ldr	r2, [pc, #288]	@ (800a438 <HAL_RCC_OscConfig+0x4a4>)
 800a318:	f023 0301 	bic.w	r3, r3, #1
 800a31c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a31e:	f7f9 ff61 	bl	80041e4 <HAL_GetTick>
 800a322:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a324:	e008      	b.n	800a338 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a326:	f7f9 ff5d 	bl	80041e4 <HAL_GetTick>
 800a32a:	4602      	mov	r2, r0
 800a32c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a32e:	1ad3      	subs	r3, r2, r3
 800a330:	2b02      	cmp	r3, #2
 800a332:	d901      	bls.n	800a338 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800a334:	2303      	movs	r3, #3
 800a336:	e1ff      	b.n	800a738 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a338:	4b3f      	ldr	r3, [pc, #252]	@ (800a438 <HAL_RCC_OscConfig+0x4a4>)
 800a33a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a33c:	f003 0302 	and.w	r3, r3, #2
 800a340:	2b00      	cmp	r3, #0
 800a342:	d1f0      	bne.n	800a326 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f003 0320 	and.w	r3, r3, #32
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d036      	beq.n	800a3be <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	699b      	ldr	r3, [r3, #24]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d019      	beq.n	800a38c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a358:	4b37      	ldr	r3, [pc, #220]	@ (800a438 <HAL_RCC_OscConfig+0x4a4>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	4a36      	ldr	r2, [pc, #216]	@ (800a438 <HAL_RCC_OscConfig+0x4a4>)
 800a35e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a362:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a364:	f7f9 ff3e 	bl	80041e4 <HAL_GetTick>
 800a368:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a36a:	e008      	b.n	800a37e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a36c:	f7f9 ff3a 	bl	80041e4 <HAL_GetTick>
 800a370:	4602      	mov	r2, r0
 800a372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a374:	1ad3      	subs	r3, r2, r3
 800a376:	2b02      	cmp	r3, #2
 800a378:	d901      	bls.n	800a37e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800a37a:	2303      	movs	r3, #3
 800a37c:	e1dc      	b.n	800a738 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a37e:	4b2e      	ldr	r3, [pc, #184]	@ (800a438 <HAL_RCC_OscConfig+0x4a4>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a386:	2b00      	cmp	r3, #0
 800a388:	d0f0      	beq.n	800a36c <HAL_RCC_OscConfig+0x3d8>
 800a38a:	e018      	b.n	800a3be <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a38c:	4b2a      	ldr	r3, [pc, #168]	@ (800a438 <HAL_RCC_OscConfig+0x4a4>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4a29      	ldr	r2, [pc, #164]	@ (800a438 <HAL_RCC_OscConfig+0x4a4>)
 800a392:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a396:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a398:	f7f9 ff24 	bl	80041e4 <HAL_GetTick>
 800a39c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a39e:	e008      	b.n	800a3b2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a3a0:	f7f9 ff20 	bl	80041e4 <HAL_GetTick>
 800a3a4:	4602      	mov	r2, r0
 800a3a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3a8:	1ad3      	subs	r3, r2, r3
 800a3aa:	2b02      	cmp	r3, #2
 800a3ac:	d901      	bls.n	800a3b2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800a3ae:	2303      	movs	r3, #3
 800a3b0:	e1c2      	b.n	800a738 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a3b2:	4b21      	ldr	r3, [pc, #132]	@ (800a438 <HAL_RCC_OscConfig+0x4a4>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d1f0      	bne.n	800a3a0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f003 0304 	and.w	r3, r3, #4
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	f000 8086 	beq.w	800a4d8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a3cc:	4b1b      	ldr	r3, [pc, #108]	@ (800a43c <HAL_RCC_OscConfig+0x4a8>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	4a1a      	ldr	r2, [pc, #104]	@ (800a43c <HAL_RCC_OscConfig+0x4a8>)
 800a3d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a3d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a3d8:	f7f9 ff04 	bl	80041e4 <HAL_GetTick>
 800a3dc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a3de:	e008      	b.n	800a3f2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a3e0:	f7f9 ff00 	bl	80041e4 <HAL_GetTick>
 800a3e4:	4602      	mov	r2, r0
 800a3e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3e8:	1ad3      	subs	r3, r2, r3
 800a3ea:	2b64      	cmp	r3, #100	@ 0x64
 800a3ec:	d901      	bls.n	800a3f2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800a3ee:	2303      	movs	r3, #3
 800a3f0:	e1a2      	b.n	800a738 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a3f2:	4b12      	ldr	r3, [pc, #72]	@ (800a43c <HAL_RCC_OscConfig+0x4a8>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d0f0      	beq.n	800a3e0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	689b      	ldr	r3, [r3, #8]
 800a402:	2b01      	cmp	r3, #1
 800a404:	d106      	bne.n	800a414 <HAL_RCC_OscConfig+0x480>
 800a406:	4b0c      	ldr	r3, [pc, #48]	@ (800a438 <HAL_RCC_OscConfig+0x4a4>)
 800a408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a40a:	4a0b      	ldr	r2, [pc, #44]	@ (800a438 <HAL_RCC_OscConfig+0x4a4>)
 800a40c:	f043 0301 	orr.w	r3, r3, #1
 800a410:	6713      	str	r3, [r2, #112]	@ 0x70
 800a412:	e032      	b.n	800a47a <HAL_RCC_OscConfig+0x4e6>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	689b      	ldr	r3, [r3, #8]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d111      	bne.n	800a440 <HAL_RCC_OscConfig+0x4ac>
 800a41c:	4b06      	ldr	r3, [pc, #24]	@ (800a438 <HAL_RCC_OscConfig+0x4a4>)
 800a41e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a420:	4a05      	ldr	r2, [pc, #20]	@ (800a438 <HAL_RCC_OscConfig+0x4a4>)
 800a422:	f023 0301 	bic.w	r3, r3, #1
 800a426:	6713      	str	r3, [r2, #112]	@ 0x70
 800a428:	4b03      	ldr	r3, [pc, #12]	@ (800a438 <HAL_RCC_OscConfig+0x4a4>)
 800a42a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a42c:	4a02      	ldr	r2, [pc, #8]	@ (800a438 <HAL_RCC_OscConfig+0x4a4>)
 800a42e:	f023 0304 	bic.w	r3, r3, #4
 800a432:	6713      	str	r3, [r2, #112]	@ 0x70
 800a434:	e021      	b.n	800a47a <HAL_RCC_OscConfig+0x4e6>
 800a436:	bf00      	nop
 800a438:	58024400 	.word	0x58024400
 800a43c:	58024800 	.word	0x58024800
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	689b      	ldr	r3, [r3, #8]
 800a444:	2b05      	cmp	r3, #5
 800a446:	d10c      	bne.n	800a462 <HAL_RCC_OscConfig+0x4ce>
 800a448:	4b83      	ldr	r3, [pc, #524]	@ (800a658 <HAL_RCC_OscConfig+0x6c4>)
 800a44a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a44c:	4a82      	ldr	r2, [pc, #520]	@ (800a658 <HAL_RCC_OscConfig+0x6c4>)
 800a44e:	f043 0304 	orr.w	r3, r3, #4
 800a452:	6713      	str	r3, [r2, #112]	@ 0x70
 800a454:	4b80      	ldr	r3, [pc, #512]	@ (800a658 <HAL_RCC_OscConfig+0x6c4>)
 800a456:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a458:	4a7f      	ldr	r2, [pc, #508]	@ (800a658 <HAL_RCC_OscConfig+0x6c4>)
 800a45a:	f043 0301 	orr.w	r3, r3, #1
 800a45e:	6713      	str	r3, [r2, #112]	@ 0x70
 800a460:	e00b      	b.n	800a47a <HAL_RCC_OscConfig+0x4e6>
 800a462:	4b7d      	ldr	r3, [pc, #500]	@ (800a658 <HAL_RCC_OscConfig+0x6c4>)
 800a464:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a466:	4a7c      	ldr	r2, [pc, #496]	@ (800a658 <HAL_RCC_OscConfig+0x6c4>)
 800a468:	f023 0301 	bic.w	r3, r3, #1
 800a46c:	6713      	str	r3, [r2, #112]	@ 0x70
 800a46e:	4b7a      	ldr	r3, [pc, #488]	@ (800a658 <HAL_RCC_OscConfig+0x6c4>)
 800a470:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a472:	4a79      	ldr	r2, [pc, #484]	@ (800a658 <HAL_RCC_OscConfig+0x6c4>)
 800a474:	f023 0304 	bic.w	r3, r3, #4
 800a478:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	689b      	ldr	r3, [r3, #8]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d015      	beq.n	800a4ae <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a482:	f7f9 feaf 	bl	80041e4 <HAL_GetTick>
 800a486:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a488:	e00a      	b.n	800a4a0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a48a:	f7f9 feab 	bl	80041e4 <HAL_GetTick>
 800a48e:	4602      	mov	r2, r0
 800a490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a492:	1ad3      	subs	r3, r2, r3
 800a494:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a498:	4293      	cmp	r3, r2
 800a49a:	d901      	bls.n	800a4a0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800a49c:	2303      	movs	r3, #3
 800a49e:	e14b      	b.n	800a738 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a4a0:	4b6d      	ldr	r3, [pc, #436]	@ (800a658 <HAL_RCC_OscConfig+0x6c4>)
 800a4a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4a4:	f003 0302 	and.w	r3, r3, #2
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d0ee      	beq.n	800a48a <HAL_RCC_OscConfig+0x4f6>
 800a4ac:	e014      	b.n	800a4d8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a4ae:	f7f9 fe99 	bl	80041e4 <HAL_GetTick>
 800a4b2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a4b4:	e00a      	b.n	800a4cc <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a4b6:	f7f9 fe95 	bl	80041e4 <HAL_GetTick>
 800a4ba:	4602      	mov	r2, r0
 800a4bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4be:	1ad3      	subs	r3, r2, r3
 800a4c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d901      	bls.n	800a4cc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800a4c8:	2303      	movs	r3, #3
 800a4ca:	e135      	b.n	800a738 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a4cc:	4b62      	ldr	r3, [pc, #392]	@ (800a658 <HAL_RCC_OscConfig+0x6c4>)
 800a4ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4d0:	f003 0302 	and.w	r3, r3, #2
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d1ee      	bne.n	800a4b6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	f000 812a 	beq.w	800a736 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a4e2:	4b5d      	ldr	r3, [pc, #372]	@ (800a658 <HAL_RCC_OscConfig+0x6c4>)
 800a4e4:	691b      	ldr	r3, [r3, #16]
 800a4e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a4ea:	2b18      	cmp	r3, #24
 800a4ec:	f000 80ba 	beq.w	800a664 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4f4:	2b02      	cmp	r3, #2
 800a4f6:	f040 8095 	bne.w	800a624 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a4fa:	4b57      	ldr	r3, [pc, #348]	@ (800a658 <HAL_RCC_OscConfig+0x6c4>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	4a56      	ldr	r2, [pc, #344]	@ (800a658 <HAL_RCC_OscConfig+0x6c4>)
 800a500:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a504:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a506:	f7f9 fe6d 	bl	80041e4 <HAL_GetTick>
 800a50a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a50c:	e008      	b.n	800a520 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a50e:	f7f9 fe69 	bl	80041e4 <HAL_GetTick>
 800a512:	4602      	mov	r2, r0
 800a514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a516:	1ad3      	subs	r3, r2, r3
 800a518:	2b02      	cmp	r3, #2
 800a51a:	d901      	bls.n	800a520 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800a51c:	2303      	movs	r3, #3
 800a51e:	e10b      	b.n	800a738 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a520:	4b4d      	ldr	r3, [pc, #308]	@ (800a658 <HAL_RCC_OscConfig+0x6c4>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d1f0      	bne.n	800a50e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a52c:	4b4a      	ldr	r3, [pc, #296]	@ (800a658 <HAL_RCC_OscConfig+0x6c4>)
 800a52e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a530:	4b4a      	ldr	r3, [pc, #296]	@ (800a65c <HAL_RCC_OscConfig+0x6c8>)
 800a532:	4013      	ands	r3, r2
 800a534:	687a      	ldr	r2, [r7, #4]
 800a536:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800a538:	687a      	ldr	r2, [r7, #4]
 800a53a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800a53c:	0112      	lsls	r2, r2, #4
 800a53e:	430a      	orrs	r2, r1
 800a540:	4945      	ldr	r1, [pc, #276]	@ (800a658 <HAL_RCC_OscConfig+0x6c4>)
 800a542:	4313      	orrs	r3, r2
 800a544:	628b      	str	r3, [r1, #40]	@ 0x28
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a54a:	3b01      	subs	r3, #1
 800a54c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a554:	3b01      	subs	r3, #1
 800a556:	025b      	lsls	r3, r3, #9
 800a558:	b29b      	uxth	r3, r3
 800a55a:	431a      	orrs	r2, r3
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a560:	3b01      	subs	r3, #1
 800a562:	041b      	lsls	r3, r3, #16
 800a564:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a568:	431a      	orrs	r2, r3
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a56e:	3b01      	subs	r3, #1
 800a570:	061b      	lsls	r3, r3, #24
 800a572:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a576:	4938      	ldr	r1, [pc, #224]	@ (800a658 <HAL_RCC_OscConfig+0x6c4>)
 800a578:	4313      	orrs	r3, r2
 800a57a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a57c:	4b36      	ldr	r3, [pc, #216]	@ (800a658 <HAL_RCC_OscConfig+0x6c4>)
 800a57e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a580:	4a35      	ldr	r2, [pc, #212]	@ (800a658 <HAL_RCC_OscConfig+0x6c4>)
 800a582:	f023 0301 	bic.w	r3, r3, #1
 800a586:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a588:	4b33      	ldr	r3, [pc, #204]	@ (800a658 <HAL_RCC_OscConfig+0x6c4>)
 800a58a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a58c:	4b34      	ldr	r3, [pc, #208]	@ (800a660 <HAL_RCC_OscConfig+0x6cc>)
 800a58e:	4013      	ands	r3, r2
 800a590:	687a      	ldr	r2, [r7, #4]
 800a592:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a594:	00d2      	lsls	r2, r2, #3
 800a596:	4930      	ldr	r1, [pc, #192]	@ (800a658 <HAL_RCC_OscConfig+0x6c4>)
 800a598:	4313      	orrs	r3, r2
 800a59a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a59c:	4b2e      	ldr	r3, [pc, #184]	@ (800a658 <HAL_RCC_OscConfig+0x6c4>)
 800a59e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5a0:	f023 020c 	bic.w	r2, r3, #12
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5a8:	492b      	ldr	r1, [pc, #172]	@ (800a658 <HAL_RCC_OscConfig+0x6c4>)
 800a5aa:	4313      	orrs	r3, r2
 800a5ac:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a5ae:	4b2a      	ldr	r3, [pc, #168]	@ (800a658 <HAL_RCC_OscConfig+0x6c4>)
 800a5b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5b2:	f023 0202 	bic.w	r2, r3, #2
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5ba:	4927      	ldr	r1, [pc, #156]	@ (800a658 <HAL_RCC_OscConfig+0x6c4>)
 800a5bc:	4313      	orrs	r3, r2
 800a5be:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a5c0:	4b25      	ldr	r3, [pc, #148]	@ (800a658 <HAL_RCC_OscConfig+0x6c4>)
 800a5c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5c4:	4a24      	ldr	r2, [pc, #144]	@ (800a658 <HAL_RCC_OscConfig+0x6c4>)
 800a5c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a5ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5cc:	4b22      	ldr	r3, [pc, #136]	@ (800a658 <HAL_RCC_OscConfig+0x6c4>)
 800a5ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5d0:	4a21      	ldr	r2, [pc, #132]	@ (800a658 <HAL_RCC_OscConfig+0x6c4>)
 800a5d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a5d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a5d8:	4b1f      	ldr	r3, [pc, #124]	@ (800a658 <HAL_RCC_OscConfig+0x6c4>)
 800a5da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5dc:	4a1e      	ldr	r2, [pc, #120]	@ (800a658 <HAL_RCC_OscConfig+0x6c4>)
 800a5de:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a5e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a5e4:	4b1c      	ldr	r3, [pc, #112]	@ (800a658 <HAL_RCC_OscConfig+0x6c4>)
 800a5e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5e8:	4a1b      	ldr	r2, [pc, #108]	@ (800a658 <HAL_RCC_OscConfig+0x6c4>)
 800a5ea:	f043 0301 	orr.w	r3, r3, #1
 800a5ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a5f0:	4b19      	ldr	r3, [pc, #100]	@ (800a658 <HAL_RCC_OscConfig+0x6c4>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	4a18      	ldr	r2, [pc, #96]	@ (800a658 <HAL_RCC_OscConfig+0x6c4>)
 800a5f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a5fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5fc:	f7f9 fdf2 	bl	80041e4 <HAL_GetTick>
 800a600:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a602:	e008      	b.n	800a616 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a604:	f7f9 fdee 	bl	80041e4 <HAL_GetTick>
 800a608:	4602      	mov	r2, r0
 800a60a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a60c:	1ad3      	subs	r3, r2, r3
 800a60e:	2b02      	cmp	r3, #2
 800a610:	d901      	bls.n	800a616 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800a612:	2303      	movs	r3, #3
 800a614:	e090      	b.n	800a738 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a616:	4b10      	ldr	r3, [pc, #64]	@ (800a658 <HAL_RCC_OscConfig+0x6c4>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d0f0      	beq.n	800a604 <HAL_RCC_OscConfig+0x670>
 800a622:	e088      	b.n	800a736 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a624:	4b0c      	ldr	r3, [pc, #48]	@ (800a658 <HAL_RCC_OscConfig+0x6c4>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	4a0b      	ldr	r2, [pc, #44]	@ (800a658 <HAL_RCC_OscConfig+0x6c4>)
 800a62a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a62e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a630:	f7f9 fdd8 	bl	80041e4 <HAL_GetTick>
 800a634:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a636:	e008      	b.n	800a64a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a638:	f7f9 fdd4 	bl	80041e4 <HAL_GetTick>
 800a63c:	4602      	mov	r2, r0
 800a63e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a640:	1ad3      	subs	r3, r2, r3
 800a642:	2b02      	cmp	r3, #2
 800a644:	d901      	bls.n	800a64a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800a646:	2303      	movs	r3, #3
 800a648:	e076      	b.n	800a738 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a64a:	4b03      	ldr	r3, [pc, #12]	@ (800a658 <HAL_RCC_OscConfig+0x6c4>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a652:	2b00      	cmp	r3, #0
 800a654:	d1f0      	bne.n	800a638 <HAL_RCC_OscConfig+0x6a4>
 800a656:	e06e      	b.n	800a736 <HAL_RCC_OscConfig+0x7a2>
 800a658:	58024400 	.word	0x58024400
 800a65c:	fffffc0c 	.word	0xfffffc0c
 800a660:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a664:	4b36      	ldr	r3, [pc, #216]	@ (800a740 <HAL_RCC_OscConfig+0x7ac>)
 800a666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a668:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a66a:	4b35      	ldr	r3, [pc, #212]	@ (800a740 <HAL_RCC_OscConfig+0x7ac>)
 800a66c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a66e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a674:	2b01      	cmp	r3, #1
 800a676:	d031      	beq.n	800a6dc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	f003 0203 	and.w	r2, r3, #3
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a682:	429a      	cmp	r2, r3
 800a684:	d12a      	bne.n	800a6dc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	091b      	lsrs	r3, r3, #4
 800a68a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a692:	429a      	cmp	r2, r3
 800a694:	d122      	bne.n	800a6dc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	d11a      	bne.n	800a6dc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	0a5b      	lsrs	r3, r3, #9
 800a6aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6b2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d111      	bne.n	800a6dc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	0c1b      	lsrs	r3, r3, #16
 800a6bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a6c6:	429a      	cmp	r2, r3
 800a6c8:	d108      	bne.n	800a6dc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	0e1b      	lsrs	r3, r3, #24
 800a6ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6d6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	d001      	beq.n	800a6e0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800a6dc:	2301      	movs	r3, #1
 800a6de:	e02b      	b.n	800a738 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a6e0:	4b17      	ldr	r3, [pc, #92]	@ (800a740 <HAL_RCC_OscConfig+0x7ac>)
 800a6e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6e4:	08db      	lsrs	r3, r3, #3
 800a6e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a6ea:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a6f0:	693a      	ldr	r2, [r7, #16]
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d01f      	beq.n	800a736 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a6f6:	4b12      	ldr	r3, [pc, #72]	@ (800a740 <HAL_RCC_OscConfig+0x7ac>)
 800a6f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6fa:	4a11      	ldr	r2, [pc, #68]	@ (800a740 <HAL_RCC_OscConfig+0x7ac>)
 800a6fc:	f023 0301 	bic.w	r3, r3, #1
 800a700:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a702:	f7f9 fd6f 	bl	80041e4 <HAL_GetTick>
 800a706:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a708:	bf00      	nop
 800a70a:	f7f9 fd6b 	bl	80041e4 <HAL_GetTick>
 800a70e:	4602      	mov	r2, r0
 800a710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a712:	4293      	cmp	r3, r2
 800a714:	d0f9      	beq.n	800a70a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a716:	4b0a      	ldr	r3, [pc, #40]	@ (800a740 <HAL_RCC_OscConfig+0x7ac>)
 800a718:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a71a:	4b0a      	ldr	r3, [pc, #40]	@ (800a744 <HAL_RCC_OscConfig+0x7b0>)
 800a71c:	4013      	ands	r3, r2
 800a71e:	687a      	ldr	r2, [r7, #4]
 800a720:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a722:	00d2      	lsls	r2, r2, #3
 800a724:	4906      	ldr	r1, [pc, #24]	@ (800a740 <HAL_RCC_OscConfig+0x7ac>)
 800a726:	4313      	orrs	r3, r2
 800a728:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a72a:	4b05      	ldr	r3, [pc, #20]	@ (800a740 <HAL_RCC_OscConfig+0x7ac>)
 800a72c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a72e:	4a04      	ldr	r2, [pc, #16]	@ (800a740 <HAL_RCC_OscConfig+0x7ac>)
 800a730:	f043 0301 	orr.w	r3, r3, #1
 800a734:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a736:	2300      	movs	r3, #0
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3730      	adds	r7, #48	@ 0x30
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}
 800a740:	58024400 	.word	0x58024400
 800a744:	ffff0007 	.word	0xffff0007

0800a748 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b086      	sub	sp, #24
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d101      	bne.n	800a75c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a758:	2301      	movs	r3, #1
 800a75a:	e19c      	b.n	800aa96 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a75c:	4b8a      	ldr	r3, [pc, #552]	@ (800a988 <HAL_RCC_ClockConfig+0x240>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f003 030f 	and.w	r3, r3, #15
 800a764:	683a      	ldr	r2, [r7, #0]
 800a766:	429a      	cmp	r2, r3
 800a768:	d910      	bls.n	800a78c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a76a:	4b87      	ldr	r3, [pc, #540]	@ (800a988 <HAL_RCC_ClockConfig+0x240>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f023 020f 	bic.w	r2, r3, #15
 800a772:	4985      	ldr	r1, [pc, #532]	@ (800a988 <HAL_RCC_ClockConfig+0x240>)
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	4313      	orrs	r3, r2
 800a778:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a77a:	4b83      	ldr	r3, [pc, #524]	@ (800a988 <HAL_RCC_ClockConfig+0x240>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f003 030f 	and.w	r3, r3, #15
 800a782:	683a      	ldr	r2, [r7, #0]
 800a784:	429a      	cmp	r2, r3
 800a786:	d001      	beq.n	800a78c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a788:	2301      	movs	r3, #1
 800a78a:	e184      	b.n	800aa96 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f003 0304 	and.w	r3, r3, #4
 800a794:	2b00      	cmp	r3, #0
 800a796:	d010      	beq.n	800a7ba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	691a      	ldr	r2, [r3, #16]
 800a79c:	4b7b      	ldr	r3, [pc, #492]	@ (800a98c <HAL_RCC_ClockConfig+0x244>)
 800a79e:	699b      	ldr	r3, [r3, #24]
 800a7a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	d908      	bls.n	800a7ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a7a8:	4b78      	ldr	r3, [pc, #480]	@ (800a98c <HAL_RCC_ClockConfig+0x244>)
 800a7aa:	699b      	ldr	r3, [r3, #24]
 800a7ac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	691b      	ldr	r3, [r3, #16]
 800a7b4:	4975      	ldr	r1, [pc, #468]	@ (800a98c <HAL_RCC_ClockConfig+0x244>)
 800a7b6:	4313      	orrs	r3, r2
 800a7b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f003 0308 	and.w	r3, r3, #8
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d010      	beq.n	800a7e8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	695a      	ldr	r2, [r3, #20]
 800a7ca:	4b70      	ldr	r3, [pc, #448]	@ (800a98c <HAL_RCC_ClockConfig+0x244>)
 800a7cc:	69db      	ldr	r3, [r3, #28]
 800a7ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	d908      	bls.n	800a7e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a7d6:	4b6d      	ldr	r3, [pc, #436]	@ (800a98c <HAL_RCC_ClockConfig+0x244>)
 800a7d8:	69db      	ldr	r3, [r3, #28]
 800a7da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	695b      	ldr	r3, [r3, #20]
 800a7e2:	496a      	ldr	r1, [pc, #424]	@ (800a98c <HAL_RCC_ClockConfig+0x244>)
 800a7e4:	4313      	orrs	r3, r2
 800a7e6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f003 0310 	and.w	r3, r3, #16
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d010      	beq.n	800a816 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	699a      	ldr	r2, [r3, #24]
 800a7f8:	4b64      	ldr	r3, [pc, #400]	@ (800a98c <HAL_RCC_ClockConfig+0x244>)
 800a7fa:	69db      	ldr	r3, [r3, #28]
 800a7fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a800:	429a      	cmp	r2, r3
 800a802:	d908      	bls.n	800a816 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a804:	4b61      	ldr	r3, [pc, #388]	@ (800a98c <HAL_RCC_ClockConfig+0x244>)
 800a806:	69db      	ldr	r3, [r3, #28]
 800a808:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	699b      	ldr	r3, [r3, #24]
 800a810:	495e      	ldr	r1, [pc, #376]	@ (800a98c <HAL_RCC_ClockConfig+0x244>)
 800a812:	4313      	orrs	r3, r2
 800a814:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f003 0320 	and.w	r3, r3, #32
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d010      	beq.n	800a844 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	69da      	ldr	r2, [r3, #28]
 800a826:	4b59      	ldr	r3, [pc, #356]	@ (800a98c <HAL_RCC_ClockConfig+0x244>)
 800a828:	6a1b      	ldr	r3, [r3, #32]
 800a82a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a82e:	429a      	cmp	r2, r3
 800a830:	d908      	bls.n	800a844 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a832:	4b56      	ldr	r3, [pc, #344]	@ (800a98c <HAL_RCC_ClockConfig+0x244>)
 800a834:	6a1b      	ldr	r3, [r3, #32]
 800a836:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	69db      	ldr	r3, [r3, #28]
 800a83e:	4953      	ldr	r1, [pc, #332]	@ (800a98c <HAL_RCC_ClockConfig+0x244>)
 800a840:	4313      	orrs	r3, r2
 800a842:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f003 0302 	and.w	r3, r3, #2
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d010      	beq.n	800a872 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	68da      	ldr	r2, [r3, #12]
 800a854:	4b4d      	ldr	r3, [pc, #308]	@ (800a98c <HAL_RCC_ClockConfig+0x244>)
 800a856:	699b      	ldr	r3, [r3, #24]
 800a858:	f003 030f 	and.w	r3, r3, #15
 800a85c:	429a      	cmp	r2, r3
 800a85e:	d908      	bls.n	800a872 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a860:	4b4a      	ldr	r3, [pc, #296]	@ (800a98c <HAL_RCC_ClockConfig+0x244>)
 800a862:	699b      	ldr	r3, [r3, #24]
 800a864:	f023 020f 	bic.w	r2, r3, #15
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	68db      	ldr	r3, [r3, #12]
 800a86c:	4947      	ldr	r1, [pc, #284]	@ (800a98c <HAL_RCC_ClockConfig+0x244>)
 800a86e:	4313      	orrs	r3, r2
 800a870:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f003 0301 	and.w	r3, r3, #1
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d055      	beq.n	800a92a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a87e:	4b43      	ldr	r3, [pc, #268]	@ (800a98c <HAL_RCC_ClockConfig+0x244>)
 800a880:	699b      	ldr	r3, [r3, #24]
 800a882:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	689b      	ldr	r3, [r3, #8]
 800a88a:	4940      	ldr	r1, [pc, #256]	@ (800a98c <HAL_RCC_ClockConfig+0x244>)
 800a88c:	4313      	orrs	r3, r2
 800a88e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	685b      	ldr	r3, [r3, #4]
 800a894:	2b02      	cmp	r3, #2
 800a896:	d107      	bne.n	800a8a8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a898:	4b3c      	ldr	r3, [pc, #240]	@ (800a98c <HAL_RCC_ClockConfig+0x244>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d121      	bne.n	800a8e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	e0f6      	b.n	800aa96 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	685b      	ldr	r3, [r3, #4]
 800a8ac:	2b03      	cmp	r3, #3
 800a8ae:	d107      	bne.n	800a8c0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a8b0:	4b36      	ldr	r3, [pc, #216]	@ (800a98c <HAL_RCC_ClockConfig+0x244>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d115      	bne.n	800a8e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a8bc:	2301      	movs	r3, #1
 800a8be:	e0ea      	b.n	800aa96 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	2b01      	cmp	r3, #1
 800a8c6:	d107      	bne.n	800a8d8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a8c8:	4b30      	ldr	r3, [pc, #192]	@ (800a98c <HAL_RCC_ClockConfig+0x244>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d109      	bne.n	800a8e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	e0de      	b.n	800aa96 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a8d8:	4b2c      	ldr	r3, [pc, #176]	@ (800a98c <HAL_RCC_ClockConfig+0x244>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f003 0304 	and.w	r3, r3, #4
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d101      	bne.n	800a8e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	e0d6      	b.n	800aa96 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a8e8:	4b28      	ldr	r3, [pc, #160]	@ (800a98c <HAL_RCC_ClockConfig+0x244>)
 800a8ea:	691b      	ldr	r3, [r3, #16]
 800a8ec:	f023 0207 	bic.w	r2, r3, #7
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	4925      	ldr	r1, [pc, #148]	@ (800a98c <HAL_RCC_ClockConfig+0x244>)
 800a8f6:	4313      	orrs	r3, r2
 800a8f8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a8fa:	f7f9 fc73 	bl	80041e4 <HAL_GetTick>
 800a8fe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a900:	e00a      	b.n	800a918 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a902:	f7f9 fc6f 	bl	80041e4 <HAL_GetTick>
 800a906:	4602      	mov	r2, r0
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	1ad3      	subs	r3, r2, r3
 800a90c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a910:	4293      	cmp	r3, r2
 800a912:	d901      	bls.n	800a918 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a914:	2303      	movs	r3, #3
 800a916:	e0be      	b.n	800aa96 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a918:	4b1c      	ldr	r3, [pc, #112]	@ (800a98c <HAL_RCC_ClockConfig+0x244>)
 800a91a:	691b      	ldr	r3, [r3, #16]
 800a91c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	00db      	lsls	r3, r3, #3
 800a926:	429a      	cmp	r2, r3
 800a928:	d1eb      	bne.n	800a902 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f003 0302 	and.w	r3, r3, #2
 800a932:	2b00      	cmp	r3, #0
 800a934:	d010      	beq.n	800a958 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	68da      	ldr	r2, [r3, #12]
 800a93a:	4b14      	ldr	r3, [pc, #80]	@ (800a98c <HAL_RCC_ClockConfig+0x244>)
 800a93c:	699b      	ldr	r3, [r3, #24]
 800a93e:	f003 030f 	and.w	r3, r3, #15
 800a942:	429a      	cmp	r2, r3
 800a944:	d208      	bcs.n	800a958 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a946:	4b11      	ldr	r3, [pc, #68]	@ (800a98c <HAL_RCC_ClockConfig+0x244>)
 800a948:	699b      	ldr	r3, [r3, #24]
 800a94a:	f023 020f 	bic.w	r2, r3, #15
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	68db      	ldr	r3, [r3, #12]
 800a952:	490e      	ldr	r1, [pc, #56]	@ (800a98c <HAL_RCC_ClockConfig+0x244>)
 800a954:	4313      	orrs	r3, r2
 800a956:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a958:	4b0b      	ldr	r3, [pc, #44]	@ (800a988 <HAL_RCC_ClockConfig+0x240>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f003 030f 	and.w	r3, r3, #15
 800a960:	683a      	ldr	r2, [r7, #0]
 800a962:	429a      	cmp	r2, r3
 800a964:	d214      	bcs.n	800a990 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a966:	4b08      	ldr	r3, [pc, #32]	@ (800a988 <HAL_RCC_ClockConfig+0x240>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f023 020f 	bic.w	r2, r3, #15
 800a96e:	4906      	ldr	r1, [pc, #24]	@ (800a988 <HAL_RCC_ClockConfig+0x240>)
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	4313      	orrs	r3, r2
 800a974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a976:	4b04      	ldr	r3, [pc, #16]	@ (800a988 <HAL_RCC_ClockConfig+0x240>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f003 030f 	and.w	r3, r3, #15
 800a97e:	683a      	ldr	r2, [r7, #0]
 800a980:	429a      	cmp	r2, r3
 800a982:	d005      	beq.n	800a990 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a984:	2301      	movs	r3, #1
 800a986:	e086      	b.n	800aa96 <HAL_RCC_ClockConfig+0x34e>
 800a988:	52002000 	.word	0x52002000
 800a98c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f003 0304 	and.w	r3, r3, #4
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d010      	beq.n	800a9be <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	691a      	ldr	r2, [r3, #16]
 800a9a0:	4b3f      	ldr	r3, [pc, #252]	@ (800aaa0 <HAL_RCC_ClockConfig+0x358>)
 800a9a2:	699b      	ldr	r3, [r3, #24]
 800a9a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	d208      	bcs.n	800a9be <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a9ac:	4b3c      	ldr	r3, [pc, #240]	@ (800aaa0 <HAL_RCC_ClockConfig+0x358>)
 800a9ae:	699b      	ldr	r3, [r3, #24]
 800a9b0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	691b      	ldr	r3, [r3, #16]
 800a9b8:	4939      	ldr	r1, [pc, #228]	@ (800aaa0 <HAL_RCC_ClockConfig+0x358>)
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f003 0308 	and.w	r3, r3, #8
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d010      	beq.n	800a9ec <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	695a      	ldr	r2, [r3, #20]
 800a9ce:	4b34      	ldr	r3, [pc, #208]	@ (800aaa0 <HAL_RCC_ClockConfig+0x358>)
 800a9d0:	69db      	ldr	r3, [r3, #28]
 800a9d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d208      	bcs.n	800a9ec <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a9da:	4b31      	ldr	r3, [pc, #196]	@ (800aaa0 <HAL_RCC_ClockConfig+0x358>)
 800a9dc:	69db      	ldr	r3, [r3, #28]
 800a9de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	695b      	ldr	r3, [r3, #20]
 800a9e6:	492e      	ldr	r1, [pc, #184]	@ (800aaa0 <HAL_RCC_ClockConfig+0x358>)
 800a9e8:	4313      	orrs	r3, r2
 800a9ea:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f003 0310 	and.w	r3, r3, #16
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d010      	beq.n	800aa1a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	699a      	ldr	r2, [r3, #24]
 800a9fc:	4b28      	ldr	r3, [pc, #160]	@ (800aaa0 <HAL_RCC_ClockConfig+0x358>)
 800a9fe:	69db      	ldr	r3, [r3, #28]
 800aa00:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d208      	bcs.n	800aa1a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800aa08:	4b25      	ldr	r3, [pc, #148]	@ (800aaa0 <HAL_RCC_ClockConfig+0x358>)
 800aa0a:	69db      	ldr	r3, [r3, #28]
 800aa0c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	699b      	ldr	r3, [r3, #24]
 800aa14:	4922      	ldr	r1, [pc, #136]	@ (800aaa0 <HAL_RCC_ClockConfig+0x358>)
 800aa16:	4313      	orrs	r3, r2
 800aa18:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f003 0320 	and.w	r3, r3, #32
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d010      	beq.n	800aa48 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	69da      	ldr	r2, [r3, #28]
 800aa2a:	4b1d      	ldr	r3, [pc, #116]	@ (800aaa0 <HAL_RCC_ClockConfig+0x358>)
 800aa2c:	6a1b      	ldr	r3, [r3, #32]
 800aa2e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800aa32:	429a      	cmp	r2, r3
 800aa34:	d208      	bcs.n	800aa48 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800aa36:	4b1a      	ldr	r3, [pc, #104]	@ (800aaa0 <HAL_RCC_ClockConfig+0x358>)
 800aa38:	6a1b      	ldr	r3, [r3, #32]
 800aa3a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	69db      	ldr	r3, [r3, #28]
 800aa42:	4917      	ldr	r1, [pc, #92]	@ (800aaa0 <HAL_RCC_ClockConfig+0x358>)
 800aa44:	4313      	orrs	r3, r2
 800aa46:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800aa48:	f000 f834 	bl	800aab4 <HAL_RCC_GetSysClockFreq>
 800aa4c:	4602      	mov	r2, r0
 800aa4e:	4b14      	ldr	r3, [pc, #80]	@ (800aaa0 <HAL_RCC_ClockConfig+0x358>)
 800aa50:	699b      	ldr	r3, [r3, #24]
 800aa52:	0a1b      	lsrs	r3, r3, #8
 800aa54:	f003 030f 	and.w	r3, r3, #15
 800aa58:	4912      	ldr	r1, [pc, #72]	@ (800aaa4 <HAL_RCC_ClockConfig+0x35c>)
 800aa5a:	5ccb      	ldrb	r3, [r1, r3]
 800aa5c:	f003 031f 	and.w	r3, r3, #31
 800aa60:	fa22 f303 	lsr.w	r3, r2, r3
 800aa64:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aa66:	4b0e      	ldr	r3, [pc, #56]	@ (800aaa0 <HAL_RCC_ClockConfig+0x358>)
 800aa68:	699b      	ldr	r3, [r3, #24]
 800aa6a:	f003 030f 	and.w	r3, r3, #15
 800aa6e:	4a0d      	ldr	r2, [pc, #52]	@ (800aaa4 <HAL_RCC_ClockConfig+0x35c>)
 800aa70:	5cd3      	ldrb	r3, [r2, r3]
 800aa72:	f003 031f 	and.w	r3, r3, #31
 800aa76:	693a      	ldr	r2, [r7, #16]
 800aa78:	fa22 f303 	lsr.w	r3, r2, r3
 800aa7c:	4a0a      	ldr	r2, [pc, #40]	@ (800aaa8 <HAL_RCC_ClockConfig+0x360>)
 800aa7e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800aa80:	4a0a      	ldr	r2, [pc, #40]	@ (800aaac <HAL_RCC_ClockConfig+0x364>)
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800aa86:	4b0a      	ldr	r3, [pc, #40]	@ (800aab0 <HAL_RCC_ClockConfig+0x368>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f7f9 fb60 	bl	8004150 <HAL_InitTick>
 800aa90:	4603      	mov	r3, r0
 800aa92:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800aa94:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3718      	adds	r7, #24
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
 800aa9e:	bf00      	nop
 800aaa0:	58024400 	.word	0x58024400
 800aaa4:	08018860 	.word	0x08018860
 800aaa8:	24000014 	.word	0x24000014
 800aaac:	24000010 	.word	0x24000010
 800aab0:	24000018 	.word	0x24000018

0800aab4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b089      	sub	sp, #36	@ 0x24
 800aab8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800aaba:	4bb3      	ldr	r3, [pc, #716]	@ (800ad88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aabc:	691b      	ldr	r3, [r3, #16]
 800aabe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aac2:	2b18      	cmp	r3, #24
 800aac4:	f200 8155 	bhi.w	800ad72 <HAL_RCC_GetSysClockFreq+0x2be>
 800aac8:	a201      	add	r2, pc, #4	@ (adr r2, 800aad0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800aaca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aace:	bf00      	nop
 800aad0:	0800ab35 	.word	0x0800ab35
 800aad4:	0800ad73 	.word	0x0800ad73
 800aad8:	0800ad73 	.word	0x0800ad73
 800aadc:	0800ad73 	.word	0x0800ad73
 800aae0:	0800ad73 	.word	0x0800ad73
 800aae4:	0800ad73 	.word	0x0800ad73
 800aae8:	0800ad73 	.word	0x0800ad73
 800aaec:	0800ad73 	.word	0x0800ad73
 800aaf0:	0800ab5b 	.word	0x0800ab5b
 800aaf4:	0800ad73 	.word	0x0800ad73
 800aaf8:	0800ad73 	.word	0x0800ad73
 800aafc:	0800ad73 	.word	0x0800ad73
 800ab00:	0800ad73 	.word	0x0800ad73
 800ab04:	0800ad73 	.word	0x0800ad73
 800ab08:	0800ad73 	.word	0x0800ad73
 800ab0c:	0800ad73 	.word	0x0800ad73
 800ab10:	0800ab61 	.word	0x0800ab61
 800ab14:	0800ad73 	.word	0x0800ad73
 800ab18:	0800ad73 	.word	0x0800ad73
 800ab1c:	0800ad73 	.word	0x0800ad73
 800ab20:	0800ad73 	.word	0x0800ad73
 800ab24:	0800ad73 	.word	0x0800ad73
 800ab28:	0800ad73 	.word	0x0800ad73
 800ab2c:	0800ad73 	.word	0x0800ad73
 800ab30:	0800ab67 	.word	0x0800ab67
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab34:	4b94      	ldr	r3, [pc, #592]	@ (800ad88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f003 0320 	and.w	r3, r3, #32
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d009      	beq.n	800ab54 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab40:	4b91      	ldr	r3, [pc, #580]	@ (800ad88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	08db      	lsrs	r3, r3, #3
 800ab46:	f003 0303 	and.w	r3, r3, #3
 800ab4a:	4a90      	ldr	r2, [pc, #576]	@ (800ad8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ab4c:	fa22 f303 	lsr.w	r3, r2, r3
 800ab50:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800ab52:	e111      	b.n	800ad78 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ab54:	4b8d      	ldr	r3, [pc, #564]	@ (800ad8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ab56:	61bb      	str	r3, [r7, #24]
      break;
 800ab58:	e10e      	b.n	800ad78 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800ab5a:	4b8d      	ldr	r3, [pc, #564]	@ (800ad90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ab5c:	61bb      	str	r3, [r7, #24]
      break;
 800ab5e:	e10b      	b.n	800ad78 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800ab60:	4b8c      	ldr	r3, [pc, #560]	@ (800ad94 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800ab62:	61bb      	str	r3, [r7, #24]
      break;
 800ab64:	e108      	b.n	800ad78 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ab66:	4b88      	ldr	r3, [pc, #544]	@ (800ad88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab6a:	f003 0303 	and.w	r3, r3, #3
 800ab6e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800ab70:	4b85      	ldr	r3, [pc, #532]	@ (800ad88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab74:	091b      	lsrs	r3, r3, #4
 800ab76:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ab7a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ab7c:	4b82      	ldr	r3, [pc, #520]	@ (800ad88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab80:	f003 0301 	and.w	r3, r3, #1
 800ab84:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ab86:	4b80      	ldr	r3, [pc, #512]	@ (800ad88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab8a:	08db      	lsrs	r3, r3, #3
 800ab8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab90:	68fa      	ldr	r2, [r7, #12]
 800ab92:	fb02 f303 	mul.w	r3, r2, r3
 800ab96:	ee07 3a90 	vmov	s15, r3
 800ab9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab9e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	f000 80e1 	beq.w	800ad6c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	2b02      	cmp	r3, #2
 800abae:	f000 8083 	beq.w	800acb8 <HAL_RCC_GetSysClockFreq+0x204>
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	2b02      	cmp	r3, #2
 800abb6:	f200 80a1 	bhi.w	800acfc <HAL_RCC_GetSysClockFreq+0x248>
 800abba:	697b      	ldr	r3, [r7, #20]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d003      	beq.n	800abc8 <HAL_RCC_GetSysClockFreq+0x114>
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	2b01      	cmp	r3, #1
 800abc4:	d056      	beq.n	800ac74 <HAL_RCC_GetSysClockFreq+0x1c0>
 800abc6:	e099      	b.n	800acfc <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800abc8:	4b6f      	ldr	r3, [pc, #444]	@ (800ad88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f003 0320 	and.w	r3, r3, #32
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d02d      	beq.n	800ac30 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800abd4:	4b6c      	ldr	r3, [pc, #432]	@ (800ad88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	08db      	lsrs	r3, r3, #3
 800abda:	f003 0303 	and.w	r3, r3, #3
 800abde:	4a6b      	ldr	r2, [pc, #428]	@ (800ad8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800abe0:	fa22 f303 	lsr.w	r3, r2, r3
 800abe4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	ee07 3a90 	vmov	s15, r3
 800abec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	ee07 3a90 	vmov	s15, r3
 800abf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abfe:	4b62      	ldr	r3, [pc, #392]	@ (800ad88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac06:	ee07 3a90 	vmov	s15, r3
 800ac0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac0e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac12:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800ad98 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ac16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac2a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800ac2e:	e087      	b.n	800ad40 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	ee07 3a90 	vmov	s15, r3
 800ac36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac3a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800ad9c <HAL_RCC_GetSysClockFreq+0x2e8>
 800ac3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac42:	4b51      	ldr	r3, [pc, #324]	@ (800ad88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac4a:	ee07 3a90 	vmov	s15, r3
 800ac4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac52:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac56:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800ad98 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ac5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ac72:	e065      	b.n	800ad40 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	ee07 3a90 	vmov	s15, r3
 800ac7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac7e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800ada0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ac82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac86:	4b40      	ldr	r3, [pc, #256]	@ (800ad88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac8e:	ee07 3a90 	vmov	s15, r3
 800ac92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac96:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac9a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800ad98 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ac9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aca6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800acaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800acb6:	e043      	b.n	800ad40 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	ee07 3a90 	vmov	s15, r3
 800acbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acc2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800ada4 <HAL_RCC_GetSysClockFreq+0x2f0>
 800acc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acca:	4b2f      	ldr	r3, [pc, #188]	@ (800ad88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800accc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acd2:	ee07 3a90 	vmov	s15, r3
 800acd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acda:	ed97 6a02 	vldr	s12, [r7, #8]
 800acde:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800ad98 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ace2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ace6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800acee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acf6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800acfa:	e021      	b.n	800ad40 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	ee07 3a90 	vmov	s15, r3
 800ad02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad06:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800ada0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ad0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad0e:	4b1e      	ldr	r3, [pc, #120]	@ (800ad88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad16:	ee07 3a90 	vmov	s15, r3
 800ad1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad1e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad22:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800ad98 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ad26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ad3e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800ad40:	4b11      	ldr	r3, [pc, #68]	@ (800ad88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad44:	0a5b      	lsrs	r3, r3, #9
 800ad46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad4a:	3301      	adds	r3, #1
 800ad4c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	ee07 3a90 	vmov	s15, r3
 800ad54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ad58:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad64:	ee17 3a90 	vmov	r3, s15
 800ad68:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800ad6a:	e005      	b.n	800ad78 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	61bb      	str	r3, [r7, #24]
      break;
 800ad70:	e002      	b.n	800ad78 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800ad72:	4b07      	ldr	r3, [pc, #28]	@ (800ad90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ad74:	61bb      	str	r3, [r7, #24]
      break;
 800ad76:	bf00      	nop
  }

  return sysclockfreq;
 800ad78:	69bb      	ldr	r3, [r7, #24]
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3724      	adds	r7, #36	@ 0x24
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad84:	4770      	bx	lr
 800ad86:	bf00      	nop
 800ad88:	58024400 	.word	0x58024400
 800ad8c:	03d09000 	.word	0x03d09000
 800ad90:	003d0900 	.word	0x003d0900
 800ad94:	016e3600 	.word	0x016e3600
 800ad98:	46000000 	.word	0x46000000
 800ad9c:	4c742400 	.word	0x4c742400
 800ada0:	4a742400 	.word	0x4a742400
 800ada4:	4bb71b00 	.word	0x4bb71b00

0800ada8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b082      	sub	sp, #8
 800adac:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800adae:	f7ff fe81 	bl	800aab4 <HAL_RCC_GetSysClockFreq>
 800adb2:	4602      	mov	r2, r0
 800adb4:	4b10      	ldr	r3, [pc, #64]	@ (800adf8 <HAL_RCC_GetHCLKFreq+0x50>)
 800adb6:	699b      	ldr	r3, [r3, #24]
 800adb8:	0a1b      	lsrs	r3, r3, #8
 800adba:	f003 030f 	and.w	r3, r3, #15
 800adbe:	490f      	ldr	r1, [pc, #60]	@ (800adfc <HAL_RCC_GetHCLKFreq+0x54>)
 800adc0:	5ccb      	ldrb	r3, [r1, r3]
 800adc2:	f003 031f 	and.w	r3, r3, #31
 800adc6:	fa22 f303 	lsr.w	r3, r2, r3
 800adca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800adcc:	4b0a      	ldr	r3, [pc, #40]	@ (800adf8 <HAL_RCC_GetHCLKFreq+0x50>)
 800adce:	699b      	ldr	r3, [r3, #24]
 800add0:	f003 030f 	and.w	r3, r3, #15
 800add4:	4a09      	ldr	r2, [pc, #36]	@ (800adfc <HAL_RCC_GetHCLKFreq+0x54>)
 800add6:	5cd3      	ldrb	r3, [r2, r3]
 800add8:	f003 031f 	and.w	r3, r3, #31
 800addc:	687a      	ldr	r2, [r7, #4]
 800adde:	fa22 f303 	lsr.w	r3, r2, r3
 800ade2:	4a07      	ldr	r2, [pc, #28]	@ (800ae00 <HAL_RCC_GetHCLKFreq+0x58>)
 800ade4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ade6:	4a07      	ldr	r2, [pc, #28]	@ (800ae04 <HAL_RCC_GetHCLKFreq+0x5c>)
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800adec:	4b04      	ldr	r3, [pc, #16]	@ (800ae00 <HAL_RCC_GetHCLKFreq+0x58>)
 800adee:	681b      	ldr	r3, [r3, #0]
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3708      	adds	r7, #8
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}
 800adf8:	58024400 	.word	0x58024400
 800adfc:	08018860 	.word	0x08018860
 800ae00:	24000014 	.word	0x24000014
 800ae04:	24000010 	.word	0x24000010

0800ae08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ae0c:	f7ff ffcc 	bl	800ada8 <HAL_RCC_GetHCLKFreq>
 800ae10:	4602      	mov	r2, r0
 800ae12:	4b06      	ldr	r3, [pc, #24]	@ (800ae2c <HAL_RCC_GetPCLK1Freq+0x24>)
 800ae14:	69db      	ldr	r3, [r3, #28]
 800ae16:	091b      	lsrs	r3, r3, #4
 800ae18:	f003 0307 	and.w	r3, r3, #7
 800ae1c:	4904      	ldr	r1, [pc, #16]	@ (800ae30 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ae1e:	5ccb      	ldrb	r3, [r1, r3]
 800ae20:	f003 031f 	and.w	r3, r3, #31
 800ae24:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	bd80      	pop	{r7, pc}
 800ae2c:	58024400 	.word	0x58024400
 800ae30:	08018860 	.word	0x08018860

0800ae34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ae38:	f7ff ffb6 	bl	800ada8 <HAL_RCC_GetHCLKFreq>
 800ae3c:	4602      	mov	r2, r0
 800ae3e:	4b06      	ldr	r3, [pc, #24]	@ (800ae58 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ae40:	69db      	ldr	r3, [r3, #28]
 800ae42:	0a1b      	lsrs	r3, r3, #8
 800ae44:	f003 0307 	and.w	r3, r3, #7
 800ae48:	4904      	ldr	r1, [pc, #16]	@ (800ae5c <HAL_RCC_GetPCLK2Freq+0x28>)
 800ae4a:	5ccb      	ldrb	r3, [r1, r3]
 800ae4c:	f003 031f 	and.w	r3, r3, #31
 800ae50:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	bd80      	pop	{r7, pc}
 800ae58:	58024400 	.word	0x58024400
 800ae5c:	08018860 	.word	0x08018860

0800ae60 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ae60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ae64:	b0c6      	sub	sp, #280	@ 0x118
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ae72:	2300      	movs	r3, #0
 800ae74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ae78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae80:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800ae84:	2500      	movs	r5, #0
 800ae86:	ea54 0305 	orrs.w	r3, r4, r5
 800ae8a:	d049      	beq.n	800af20 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800ae8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae92:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ae96:	d02f      	beq.n	800aef8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800ae98:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ae9c:	d828      	bhi.n	800aef0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ae9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800aea2:	d01a      	beq.n	800aeda <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800aea4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800aea8:	d822      	bhi.n	800aef0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d003      	beq.n	800aeb6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800aeae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aeb2:	d007      	beq.n	800aec4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800aeb4:	e01c      	b.n	800aef0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aeb6:	4bab      	ldr	r3, [pc, #684]	@ (800b164 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aeb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeba:	4aaa      	ldr	r2, [pc, #680]	@ (800b164 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aebc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aec0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800aec2:	e01a      	b.n	800aefa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aec8:	3308      	adds	r3, #8
 800aeca:	2102      	movs	r1, #2
 800aecc:	4618      	mov	r0, r3
 800aece:	f002 fa49 	bl	800d364 <RCCEx_PLL2_Config>
 800aed2:	4603      	mov	r3, r0
 800aed4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800aed8:	e00f      	b.n	800aefa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aeda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aede:	3328      	adds	r3, #40	@ 0x28
 800aee0:	2102      	movs	r1, #2
 800aee2:	4618      	mov	r0, r3
 800aee4:	f002 faf0 	bl	800d4c8 <RCCEx_PLL3_Config>
 800aee8:	4603      	mov	r3, r0
 800aeea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800aeee:	e004      	b.n	800aefa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aef0:	2301      	movs	r3, #1
 800aef2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800aef6:	e000      	b.n	800aefa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800aef8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aefa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d10a      	bne.n	800af18 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800af02:	4b98      	ldr	r3, [pc, #608]	@ (800b164 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800af04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af06:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800af0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800af10:	4a94      	ldr	r2, [pc, #592]	@ (800b164 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800af12:	430b      	orrs	r3, r1
 800af14:	6513      	str	r3, [r2, #80]	@ 0x50
 800af16:	e003      	b.n	800af20 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800af1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800af20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af28:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800af2c:	f04f 0900 	mov.w	r9, #0
 800af30:	ea58 0309 	orrs.w	r3, r8, r9
 800af34:	d047      	beq.n	800afc6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800af36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af3c:	2b04      	cmp	r3, #4
 800af3e:	d82a      	bhi.n	800af96 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800af40:	a201      	add	r2, pc, #4	@ (adr r2, 800af48 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800af42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af46:	bf00      	nop
 800af48:	0800af5d 	.word	0x0800af5d
 800af4c:	0800af6b 	.word	0x0800af6b
 800af50:	0800af81 	.word	0x0800af81
 800af54:	0800af9f 	.word	0x0800af9f
 800af58:	0800af9f 	.word	0x0800af9f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af5c:	4b81      	ldr	r3, [pc, #516]	@ (800b164 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800af5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af60:	4a80      	ldr	r2, [pc, #512]	@ (800b164 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800af62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800af66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800af68:	e01a      	b.n	800afa0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af6e:	3308      	adds	r3, #8
 800af70:	2100      	movs	r1, #0
 800af72:	4618      	mov	r0, r3
 800af74:	f002 f9f6 	bl	800d364 <RCCEx_PLL2_Config>
 800af78:	4603      	mov	r3, r0
 800af7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800af7e:	e00f      	b.n	800afa0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800af80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af84:	3328      	adds	r3, #40	@ 0x28
 800af86:	2100      	movs	r1, #0
 800af88:	4618      	mov	r0, r3
 800af8a:	f002 fa9d 	bl	800d4c8 <RCCEx_PLL3_Config>
 800af8e:	4603      	mov	r3, r0
 800af90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800af94:	e004      	b.n	800afa0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af96:	2301      	movs	r3, #1
 800af98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800af9c:	e000      	b.n	800afa0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800af9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800afa0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d10a      	bne.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800afa8:	4b6e      	ldr	r3, [pc, #440]	@ (800b164 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800afaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800afac:	f023 0107 	bic.w	r1, r3, #7
 800afb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800afb6:	4a6b      	ldr	r2, [pc, #428]	@ (800b164 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800afb8:	430b      	orrs	r3, r1
 800afba:	6513      	str	r3, [r2, #80]	@ 0x50
 800afbc:	e003      	b.n	800afc6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afbe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800afc2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800afc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afce:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800afd2:	f04f 0b00 	mov.w	fp, #0
 800afd6:	ea5a 030b 	orrs.w	r3, sl, fp
 800afda:	d05b      	beq.n	800b094 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800afdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afe0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800afe4:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800afe8:	d03b      	beq.n	800b062 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800afea:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800afee:	d834      	bhi.n	800b05a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800aff0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800aff4:	d037      	beq.n	800b066 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800aff6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800affa:	d82e      	bhi.n	800b05a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800affc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b000:	d033      	beq.n	800b06a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800b002:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b006:	d828      	bhi.n	800b05a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b008:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b00c:	d01a      	beq.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800b00e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b012:	d822      	bhi.n	800b05a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b014:	2b00      	cmp	r3, #0
 800b016:	d003      	beq.n	800b020 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800b018:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b01c:	d007      	beq.n	800b02e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800b01e:	e01c      	b.n	800b05a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b020:	4b50      	ldr	r3, [pc, #320]	@ (800b164 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b024:	4a4f      	ldr	r2, [pc, #316]	@ (800b164 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b026:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b02a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b02c:	e01e      	b.n	800b06c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b02e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b032:	3308      	adds	r3, #8
 800b034:	2100      	movs	r1, #0
 800b036:	4618      	mov	r0, r3
 800b038:	f002 f994 	bl	800d364 <RCCEx_PLL2_Config>
 800b03c:	4603      	mov	r3, r0
 800b03e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b042:	e013      	b.n	800b06c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b044:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b048:	3328      	adds	r3, #40	@ 0x28
 800b04a:	2100      	movs	r1, #0
 800b04c:	4618      	mov	r0, r3
 800b04e:	f002 fa3b 	bl	800d4c8 <RCCEx_PLL3_Config>
 800b052:	4603      	mov	r3, r0
 800b054:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b058:	e008      	b.n	800b06c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b05a:	2301      	movs	r3, #1
 800b05c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b060:	e004      	b.n	800b06c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b062:	bf00      	nop
 800b064:	e002      	b.n	800b06c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b066:	bf00      	nop
 800b068:	e000      	b.n	800b06c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b06a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b06c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b070:	2b00      	cmp	r3, #0
 800b072:	d10b      	bne.n	800b08c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b074:	4b3b      	ldr	r3, [pc, #236]	@ (800b164 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b078:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800b07c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b080:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b084:	4a37      	ldr	r2, [pc, #220]	@ (800b164 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b086:	430b      	orrs	r3, r1
 800b088:	6593      	str	r3, [r2, #88]	@ 0x58
 800b08a:	e003      	b.n	800b094 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b08c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b090:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b094:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b09c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800b0a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b0aa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800b0ae:	460b      	mov	r3, r1
 800b0b0:	4313      	orrs	r3, r2
 800b0b2:	d05d      	beq.n	800b170 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b0b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b0bc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800b0c0:	d03b      	beq.n	800b13a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800b0c2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800b0c6:	d834      	bhi.n	800b132 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b0c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b0cc:	d037      	beq.n	800b13e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800b0ce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b0d2:	d82e      	bhi.n	800b132 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b0d4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b0d8:	d033      	beq.n	800b142 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800b0da:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b0de:	d828      	bhi.n	800b132 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b0e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b0e4:	d01a      	beq.n	800b11c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800b0e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b0ea:	d822      	bhi.n	800b132 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d003      	beq.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800b0f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b0f4:	d007      	beq.n	800b106 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800b0f6:	e01c      	b.n	800b132 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b0f8:	4b1a      	ldr	r3, [pc, #104]	@ (800b164 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b0fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0fc:	4a19      	ldr	r2, [pc, #100]	@ (800b164 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b0fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b102:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b104:	e01e      	b.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b106:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b10a:	3308      	adds	r3, #8
 800b10c:	2100      	movs	r1, #0
 800b10e:	4618      	mov	r0, r3
 800b110:	f002 f928 	bl	800d364 <RCCEx_PLL2_Config>
 800b114:	4603      	mov	r3, r0
 800b116:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b11a:	e013      	b.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b11c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b120:	3328      	adds	r3, #40	@ 0x28
 800b122:	2100      	movs	r1, #0
 800b124:	4618      	mov	r0, r3
 800b126:	f002 f9cf 	bl	800d4c8 <RCCEx_PLL3_Config>
 800b12a:	4603      	mov	r3, r0
 800b12c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b130:	e008      	b.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b132:	2301      	movs	r3, #1
 800b134:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b138:	e004      	b.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b13a:	bf00      	nop
 800b13c:	e002      	b.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b13e:	bf00      	nop
 800b140:	e000      	b.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b142:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b144:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d10d      	bne.n	800b168 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b14c:	4b05      	ldr	r3, [pc, #20]	@ (800b164 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b14e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b150:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800b154:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b158:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b15c:	4a01      	ldr	r2, [pc, #4]	@ (800b164 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b15e:	430b      	orrs	r3, r1
 800b160:	6593      	str	r3, [r2, #88]	@ 0x58
 800b162:	e005      	b.n	800b170 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800b164:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b168:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b16c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b170:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b178:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800b17c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b180:	2300      	movs	r3, #0
 800b182:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b186:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800b18a:	460b      	mov	r3, r1
 800b18c:	4313      	orrs	r3, r2
 800b18e:	d03a      	beq.n	800b206 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800b190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b196:	2b30      	cmp	r3, #48	@ 0x30
 800b198:	d01f      	beq.n	800b1da <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800b19a:	2b30      	cmp	r3, #48	@ 0x30
 800b19c:	d819      	bhi.n	800b1d2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800b19e:	2b20      	cmp	r3, #32
 800b1a0:	d00c      	beq.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800b1a2:	2b20      	cmp	r3, #32
 800b1a4:	d815      	bhi.n	800b1d2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d019      	beq.n	800b1de <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b1aa:	2b10      	cmp	r3, #16
 800b1ac:	d111      	bne.n	800b1d2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1ae:	4baa      	ldr	r3, [pc, #680]	@ (800b458 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b1b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1b2:	4aa9      	ldr	r2, [pc, #676]	@ (800b458 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b1b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b1b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b1ba:	e011      	b.n	800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b1bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1c0:	3308      	adds	r3, #8
 800b1c2:	2102      	movs	r1, #2
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f002 f8cd 	bl	800d364 <RCCEx_PLL2_Config>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b1d0:	e006      	b.n	800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b1d8:	e002      	b.n	800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800b1da:	bf00      	nop
 800b1dc:	e000      	b.n	800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800b1de:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d10a      	bne.n	800b1fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b1e8:	4b9b      	ldr	r3, [pc, #620]	@ (800b458 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b1ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b1ec:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800b1f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b1f6:	4a98      	ldr	r2, [pc, #608]	@ (800b458 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b1f8:	430b      	orrs	r3, r1
 800b1fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b1fc:	e003      	b.n	800b206 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b202:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b206:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b20e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800b212:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b216:	2300      	movs	r3, #0
 800b218:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b21c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800b220:	460b      	mov	r3, r1
 800b222:	4313      	orrs	r3, r2
 800b224:	d051      	beq.n	800b2ca <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b226:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b22a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b22c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b230:	d035      	beq.n	800b29e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800b232:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b236:	d82e      	bhi.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b238:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b23c:	d031      	beq.n	800b2a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800b23e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b242:	d828      	bhi.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b244:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b248:	d01a      	beq.n	800b280 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800b24a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b24e:	d822      	bhi.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b250:	2b00      	cmp	r3, #0
 800b252:	d003      	beq.n	800b25c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800b254:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b258:	d007      	beq.n	800b26a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800b25a:	e01c      	b.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b25c:	4b7e      	ldr	r3, [pc, #504]	@ (800b458 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b25e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b260:	4a7d      	ldr	r2, [pc, #500]	@ (800b458 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b262:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b266:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b268:	e01c      	b.n	800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b26a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b26e:	3308      	adds	r3, #8
 800b270:	2100      	movs	r1, #0
 800b272:	4618      	mov	r0, r3
 800b274:	f002 f876 	bl	800d364 <RCCEx_PLL2_Config>
 800b278:	4603      	mov	r3, r0
 800b27a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b27e:	e011      	b.n	800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b280:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b284:	3328      	adds	r3, #40	@ 0x28
 800b286:	2100      	movs	r1, #0
 800b288:	4618      	mov	r0, r3
 800b28a:	f002 f91d 	bl	800d4c8 <RCCEx_PLL3_Config>
 800b28e:	4603      	mov	r3, r0
 800b290:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b294:	e006      	b.n	800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b296:	2301      	movs	r3, #1
 800b298:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b29c:	e002      	b.n	800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800b29e:	bf00      	nop
 800b2a0:	e000      	b.n	800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800b2a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d10a      	bne.n	800b2c2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b2ac:	4b6a      	ldr	r3, [pc, #424]	@ (800b458 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b2ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b2b0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800b2b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b2ba:	4a67      	ldr	r2, [pc, #412]	@ (800b458 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b2bc:	430b      	orrs	r3, r1
 800b2be:	6513      	str	r3, [r2, #80]	@ 0x50
 800b2c0:	e003      	b.n	800b2ca <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b2c6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b2ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800b2d6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b2da:	2300      	movs	r3, #0
 800b2dc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b2e0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800b2e4:	460b      	mov	r3, r1
 800b2e6:	4313      	orrs	r3, r2
 800b2e8:	d053      	beq.n	800b392 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b2ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b2f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b2f4:	d033      	beq.n	800b35e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800b2f6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b2fa:	d82c      	bhi.n	800b356 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b2fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b300:	d02f      	beq.n	800b362 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800b302:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b306:	d826      	bhi.n	800b356 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b308:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b30c:	d02b      	beq.n	800b366 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800b30e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b312:	d820      	bhi.n	800b356 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b314:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b318:	d012      	beq.n	800b340 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800b31a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b31e:	d81a      	bhi.n	800b356 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b320:	2b00      	cmp	r3, #0
 800b322:	d022      	beq.n	800b36a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800b324:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b328:	d115      	bne.n	800b356 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b32a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b32e:	3308      	adds	r3, #8
 800b330:	2101      	movs	r1, #1
 800b332:	4618      	mov	r0, r3
 800b334:	f002 f816 	bl	800d364 <RCCEx_PLL2_Config>
 800b338:	4603      	mov	r3, r0
 800b33a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b33e:	e015      	b.n	800b36c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b344:	3328      	adds	r3, #40	@ 0x28
 800b346:	2101      	movs	r1, #1
 800b348:	4618      	mov	r0, r3
 800b34a:	f002 f8bd 	bl	800d4c8 <RCCEx_PLL3_Config>
 800b34e:	4603      	mov	r3, r0
 800b350:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b354:	e00a      	b.n	800b36c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b356:	2301      	movs	r3, #1
 800b358:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b35c:	e006      	b.n	800b36c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b35e:	bf00      	nop
 800b360:	e004      	b.n	800b36c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b362:	bf00      	nop
 800b364:	e002      	b.n	800b36c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b366:	bf00      	nop
 800b368:	e000      	b.n	800b36c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b36a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b36c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b370:	2b00      	cmp	r3, #0
 800b372:	d10a      	bne.n	800b38a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b374:	4b38      	ldr	r3, [pc, #224]	@ (800b458 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b376:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b378:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800b37c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b380:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b382:	4a35      	ldr	r2, [pc, #212]	@ (800b458 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b384:	430b      	orrs	r3, r1
 800b386:	6513      	str	r3, [r2, #80]	@ 0x50
 800b388:	e003      	b.n	800b392 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b38a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b38e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b392:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b39a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800b39e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b3a8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b3ac:	460b      	mov	r3, r1
 800b3ae:	4313      	orrs	r3, r2
 800b3b0:	d058      	beq.n	800b464 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b3b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b3b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b3ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b3be:	d033      	beq.n	800b428 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800b3c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b3c4:	d82c      	bhi.n	800b420 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b3c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b3ca:	d02f      	beq.n	800b42c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800b3cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b3d0:	d826      	bhi.n	800b420 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b3d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b3d6:	d02b      	beq.n	800b430 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800b3d8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b3dc:	d820      	bhi.n	800b420 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b3de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b3e2:	d012      	beq.n	800b40a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800b3e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b3e8:	d81a      	bhi.n	800b420 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d022      	beq.n	800b434 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b3ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b3f2:	d115      	bne.n	800b420 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b3f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b3f8:	3308      	adds	r3, #8
 800b3fa:	2101      	movs	r1, #1
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	f001 ffb1 	bl	800d364 <RCCEx_PLL2_Config>
 800b402:	4603      	mov	r3, r0
 800b404:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b408:	e015      	b.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b40a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b40e:	3328      	adds	r3, #40	@ 0x28
 800b410:	2101      	movs	r1, #1
 800b412:	4618      	mov	r0, r3
 800b414:	f002 f858 	bl	800d4c8 <RCCEx_PLL3_Config>
 800b418:	4603      	mov	r3, r0
 800b41a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b41e:	e00a      	b.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b420:	2301      	movs	r3, #1
 800b422:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b426:	e006      	b.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b428:	bf00      	nop
 800b42a:	e004      	b.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b42c:	bf00      	nop
 800b42e:	e002      	b.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b430:	bf00      	nop
 800b432:	e000      	b.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b434:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b436:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d10e      	bne.n	800b45c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b43e:	4b06      	ldr	r3, [pc, #24]	@ (800b458 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b442:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800b446:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b44a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b44e:	4a02      	ldr	r2, [pc, #8]	@ (800b458 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b450:	430b      	orrs	r3, r1
 800b452:	6593      	str	r3, [r2, #88]	@ 0x58
 800b454:	e006      	b.n	800b464 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800b456:	bf00      	nop
 800b458:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b45c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b460:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b464:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b46c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800b470:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b474:	2300      	movs	r3, #0
 800b476:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b47a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800b47e:	460b      	mov	r3, r1
 800b480:	4313      	orrs	r3, r2
 800b482:	d037      	beq.n	800b4f4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b484:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b488:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b48a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b48e:	d00e      	beq.n	800b4ae <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800b490:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b494:	d816      	bhi.n	800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800b496:	2b00      	cmp	r3, #0
 800b498:	d018      	beq.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800b49a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b49e:	d111      	bne.n	800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b4a0:	4bc4      	ldr	r3, [pc, #784]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b4a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4a4:	4ac3      	ldr	r2, [pc, #780]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b4a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b4aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b4ac:	e00f      	b.n	800b4ce <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b4ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4b2:	3308      	adds	r3, #8
 800b4b4:	2101      	movs	r1, #1
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f001 ff54 	bl	800d364 <RCCEx_PLL2_Config>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b4c2:	e004      	b.n	800b4ce <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b4ca:	e000      	b.n	800b4ce <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800b4cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d10a      	bne.n	800b4ec <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b4d6:	4bb7      	ldr	r3, [pc, #732]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b4d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4da:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800b4de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b4e4:	4ab3      	ldr	r2, [pc, #716]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b4e6:	430b      	orrs	r3, r1
 800b4e8:	6513      	str	r3, [r2, #80]	@ 0x50
 800b4ea:	e003      	b.n	800b4f4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b4f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b4f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4fc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800b500:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b504:	2300      	movs	r3, #0
 800b506:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b50a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800b50e:	460b      	mov	r3, r1
 800b510:	4313      	orrs	r3, r2
 800b512:	d039      	beq.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b514:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b518:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b51a:	2b03      	cmp	r3, #3
 800b51c:	d81c      	bhi.n	800b558 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800b51e:	a201      	add	r2, pc, #4	@ (adr r2, 800b524 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800b520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b524:	0800b561 	.word	0x0800b561
 800b528:	0800b535 	.word	0x0800b535
 800b52c:	0800b543 	.word	0x0800b543
 800b530:	0800b561 	.word	0x0800b561
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b534:	4b9f      	ldr	r3, [pc, #636]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b538:	4a9e      	ldr	r2, [pc, #632]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b53a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b53e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b540:	e00f      	b.n	800b562 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b542:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b546:	3308      	adds	r3, #8
 800b548:	2102      	movs	r1, #2
 800b54a:	4618      	mov	r0, r3
 800b54c:	f001 ff0a 	bl	800d364 <RCCEx_PLL2_Config>
 800b550:	4603      	mov	r3, r0
 800b552:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b556:	e004      	b.n	800b562 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b558:	2301      	movs	r3, #1
 800b55a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b55e:	e000      	b.n	800b562 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800b560:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b562:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b566:	2b00      	cmp	r3, #0
 800b568:	d10a      	bne.n	800b580 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b56a:	4b92      	ldr	r3, [pc, #584]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b56c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b56e:	f023 0103 	bic.w	r1, r3, #3
 800b572:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b576:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b578:	4a8e      	ldr	r2, [pc, #568]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b57a:	430b      	orrs	r3, r1
 800b57c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b57e:	e003      	b.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b580:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b584:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b588:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b590:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800b594:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b598:	2300      	movs	r3, #0
 800b59a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b59e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b5a2:	460b      	mov	r3, r1
 800b5a4:	4313      	orrs	r3, r2
 800b5a6:	f000 8099 	beq.w	800b6dc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b5aa:	4b83      	ldr	r3, [pc, #524]	@ (800b7b8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	4a82      	ldr	r2, [pc, #520]	@ (800b7b8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b5b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b5b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b5b6:	f7f8 fe15 	bl	80041e4 <HAL_GetTick>
 800b5ba:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b5be:	e00b      	b.n	800b5d8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b5c0:	f7f8 fe10 	bl	80041e4 <HAL_GetTick>
 800b5c4:	4602      	mov	r2, r0
 800b5c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800b5ca:	1ad3      	subs	r3, r2, r3
 800b5cc:	2b64      	cmp	r3, #100	@ 0x64
 800b5ce:	d903      	bls.n	800b5d8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800b5d0:	2303      	movs	r3, #3
 800b5d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b5d6:	e005      	b.n	800b5e4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b5d8:	4b77      	ldr	r3, [pc, #476]	@ (800b7b8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d0ed      	beq.n	800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800b5e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d173      	bne.n	800b6d4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b5ec:	4b71      	ldr	r3, [pc, #452]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b5ee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800b5f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b5f8:	4053      	eors	r3, r2
 800b5fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d015      	beq.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b602:	4b6c      	ldr	r3, [pc, #432]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b606:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b60a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b60e:	4b69      	ldr	r3, [pc, #420]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b612:	4a68      	ldr	r2, [pc, #416]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b614:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b618:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b61a:	4b66      	ldr	r3, [pc, #408]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b61c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b61e:	4a65      	ldr	r2, [pc, #404]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b620:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b624:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b626:	4a63      	ldr	r2, [pc, #396]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b628:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b62c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b62e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b632:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b636:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b63a:	d118      	bne.n	800b66e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b63c:	f7f8 fdd2 	bl	80041e4 <HAL_GetTick>
 800b640:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b644:	e00d      	b.n	800b662 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b646:	f7f8 fdcd 	bl	80041e4 <HAL_GetTick>
 800b64a:	4602      	mov	r2, r0
 800b64c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800b650:	1ad2      	subs	r2, r2, r3
 800b652:	f241 3388 	movw	r3, #5000	@ 0x1388
 800b656:	429a      	cmp	r2, r3
 800b658:	d903      	bls.n	800b662 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800b65a:	2303      	movs	r3, #3
 800b65c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800b660:	e005      	b.n	800b66e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b662:	4b54      	ldr	r3, [pc, #336]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b666:	f003 0302 	and.w	r3, r3, #2
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d0eb      	beq.n	800b646 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800b66e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b672:	2b00      	cmp	r3, #0
 800b674:	d129      	bne.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b676:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b67a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b67e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b682:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b686:	d10e      	bne.n	800b6a6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800b688:	4b4a      	ldr	r3, [pc, #296]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b68a:	691b      	ldr	r3, [r3, #16]
 800b68c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800b690:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b694:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b698:	091a      	lsrs	r2, r3, #4
 800b69a:	4b48      	ldr	r3, [pc, #288]	@ (800b7bc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800b69c:	4013      	ands	r3, r2
 800b69e:	4a45      	ldr	r2, [pc, #276]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b6a0:	430b      	orrs	r3, r1
 800b6a2:	6113      	str	r3, [r2, #16]
 800b6a4:	e005      	b.n	800b6b2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800b6a6:	4b43      	ldr	r3, [pc, #268]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b6a8:	691b      	ldr	r3, [r3, #16]
 800b6aa:	4a42      	ldr	r2, [pc, #264]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b6ac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b6b0:	6113      	str	r3, [r2, #16]
 800b6b2:	4b40      	ldr	r3, [pc, #256]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b6b4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800b6b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b6be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b6c2:	4a3c      	ldr	r2, [pc, #240]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b6c4:	430b      	orrs	r3, r1
 800b6c6:	6713      	str	r3, [r2, #112]	@ 0x70
 800b6c8:	e008      	b.n	800b6dc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b6ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b6ce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800b6d2:	e003      	b.n	800b6dc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b6d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b6dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e4:	f002 0301 	and.w	r3, r2, #1
 800b6e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b6f2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800b6f6:	460b      	mov	r3, r1
 800b6f8:	4313      	orrs	r3, r2
 800b6fa:	f000 808f 	beq.w	800b81c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b6fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b702:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b704:	2b28      	cmp	r3, #40	@ 0x28
 800b706:	d871      	bhi.n	800b7ec <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800b708:	a201      	add	r2, pc, #4	@ (adr r2, 800b710 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800b70a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b70e:	bf00      	nop
 800b710:	0800b7f5 	.word	0x0800b7f5
 800b714:	0800b7ed 	.word	0x0800b7ed
 800b718:	0800b7ed 	.word	0x0800b7ed
 800b71c:	0800b7ed 	.word	0x0800b7ed
 800b720:	0800b7ed 	.word	0x0800b7ed
 800b724:	0800b7ed 	.word	0x0800b7ed
 800b728:	0800b7ed 	.word	0x0800b7ed
 800b72c:	0800b7ed 	.word	0x0800b7ed
 800b730:	0800b7c1 	.word	0x0800b7c1
 800b734:	0800b7ed 	.word	0x0800b7ed
 800b738:	0800b7ed 	.word	0x0800b7ed
 800b73c:	0800b7ed 	.word	0x0800b7ed
 800b740:	0800b7ed 	.word	0x0800b7ed
 800b744:	0800b7ed 	.word	0x0800b7ed
 800b748:	0800b7ed 	.word	0x0800b7ed
 800b74c:	0800b7ed 	.word	0x0800b7ed
 800b750:	0800b7d7 	.word	0x0800b7d7
 800b754:	0800b7ed 	.word	0x0800b7ed
 800b758:	0800b7ed 	.word	0x0800b7ed
 800b75c:	0800b7ed 	.word	0x0800b7ed
 800b760:	0800b7ed 	.word	0x0800b7ed
 800b764:	0800b7ed 	.word	0x0800b7ed
 800b768:	0800b7ed 	.word	0x0800b7ed
 800b76c:	0800b7ed 	.word	0x0800b7ed
 800b770:	0800b7f5 	.word	0x0800b7f5
 800b774:	0800b7ed 	.word	0x0800b7ed
 800b778:	0800b7ed 	.word	0x0800b7ed
 800b77c:	0800b7ed 	.word	0x0800b7ed
 800b780:	0800b7ed 	.word	0x0800b7ed
 800b784:	0800b7ed 	.word	0x0800b7ed
 800b788:	0800b7ed 	.word	0x0800b7ed
 800b78c:	0800b7ed 	.word	0x0800b7ed
 800b790:	0800b7f5 	.word	0x0800b7f5
 800b794:	0800b7ed 	.word	0x0800b7ed
 800b798:	0800b7ed 	.word	0x0800b7ed
 800b79c:	0800b7ed 	.word	0x0800b7ed
 800b7a0:	0800b7ed 	.word	0x0800b7ed
 800b7a4:	0800b7ed 	.word	0x0800b7ed
 800b7a8:	0800b7ed 	.word	0x0800b7ed
 800b7ac:	0800b7ed 	.word	0x0800b7ed
 800b7b0:	0800b7f5 	.word	0x0800b7f5
 800b7b4:	58024400 	.word	0x58024400
 800b7b8:	58024800 	.word	0x58024800
 800b7bc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b7c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7c4:	3308      	adds	r3, #8
 800b7c6:	2101      	movs	r1, #1
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f001 fdcb 	bl	800d364 <RCCEx_PLL2_Config>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b7d4:	e00f      	b.n	800b7f6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b7d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7da:	3328      	adds	r3, #40	@ 0x28
 800b7dc:	2101      	movs	r1, #1
 800b7de:	4618      	mov	r0, r3
 800b7e0:	f001 fe72 	bl	800d4c8 <RCCEx_PLL3_Config>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b7ea:	e004      	b.n	800b7f6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b7f2:	e000      	b.n	800b7f6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800b7f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d10a      	bne.n	800b814 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b7fe:	4bbf      	ldr	r3, [pc, #764]	@ (800bafc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b800:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b802:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800b806:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b80a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b80c:	4abb      	ldr	r2, [pc, #748]	@ (800bafc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b80e:	430b      	orrs	r3, r1
 800b810:	6553      	str	r3, [r2, #84]	@ 0x54
 800b812:	e003      	b.n	800b81c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b814:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b818:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b81c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b824:	f002 0302 	and.w	r3, r2, #2
 800b828:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b82c:	2300      	movs	r3, #0
 800b82e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b832:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800b836:	460b      	mov	r3, r1
 800b838:	4313      	orrs	r3, r2
 800b83a:	d041      	beq.n	800b8c0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b83c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b840:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b842:	2b05      	cmp	r3, #5
 800b844:	d824      	bhi.n	800b890 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800b846:	a201      	add	r2, pc, #4	@ (adr r2, 800b84c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800b848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b84c:	0800b899 	.word	0x0800b899
 800b850:	0800b865 	.word	0x0800b865
 800b854:	0800b87b 	.word	0x0800b87b
 800b858:	0800b899 	.word	0x0800b899
 800b85c:	0800b899 	.word	0x0800b899
 800b860:	0800b899 	.word	0x0800b899
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b864:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b868:	3308      	adds	r3, #8
 800b86a:	2101      	movs	r1, #1
 800b86c:	4618      	mov	r0, r3
 800b86e:	f001 fd79 	bl	800d364 <RCCEx_PLL2_Config>
 800b872:	4603      	mov	r3, r0
 800b874:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b878:	e00f      	b.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b87a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b87e:	3328      	adds	r3, #40	@ 0x28
 800b880:	2101      	movs	r1, #1
 800b882:	4618      	mov	r0, r3
 800b884:	f001 fe20 	bl	800d4c8 <RCCEx_PLL3_Config>
 800b888:	4603      	mov	r3, r0
 800b88a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b88e:	e004      	b.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b890:	2301      	movs	r3, #1
 800b892:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b896:	e000      	b.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800b898:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b89a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d10a      	bne.n	800b8b8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b8a2:	4b96      	ldr	r3, [pc, #600]	@ (800bafc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b8a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8a6:	f023 0107 	bic.w	r1, r3, #7
 800b8aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b8b0:	4a92      	ldr	r2, [pc, #584]	@ (800bafc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b8b2:	430b      	orrs	r3, r1
 800b8b4:	6553      	str	r3, [r2, #84]	@ 0x54
 800b8b6:	e003      	b.n	800b8c0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b8bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b8c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c8:	f002 0304 	and.w	r3, r2, #4
 800b8cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b8d6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b8da:	460b      	mov	r3, r1
 800b8dc:	4313      	orrs	r3, r2
 800b8de:	d044      	beq.n	800b96a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b8e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8e8:	2b05      	cmp	r3, #5
 800b8ea:	d825      	bhi.n	800b938 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800b8ec:	a201      	add	r2, pc, #4	@ (adr r2, 800b8f4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800b8ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8f2:	bf00      	nop
 800b8f4:	0800b941 	.word	0x0800b941
 800b8f8:	0800b90d 	.word	0x0800b90d
 800b8fc:	0800b923 	.word	0x0800b923
 800b900:	0800b941 	.word	0x0800b941
 800b904:	0800b941 	.word	0x0800b941
 800b908:	0800b941 	.word	0x0800b941
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b90c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b910:	3308      	adds	r3, #8
 800b912:	2101      	movs	r1, #1
 800b914:	4618      	mov	r0, r3
 800b916:	f001 fd25 	bl	800d364 <RCCEx_PLL2_Config>
 800b91a:	4603      	mov	r3, r0
 800b91c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b920:	e00f      	b.n	800b942 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b922:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b926:	3328      	adds	r3, #40	@ 0x28
 800b928:	2101      	movs	r1, #1
 800b92a:	4618      	mov	r0, r3
 800b92c:	f001 fdcc 	bl	800d4c8 <RCCEx_PLL3_Config>
 800b930:	4603      	mov	r3, r0
 800b932:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b936:	e004      	b.n	800b942 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b938:	2301      	movs	r3, #1
 800b93a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b93e:	e000      	b.n	800b942 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800b940:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b942:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b946:	2b00      	cmp	r3, #0
 800b948:	d10b      	bne.n	800b962 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b94a:	4b6c      	ldr	r3, [pc, #432]	@ (800bafc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b94c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b94e:	f023 0107 	bic.w	r1, r3, #7
 800b952:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b956:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b95a:	4a68      	ldr	r2, [pc, #416]	@ (800bafc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b95c:	430b      	orrs	r3, r1
 800b95e:	6593      	str	r3, [r2, #88]	@ 0x58
 800b960:	e003      	b.n	800b96a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b962:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b966:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b96a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b972:	f002 0320 	and.w	r3, r2, #32
 800b976:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b97a:	2300      	movs	r3, #0
 800b97c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b980:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800b984:	460b      	mov	r3, r1
 800b986:	4313      	orrs	r3, r2
 800b988:	d055      	beq.n	800ba36 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b98a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b98e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b992:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b996:	d033      	beq.n	800ba00 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800b998:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b99c:	d82c      	bhi.n	800b9f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b99e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b9a2:	d02f      	beq.n	800ba04 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800b9a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b9a8:	d826      	bhi.n	800b9f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b9aa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b9ae:	d02b      	beq.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800b9b0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b9b4:	d820      	bhi.n	800b9f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b9b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b9ba:	d012      	beq.n	800b9e2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800b9bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b9c0:	d81a      	bhi.n	800b9f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d022      	beq.n	800ba0c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800b9c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b9ca:	d115      	bne.n	800b9f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b9cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9d0:	3308      	adds	r3, #8
 800b9d2:	2100      	movs	r1, #0
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f001 fcc5 	bl	800d364 <RCCEx_PLL2_Config>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b9e0:	e015      	b.n	800ba0e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b9e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9e6:	3328      	adds	r3, #40	@ 0x28
 800b9e8:	2102      	movs	r1, #2
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	f001 fd6c 	bl	800d4c8 <RCCEx_PLL3_Config>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b9f6:	e00a      	b.n	800ba0e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b9fe:	e006      	b.n	800ba0e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ba00:	bf00      	nop
 800ba02:	e004      	b.n	800ba0e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ba04:	bf00      	nop
 800ba06:	e002      	b.n	800ba0e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ba08:	bf00      	nop
 800ba0a:	e000      	b.n	800ba0e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ba0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba0e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d10b      	bne.n	800ba2e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ba16:	4b39      	ldr	r3, [pc, #228]	@ (800bafc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ba18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba1a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800ba1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ba26:	4a35      	ldr	r2, [pc, #212]	@ (800bafc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ba28:	430b      	orrs	r3, r1
 800ba2a:	6553      	str	r3, [r2, #84]	@ 0x54
 800ba2c:	e003      	b.n	800ba36 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba2e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ba32:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ba36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba3e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800ba42:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ba46:	2300      	movs	r3, #0
 800ba48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ba4c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800ba50:	460b      	mov	r3, r1
 800ba52:	4313      	orrs	r3, r2
 800ba54:	d058      	beq.n	800bb08 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800ba56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ba5e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800ba62:	d033      	beq.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800ba64:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800ba68:	d82c      	bhi.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800ba6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ba6e:	d02f      	beq.n	800bad0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800ba70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ba74:	d826      	bhi.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800ba76:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ba7a:	d02b      	beq.n	800bad4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800ba7c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ba80:	d820      	bhi.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800ba82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ba86:	d012      	beq.n	800baae <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800ba88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ba8c:	d81a      	bhi.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d022      	beq.n	800bad8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800ba92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ba96:	d115      	bne.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ba98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba9c:	3308      	adds	r3, #8
 800ba9e:	2100      	movs	r1, #0
 800baa0:	4618      	mov	r0, r3
 800baa2:	f001 fc5f 	bl	800d364 <RCCEx_PLL2_Config>
 800baa6:	4603      	mov	r3, r0
 800baa8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800baac:	e015      	b.n	800bada <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800baae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bab2:	3328      	adds	r3, #40	@ 0x28
 800bab4:	2102      	movs	r1, #2
 800bab6:	4618      	mov	r0, r3
 800bab8:	f001 fd06 	bl	800d4c8 <RCCEx_PLL3_Config>
 800babc:	4603      	mov	r3, r0
 800babe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bac2:	e00a      	b.n	800bada <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bac4:	2301      	movs	r3, #1
 800bac6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800baca:	e006      	b.n	800bada <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800bacc:	bf00      	nop
 800bace:	e004      	b.n	800bada <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800bad0:	bf00      	nop
 800bad2:	e002      	b.n	800bada <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800bad4:	bf00      	nop
 800bad6:	e000      	b.n	800bada <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800bad8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bada:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d10e      	bne.n	800bb00 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bae2:	4b06      	ldr	r3, [pc, #24]	@ (800bafc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bae6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800baea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800baee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800baf2:	4a02      	ldr	r2, [pc, #8]	@ (800bafc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800baf4:	430b      	orrs	r3, r1
 800baf6:	6593      	str	r3, [r2, #88]	@ 0x58
 800baf8:	e006      	b.n	800bb08 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800bafa:	bf00      	nop
 800bafc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bb04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bb08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb10:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800bb14:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bb18:	2300      	movs	r3, #0
 800bb1a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800bb1e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800bb22:	460b      	mov	r3, r1
 800bb24:	4313      	orrs	r3, r2
 800bb26:	d055      	beq.n	800bbd4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800bb28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bb30:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800bb34:	d033      	beq.n	800bb9e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800bb36:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800bb3a:	d82c      	bhi.n	800bb96 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800bb3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bb40:	d02f      	beq.n	800bba2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800bb42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bb46:	d826      	bhi.n	800bb96 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800bb48:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800bb4c:	d02b      	beq.n	800bba6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800bb4e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800bb52:	d820      	bhi.n	800bb96 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800bb54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bb58:	d012      	beq.n	800bb80 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800bb5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bb5e:	d81a      	bhi.n	800bb96 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d022      	beq.n	800bbaa <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800bb64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bb68:	d115      	bne.n	800bb96 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bb6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb6e:	3308      	adds	r3, #8
 800bb70:	2100      	movs	r1, #0
 800bb72:	4618      	mov	r0, r3
 800bb74:	f001 fbf6 	bl	800d364 <RCCEx_PLL2_Config>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bb7e:	e015      	b.n	800bbac <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bb80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb84:	3328      	adds	r3, #40	@ 0x28
 800bb86:	2102      	movs	r1, #2
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f001 fc9d 	bl	800d4c8 <RCCEx_PLL3_Config>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bb94:	e00a      	b.n	800bbac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb96:	2301      	movs	r3, #1
 800bb98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bb9c:	e006      	b.n	800bbac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800bb9e:	bf00      	nop
 800bba0:	e004      	b.n	800bbac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800bba2:	bf00      	nop
 800bba4:	e002      	b.n	800bbac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800bba6:	bf00      	nop
 800bba8:	e000      	b.n	800bbac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800bbaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d10b      	bne.n	800bbcc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800bbb4:	4ba0      	ldr	r3, [pc, #640]	@ (800be38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bbb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bbb8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800bbbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bbc4:	4a9c      	ldr	r2, [pc, #624]	@ (800be38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bbc6:	430b      	orrs	r3, r1
 800bbc8:	6593      	str	r3, [r2, #88]	@ 0x58
 800bbca:	e003      	b.n	800bbd4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbcc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bbd0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800bbd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbdc:	f002 0308 	and.w	r3, r2, #8
 800bbe0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800bbea:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800bbee:	460b      	mov	r3, r1
 800bbf0:	4313      	orrs	r3, r2
 800bbf2:	d01e      	beq.n	800bc32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800bbf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bbfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bc00:	d10c      	bne.n	800bc1c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bc02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc06:	3328      	adds	r3, #40	@ 0x28
 800bc08:	2102      	movs	r1, #2
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f001 fc5c 	bl	800d4c8 <RCCEx_PLL3_Config>
 800bc10:	4603      	mov	r3, r0
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d002      	beq.n	800bc1c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800bc16:	2301      	movs	r3, #1
 800bc18:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800bc1c:	4b86      	ldr	r3, [pc, #536]	@ (800be38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bc1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc20:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800bc24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc2c:	4a82      	ldr	r2, [pc, #520]	@ (800be38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bc2e:	430b      	orrs	r3, r1
 800bc30:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bc32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc3a:	f002 0310 	and.w	r3, r2, #16
 800bc3e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bc42:	2300      	movs	r3, #0
 800bc44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bc48:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800bc4c:	460b      	mov	r3, r1
 800bc4e:	4313      	orrs	r3, r2
 800bc50:	d01e      	beq.n	800bc90 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800bc52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bc5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bc5e:	d10c      	bne.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bc60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc64:	3328      	adds	r3, #40	@ 0x28
 800bc66:	2102      	movs	r1, #2
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f001 fc2d 	bl	800d4c8 <RCCEx_PLL3_Config>
 800bc6e:	4603      	mov	r3, r0
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d002      	beq.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800bc74:	2301      	movs	r3, #1
 800bc76:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bc7a:	4b6f      	ldr	r3, [pc, #444]	@ (800be38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bc7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc7e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800bc82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bc8a:	4a6b      	ldr	r2, [pc, #428]	@ (800be38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bc8c:	430b      	orrs	r3, r1
 800bc8e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bc90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc98:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800bc9c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bc9e:	2300      	movs	r3, #0
 800bca0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800bca2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800bca6:	460b      	mov	r3, r1
 800bca8:	4313      	orrs	r3, r2
 800bcaa:	d03e      	beq.n	800bd2a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800bcac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcb0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bcb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bcb8:	d022      	beq.n	800bd00 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800bcba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bcbe:	d81b      	bhi.n	800bcf8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d003      	beq.n	800bccc <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800bcc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bcc8:	d00b      	beq.n	800bce2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800bcca:	e015      	b.n	800bcf8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcd0:	3308      	adds	r3, #8
 800bcd2:	2100      	movs	r1, #0
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	f001 fb45 	bl	800d364 <RCCEx_PLL2_Config>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bce0:	e00f      	b.n	800bd02 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bce6:	3328      	adds	r3, #40	@ 0x28
 800bce8:	2102      	movs	r1, #2
 800bcea:	4618      	mov	r0, r3
 800bcec:	f001 fbec 	bl	800d4c8 <RCCEx_PLL3_Config>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bcf6:	e004      	b.n	800bd02 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bcfe:	e000      	b.n	800bd02 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800bd00:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d10b      	bne.n	800bd22 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bd0a:	4b4b      	ldr	r3, [pc, #300]	@ (800be38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bd0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bd0e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800bd12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd16:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bd1a:	4a47      	ldr	r2, [pc, #284]	@ (800be38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bd1c:	430b      	orrs	r3, r1
 800bd1e:	6593      	str	r3, [r2, #88]	@ 0x58
 800bd20:	e003      	b.n	800bd2a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bd26:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bd2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd32:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800bd36:	673b      	str	r3, [r7, #112]	@ 0x70
 800bd38:	2300      	movs	r3, #0
 800bd3a:	677b      	str	r3, [r7, #116]	@ 0x74
 800bd3c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800bd40:	460b      	mov	r3, r1
 800bd42:	4313      	orrs	r3, r2
 800bd44:	d03b      	beq.n	800bdbe <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800bd46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bd4e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800bd52:	d01f      	beq.n	800bd94 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800bd54:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800bd58:	d818      	bhi.n	800bd8c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800bd5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bd5e:	d003      	beq.n	800bd68 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800bd60:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bd64:	d007      	beq.n	800bd76 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800bd66:	e011      	b.n	800bd8c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd68:	4b33      	ldr	r3, [pc, #204]	@ (800be38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bd6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd6c:	4a32      	ldr	r2, [pc, #200]	@ (800be38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bd6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bd72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800bd74:	e00f      	b.n	800bd96 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bd76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd7a:	3328      	adds	r3, #40	@ 0x28
 800bd7c:	2101      	movs	r1, #1
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f001 fba2 	bl	800d4c8 <RCCEx_PLL3_Config>
 800bd84:	4603      	mov	r3, r0
 800bd86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800bd8a:	e004      	b.n	800bd96 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bd92:	e000      	b.n	800bd96 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800bd94:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d10b      	bne.n	800bdb6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bd9e:	4b26      	ldr	r3, [pc, #152]	@ (800be38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bda0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bda2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800bda6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bdae:	4a22      	ldr	r2, [pc, #136]	@ (800be38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bdb0:	430b      	orrs	r3, r1
 800bdb2:	6553      	str	r3, [r2, #84]	@ 0x54
 800bdb4:	e003      	b.n	800bdbe <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdb6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bdba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bdbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800bdca:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bdcc:	2300      	movs	r3, #0
 800bdce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bdd0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800bdd4:	460b      	mov	r3, r1
 800bdd6:	4313      	orrs	r3, r2
 800bdd8:	d034      	beq.n	800be44 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800bdda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d003      	beq.n	800bdec <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800bde4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bde8:	d007      	beq.n	800bdfa <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800bdea:	e011      	b.n	800be10 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bdec:	4b12      	ldr	r3, [pc, #72]	@ (800be38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bdee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdf0:	4a11      	ldr	r2, [pc, #68]	@ (800be38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bdf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bdf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bdf8:	e00e      	b.n	800be18 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bdfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdfe:	3308      	adds	r3, #8
 800be00:	2102      	movs	r1, #2
 800be02:	4618      	mov	r0, r3
 800be04:	f001 faae 	bl	800d364 <RCCEx_PLL2_Config>
 800be08:	4603      	mov	r3, r0
 800be0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800be0e:	e003      	b.n	800be18 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800be10:	2301      	movs	r3, #1
 800be12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800be16:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d10d      	bne.n	800be3c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800be20:	4b05      	ldr	r3, [pc, #20]	@ (800be38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800be22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be24:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800be28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be2e:	4a02      	ldr	r2, [pc, #8]	@ (800be38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800be30:	430b      	orrs	r3, r1
 800be32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800be34:	e006      	b.n	800be44 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800be36:	bf00      	nop
 800be38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800be40:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800be44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be4c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800be50:	663b      	str	r3, [r7, #96]	@ 0x60
 800be52:	2300      	movs	r3, #0
 800be54:	667b      	str	r3, [r7, #100]	@ 0x64
 800be56:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800be5a:	460b      	mov	r3, r1
 800be5c:	4313      	orrs	r3, r2
 800be5e:	d00c      	beq.n	800be7a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800be60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be64:	3328      	adds	r3, #40	@ 0x28
 800be66:	2102      	movs	r1, #2
 800be68:	4618      	mov	r0, r3
 800be6a:	f001 fb2d 	bl	800d4c8 <RCCEx_PLL3_Config>
 800be6e:	4603      	mov	r3, r0
 800be70:	2b00      	cmp	r3, #0
 800be72:	d002      	beq.n	800be7a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800be74:	2301      	movs	r3, #1
 800be76:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800be7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be82:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800be86:	65bb      	str	r3, [r7, #88]	@ 0x58
 800be88:	2300      	movs	r3, #0
 800be8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800be8c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800be90:	460b      	mov	r3, r1
 800be92:	4313      	orrs	r3, r2
 800be94:	d036      	beq.n	800bf04 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800be96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800be9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bea0:	d018      	beq.n	800bed4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800bea2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bea6:	d811      	bhi.n	800becc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800bea8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800beac:	d014      	beq.n	800bed8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800beae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800beb2:	d80b      	bhi.n	800becc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d011      	beq.n	800bedc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800beb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bebc:	d106      	bne.n	800becc <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bebe:	4bb7      	ldr	r3, [pc, #732]	@ (800c19c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bec2:	4ab6      	ldr	r2, [pc, #728]	@ (800c19c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bec4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bec8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800beca:	e008      	b.n	800bede <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800becc:	2301      	movs	r3, #1
 800bece:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bed2:	e004      	b.n	800bede <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800bed4:	bf00      	nop
 800bed6:	e002      	b.n	800bede <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800bed8:	bf00      	nop
 800beda:	e000      	b.n	800bede <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800bedc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bede:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d10a      	bne.n	800befc <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bee6:	4bad      	ldr	r3, [pc, #692]	@ (800c19c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800beea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800beee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bef2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bef4:	4aa9      	ldr	r2, [pc, #676]	@ (800c19c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bef6:	430b      	orrs	r3, r1
 800bef8:	6553      	str	r3, [r2, #84]	@ 0x54
 800befa:	e003      	b.n	800bf04 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800befc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bf00:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bf04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf0c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800bf10:	653b      	str	r3, [r7, #80]	@ 0x50
 800bf12:	2300      	movs	r3, #0
 800bf14:	657b      	str	r3, [r7, #84]	@ 0x54
 800bf16:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800bf1a:	460b      	mov	r3, r1
 800bf1c:	4313      	orrs	r3, r2
 800bf1e:	d009      	beq.n	800bf34 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bf20:	4b9e      	ldr	r3, [pc, #632]	@ (800c19c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bf22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bf24:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bf28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bf2e:	4a9b      	ldr	r2, [pc, #620]	@ (800c19c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bf30:	430b      	orrs	r3, r1
 800bf32:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bf34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf3c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800bf40:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bf42:	2300      	movs	r3, #0
 800bf44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bf46:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800bf4a:	460b      	mov	r3, r1
 800bf4c:	4313      	orrs	r3, r2
 800bf4e:	d009      	beq.n	800bf64 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bf50:	4b92      	ldr	r3, [pc, #584]	@ (800c19c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bf52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bf54:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800bf58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bf5e:	4a8f      	ldr	r2, [pc, #572]	@ (800c19c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bf60:	430b      	orrs	r3, r1
 800bf62:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bf64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf6c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800bf70:	643b      	str	r3, [r7, #64]	@ 0x40
 800bf72:	2300      	movs	r3, #0
 800bf74:	647b      	str	r3, [r7, #68]	@ 0x44
 800bf76:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800bf7a:	460b      	mov	r3, r1
 800bf7c:	4313      	orrs	r3, r2
 800bf7e:	d00e      	beq.n	800bf9e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bf80:	4b86      	ldr	r3, [pc, #536]	@ (800c19c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bf82:	691b      	ldr	r3, [r3, #16]
 800bf84:	4a85      	ldr	r2, [pc, #532]	@ (800c19c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bf86:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bf8a:	6113      	str	r3, [r2, #16]
 800bf8c:	4b83      	ldr	r3, [pc, #524]	@ (800c19c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bf8e:	6919      	ldr	r1, [r3, #16]
 800bf90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf94:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800bf98:	4a80      	ldr	r2, [pc, #512]	@ (800c19c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bf9a:	430b      	orrs	r3, r1
 800bf9c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bf9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800bfaa:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bfac:	2300      	movs	r3, #0
 800bfae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bfb0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800bfb4:	460b      	mov	r3, r1
 800bfb6:	4313      	orrs	r3, r2
 800bfb8:	d009      	beq.n	800bfce <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bfba:	4b78      	ldr	r3, [pc, #480]	@ (800c19c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bfbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bfbe:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800bfc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bfc8:	4a74      	ldr	r2, [pc, #464]	@ (800c19c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bfca:	430b      	orrs	r3, r1
 800bfcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bfce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfd6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800bfda:	633b      	str	r3, [r7, #48]	@ 0x30
 800bfdc:	2300      	movs	r3, #0
 800bfde:	637b      	str	r3, [r7, #52]	@ 0x34
 800bfe0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800bfe4:	460b      	mov	r3, r1
 800bfe6:	4313      	orrs	r3, r2
 800bfe8:	d00a      	beq.n	800c000 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bfea:	4b6c      	ldr	r3, [pc, #432]	@ (800c19c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bfec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bfee:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800bff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bffa:	4a68      	ldr	r2, [pc, #416]	@ (800c19c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bffc:	430b      	orrs	r3, r1
 800bffe:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c000:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c008:	2100      	movs	r1, #0
 800c00a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800c00c:	f003 0301 	and.w	r3, r3, #1
 800c010:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c012:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800c016:	460b      	mov	r3, r1
 800c018:	4313      	orrs	r3, r2
 800c01a:	d011      	beq.n	800c040 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c01c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c020:	3308      	adds	r3, #8
 800c022:	2100      	movs	r1, #0
 800c024:	4618      	mov	r0, r3
 800c026:	f001 f99d 	bl	800d364 <RCCEx_PLL2_Config>
 800c02a:	4603      	mov	r3, r0
 800c02c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800c030:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c034:	2b00      	cmp	r3, #0
 800c036:	d003      	beq.n	800c040 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c038:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c03c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c040:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c048:	2100      	movs	r1, #0
 800c04a:	6239      	str	r1, [r7, #32]
 800c04c:	f003 0302 	and.w	r3, r3, #2
 800c050:	627b      	str	r3, [r7, #36]	@ 0x24
 800c052:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c056:	460b      	mov	r3, r1
 800c058:	4313      	orrs	r3, r2
 800c05a:	d011      	beq.n	800c080 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c05c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c060:	3308      	adds	r3, #8
 800c062:	2101      	movs	r1, #1
 800c064:	4618      	mov	r0, r3
 800c066:	f001 f97d 	bl	800d364 <RCCEx_PLL2_Config>
 800c06a:	4603      	mov	r3, r0
 800c06c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800c070:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c074:	2b00      	cmp	r3, #0
 800c076:	d003      	beq.n	800c080 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c078:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c07c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c080:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c084:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c088:	2100      	movs	r1, #0
 800c08a:	61b9      	str	r1, [r7, #24]
 800c08c:	f003 0304 	and.w	r3, r3, #4
 800c090:	61fb      	str	r3, [r7, #28]
 800c092:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c096:	460b      	mov	r3, r1
 800c098:	4313      	orrs	r3, r2
 800c09a:	d011      	beq.n	800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c09c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0a0:	3308      	adds	r3, #8
 800c0a2:	2102      	movs	r1, #2
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	f001 f95d 	bl	800d364 <RCCEx_PLL2_Config>
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800c0b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d003      	beq.n	800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c0bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c0c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c8:	2100      	movs	r1, #0
 800c0ca:	6139      	str	r1, [r7, #16]
 800c0cc:	f003 0308 	and.w	r3, r3, #8
 800c0d0:	617b      	str	r3, [r7, #20]
 800c0d2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c0d6:	460b      	mov	r3, r1
 800c0d8:	4313      	orrs	r3, r2
 800c0da:	d011      	beq.n	800c100 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c0dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0e0:	3328      	adds	r3, #40	@ 0x28
 800c0e2:	2100      	movs	r1, #0
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	f001 f9ef 	bl	800d4c8 <RCCEx_PLL3_Config>
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800c0f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d003      	beq.n	800c100 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c0fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c100:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c108:	2100      	movs	r1, #0
 800c10a:	60b9      	str	r1, [r7, #8]
 800c10c:	f003 0310 	and.w	r3, r3, #16
 800c110:	60fb      	str	r3, [r7, #12]
 800c112:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c116:	460b      	mov	r3, r1
 800c118:	4313      	orrs	r3, r2
 800c11a:	d011      	beq.n	800c140 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c11c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c120:	3328      	adds	r3, #40	@ 0x28
 800c122:	2101      	movs	r1, #1
 800c124:	4618      	mov	r0, r3
 800c126:	f001 f9cf 	bl	800d4c8 <RCCEx_PLL3_Config>
 800c12a:	4603      	mov	r3, r0
 800c12c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800c130:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c134:	2b00      	cmp	r3, #0
 800c136:	d003      	beq.n	800c140 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c138:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c13c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c140:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c148:	2100      	movs	r1, #0
 800c14a:	6039      	str	r1, [r7, #0]
 800c14c:	f003 0320 	and.w	r3, r3, #32
 800c150:	607b      	str	r3, [r7, #4]
 800c152:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c156:	460b      	mov	r3, r1
 800c158:	4313      	orrs	r3, r2
 800c15a:	d011      	beq.n	800c180 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c15c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c160:	3328      	adds	r3, #40	@ 0x28
 800c162:	2102      	movs	r1, #2
 800c164:	4618      	mov	r0, r3
 800c166:	f001 f9af 	bl	800d4c8 <RCCEx_PLL3_Config>
 800c16a:	4603      	mov	r3, r0
 800c16c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800c170:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c174:	2b00      	cmp	r3, #0
 800c176:	d003      	beq.n	800c180 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c178:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c17c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800c180:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800c184:	2b00      	cmp	r3, #0
 800c186:	d101      	bne.n	800c18c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800c188:	2300      	movs	r3, #0
 800c18a:	e000      	b.n	800c18e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800c18c:	2301      	movs	r3, #1
}
 800c18e:	4618      	mov	r0, r3
 800c190:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800c194:	46bd      	mov	sp, r7
 800c196:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c19a:	bf00      	nop
 800c19c:	58024400 	.word	0x58024400

0800c1a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b090      	sub	sp, #64	@ 0x40
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c1aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1ae:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800c1b2:	430b      	orrs	r3, r1
 800c1b4:	f040 8094 	bne.w	800c2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c1b8:	4b9b      	ldr	r3, [pc, #620]	@ (800c428 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c1ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c1bc:	f003 0307 	and.w	r3, r3, #7
 800c1c0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800c1c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1c4:	2b04      	cmp	r3, #4
 800c1c6:	f200 8087 	bhi.w	800c2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c1ca:	a201      	add	r2, pc, #4	@ (adr r2, 800c1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c1cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1d0:	0800c1e5 	.word	0x0800c1e5
 800c1d4:	0800c20d 	.word	0x0800c20d
 800c1d8:	0800c235 	.word	0x0800c235
 800c1dc:	0800c2d1 	.word	0x0800c2d1
 800c1e0:	0800c25d 	.word	0x0800c25d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c1e4:	4b90      	ldr	r3, [pc, #576]	@ (800c428 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c1ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c1f0:	d108      	bne.n	800c204 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c1f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f000 ff62 	bl	800d0c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c1fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c200:	f000 bc93 	b.w	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c204:	2300      	movs	r3, #0
 800c206:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c208:	f000 bc8f 	b.w	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c20c:	4b86      	ldr	r3, [pc, #536]	@ (800c428 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c214:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c218:	d108      	bne.n	800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c21a:	f107 0318 	add.w	r3, r7, #24
 800c21e:	4618      	mov	r0, r3
 800c220:	f000 fca6 	bl	800cb70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c224:	69bb      	ldr	r3, [r7, #24]
 800c226:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c228:	f000 bc7f 	b.w	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c22c:	2300      	movs	r3, #0
 800c22e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c230:	f000 bc7b 	b.w	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c234:	4b7c      	ldr	r3, [pc, #496]	@ (800c428 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c23c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c240:	d108      	bne.n	800c254 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c242:	f107 030c 	add.w	r3, r7, #12
 800c246:	4618      	mov	r0, r3
 800c248:	f000 fde6 	bl	800ce18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c250:	f000 bc6b 	b.w	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c254:	2300      	movs	r3, #0
 800c256:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c258:	f000 bc67 	b.w	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c25c:	4b72      	ldr	r3, [pc, #456]	@ (800c428 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c25e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c260:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c264:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c266:	4b70      	ldr	r3, [pc, #448]	@ (800c428 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	f003 0304 	and.w	r3, r3, #4
 800c26e:	2b04      	cmp	r3, #4
 800c270:	d10c      	bne.n	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c274:	2b00      	cmp	r3, #0
 800c276:	d109      	bne.n	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c278:	4b6b      	ldr	r3, [pc, #428]	@ (800c428 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	08db      	lsrs	r3, r3, #3
 800c27e:	f003 0303 	and.w	r3, r3, #3
 800c282:	4a6a      	ldr	r2, [pc, #424]	@ (800c42c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800c284:	fa22 f303 	lsr.w	r3, r2, r3
 800c288:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c28a:	e01f      	b.n	800c2cc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c28c:	4b66      	ldr	r3, [pc, #408]	@ (800c428 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c294:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c298:	d106      	bne.n	800c2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c29a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c29c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c2a0:	d102      	bne.n	800c2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c2a2:	4b63      	ldr	r3, [pc, #396]	@ (800c430 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800c2a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c2a6:	e011      	b.n	800c2cc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c2a8:	4b5f      	ldr	r3, [pc, #380]	@ (800c428 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c2b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c2b4:	d106      	bne.n	800c2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c2b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c2bc:	d102      	bne.n	800c2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c2be:	4b5d      	ldr	r3, [pc, #372]	@ (800c434 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c2c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c2c2:	e003      	b.n	800c2cc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c2c8:	f000 bc2f 	b.w	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c2cc:	f000 bc2d 	b.w	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c2d0:	4b59      	ldr	r3, [pc, #356]	@ (800c438 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c2d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c2d4:	f000 bc29 	b.w	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c2dc:	f000 bc25 	b.w	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c2e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2e4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800c2e8:	430b      	orrs	r3, r1
 800c2ea:	f040 80a7 	bne.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c2ee:	4b4e      	ldr	r3, [pc, #312]	@ (800c428 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c2f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c2f2:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800c2f6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800c2f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2fa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c2fe:	d054      	beq.n	800c3aa <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800c300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c302:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c306:	f200 808b 	bhi.w	800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c30a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c30c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c310:	f000 8083 	beq.w	800c41a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800c314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c316:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c31a:	f200 8081 	bhi.w	800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c31e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c320:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c324:	d02f      	beq.n	800c386 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c328:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c32c:	d878      	bhi.n	800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c32e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c330:	2b00      	cmp	r3, #0
 800c332:	d004      	beq.n	800c33e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800c334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c336:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c33a:	d012      	beq.n	800c362 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800c33c:	e070      	b.n	800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c33e:	4b3a      	ldr	r3, [pc, #232]	@ (800c428 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c346:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c34a:	d107      	bne.n	800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c34c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c350:	4618      	mov	r0, r3
 800c352:	f000 feb5 	bl	800d0c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c358:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c35a:	e3e6      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c35c:	2300      	movs	r3, #0
 800c35e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c360:	e3e3      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c362:	4b31      	ldr	r3, [pc, #196]	@ (800c428 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c36a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c36e:	d107      	bne.n	800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c370:	f107 0318 	add.w	r3, r7, #24
 800c374:	4618      	mov	r0, r3
 800c376:	f000 fbfb 	bl	800cb70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c37a:	69bb      	ldr	r3, [r7, #24]
 800c37c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c37e:	e3d4      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c380:	2300      	movs	r3, #0
 800c382:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c384:	e3d1      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c386:	4b28      	ldr	r3, [pc, #160]	@ (800c428 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c38e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c392:	d107      	bne.n	800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c394:	f107 030c 	add.w	r3, r7, #12
 800c398:	4618      	mov	r0, r3
 800c39a:	f000 fd3d 	bl	800ce18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3a2:	e3c2      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c3a8:	e3bf      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c3aa:	4b1f      	ldr	r3, [pc, #124]	@ (800c428 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c3ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c3ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c3b2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c3b4:	4b1c      	ldr	r3, [pc, #112]	@ (800c428 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	f003 0304 	and.w	r3, r3, #4
 800c3bc:	2b04      	cmp	r3, #4
 800c3be:	d10c      	bne.n	800c3da <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800c3c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d109      	bne.n	800c3da <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c3c6:	4b18      	ldr	r3, [pc, #96]	@ (800c428 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	08db      	lsrs	r3, r3, #3
 800c3cc:	f003 0303 	and.w	r3, r3, #3
 800c3d0:	4a16      	ldr	r2, [pc, #88]	@ (800c42c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800c3d2:	fa22 f303 	lsr.w	r3, r2, r3
 800c3d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c3d8:	e01e      	b.n	800c418 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c3da:	4b13      	ldr	r3, [pc, #76]	@ (800c428 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c3e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c3e6:	d106      	bne.n	800c3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800c3e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c3ee:	d102      	bne.n	800c3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c3f0:	4b0f      	ldr	r3, [pc, #60]	@ (800c430 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800c3f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c3f4:	e010      	b.n	800c418 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c3f6:	4b0c      	ldr	r3, [pc, #48]	@ (800c428 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c3fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c402:	d106      	bne.n	800c412 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800c404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c406:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c40a:	d102      	bne.n	800c412 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c40c:	4b09      	ldr	r3, [pc, #36]	@ (800c434 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c40e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c410:	e002      	b.n	800c418 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c412:	2300      	movs	r3, #0
 800c414:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c416:	e388      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c418:	e387      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c41a:	4b07      	ldr	r3, [pc, #28]	@ (800c438 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c41c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c41e:	e384      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c420:	2300      	movs	r3, #0
 800c422:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c424:	e381      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c426:	bf00      	nop
 800c428:	58024400 	.word	0x58024400
 800c42c:	03d09000 	.word	0x03d09000
 800c430:	003d0900 	.word	0x003d0900
 800c434:	016e3600 	.word	0x016e3600
 800c438:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c43c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c440:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800c444:	430b      	orrs	r3, r1
 800c446:	f040 809c 	bne.w	800c582 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c44a:	4b9e      	ldr	r3, [pc, #632]	@ (800c6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c44c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c44e:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800c452:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800c454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c456:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c45a:	d054      	beq.n	800c506 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800c45c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c45e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c462:	f200 808b 	bhi.w	800c57c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c468:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c46c:	f000 8083 	beq.w	800c576 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800c470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c472:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c476:	f200 8081 	bhi.w	800c57c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c47a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c47c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c480:	d02f      	beq.n	800c4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800c482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c484:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c488:	d878      	bhi.n	800c57c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c48a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d004      	beq.n	800c49a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800c490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c492:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c496:	d012      	beq.n	800c4be <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800c498:	e070      	b.n	800c57c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c49a:	4b8a      	ldr	r3, [pc, #552]	@ (800c6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c4a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c4a6:	d107      	bne.n	800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c4a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	f000 fe07 	bl	800d0c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c4b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4b6:	e338      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c4bc:	e335      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c4be:	4b81      	ldr	r3, [pc, #516]	@ (800c6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c4c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c4ca:	d107      	bne.n	800c4dc <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c4cc:	f107 0318 	add.w	r3, r7, #24
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f000 fb4d 	bl	800cb70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c4d6:	69bb      	ldr	r3, [r7, #24]
 800c4d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4da:	e326      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c4dc:	2300      	movs	r3, #0
 800c4de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c4e0:	e323      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c4e2:	4b78      	ldr	r3, [pc, #480]	@ (800c6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c4ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c4ee:	d107      	bne.n	800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c4f0:	f107 030c 	add.w	r3, r7, #12
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	f000 fc8f 	bl	800ce18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4fe:	e314      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c500:	2300      	movs	r3, #0
 800c502:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c504:	e311      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c506:	4b6f      	ldr	r3, [pc, #444]	@ (800c6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c508:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c50a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c50e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c510:	4b6c      	ldr	r3, [pc, #432]	@ (800c6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	f003 0304 	and.w	r3, r3, #4
 800c518:	2b04      	cmp	r3, #4
 800c51a:	d10c      	bne.n	800c536 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800c51c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d109      	bne.n	800c536 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c522:	4b68      	ldr	r3, [pc, #416]	@ (800c6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	08db      	lsrs	r3, r3, #3
 800c528:	f003 0303 	and.w	r3, r3, #3
 800c52c:	4a66      	ldr	r2, [pc, #408]	@ (800c6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800c52e:	fa22 f303 	lsr.w	r3, r2, r3
 800c532:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c534:	e01e      	b.n	800c574 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c536:	4b63      	ldr	r3, [pc, #396]	@ (800c6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c53e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c542:	d106      	bne.n	800c552 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800c544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c546:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c54a:	d102      	bne.n	800c552 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c54c:	4b5f      	ldr	r3, [pc, #380]	@ (800c6cc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800c54e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c550:	e010      	b.n	800c574 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c552:	4b5c      	ldr	r3, [pc, #368]	@ (800c6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c55a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c55e:	d106      	bne.n	800c56e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800c560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c562:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c566:	d102      	bne.n	800c56e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c568:	4b59      	ldr	r3, [pc, #356]	@ (800c6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c56a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c56c:	e002      	b.n	800c574 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c56e:	2300      	movs	r3, #0
 800c570:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c572:	e2da      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c574:	e2d9      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c576:	4b57      	ldr	r3, [pc, #348]	@ (800c6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c578:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c57a:	e2d6      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c57c:	2300      	movs	r3, #0
 800c57e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c580:	e2d3      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c582:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c586:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800c58a:	430b      	orrs	r3, r1
 800c58c:	f040 80a7 	bne.w	800c6de <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c590:	4b4c      	ldr	r3, [pc, #304]	@ (800c6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c592:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c594:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800c598:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c59a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c59c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c5a0:	d055      	beq.n	800c64e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800c5a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c5a8:	f200 8096 	bhi.w	800c6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c5ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c5b2:	f000 8084 	beq.w	800c6be <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800c5b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5b8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c5bc:	f200 808c 	bhi.w	800c6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c5c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c5c6:	d030      	beq.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800c5c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c5ce:	f200 8083 	bhi.w	800c6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c5d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d004      	beq.n	800c5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800c5d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c5de:	d012      	beq.n	800c606 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800c5e0:	e07a      	b.n	800c6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c5e2:	4b38      	ldr	r3, [pc, #224]	@ (800c6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c5ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c5ee:	d107      	bne.n	800c600 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c5f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	f000 fd63 	bl	800d0c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c5fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5fe:	e294      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c600:	2300      	movs	r3, #0
 800c602:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c604:	e291      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c606:	4b2f      	ldr	r3, [pc, #188]	@ (800c6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c60e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c612:	d107      	bne.n	800c624 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c614:	f107 0318 	add.w	r3, r7, #24
 800c618:	4618      	mov	r0, r3
 800c61a:	f000 faa9 	bl	800cb70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c61e:	69bb      	ldr	r3, [r7, #24]
 800c620:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c622:	e282      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c624:	2300      	movs	r3, #0
 800c626:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c628:	e27f      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c62a:	4b26      	ldr	r3, [pc, #152]	@ (800c6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c632:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c636:	d107      	bne.n	800c648 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c638:	f107 030c 	add.w	r3, r7, #12
 800c63c:	4618      	mov	r0, r3
 800c63e:	f000 fbeb 	bl	800ce18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c646:	e270      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c648:	2300      	movs	r3, #0
 800c64a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c64c:	e26d      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c64e:	4b1d      	ldr	r3, [pc, #116]	@ (800c6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c652:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c656:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c658:	4b1a      	ldr	r3, [pc, #104]	@ (800c6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	f003 0304 	and.w	r3, r3, #4
 800c660:	2b04      	cmp	r3, #4
 800c662:	d10c      	bne.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800c664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c666:	2b00      	cmp	r3, #0
 800c668:	d109      	bne.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c66a:	4b16      	ldr	r3, [pc, #88]	@ (800c6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	08db      	lsrs	r3, r3, #3
 800c670:	f003 0303 	and.w	r3, r3, #3
 800c674:	4a14      	ldr	r2, [pc, #80]	@ (800c6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800c676:	fa22 f303 	lsr.w	r3, r2, r3
 800c67a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c67c:	e01e      	b.n	800c6bc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c67e:	4b11      	ldr	r3, [pc, #68]	@ (800c6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c686:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c68a:	d106      	bne.n	800c69a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800c68c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c68e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c692:	d102      	bne.n	800c69a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c694:	4b0d      	ldr	r3, [pc, #52]	@ (800c6cc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800c696:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c698:	e010      	b.n	800c6bc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c69a:	4b0a      	ldr	r3, [pc, #40]	@ (800c6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c6a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c6a6:	d106      	bne.n	800c6b6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800c6a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c6ae:	d102      	bne.n	800c6b6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c6b0:	4b07      	ldr	r3, [pc, #28]	@ (800c6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c6b4:	e002      	b.n	800c6bc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c6ba:	e236      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c6bc:	e235      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c6be:	4b05      	ldr	r3, [pc, #20]	@ (800c6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c6c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c6c2:	e232      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c6c4:	58024400 	.word	0x58024400
 800c6c8:	03d09000 	.word	0x03d09000
 800c6cc:	003d0900 	.word	0x003d0900
 800c6d0:	016e3600 	.word	0x016e3600
 800c6d4:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800c6d8:	2300      	movs	r3, #0
 800c6da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c6dc:	e225      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c6de:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6e2:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800c6e6:	430b      	orrs	r3, r1
 800c6e8:	f040 8085 	bne.w	800c7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c6ec:	4b9c      	ldr	r3, [pc, #624]	@ (800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c6ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c6f0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800c6f4:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800c6f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c6fc:	d06b      	beq.n	800c7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800c6fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c700:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c704:	d874      	bhi.n	800c7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c708:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c70c:	d056      	beq.n	800c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800c70e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c710:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c714:	d86c      	bhi.n	800c7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c718:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c71c:	d03b      	beq.n	800c796 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800c71e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c720:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c724:	d864      	bhi.n	800c7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c728:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c72c:	d021      	beq.n	800c772 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800c72e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c730:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c734:	d85c      	bhi.n	800c7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d004      	beq.n	800c746 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800c73c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c73e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c742:	d004      	beq.n	800c74e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800c744:	e054      	b.n	800c7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c746:	f7fe fb5f 	bl	800ae08 <HAL_RCC_GetPCLK1Freq>
 800c74a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c74c:	e1ed      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c74e:	4b84      	ldr	r3, [pc, #528]	@ (800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c756:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c75a:	d107      	bne.n	800c76c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c75c:	f107 0318 	add.w	r3, r7, #24
 800c760:	4618      	mov	r0, r3
 800c762:	f000 fa05 	bl	800cb70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c766:	69fb      	ldr	r3, [r7, #28]
 800c768:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c76a:	e1de      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c76c:	2300      	movs	r3, #0
 800c76e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c770:	e1db      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c772:	4b7b      	ldr	r3, [pc, #492]	@ (800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c77a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c77e:	d107      	bne.n	800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c780:	f107 030c 	add.w	r3, r7, #12
 800c784:	4618      	mov	r0, r3
 800c786:	f000 fb47 	bl	800ce18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c78a:	693b      	ldr	r3, [r7, #16]
 800c78c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c78e:	e1cc      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c790:	2300      	movs	r3, #0
 800c792:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c794:	e1c9      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c796:	4b72      	ldr	r3, [pc, #456]	@ (800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	f003 0304 	and.w	r3, r3, #4
 800c79e:	2b04      	cmp	r3, #4
 800c7a0:	d109      	bne.n	800c7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c7a2:	4b6f      	ldr	r3, [pc, #444]	@ (800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	08db      	lsrs	r3, r3, #3
 800c7a8:	f003 0303 	and.w	r3, r3, #3
 800c7ac:	4a6d      	ldr	r2, [pc, #436]	@ (800c964 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c7ae:	fa22 f303 	lsr.w	r3, r2, r3
 800c7b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7b4:	e1b9      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c7ba:	e1b6      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c7bc:	4b68      	ldr	r3, [pc, #416]	@ (800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c7c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c7c8:	d102      	bne.n	800c7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800c7ca:	4b67      	ldr	r3, [pc, #412]	@ (800c968 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c7cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7ce:	e1ac      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c7d4:	e1a9      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c7d6:	4b62      	ldr	r3, [pc, #392]	@ (800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c7de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c7e2:	d102      	bne.n	800c7ea <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800c7e4:	4b61      	ldr	r3, [pc, #388]	@ (800c96c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c7e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7e8:	e19f      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c7ee:	e19c      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c7f4:	e199      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c7f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7fa:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800c7fe:	430b      	orrs	r3, r1
 800c800:	d173      	bne.n	800c8ea <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c802:	4b57      	ldr	r3, [pc, #348]	@ (800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c806:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c80a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c80c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c80e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c812:	d02f      	beq.n	800c874 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800c814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c816:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c81a:	d863      	bhi.n	800c8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800c81c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d004      	beq.n	800c82c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800c822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c824:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c828:	d012      	beq.n	800c850 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800c82a:	e05b      	b.n	800c8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c82c:	4b4c      	ldr	r3, [pc, #304]	@ (800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c834:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c838:	d107      	bne.n	800c84a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c83a:	f107 0318 	add.w	r3, r7, #24
 800c83e:	4618      	mov	r0, r3
 800c840:	f000 f996 	bl	800cb70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c844:	69bb      	ldr	r3, [r7, #24]
 800c846:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c848:	e16f      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c84a:	2300      	movs	r3, #0
 800c84c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c84e:	e16c      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c850:	4b43      	ldr	r3, [pc, #268]	@ (800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c858:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c85c:	d107      	bne.n	800c86e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c85e:	f107 030c 	add.w	r3, r7, #12
 800c862:	4618      	mov	r0, r3
 800c864:	f000 fad8 	bl	800ce18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c868:	697b      	ldr	r3, [r7, #20]
 800c86a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c86c:	e15d      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c86e:	2300      	movs	r3, #0
 800c870:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c872:	e15a      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c874:	4b3a      	ldr	r3, [pc, #232]	@ (800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c876:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c878:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c87c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c87e:	4b38      	ldr	r3, [pc, #224]	@ (800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	f003 0304 	and.w	r3, r3, #4
 800c886:	2b04      	cmp	r3, #4
 800c888:	d10c      	bne.n	800c8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800c88a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d109      	bne.n	800c8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c890:	4b33      	ldr	r3, [pc, #204]	@ (800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	08db      	lsrs	r3, r3, #3
 800c896:	f003 0303 	and.w	r3, r3, #3
 800c89a:	4a32      	ldr	r2, [pc, #200]	@ (800c964 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c89c:	fa22 f303 	lsr.w	r3, r2, r3
 800c8a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c8a2:	e01e      	b.n	800c8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c8a4:	4b2e      	ldr	r3, [pc, #184]	@ (800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c8ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c8b0:	d106      	bne.n	800c8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800c8b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c8b8:	d102      	bne.n	800c8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c8ba:	4b2b      	ldr	r3, [pc, #172]	@ (800c968 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c8bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c8be:	e010      	b.n	800c8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c8c0:	4b27      	ldr	r3, [pc, #156]	@ (800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c8c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c8cc:	d106      	bne.n	800c8dc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800c8ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c8d4:	d102      	bne.n	800c8dc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c8d6:	4b25      	ldr	r3, [pc, #148]	@ (800c96c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c8d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c8da:	e002      	b.n	800c8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c8dc:	2300      	movs	r3, #0
 800c8de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c8e0:	e123      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c8e2:	e122      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c8e8:	e11f      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c8ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8ee:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800c8f2:	430b      	orrs	r3, r1
 800c8f4:	d13c      	bne.n	800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c8f6:	4b1a      	ldr	r3, [pc, #104]	@ (800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c8f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c8fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c8fe:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c902:	2b00      	cmp	r3, #0
 800c904:	d004      	beq.n	800c910 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800c906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c908:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c90c:	d012      	beq.n	800c934 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800c90e:	e023      	b.n	800c958 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c910:	4b13      	ldr	r3, [pc, #76]	@ (800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c918:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c91c:	d107      	bne.n	800c92e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c91e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c922:	4618      	mov	r0, r3
 800c924:	f000 fbcc 	bl	800d0c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c92a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c92c:	e0fd      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c92e:	2300      	movs	r3, #0
 800c930:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c932:	e0fa      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c934:	4b0a      	ldr	r3, [pc, #40]	@ (800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c93c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c940:	d107      	bne.n	800c952 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c942:	f107 0318 	add.w	r3, r7, #24
 800c946:	4618      	mov	r0, r3
 800c948:	f000 f912 	bl	800cb70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c94c:	6a3b      	ldr	r3, [r7, #32]
 800c94e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c950:	e0eb      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c952:	2300      	movs	r3, #0
 800c954:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c956:	e0e8      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c958:	2300      	movs	r3, #0
 800c95a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c95c:	e0e5      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c95e:	bf00      	nop
 800c960:	58024400 	.word	0x58024400
 800c964:	03d09000 	.word	0x03d09000
 800c968:	003d0900 	.word	0x003d0900
 800c96c:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c970:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c974:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800c978:	430b      	orrs	r3, r1
 800c97a:	f040 8085 	bne.w	800ca88 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c97e:	4b6d      	ldr	r3, [pc, #436]	@ (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c982:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800c986:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c98a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c98e:	d06b      	beq.n	800ca68 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800c990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c992:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c996:	d874      	bhi.n	800ca82 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c99a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c99e:	d056      	beq.n	800ca4e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800c9a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c9a6:	d86c      	bhi.n	800ca82 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c9a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9aa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c9ae:	d03b      	beq.n	800ca28 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800c9b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c9b6:	d864      	bhi.n	800ca82 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c9b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c9be:	d021      	beq.n	800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800c9c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c9c6:	d85c      	bhi.n	800ca82 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c9c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d004      	beq.n	800c9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800c9ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c9d4:	d004      	beq.n	800c9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800c9d6:	e054      	b.n	800ca82 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c9d8:	f000 f8b4 	bl	800cb44 <HAL_RCCEx_GetD3PCLK1Freq>
 800c9dc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c9de:	e0a4      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c9e0:	4b54      	ldr	r3, [pc, #336]	@ (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c9e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c9ec:	d107      	bne.n	800c9fe <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9ee:	f107 0318 	add.w	r3, r7, #24
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	f000 f8bc 	bl	800cb70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c9f8:	69fb      	ldr	r3, [r7, #28]
 800c9fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9fc:	e095      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c9fe:	2300      	movs	r3, #0
 800ca00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca02:	e092      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ca04:	4b4b      	ldr	r3, [pc, #300]	@ (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ca0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ca10:	d107      	bne.n	800ca22 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca12:	f107 030c 	add.w	r3, r7, #12
 800ca16:	4618      	mov	r0, r3
 800ca18:	f000 f9fe 	bl	800ce18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ca1c:	693b      	ldr	r3, [r7, #16]
 800ca1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca20:	e083      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ca22:	2300      	movs	r3, #0
 800ca24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca26:	e080      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ca28:	4b42      	ldr	r3, [pc, #264]	@ (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	f003 0304 	and.w	r3, r3, #4
 800ca30:	2b04      	cmp	r3, #4
 800ca32:	d109      	bne.n	800ca48 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca34:	4b3f      	ldr	r3, [pc, #252]	@ (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	08db      	lsrs	r3, r3, #3
 800ca3a:	f003 0303 	and.w	r3, r3, #3
 800ca3e:	4a3e      	ldr	r2, [pc, #248]	@ (800cb38 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800ca40:	fa22 f303 	lsr.w	r3, r2, r3
 800ca44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca46:	e070      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ca48:	2300      	movs	r3, #0
 800ca4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca4c:	e06d      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ca4e:	4b39      	ldr	r3, [pc, #228]	@ (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ca56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ca5a:	d102      	bne.n	800ca62 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800ca5c:	4b37      	ldr	r3, [pc, #220]	@ (800cb3c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800ca5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca60:	e063      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ca62:	2300      	movs	r3, #0
 800ca64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca66:	e060      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ca68:	4b32      	ldr	r3, [pc, #200]	@ (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ca70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ca74:	d102      	bne.n	800ca7c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800ca76:	4b32      	ldr	r3, [pc, #200]	@ (800cb40 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800ca78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca7a:	e056      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca80:	e053      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800ca82:	2300      	movs	r3, #0
 800ca84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca86:	e050      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ca88:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca8c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800ca90:	430b      	orrs	r3, r1
 800ca92:	d148      	bne.n	800cb26 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ca94:	4b27      	ldr	r3, [pc, #156]	@ (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ca96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca98:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ca9c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ca9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caa0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800caa4:	d02a      	beq.n	800cafc <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800caa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caa8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800caac:	d838      	bhi.n	800cb20 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800caae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d004      	beq.n	800cabe <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800cab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cab6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800caba:	d00d      	beq.n	800cad8 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800cabc:	e030      	b.n	800cb20 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cabe:	4b1d      	ldr	r3, [pc, #116]	@ (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cac6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800caca:	d102      	bne.n	800cad2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800cacc:	4b1c      	ldr	r3, [pc, #112]	@ (800cb40 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800cace:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cad0:	e02b      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cad2:	2300      	movs	r3, #0
 800cad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cad6:	e028      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cad8:	4b16      	ldr	r3, [pc, #88]	@ (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cae0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cae4:	d107      	bne.n	800caf6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cae6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800caea:	4618      	mov	r0, r3
 800caec:	f000 fae8 	bl	800d0c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800caf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800caf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800caf4:	e019      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800caf6:	2300      	movs	r3, #0
 800caf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cafa:	e016      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cafc:	4b0d      	ldr	r3, [pc, #52]	@ (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cb04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cb08:	d107      	bne.n	800cb1a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb0a:	f107 0318 	add.w	r3, r7, #24
 800cb0e:	4618      	mov	r0, r3
 800cb10:	f000 f82e 	bl	800cb70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cb14:	69fb      	ldr	r3, [r7, #28]
 800cb16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb18:	e007      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb1e:	e004      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800cb20:	2300      	movs	r3, #0
 800cb22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb24:	e001      	b.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800cb26:	2300      	movs	r3, #0
 800cb28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800cb2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	3740      	adds	r7, #64	@ 0x40
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd80      	pop	{r7, pc}
 800cb34:	58024400 	.word	0x58024400
 800cb38:	03d09000 	.word	0x03d09000
 800cb3c:	003d0900 	.word	0x003d0900
 800cb40:	016e3600 	.word	0x016e3600

0800cb44 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800cb48:	f7fe f92e 	bl	800ada8 <HAL_RCC_GetHCLKFreq>
 800cb4c:	4602      	mov	r2, r0
 800cb4e:	4b06      	ldr	r3, [pc, #24]	@ (800cb68 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800cb50:	6a1b      	ldr	r3, [r3, #32]
 800cb52:	091b      	lsrs	r3, r3, #4
 800cb54:	f003 0307 	and.w	r3, r3, #7
 800cb58:	4904      	ldr	r1, [pc, #16]	@ (800cb6c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800cb5a:	5ccb      	ldrb	r3, [r1, r3]
 800cb5c:	f003 031f 	and.w	r3, r3, #31
 800cb60:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800cb64:	4618      	mov	r0, r3
 800cb66:	bd80      	pop	{r7, pc}
 800cb68:	58024400 	.word	0x58024400
 800cb6c:	08018860 	.word	0x08018860

0800cb70 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800cb70:	b480      	push	{r7}
 800cb72:	b089      	sub	sp, #36	@ 0x24
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cb78:	4ba1      	ldr	r3, [pc, #644]	@ (800ce00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb7c:	f003 0303 	and.w	r3, r3, #3
 800cb80:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800cb82:	4b9f      	ldr	r3, [pc, #636]	@ (800ce00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb86:	0b1b      	lsrs	r3, r3, #12
 800cb88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cb8c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800cb8e:	4b9c      	ldr	r3, [pc, #624]	@ (800ce00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb92:	091b      	lsrs	r3, r3, #4
 800cb94:	f003 0301 	and.w	r3, r3, #1
 800cb98:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800cb9a:	4b99      	ldr	r3, [pc, #612]	@ (800ce00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb9e:	08db      	lsrs	r3, r3, #3
 800cba0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cba4:	693a      	ldr	r2, [r7, #16]
 800cba6:	fb02 f303 	mul.w	r3, r2, r3
 800cbaa:	ee07 3a90 	vmov	s15, r3
 800cbae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbb2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800cbb6:	697b      	ldr	r3, [r7, #20]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	f000 8111 	beq.w	800cde0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800cbbe:	69bb      	ldr	r3, [r7, #24]
 800cbc0:	2b02      	cmp	r3, #2
 800cbc2:	f000 8083 	beq.w	800cccc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800cbc6:	69bb      	ldr	r3, [r7, #24]
 800cbc8:	2b02      	cmp	r3, #2
 800cbca:	f200 80a1 	bhi.w	800cd10 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800cbce:	69bb      	ldr	r3, [r7, #24]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d003      	beq.n	800cbdc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800cbd4:	69bb      	ldr	r3, [r7, #24]
 800cbd6:	2b01      	cmp	r3, #1
 800cbd8:	d056      	beq.n	800cc88 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800cbda:	e099      	b.n	800cd10 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cbdc:	4b88      	ldr	r3, [pc, #544]	@ (800ce00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	f003 0320 	and.w	r3, r3, #32
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d02d      	beq.n	800cc44 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cbe8:	4b85      	ldr	r3, [pc, #532]	@ (800ce00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	08db      	lsrs	r3, r3, #3
 800cbee:	f003 0303 	and.w	r3, r3, #3
 800cbf2:	4a84      	ldr	r2, [pc, #528]	@ (800ce04 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800cbf4:	fa22 f303 	lsr.w	r3, r2, r3
 800cbf8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cbfa:	68bb      	ldr	r3, [r7, #8]
 800cbfc:	ee07 3a90 	vmov	s15, r3
 800cc00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc04:	697b      	ldr	r3, [r7, #20]
 800cc06:	ee07 3a90 	vmov	s15, r3
 800cc0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc12:	4b7b      	ldr	r3, [pc, #492]	@ (800ce00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc1a:	ee07 3a90 	vmov	s15, r3
 800cc1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc22:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc26:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ce08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cc2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cc36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc3e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cc42:	e087      	b.n	800cd54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cc44:	697b      	ldr	r3, [r7, #20]
 800cc46:	ee07 3a90 	vmov	s15, r3
 800cc4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc4e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ce0c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800cc52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc56:	4b6a      	ldr	r3, [pc, #424]	@ (800ce00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc5e:	ee07 3a90 	vmov	s15, r3
 800cc62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc66:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc6a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ce08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cc6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cc7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc86:	e065      	b.n	800cd54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cc88:	697b      	ldr	r3, [r7, #20]
 800cc8a:	ee07 3a90 	vmov	s15, r3
 800cc8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc92:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ce10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cc96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc9a:	4b59      	ldr	r3, [pc, #356]	@ (800ce00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cca2:	ee07 3a90 	vmov	s15, r3
 800cca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccaa:	ed97 6a03 	vldr	s12, [r7, #12]
 800ccae:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ce08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ccb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ccb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ccba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ccbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ccc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ccca:	e043      	b.n	800cd54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cccc:	697b      	ldr	r3, [r7, #20]
 800ccce:	ee07 3a90 	vmov	s15, r3
 800ccd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccd6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ce14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ccda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccde:	4b48      	ldr	r3, [pc, #288]	@ (800ce00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cce6:	ee07 3a90 	vmov	s15, r3
 800ccea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccee:	ed97 6a03 	vldr	s12, [r7, #12]
 800ccf2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ce08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ccf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ccfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ccfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cd02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd0e:	e021      	b.n	800cd54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cd10:	697b      	ldr	r3, [r7, #20]
 800cd12:	ee07 3a90 	vmov	s15, r3
 800cd16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd1a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ce10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cd1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd22:	4b37      	ldr	r3, [pc, #220]	@ (800ce00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd2a:	ee07 3a90 	vmov	s15, r3
 800cd2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd32:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd36:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ce08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cd3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cd46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd52:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800cd54:	4b2a      	ldr	r3, [pc, #168]	@ (800ce00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd58:	0a5b      	lsrs	r3, r3, #9
 800cd5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cd5e:	ee07 3a90 	vmov	s15, r3
 800cd62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cd6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd6e:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd7a:	ee17 2a90 	vmov	r2, s15
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800cd82:	4b1f      	ldr	r3, [pc, #124]	@ (800ce00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd86:	0c1b      	lsrs	r3, r3, #16
 800cd88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cd8c:	ee07 3a90 	vmov	s15, r3
 800cd90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd94:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cd98:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd9c:	edd7 6a07 	vldr	s13, [r7, #28]
 800cda0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cda4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cda8:	ee17 2a90 	vmov	r2, s15
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800cdb0:	4b13      	ldr	r3, [pc, #76]	@ (800ce00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cdb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdb4:	0e1b      	lsrs	r3, r3, #24
 800cdb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cdba:	ee07 3a90 	vmov	s15, r3
 800cdbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdc2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cdc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cdca:	edd7 6a07 	vldr	s13, [r7, #28]
 800cdce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cdd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cdd6:	ee17 2a90 	vmov	r2, s15
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cdde:	e008      	b.n	800cdf2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2200      	movs	r2, #0
 800cde4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2200      	movs	r2, #0
 800cdea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2200      	movs	r2, #0
 800cdf0:	609a      	str	r2, [r3, #8]
}
 800cdf2:	bf00      	nop
 800cdf4:	3724      	adds	r7, #36	@ 0x24
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfc:	4770      	bx	lr
 800cdfe:	bf00      	nop
 800ce00:	58024400 	.word	0x58024400
 800ce04:	03d09000 	.word	0x03d09000
 800ce08:	46000000 	.word	0x46000000
 800ce0c:	4c742400 	.word	0x4c742400
 800ce10:	4a742400 	.word	0x4a742400
 800ce14:	4bb71b00 	.word	0x4bb71b00

0800ce18 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ce18:	b480      	push	{r7}
 800ce1a:	b089      	sub	sp, #36	@ 0x24
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ce20:	4ba1      	ldr	r3, [pc, #644]	@ (800d0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce24:	f003 0303 	and.w	r3, r3, #3
 800ce28:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ce2a:	4b9f      	ldr	r3, [pc, #636]	@ (800d0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce2e:	0d1b      	lsrs	r3, r3, #20
 800ce30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ce34:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ce36:	4b9c      	ldr	r3, [pc, #624]	@ (800d0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce3a:	0a1b      	lsrs	r3, r3, #8
 800ce3c:	f003 0301 	and.w	r3, r3, #1
 800ce40:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ce42:	4b99      	ldr	r3, [pc, #612]	@ (800d0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce46:	08db      	lsrs	r3, r3, #3
 800ce48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ce4c:	693a      	ldr	r2, [r7, #16]
 800ce4e:	fb02 f303 	mul.w	r3, r2, r3
 800ce52:	ee07 3a90 	vmov	s15, r3
 800ce56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce5a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ce5e:	697b      	ldr	r3, [r7, #20]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	f000 8111 	beq.w	800d088 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ce66:	69bb      	ldr	r3, [r7, #24]
 800ce68:	2b02      	cmp	r3, #2
 800ce6a:	f000 8083 	beq.w	800cf74 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ce6e:	69bb      	ldr	r3, [r7, #24]
 800ce70:	2b02      	cmp	r3, #2
 800ce72:	f200 80a1 	bhi.w	800cfb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ce76:	69bb      	ldr	r3, [r7, #24]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d003      	beq.n	800ce84 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ce7c:	69bb      	ldr	r3, [r7, #24]
 800ce7e:	2b01      	cmp	r3, #1
 800ce80:	d056      	beq.n	800cf30 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ce82:	e099      	b.n	800cfb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ce84:	4b88      	ldr	r3, [pc, #544]	@ (800d0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	f003 0320 	and.w	r3, r3, #32
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d02d      	beq.n	800ceec <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ce90:	4b85      	ldr	r3, [pc, #532]	@ (800d0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	08db      	lsrs	r3, r3, #3
 800ce96:	f003 0303 	and.w	r3, r3, #3
 800ce9a:	4a84      	ldr	r2, [pc, #528]	@ (800d0ac <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ce9c:	fa22 f303 	lsr.w	r3, r2, r3
 800cea0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	ee07 3a90 	vmov	s15, r3
 800cea8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ceac:	697b      	ldr	r3, [r7, #20]
 800ceae:	ee07 3a90 	vmov	s15, r3
 800ceb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ceb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ceba:	4b7b      	ldr	r3, [pc, #492]	@ (800d0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cec2:	ee07 3a90 	vmov	s15, r3
 800cec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ceca:	ed97 6a03 	vldr	s12, [r7, #12]
 800cece:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800d0b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ced2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ced6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ceda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cee6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ceea:	e087      	b.n	800cffc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ceec:	697b      	ldr	r3, [r7, #20]
 800ceee:	ee07 3a90 	vmov	s15, r3
 800cef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cef6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800d0b4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800cefa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cefe:	4b6a      	ldr	r3, [pc, #424]	@ (800d0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf06:	ee07 3a90 	vmov	s15, r3
 800cf0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf12:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800d0b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cf16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cf22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf2e:	e065      	b.n	800cffc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cf30:	697b      	ldr	r3, [r7, #20]
 800cf32:	ee07 3a90 	vmov	s15, r3
 800cf36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf3a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800d0b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cf3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf42:	4b59      	ldr	r3, [pc, #356]	@ (800d0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf4a:	ee07 3a90 	vmov	s15, r3
 800cf4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf52:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf56:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800d0b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cf5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cf66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf72:	e043      	b.n	800cffc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cf74:	697b      	ldr	r3, [r7, #20]
 800cf76:	ee07 3a90 	vmov	s15, r3
 800cf7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf7e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800d0bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800cf82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf86:	4b48      	ldr	r3, [pc, #288]	@ (800d0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf8e:	ee07 3a90 	vmov	s15, r3
 800cf92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf96:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf9a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800d0b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cf9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cfaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cfb6:	e021      	b.n	800cffc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cfb8:	697b      	ldr	r3, [r7, #20]
 800cfba:	ee07 3a90 	vmov	s15, r3
 800cfbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfc2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800d0b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cfc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfca:	4b37      	ldr	r3, [pc, #220]	@ (800d0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cfcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cfce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfd2:	ee07 3a90 	vmov	s15, r3
 800cfd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfda:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfde:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800d0b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cfe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cfee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cff6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cffa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800cffc:	4b2a      	ldr	r3, [pc, #168]	@ (800d0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d000:	0a5b      	lsrs	r3, r3, #9
 800d002:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d006:	ee07 3a90 	vmov	s15, r3
 800d00a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d00e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d012:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d016:	edd7 6a07 	vldr	s13, [r7, #28]
 800d01a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d01e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d022:	ee17 2a90 	vmov	r2, s15
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d02a:	4b1f      	ldr	r3, [pc, #124]	@ (800d0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d02c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d02e:	0c1b      	lsrs	r3, r3, #16
 800d030:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d034:	ee07 3a90 	vmov	s15, r3
 800d038:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d03c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d040:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d044:	edd7 6a07 	vldr	s13, [r7, #28]
 800d048:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d04c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d050:	ee17 2a90 	vmov	r2, s15
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d058:	4b13      	ldr	r3, [pc, #76]	@ (800d0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d05a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d05c:	0e1b      	lsrs	r3, r3, #24
 800d05e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d062:	ee07 3a90 	vmov	s15, r3
 800d066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d06a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d06e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d072:	edd7 6a07 	vldr	s13, [r7, #28]
 800d076:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d07a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d07e:	ee17 2a90 	vmov	r2, s15
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d086:	e008      	b.n	800d09a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2200      	movs	r2, #0
 800d08c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	2200      	movs	r2, #0
 800d092:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2200      	movs	r2, #0
 800d098:	609a      	str	r2, [r3, #8]
}
 800d09a:	bf00      	nop
 800d09c:	3724      	adds	r7, #36	@ 0x24
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a4:	4770      	bx	lr
 800d0a6:	bf00      	nop
 800d0a8:	58024400 	.word	0x58024400
 800d0ac:	03d09000 	.word	0x03d09000
 800d0b0:	46000000 	.word	0x46000000
 800d0b4:	4c742400 	.word	0x4c742400
 800d0b8:	4a742400 	.word	0x4a742400
 800d0bc:	4bb71b00 	.word	0x4bb71b00

0800d0c0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d0c0:	b480      	push	{r7}
 800d0c2:	b089      	sub	sp, #36	@ 0x24
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d0c8:	4ba0      	ldr	r3, [pc, #640]	@ (800d34c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d0ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0cc:	f003 0303 	and.w	r3, r3, #3
 800d0d0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d0d2:	4b9e      	ldr	r3, [pc, #632]	@ (800d34c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d0d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0d6:	091b      	lsrs	r3, r3, #4
 800d0d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d0dc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d0de:	4b9b      	ldr	r3, [pc, #620]	@ (800d34c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d0e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0e2:	f003 0301 	and.w	r3, r3, #1
 800d0e6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d0e8:	4b98      	ldr	r3, [pc, #608]	@ (800d34c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d0ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d0ec:	08db      	lsrs	r3, r3, #3
 800d0ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d0f2:	693a      	ldr	r2, [r7, #16]
 800d0f4:	fb02 f303 	mul.w	r3, r2, r3
 800d0f8:	ee07 3a90 	vmov	s15, r3
 800d0fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d100:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d104:	697b      	ldr	r3, [r7, #20]
 800d106:	2b00      	cmp	r3, #0
 800d108:	f000 8111 	beq.w	800d32e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d10c:	69bb      	ldr	r3, [r7, #24]
 800d10e:	2b02      	cmp	r3, #2
 800d110:	f000 8083 	beq.w	800d21a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d114:	69bb      	ldr	r3, [r7, #24]
 800d116:	2b02      	cmp	r3, #2
 800d118:	f200 80a1 	bhi.w	800d25e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d11c:	69bb      	ldr	r3, [r7, #24]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d003      	beq.n	800d12a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d122:	69bb      	ldr	r3, [r7, #24]
 800d124:	2b01      	cmp	r3, #1
 800d126:	d056      	beq.n	800d1d6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d128:	e099      	b.n	800d25e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d12a:	4b88      	ldr	r3, [pc, #544]	@ (800d34c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	f003 0320 	and.w	r3, r3, #32
 800d132:	2b00      	cmp	r3, #0
 800d134:	d02d      	beq.n	800d192 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d136:	4b85      	ldr	r3, [pc, #532]	@ (800d34c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	08db      	lsrs	r3, r3, #3
 800d13c:	f003 0303 	and.w	r3, r3, #3
 800d140:	4a83      	ldr	r2, [pc, #524]	@ (800d350 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d142:	fa22 f303 	lsr.w	r3, r2, r3
 800d146:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d148:	68bb      	ldr	r3, [r7, #8]
 800d14a:	ee07 3a90 	vmov	s15, r3
 800d14e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d152:	697b      	ldr	r3, [r7, #20]
 800d154:	ee07 3a90 	vmov	s15, r3
 800d158:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d15c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d160:	4b7a      	ldr	r3, [pc, #488]	@ (800d34c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d168:	ee07 3a90 	vmov	s15, r3
 800d16c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d170:	ed97 6a03 	vldr	s12, [r7, #12]
 800d174:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800d354 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d178:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d17c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d180:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d184:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d188:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d18c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d190:	e087      	b.n	800d2a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d192:	697b      	ldr	r3, [r7, #20]
 800d194:	ee07 3a90 	vmov	s15, r3
 800d198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d19c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800d358 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d1a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1a4:	4b69      	ldr	r3, [pc, #420]	@ (800d34c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d1a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1ac:	ee07 3a90 	vmov	s15, r3
 800d1b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1b4:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1b8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800d354 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d1bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d1c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d1d4:	e065      	b.n	800d2a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d1d6:	697b      	ldr	r3, [r7, #20]
 800d1d8:	ee07 3a90 	vmov	s15, r3
 800d1dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1e0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800d35c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d1e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1e8:	4b58      	ldr	r3, [pc, #352]	@ (800d34c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d1ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1f0:	ee07 3a90 	vmov	s15, r3
 800d1f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1f8:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1fc:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800d354 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d200:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d204:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d208:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d20c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d210:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d214:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d218:	e043      	b.n	800d2a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d21a:	697b      	ldr	r3, [r7, #20]
 800d21c:	ee07 3a90 	vmov	s15, r3
 800d220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d224:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800d360 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d228:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d22c:	4b47      	ldr	r3, [pc, #284]	@ (800d34c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d22e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d230:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d234:	ee07 3a90 	vmov	s15, r3
 800d238:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d23c:	ed97 6a03 	vldr	s12, [r7, #12]
 800d240:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800d354 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d244:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d248:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d24c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d250:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d254:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d258:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d25c:	e021      	b.n	800d2a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d25e:	697b      	ldr	r3, [r7, #20]
 800d260:	ee07 3a90 	vmov	s15, r3
 800d264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d268:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800d358 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d26c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d270:	4b36      	ldr	r3, [pc, #216]	@ (800d34c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d278:	ee07 3a90 	vmov	s15, r3
 800d27c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d280:	ed97 6a03 	vldr	s12, [r7, #12]
 800d284:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800d354 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d288:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d28c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d290:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d294:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d298:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d29c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d2a0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d2a2:	4b2a      	ldr	r3, [pc, #168]	@ (800d34c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d2a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d2a6:	0a5b      	lsrs	r3, r3, #9
 800d2a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d2ac:	ee07 3a90 	vmov	s15, r3
 800d2b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d2b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d2bc:	edd7 6a07 	vldr	s13, [r7, #28]
 800d2c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d2c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d2c8:	ee17 2a90 	vmov	r2, s15
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d2d0:	4b1e      	ldr	r3, [pc, #120]	@ (800d34c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d2d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d2d4:	0c1b      	lsrs	r3, r3, #16
 800d2d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d2da:	ee07 3a90 	vmov	s15, r3
 800d2de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d2e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d2ea:	edd7 6a07 	vldr	s13, [r7, #28]
 800d2ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d2f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d2f6:	ee17 2a90 	vmov	r2, s15
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d2fe:	4b13      	ldr	r3, [pc, #76]	@ (800d34c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d302:	0e1b      	lsrs	r3, r3, #24
 800d304:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d308:	ee07 3a90 	vmov	s15, r3
 800d30c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d310:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d314:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d318:	edd7 6a07 	vldr	s13, [r7, #28]
 800d31c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d320:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d324:	ee17 2a90 	vmov	r2, s15
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d32c:	e008      	b.n	800d340 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	2200      	movs	r2, #0
 800d332:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2200      	movs	r2, #0
 800d338:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	2200      	movs	r2, #0
 800d33e:	609a      	str	r2, [r3, #8]
}
 800d340:	bf00      	nop
 800d342:	3724      	adds	r7, #36	@ 0x24
 800d344:	46bd      	mov	sp, r7
 800d346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34a:	4770      	bx	lr
 800d34c:	58024400 	.word	0x58024400
 800d350:	03d09000 	.word	0x03d09000
 800d354:	46000000 	.word	0x46000000
 800d358:	4c742400 	.word	0x4c742400
 800d35c:	4a742400 	.word	0x4a742400
 800d360:	4bb71b00 	.word	0x4bb71b00

0800d364 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b084      	sub	sp, #16
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
 800d36c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d36e:	2300      	movs	r3, #0
 800d370:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d372:	4b53      	ldr	r3, [pc, #332]	@ (800d4c0 <RCCEx_PLL2_Config+0x15c>)
 800d374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d376:	f003 0303 	and.w	r3, r3, #3
 800d37a:	2b03      	cmp	r3, #3
 800d37c:	d101      	bne.n	800d382 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d37e:	2301      	movs	r3, #1
 800d380:	e099      	b.n	800d4b6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d382:	4b4f      	ldr	r3, [pc, #316]	@ (800d4c0 <RCCEx_PLL2_Config+0x15c>)
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	4a4e      	ldr	r2, [pc, #312]	@ (800d4c0 <RCCEx_PLL2_Config+0x15c>)
 800d388:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d38c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d38e:	f7f6 ff29 	bl	80041e4 <HAL_GetTick>
 800d392:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d394:	e008      	b.n	800d3a8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d396:	f7f6 ff25 	bl	80041e4 <HAL_GetTick>
 800d39a:	4602      	mov	r2, r0
 800d39c:	68bb      	ldr	r3, [r7, #8]
 800d39e:	1ad3      	subs	r3, r2, r3
 800d3a0:	2b02      	cmp	r3, #2
 800d3a2:	d901      	bls.n	800d3a8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d3a4:	2303      	movs	r3, #3
 800d3a6:	e086      	b.n	800d4b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d3a8:	4b45      	ldr	r3, [pc, #276]	@ (800d4c0 <RCCEx_PLL2_Config+0x15c>)
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d1f0      	bne.n	800d396 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d3b4:	4b42      	ldr	r3, [pc, #264]	@ (800d4c0 <RCCEx_PLL2_Config+0x15c>)
 800d3b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3b8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	031b      	lsls	r3, r3, #12
 800d3c2:	493f      	ldr	r1, [pc, #252]	@ (800d4c0 <RCCEx_PLL2_Config+0x15c>)
 800d3c4:	4313      	orrs	r3, r2
 800d3c6:	628b      	str	r3, [r1, #40]	@ 0x28
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	685b      	ldr	r3, [r3, #4]
 800d3cc:	3b01      	subs	r3, #1
 800d3ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	689b      	ldr	r3, [r3, #8]
 800d3d6:	3b01      	subs	r3, #1
 800d3d8:	025b      	lsls	r3, r3, #9
 800d3da:	b29b      	uxth	r3, r3
 800d3dc:	431a      	orrs	r2, r3
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	68db      	ldr	r3, [r3, #12]
 800d3e2:	3b01      	subs	r3, #1
 800d3e4:	041b      	lsls	r3, r3, #16
 800d3e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d3ea:	431a      	orrs	r2, r3
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	691b      	ldr	r3, [r3, #16]
 800d3f0:	3b01      	subs	r3, #1
 800d3f2:	061b      	lsls	r3, r3, #24
 800d3f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d3f8:	4931      	ldr	r1, [pc, #196]	@ (800d4c0 <RCCEx_PLL2_Config+0x15c>)
 800d3fa:	4313      	orrs	r3, r2
 800d3fc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d3fe:	4b30      	ldr	r3, [pc, #192]	@ (800d4c0 <RCCEx_PLL2_Config+0x15c>)
 800d400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d402:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	695b      	ldr	r3, [r3, #20]
 800d40a:	492d      	ldr	r1, [pc, #180]	@ (800d4c0 <RCCEx_PLL2_Config+0x15c>)
 800d40c:	4313      	orrs	r3, r2
 800d40e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d410:	4b2b      	ldr	r3, [pc, #172]	@ (800d4c0 <RCCEx_PLL2_Config+0x15c>)
 800d412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d414:	f023 0220 	bic.w	r2, r3, #32
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	699b      	ldr	r3, [r3, #24]
 800d41c:	4928      	ldr	r1, [pc, #160]	@ (800d4c0 <RCCEx_PLL2_Config+0x15c>)
 800d41e:	4313      	orrs	r3, r2
 800d420:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d422:	4b27      	ldr	r3, [pc, #156]	@ (800d4c0 <RCCEx_PLL2_Config+0x15c>)
 800d424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d426:	4a26      	ldr	r2, [pc, #152]	@ (800d4c0 <RCCEx_PLL2_Config+0x15c>)
 800d428:	f023 0310 	bic.w	r3, r3, #16
 800d42c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d42e:	4b24      	ldr	r3, [pc, #144]	@ (800d4c0 <RCCEx_PLL2_Config+0x15c>)
 800d430:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d432:	4b24      	ldr	r3, [pc, #144]	@ (800d4c4 <RCCEx_PLL2_Config+0x160>)
 800d434:	4013      	ands	r3, r2
 800d436:	687a      	ldr	r2, [r7, #4]
 800d438:	69d2      	ldr	r2, [r2, #28]
 800d43a:	00d2      	lsls	r2, r2, #3
 800d43c:	4920      	ldr	r1, [pc, #128]	@ (800d4c0 <RCCEx_PLL2_Config+0x15c>)
 800d43e:	4313      	orrs	r3, r2
 800d440:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d442:	4b1f      	ldr	r3, [pc, #124]	@ (800d4c0 <RCCEx_PLL2_Config+0x15c>)
 800d444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d446:	4a1e      	ldr	r2, [pc, #120]	@ (800d4c0 <RCCEx_PLL2_Config+0x15c>)
 800d448:	f043 0310 	orr.w	r3, r3, #16
 800d44c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d106      	bne.n	800d462 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d454:	4b1a      	ldr	r3, [pc, #104]	@ (800d4c0 <RCCEx_PLL2_Config+0x15c>)
 800d456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d458:	4a19      	ldr	r2, [pc, #100]	@ (800d4c0 <RCCEx_PLL2_Config+0x15c>)
 800d45a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d45e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d460:	e00f      	b.n	800d482 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	2b01      	cmp	r3, #1
 800d466:	d106      	bne.n	800d476 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d468:	4b15      	ldr	r3, [pc, #84]	@ (800d4c0 <RCCEx_PLL2_Config+0x15c>)
 800d46a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d46c:	4a14      	ldr	r2, [pc, #80]	@ (800d4c0 <RCCEx_PLL2_Config+0x15c>)
 800d46e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d472:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d474:	e005      	b.n	800d482 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d476:	4b12      	ldr	r3, [pc, #72]	@ (800d4c0 <RCCEx_PLL2_Config+0x15c>)
 800d478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d47a:	4a11      	ldr	r2, [pc, #68]	@ (800d4c0 <RCCEx_PLL2_Config+0x15c>)
 800d47c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d480:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d482:	4b0f      	ldr	r3, [pc, #60]	@ (800d4c0 <RCCEx_PLL2_Config+0x15c>)
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	4a0e      	ldr	r2, [pc, #56]	@ (800d4c0 <RCCEx_PLL2_Config+0x15c>)
 800d488:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d48c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d48e:	f7f6 fea9 	bl	80041e4 <HAL_GetTick>
 800d492:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d494:	e008      	b.n	800d4a8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d496:	f7f6 fea5 	bl	80041e4 <HAL_GetTick>
 800d49a:	4602      	mov	r2, r0
 800d49c:	68bb      	ldr	r3, [r7, #8]
 800d49e:	1ad3      	subs	r3, r2, r3
 800d4a0:	2b02      	cmp	r3, #2
 800d4a2:	d901      	bls.n	800d4a8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d4a4:	2303      	movs	r3, #3
 800d4a6:	e006      	b.n	800d4b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d4a8:	4b05      	ldr	r3, [pc, #20]	@ (800d4c0 <RCCEx_PLL2_Config+0x15c>)
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d0f0      	beq.n	800d496 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d4b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	3710      	adds	r7, #16
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd80      	pop	{r7, pc}
 800d4be:	bf00      	nop
 800d4c0:	58024400 	.word	0x58024400
 800d4c4:	ffff0007 	.word	0xffff0007

0800d4c8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b084      	sub	sp, #16
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
 800d4d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d4d6:	4b53      	ldr	r3, [pc, #332]	@ (800d624 <RCCEx_PLL3_Config+0x15c>)
 800d4d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4da:	f003 0303 	and.w	r3, r3, #3
 800d4de:	2b03      	cmp	r3, #3
 800d4e0:	d101      	bne.n	800d4e6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d4e2:	2301      	movs	r3, #1
 800d4e4:	e099      	b.n	800d61a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d4e6:	4b4f      	ldr	r3, [pc, #316]	@ (800d624 <RCCEx_PLL3_Config+0x15c>)
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	4a4e      	ldr	r2, [pc, #312]	@ (800d624 <RCCEx_PLL3_Config+0x15c>)
 800d4ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d4f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d4f2:	f7f6 fe77 	bl	80041e4 <HAL_GetTick>
 800d4f6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d4f8:	e008      	b.n	800d50c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d4fa:	f7f6 fe73 	bl	80041e4 <HAL_GetTick>
 800d4fe:	4602      	mov	r2, r0
 800d500:	68bb      	ldr	r3, [r7, #8]
 800d502:	1ad3      	subs	r3, r2, r3
 800d504:	2b02      	cmp	r3, #2
 800d506:	d901      	bls.n	800d50c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d508:	2303      	movs	r3, #3
 800d50a:	e086      	b.n	800d61a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d50c:	4b45      	ldr	r3, [pc, #276]	@ (800d624 <RCCEx_PLL3_Config+0x15c>)
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d514:	2b00      	cmp	r3, #0
 800d516:	d1f0      	bne.n	800d4fa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d518:	4b42      	ldr	r3, [pc, #264]	@ (800d624 <RCCEx_PLL3_Config+0x15c>)
 800d51a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d51c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	051b      	lsls	r3, r3, #20
 800d526:	493f      	ldr	r1, [pc, #252]	@ (800d624 <RCCEx_PLL3_Config+0x15c>)
 800d528:	4313      	orrs	r3, r2
 800d52a:	628b      	str	r3, [r1, #40]	@ 0x28
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	685b      	ldr	r3, [r3, #4]
 800d530:	3b01      	subs	r3, #1
 800d532:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	689b      	ldr	r3, [r3, #8]
 800d53a:	3b01      	subs	r3, #1
 800d53c:	025b      	lsls	r3, r3, #9
 800d53e:	b29b      	uxth	r3, r3
 800d540:	431a      	orrs	r2, r3
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	68db      	ldr	r3, [r3, #12]
 800d546:	3b01      	subs	r3, #1
 800d548:	041b      	lsls	r3, r3, #16
 800d54a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d54e:	431a      	orrs	r2, r3
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	691b      	ldr	r3, [r3, #16]
 800d554:	3b01      	subs	r3, #1
 800d556:	061b      	lsls	r3, r3, #24
 800d558:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d55c:	4931      	ldr	r1, [pc, #196]	@ (800d624 <RCCEx_PLL3_Config+0x15c>)
 800d55e:	4313      	orrs	r3, r2
 800d560:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d562:	4b30      	ldr	r3, [pc, #192]	@ (800d624 <RCCEx_PLL3_Config+0x15c>)
 800d564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d566:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	695b      	ldr	r3, [r3, #20]
 800d56e:	492d      	ldr	r1, [pc, #180]	@ (800d624 <RCCEx_PLL3_Config+0x15c>)
 800d570:	4313      	orrs	r3, r2
 800d572:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d574:	4b2b      	ldr	r3, [pc, #172]	@ (800d624 <RCCEx_PLL3_Config+0x15c>)
 800d576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d578:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	699b      	ldr	r3, [r3, #24]
 800d580:	4928      	ldr	r1, [pc, #160]	@ (800d624 <RCCEx_PLL3_Config+0x15c>)
 800d582:	4313      	orrs	r3, r2
 800d584:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d586:	4b27      	ldr	r3, [pc, #156]	@ (800d624 <RCCEx_PLL3_Config+0x15c>)
 800d588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d58a:	4a26      	ldr	r2, [pc, #152]	@ (800d624 <RCCEx_PLL3_Config+0x15c>)
 800d58c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d590:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d592:	4b24      	ldr	r3, [pc, #144]	@ (800d624 <RCCEx_PLL3_Config+0x15c>)
 800d594:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d596:	4b24      	ldr	r3, [pc, #144]	@ (800d628 <RCCEx_PLL3_Config+0x160>)
 800d598:	4013      	ands	r3, r2
 800d59a:	687a      	ldr	r2, [r7, #4]
 800d59c:	69d2      	ldr	r2, [r2, #28]
 800d59e:	00d2      	lsls	r2, r2, #3
 800d5a0:	4920      	ldr	r1, [pc, #128]	@ (800d624 <RCCEx_PLL3_Config+0x15c>)
 800d5a2:	4313      	orrs	r3, r2
 800d5a4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d5a6:	4b1f      	ldr	r3, [pc, #124]	@ (800d624 <RCCEx_PLL3_Config+0x15c>)
 800d5a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5aa:	4a1e      	ldr	r2, [pc, #120]	@ (800d624 <RCCEx_PLL3_Config+0x15c>)
 800d5ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d5b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d5b2:	683b      	ldr	r3, [r7, #0]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d106      	bne.n	800d5c6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d5b8:	4b1a      	ldr	r3, [pc, #104]	@ (800d624 <RCCEx_PLL3_Config+0x15c>)
 800d5ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5bc:	4a19      	ldr	r2, [pc, #100]	@ (800d624 <RCCEx_PLL3_Config+0x15c>)
 800d5be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800d5c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d5c4:	e00f      	b.n	800d5e6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	2b01      	cmp	r3, #1
 800d5ca:	d106      	bne.n	800d5da <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d5cc:	4b15      	ldr	r3, [pc, #84]	@ (800d624 <RCCEx_PLL3_Config+0x15c>)
 800d5ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5d0:	4a14      	ldr	r2, [pc, #80]	@ (800d624 <RCCEx_PLL3_Config+0x15c>)
 800d5d2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800d5d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d5d8:	e005      	b.n	800d5e6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d5da:	4b12      	ldr	r3, [pc, #72]	@ (800d624 <RCCEx_PLL3_Config+0x15c>)
 800d5dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5de:	4a11      	ldr	r2, [pc, #68]	@ (800d624 <RCCEx_PLL3_Config+0x15c>)
 800d5e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d5e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d5e6:	4b0f      	ldr	r3, [pc, #60]	@ (800d624 <RCCEx_PLL3_Config+0x15c>)
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	4a0e      	ldr	r2, [pc, #56]	@ (800d624 <RCCEx_PLL3_Config+0x15c>)
 800d5ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d5f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d5f2:	f7f6 fdf7 	bl	80041e4 <HAL_GetTick>
 800d5f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d5f8:	e008      	b.n	800d60c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d5fa:	f7f6 fdf3 	bl	80041e4 <HAL_GetTick>
 800d5fe:	4602      	mov	r2, r0
 800d600:	68bb      	ldr	r3, [r7, #8]
 800d602:	1ad3      	subs	r3, r2, r3
 800d604:	2b02      	cmp	r3, #2
 800d606:	d901      	bls.n	800d60c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d608:	2303      	movs	r3, #3
 800d60a:	e006      	b.n	800d61a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d60c:	4b05      	ldr	r3, [pc, #20]	@ (800d624 <RCCEx_PLL3_Config+0x15c>)
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d614:	2b00      	cmp	r3, #0
 800d616:	d0f0      	beq.n	800d5fa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d618:	7bfb      	ldrb	r3, [r7, #15]
}
 800d61a:	4618      	mov	r0, r3
 800d61c:	3710      	adds	r7, #16
 800d61e:	46bd      	mov	sp, r7
 800d620:	bd80      	pop	{r7, pc}
 800d622:	bf00      	nop
 800d624:	58024400 	.word	0x58024400
 800d628:	ffff0007 	.word	0xffff0007

0800d62c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b08a      	sub	sp, #40	@ 0x28
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d101      	bne.n	800d63e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d63a:	2301      	movs	r3, #1
 800d63c:	e075      	b.n	800d72a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d644:	b2db      	uxtb	r3, r3
 800d646:	2b00      	cmp	r3, #0
 800d648:	d105      	bne.n	800d656 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	2200      	movs	r2, #0
 800d64e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	f7f6 f92d 	bl	80038b0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	2204      	movs	r2, #4
 800d65a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d65e:	6878      	ldr	r0, [r7, #4]
 800d660:	f000 f868 	bl	800d734 <HAL_SD_InitCard>
 800d664:	4603      	mov	r3, r0
 800d666:	2b00      	cmp	r3, #0
 800d668:	d001      	beq.n	800d66e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d66a:	2301      	movs	r3, #1
 800d66c:	e05d      	b.n	800d72a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800d66e:	f107 0308 	add.w	r3, r7, #8
 800d672:	4619      	mov	r1, r3
 800d674:	6878      	ldr	r0, [r7, #4]
 800d676:	f000 fdaf 	bl	800e1d8 <HAL_SD_GetCardStatus>
 800d67a:	4603      	mov	r3, r0
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d001      	beq.n	800d684 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800d680:	2301      	movs	r3, #1
 800d682:	e052      	b.n	800d72a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800d684:	7e3b      	ldrb	r3, [r7, #24]
 800d686:	b2db      	uxtb	r3, r3
 800d688:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800d68a:	7e7b      	ldrb	r3, [r7, #25]
 800d68c:	b2db      	uxtb	r3, r3
 800d68e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d694:	2b01      	cmp	r3, #1
 800d696:	d10a      	bne.n	800d6ae <HAL_SD_Init+0x82>
 800d698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d102      	bne.n	800d6a4 <HAL_SD_Init+0x78>
 800d69e:	6a3b      	ldr	r3, [r7, #32]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d004      	beq.n	800d6ae <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d6aa:	659a      	str	r2, [r3, #88]	@ 0x58
 800d6ac:	e00b      	b.n	800d6c6 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6b2:	2b01      	cmp	r3, #1
 800d6b4:	d104      	bne.n	800d6c0 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d6bc:	659a      	str	r2, [r3, #88]	@ 0x58
 800d6be:	e002      	b.n	800d6c6 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	68db      	ldr	r3, [r3, #12]
 800d6ca:	4619      	mov	r1, r3
 800d6cc:	6878      	ldr	r0, [r7, #4]
 800d6ce:	f000 fe6d 	bl	800e3ac <HAL_SD_ConfigWideBusOperation>
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d001      	beq.n	800d6dc <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800d6d8:	2301      	movs	r3, #1
 800d6da:	e026      	b.n	800d72a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800d6dc:	f7f6 fd82 	bl	80041e4 <HAL_GetTick>
 800d6e0:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d6e2:	e011      	b.n	800d708 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d6e4:	f7f6 fd7e 	bl	80041e4 <HAL_GetTick>
 800d6e8:	4602      	mov	r2, r0
 800d6ea:	69fb      	ldr	r3, [r7, #28]
 800d6ec:	1ad3      	subs	r3, r2, r3
 800d6ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6f2:	d109      	bne.n	800d708 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d6fa:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	2201      	movs	r2, #1
 800d700:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800d704:	2303      	movs	r3, #3
 800d706:	e010      	b.n	800d72a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d708:	6878      	ldr	r0, [r7, #4]
 800d70a:	f000 ff61 	bl	800e5d0 <HAL_SD_GetCardState>
 800d70e:	4603      	mov	r3, r0
 800d710:	2b04      	cmp	r3, #4
 800d712:	d1e7      	bne.n	800d6e4 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2200      	movs	r2, #0
 800d718:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	2200      	movs	r2, #0
 800d71e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	2201      	movs	r2, #1
 800d724:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800d728:	2300      	movs	r3, #0
}
 800d72a:	4618      	mov	r0, r3
 800d72c:	3728      	adds	r7, #40	@ 0x28
 800d72e:	46bd      	mov	sp, r7
 800d730:	bd80      	pop	{r7, pc}
	...

0800d734 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d734:	b590      	push	{r4, r7, lr}
 800d736:	b08d      	sub	sp, #52	@ 0x34
 800d738:	af02      	add	r7, sp, #8
 800d73a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d73c:	2300      	movs	r3, #0
 800d73e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d740:	2300      	movs	r3, #0
 800d742:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800d744:	2300      	movs	r3, #0
 800d746:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d748:	2300      	movs	r3, #0
 800d74a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d74c:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800d750:	f04f 0100 	mov.w	r1, #0
 800d754:	f7fe fd24 	bl	800c1a0 <HAL_RCCEx_GetPeriphCLKFreq>
 800d758:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800d75a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d109      	bne.n	800d774 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	2201      	movs	r2, #1
 800d764:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800d76e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800d770:	2301      	movs	r3, #1
 800d772:	e070      	b.n	800d856 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800d774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d776:	0a1b      	lsrs	r3, r3, #8
 800d778:	4a39      	ldr	r2, [pc, #228]	@ (800d860 <HAL_SD_InitCard+0x12c>)
 800d77a:	fba2 2303 	umull	r2, r3, r2, r3
 800d77e:	091b      	lsrs	r3, r3, #4
 800d780:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681c      	ldr	r4, [r3, #0]
 800d786:	466a      	mov	r2, sp
 800d788:	f107 0318 	add.w	r3, r7, #24
 800d78c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d790:	e882 0003 	stmia.w	r2, {r0, r1}
 800d794:	f107 030c 	add.w	r3, r7, #12
 800d798:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d79a:	4620      	mov	r0, r4
 800d79c:	f005 f9a4 	bl	8012ae8 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	f005 f9e7 	bl	8012b78 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800d7aa:	69fb      	ldr	r3, [r7, #28]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d005      	beq.n	800d7bc <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800d7b0:	69fb      	ldr	r3, [r7, #28]
 800d7b2:	005b      	lsls	r3, r3, #1
 800d7b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d7b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7ba:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800d7bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d007      	beq.n	800d7d2 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800d7c2:	4a28      	ldr	r2, [pc, #160]	@ (800d864 <HAL_SD_InitCard+0x130>)
 800d7c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7ca:	3301      	adds	r3, #1
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	f7f6 fd15 	bl	80041fc <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d7d2:	6878      	ldr	r0, [r7, #4]
 800d7d4:	f000 ffea 	bl	800e7ac <SD_PowerON>
 800d7d8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d7da:	6a3b      	ldr	r3, [r7, #32]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d00b      	beq.n	800d7f8 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2201      	movs	r2, #1
 800d7e4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d7ec:	6a3b      	ldr	r3, [r7, #32]
 800d7ee:	431a      	orrs	r2, r3
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800d7f4:	2301      	movs	r3, #1
 800d7f6:	e02e      	b.n	800d856 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d7f8:	6878      	ldr	r0, [r7, #4]
 800d7fa:	f000 ff09 	bl	800e610 <SD_InitCard>
 800d7fe:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d800:	6a3b      	ldr	r3, [r7, #32]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d00b      	beq.n	800d81e <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	2201      	movs	r2, #1
 800d80a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d812:	6a3b      	ldr	r3, [r7, #32]
 800d814:	431a      	orrs	r2, r3
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800d81a:	2301      	movs	r3, #1
 800d81c:	e01b      	b.n	800d856 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d826:	4618      	mov	r0, r3
 800d828:	f005 fa3c 	bl	8012ca4 <SDMMC_CmdBlockLength>
 800d82c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d82e:	6a3b      	ldr	r3, [r7, #32]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d00f      	beq.n	800d854 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	4a0b      	ldr	r2, [pc, #44]	@ (800d868 <HAL_SD_InitCard+0x134>)
 800d83a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d840:	6a3b      	ldr	r3, [r7, #32]
 800d842:	431a      	orrs	r2, r3
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	2201      	movs	r2, #1
 800d84c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800d850:	2301      	movs	r3, #1
 800d852:	e000      	b.n	800d856 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800d854:	2300      	movs	r3, #0
}
 800d856:	4618      	mov	r0, r3
 800d858:	372c      	adds	r7, #44	@ 0x2c
 800d85a:	46bd      	mov	sp, r7
 800d85c:	bd90      	pop	{r4, r7, pc}
 800d85e:	bf00      	nop
 800d860:	014f8b59 	.word	0x014f8b59
 800d864:	00012110 	.word	0x00012110
 800d868:	1fe00fff 	.word	0x1fe00fff

0800d86c <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b08c      	sub	sp, #48	@ 0x30
 800d870:	af00      	add	r7, sp, #0
 800d872:	60f8      	str	r0, [r7, #12]
 800d874:	60b9      	str	r1, [r7, #8]
 800d876:	607a      	str	r2, [r7, #4]
 800d878:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800d87e:	68bb      	ldr	r3, [r7, #8]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d107      	bne.n	800d894 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d888:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800d890:	2301      	movs	r3, #1
 800d892:	e08d      	b.n	800d9b0 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d89a:	b2db      	uxtb	r3, r3
 800d89c:	2b01      	cmp	r3, #1
 800d89e:	f040 8086 	bne.w	800d9ae <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d8a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d8aa:	683b      	ldr	r3, [r7, #0]
 800d8ac:	441a      	add	r2, r3
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d8b2:	429a      	cmp	r2, r3
 800d8b4:	d907      	bls.n	800d8c6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8ba:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800d8c2:	2301      	movs	r3, #1
 800d8c4:	e074      	b.n	800d9b0 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	2203      	movs	r2, #3
 800d8ca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	68ba      	ldr	r2, [r7, #8]
 800d8da:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	025a      	lsls	r2, r3, #9
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8e8:	2b01      	cmp	r3, #1
 800d8ea:	d002      	beq.n	800d8f2 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800d8ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8ee:	025b      	lsls	r3, r3, #9
 800d8f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d8f2:	f04f 33ff 	mov.w	r3, #4294967295
 800d8f6:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	025b      	lsls	r3, r3, #9
 800d8fc:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d8fe:	2390      	movs	r3, #144	@ 0x90
 800d900:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d902:	2302      	movs	r3, #2
 800d904:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d906:	2300      	movs	r3, #0
 800d908:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d90a:	2300      	movs	r3, #0
 800d90c:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	f107 0210 	add.w	r2, r7, #16
 800d916:	4611      	mov	r1, r2
 800d918:	4618      	mov	r0, r3
 800d91a:	f005 f997 	bl	8012c4c <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	68da      	ldr	r2, [r3, #12]
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d92c:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	68ba      	ldr	r2, [r7, #8]
 800d934:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	2201      	movs	r2, #1
 800d93c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800d93e:	683b      	ldr	r3, [r7, #0]
 800d940:	2b01      	cmp	r3, #1
 800d942:	d90a      	bls.n	800d95a <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	2282      	movs	r2, #130	@ 0x82
 800d948:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d950:	4618      	mov	r0, r3
 800d952:	f005 f9ed 	bl	8012d30 <SDMMC_CmdReadMultiBlock>
 800d956:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800d958:	e009      	b.n	800d96e <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	2281      	movs	r2, #129	@ 0x81
 800d95e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d966:	4618      	mov	r0, r3
 800d968:	f005 f9bf 	bl	8012cea <SDMMC_CmdReadSingleBlock>
 800d96c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d96e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d970:	2b00      	cmp	r3, #0
 800d972:	d012      	beq.n	800d99a <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	4a0f      	ldr	r2, [pc, #60]	@ (800d9b8 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800d97a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d982:	431a      	orrs	r2, r3
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	2201      	movs	r2, #1
 800d98c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	2200      	movs	r2, #0
 800d994:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800d996:	2301      	movs	r3, #1
 800d998:	e00a      	b.n	800d9b0 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800d9a8:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	e000      	b.n	800d9b0 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d9ae:	2302      	movs	r3, #2
  }
}
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	3730      	adds	r7, #48	@ 0x30
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	bd80      	pop	{r7, pc}
 800d9b8:	1fe00fff 	.word	0x1fe00fff

0800d9bc <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b08c      	sub	sp, #48	@ 0x30
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	60f8      	str	r0, [r7, #12]
 800d9c4:	60b9      	str	r1, [r7, #8]
 800d9c6:	607a      	str	r2, [r7, #4]
 800d9c8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d107      	bne.n	800d9e4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9d8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800d9e0:	2301      	movs	r3, #1
 800d9e2:	e08d      	b.n	800db00 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d9ea:	b2db      	uxtb	r3, r3
 800d9ec:	2b01      	cmp	r3, #1
 800d9ee:	f040 8086 	bne.w	800dafe <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d9f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d9fa:	683b      	ldr	r3, [r7, #0]
 800d9fc:	441a      	add	r2, r3
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800da02:	429a      	cmp	r2, r3
 800da04:	d907      	bls.n	800da16 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da0a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800da12:	2301      	movs	r3, #1
 800da14:	e074      	b.n	800db00 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	2203      	movs	r2, #3
 800da1a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	2200      	movs	r2, #0
 800da24:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	68ba      	ldr	r2, [r7, #8]
 800da2a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	025a      	lsls	r2, r3, #9
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da38:	2b01      	cmp	r3, #1
 800da3a:	d002      	beq.n	800da42 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800da3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da3e:	025b      	lsls	r3, r3, #9
 800da40:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800da42:	f04f 33ff 	mov.w	r3, #4294967295
 800da46:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800da48:	683b      	ldr	r3, [r7, #0]
 800da4a:	025b      	lsls	r3, r3, #9
 800da4c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800da4e:	2390      	movs	r3, #144	@ 0x90
 800da50:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800da52:	2300      	movs	r3, #0
 800da54:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800da56:	2300      	movs	r3, #0
 800da58:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800da5a:	2300      	movs	r3, #0
 800da5c:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	f107 0210 	add.w	r2, r7, #16
 800da66:	4611      	mov	r1, r2
 800da68:	4618      	mov	r0, r3
 800da6a:	f005 f8ef 	bl	8012c4c <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	68da      	ldr	r2, [r3, #12]
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800da7c:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	68ba      	ldr	r2, [r7, #8]
 800da84:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	2201      	movs	r2, #1
 800da8c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	2b01      	cmp	r3, #1
 800da92:	d90a      	bls.n	800daaa <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	22a0      	movs	r2, #160	@ 0xa0
 800da98:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800daa0:	4618      	mov	r0, r3
 800daa2:	f005 f98b 	bl	8012dbc <SDMMC_CmdWriteMultiBlock>
 800daa6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800daa8:	e009      	b.n	800dabe <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	2290      	movs	r2, #144	@ 0x90
 800daae:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dab6:	4618      	mov	r0, r3
 800dab8:	f005 f95d 	bl	8012d76 <SDMMC_CmdWriteSingleBlock>
 800dabc:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800dabe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d012      	beq.n	800daea <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	4a0f      	ldr	r2, [pc, #60]	@ (800db08 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800daca:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dad2:	431a      	orrs	r2, r3
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	2201      	movs	r2, #1
 800dadc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	2200      	movs	r2, #0
 800dae4:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800dae6:	2301      	movs	r3, #1
 800dae8:	e00a      	b.n	800db00 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 800daf8:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800dafa:	2300      	movs	r3, #0
 800dafc:	e000      	b.n	800db00 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800dafe:	2302      	movs	r3, #2
  }
}
 800db00:	4618      	mov	r0, r3
 800db02:	3730      	adds	r7, #48	@ 0x30
 800db04:	46bd      	mov	sp, r7
 800db06:	bd80      	pop	{r7, pc}
 800db08:	1fe00fff 	.word	0x1fe00fff

0800db0c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b084      	sub	sp, #16
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db18:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800db24:	2b00      	cmp	r3, #0
 800db26:	d008      	beq.n	800db3a <HAL_SD_IRQHandler+0x2e>
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	f003 0308 	and.w	r3, r3, #8
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d003      	beq.n	800db3a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	f001 f926 	bl	800ed84 <SD_Read_IT>
 800db38:	e19a      	b.n	800de70 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800db44:	2b00      	cmp	r3, #0
 800db46:	f000 80ac 	beq.w	800dca2 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800db52:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681a      	ldr	r2, [r3, #0]
 800db5e:	4b59      	ldr	r3, [pc, #356]	@ (800dcc4 <HAL_SD_IRQHandler+0x1b8>)
 800db60:	400b      	ands	r3, r1
 800db62:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800db72:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	68da      	ldr	r2, [r3, #12]
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800db82:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	f003 0308 	and.w	r3, r3, #8
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d038      	beq.n	800dc00 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	f003 0302 	and.w	r3, r3, #2
 800db94:	2b00      	cmp	r3, #0
 800db96:	d104      	bne.n	800dba2 <HAL_SD_IRQHandler+0x96>
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	f003 0320 	and.w	r3, r3, #32
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d011      	beq.n	800dbc6 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	4618      	mov	r0, r3
 800dba8:	f005 f92c 	bl	8012e04 <SDMMC_CmdStopTransfer>
 800dbac:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800dbae:	68bb      	ldr	r3, [r7, #8]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d008      	beq.n	800dbc6 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dbb8:	68bb      	ldr	r3, [r7, #8]
 800dbba:	431a      	orrs	r2, r3
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800dbc0:	6878      	ldr	r0, [r7, #4]
 800dbc2:	f000 f95b 	bl	800de7c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	4a3f      	ldr	r2, [pc, #252]	@ (800dcc8 <HAL_SD_IRQHandler+0x1bc>)
 800dbcc:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	2201      	movs	r2, #1
 800dbd2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	2200      	movs	r2, #0
 800dbda:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	f003 0301 	and.w	r3, r3, #1
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d104      	bne.n	800dbf0 <HAL_SD_IRQHandler+0xe4>
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	f003 0302 	and.w	r3, r3, #2
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d003      	beq.n	800dbf8 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800dbf0:	6878      	ldr	r0, [r7, #4]
 800dbf2:	f005 fdd7 	bl	80137a4 <HAL_SD_RxCpltCallback>
 800dbf6:	e13b      	b.n	800de70 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800dbf8:	6878      	ldr	r0, [r7, #4]
 800dbfa:	f005 fdc9 	bl	8013790 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800dbfe:	e137      	b.n	800de70 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	f000 8132 	beq.w	800de70 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	2200      	movs	r2, #0
 800dc12:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	2200      	movs	r2, #0
 800dc1a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	2200      	movs	r2, #0
 800dc22:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	f003 0302 	and.w	r3, r3, #2
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d104      	bne.n	800dc38 <HAL_SD_IRQHandler+0x12c>
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	f003 0320 	and.w	r3, r3, #32
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d011      	beq.n	800dc5c <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	f005 f8e1 	bl	8012e04 <SDMMC_CmdStopTransfer>
 800dc42:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800dc44:	68bb      	ldr	r3, [r7, #8]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d008      	beq.n	800dc5c <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dc4e:	68bb      	ldr	r3, [r7, #8]
 800dc50:	431a      	orrs	r2, r3
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 800dc56:	6878      	ldr	r0, [r7, #4]
 800dc58:	f000 f910 	bl	800de7c <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	2201      	movs	r2, #1
 800dc60:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	2200      	movs	r2, #0
 800dc68:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	f003 0310 	and.w	r3, r3, #16
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d104      	bne.n	800dc7e <HAL_SD_IRQHandler+0x172>
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	f003 0320 	and.w	r3, r3, #32
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d002      	beq.n	800dc84 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800dc7e:	6878      	ldr	r0, [r7, #4]
 800dc80:	f005 fd86 	bl	8013790 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	f003 0301 	and.w	r3, r3, #1
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d105      	bne.n	800dc9a <HAL_SD_IRQHandler+0x18e>
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	f003 0302 	and.w	r3, r3, #2
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	f000 80eb 	beq.w	800de70 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800dc9a:	6878      	ldr	r0, [r7, #4]
 800dc9c:	f005 fd82 	bl	80137a4 <HAL_SD_RxCpltCallback>
}
 800dca0:	e0e6      	b.n	800de70 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dca8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d00d      	beq.n	800dccc <HAL_SD_IRQHandler+0x1c0>
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	f003 0308 	and.w	r3, r3, #8
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d008      	beq.n	800dccc <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800dcba:	6878      	ldr	r0, [r7, #4]
 800dcbc:	f001 f8a8 	bl	800ee10 <SD_Write_IT>
 800dcc0:	e0d6      	b.n	800de70 <HAL_SD_IRQHandler+0x364>
 800dcc2:	bf00      	nop
 800dcc4:	ffff3ec5 	.word	0xffff3ec5
 800dcc8:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dcd2:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	f000 809d 	beq.w	800de16 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dce2:	f003 0302 	and.w	r3, r3, #2
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d005      	beq.n	800dcf6 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dcee:	f043 0202 	orr.w	r2, r3, #2
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dcfc:	f003 0308 	and.w	r3, r3, #8
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d005      	beq.n	800dd10 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd08:	f043 0208 	orr.w	r2, r3, #8
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd16:	f003 0320 	and.w	r3, r3, #32
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d005      	beq.n	800dd2a <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd22:	f043 0220 	orr.w	r2, r3, #32
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd30:	f003 0310 	and.w	r3, r3, #16
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d005      	beq.n	800dd44 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd3c:	f043 0210 	orr.w	r2, r3, #16
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	4a4b      	ldr	r2, [pc, #300]	@ (800de78 <HAL_SD_IRQHandler+0x36c>)
 800dd4a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800dd5a:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	68da      	ldr	r2, [r3, #12]
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800dd6a:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800dd7a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	68da      	ldr	r2, [r3, #12]
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800dd8a:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	4618      	mov	r0, r3
 800dd92:	f005 f837 	bl	8012e04 <SDMMC_CmdStopTransfer>
 800dd96:	4602      	mov	r2, r0
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd9c:	431a      	orrs	r2, r3
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	68da      	ldr	r2, [r3, #12]
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ddb0:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ddba:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	f003 0308 	and.w	r3, r3, #8
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d00a      	beq.n	800dddc <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	2201      	movs	r2, #1
 800ddca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	2200      	movs	r2, #0
 800ddd2:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 800ddd4:	6878      	ldr	r0, [r7, #4]
 800ddd6:	f000 f851 	bl	800de7c <HAL_SD_ErrorCallback>
}
 800ddda:	e049      	b.n	800de70 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d044      	beq.n	800de70 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d040      	beq.n	800de70 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800ddfc:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	2200      	movs	r2, #0
 800de04:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	2201      	movs	r2, #1
 800de0a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 800de0e:	6878      	ldr	r0, [r7, #4]
 800de10:	f000 f834 	bl	800de7c <HAL_SD_ErrorCallback>
}
 800de14:	e02c      	b.n	800de70 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800de1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800de20:	2b00      	cmp	r3, #0
 800de22:	d025      	beq.n	800de70 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800de2c:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800de34:	f003 0304 	and.w	r3, r3, #4
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d10c      	bne.n	800de56 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	f003 0320 	and.w	r3, r3, #32
 800de42:	2b00      	cmp	r3, #0
 800de44:	d003      	beq.n	800de4e <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f001 f84a 	bl	800eee0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800de4c:	e010      	b.n	800de70 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800de4e:	6878      	ldr	r0, [r7, #4]
 800de50:	f001 f832 	bl	800eeb8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800de54:	e00c      	b.n	800de70 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	f003 0320 	and.w	r3, r3, #32
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d003      	beq.n	800de68 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800de60:	6878      	ldr	r0, [r7, #4]
 800de62:	f001 f833 	bl	800eecc <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800de66:	e003      	b.n	800de70 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800de68:	6878      	ldr	r0, [r7, #4]
 800de6a:	f001 f81b 	bl	800eea4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800de6e:	e7ff      	b.n	800de70 <HAL_SD_IRQHandler+0x364>
 800de70:	bf00      	nop
 800de72:	3710      	adds	r7, #16
 800de74:	46bd      	mov	sp, r7
 800de76:	bd80      	pop	{r7, pc}
 800de78:	18000f3a 	.word	0x18000f3a

0800de7c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800de7c:	b480      	push	{r7}
 800de7e:	b083      	sub	sp, #12
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800de84:	bf00      	nop
 800de86:	370c      	adds	r7, #12
 800de88:	46bd      	mov	sp, r7
 800de8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8e:	4770      	bx	lr

0800de90 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800de90:	b480      	push	{r7}
 800de92:	b083      	sub	sp, #12
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]
 800de98:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800de9e:	0f9b      	lsrs	r3, r3, #30
 800dea0:	b2da      	uxtb	r2, r3
 800dea2:	683b      	ldr	r3, [r7, #0]
 800dea4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800deaa:	0e9b      	lsrs	r3, r3, #26
 800deac:	b2db      	uxtb	r3, r3
 800deae:	f003 030f 	and.w	r3, r3, #15
 800deb2:	b2da      	uxtb	r2, r3
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800debc:	0e1b      	lsrs	r3, r3, #24
 800debe:	b2db      	uxtb	r3, r3
 800dec0:	f003 0303 	and.w	r3, r3, #3
 800dec4:	b2da      	uxtb	r2, r3
 800dec6:	683b      	ldr	r3, [r7, #0]
 800dec8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dece:	0c1b      	lsrs	r3, r3, #16
 800ded0:	b2da      	uxtb	r2, r3
 800ded2:	683b      	ldr	r3, [r7, #0]
 800ded4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800deda:	0a1b      	lsrs	r3, r3, #8
 800dedc:	b2da      	uxtb	r2, r3
 800dede:	683b      	ldr	r3, [r7, #0]
 800dee0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dee6:	b2da      	uxtb	r2, r3
 800dee8:	683b      	ldr	r3, [r7, #0]
 800deea:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800def0:	0d1b      	lsrs	r3, r3, #20
 800def2:	b29a      	uxth	r2, r3
 800def4:	683b      	ldr	r3, [r7, #0]
 800def6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800defc:	0c1b      	lsrs	r3, r3, #16
 800defe:	b2db      	uxtb	r3, r3
 800df00:	f003 030f 	and.w	r3, r3, #15
 800df04:	b2da      	uxtb	r2, r3
 800df06:	683b      	ldr	r3, [r7, #0]
 800df08:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800df0e:	0bdb      	lsrs	r3, r3, #15
 800df10:	b2db      	uxtb	r3, r3
 800df12:	f003 0301 	and.w	r3, r3, #1
 800df16:	b2da      	uxtb	r2, r3
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800df20:	0b9b      	lsrs	r3, r3, #14
 800df22:	b2db      	uxtb	r3, r3
 800df24:	f003 0301 	and.w	r3, r3, #1
 800df28:	b2da      	uxtb	r2, r3
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800df32:	0b5b      	lsrs	r3, r3, #13
 800df34:	b2db      	uxtb	r3, r3
 800df36:	f003 0301 	and.w	r3, r3, #1
 800df3a:	b2da      	uxtb	r2, r3
 800df3c:	683b      	ldr	r3, [r7, #0]
 800df3e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800df44:	0b1b      	lsrs	r3, r3, #12
 800df46:	b2db      	uxtb	r3, r3
 800df48:	f003 0301 	and.w	r3, r3, #1
 800df4c:	b2da      	uxtb	r2, r3
 800df4e:	683b      	ldr	r3, [r7, #0]
 800df50:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800df52:	683b      	ldr	r3, [r7, #0]
 800df54:	2200      	movs	r2, #0
 800df56:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d163      	bne.n	800e028 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800df64:	009a      	lsls	r2, r3, #2
 800df66:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800df6a:	4013      	ands	r3, r2
 800df6c:	687a      	ldr	r2, [r7, #4]
 800df6e:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800df70:	0f92      	lsrs	r2, r2, #30
 800df72:	431a      	orrs	r2, r3
 800df74:	683b      	ldr	r3, [r7, #0]
 800df76:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800df7c:	0edb      	lsrs	r3, r3, #27
 800df7e:	b2db      	uxtb	r3, r3
 800df80:	f003 0307 	and.w	r3, r3, #7
 800df84:	b2da      	uxtb	r2, r3
 800df86:	683b      	ldr	r3, [r7, #0]
 800df88:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800df8e:	0e1b      	lsrs	r3, r3, #24
 800df90:	b2db      	uxtb	r3, r3
 800df92:	f003 0307 	and.w	r3, r3, #7
 800df96:	b2da      	uxtb	r2, r3
 800df98:	683b      	ldr	r3, [r7, #0]
 800df9a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dfa0:	0d5b      	lsrs	r3, r3, #21
 800dfa2:	b2db      	uxtb	r3, r3
 800dfa4:	f003 0307 	and.w	r3, r3, #7
 800dfa8:	b2da      	uxtb	r2, r3
 800dfaa:	683b      	ldr	r3, [r7, #0]
 800dfac:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dfb2:	0c9b      	lsrs	r3, r3, #18
 800dfb4:	b2db      	uxtb	r3, r3
 800dfb6:	f003 0307 	and.w	r3, r3, #7
 800dfba:	b2da      	uxtb	r2, r3
 800dfbc:	683b      	ldr	r3, [r7, #0]
 800dfbe:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dfc4:	0bdb      	lsrs	r3, r3, #15
 800dfc6:	b2db      	uxtb	r3, r3
 800dfc8:	f003 0307 	and.w	r3, r3, #7
 800dfcc:	b2da      	uxtb	r2, r3
 800dfce:	683b      	ldr	r3, [r7, #0]
 800dfd0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800dfd2:	683b      	ldr	r3, [r7, #0]
 800dfd4:	691b      	ldr	r3, [r3, #16]
 800dfd6:	1c5a      	adds	r2, r3, #1
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800dfdc:	683b      	ldr	r3, [r7, #0]
 800dfde:	7e1b      	ldrb	r3, [r3, #24]
 800dfe0:	b2db      	uxtb	r3, r3
 800dfe2:	f003 0307 	and.w	r3, r3, #7
 800dfe6:	3302      	adds	r3, #2
 800dfe8:	2201      	movs	r2, #1
 800dfea:	fa02 f303 	lsl.w	r3, r2, r3
 800dfee:	687a      	ldr	r2, [r7, #4]
 800dff0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800dff2:	fb03 f202 	mul.w	r2, r3, r2
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800dffa:	683b      	ldr	r3, [r7, #0]
 800dffc:	7a1b      	ldrb	r3, [r3, #8]
 800dffe:	b2db      	uxtb	r3, r3
 800e000:	f003 030f 	and.w	r3, r3, #15
 800e004:	2201      	movs	r2, #1
 800e006:	409a      	lsls	r2, r3
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e010:	687a      	ldr	r2, [r7, #4]
 800e012:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800e014:	0a52      	lsrs	r2, r2, #9
 800e016:	fb03 f202 	mul.w	r2, r3, r2
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e024:	655a      	str	r2, [r3, #84]	@ 0x54
 800e026:	e031      	b.n	800e08c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e02c:	2b01      	cmp	r3, #1
 800e02e:	d11d      	bne.n	800e06c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e034:	041b      	lsls	r3, r3, #16
 800e036:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e03e:	0c1b      	lsrs	r3, r3, #16
 800e040:	431a      	orrs	r2, r3
 800e042:	683b      	ldr	r3, [r7, #0]
 800e044:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	691b      	ldr	r3, [r3, #16]
 800e04a:	3301      	adds	r3, #1
 800e04c:	029a      	lsls	r2, r3, #10
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e060:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	655a      	str	r2, [r3, #84]	@ 0x54
 800e06a:	e00f      	b.n	800e08c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	4a58      	ldr	r2, [pc, #352]	@ (800e1d4 <HAL_SD_GetCardCSD+0x344>)
 800e072:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e078:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2201      	movs	r2, #1
 800e084:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800e088:	2301      	movs	r3, #1
 800e08a:	e09d      	b.n	800e1c8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e090:	0b9b      	lsrs	r3, r3, #14
 800e092:	b2db      	uxtb	r3, r3
 800e094:	f003 0301 	and.w	r3, r3, #1
 800e098:	b2da      	uxtb	r2, r3
 800e09a:	683b      	ldr	r3, [r7, #0]
 800e09c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e0a2:	09db      	lsrs	r3, r3, #7
 800e0a4:	b2db      	uxtb	r3, r3
 800e0a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e0aa:	b2da      	uxtb	r2, r3
 800e0ac:	683b      	ldr	r3, [r7, #0]
 800e0ae:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e0b4:	b2db      	uxtb	r3, r3
 800e0b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e0ba:	b2da      	uxtb	r2, r3
 800e0bc:	683b      	ldr	r3, [r7, #0]
 800e0be:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e0c4:	0fdb      	lsrs	r3, r3, #31
 800e0c6:	b2da      	uxtb	r2, r3
 800e0c8:	683b      	ldr	r3, [r7, #0]
 800e0ca:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e0d0:	0f5b      	lsrs	r3, r3, #29
 800e0d2:	b2db      	uxtb	r3, r3
 800e0d4:	f003 0303 	and.w	r3, r3, #3
 800e0d8:	b2da      	uxtb	r2, r3
 800e0da:	683b      	ldr	r3, [r7, #0]
 800e0dc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e0e2:	0e9b      	lsrs	r3, r3, #26
 800e0e4:	b2db      	uxtb	r3, r3
 800e0e6:	f003 0307 	and.w	r3, r3, #7
 800e0ea:	b2da      	uxtb	r2, r3
 800e0ec:	683b      	ldr	r3, [r7, #0]
 800e0ee:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e0f4:	0d9b      	lsrs	r3, r3, #22
 800e0f6:	b2db      	uxtb	r3, r3
 800e0f8:	f003 030f 	and.w	r3, r3, #15
 800e0fc:	b2da      	uxtb	r2, r3
 800e0fe:	683b      	ldr	r3, [r7, #0]
 800e100:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e106:	0d5b      	lsrs	r3, r3, #21
 800e108:	b2db      	uxtb	r3, r3
 800e10a:	f003 0301 	and.w	r3, r3, #1
 800e10e:	b2da      	uxtb	r2, r3
 800e110:	683b      	ldr	r3, [r7, #0]
 800e112:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800e116:	683b      	ldr	r3, [r7, #0]
 800e118:	2200      	movs	r2, #0
 800e11a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e122:	0c1b      	lsrs	r3, r3, #16
 800e124:	b2db      	uxtb	r3, r3
 800e126:	f003 0301 	and.w	r3, r3, #1
 800e12a:	b2da      	uxtb	r2, r3
 800e12c:	683b      	ldr	r3, [r7, #0]
 800e12e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e136:	0bdb      	lsrs	r3, r3, #15
 800e138:	b2db      	uxtb	r3, r3
 800e13a:	f003 0301 	and.w	r3, r3, #1
 800e13e:	b2da      	uxtb	r2, r3
 800e140:	683b      	ldr	r3, [r7, #0]
 800e142:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e14a:	0b9b      	lsrs	r3, r3, #14
 800e14c:	b2db      	uxtb	r3, r3
 800e14e:	f003 0301 	and.w	r3, r3, #1
 800e152:	b2da      	uxtb	r2, r3
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e15e:	0b5b      	lsrs	r3, r3, #13
 800e160:	b2db      	uxtb	r3, r3
 800e162:	f003 0301 	and.w	r3, r3, #1
 800e166:	b2da      	uxtb	r2, r3
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e172:	0b1b      	lsrs	r3, r3, #12
 800e174:	b2db      	uxtb	r3, r3
 800e176:	f003 0301 	and.w	r3, r3, #1
 800e17a:	b2da      	uxtb	r2, r3
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e186:	0a9b      	lsrs	r3, r3, #10
 800e188:	b2db      	uxtb	r3, r3
 800e18a:	f003 0303 	and.w	r3, r3, #3
 800e18e:	b2da      	uxtb	r2, r3
 800e190:	683b      	ldr	r3, [r7, #0]
 800e192:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e19a:	0a1b      	lsrs	r3, r3, #8
 800e19c:	b2db      	uxtb	r3, r3
 800e19e:	f003 0303 	and.w	r3, r3, #3
 800e1a2:	b2da      	uxtb	r2, r3
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e1ae:	085b      	lsrs	r3, r3, #1
 800e1b0:	b2db      	uxtb	r3, r3
 800e1b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e1b6:	b2da      	uxtb	r2, r3
 800e1b8:	683b      	ldr	r3, [r7, #0]
 800e1ba:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800e1be:	683b      	ldr	r3, [r7, #0]
 800e1c0:	2201      	movs	r2, #1
 800e1c2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800e1c6:	2300      	movs	r3, #0
}
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	370c      	adds	r7, #12
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d2:	4770      	bx	lr
 800e1d4:	1fe00fff 	.word	0x1fe00fff

0800e1d8 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b094      	sub	sp, #80	@ 0x50
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
 800e1e0:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e1ee:	b2db      	uxtb	r3, r3
 800e1f0:	2b03      	cmp	r3, #3
 800e1f2:	d101      	bne.n	800e1f8 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800e1f4:	2301      	movs	r3, #1
 800e1f6:	e0a7      	b.n	800e348 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800e1f8:	f107 0308 	add.w	r3, r7, #8
 800e1fc:	4619      	mov	r1, r3
 800e1fe:	6878      	ldr	r0, [r7, #4]
 800e200:	f000 fb62 	bl	800e8c8 <SD_SendSDStatus>
 800e204:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800e206:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d011      	beq.n	800e230 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	4a4f      	ldr	r2, [pc, #316]	@ (800e350 <HAL_SD_GetCardStatus+0x178>)
 800e212:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e218:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e21a:	431a      	orrs	r2, r3
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	2201      	movs	r2, #1
 800e224:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800e228:	2301      	movs	r3, #1
 800e22a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800e22e:	e070      	b.n	800e312 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800e230:	68bb      	ldr	r3, [r7, #8]
 800e232:	099b      	lsrs	r3, r3, #6
 800e234:	b2db      	uxtb	r3, r3
 800e236:	f003 0303 	and.w	r3, r3, #3
 800e23a:	b2da      	uxtb	r2, r3
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800e240:	68bb      	ldr	r3, [r7, #8]
 800e242:	095b      	lsrs	r3, r3, #5
 800e244:	b2db      	uxtb	r3, r3
 800e246:	f003 0301 	and.w	r3, r3, #1
 800e24a:	b2da      	uxtb	r2, r3
 800e24c:	683b      	ldr	r3, [r7, #0]
 800e24e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800e250:	68bb      	ldr	r3, [r7, #8]
 800e252:	0a1b      	lsrs	r3, r3, #8
 800e254:	b29b      	uxth	r3, r3
 800e256:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800e25a:	b29a      	uxth	r2, r3
 800e25c:	68bb      	ldr	r3, [r7, #8]
 800e25e:	0e1b      	lsrs	r3, r3, #24
 800e260:	b29b      	uxth	r3, r3
 800e262:	4313      	orrs	r3, r2
 800e264:	b29a      	uxth	r2, r3
 800e266:	683b      	ldr	r3, [r7, #0]
 800e268:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	061a      	lsls	r2, r3, #24
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	021b      	lsls	r3, r3, #8
 800e272:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e276:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	0a1b      	lsrs	r3, r3, #8
 800e27c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e280:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	0e1b      	lsrs	r3, r3, #24
 800e286:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800e28c:	693b      	ldr	r3, [r7, #16]
 800e28e:	b2da      	uxtb	r2, r3
 800e290:	683b      	ldr	r3, [r7, #0]
 800e292:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800e294:	693b      	ldr	r3, [r7, #16]
 800e296:	0a1b      	lsrs	r3, r3, #8
 800e298:	b2da      	uxtb	r2, r3
 800e29a:	683b      	ldr	r3, [r7, #0]
 800e29c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800e29e:	693b      	ldr	r3, [r7, #16]
 800e2a0:	0d1b      	lsrs	r3, r3, #20
 800e2a2:	b2db      	uxtb	r3, r3
 800e2a4:	f003 030f 	and.w	r3, r3, #15
 800e2a8:	b2da      	uxtb	r2, r3
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800e2ae:	693b      	ldr	r3, [r7, #16]
 800e2b0:	0c1b      	lsrs	r3, r3, #16
 800e2b2:	b29b      	uxth	r3, r3
 800e2b4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800e2b8:	b29a      	uxth	r2, r3
 800e2ba:	697b      	ldr	r3, [r7, #20]
 800e2bc:	b29b      	uxth	r3, r3
 800e2be:	b2db      	uxtb	r3, r3
 800e2c0:	b29b      	uxth	r3, r3
 800e2c2:	4313      	orrs	r3, r2
 800e2c4:	b29a      	uxth	r2, r3
 800e2c6:	683b      	ldr	r3, [r7, #0]
 800e2c8:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800e2ca:	697b      	ldr	r3, [r7, #20]
 800e2cc:	0a9b      	lsrs	r3, r3, #10
 800e2ce:	b2db      	uxtb	r3, r3
 800e2d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e2d4:	b2da      	uxtb	r2, r3
 800e2d6:	683b      	ldr	r3, [r7, #0]
 800e2d8:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800e2da:	697b      	ldr	r3, [r7, #20]
 800e2dc:	0a1b      	lsrs	r3, r3, #8
 800e2de:	b2db      	uxtb	r3, r3
 800e2e0:	f003 0303 	and.w	r3, r3, #3
 800e2e4:	b2da      	uxtb	r2, r3
 800e2e6:	683b      	ldr	r3, [r7, #0]
 800e2e8:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800e2ea:	697b      	ldr	r3, [r7, #20]
 800e2ec:	091b      	lsrs	r3, r3, #4
 800e2ee:	b2db      	uxtb	r3, r3
 800e2f0:	f003 030f 	and.w	r3, r3, #15
 800e2f4:	b2da      	uxtb	r2, r3
 800e2f6:	683b      	ldr	r3, [r7, #0]
 800e2f8:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800e2fa:	697b      	ldr	r3, [r7, #20]
 800e2fc:	b2db      	uxtb	r3, r3
 800e2fe:	f003 030f 	and.w	r3, r3, #15
 800e302:	b2da      	uxtb	r2, r3
 800e304:	683b      	ldr	r3, [r7, #0]
 800e306:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800e308:	69bb      	ldr	r3, [r7, #24]
 800e30a:	0e1b      	lsrs	r3, r3, #24
 800e30c:	b2da      	uxtb	r2, r3
 800e30e:	683b      	ldr	r3, [r7, #0]
 800e310:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e31a:	4618      	mov	r0, r3
 800e31c:	f004 fcc2 	bl	8012ca4 <SDMMC_CmdBlockLength>
 800e320:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800e322:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e324:	2b00      	cmp	r3, #0
 800e326:	d00d      	beq.n	800e344 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	4a08      	ldr	r2, [pc, #32]	@ (800e350 <HAL_SD_GetCardStatus+0x178>)
 800e32e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e334:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	2201      	movs	r2, #1
 800e33a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800e33e:	2301      	movs	r3, #1
 800e340:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 800e344:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800e348:	4618      	mov	r0, r3
 800e34a:	3750      	adds	r7, #80	@ 0x50
 800e34c:	46bd      	mov	sp, r7
 800e34e:	bd80      	pop	{r7, pc}
 800e350:	1fe00fff 	.word	0x1fe00fff

0800e354 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800e354:	b480      	push	{r7}
 800e356:	b083      	sub	sp, #12
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]
 800e35c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e362:	683b      	ldr	r3, [r7, #0]
 800e364:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e36a:	683b      	ldr	r3, [r7, #0]
 800e36c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e372:	683b      	ldr	r3, [r7, #0]
 800e374:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e37a:	683b      	ldr	r3, [r7, #0]
 800e37c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e382:	683b      	ldr	r3, [r7, #0]
 800e384:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e38a:	683b      	ldr	r3, [r7, #0]
 800e38c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e392:	683b      	ldr	r3, [r7, #0]
 800e394:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e39a:	683b      	ldr	r3, [r7, #0]
 800e39c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800e39e:	2300      	movs	r3, #0
}
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	370c      	adds	r7, #12
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3aa:	4770      	bx	lr

0800e3ac <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800e3ac:	b590      	push	{r4, r7, lr}
 800e3ae:	b08d      	sub	sp, #52	@ 0x34
 800e3b0:	af02      	add	r7, sp, #8
 800e3b2:	6078      	str	r0, [r7, #4]
 800e3b4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	2203      	movs	r2, #3
 800e3c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e3c8:	2b03      	cmp	r3, #3
 800e3ca:	d02e      	beq.n	800e42a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800e3cc:	683b      	ldr	r3, [r7, #0]
 800e3ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e3d2:	d106      	bne.n	800e3e2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e3d8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	635a      	str	r2, [r3, #52]	@ 0x34
 800e3e0:	e029      	b.n	800e436 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800e3e2:	683b      	ldr	r3, [r7, #0]
 800e3e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e3e8:	d10a      	bne.n	800e400 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800e3ea:	6878      	ldr	r0, [r7, #4]
 800e3ec:	f000 fb64 	bl	800eab8 <SD_WideBus_Enable>
 800e3f0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e3f6:	6a3b      	ldr	r3, [r7, #32]
 800e3f8:	431a      	orrs	r2, r3
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	635a      	str	r2, [r3, #52]	@ 0x34
 800e3fe:	e01a      	b.n	800e436 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800e400:	683b      	ldr	r3, [r7, #0]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d10a      	bne.n	800e41c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800e406:	6878      	ldr	r0, [r7, #4]
 800e408:	f000 fba1 	bl	800eb4e <SD_WideBus_Disable>
 800e40c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e412:	6a3b      	ldr	r3, [r7, #32]
 800e414:	431a      	orrs	r2, r3
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	635a      	str	r2, [r3, #52]	@ 0x34
 800e41a:	e00c      	b.n	800e436 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e420:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	635a      	str	r2, [r3, #52]	@ 0x34
 800e428:	e005      	b.n	800e436 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e42e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d007      	beq.n	800e44e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	4a5f      	ldr	r2, [pc, #380]	@ (800e5c0 <HAL_SD_ConfigWideBusOperation+0x214>)
 800e444:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800e446:	2301      	movs	r3, #1
 800e448:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e44c:	e096      	b.n	800e57c <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800e44e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800e452:	f04f 0100 	mov.w	r1, #0
 800e456:	f7fd fea3 	bl	800c1a0 <HAL_RCCEx_GetPeriphCLKFreq>
 800e45a:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800e45c:	69fb      	ldr	r3, [r7, #28]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	f000 8083 	beq.w	800e56a <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	685b      	ldr	r3, [r3, #4]
 800e468:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	689b      	ldr	r3, [r3, #8]
 800e46e:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800e470:	683b      	ldr	r3, [r7, #0]
 800e472:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	691b      	ldr	r3, [r3, #16]
 800e478:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	695a      	ldr	r2, [r3, #20]
 800e47e:	69fb      	ldr	r3, [r7, #28]
 800e480:	4950      	ldr	r1, [pc, #320]	@ (800e5c4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e482:	fba1 1303 	umull	r1, r3, r1, r3
 800e486:	0e1b      	lsrs	r3, r3, #24
 800e488:	429a      	cmp	r2, r3
 800e48a:	d303      	bcc.n	800e494 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	695b      	ldr	r3, [r3, #20]
 800e490:	61bb      	str	r3, [r7, #24]
 800e492:	e05a      	b.n	800e54a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e498:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e49c:	d103      	bne.n	800e4a6 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	695b      	ldr	r3, [r3, #20]
 800e4a2:	61bb      	str	r3, [r7, #24]
 800e4a4:	e051      	b.n	800e54a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e4aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e4ae:	d126      	bne.n	800e4fe <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	695b      	ldr	r3, [r3, #20]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d10e      	bne.n	800e4d6 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800e4b8:	69fb      	ldr	r3, [r7, #28]
 800e4ba:	4a43      	ldr	r2, [pc, #268]	@ (800e5c8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e4bc:	4293      	cmp	r3, r2
 800e4be:	d906      	bls.n	800e4ce <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e4c0:	69fb      	ldr	r3, [r7, #28]
 800e4c2:	4a40      	ldr	r2, [pc, #256]	@ (800e5c4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e4c4:	fba2 2303 	umull	r2, r3, r2, r3
 800e4c8:	0e5b      	lsrs	r3, r3, #25
 800e4ca:	61bb      	str	r3, [r7, #24]
 800e4cc:	e03d      	b.n	800e54a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	695b      	ldr	r3, [r3, #20]
 800e4d2:	61bb      	str	r3, [r7, #24]
 800e4d4:	e039      	b.n	800e54a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	695b      	ldr	r3, [r3, #20]
 800e4da:	005b      	lsls	r3, r3, #1
 800e4dc:	69fa      	ldr	r2, [r7, #28]
 800e4de:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4e2:	4a39      	ldr	r2, [pc, #228]	@ (800e5c8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e4e4:	4293      	cmp	r3, r2
 800e4e6:	d906      	bls.n	800e4f6 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e4e8:	69fb      	ldr	r3, [r7, #28]
 800e4ea:	4a36      	ldr	r2, [pc, #216]	@ (800e5c4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e4ec:	fba2 2303 	umull	r2, r3, r2, r3
 800e4f0:	0e5b      	lsrs	r3, r3, #25
 800e4f2:	61bb      	str	r3, [r7, #24]
 800e4f4:	e029      	b.n	800e54a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	695b      	ldr	r3, [r3, #20]
 800e4fa:	61bb      	str	r3, [r7, #24]
 800e4fc:	e025      	b.n	800e54a <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	695b      	ldr	r3, [r3, #20]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d10e      	bne.n	800e524 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800e506:	69fb      	ldr	r3, [r7, #28]
 800e508:	4a30      	ldr	r2, [pc, #192]	@ (800e5cc <HAL_SD_ConfigWideBusOperation+0x220>)
 800e50a:	4293      	cmp	r3, r2
 800e50c:	d906      	bls.n	800e51c <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e50e:	69fb      	ldr	r3, [r7, #28]
 800e510:	4a2c      	ldr	r2, [pc, #176]	@ (800e5c4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e512:	fba2 2303 	umull	r2, r3, r2, r3
 800e516:	0e1b      	lsrs	r3, r3, #24
 800e518:	61bb      	str	r3, [r7, #24]
 800e51a:	e016      	b.n	800e54a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	695b      	ldr	r3, [r3, #20]
 800e520:	61bb      	str	r3, [r7, #24]
 800e522:	e012      	b.n	800e54a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	695b      	ldr	r3, [r3, #20]
 800e528:	005b      	lsls	r3, r3, #1
 800e52a:	69fa      	ldr	r2, [r7, #28]
 800e52c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e530:	4a26      	ldr	r2, [pc, #152]	@ (800e5cc <HAL_SD_ConfigWideBusOperation+0x220>)
 800e532:	4293      	cmp	r3, r2
 800e534:	d906      	bls.n	800e544 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e536:	69fb      	ldr	r3, [r7, #28]
 800e538:	4a22      	ldr	r2, [pc, #136]	@ (800e5c4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e53a:	fba2 2303 	umull	r2, r3, r2, r3
 800e53e:	0e1b      	lsrs	r3, r3, #24
 800e540:	61bb      	str	r3, [r7, #24]
 800e542:	e002      	b.n	800e54a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	695b      	ldr	r3, [r3, #20]
 800e548:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	681c      	ldr	r4, [r3, #0]
 800e54e:	466a      	mov	r2, sp
 800e550:	f107 0314 	add.w	r3, r7, #20
 800e554:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e558:	e882 0003 	stmia.w	r2, {r0, r1}
 800e55c:	f107 0308 	add.w	r3, r7, #8
 800e560:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e562:	4620      	mov	r0, r4
 800e564:	f004 fac0 	bl	8012ae8 <SDMMC_Init>
 800e568:	e008      	b.n	800e57c <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e56e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800e576:	2301      	movs	r3, #1
 800e578:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e584:	4618      	mov	r0, r3
 800e586:	f004 fb8d 	bl	8012ca4 <SDMMC_CmdBlockLength>
 800e58a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e58c:	6a3b      	ldr	r3, [r7, #32]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d00c      	beq.n	800e5ac <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	4a0a      	ldr	r2, [pc, #40]	@ (800e5c0 <HAL_SD_ConfigWideBusOperation+0x214>)
 800e598:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e59e:	6a3b      	ldr	r3, [r7, #32]
 800e5a0:	431a      	orrs	r2, r3
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800e5a6:	2301      	movs	r3, #1
 800e5a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2201      	movs	r2, #1
 800e5b0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800e5b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	372c      	adds	r7, #44	@ 0x2c
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	bd90      	pop	{r4, r7, pc}
 800e5c0:	1fe00fff 	.word	0x1fe00fff
 800e5c4:	55e63b89 	.word	0x55e63b89
 800e5c8:	02faf080 	.word	0x02faf080
 800e5cc:	017d7840 	.word	0x017d7840

0800e5d0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b086      	sub	sp, #24
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800e5d8:	2300      	movs	r3, #0
 800e5da:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800e5dc:	f107 030c 	add.w	r3, r7, #12
 800e5e0:	4619      	mov	r1, r3
 800e5e2:	6878      	ldr	r0, [r7, #4]
 800e5e4:	f000 fa40 	bl	800ea68 <SD_SendStatus>
 800e5e8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e5ea:	697b      	ldr	r3, [r7, #20]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d005      	beq.n	800e5fc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e5f4:	697b      	ldr	r3, [r7, #20]
 800e5f6:	431a      	orrs	r2, r3
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	0a5b      	lsrs	r3, r3, #9
 800e600:	f003 030f 	and.w	r3, r3, #15
 800e604:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800e606:	693b      	ldr	r3, [r7, #16]
}
 800e608:	4618      	mov	r0, r3
 800e60a:	3718      	adds	r7, #24
 800e60c:	46bd      	mov	sp, r7
 800e60e:	bd80      	pop	{r7, pc}

0800e610 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b090      	sub	sp, #64	@ 0x40
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800e618:	2300      	movs	r3, #0
 800e61a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800e61c:	f7f5 fde2 	bl	80041e4 <HAL_GetTick>
 800e620:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	4618      	mov	r0, r3
 800e628:	f004 fab7 	bl	8012b9a <SDMMC_GetPowerState>
 800e62c:	4603      	mov	r3, r0
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d102      	bne.n	800e638 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e632:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800e636:	e0b5      	b.n	800e7a4 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e63c:	2b03      	cmp	r3, #3
 800e63e:	d02e      	beq.n	800e69e <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	4618      	mov	r0, r3
 800e646:	f004 fd02 	bl	801304e <SDMMC_CmdSendCID>
 800e64a:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e64c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d001      	beq.n	800e656 <SD_InitCard+0x46>
    {
      return errorstate;
 800e652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e654:	e0a6      	b.n	800e7a4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	2100      	movs	r1, #0
 800e65c:	4618      	mov	r0, r3
 800e65e:	f004 fae2 	bl	8012c26 <SDMMC_GetResponse>
 800e662:	4602      	mov	r2, r0
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	2104      	movs	r1, #4
 800e66e:	4618      	mov	r0, r3
 800e670:	f004 fad9 	bl	8012c26 <SDMMC_GetResponse>
 800e674:	4602      	mov	r2, r0
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	2108      	movs	r1, #8
 800e680:	4618      	mov	r0, r3
 800e682:	f004 fad0 	bl	8012c26 <SDMMC_GetResponse>
 800e686:	4602      	mov	r2, r0
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	210c      	movs	r1, #12
 800e692:	4618      	mov	r0, r3
 800e694:	f004 fac7 	bl	8012c26 <SDMMC_GetResponse>
 800e698:	4602      	mov	r2, r0
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e6a2:	2b03      	cmp	r3, #3
 800e6a4:	d01d      	beq.n	800e6e2 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800e6a6:	e019      	b.n	800e6dc <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	f107 020a 	add.w	r2, r7, #10
 800e6b0:	4611      	mov	r1, r2
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	f004 fd0a 	bl	80130cc <SDMMC_CmdSetRelAdd>
 800e6b8:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800e6ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d001      	beq.n	800e6c4 <SD_InitCard+0xb4>
      {
        return errorstate;
 800e6c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6c2:	e06f      	b.n	800e7a4 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800e6c4:	f7f5 fd8e 	bl	80041e4 <HAL_GetTick>
 800e6c8:	4602      	mov	r2, r0
 800e6ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e6cc:	1ad3      	subs	r3, r2, r3
 800e6ce:	f241 3287 	movw	r2, #4999	@ 0x1387
 800e6d2:	4293      	cmp	r3, r2
 800e6d4:	d902      	bls.n	800e6dc <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800e6d6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e6da:	e063      	b.n	800e7a4 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800e6dc:	897b      	ldrh	r3, [r7, #10]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d0e2      	beq.n	800e6a8 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e6e6:	2b03      	cmp	r3, #3
 800e6e8:	d036      	beq.n	800e758 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e6ea:	897b      	ldrh	r3, [r7, #10]
 800e6ec:	461a      	mov	r2, r3
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	681a      	ldr	r2, [r3, #0]
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e6fa:	041b      	lsls	r3, r3, #16
 800e6fc:	4619      	mov	r1, r3
 800e6fe:	4610      	mov	r0, r2
 800e700:	f004 fcc4 	bl	801308c <SDMMC_CmdSendCSD>
 800e704:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d001      	beq.n	800e710 <SD_InitCard+0x100>
    {
      return errorstate;
 800e70c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e70e:	e049      	b.n	800e7a4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	2100      	movs	r1, #0
 800e716:	4618      	mov	r0, r3
 800e718:	f004 fa85 	bl	8012c26 <SDMMC_GetResponse>
 800e71c:	4602      	mov	r2, r0
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	2104      	movs	r1, #4
 800e728:	4618      	mov	r0, r3
 800e72a:	f004 fa7c 	bl	8012c26 <SDMMC_GetResponse>
 800e72e:	4602      	mov	r2, r0
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	2108      	movs	r1, #8
 800e73a:	4618      	mov	r0, r3
 800e73c:	f004 fa73 	bl	8012c26 <SDMMC_GetResponse>
 800e740:	4602      	mov	r2, r0
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	210c      	movs	r1, #12
 800e74c:	4618      	mov	r0, r3
 800e74e:	f004 fa6a 	bl	8012c26 <SDMMC_GetResponse>
 800e752:	4602      	mov	r2, r0
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	2104      	movs	r1, #4
 800e75e:	4618      	mov	r0, r3
 800e760:	f004 fa61 	bl	8012c26 <SDMMC_GetResponse>
 800e764:	4603      	mov	r3, r0
 800e766:	0d1a      	lsrs	r2, r3, #20
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e76c:	f107 030c 	add.w	r3, r7, #12
 800e770:	4619      	mov	r1, r3
 800e772:	6878      	ldr	r0, [r7, #4]
 800e774:	f7ff fb8c 	bl	800de90 <HAL_SD_GetCardCSD>
 800e778:	4603      	mov	r3, r0
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d002      	beq.n	800e784 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e77e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800e782:	e00f      	b.n	800e7a4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681a      	ldr	r2, [r3, #0]
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e78c:	041b      	lsls	r3, r3, #16
 800e78e:	4619      	mov	r1, r3
 800e790:	4610      	mov	r0, r2
 800e792:	f004 fb73 	bl	8012e7c <SDMMC_CmdSelDesel>
 800e796:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800e798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d001      	beq.n	800e7a2 <SD_InitCard+0x192>
  {
    return errorstate;
 800e79e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7a0:	e000      	b.n	800e7a4 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e7a2:	2300      	movs	r3, #0
}
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	3740      	adds	r7, #64	@ 0x40
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	bd80      	pop	{r7, pc}

0800e7ac <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b086      	sub	sp, #24
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800e7bc:	2300      	movs	r3, #0
 800e7be:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	f004 fb7c 	bl	8012ec2 <SDMMC_CmdGoIdleState>
 800e7ca:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d001      	beq.n	800e7d6 <SD_PowerON+0x2a>
  {
    return errorstate;
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	e072      	b.n	800e8bc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	4618      	mov	r0, r3
 800e7dc:	f004 fb8f 	bl	8012efe <SDMMC_CmdOperCond>
 800e7e0:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e7e8:	d10d      	bne.n	800e806 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	f004 fb64 	bl	8012ec2 <SDMMC_CmdGoIdleState>
 800e7fa:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d004      	beq.n	800e80c <SD_PowerON+0x60>
    {
      return errorstate;
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	e05a      	b.n	800e8bc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	2201      	movs	r2, #1
 800e80a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e810:	2b01      	cmp	r3, #1
 800e812:	d137      	bne.n	800e884 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	2100      	movs	r1, #0
 800e81a:	4618      	mov	r0, r3
 800e81c:	f004 fb8f 	bl	8012f3e <SDMMC_CmdAppCommand>
 800e820:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d02d      	beq.n	800e884 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e828:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800e82c:	e046      	b.n	800e8bc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	2100      	movs	r1, #0
 800e834:	4618      	mov	r0, r3
 800e836:	f004 fb82 	bl	8012f3e <SDMMC_CmdAppCommand>
 800e83a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d001      	beq.n	800e846 <SD_PowerON+0x9a>
    {
      return errorstate;
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	e03a      	b.n	800e8bc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	491e      	ldr	r1, [pc, #120]	@ (800e8c4 <SD_PowerON+0x118>)
 800e84c:	4618      	mov	r0, r3
 800e84e:	f004 fb99 	bl	8012f84 <SDMMC_CmdAppOperCommand>
 800e852:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d002      	beq.n	800e860 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e85a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800e85e:	e02d      	b.n	800e8bc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	2100      	movs	r1, #0
 800e866:	4618      	mov	r0, r3
 800e868:	f004 f9dd 	bl	8012c26 <SDMMC_GetResponse>
 800e86c:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e86e:	697b      	ldr	r3, [r7, #20]
 800e870:	0fdb      	lsrs	r3, r3, #31
 800e872:	2b01      	cmp	r3, #1
 800e874:	d101      	bne.n	800e87a <SD_PowerON+0xce>
 800e876:	2301      	movs	r3, #1
 800e878:	e000      	b.n	800e87c <SD_PowerON+0xd0>
 800e87a:	2300      	movs	r3, #0
 800e87c:	613b      	str	r3, [r7, #16]

    count++;
 800e87e:	68bb      	ldr	r3, [r7, #8]
 800e880:	3301      	adds	r3, #1
 800e882:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e884:	68bb      	ldr	r3, [r7, #8]
 800e886:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800e88a:	4293      	cmp	r3, r2
 800e88c:	d802      	bhi.n	800e894 <SD_PowerON+0xe8>
 800e88e:	693b      	ldr	r3, [r7, #16]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d0cc      	beq.n	800e82e <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800e894:	68bb      	ldr	r3, [r7, #8]
 800e896:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800e89a:	4293      	cmp	r3, r2
 800e89c:	d902      	bls.n	800e8a4 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e89e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e8a2:	e00b      	b.n	800e8bc <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800e8aa:	697b      	ldr	r3, [r7, #20]
 800e8ac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d002      	beq.n	800e8ba <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	2201      	movs	r2, #1
 800e8b8:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800e8ba:	2300      	movs	r3, #0
}
 800e8bc:	4618      	mov	r0, r3
 800e8be:	3718      	adds	r7, #24
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	bd80      	pop	{r7, pc}
 800e8c4:	c1100000 	.word	0xc1100000

0800e8c8 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b08c      	sub	sp, #48	@ 0x30
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
 800e8d0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e8d2:	f7f5 fc87 	bl	80041e4 <HAL_GetTick>
 800e8d6:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800e8d8:	683b      	ldr	r3, [r7, #0]
 800e8da:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	2100      	movs	r1, #0
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	f004 f99f 	bl	8012c26 <SDMMC_GetResponse>
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e8ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e8f2:	d102      	bne.n	800e8fa <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e8f4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e8f8:	e0b0      	b.n	800ea5c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	2140      	movs	r1, #64	@ 0x40
 800e900:	4618      	mov	r0, r3
 800e902:	f004 f9cf 	bl	8012ca4 <SDMMC_CmdBlockLength>
 800e906:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e908:	6a3b      	ldr	r3, [r7, #32]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d005      	beq.n	800e91a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800e916:	6a3b      	ldr	r3, [r7, #32]
 800e918:	e0a0      	b.n	800ea5c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	681a      	ldr	r2, [r3, #0]
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e922:	041b      	lsls	r3, r3, #16
 800e924:	4619      	mov	r1, r3
 800e926:	4610      	mov	r0, r2
 800e928:	f004 fb09 	bl	8012f3e <SDMMC_CmdAppCommand>
 800e92c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e92e:	6a3b      	ldr	r3, [r7, #32]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d005      	beq.n	800e940 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800e93c:	6a3b      	ldr	r3, [r7, #32]
 800e93e:	e08d      	b.n	800ea5c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e940:	f04f 33ff 	mov.w	r3, #4294967295
 800e944:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800e946:	2340      	movs	r3, #64	@ 0x40
 800e948:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800e94a:	2360      	movs	r3, #96	@ 0x60
 800e94c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e94e:	2302      	movs	r3, #2
 800e950:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e952:	2300      	movs	r3, #0
 800e954:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e956:	2301      	movs	r3, #1
 800e958:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	f107 0208 	add.w	r2, r7, #8
 800e962:	4611      	mov	r1, r2
 800e964:	4618      	mov	r0, r3
 800e966:	f004 f971 	bl	8012c4c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	4618      	mov	r0, r3
 800e970:	f004 fbf1 	bl	8013156 <SDMMC_CmdStatusRegister>
 800e974:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e976:	6a3b      	ldr	r3, [r7, #32]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d02b      	beq.n	800e9d4 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800e984:	6a3b      	ldr	r3, [r7, #32]
 800e986:	e069      	b.n	800ea5c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e98e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e992:	2b00      	cmp	r3, #0
 800e994:	d013      	beq.n	800e9be <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800e996:	2300      	movs	r3, #0
 800e998:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e99a:	e00d      	b.n	800e9b8 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	f004 f8cb 	bl	8012b3c <SDMMC_ReadFIFO>
 800e9a6:	4602      	mov	r2, r0
 800e9a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9aa:	601a      	str	r2, [r3, #0]
        pData++;
 800e9ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9ae:	3304      	adds	r3, #4
 800e9b0:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800e9b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9b4:	3301      	adds	r3, #1
 800e9b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e9b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9ba:	2b07      	cmp	r3, #7
 800e9bc:	d9ee      	bls.n	800e99c <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e9be:	f7f5 fc11 	bl	80041e4 <HAL_GetTick>
 800e9c2:	4602      	mov	r2, r0
 800e9c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9c6:	1ad3      	subs	r3, r2, r3
 800e9c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9cc:	d102      	bne.n	800e9d4 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e9ce:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e9d2:	e043      	b.n	800ea5c <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e9da:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d0d2      	beq.n	800e988 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e9e8:	f003 0308 	and.w	r3, r3, #8
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d001      	beq.n	800e9f4 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e9f0:	2308      	movs	r3, #8
 800e9f2:	e033      	b.n	800ea5c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e9fa:	f003 0302 	and.w	r3, r3, #2
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d001      	beq.n	800ea06 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ea02:	2302      	movs	r3, #2
 800ea04:	e02a      	b.n	800ea5c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ea0c:	f003 0320 	and.w	r3, r3, #32
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d017      	beq.n	800ea44 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800ea14:	2320      	movs	r3, #32
 800ea16:	e021      	b.n	800ea5c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	f004 f88d 	bl	8012b3c <SDMMC_ReadFIFO>
 800ea22:	4602      	mov	r2, r0
 800ea24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea26:	601a      	str	r2, [r3, #0]
    pData++;
 800ea28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea2a:	3304      	adds	r3, #4
 800ea2c:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ea2e:	f7f5 fbd9 	bl	80041e4 <HAL_GetTick>
 800ea32:	4602      	mov	r2, r0
 800ea34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea36:	1ad3      	subs	r3, r2, r3
 800ea38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea3c:	d102      	bne.n	800ea44 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ea3e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ea42:	e00b      	b.n	800ea5c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ea4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d1e2      	bne.n	800ea18 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	4a03      	ldr	r2, [pc, #12]	@ (800ea64 <SD_SendSDStatus+0x19c>)
 800ea58:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800ea5a:	2300      	movs	r3, #0
}
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	3730      	adds	r7, #48	@ 0x30
 800ea60:	46bd      	mov	sp, r7
 800ea62:	bd80      	pop	{r7, pc}
 800ea64:	18000f3a 	.word	0x18000f3a

0800ea68 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b084      	sub	sp, #16
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
 800ea70:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800ea72:	683b      	ldr	r3, [r7, #0]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d102      	bne.n	800ea7e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800ea78:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ea7c:	e018      	b.n	800eab0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	681a      	ldr	r2, [r3, #0]
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ea86:	041b      	lsls	r3, r3, #16
 800ea88:	4619      	mov	r1, r3
 800ea8a:	4610      	mov	r0, r2
 800ea8c:	f004 fb40 	bl	8013110 <SDMMC_CmdSendStatus>
 800ea90:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d001      	beq.n	800ea9c <SD_SendStatus+0x34>
  {
    return errorstate;
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	e009      	b.n	800eab0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	2100      	movs	r1, #0
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	f004 f8bf 	bl	8012c26 <SDMMC_GetResponse>
 800eaa8:	4602      	mov	r2, r0
 800eaaa:	683b      	ldr	r3, [r7, #0]
 800eaac:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800eaae:	2300      	movs	r3, #0
}
 800eab0:	4618      	mov	r0, r3
 800eab2:	3710      	adds	r7, #16
 800eab4:	46bd      	mov	sp, r7
 800eab6:	bd80      	pop	{r7, pc}

0800eab8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b086      	sub	sp, #24
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800eac0:	2300      	movs	r3, #0
 800eac2:	60fb      	str	r3, [r7, #12]
 800eac4:	2300      	movs	r3, #0
 800eac6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	2100      	movs	r1, #0
 800eace:	4618      	mov	r0, r3
 800ead0:	f004 f8a9 	bl	8012c26 <SDMMC_GetResponse>
 800ead4:	4603      	mov	r3, r0
 800ead6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800eada:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800eade:	d102      	bne.n	800eae6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800eae0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800eae4:	e02f      	b.n	800eb46 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800eae6:	f107 030c 	add.w	r3, r7, #12
 800eaea:	4619      	mov	r1, r3
 800eaec:	6878      	ldr	r0, [r7, #4]
 800eaee:	f000 f879 	bl	800ebe4 <SD_FindSCR>
 800eaf2:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800eaf4:	697b      	ldr	r3, [r7, #20]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d001      	beq.n	800eafe <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800eafa:	697b      	ldr	r3, [r7, #20]
 800eafc:	e023      	b.n	800eb46 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800eafe:	693b      	ldr	r3, [r7, #16]
 800eb00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d01c      	beq.n	800eb42 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	681a      	ldr	r2, [r3, #0]
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eb10:	041b      	lsls	r3, r3, #16
 800eb12:	4619      	mov	r1, r3
 800eb14:	4610      	mov	r0, r2
 800eb16:	f004 fa12 	bl	8012f3e <SDMMC_CmdAppCommand>
 800eb1a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800eb1c:	697b      	ldr	r3, [r7, #20]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d001      	beq.n	800eb26 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800eb22:	697b      	ldr	r3, [r7, #20]
 800eb24:	e00f      	b.n	800eb46 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	2102      	movs	r1, #2
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	f004 fa49 	bl	8012fc4 <SDMMC_CmdBusWidth>
 800eb32:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800eb34:	697b      	ldr	r3, [r7, #20]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d001      	beq.n	800eb3e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800eb3a:	697b      	ldr	r3, [r7, #20]
 800eb3c:	e003      	b.n	800eb46 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800eb3e:	2300      	movs	r3, #0
 800eb40:	e001      	b.n	800eb46 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800eb42:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800eb46:	4618      	mov	r0, r3
 800eb48:	3718      	adds	r7, #24
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bd80      	pop	{r7, pc}

0800eb4e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800eb4e:	b580      	push	{r7, lr}
 800eb50:	b086      	sub	sp, #24
 800eb52:	af00      	add	r7, sp, #0
 800eb54:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800eb56:	2300      	movs	r3, #0
 800eb58:	60fb      	str	r3, [r7, #12]
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	2100      	movs	r1, #0
 800eb64:	4618      	mov	r0, r3
 800eb66:	f004 f85e 	bl	8012c26 <SDMMC_GetResponse>
 800eb6a:	4603      	mov	r3, r0
 800eb6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800eb70:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800eb74:	d102      	bne.n	800eb7c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800eb76:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800eb7a:	e02f      	b.n	800ebdc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800eb7c:	f107 030c 	add.w	r3, r7, #12
 800eb80:	4619      	mov	r1, r3
 800eb82:	6878      	ldr	r0, [r7, #4]
 800eb84:	f000 f82e 	bl	800ebe4 <SD_FindSCR>
 800eb88:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800eb8a:	697b      	ldr	r3, [r7, #20]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d001      	beq.n	800eb94 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800eb90:	697b      	ldr	r3, [r7, #20]
 800eb92:	e023      	b.n	800ebdc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800eb94:	693b      	ldr	r3, [r7, #16]
 800eb96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d01c      	beq.n	800ebd8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	681a      	ldr	r2, [r3, #0]
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eba6:	041b      	lsls	r3, r3, #16
 800eba8:	4619      	mov	r1, r3
 800ebaa:	4610      	mov	r0, r2
 800ebac:	f004 f9c7 	bl	8012f3e <SDMMC_CmdAppCommand>
 800ebb0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ebb2:	697b      	ldr	r3, [r7, #20]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d001      	beq.n	800ebbc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800ebb8:	697b      	ldr	r3, [r7, #20]
 800ebba:	e00f      	b.n	800ebdc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	2100      	movs	r1, #0
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	f004 f9fe 	bl	8012fc4 <SDMMC_CmdBusWidth>
 800ebc8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ebca:	697b      	ldr	r3, [r7, #20]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d001      	beq.n	800ebd4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800ebd0:	697b      	ldr	r3, [r7, #20]
 800ebd2:	e003      	b.n	800ebdc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	e001      	b.n	800ebdc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ebd8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800ebdc:	4618      	mov	r0, r3
 800ebde:	3718      	adds	r7, #24
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	bd80      	pop	{r7, pc}

0800ebe4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b08e      	sub	sp, #56	@ 0x38
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
 800ebec:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ebee:	f7f5 faf9 	bl	80041e4 <HAL_GetTick>
 800ebf2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	60bb      	str	r3, [r7, #8]
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800ec00:	683b      	ldr	r3, [r7, #0]
 800ec02:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	2108      	movs	r1, #8
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	f004 f84a 	bl	8012ca4 <SDMMC_CmdBlockLength>
 800ec10:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ec12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d001      	beq.n	800ec1c <SD_FindSCR+0x38>
  {
    return errorstate;
 800ec18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec1a:	e0ad      	b.n	800ed78 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	681a      	ldr	r2, [r3, #0]
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ec24:	041b      	lsls	r3, r3, #16
 800ec26:	4619      	mov	r1, r3
 800ec28:	4610      	mov	r0, r2
 800ec2a:	f004 f988 	bl	8012f3e <SDMMC_CmdAppCommand>
 800ec2e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ec30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d001      	beq.n	800ec3a <SD_FindSCR+0x56>
  {
    return errorstate;
 800ec36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec38:	e09e      	b.n	800ed78 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ec3a:	f04f 33ff 	mov.w	r3, #4294967295
 800ec3e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800ec40:	2308      	movs	r3, #8
 800ec42:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800ec44:	2330      	movs	r3, #48	@ 0x30
 800ec46:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ec48:	2302      	movs	r3, #2
 800ec4a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ec50:	2301      	movs	r3, #1
 800ec52:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	f107 0210 	add.w	r2, r7, #16
 800ec5c:	4611      	mov	r1, r2
 800ec5e:	4618      	mov	r0, r3
 800ec60:	f003 fff4 	bl	8012c4c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	4618      	mov	r0, r3
 800ec6a:	f004 f9ce 	bl	801300a <SDMMC_CmdSendSCR>
 800ec6e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ec70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d027      	beq.n	800ecc6 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800ec76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec78:	e07e      	b.n	800ed78 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec80:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d113      	bne.n	800ecb0 <SD_FindSCR+0xcc>
 800ec88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d110      	bne.n	800ecb0 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	4618      	mov	r0, r3
 800ec94:	f003 ff52 	bl	8012b3c <SDMMC_ReadFIFO>
 800ec98:	4603      	mov	r3, r0
 800ec9a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	4618      	mov	r0, r3
 800eca2:	f003 ff4b 	bl	8012b3c <SDMMC_ReadFIFO>
 800eca6:	4603      	mov	r3, r0
 800eca8:	60fb      	str	r3, [r7, #12]
      index++;
 800ecaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ecac:	3301      	adds	r3, #1
 800ecae:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ecb0:	f7f5 fa98 	bl	80041e4 <HAL_GetTick>
 800ecb4:	4602      	mov	r2, r0
 800ecb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecb8:	1ad3      	subs	r3, r2, r3
 800ecba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecbe:	d102      	bne.n	800ecc6 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ecc0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ecc4:	e058      	b.n	800ed78 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800eccc:	f240 532a 	movw	r3, #1322	@ 0x52a
 800ecd0:	4013      	ands	r3, r2
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d0d1      	beq.n	800ec7a <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ecdc:	f003 0308 	and.w	r3, r3, #8
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d005      	beq.n	800ecf0 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	2208      	movs	r2, #8
 800ecea:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ecec:	2308      	movs	r3, #8
 800ecee:	e043      	b.n	800ed78 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ecf6:	f003 0302 	and.w	r3, r3, #2
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d005      	beq.n	800ed0a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	2202      	movs	r2, #2
 800ed04:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ed06:	2302      	movs	r3, #2
 800ed08:	e036      	b.n	800ed78 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed10:	f003 0320 	and.w	r3, r3, #32
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d005      	beq.n	800ed24 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	2220      	movs	r2, #32
 800ed1e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800ed20:	2320      	movs	r3, #32
 800ed22:	e029      	b.n	800ed78 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	4a15      	ldr	r2, [pc, #84]	@ (800ed80 <SD_FindSCR+0x19c>)
 800ed2a:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	061a      	lsls	r2, r3, #24
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	021b      	lsls	r3, r3, #8
 800ed34:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ed38:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	0a1b      	lsrs	r3, r3, #8
 800ed3e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ed42:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	0e1b      	lsrs	r3, r3, #24
 800ed48:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ed4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed4c:	601a      	str	r2, [r3, #0]
    scr++;
 800ed4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed50:	3304      	adds	r3, #4
 800ed52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ed54:	68bb      	ldr	r3, [r7, #8]
 800ed56:	061a      	lsls	r2, r3, #24
 800ed58:	68bb      	ldr	r3, [r7, #8]
 800ed5a:	021b      	lsls	r3, r3, #8
 800ed5c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ed60:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ed62:	68bb      	ldr	r3, [r7, #8]
 800ed64:	0a1b      	lsrs	r3, r3, #8
 800ed66:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ed6a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ed6c:	68bb      	ldr	r3, [r7, #8]
 800ed6e:	0e1b      	lsrs	r3, r3, #24
 800ed70:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ed72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed74:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800ed76:	2300      	movs	r3, #0
}
 800ed78:	4618      	mov	r0, r3
 800ed7a:	3738      	adds	r7, #56	@ 0x38
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	bd80      	pop	{r7, pc}
 800ed80:	18000f3a 	.word	0x18000f3a

0800ed84 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b086      	sub	sp, #24
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed90:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed96:	2b1f      	cmp	r3, #31
 800ed98:	d936      	bls.n	800ee08 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	617b      	str	r3, [r7, #20]
 800ed9e:	e027      	b.n	800edf0 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	4618      	mov	r0, r3
 800eda6:	f003 fec9 	bl	8012b3c <SDMMC_ReadFIFO>
 800edaa:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	b2da      	uxtb	r2, r3
 800edb0:	693b      	ldr	r3, [r7, #16]
 800edb2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800edb4:	693b      	ldr	r3, [r7, #16]
 800edb6:	3301      	adds	r3, #1
 800edb8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	0a1b      	lsrs	r3, r3, #8
 800edbe:	b2da      	uxtb	r2, r3
 800edc0:	693b      	ldr	r3, [r7, #16]
 800edc2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800edc4:	693b      	ldr	r3, [r7, #16]
 800edc6:	3301      	adds	r3, #1
 800edc8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	0c1b      	lsrs	r3, r3, #16
 800edce:	b2da      	uxtb	r2, r3
 800edd0:	693b      	ldr	r3, [r7, #16]
 800edd2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800edd4:	693b      	ldr	r3, [r7, #16]
 800edd6:	3301      	adds	r3, #1
 800edd8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	0e1b      	lsrs	r3, r3, #24
 800edde:	b2da      	uxtb	r2, r3
 800ede0:	693b      	ldr	r3, [r7, #16]
 800ede2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ede4:	693b      	ldr	r3, [r7, #16]
 800ede6:	3301      	adds	r3, #1
 800ede8:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800edea:	697b      	ldr	r3, [r7, #20]
 800edec:	3301      	adds	r3, #1
 800edee:	617b      	str	r3, [r7, #20]
 800edf0:	697b      	ldr	r3, [r7, #20]
 800edf2:	2b07      	cmp	r3, #7
 800edf4:	d9d4      	bls.n	800eda0 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	693a      	ldr	r2, [r7, #16]
 800edfa:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee00:	f1a3 0220 	sub.w	r2, r3, #32
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800ee08:	bf00      	nop
 800ee0a:	3718      	adds	r7, #24
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	bd80      	pop	{r7, pc}

0800ee10 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800ee10:	b580      	push	{r7, lr}
 800ee12:	b086      	sub	sp, #24
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	69db      	ldr	r3, [r3, #28]
 800ee1c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	6a1b      	ldr	r3, [r3, #32]
 800ee22:	2b1f      	cmp	r3, #31
 800ee24:	d93a      	bls.n	800ee9c <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800ee26:	2300      	movs	r3, #0
 800ee28:	617b      	str	r3, [r7, #20]
 800ee2a:	e02b      	b.n	800ee84 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800ee2c:	693b      	ldr	r3, [r7, #16]
 800ee2e:	781b      	ldrb	r3, [r3, #0]
 800ee30:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ee32:	693b      	ldr	r3, [r7, #16]
 800ee34:	3301      	adds	r3, #1
 800ee36:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800ee38:	693b      	ldr	r3, [r7, #16]
 800ee3a:	781b      	ldrb	r3, [r3, #0]
 800ee3c:	021a      	lsls	r2, r3, #8
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	4313      	orrs	r3, r2
 800ee42:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ee44:	693b      	ldr	r3, [r7, #16]
 800ee46:	3301      	adds	r3, #1
 800ee48:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800ee4a:	693b      	ldr	r3, [r7, #16]
 800ee4c:	781b      	ldrb	r3, [r3, #0]
 800ee4e:	041a      	lsls	r2, r3, #16
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	4313      	orrs	r3, r2
 800ee54:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ee56:	693b      	ldr	r3, [r7, #16]
 800ee58:	3301      	adds	r3, #1
 800ee5a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800ee5c:	693b      	ldr	r3, [r7, #16]
 800ee5e:	781b      	ldrb	r3, [r3, #0]
 800ee60:	061a      	lsls	r2, r3, #24
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	4313      	orrs	r3, r2
 800ee66:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ee68:	693b      	ldr	r3, [r7, #16]
 800ee6a:	3301      	adds	r3, #1
 800ee6c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	f107 020c 	add.w	r2, r7, #12
 800ee76:	4611      	mov	r1, r2
 800ee78:	4618      	mov	r0, r3
 800ee7a:	f003 fe6c 	bl	8012b56 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800ee7e:	697b      	ldr	r3, [r7, #20]
 800ee80:	3301      	adds	r3, #1
 800ee82:	617b      	str	r3, [r7, #20]
 800ee84:	697b      	ldr	r3, [r7, #20]
 800ee86:	2b07      	cmp	r3, #7
 800ee88:	d9d0      	bls.n	800ee2c <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	693a      	ldr	r2, [r7, #16]
 800ee8e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	6a1b      	ldr	r3, [r3, #32]
 800ee94:	f1a3 0220 	sub.w	r2, r3, #32
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	621a      	str	r2, [r3, #32]
  }
}
 800ee9c:	bf00      	nop
 800ee9e:	3718      	adds	r7, #24
 800eea0:	46bd      	mov	sp, r7
 800eea2:	bd80      	pop	{r7, pc}

0800eea4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800eea4:	b480      	push	{r7}
 800eea6:	b083      	sub	sp, #12
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800eeac:	bf00      	nop
 800eeae:	370c      	adds	r7, #12
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb6:	4770      	bx	lr

0800eeb8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800eeb8:	b480      	push	{r7}
 800eeba:	b083      	sub	sp, #12
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800eec0:	bf00      	nop
 800eec2:	370c      	adds	r7, #12
 800eec4:	46bd      	mov	sp, r7
 800eec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeca:	4770      	bx	lr

0800eecc <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800eecc:	b480      	push	{r7}
 800eece:	b083      	sub	sp, #12
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800eed4:	bf00      	nop
 800eed6:	370c      	adds	r7, #12
 800eed8:	46bd      	mov	sp, r7
 800eeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eede:	4770      	bx	lr

0800eee0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800eee0:	b480      	push	{r7}
 800eee2:	b083      	sub	sp, #12
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800eee8:	bf00      	nop
 800eeea:	370c      	adds	r7, #12
 800eeec:	46bd      	mov	sp, r7
 800eeee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef2:	4770      	bx	lr

0800eef4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b084      	sub	sp, #16
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d101      	bne.n	800ef06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ef02:	2301      	movs	r3, #1
 800ef04:	e10f      	b.n	800f126 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	2200      	movs	r2, #0
 800ef0a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	4a87      	ldr	r2, [pc, #540]	@ (800f130 <HAL_SPI_Init+0x23c>)
 800ef12:	4293      	cmp	r3, r2
 800ef14:	d00f      	beq.n	800ef36 <HAL_SPI_Init+0x42>
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	4a86      	ldr	r2, [pc, #536]	@ (800f134 <HAL_SPI_Init+0x240>)
 800ef1c:	4293      	cmp	r3, r2
 800ef1e:	d00a      	beq.n	800ef36 <HAL_SPI_Init+0x42>
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	4a84      	ldr	r2, [pc, #528]	@ (800f138 <HAL_SPI_Init+0x244>)
 800ef26:	4293      	cmp	r3, r2
 800ef28:	d005      	beq.n	800ef36 <HAL_SPI_Init+0x42>
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	68db      	ldr	r3, [r3, #12]
 800ef2e:	2b0f      	cmp	r3, #15
 800ef30:	d901      	bls.n	800ef36 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ef32:	2301      	movs	r3, #1
 800ef34:	e0f7      	b.n	800f126 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ef36:	6878      	ldr	r0, [r7, #4]
 800ef38:	f001 f968 	bl	801020c <SPI_GetPacketSize>
 800ef3c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	4a7b      	ldr	r2, [pc, #492]	@ (800f130 <HAL_SPI_Init+0x23c>)
 800ef44:	4293      	cmp	r3, r2
 800ef46:	d00c      	beq.n	800ef62 <HAL_SPI_Init+0x6e>
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	4a79      	ldr	r2, [pc, #484]	@ (800f134 <HAL_SPI_Init+0x240>)
 800ef4e:	4293      	cmp	r3, r2
 800ef50:	d007      	beq.n	800ef62 <HAL_SPI_Init+0x6e>
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	4a78      	ldr	r2, [pc, #480]	@ (800f138 <HAL_SPI_Init+0x244>)
 800ef58:	4293      	cmp	r3, r2
 800ef5a:	d002      	beq.n	800ef62 <HAL_SPI_Init+0x6e>
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	2b08      	cmp	r3, #8
 800ef60:	d811      	bhi.n	800ef86 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ef66:	4a72      	ldr	r2, [pc, #456]	@ (800f130 <HAL_SPI_Init+0x23c>)
 800ef68:	4293      	cmp	r3, r2
 800ef6a:	d009      	beq.n	800ef80 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	4a70      	ldr	r2, [pc, #448]	@ (800f134 <HAL_SPI_Init+0x240>)
 800ef72:	4293      	cmp	r3, r2
 800ef74:	d004      	beq.n	800ef80 <HAL_SPI_Init+0x8c>
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	4a6f      	ldr	r2, [pc, #444]	@ (800f138 <HAL_SPI_Init+0x244>)
 800ef7c:	4293      	cmp	r3, r2
 800ef7e:	d104      	bne.n	800ef8a <HAL_SPI_Init+0x96>
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	2b10      	cmp	r3, #16
 800ef84:	d901      	bls.n	800ef8a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800ef86:	2301      	movs	r3, #1
 800ef88:	e0cd      	b.n	800f126 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ef90:	b2db      	uxtb	r3, r3
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d106      	bne.n	800efa4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	2200      	movs	r2, #0
 800ef9a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ef9e:	6878      	ldr	r0, [r7, #4]
 800efa0:	f7f4 fd1c 	bl	80039dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	2202      	movs	r2, #2
 800efa8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	681a      	ldr	r2, [r3, #0]
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	f022 0201 	bic.w	r2, r2, #1
 800efba:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	689b      	ldr	r3, [r3, #8]
 800efc2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800efc6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	699b      	ldr	r3, [r3, #24]
 800efcc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800efd0:	d119      	bne.n	800f006 <HAL_SPI_Init+0x112>
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	685b      	ldr	r3, [r3, #4]
 800efd6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800efda:	d103      	bne.n	800efe4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d008      	beq.n	800eff6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d10c      	bne.n	800f006 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800eff0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800eff4:	d107      	bne.n	800f006 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	681a      	ldr	r2, [r3, #0]
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800f004:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	685b      	ldr	r3, [r3, #4]
 800f00a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d00f      	beq.n	800f032 <HAL_SPI_Init+0x13e>
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	68db      	ldr	r3, [r3, #12]
 800f016:	2b06      	cmp	r3, #6
 800f018:	d90b      	bls.n	800f032 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	430a      	orrs	r2, r1
 800f02e:	601a      	str	r2, [r3, #0]
 800f030:	e007      	b.n	800f042 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	681a      	ldr	r2, [r3, #0]
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800f040:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	69da      	ldr	r2, [r3, #28]
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f04a:	431a      	orrs	r2, r3
 800f04c:	68bb      	ldr	r3, [r7, #8]
 800f04e:	431a      	orrs	r2, r3
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f054:	ea42 0103 	orr.w	r1, r2, r3
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	68da      	ldr	r2, [r3, #12]
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	430a      	orrs	r2, r1
 800f062:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f06c:	431a      	orrs	r2, r3
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f072:	431a      	orrs	r2, r3
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	699b      	ldr	r3, [r3, #24]
 800f078:	431a      	orrs	r2, r3
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	691b      	ldr	r3, [r3, #16]
 800f07e:	431a      	orrs	r2, r3
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	695b      	ldr	r3, [r3, #20]
 800f084:	431a      	orrs	r2, r3
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	6a1b      	ldr	r3, [r3, #32]
 800f08a:	431a      	orrs	r2, r3
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	685b      	ldr	r3, [r3, #4]
 800f090:	431a      	orrs	r2, r3
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f096:	431a      	orrs	r2, r3
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	689b      	ldr	r3, [r3, #8]
 800f09c:	431a      	orrs	r2, r3
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f0a2:	ea42 0103 	orr.w	r1, r2, r3
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	430a      	orrs	r2, r1
 800f0b0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	685b      	ldr	r3, [r3, #4]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d113      	bne.n	800f0e2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	689b      	ldr	r3, [r3, #8]
 800f0c0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f0cc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	689b      	ldr	r3, [r3, #8]
 800f0d4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800f0e0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	f022 0201 	bic.w	r2, r2, #1
 800f0f0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	685b      	ldr	r3, [r3, #4]
 800f0f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d00a      	beq.n	800f114 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	68db      	ldr	r3, [r3, #12]
 800f104:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	430a      	orrs	r2, r1
 800f112:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	2200      	movs	r2, #0
 800f118:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	2201      	movs	r2, #1
 800f120:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800f124:	2300      	movs	r3, #0
}
 800f126:	4618      	mov	r0, r3
 800f128:	3710      	adds	r7, #16
 800f12a:	46bd      	mov	sp, r7
 800f12c:	bd80      	pop	{r7, pc}
 800f12e:	bf00      	nop
 800f130:	40013000 	.word	0x40013000
 800f134:	40003800 	.word	0x40003800
 800f138:	40003c00 	.word	0x40003c00

0800f13c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f13c:	b580      	push	{r7, lr}
 800f13e:	b088      	sub	sp, #32
 800f140:	af02      	add	r7, sp, #8
 800f142:	60f8      	str	r0, [r7, #12]
 800f144:	60b9      	str	r1, [r7, #8]
 800f146:	603b      	str	r3, [r7, #0]
 800f148:	4613      	mov	r3, r2
 800f14a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	3320      	adds	r3, #32
 800f152:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f154:	f7f5 f846 	bl	80041e4 <HAL_GetTick>
 800f158:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800f160:	b2db      	uxtb	r3, r3
 800f162:	2b01      	cmp	r3, #1
 800f164:	d001      	beq.n	800f16a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800f166:	2302      	movs	r3, #2
 800f168:	e1d1      	b.n	800f50e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f16a:	68bb      	ldr	r3, [r7, #8]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d002      	beq.n	800f176 <HAL_SPI_Transmit+0x3a>
 800f170:	88fb      	ldrh	r3, [r7, #6]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d101      	bne.n	800f17a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800f176:	2301      	movs	r3, #1
 800f178:	e1c9      	b.n	800f50e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800f180:	2b01      	cmp	r3, #1
 800f182:	d101      	bne.n	800f188 <HAL_SPI_Transmit+0x4c>
 800f184:	2302      	movs	r3, #2
 800f186:	e1c2      	b.n	800f50e <HAL_SPI_Transmit+0x3d2>
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	2201      	movs	r2, #1
 800f18c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	2203      	movs	r2, #3
 800f194:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	2200      	movs	r2, #0
 800f19c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	68ba      	ldr	r2, [r7, #8]
 800f1a4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	88fa      	ldrh	r2, [r7, #6]
 800f1aa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	88fa      	ldrh	r2, [r7, #6]
 800f1b2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	2200      	movs	r2, #0
 800f1c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	2200      	movs	r2, #0
 800f1c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	689b      	ldr	r3, [r3, #8]
 800f1dc:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800f1e0:	d108      	bne.n	800f1f4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	681a      	ldr	r2, [r3, #0]
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f1f0:	601a      	str	r2, [r3, #0]
 800f1f2:	e009      	b.n	800f208 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	68db      	ldr	r3, [r3, #12]
 800f1fa:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800f206:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	685a      	ldr	r2, [r3, #4]
 800f20e:	4b96      	ldr	r3, [pc, #600]	@ (800f468 <HAL_SPI_Transmit+0x32c>)
 800f210:	4013      	ands	r3, r2
 800f212:	88f9      	ldrh	r1, [r7, #6]
 800f214:	68fa      	ldr	r2, [r7, #12]
 800f216:	6812      	ldr	r2, [r2, #0]
 800f218:	430b      	orrs	r3, r1
 800f21a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	681a      	ldr	r2, [r3, #0]
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	f042 0201 	orr.w	r2, r2, #1
 800f22a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	685b      	ldr	r3, [r3, #4]
 800f230:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f234:	d107      	bne.n	800f246 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	681a      	ldr	r2, [r3, #0]
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f244:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	68db      	ldr	r3, [r3, #12]
 800f24a:	2b0f      	cmp	r3, #15
 800f24c:	d947      	bls.n	800f2de <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f24e:	e03f      	b.n	800f2d0 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	695b      	ldr	r3, [r3, #20]
 800f256:	f003 0302 	and.w	r3, r3, #2
 800f25a:	2b02      	cmp	r3, #2
 800f25c:	d114      	bne.n	800f288 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	6812      	ldr	r2, [r2, #0]
 800f268:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f26e:	1d1a      	adds	r2, r3, #4
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f27a:	b29b      	uxth	r3, r3
 800f27c:	3b01      	subs	r3, #1
 800f27e:	b29a      	uxth	r2, r3
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800f286:	e023      	b.n	800f2d0 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f288:	f7f4 ffac 	bl	80041e4 <HAL_GetTick>
 800f28c:	4602      	mov	r2, r0
 800f28e:	693b      	ldr	r3, [r7, #16]
 800f290:	1ad3      	subs	r3, r2, r3
 800f292:	683a      	ldr	r2, [r7, #0]
 800f294:	429a      	cmp	r2, r3
 800f296:	d803      	bhi.n	800f2a0 <HAL_SPI_Transmit+0x164>
 800f298:	683b      	ldr	r3, [r7, #0]
 800f29a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f29e:	d102      	bne.n	800f2a6 <HAL_SPI_Transmit+0x16a>
 800f2a0:	683b      	ldr	r3, [r7, #0]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d114      	bne.n	800f2d0 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f2a6:	68f8      	ldr	r0, [r7, #12]
 800f2a8:	f000 fee2 	bl	8010070 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f2b2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	2201      	movs	r2, #1
 800f2c0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800f2cc:	2303      	movs	r3, #3
 800f2ce:	e11e      	b.n	800f50e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f2d6:	b29b      	uxth	r3, r3
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d1b9      	bne.n	800f250 <HAL_SPI_Transmit+0x114>
 800f2dc:	e0f1      	b.n	800f4c2 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	68db      	ldr	r3, [r3, #12]
 800f2e2:	2b07      	cmp	r3, #7
 800f2e4:	f240 80e6 	bls.w	800f4b4 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f2e8:	e05d      	b.n	800f3a6 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	695b      	ldr	r3, [r3, #20]
 800f2f0:	f003 0302 	and.w	r3, r3, #2
 800f2f4:	2b02      	cmp	r3, #2
 800f2f6:	d132      	bne.n	800f35e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f2fe:	b29b      	uxth	r3, r3
 800f300:	2b01      	cmp	r3, #1
 800f302:	d918      	bls.n	800f336 <HAL_SPI_Transmit+0x1fa>
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d014      	beq.n	800f336 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	6812      	ldr	r2, [r2, #0]
 800f316:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f31c:	1d1a      	adds	r2, r3, #4
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f328:	b29b      	uxth	r3, r3
 800f32a:	3b02      	subs	r3, #2
 800f32c:	b29a      	uxth	r2, r3
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800f334:	e037      	b.n	800f3a6 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f33a:	881a      	ldrh	r2, [r3, #0]
 800f33c:	697b      	ldr	r3, [r7, #20]
 800f33e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f344:	1c9a      	adds	r2, r3, #2
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f350:	b29b      	uxth	r3, r3
 800f352:	3b01      	subs	r3, #1
 800f354:	b29a      	uxth	r2, r3
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800f35c:	e023      	b.n	800f3a6 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f35e:	f7f4 ff41 	bl	80041e4 <HAL_GetTick>
 800f362:	4602      	mov	r2, r0
 800f364:	693b      	ldr	r3, [r7, #16]
 800f366:	1ad3      	subs	r3, r2, r3
 800f368:	683a      	ldr	r2, [r7, #0]
 800f36a:	429a      	cmp	r2, r3
 800f36c:	d803      	bhi.n	800f376 <HAL_SPI_Transmit+0x23a>
 800f36e:	683b      	ldr	r3, [r7, #0]
 800f370:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f374:	d102      	bne.n	800f37c <HAL_SPI_Transmit+0x240>
 800f376:	683b      	ldr	r3, [r7, #0]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d114      	bne.n	800f3a6 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f37c:	68f8      	ldr	r0, [r7, #12]
 800f37e:	f000 fe77 	bl	8010070 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f388:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	2201      	movs	r2, #1
 800f396:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	2200      	movs	r2, #0
 800f39e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800f3a2:	2303      	movs	r3, #3
 800f3a4:	e0b3      	b.n	800f50e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f3ac:	b29b      	uxth	r3, r3
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d19b      	bne.n	800f2ea <HAL_SPI_Transmit+0x1ae>
 800f3b2:	e086      	b.n	800f4c2 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	695b      	ldr	r3, [r3, #20]
 800f3ba:	f003 0302 	and.w	r3, r3, #2
 800f3be:	2b02      	cmp	r3, #2
 800f3c0:	d154      	bne.n	800f46c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f3c8:	b29b      	uxth	r3, r3
 800f3ca:	2b03      	cmp	r3, #3
 800f3cc:	d918      	bls.n	800f400 <HAL_SPI_Transmit+0x2c4>
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f3d2:	2b40      	cmp	r3, #64	@ 0x40
 800f3d4:	d914      	bls.n	800f400 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	6812      	ldr	r2, [r2, #0]
 800f3e0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f3e6:	1d1a      	adds	r2, r3, #4
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f3f2:	b29b      	uxth	r3, r3
 800f3f4:	3b04      	subs	r3, #4
 800f3f6:	b29a      	uxth	r2, r3
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800f3fe:	e059      	b.n	800f4b4 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f406:	b29b      	uxth	r3, r3
 800f408:	2b01      	cmp	r3, #1
 800f40a:	d917      	bls.n	800f43c <HAL_SPI_Transmit+0x300>
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f410:	2b00      	cmp	r3, #0
 800f412:	d013      	beq.n	800f43c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f418:	881a      	ldrh	r2, [r3, #0]
 800f41a:	697b      	ldr	r3, [r7, #20]
 800f41c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f422:	1c9a      	adds	r2, r3, #2
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f42e:	b29b      	uxth	r3, r3
 800f430:	3b02      	subs	r3, #2
 800f432:	b29a      	uxth	r2, r3
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800f43a:	e03b      	b.n	800f4b4 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	3320      	adds	r3, #32
 800f446:	7812      	ldrb	r2, [r2, #0]
 800f448:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f44e:	1c5a      	adds	r2, r3, #1
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f45a:	b29b      	uxth	r3, r3
 800f45c:	3b01      	subs	r3, #1
 800f45e:	b29a      	uxth	r2, r3
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800f466:	e025      	b.n	800f4b4 <HAL_SPI_Transmit+0x378>
 800f468:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f46c:	f7f4 feba 	bl	80041e4 <HAL_GetTick>
 800f470:	4602      	mov	r2, r0
 800f472:	693b      	ldr	r3, [r7, #16]
 800f474:	1ad3      	subs	r3, r2, r3
 800f476:	683a      	ldr	r2, [r7, #0]
 800f478:	429a      	cmp	r2, r3
 800f47a:	d803      	bhi.n	800f484 <HAL_SPI_Transmit+0x348>
 800f47c:	683b      	ldr	r3, [r7, #0]
 800f47e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f482:	d102      	bne.n	800f48a <HAL_SPI_Transmit+0x34e>
 800f484:	683b      	ldr	r3, [r7, #0]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d114      	bne.n	800f4b4 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f48a:	68f8      	ldr	r0, [r7, #12]
 800f48c:	f000 fdf0 	bl	8010070 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f496:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	2201      	movs	r2, #1
 800f4a4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800f4b0:	2303      	movs	r3, #3
 800f4b2:	e02c      	b.n	800f50e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f4ba:	b29b      	uxth	r3, r3
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	f47f af79 	bne.w	800f3b4 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800f4c2:	693b      	ldr	r3, [r7, #16]
 800f4c4:	9300      	str	r3, [sp, #0]
 800f4c6:	683b      	ldr	r3, [r7, #0]
 800f4c8:	2200      	movs	r2, #0
 800f4ca:	2108      	movs	r1, #8
 800f4cc:	68f8      	ldr	r0, [r7, #12]
 800f4ce:	f000 fe6f 	bl	80101b0 <SPI_WaitOnFlagUntilTimeout>
 800f4d2:	4603      	mov	r3, r0
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d007      	beq.n	800f4e8 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f4de:	f043 0220 	orr.w	r2, r3, #32
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f4e8:	68f8      	ldr	r0, [r7, #12]
 800f4ea:	f000 fdc1 	bl	8010070 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	2201      	movs	r2, #1
 800f4f2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	2200      	movs	r2, #0
 800f4fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f504:	2b00      	cmp	r3, #0
 800f506:	d001      	beq.n	800f50c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800f508:	2301      	movs	r3, #1
 800f50a:	e000      	b.n	800f50e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800f50c:	2300      	movs	r3, #0
  }
}
 800f50e:	4618      	mov	r0, r3
 800f510:	3718      	adds	r7, #24
 800f512:	46bd      	mov	sp, r7
 800f514:	bd80      	pop	{r7, pc}
 800f516:	bf00      	nop

0800f518 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	b088      	sub	sp, #32
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	60f8      	str	r0, [r7, #12]
 800f520:	60b9      	str	r1, [r7, #8]
 800f522:	603b      	str	r3, [r7, #0]
 800f524:	4613      	mov	r3, r2
 800f526:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f52c:	095b      	lsrs	r3, r3, #5
 800f52e:	b29b      	uxth	r3, r3
 800f530:	3301      	adds	r3, #1
 800f532:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	3330      	adds	r3, #48	@ 0x30
 800f53a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f53c:	f7f4 fe52 	bl	80041e4 <HAL_GetTick>
 800f540:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800f548:	b2db      	uxtb	r3, r3
 800f54a:	2b01      	cmp	r3, #1
 800f54c:	d001      	beq.n	800f552 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800f54e:	2302      	movs	r3, #2
 800f550:	e250      	b.n	800f9f4 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f552:	68bb      	ldr	r3, [r7, #8]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d002      	beq.n	800f55e <HAL_SPI_Receive+0x46>
 800f558:	88fb      	ldrh	r3, [r7, #6]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d101      	bne.n	800f562 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800f55e:	2301      	movs	r3, #1
 800f560:	e248      	b.n	800f9f4 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800f568:	2b01      	cmp	r3, #1
 800f56a:	d101      	bne.n	800f570 <HAL_SPI_Receive+0x58>
 800f56c:	2302      	movs	r3, #2
 800f56e:	e241      	b.n	800f9f4 <HAL_SPI_Receive+0x4dc>
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	2201      	movs	r2, #1
 800f574:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	2204      	movs	r2, #4
 800f57c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	2200      	movs	r2, #0
 800f584:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	68ba      	ldr	r2, [r7, #8]
 800f58c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	88fa      	ldrh	r2, [r7, #6]
 800f592:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	88fa      	ldrh	r2, [r7, #6]
 800f59a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	2200      	movs	r2, #0
 800f5a2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	2200      	movs	r2, #0
 800f5a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	2200      	movs	r2, #0
 800f5b0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	2200      	movs	r2, #0
 800f5be:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	689b      	ldr	r3, [r3, #8]
 800f5c4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800f5c8:	d108      	bne.n	800f5dc <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	681a      	ldr	r2, [r3, #0]
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800f5d8:	601a      	str	r2, [r3, #0]
 800f5da:	e009      	b.n	800f5f0 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	68db      	ldr	r3, [r3, #12]
 800f5e2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800f5ee:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	685a      	ldr	r2, [r3, #4]
 800f5f6:	4b95      	ldr	r3, [pc, #596]	@ (800f84c <HAL_SPI_Receive+0x334>)
 800f5f8:	4013      	ands	r3, r2
 800f5fa:	88f9      	ldrh	r1, [r7, #6]
 800f5fc:	68fa      	ldr	r2, [r7, #12]
 800f5fe:	6812      	ldr	r2, [r2, #0]
 800f600:	430b      	orrs	r3, r1
 800f602:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	681a      	ldr	r2, [r3, #0]
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	f042 0201 	orr.w	r2, r2, #1
 800f612:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	685b      	ldr	r3, [r3, #4]
 800f618:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f61c:	d107      	bne.n	800f62e <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	681a      	ldr	r2, [r3, #0]
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f62c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	68db      	ldr	r3, [r3, #12]
 800f632:	2b0f      	cmp	r3, #15
 800f634:	d96c      	bls.n	800f710 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f636:	e064      	b.n	800f702 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	695b      	ldr	r3, [r3, #20]
 800f63e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	695b      	ldr	r3, [r3, #20]
 800f646:	f003 0301 	and.w	r3, r3, #1
 800f64a:	2b01      	cmp	r3, #1
 800f64c:	d114      	bne.n	800f678 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	681a      	ldr	r2, [r3, #0]
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f656:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800f658:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f65e:	1d1a      	adds	r2, r3, #4
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f66a:	b29b      	uxth	r3, r3
 800f66c:	3b01      	subs	r3, #1
 800f66e:	b29a      	uxth	r2, r3
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f676:	e044      	b.n	800f702 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f67e:	b29b      	uxth	r3, r3
 800f680:	8bfa      	ldrh	r2, [r7, #30]
 800f682:	429a      	cmp	r2, r3
 800f684:	d919      	bls.n	800f6ba <HAL_SPI_Receive+0x1a2>
 800f686:	693b      	ldr	r3, [r7, #16]
 800f688:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d014      	beq.n	800f6ba <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	681a      	ldr	r2, [r3, #0]
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f698:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800f69a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f6a0:	1d1a      	adds	r2, r3, #4
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f6ac:	b29b      	uxth	r3, r3
 800f6ae:	3b01      	subs	r3, #1
 800f6b0:	b29a      	uxth	r2, r3
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f6b8:	e023      	b.n	800f702 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f6ba:	f7f4 fd93 	bl	80041e4 <HAL_GetTick>
 800f6be:	4602      	mov	r2, r0
 800f6c0:	697b      	ldr	r3, [r7, #20]
 800f6c2:	1ad3      	subs	r3, r2, r3
 800f6c4:	683a      	ldr	r2, [r7, #0]
 800f6c6:	429a      	cmp	r2, r3
 800f6c8:	d803      	bhi.n	800f6d2 <HAL_SPI_Receive+0x1ba>
 800f6ca:	683b      	ldr	r3, [r7, #0]
 800f6cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6d0:	d102      	bne.n	800f6d8 <HAL_SPI_Receive+0x1c0>
 800f6d2:	683b      	ldr	r3, [r7, #0]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d114      	bne.n	800f702 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f6d8:	68f8      	ldr	r0, [r7, #12]
 800f6da:	f000 fcc9 	bl	8010070 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f6e4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	2201      	movs	r2, #1
 800f6f2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	2200      	movs	r2, #0
 800f6fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800f6fe:	2303      	movs	r3, #3
 800f700:	e178      	b.n	800f9f4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f708:	b29b      	uxth	r3, r3
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d194      	bne.n	800f638 <HAL_SPI_Receive+0x120>
 800f70e:	e15e      	b.n	800f9ce <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	68db      	ldr	r3, [r3, #12]
 800f714:	2b07      	cmp	r3, #7
 800f716:	f240 8153 	bls.w	800f9c0 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f71a:	e08f      	b.n	800f83c <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	695b      	ldr	r3, [r3, #20]
 800f722:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	695b      	ldr	r3, [r3, #20]
 800f72a:	f003 0301 	and.w	r3, r3, #1
 800f72e:	2b01      	cmp	r3, #1
 800f730:	d114      	bne.n	800f75c <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f736:	69ba      	ldr	r2, [r7, #24]
 800f738:	8812      	ldrh	r2, [r2, #0]
 800f73a:	b292      	uxth	r2, r2
 800f73c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f742:	1c9a      	adds	r2, r3, #2
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f74e:	b29b      	uxth	r3, r3
 800f750:	3b01      	subs	r3, #1
 800f752:	b29a      	uxth	r2, r3
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f75a:	e06f      	b.n	800f83c <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f762:	b29b      	uxth	r3, r3
 800f764:	8bfa      	ldrh	r2, [r7, #30]
 800f766:	429a      	cmp	r2, r3
 800f768:	d924      	bls.n	800f7b4 <HAL_SPI_Receive+0x29c>
 800f76a:	693b      	ldr	r3, [r7, #16]
 800f76c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f770:	2b00      	cmp	r3, #0
 800f772:	d01f      	beq.n	800f7b4 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f778:	69ba      	ldr	r2, [r7, #24]
 800f77a:	8812      	ldrh	r2, [r2, #0]
 800f77c:	b292      	uxth	r2, r2
 800f77e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f784:	1c9a      	adds	r2, r3, #2
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f78e:	69ba      	ldr	r2, [r7, #24]
 800f790:	8812      	ldrh	r2, [r2, #0]
 800f792:	b292      	uxth	r2, r2
 800f794:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f79a:	1c9a      	adds	r2, r3, #2
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f7a6:	b29b      	uxth	r3, r3
 800f7a8:	3b02      	subs	r3, #2
 800f7aa:	b29a      	uxth	r2, r3
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f7b2:	e043      	b.n	800f83c <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f7ba:	b29b      	uxth	r3, r3
 800f7bc:	2b01      	cmp	r3, #1
 800f7be:	d119      	bne.n	800f7f4 <HAL_SPI_Receive+0x2dc>
 800f7c0:	693b      	ldr	r3, [r7, #16]
 800f7c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d014      	beq.n	800f7f4 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f7ce:	69ba      	ldr	r2, [r7, #24]
 800f7d0:	8812      	ldrh	r2, [r2, #0]
 800f7d2:	b292      	uxth	r2, r2
 800f7d4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f7da:	1c9a      	adds	r2, r3, #2
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f7e6:	b29b      	uxth	r3, r3
 800f7e8:	3b01      	subs	r3, #1
 800f7ea:	b29a      	uxth	r2, r3
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f7f2:	e023      	b.n	800f83c <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f7f4:	f7f4 fcf6 	bl	80041e4 <HAL_GetTick>
 800f7f8:	4602      	mov	r2, r0
 800f7fa:	697b      	ldr	r3, [r7, #20]
 800f7fc:	1ad3      	subs	r3, r2, r3
 800f7fe:	683a      	ldr	r2, [r7, #0]
 800f800:	429a      	cmp	r2, r3
 800f802:	d803      	bhi.n	800f80c <HAL_SPI_Receive+0x2f4>
 800f804:	683b      	ldr	r3, [r7, #0]
 800f806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f80a:	d102      	bne.n	800f812 <HAL_SPI_Receive+0x2fa>
 800f80c:	683b      	ldr	r3, [r7, #0]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d114      	bne.n	800f83c <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f812:	68f8      	ldr	r0, [r7, #12]
 800f814:	f000 fc2c 	bl	8010070 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f81e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	2201      	movs	r2, #1
 800f82c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	2200      	movs	r2, #0
 800f834:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800f838:	2303      	movs	r3, #3
 800f83a:	e0db      	b.n	800f9f4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f842:	b29b      	uxth	r3, r3
 800f844:	2b00      	cmp	r3, #0
 800f846:	f47f af69 	bne.w	800f71c <HAL_SPI_Receive+0x204>
 800f84a:	e0c0      	b.n	800f9ce <HAL_SPI_Receive+0x4b6>
 800f84c:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	695b      	ldr	r3, [r3, #20]
 800f856:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	695b      	ldr	r3, [r3, #20]
 800f85e:	f003 0301 	and.w	r3, r3, #1
 800f862:	2b01      	cmp	r3, #1
 800f864:	d117      	bne.n	800f896 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f872:	7812      	ldrb	r2, [r2, #0]
 800f874:	b2d2      	uxtb	r2, r2
 800f876:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f87c:	1c5a      	adds	r2, r3, #1
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f888:	b29b      	uxth	r3, r3
 800f88a:	3b01      	subs	r3, #1
 800f88c:	b29a      	uxth	r2, r3
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f894:	e094      	b.n	800f9c0 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f89c:	b29b      	uxth	r3, r3
 800f89e:	8bfa      	ldrh	r2, [r7, #30]
 800f8a0:	429a      	cmp	r2, r3
 800f8a2:	d946      	bls.n	800f932 <HAL_SPI_Receive+0x41a>
 800f8a4:	693b      	ldr	r3, [r7, #16]
 800f8a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d041      	beq.n	800f932 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f8ba:	7812      	ldrb	r2, [r2, #0]
 800f8bc:	b2d2      	uxtb	r2, r2
 800f8be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f8c4:	1c5a      	adds	r2, r3, #1
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f8d6:	7812      	ldrb	r2, [r2, #0]
 800f8d8:	b2d2      	uxtb	r2, r2
 800f8da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f8e0:	1c5a      	adds	r2, r3, #1
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f8f2:	7812      	ldrb	r2, [r2, #0]
 800f8f4:	b2d2      	uxtb	r2, r2
 800f8f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f8fc:	1c5a      	adds	r2, r3, #1
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f90e:	7812      	ldrb	r2, [r2, #0]
 800f910:	b2d2      	uxtb	r2, r2
 800f912:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f918:	1c5a      	adds	r2, r3, #1
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f924:	b29b      	uxth	r3, r3
 800f926:	3b04      	subs	r3, #4
 800f928:	b29a      	uxth	r2, r3
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f930:	e046      	b.n	800f9c0 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f938:	b29b      	uxth	r3, r3
 800f93a:	2b03      	cmp	r3, #3
 800f93c:	d81c      	bhi.n	800f978 <HAL_SPI_Receive+0x460>
 800f93e:	693b      	ldr	r3, [r7, #16]
 800f940:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800f944:	2b00      	cmp	r3, #0
 800f946:	d017      	beq.n	800f978 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f954:	7812      	ldrb	r2, [r2, #0]
 800f956:	b2d2      	uxtb	r2, r2
 800f958:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f95e:	1c5a      	adds	r2, r3, #1
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f96a:	b29b      	uxth	r3, r3
 800f96c:	3b01      	subs	r3, #1
 800f96e:	b29a      	uxth	r2, r3
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f976:	e023      	b.n	800f9c0 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f978:	f7f4 fc34 	bl	80041e4 <HAL_GetTick>
 800f97c:	4602      	mov	r2, r0
 800f97e:	697b      	ldr	r3, [r7, #20]
 800f980:	1ad3      	subs	r3, r2, r3
 800f982:	683a      	ldr	r2, [r7, #0]
 800f984:	429a      	cmp	r2, r3
 800f986:	d803      	bhi.n	800f990 <HAL_SPI_Receive+0x478>
 800f988:	683b      	ldr	r3, [r7, #0]
 800f98a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f98e:	d102      	bne.n	800f996 <HAL_SPI_Receive+0x47e>
 800f990:	683b      	ldr	r3, [r7, #0]
 800f992:	2b00      	cmp	r3, #0
 800f994:	d114      	bne.n	800f9c0 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f996:	68f8      	ldr	r0, [r7, #12]
 800f998:	f000 fb6a 	bl	8010070 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f9a2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	2201      	movs	r2, #1
 800f9b0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	2200      	movs	r2, #0
 800f9b8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800f9bc:	2303      	movs	r3, #3
 800f9be:	e019      	b.n	800f9f4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f9c6:	b29b      	uxth	r3, r3
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	f47f af41 	bne.w	800f850 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f9ce:	68f8      	ldr	r0, [r7, #12]
 800f9d0:	f000 fb4e 	bl	8010070 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	2201      	movs	r2, #1
 800f9d8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	2200      	movs	r2, #0
 800f9e0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d001      	beq.n	800f9f2 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800f9ee:	2301      	movs	r3, #1
 800f9f0:	e000      	b.n	800f9f4 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800f9f2:	2300      	movs	r3, #0
  }
}
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	3720      	adds	r7, #32
 800f9f8:	46bd      	mov	sp, r7
 800f9fa:	bd80      	pop	{r7, pc}

0800f9fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800f9fc:	b580      	push	{r7, lr}
 800f9fe:	b08e      	sub	sp, #56	@ 0x38
 800fa00:	af02      	add	r7, sp, #8
 800fa02:	60f8      	str	r0, [r7, #12]
 800fa04:	60b9      	str	r1, [r7, #8]
 800fa06:	607a      	str	r2, [r7, #4]
 800fa08:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	3320      	adds	r3, #32
 800fa10:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	3330      	adds	r3, #48	@ 0x30
 800fa18:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa1e:	095b      	lsrs	r3, r3, #5
 800fa20:	b29b      	uxth	r3, r3
 800fa22:	3301      	adds	r3, #1
 800fa24:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fa26:	f7f4 fbdd 	bl	80041e4 <HAL_GetTick>
 800fa2a:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800fa2c:	887b      	ldrh	r3, [r7, #2]
 800fa2e:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800fa30:	887b      	ldrh	r3, [r7, #2]
 800fa32:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800fa3a:	b2db      	uxtb	r3, r3
 800fa3c:	2b01      	cmp	r3, #1
 800fa3e:	d001      	beq.n	800fa44 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800fa40:	2302      	movs	r3, #2
 800fa42:	e310      	b.n	8010066 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800fa44:	68bb      	ldr	r3, [r7, #8]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d005      	beq.n	800fa56 <HAL_SPI_TransmitReceive+0x5a>
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d002      	beq.n	800fa56 <HAL_SPI_TransmitReceive+0x5a>
 800fa50:	887b      	ldrh	r3, [r7, #2]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d101      	bne.n	800fa5a <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800fa56:	2301      	movs	r3, #1
 800fa58:	e305      	b.n	8010066 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800fa60:	2b01      	cmp	r3, #1
 800fa62:	d101      	bne.n	800fa68 <HAL_SPI_TransmitReceive+0x6c>
 800fa64:	2302      	movs	r3, #2
 800fa66:	e2fe      	b.n	8010066 <HAL_SPI_TransmitReceive+0x66a>
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	2201      	movs	r2, #1
 800fa6c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	2205      	movs	r2, #5
 800fa74:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	687a      	ldr	r2, [r7, #4]
 800fa84:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	887a      	ldrh	r2, [r7, #2]
 800fa8a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	887a      	ldrh	r2, [r7, #2]
 800fa92:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	68ba      	ldr	r2, [r7, #8]
 800fa9a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	887a      	ldrh	r2, [r7, #2]
 800faa0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	887a      	ldrh	r2, [r7, #2]
 800faa8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	2200      	movs	r2, #0
 800fab0:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	2200      	movs	r2, #0
 800fab6:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	68da      	ldr	r2, [r3, #12]
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800fac6:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	4a70      	ldr	r2, [pc, #448]	@ (800fc90 <HAL_SPI_TransmitReceive+0x294>)
 800face:	4293      	cmp	r3, r2
 800fad0:	d009      	beq.n	800fae6 <HAL_SPI_TransmitReceive+0xea>
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	4a6f      	ldr	r2, [pc, #444]	@ (800fc94 <HAL_SPI_TransmitReceive+0x298>)
 800fad8:	4293      	cmp	r3, r2
 800fada:	d004      	beq.n	800fae6 <HAL_SPI_TransmitReceive+0xea>
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	4a6d      	ldr	r2, [pc, #436]	@ (800fc98 <HAL_SPI_TransmitReceive+0x29c>)
 800fae2:	4293      	cmp	r3, r2
 800fae4:	d102      	bne.n	800faec <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800fae6:	2310      	movs	r3, #16
 800fae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800faea:	e001      	b.n	800faf0 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800faec:	2308      	movs	r3, #8
 800faee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	685a      	ldr	r2, [r3, #4]
 800faf6:	4b69      	ldr	r3, [pc, #420]	@ (800fc9c <HAL_SPI_TransmitReceive+0x2a0>)
 800faf8:	4013      	ands	r3, r2
 800fafa:	8879      	ldrh	r1, [r7, #2]
 800fafc:	68fa      	ldr	r2, [r7, #12]
 800fafe:	6812      	ldr	r2, [r2, #0]
 800fb00:	430b      	orrs	r3, r1
 800fb02:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	681a      	ldr	r2, [r3, #0]
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	f042 0201 	orr.w	r2, r2, #1
 800fb12:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	685b      	ldr	r3, [r3, #4]
 800fb18:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800fb1c:	d107      	bne.n	800fb2e <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	681a      	ldr	r2, [r3, #0]
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800fb2c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	68db      	ldr	r3, [r3, #12]
 800fb32:	2b0f      	cmp	r3, #15
 800fb34:	f240 80a2 	bls.w	800fc7c <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800fb38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb3a:	089b      	lsrs	r3, r3, #2
 800fb3c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800fb3e:	e094      	b.n	800fc6a <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	695b      	ldr	r3, [r3, #20]
 800fb46:	f003 0302 	and.w	r3, r3, #2
 800fb4a:	2b02      	cmp	r3, #2
 800fb4c:	d120      	bne.n	800fb90 <HAL_SPI_TransmitReceive+0x194>
 800fb4e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d01d      	beq.n	800fb90 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800fb54:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800fb56:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800fb58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb5a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800fb5c:	429a      	cmp	r2, r3
 800fb5e:	d217      	bcs.n	800fb90 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	6812      	ldr	r2, [r2, #0]
 800fb6a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fb70:	1d1a      	adds	r2, r3, #4
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800fb7c:	b29b      	uxth	r3, r3
 800fb7e:	3b01      	subs	r3, #1
 800fb80:	b29a      	uxth	r2, r3
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800fb8e:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	695b      	ldr	r3, [r3, #20]
 800fb96:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800fb98:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d065      	beq.n	800fc6a <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	695b      	ldr	r3, [r3, #20]
 800fba4:	f003 0301 	and.w	r3, r3, #1
 800fba8:	2b01      	cmp	r3, #1
 800fbaa:	d118      	bne.n	800fbde <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	681a      	ldr	r2, [r3, #0]
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fbb4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800fbb6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fbbc:	1d1a      	adds	r2, r3, #4
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fbc8:	b29b      	uxth	r3, r3
 800fbca:	3b01      	subs	r3, #1
 800fbcc:	b29a      	uxth	r2, r3
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fbda:	853b      	strh	r3, [r7, #40]	@ 0x28
 800fbdc:	e045      	b.n	800fc6a <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800fbde:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800fbe0:	8bfb      	ldrh	r3, [r7, #30]
 800fbe2:	429a      	cmp	r2, r3
 800fbe4:	d21d      	bcs.n	800fc22 <HAL_SPI_TransmitReceive+0x226>
 800fbe6:	697b      	ldr	r3, [r7, #20]
 800fbe8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d018      	beq.n	800fc22 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	681a      	ldr	r2, [r3, #0]
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fbf8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800fbfa:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fc00:	1d1a      	adds	r2, r3, #4
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fc0c:	b29b      	uxth	r3, r3
 800fc0e:	3b01      	subs	r3, #1
 800fc10:	b29a      	uxth	r2, r3
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fc1e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800fc20:	e023      	b.n	800fc6a <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fc22:	f7f4 fadf 	bl	80041e4 <HAL_GetTick>
 800fc26:	4602      	mov	r2, r0
 800fc28:	69bb      	ldr	r3, [r7, #24]
 800fc2a:	1ad3      	subs	r3, r2, r3
 800fc2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fc2e:	429a      	cmp	r2, r3
 800fc30:	d803      	bhi.n	800fc3a <HAL_SPI_TransmitReceive+0x23e>
 800fc32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc38:	d102      	bne.n	800fc40 <HAL_SPI_TransmitReceive+0x244>
 800fc3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d114      	bne.n	800fc6a <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800fc40:	68f8      	ldr	r0, [r7, #12]
 800fc42:	f000 fa15 	bl	8010070 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fc4c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	2201      	movs	r2, #1
 800fc5a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	2200      	movs	r2, #0
 800fc62:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800fc66:	2303      	movs	r3, #3
 800fc68:	e1fd      	b.n	8010066 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800fc6a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	f47f af67 	bne.w	800fb40 <HAL_SPI_TransmitReceive+0x144>
 800fc72:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	f47f af63 	bne.w	800fb40 <HAL_SPI_TransmitReceive+0x144>
 800fc7a:	e1ce      	b.n	801001a <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	68db      	ldr	r3, [r3, #12]
 800fc80:	2b07      	cmp	r3, #7
 800fc82:	f240 81c2 	bls.w	801000a <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800fc86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc88:	085b      	lsrs	r3, r3, #1
 800fc8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800fc8c:	e0c9      	b.n	800fe22 <HAL_SPI_TransmitReceive+0x426>
 800fc8e:	bf00      	nop
 800fc90:	40013000 	.word	0x40013000
 800fc94:	40003800 	.word	0x40003800
 800fc98:	40003c00 	.word	0x40003c00
 800fc9c:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	695b      	ldr	r3, [r3, #20]
 800fca6:	f003 0302 	and.w	r3, r3, #2
 800fcaa:	2b02      	cmp	r3, #2
 800fcac:	d11f      	bne.n	800fcee <HAL_SPI_TransmitReceive+0x2f2>
 800fcae:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d01c      	beq.n	800fcee <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800fcb4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800fcb6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800fcb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcba:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800fcbc:	429a      	cmp	r2, r3
 800fcbe:	d216      	bcs.n	800fcee <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fcc4:	881a      	ldrh	r2, [r3, #0]
 800fcc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcc8:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fcce:	1c9a      	adds	r2, r3, #2
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800fcda:	b29b      	uxth	r3, r3
 800fcdc:	3b01      	subs	r3, #1
 800fcde:	b29a      	uxth	r2, r3
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800fcec:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	695b      	ldr	r3, [r3, #20]
 800fcf4:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800fcf6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	f000 8092 	beq.w	800fe22 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	695b      	ldr	r3, [r3, #20]
 800fd04:	f003 0301 	and.w	r3, r3, #1
 800fd08:	2b01      	cmp	r3, #1
 800fd0a:	d118      	bne.n	800fd3e <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fd10:	6a3a      	ldr	r2, [r7, #32]
 800fd12:	8812      	ldrh	r2, [r2, #0]
 800fd14:	b292      	uxth	r2, r2
 800fd16:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fd1c:	1c9a      	adds	r2, r3, #2
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fd28:	b29b      	uxth	r3, r3
 800fd2a:	3b01      	subs	r3, #1
 800fd2c:	b29a      	uxth	r2, r3
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fd3a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800fd3c:	e071      	b.n	800fe22 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800fd3e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800fd40:	8bfb      	ldrh	r3, [r7, #30]
 800fd42:	429a      	cmp	r2, r3
 800fd44:	d228      	bcs.n	800fd98 <HAL_SPI_TransmitReceive+0x39c>
 800fd46:	697b      	ldr	r3, [r7, #20]
 800fd48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d023      	beq.n	800fd98 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fd54:	6a3a      	ldr	r2, [r7, #32]
 800fd56:	8812      	ldrh	r2, [r2, #0]
 800fd58:	b292      	uxth	r2, r2
 800fd5a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fd60:	1c9a      	adds	r2, r3, #2
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fd6a:	6a3a      	ldr	r2, [r7, #32]
 800fd6c:	8812      	ldrh	r2, [r2, #0]
 800fd6e:	b292      	uxth	r2, r2
 800fd70:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fd76:	1c9a      	adds	r2, r3, #2
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fd82:	b29b      	uxth	r3, r3
 800fd84:	3b02      	subs	r3, #2
 800fd86:	b29a      	uxth	r2, r3
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fd94:	853b      	strh	r3, [r7, #40]	@ 0x28
 800fd96:	e044      	b.n	800fe22 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800fd98:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fd9a:	2b01      	cmp	r3, #1
 800fd9c:	d11d      	bne.n	800fdda <HAL_SPI_TransmitReceive+0x3de>
 800fd9e:	697b      	ldr	r3, [r7, #20]
 800fda0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d018      	beq.n	800fdda <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fdac:	6a3a      	ldr	r2, [r7, #32]
 800fdae:	8812      	ldrh	r2, [r2, #0]
 800fdb0:	b292      	uxth	r2, r2
 800fdb2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fdb8:	1c9a      	adds	r2, r3, #2
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fdc4:	b29b      	uxth	r3, r3
 800fdc6:	3b01      	subs	r3, #1
 800fdc8:	b29a      	uxth	r2, r3
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fdd6:	853b      	strh	r3, [r7, #40]	@ 0x28
 800fdd8:	e023      	b.n	800fe22 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fdda:	f7f4 fa03 	bl	80041e4 <HAL_GetTick>
 800fdde:	4602      	mov	r2, r0
 800fde0:	69bb      	ldr	r3, [r7, #24]
 800fde2:	1ad3      	subs	r3, r2, r3
 800fde4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fde6:	429a      	cmp	r2, r3
 800fde8:	d803      	bhi.n	800fdf2 <HAL_SPI_TransmitReceive+0x3f6>
 800fdea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdf0:	d102      	bne.n	800fdf8 <HAL_SPI_TransmitReceive+0x3fc>
 800fdf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d114      	bne.n	800fe22 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800fdf8:	68f8      	ldr	r0, [r7, #12]
 800fdfa:	f000 f939 	bl	8010070 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fe04:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	2201      	movs	r2, #1
 800fe12:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	2200      	movs	r2, #0
 800fe1a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800fe1e:	2303      	movs	r3, #3
 800fe20:	e121      	b.n	8010066 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800fe22:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	f47f af3b 	bne.w	800fca0 <HAL_SPI_TransmitReceive+0x2a4>
 800fe2a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	f47f af37 	bne.w	800fca0 <HAL_SPI_TransmitReceive+0x2a4>
 800fe32:	e0f2      	b.n	801001a <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	695b      	ldr	r3, [r3, #20]
 800fe3a:	f003 0302 	and.w	r3, r3, #2
 800fe3e:	2b02      	cmp	r3, #2
 800fe40:	d121      	bne.n	800fe86 <HAL_SPI_TransmitReceive+0x48a>
 800fe42:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d01e      	beq.n	800fe86 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800fe48:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800fe4a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800fe4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe4e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800fe50:	429a      	cmp	r2, r3
 800fe52:	d218      	bcs.n	800fe86 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	3320      	adds	r3, #32
 800fe5e:	7812      	ldrb	r2, [r2, #0]
 800fe60:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fe66:	1c5a      	adds	r2, r3, #1
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800fe72:	b29b      	uxth	r3, r3
 800fe74:	3b01      	subs	r3, #1
 800fe76:	b29a      	uxth	r2, r3
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800fe84:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	695b      	ldr	r3, [r3, #20]
 800fe8c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800fe8e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	f000 80ba 	beq.w	801000a <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	695b      	ldr	r3, [r3, #20]
 800fe9c:	f003 0301 	and.w	r3, r3, #1
 800fea0:	2b01      	cmp	r3, #1
 800fea2:	d11b      	bne.n	800fedc <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800feb0:	7812      	ldrb	r2, [r2, #0]
 800feb2:	b2d2      	uxtb	r2, r2
 800feb4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800feba:	1c5a      	adds	r2, r3, #1
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fec6:	b29b      	uxth	r3, r3
 800fec8:	3b01      	subs	r3, #1
 800feca:	b29a      	uxth	r2, r3
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fed8:	853b      	strh	r3, [r7, #40]	@ 0x28
 800feda:	e096      	b.n	801000a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800fedc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800fede:	8bfb      	ldrh	r3, [r7, #30]
 800fee0:	429a      	cmp	r2, r3
 800fee2:	d24a      	bcs.n	800ff7a <HAL_SPI_TransmitReceive+0x57e>
 800fee4:	697b      	ldr	r3, [r7, #20]
 800fee6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800feea:	2b00      	cmp	r3, #0
 800feec:	d045      	beq.n	800ff7a <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fefa:	7812      	ldrb	r2, [r2, #0]
 800fefc:	b2d2      	uxtb	r2, r2
 800fefe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ff04:	1c5a      	adds	r2, r3, #1
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ff16:	7812      	ldrb	r2, [r2, #0]
 800ff18:	b2d2      	uxtb	r2, r2
 800ff1a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ff20:	1c5a      	adds	r2, r3, #1
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ff32:	7812      	ldrb	r2, [r2, #0]
 800ff34:	b2d2      	uxtb	r2, r2
 800ff36:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ff3c:	1c5a      	adds	r2, r3, #1
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ff4e:	7812      	ldrb	r2, [r2, #0]
 800ff50:	b2d2      	uxtb	r2, r2
 800ff52:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ff58:	1c5a      	adds	r2, r3, #1
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ff64:	b29b      	uxth	r3, r3
 800ff66:	3b04      	subs	r3, #4
 800ff68:	b29a      	uxth	r2, r3
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ff76:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ff78:	e047      	b.n	801000a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800ff7a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ff7c:	2b03      	cmp	r3, #3
 800ff7e:	d820      	bhi.n	800ffc2 <HAL_SPI_TransmitReceive+0x5c6>
 800ff80:	697b      	ldr	r3, [r7, #20]
 800ff82:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d01b      	beq.n	800ffc2 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ff96:	7812      	ldrb	r2, [r2, #0]
 800ff98:	b2d2      	uxtb	r2, r2
 800ff9a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ffa0:	1c5a      	adds	r2, r3, #1
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ffac:	b29b      	uxth	r3, r3
 800ffae:	3b01      	subs	r3, #1
 800ffb0:	b29a      	uxth	r2, r3
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ffbe:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ffc0:	e023      	b.n	801000a <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ffc2:	f7f4 f90f 	bl	80041e4 <HAL_GetTick>
 800ffc6:	4602      	mov	r2, r0
 800ffc8:	69bb      	ldr	r3, [r7, #24]
 800ffca:	1ad3      	subs	r3, r2, r3
 800ffcc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ffce:	429a      	cmp	r2, r3
 800ffd0:	d803      	bhi.n	800ffda <HAL_SPI_TransmitReceive+0x5de>
 800ffd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffd8:	d102      	bne.n	800ffe0 <HAL_SPI_TransmitReceive+0x5e4>
 800ffda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d114      	bne.n	801000a <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800ffe0:	68f8      	ldr	r0, [r7, #12]
 800ffe2:	f000 f845 	bl	8010070 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ffec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	2201      	movs	r2, #1
 800fffa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	2200      	movs	r2, #0
 8010002:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8010006:	2303      	movs	r3, #3
 8010008:	e02d      	b.n	8010066 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801000a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801000c:	2b00      	cmp	r3, #0
 801000e:	f47f af11 	bne.w	800fe34 <HAL_SPI_TransmitReceive+0x438>
 8010012:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010014:	2b00      	cmp	r3, #0
 8010016:	f47f af0d 	bne.w	800fe34 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 801001a:	69bb      	ldr	r3, [r7, #24]
 801001c:	9300      	str	r3, [sp, #0]
 801001e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010020:	2200      	movs	r2, #0
 8010022:	2108      	movs	r1, #8
 8010024:	68f8      	ldr	r0, [r7, #12]
 8010026:	f000 f8c3 	bl	80101b0 <SPI_WaitOnFlagUntilTimeout>
 801002a:	4603      	mov	r3, r0
 801002c:	2b00      	cmp	r3, #0
 801002e:	d007      	beq.n	8010040 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010036:	f043 0220 	orr.w	r2, r3, #32
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8010040:	68f8      	ldr	r0, [r7, #12]
 8010042:	f000 f815 	bl	8010070 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	2201      	movs	r2, #1
 801004a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	2200      	movs	r2, #0
 8010052:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801005c:	2b00      	cmp	r3, #0
 801005e:	d001      	beq.n	8010064 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8010060:	2301      	movs	r3, #1
 8010062:	e000      	b.n	8010066 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8010064:	2300      	movs	r3, #0
  }
}
 8010066:	4618      	mov	r0, r3
 8010068:	3730      	adds	r7, #48	@ 0x30
 801006a:	46bd      	mov	sp, r7
 801006c:	bd80      	pop	{r7, pc}
 801006e:	bf00      	nop

08010070 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8010070:	b480      	push	{r7}
 8010072:	b085      	sub	sp, #20
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	695b      	ldr	r3, [r3, #20]
 801007e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	699a      	ldr	r2, [r3, #24]
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	f042 0208 	orr.w	r2, r2, #8
 801008e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	699a      	ldr	r2, [r3, #24]
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	f042 0210 	orr.w	r2, r2, #16
 801009e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	681a      	ldr	r2, [r3, #0]
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	f022 0201 	bic.w	r2, r2, #1
 80100ae:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	6919      	ldr	r1, [r3, #16]
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	681a      	ldr	r2, [r3, #0]
 80100ba:	4b3c      	ldr	r3, [pc, #240]	@ (80101ac <SPI_CloseTransfer+0x13c>)
 80100bc:	400b      	ands	r3, r1
 80100be:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	689a      	ldr	r2, [r3, #8]
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80100ce:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80100d6:	b2db      	uxtb	r3, r3
 80100d8:	2b04      	cmp	r3, #4
 80100da:	d014      	beq.n	8010106 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	f003 0320 	and.w	r3, r3, #32
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d00f      	beq.n	8010106 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80100ec:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	699a      	ldr	r2, [r3, #24]
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	f042 0220 	orr.w	r2, r2, #32
 8010104:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801010c:	b2db      	uxtb	r3, r3
 801010e:	2b03      	cmp	r3, #3
 8010110:	d014      	beq.n	801013c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010118:	2b00      	cmp	r3, #0
 801011a:	d00f      	beq.n	801013c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010122:	f043 0204 	orr.w	r2, r3, #4
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	699a      	ldr	r2, [r3, #24]
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801013a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010142:	2b00      	cmp	r3, #0
 8010144:	d00f      	beq.n	8010166 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801014c:	f043 0201 	orr.w	r2, r3, #1
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	699a      	ldr	r2, [r3, #24]
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010164:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801016c:	2b00      	cmp	r3, #0
 801016e:	d00f      	beq.n	8010190 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010176:	f043 0208 	orr.w	r2, r3, #8
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	699a      	ldr	r2, [r3, #24]
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801018e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	2200      	movs	r2, #0
 8010194:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	2200      	movs	r2, #0
 801019c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80101a0:	bf00      	nop
 80101a2:	3714      	adds	r7, #20
 80101a4:	46bd      	mov	sp, r7
 80101a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101aa:	4770      	bx	lr
 80101ac:	fffffc90 	.word	0xfffffc90

080101b0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b084      	sub	sp, #16
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	60f8      	str	r0, [r7, #12]
 80101b8:	60b9      	str	r1, [r7, #8]
 80101ba:	603b      	str	r3, [r7, #0]
 80101bc:	4613      	mov	r3, r2
 80101be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80101c0:	e010      	b.n	80101e4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80101c2:	f7f4 f80f 	bl	80041e4 <HAL_GetTick>
 80101c6:	4602      	mov	r2, r0
 80101c8:	69bb      	ldr	r3, [r7, #24]
 80101ca:	1ad3      	subs	r3, r2, r3
 80101cc:	683a      	ldr	r2, [r7, #0]
 80101ce:	429a      	cmp	r2, r3
 80101d0:	d803      	bhi.n	80101da <SPI_WaitOnFlagUntilTimeout+0x2a>
 80101d2:	683b      	ldr	r3, [r7, #0]
 80101d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101d8:	d102      	bne.n	80101e0 <SPI_WaitOnFlagUntilTimeout+0x30>
 80101da:	683b      	ldr	r3, [r7, #0]
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d101      	bne.n	80101e4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80101e0:	2303      	movs	r3, #3
 80101e2:	e00f      	b.n	8010204 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	695a      	ldr	r2, [r3, #20]
 80101ea:	68bb      	ldr	r3, [r7, #8]
 80101ec:	4013      	ands	r3, r2
 80101ee:	68ba      	ldr	r2, [r7, #8]
 80101f0:	429a      	cmp	r2, r3
 80101f2:	bf0c      	ite	eq
 80101f4:	2301      	moveq	r3, #1
 80101f6:	2300      	movne	r3, #0
 80101f8:	b2db      	uxtb	r3, r3
 80101fa:	461a      	mov	r2, r3
 80101fc:	79fb      	ldrb	r3, [r7, #7]
 80101fe:	429a      	cmp	r2, r3
 8010200:	d0df      	beq.n	80101c2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8010202:	2300      	movs	r3, #0
}
 8010204:	4618      	mov	r0, r3
 8010206:	3710      	adds	r7, #16
 8010208:	46bd      	mov	sp, r7
 801020a:	bd80      	pop	{r7, pc}

0801020c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 801020c:	b480      	push	{r7}
 801020e:	b085      	sub	sp, #20
 8010210:	af00      	add	r7, sp, #0
 8010212:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010218:	095b      	lsrs	r3, r3, #5
 801021a:	3301      	adds	r3, #1
 801021c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	68db      	ldr	r3, [r3, #12]
 8010222:	3301      	adds	r3, #1
 8010224:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8010226:	68bb      	ldr	r3, [r7, #8]
 8010228:	3307      	adds	r3, #7
 801022a:	08db      	lsrs	r3, r3, #3
 801022c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 801022e:	68bb      	ldr	r3, [r7, #8]
 8010230:	68fa      	ldr	r2, [r7, #12]
 8010232:	fb02 f303 	mul.w	r3, r2, r3
}
 8010236:	4618      	mov	r0, r3
 8010238:	3714      	adds	r7, #20
 801023a:	46bd      	mov	sp, r7
 801023c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010240:	4770      	bx	lr

08010242 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010242:	b580      	push	{r7, lr}
 8010244:	b082      	sub	sp, #8
 8010246:	af00      	add	r7, sp, #0
 8010248:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	2b00      	cmp	r3, #0
 801024e:	d101      	bne.n	8010254 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010250:	2301      	movs	r3, #1
 8010252:	e049      	b.n	80102e8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801025a:	b2db      	uxtb	r3, r3
 801025c:	2b00      	cmp	r3, #0
 801025e:	d106      	bne.n	801026e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	2200      	movs	r2, #0
 8010264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010268:	6878      	ldr	r0, [r7, #4]
 801026a:	f7f3 fc1f 	bl	8003aac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	2202      	movs	r2, #2
 8010272:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	681a      	ldr	r2, [r3, #0]
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	3304      	adds	r3, #4
 801027e:	4619      	mov	r1, r3
 8010280:	4610      	mov	r0, r2
 8010282:	f000 fc57 	bl	8010b34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	2201      	movs	r2, #1
 801028a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	2201      	movs	r2, #1
 8010292:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	2201      	movs	r2, #1
 801029a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	2201      	movs	r2, #1
 80102a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	2201      	movs	r2, #1
 80102aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	2201      	movs	r2, #1
 80102b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	2201      	movs	r2, #1
 80102ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	2201      	movs	r2, #1
 80102c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	2201      	movs	r2, #1
 80102ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	2201      	movs	r2, #1
 80102d2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	2201      	movs	r2, #1
 80102da:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	2201      	movs	r2, #1
 80102e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80102e6:	2300      	movs	r3, #0
}
 80102e8:	4618      	mov	r0, r3
 80102ea:	3708      	adds	r7, #8
 80102ec:	46bd      	mov	sp, r7
 80102ee:	bd80      	pop	{r7, pc}

080102f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80102f0:	b480      	push	{r7}
 80102f2:	b085      	sub	sp, #20
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80102fe:	b2db      	uxtb	r3, r3
 8010300:	2b01      	cmp	r3, #1
 8010302:	d001      	beq.n	8010308 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010304:	2301      	movs	r3, #1
 8010306:	e05e      	b.n	80103c6 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	2202      	movs	r2, #2
 801030c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	68da      	ldr	r2, [r3, #12]
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	f042 0201 	orr.w	r2, r2, #1
 801031e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	4a2b      	ldr	r2, [pc, #172]	@ (80103d4 <HAL_TIM_Base_Start_IT+0xe4>)
 8010326:	4293      	cmp	r3, r2
 8010328:	d02c      	beq.n	8010384 <HAL_TIM_Base_Start_IT+0x94>
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010332:	d027      	beq.n	8010384 <HAL_TIM_Base_Start_IT+0x94>
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	4a27      	ldr	r2, [pc, #156]	@ (80103d8 <HAL_TIM_Base_Start_IT+0xe8>)
 801033a:	4293      	cmp	r3, r2
 801033c:	d022      	beq.n	8010384 <HAL_TIM_Base_Start_IT+0x94>
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	4a26      	ldr	r2, [pc, #152]	@ (80103dc <HAL_TIM_Base_Start_IT+0xec>)
 8010344:	4293      	cmp	r3, r2
 8010346:	d01d      	beq.n	8010384 <HAL_TIM_Base_Start_IT+0x94>
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	4a24      	ldr	r2, [pc, #144]	@ (80103e0 <HAL_TIM_Base_Start_IT+0xf0>)
 801034e:	4293      	cmp	r3, r2
 8010350:	d018      	beq.n	8010384 <HAL_TIM_Base_Start_IT+0x94>
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	4a23      	ldr	r2, [pc, #140]	@ (80103e4 <HAL_TIM_Base_Start_IT+0xf4>)
 8010358:	4293      	cmp	r3, r2
 801035a:	d013      	beq.n	8010384 <HAL_TIM_Base_Start_IT+0x94>
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	4a21      	ldr	r2, [pc, #132]	@ (80103e8 <HAL_TIM_Base_Start_IT+0xf8>)
 8010362:	4293      	cmp	r3, r2
 8010364:	d00e      	beq.n	8010384 <HAL_TIM_Base_Start_IT+0x94>
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	4a20      	ldr	r2, [pc, #128]	@ (80103ec <HAL_TIM_Base_Start_IT+0xfc>)
 801036c:	4293      	cmp	r3, r2
 801036e:	d009      	beq.n	8010384 <HAL_TIM_Base_Start_IT+0x94>
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	4a1e      	ldr	r2, [pc, #120]	@ (80103f0 <HAL_TIM_Base_Start_IT+0x100>)
 8010376:	4293      	cmp	r3, r2
 8010378:	d004      	beq.n	8010384 <HAL_TIM_Base_Start_IT+0x94>
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	4a1d      	ldr	r2, [pc, #116]	@ (80103f4 <HAL_TIM_Base_Start_IT+0x104>)
 8010380:	4293      	cmp	r3, r2
 8010382:	d115      	bne.n	80103b0 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	689a      	ldr	r2, [r3, #8]
 801038a:	4b1b      	ldr	r3, [pc, #108]	@ (80103f8 <HAL_TIM_Base_Start_IT+0x108>)
 801038c:	4013      	ands	r3, r2
 801038e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	2b06      	cmp	r3, #6
 8010394:	d015      	beq.n	80103c2 <HAL_TIM_Base_Start_IT+0xd2>
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801039c:	d011      	beq.n	80103c2 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	681a      	ldr	r2, [r3, #0]
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	f042 0201 	orr.w	r2, r2, #1
 80103ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80103ae:	e008      	b.n	80103c2 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	681a      	ldr	r2, [r3, #0]
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	f042 0201 	orr.w	r2, r2, #1
 80103be:	601a      	str	r2, [r3, #0]
 80103c0:	e000      	b.n	80103c4 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80103c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80103c4:	2300      	movs	r3, #0
}
 80103c6:	4618      	mov	r0, r3
 80103c8:	3714      	adds	r7, #20
 80103ca:	46bd      	mov	sp, r7
 80103cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d0:	4770      	bx	lr
 80103d2:	bf00      	nop
 80103d4:	40010000 	.word	0x40010000
 80103d8:	40000400 	.word	0x40000400
 80103dc:	40000800 	.word	0x40000800
 80103e0:	40000c00 	.word	0x40000c00
 80103e4:	40010400 	.word	0x40010400
 80103e8:	40001800 	.word	0x40001800
 80103ec:	40014000 	.word	0x40014000
 80103f0:	4000e000 	.word	0x4000e000
 80103f4:	4000e400 	.word	0x4000e400
 80103f8:	00010007 	.word	0x00010007

080103fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b082      	sub	sp, #8
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d101      	bne.n	801040e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801040a:	2301      	movs	r3, #1
 801040c:	e049      	b.n	80104a2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010414:	b2db      	uxtb	r3, r3
 8010416:	2b00      	cmp	r3, #0
 8010418:	d106      	bne.n	8010428 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	2200      	movs	r2, #0
 801041e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8010422:	6878      	ldr	r0, [r7, #4]
 8010424:	f000 f841 	bl	80104aa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	2202      	movs	r2, #2
 801042c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	681a      	ldr	r2, [r3, #0]
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	3304      	adds	r3, #4
 8010438:	4619      	mov	r1, r3
 801043a:	4610      	mov	r0, r2
 801043c:	f000 fb7a 	bl	8010b34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	2201      	movs	r2, #1
 8010444:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	2201      	movs	r2, #1
 801044c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	2201      	movs	r2, #1
 8010454:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	2201      	movs	r2, #1
 801045c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	2201      	movs	r2, #1
 8010464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	2201      	movs	r2, #1
 801046c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	2201      	movs	r2, #1
 8010474:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	2201      	movs	r2, #1
 801047c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	2201      	movs	r2, #1
 8010484:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	2201      	movs	r2, #1
 801048c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	2201      	movs	r2, #1
 8010494:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	2201      	movs	r2, #1
 801049c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80104a0:	2300      	movs	r3, #0
}
 80104a2:	4618      	mov	r0, r3
 80104a4:	3708      	adds	r7, #8
 80104a6:	46bd      	mov	sp, r7
 80104a8:	bd80      	pop	{r7, pc}

080104aa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80104aa:	b480      	push	{r7}
 80104ac:	b083      	sub	sp, #12
 80104ae:	af00      	add	r7, sp, #0
 80104b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80104b2:	bf00      	nop
 80104b4:	370c      	adds	r7, #12
 80104b6:	46bd      	mov	sp, r7
 80104b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104bc:	4770      	bx	lr

080104be <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80104be:	b580      	push	{r7, lr}
 80104c0:	b084      	sub	sp, #16
 80104c2:	af00      	add	r7, sp, #0
 80104c4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	68db      	ldr	r3, [r3, #12]
 80104cc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	691b      	ldr	r3, [r3, #16]
 80104d4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80104d6:	68bb      	ldr	r3, [r7, #8]
 80104d8:	f003 0302 	and.w	r3, r3, #2
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d020      	beq.n	8010522 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	f003 0302 	and.w	r3, r3, #2
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d01b      	beq.n	8010522 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	f06f 0202 	mvn.w	r2, #2
 80104f2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	2201      	movs	r2, #1
 80104f8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	699b      	ldr	r3, [r3, #24]
 8010500:	f003 0303 	and.w	r3, r3, #3
 8010504:	2b00      	cmp	r3, #0
 8010506:	d003      	beq.n	8010510 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010508:	6878      	ldr	r0, [r7, #4]
 801050a:	f000 faf5 	bl	8010af8 <HAL_TIM_IC_CaptureCallback>
 801050e:	e005      	b.n	801051c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010510:	6878      	ldr	r0, [r7, #4]
 8010512:	f000 fae7 	bl	8010ae4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010516:	6878      	ldr	r0, [r7, #4]
 8010518:	f000 faf8 	bl	8010b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	2200      	movs	r2, #0
 8010520:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8010522:	68bb      	ldr	r3, [r7, #8]
 8010524:	f003 0304 	and.w	r3, r3, #4
 8010528:	2b00      	cmp	r3, #0
 801052a:	d020      	beq.n	801056e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	f003 0304 	and.w	r3, r3, #4
 8010532:	2b00      	cmp	r3, #0
 8010534:	d01b      	beq.n	801056e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	f06f 0204 	mvn.w	r2, #4
 801053e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	2202      	movs	r2, #2
 8010544:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	699b      	ldr	r3, [r3, #24]
 801054c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010550:	2b00      	cmp	r3, #0
 8010552:	d003      	beq.n	801055c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010554:	6878      	ldr	r0, [r7, #4]
 8010556:	f000 facf 	bl	8010af8 <HAL_TIM_IC_CaptureCallback>
 801055a:	e005      	b.n	8010568 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801055c:	6878      	ldr	r0, [r7, #4]
 801055e:	f000 fac1 	bl	8010ae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010562:	6878      	ldr	r0, [r7, #4]
 8010564:	f000 fad2 	bl	8010b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	2200      	movs	r2, #0
 801056c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 801056e:	68bb      	ldr	r3, [r7, #8]
 8010570:	f003 0308 	and.w	r3, r3, #8
 8010574:	2b00      	cmp	r3, #0
 8010576:	d020      	beq.n	80105ba <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	f003 0308 	and.w	r3, r3, #8
 801057e:	2b00      	cmp	r3, #0
 8010580:	d01b      	beq.n	80105ba <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	f06f 0208 	mvn.w	r2, #8
 801058a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	2204      	movs	r2, #4
 8010590:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	69db      	ldr	r3, [r3, #28]
 8010598:	f003 0303 	and.w	r3, r3, #3
 801059c:	2b00      	cmp	r3, #0
 801059e:	d003      	beq.n	80105a8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80105a0:	6878      	ldr	r0, [r7, #4]
 80105a2:	f000 faa9 	bl	8010af8 <HAL_TIM_IC_CaptureCallback>
 80105a6:	e005      	b.n	80105b4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80105a8:	6878      	ldr	r0, [r7, #4]
 80105aa:	f000 fa9b 	bl	8010ae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80105ae:	6878      	ldr	r0, [r7, #4]
 80105b0:	f000 faac 	bl	8010b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	2200      	movs	r2, #0
 80105b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80105ba:	68bb      	ldr	r3, [r7, #8]
 80105bc:	f003 0310 	and.w	r3, r3, #16
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d020      	beq.n	8010606 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	f003 0310 	and.w	r3, r3, #16
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d01b      	beq.n	8010606 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	f06f 0210 	mvn.w	r2, #16
 80105d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	2208      	movs	r2, #8
 80105dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	69db      	ldr	r3, [r3, #28]
 80105e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d003      	beq.n	80105f4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80105ec:	6878      	ldr	r0, [r7, #4]
 80105ee:	f000 fa83 	bl	8010af8 <HAL_TIM_IC_CaptureCallback>
 80105f2:	e005      	b.n	8010600 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80105f4:	6878      	ldr	r0, [r7, #4]
 80105f6:	f000 fa75 	bl	8010ae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80105fa:	6878      	ldr	r0, [r7, #4]
 80105fc:	f000 fa86 	bl	8010b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	2200      	movs	r2, #0
 8010604:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8010606:	68bb      	ldr	r3, [r7, #8]
 8010608:	f003 0301 	and.w	r3, r3, #1
 801060c:	2b00      	cmp	r3, #0
 801060e:	d00c      	beq.n	801062a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	f003 0301 	and.w	r3, r3, #1
 8010616:	2b00      	cmp	r3, #0
 8010618:	d007      	beq.n	801062a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	f06f 0201 	mvn.w	r2, #1
 8010622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010624:	6878      	ldr	r0, [r7, #4]
 8010626:	f7f1 ff0f 	bl	8002448 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 801062a:	68bb      	ldr	r3, [r7, #8]
 801062c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010630:	2b00      	cmp	r3, #0
 8010632:	d104      	bne.n	801063e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8010634:	68bb      	ldr	r3, [r7, #8]
 8010636:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 801063a:	2b00      	cmp	r3, #0
 801063c:	d00c      	beq.n	8010658 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010644:	2b00      	cmp	r3, #0
 8010646:	d007      	beq.n	8010658 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8010650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010652:	6878      	ldr	r0, [r7, #4]
 8010654:	f000 ffc6 	bl	80115e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8010658:	68bb      	ldr	r3, [r7, #8]
 801065a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801065e:	2b00      	cmp	r3, #0
 8010660:	d00c      	beq.n	801067c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010668:	2b00      	cmp	r3, #0
 801066a:	d007      	beq.n	801067c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8010674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010676:	6878      	ldr	r0, [r7, #4]
 8010678:	f000 ffbe 	bl	80115f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 801067c:	68bb      	ldr	r3, [r7, #8]
 801067e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010682:	2b00      	cmp	r3, #0
 8010684:	d00c      	beq.n	80106a0 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801068c:	2b00      	cmp	r3, #0
 801068e:	d007      	beq.n	80106a0 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8010698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801069a:	6878      	ldr	r0, [r7, #4]
 801069c:	f000 fa40 	bl	8010b20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80106a0:	68bb      	ldr	r3, [r7, #8]
 80106a2:	f003 0320 	and.w	r3, r3, #32
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d00c      	beq.n	80106c4 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	f003 0320 	and.w	r3, r3, #32
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d007      	beq.n	80106c4 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	f06f 0220 	mvn.w	r2, #32
 80106bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80106be:	6878      	ldr	r0, [r7, #4]
 80106c0:	f000 ff86 	bl	80115d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80106c4:	bf00      	nop
 80106c6:	3710      	adds	r7, #16
 80106c8:	46bd      	mov	sp, r7
 80106ca:	bd80      	pop	{r7, pc}

080106cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80106cc:	b580      	push	{r7, lr}
 80106ce:	b086      	sub	sp, #24
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	60f8      	str	r0, [r7, #12]
 80106d4:	60b9      	str	r1, [r7, #8]
 80106d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80106d8:	2300      	movs	r3, #0
 80106da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80106e2:	2b01      	cmp	r3, #1
 80106e4:	d101      	bne.n	80106ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80106e6:	2302      	movs	r3, #2
 80106e8:	e0ff      	b.n	80108ea <HAL_TIM_PWM_ConfigChannel+0x21e>
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	2201      	movs	r2, #1
 80106ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	2b14      	cmp	r3, #20
 80106f6:	f200 80f0 	bhi.w	80108da <HAL_TIM_PWM_ConfigChannel+0x20e>
 80106fa:	a201      	add	r2, pc, #4	@ (adr r2, 8010700 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80106fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010700:	08010755 	.word	0x08010755
 8010704:	080108db 	.word	0x080108db
 8010708:	080108db 	.word	0x080108db
 801070c:	080108db 	.word	0x080108db
 8010710:	08010795 	.word	0x08010795
 8010714:	080108db 	.word	0x080108db
 8010718:	080108db 	.word	0x080108db
 801071c:	080108db 	.word	0x080108db
 8010720:	080107d7 	.word	0x080107d7
 8010724:	080108db 	.word	0x080108db
 8010728:	080108db 	.word	0x080108db
 801072c:	080108db 	.word	0x080108db
 8010730:	08010817 	.word	0x08010817
 8010734:	080108db 	.word	0x080108db
 8010738:	080108db 	.word	0x080108db
 801073c:	080108db 	.word	0x080108db
 8010740:	08010859 	.word	0x08010859
 8010744:	080108db 	.word	0x080108db
 8010748:	080108db 	.word	0x080108db
 801074c:	080108db 	.word	0x080108db
 8010750:	08010899 	.word	0x08010899
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	68b9      	ldr	r1, [r7, #8]
 801075a:	4618      	mov	r0, r3
 801075c:	f000 fa9c 	bl	8010c98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	699a      	ldr	r2, [r3, #24]
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	f042 0208 	orr.w	r2, r2, #8
 801076e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	699a      	ldr	r2, [r3, #24]
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	f022 0204 	bic.w	r2, r2, #4
 801077e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	6999      	ldr	r1, [r3, #24]
 8010786:	68bb      	ldr	r3, [r7, #8]
 8010788:	691a      	ldr	r2, [r3, #16]
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	430a      	orrs	r2, r1
 8010790:	619a      	str	r2, [r3, #24]
      break;
 8010792:	e0a5      	b.n	80108e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	68b9      	ldr	r1, [r7, #8]
 801079a:	4618      	mov	r0, r3
 801079c:	f000 fb0c 	bl	8010db8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	699a      	ldr	r2, [r3, #24]
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80107ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	699a      	ldr	r2, [r3, #24]
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80107be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	6999      	ldr	r1, [r3, #24]
 80107c6:	68bb      	ldr	r3, [r7, #8]
 80107c8:	691b      	ldr	r3, [r3, #16]
 80107ca:	021a      	lsls	r2, r3, #8
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	430a      	orrs	r2, r1
 80107d2:	619a      	str	r2, [r3, #24]
      break;
 80107d4:	e084      	b.n	80108e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	68b9      	ldr	r1, [r7, #8]
 80107dc:	4618      	mov	r0, r3
 80107de:	f000 fb75 	bl	8010ecc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	69da      	ldr	r2, [r3, #28]
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	f042 0208 	orr.w	r2, r2, #8
 80107f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	69da      	ldr	r2, [r3, #28]
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	f022 0204 	bic.w	r2, r2, #4
 8010800:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	69d9      	ldr	r1, [r3, #28]
 8010808:	68bb      	ldr	r3, [r7, #8]
 801080a:	691a      	ldr	r2, [r3, #16]
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	430a      	orrs	r2, r1
 8010812:	61da      	str	r2, [r3, #28]
      break;
 8010814:	e064      	b.n	80108e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	68b9      	ldr	r1, [r7, #8]
 801081c:	4618      	mov	r0, r3
 801081e:	f000 fbdd 	bl	8010fdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	69da      	ldr	r2, [r3, #28]
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010830:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	69da      	ldr	r2, [r3, #28]
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8010840:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	69d9      	ldr	r1, [r3, #28]
 8010848:	68bb      	ldr	r3, [r7, #8]
 801084a:	691b      	ldr	r3, [r3, #16]
 801084c:	021a      	lsls	r2, r3, #8
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	430a      	orrs	r2, r1
 8010854:	61da      	str	r2, [r3, #28]
      break;
 8010856:	e043      	b.n	80108e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	68b9      	ldr	r1, [r7, #8]
 801085e:	4618      	mov	r0, r3
 8010860:	f000 fc26 	bl	80110b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	f042 0208 	orr.w	r2, r2, #8
 8010872:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	f022 0204 	bic.w	r2, r2, #4
 8010882:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801088a:	68bb      	ldr	r3, [r7, #8]
 801088c:	691a      	ldr	r2, [r3, #16]
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	430a      	orrs	r2, r1
 8010894:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8010896:	e023      	b.n	80108e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	68b9      	ldr	r1, [r7, #8]
 801089e:	4618      	mov	r0, r3
 80108a0:	f000 fc6a 	bl	8011178 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80108b2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80108c2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80108ca:	68bb      	ldr	r3, [r7, #8]
 80108cc:	691b      	ldr	r3, [r3, #16]
 80108ce:	021a      	lsls	r2, r3, #8
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	430a      	orrs	r2, r1
 80108d6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80108d8:	e002      	b.n	80108e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80108da:	2301      	movs	r3, #1
 80108dc:	75fb      	strb	r3, [r7, #23]
      break;
 80108de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	2200      	movs	r2, #0
 80108e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80108e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80108ea:	4618      	mov	r0, r3
 80108ec:	3718      	adds	r7, #24
 80108ee:	46bd      	mov	sp, r7
 80108f0:	bd80      	pop	{r7, pc}
 80108f2:	bf00      	nop

080108f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80108f4:	b580      	push	{r7, lr}
 80108f6:	b084      	sub	sp, #16
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	6078      	str	r0, [r7, #4]
 80108fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80108fe:	2300      	movs	r3, #0
 8010900:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010908:	2b01      	cmp	r3, #1
 801090a:	d101      	bne.n	8010910 <HAL_TIM_ConfigClockSource+0x1c>
 801090c:	2302      	movs	r3, #2
 801090e:	e0dc      	b.n	8010aca <HAL_TIM_ConfigClockSource+0x1d6>
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	2201      	movs	r2, #1
 8010914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	2202      	movs	r2, #2
 801091c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	689b      	ldr	r3, [r3, #8]
 8010926:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8010928:	68ba      	ldr	r2, [r7, #8]
 801092a:	4b6a      	ldr	r3, [pc, #424]	@ (8010ad4 <HAL_TIM_ConfigClockSource+0x1e0>)
 801092c:	4013      	ands	r3, r2
 801092e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010930:	68bb      	ldr	r3, [r7, #8]
 8010932:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8010936:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	68ba      	ldr	r2, [r7, #8]
 801093e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010940:	683b      	ldr	r3, [r7, #0]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	4a64      	ldr	r2, [pc, #400]	@ (8010ad8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8010946:	4293      	cmp	r3, r2
 8010948:	f000 80a9 	beq.w	8010a9e <HAL_TIM_ConfigClockSource+0x1aa>
 801094c:	4a62      	ldr	r2, [pc, #392]	@ (8010ad8 <HAL_TIM_ConfigClockSource+0x1e4>)
 801094e:	4293      	cmp	r3, r2
 8010950:	f200 80ae 	bhi.w	8010ab0 <HAL_TIM_ConfigClockSource+0x1bc>
 8010954:	4a61      	ldr	r2, [pc, #388]	@ (8010adc <HAL_TIM_ConfigClockSource+0x1e8>)
 8010956:	4293      	cmp	r3, r2
 8010958:	f000 80a1 	beq.w	8010a9e <HAL_TIM_ConfigClockSource+0x1aa>
 801095c:	4a5f      	ldr	r2, [pc, #380]	@ (8010adc <HAL_TIM_ConfigClockSource+0x1e8>)
 801095e:	4293      	cmp	r3, r2
 8010960:	f200 80a6 	bhi.w	8010ab0 <HAL_TIM_ConfigClockSource+0x1bc>
 8010964:	4a5e      	ldr	r2, [pc, #376]	@ (8010ae0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8010966:	4293      	cmp	r3, r2
 8010968:	f000 8099 	beq.w	8010a9e <HAL_TIM_ConfigClockSource+0x1aa>
 801096c:	4a5c      	ldr	r2, [pc, #368]	@ (8010ae0 <HAL_TIM_ConfigClockSource+0x1ec>)
 801096e:	4293      	cmp	r3, r2
 8010970:	f200 809e 	bhi.w	8010ab0 <HAL_TIM_ConfigClockSource+0x1bc>
 8010974:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8010978:	f000 8091 	beq.w	8010a9e <HAL_TIM_ConfigClockSource+0x1aa>
 801097c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8010980:	f200 8096 	bhi.w	8010ab0 <HAL_TIM_ConfigClockSource+0x1bc>
 8010984:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010988:	f000 8089 	beq.w	8010a9e <HAL_TIM_ConfigClockSource+0x1aa>
 801098c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010990:	f200 808e 	bhi.w	8010ab0 <HAL_TIM_ConfigClockSource+0x1bc>
 8010994:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010998:	d03e      	beq.n	8010a18 <HAL_TIM_ConfigClockSource+0x124>
 801099a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801099e:	f200 8087 	bhi.w	8010ab0 <HAL_TIM_ConfigClockSource+0x1bc>
 80109a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80109a6:	f000 8086 	beq.w	8010ab6 <HAL_TIM_ConfigClockSource+0x1c2>
 80109aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80109ae:	d87f      	bhi.n	8010ab0 <HAL_TIM_ConfigClockSource+0x1bc>
 80109b0:	2b70      	cmp	r3, #112	@ 0x70
 80109b2:	d01a      	beq.n	80109ea <HAL_TIM_ConfigClockSource+0xf6>
 80109b4:	2b70      	cmp	r3, #112	@ 0x70
 80109b6:	d87b      	bhi.n	8010ab0 <HAL_TIM_ConfigClockSource+0x1bc>
 80109b8:	2b60      	cmp	r3, #96	@ 0x60
 80109ba:	d050      	beq.n	8010a5e <HAL_TIM_ConfigClockSource+0x16a>
 80109bc:	2b60      	cmp	r3, #96	@ 0x60
 80109be:	d877      	bhi.n	8010ab0 <HAL_TIM_ConfigClockSource+0x1bc>
 80109c0:	2b50      	cmp	r3, #80	@ 0x50
 80109c2:	d03c      	beq.n	8010a3e <HAL_TIM_ConfigClockSource+0x14a>
 80109c4:	2b50      	cmp	r3, #80	@ 0x50
 80109c6:	d873      	bhi.n	8010ab0 <HAL_TIM_ConfigClockSource+0x1bc>
 80109c8:	2b40      	cmp	r3, #64	@ 0x40
 80109ca:	d058      	beq.n	8010a7e <HAL_TIM_ConfigClockSource+0x18a>
 80109cc:	2b40      	cmp	r3, #64	@ 0x40
 80109ce:	d86f      	bhi.n	8010ab0 <HAL_TIM_ConfigClockSource+0x1bc>
 80109d0:	2b30      	cmp	r3, #48	@ 0x30
 80109d2:	d064      	beq.n	8010a9e <HAL_TIM_ConfigClockSource+0x1aa>
 80109d4:	2b30      	cmp	r3, #48	@ 0x30
 80109d6:	d86b      	bhi.n	8010ab0 <HAL_TIM_ConfigClockSource+0x1bc>
 80109d8:	2b20      	cmp	r3, #32
 80109da:	d060      	beq.n	8010a9e <HAL_TIM_ConfigClockSource+0x1aa>
 80109dc:	2b20      	cmp	r3, #32
 80109de:	d867      	bhi.n	8010ab0 <HAL_TIM_ConfigClockSource+0x1bc>
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d05c      	beq.n	8010a9e <HAL_TIM_ConfigClockSource+0x1aa>
 80109e4:	2b10      	cmp	r3, #16
 80109e6:	d05a      	beq.n	8010a9e <HAL_TIM_ConfigClockSource+0x1aa>
 80109e8:	e062      	b.n	8010ab0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80109ee:	683b      	ldr	r3, [r7, #0]
 80109f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80109f2:	683b      	ldr	r3, [r7, #0]
 80109f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80109f6:	683b      	ldr	r3, [r7, #0]
 80109f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80109fa:	f000 fca1 	bl	8011340 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	689b      	ldr	r3, [r3, #8]
 8010a04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010a06:	68bb      	ldr	r3, [r7, #8]
 8010a08:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8010a0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	68ba      	ldr	r2, [r7, #8]
 8010a14:	609a      	str	r2, [r3, #8]
      break;
 8010a16:	e04f      	b.n	8010ab8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8010a1c:	683b      	ldr	r3, [r7, #0]
 8010a1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8010a20:	683b      	ldr	r3, [r7, #0]
 8010a22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8010a24:	683b      	ldr	r3, [r7, #0]
 8010a26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8010a28:	f000 fc8a 	bl	8011340 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	689a      	ldr	r2, [r3, #8]
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8010a3a:	609a      	str	r2, [r3, #8]
      break;
 8010a3c:	e03c      	b.n	8010ab8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8010a42:	683b      	ldr	r3, [r7, #0]
 8010a44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8010a46:	683b      	ldr	r3, [r7, #0]
 8010a48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010a4a:	461a      	mov	r2, r3
 8010a4c:	f000 fbfa 	bl	8011244 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	2150      	movs	r1, #80	@ 0x50
 8010a56:	4618      	mov	r0, r3
 8010a58:	f000 fc54 	bl	8011304 <TIM_ITRx_SetConfig>
      break;
 8010a5c:	e02c      	b.n	8010ab8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8010a62:	683b      	ldr	r3, [r7, #0]
 8010a64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8010a66:	683b      	ldr	r3, [r7, #0]
 8010a68:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010a6a:	461a      	mov	r2, r3
 8010a6c:	f000 fc19 	bl	80112a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	2160      	movs	r1, #96	@ 0x60
 8010a76:	4618      	mov	r0, r3
 8010a78:	f000 fc44 	bl	8011304 <TIM_ITRx_SetConfig>
      break;
 8010a7c:	e01c      	b.n	8010ab8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8010a82:	683b      	ldr	r3, [r7, #0]
 8010a84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8010a86:	683b      	ldr	r3, [r7, #0]
 8010a88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010a8a:	461a      	mov	r2, r3
 8010a8c:	f000 fbda 	bl	8011244 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	2140      	movs	r1, #64	@ 0x40
 8010a96:	4618      	mov	r0, r3
 8010a98:	f000 fc34 	bl	8011304 <TIM_ITRx_SetConfig>
      break;
 8010a9c:	e00c      	b.n	8010ab8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	681a      	ldr	r2, [r3, #0]
 8010aa2:	683b      	ldr	r3, [r7, #0]
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	4619      	mov	r1, r3
 8010aa8:	4610      	mov	r0, r2
 8010aaa:	f000 fc2b 	bl	8011304 <TIM_ITRx_SetConfig>
      break;
 8010aae:	e003      	b.n	8010ab8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8010ab0:	2301      	movs	r3, #1
 8010ab2:	73fb      	strb	r3, [r7, #15]
      break;
 8010ab4:	e000      	b.n	8010ab8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8010ab6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	2201      	movs	r2, #1
 8010abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	2200      	movs	r2, #0
 8010ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8010ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010aca:	4618      	mov	r0, r3
 8010acc:	3710      	adds	r7, #16
 8010ace:	46bd      	mov	sp, r7
 8010ad0:	bd80      	pop	{r7, pc}
 8010ad2:	bf00      	nop
 8010ad4:	ffceff88 	.word	0xffceff88
 8010ad8:	00100040 	.word	0x00100040
 8010adc:	00100030 	.word	0x00100030
 8010ae0:	00100020 	.word	0x00100020

08010ae4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010ae4:	b480      	push	{r7}
 8010ae6:	b083      	sub	sp, #12
 8010ae8:	af00      	add	r7, sp, #0
 8010aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010aec:	bf00      	nop
 8010aee:	370c      	adds	r7, #12
 8010af0:	46bd      	mov	sp, r7
 8010af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af6:	4770      	bx	lr

08010af8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010af8:	b480      	push	{r7}
 8010afa:	b083      	sub	sp, #12
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010b00:	bf00      	nop
 8010b02:	370c      	adds	r7, #12
 8010b04:	46bd      	mov	sp, r7
 8010b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b0a:	4770      	bx	lr

08010b0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010b0c:	b480      	push	{r7}
 8010b0e:	b083      	sub	sp, #12
 8010b10:	af00      	add	r7, sp, #0
 8010b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010b14:	bf00      	nop
 8010b16:	370c      	adds	r7, #12
 8010b18:	46bd      	mov	sp, r7
 8010b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b1e:	4770      	bx	lr

08010b20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010b20:	b480      	push	{r7}
 8010b22:	b083      	sub	sp, #12
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010b28:	bf00      	nop
 8010b2a:	370c      	adds	r7, #12
 8010b2c:	46bd      	mov	sp, r7
 8010b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b32:	4770      	bx	lr

08010b34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010b34:	b480      	push	{r7}
 8010b36:	b085      	sub	sp, #20
 8010b38:	af00      	add	r7, sp, #0
 8010b3a:	6078      	str	r0, [r7, #4]
 8010b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	4a4a      	ldr	r2, [pc, #296]	@ (8010c70 <TIM_Base_SetConfig+0x13c>)
 8010b48:	4293      	cmp	r3, r2
 8010b4a:	d013      	beq.n	8010b74 <TIM_Base_SetConfig+0x40>
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010b52:	d00f      	beq.n	8010b74 <TIM_Base_SetConfig+0x40>
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	4a47      	ldr	r2, [pc, #284]	@ (8010c74 <TIM_Base_SetConfig+0x140>)
 8010b58:	4293      	cmp	r3, r2
 8010b5a:	d00b      	beq.n	8010b74 <TIM_Base_SetConfig+0x40>
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	4a46      	ldr	r2, [pc, #280]	@ (8010c78 <TIM_Base_SetConfig+0x144>)
 8010b60:	4293      	cmp	r3, r2
 8010b62:	d007      	beq.n	8010b74 <TIM_Base_SetConfig+0x40>
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	4a45      	ldr	r2, [pc, #276]	@ (8010c7c <TIM_Base_SetConfig+0x148>)
 8010b68:	4293      	cmp	r3, r2
 8010b6a:	d003      	beq.n	8010b74 <TIM_Base_SetConfig+0x40>
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	4a44      	ldr	r2, [pc, #272]	@ (8010c80 <TIM_Base_SetConfig+0x14c>)
 8010b70:	4293      	cmp	r3, r2
 8010b72:	d108      	bne.n	8010b86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010b7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010b7c:	683b      	ldr	r3, [r7, #0]
 8010b7e:	685b      	ldr	r3, [r3, #4]
 8010b80:	68fa      	ldr	r2, [r7, #12]
 8010b82:	4313      	orrs	r3, r2
 8010b84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	4a39      	ldr	r2, [pc, #228]	@ (8010c70 <TIM_Base_SetConfig+0x13c>)
 8010b8a:	4293      	cmp	r3, r2
 8010b8c:	d027      	beq.n	8010bde <TIM_Base_SetConfig+0xaa>
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010b94:	d023      	beq.n	8010bde <TIM_Base_SetConfig+0xaa>
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	4a36      	ldr	r2, [pc, #216]	@ (8010c74 <TIM_Base_SetConfig+0x140>)
 8010b9a:	4293      	cmp	r3, r2
 8010b9c:	d01f      	beq.n	8010bde <TIM_Base_SetConfig+0xaa>
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	4a35      	ldr	r2, [pc, #212]	@ (8010c78 <TIM_Base_SetConfig+0x144>)
 8010ba2:	4293      	cmp	r3, r2
 8010ba4:	d01b      	beq.n	8010bde <TIM_Base_SetConfig+0xaa>
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	4a34      	ldr	r2, [pc, #208]	@ (8010c7c <TIM_Base_SetConfig+0x148>)
 8010baa:	4293      	cmp	r3, r2
 8010bac:	d017      	beq.n	8010bde <TIM_Base_SetConfig+0xaa>
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	4a33      	ldr	r2, [pc, #204]	@ (8010c80 <TIM_Base_SetConfig+0x14c>)
 8010bb2:	4293      	cmp	r3, r2
 8010bb4:	d013      	beq.n	8010bde <TIM_Base_SetConfig+0xaa>
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	4a32      	ldr	r2, [pc, #200]	@ (8010c84 <TIM_Base_SetConfig+0x150>)
 8010bba:	4293      	cmp	r3, r2
 8010bbc:	d00f      	beq.n	8010bde <TIM_Base_SetConfig+0xaa>
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	4a31      	ldr	r2, [pc, #196]	@ (8010c88 <TIM_Base_SetConfig+0x154>)
 8010bc2:	4293      	cmp	r3, r2
 8010bc4:	d00b      	beq.n	8010bde <TIM_Base_SetConfig+0xaa>
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	4a30      	ldr	r2, [pc, #192]	@ (8010c8c <TIM_Base_SetConfig+0x158>)
 8010bca:	4293      	cmp	r3, r2
 8010bcc:	d007      	beq.n	8010bde <TIM_Base_SetConfig+0xaa>
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	4a2f      	ldr	r2, [pc, #188]	@ (8010c90 <TIM_Base_SetConfig+0x15c>)
 8010bd2:	4293      	cmp	r3, r2
 8010bd4:	d003      	beq.n	8010bde <TIM_Base_SetConfig+0xaa>
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	4a2e      	ldr	r2, [pc, #184]	@ (8010c94 <TIM_Base_SetConfig+0x160>)
 8010bda:	4293      	cmp	r3, r2
 8010bdc:	d108      	bne.n	8010bf0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010be4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010be6:	683b      	ldr	r3, [r7, #0]
 8010be8:	68db      	ldr	r3, [r3, #12]
 8010bea:	68fa      	ldr	r2, [r7, #12]
 8010bec:	4313      	orrs	r3, r2
 8010bee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8010bf6:	683b      	ldr	r3, [r7, #0]
 8010bf8:	695b      	ldr	r3, [r3, #20]
 8010bfa:	4313      	orrs	r3, r2
 8010bfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	68fa      	ldr	r2, [r7, #12]
 8010c02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010c04:	683b      	ldr	r3, [r7, #0]
 8010c06:	689a      	ldr	r2, [r3, #8]
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010c0c:	683b      	ldr	r3, [r7, #0]
 8010c0e:	681a      	ldr	r2, [r3, #0]
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	4a16      	ldr	r2, [pc, #88]	@ (8010c70 <TIM_Base_SetConfig+0x13c>)
 8010c18:	4293      	cmp	r3, r2
 8010c1a:	d00f      	beq.n	8010c3c <TIM_Base_SetConfig+0x108>
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	4a18      	ldr	r2, [pc, #96]	@ (8010c80 <TIM_Base_SetConfig+0x14c>)
 8010c20:	4293      	cmp	r3, r2
 8010c22:	d00b      	beq.n	8010c3c <TIM_Base_SetConfig+0x108>
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	4a17      	ldr	r2, [pc, #92]	@ (8010c84 <TIM_Base_SetConfig+0x150>)
 8010c28:	4293      	cmp	r3, r2
 8010c2a:	d007      	beq.n	8010c3c <TIM_Base_SetConfig+0x108>
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	4a16      	ldr	r2, [pc, #88]	@ (8010c88 <TIM_Base_SetConfig+0x154>)
 8010c30:	4293      	cmp	r3, r2
 8010c32:	d003      	beq.n	8010c3c <TIM_Base_SetConfig+0x108>
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	4a15      	ldr	r2, [pc, #84]	@ (8010c8c <TIM_Base_SetConfig+0x158>)
 8010c38:	4293      	cmp	r3, r2
 8010c3a:	d103      	bne.n	8010c44 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010c3c:	683b      	ldr	r3, [r7, #0]
 8010c3e:	691a      	ldr	r2, [r3, #16]
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	2201      	movs	r2, #1
 8010c48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	691b      	ldr	r3, [r3, #16]
 8010c4e:	f003 0301 	and.w	r3, r3, #1
 8010c52:	2b01      	cmp	r3, #1
 8010c54:	d105      	bne.n	8010c62 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	691b      	ldr	r3, [r3, #16]
 8010c5a:	f023 0201 	bic.w	r2, r3, #1
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	611a      	str	r2, [r3, #16]
  }
}
 8010c62:	bf00      	nop
 8010c64:	3714      	adds	r7, #20
 8010c66:	46bd      	mov	sp, r7
 8010c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c6c:	4770      	bx	lr
 8010c6e:	bf00      	nop
 8010c70:	40010000 	.word	0x40010000
 8010c74:	40000400 	.word	0x40000400
 8010c78:	40000800 	.word	0x40000800
 8010c7c:	40000c00 	.word	0x40000c00
 8010c80:	40010400 	.word	0x40010400
 8010c84:	40014000 	.word	0x40014000
 8010c88:	40014400 	.word	0x40014400
 8010c8c:	40014800 	.word	0x40014800
 8010c90:	4000e000 	.word	0x4000e000
 8010c94:	4000e400 	.word	0x4000e400

08010c98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010c98:	b480      	push	{r7}
 8010c9a:	b087      	sub	sp, #28
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
 8010ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	6a1b      	ldr	r3, [r3, #32]
 8010ca6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	6a1b      	ldr	r3, [r3, #32]
 8010cac:	f023 0201 	bic.w	r2, r3, #1
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	685b      	ldr	r3, [r3, #4]
 8010cb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	699b      	ldr	r3, [r3, #24]
 8010cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010cc0:	68fa      	ldr	r2, [r7, #12]
 8010cc2:	4b37      	ldr	r3, [pc, #220]	@ (8010da0 <TIM_OC1_SetConfig+0x108>)
 8010cc4:	4013      	ands	r3, r2
 8010cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	f023 0303 	bic.w	r3, r3, #3
 8010cce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010cd0:	683b      	ldr	r3, [r7, #0]
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	68fa      	ldr	r2, [r7, #12]
 8010cd6:	4313      	orrs	r3, r2
 8010cd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010cda:	697b      	ldr	r3, [r7, #20]
 8010cdc:	f023 0302 	bic.w	r3, r3, #2
 8010ce0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010ce2:	683b      	ldr	r3, [r7, #0]
 8010ce4:	689b      	ldr	r3, [r3, #8]
 8010ce6:	697a      	ldr	r2, [r7, #20]
 8010ce8:	4313      	orrs	r3, r2
 8010cea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	4a2d      	ldr	r2, [pc, #180]	@ (8010da4 <TIM_OC1_SetConfig+0x10c>)
 8010cf0:	4293      	cmp	r3, r2
 8010cf2:	d00f      	beq.n	8010d14 <TIM_OC1_SetConfig+0x7c>
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	4a2c      	ldr	r2, [pc, #176]	@ (8010da8 <TIM_OC1_SetConfig+0x110>)
 8010cf8:	4293      	cmp	r3, r2
 8010cfa:	d00b      	beq.n	8010d14 <TIM_OC1_SetConfig+0x7c>
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	4a2b      	ldr	r2, [pc, #172]	@ (8010dac <TIM_OC1_SetConfig+0x114>)
 8010d00:	4293      	cmp	r3, r2
 8010d02:	d007      	beq.n	8010d14 <TIM_OC1_SetConfig+0x7c>
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	4a2a      	ldr	r2, [pc, #168]	@ (8010db0 <TIM_OC1_SetConfig+0x118>)
 8010d08:	4293      	cmp	r3, r2
 8010d0a:	d003      	beq.n	8010d14 <TIM_OC1_SetConfig+0x7c>
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	4a29      	ldr	r2, [pc, #164]	@ (8010db4 <TIM_OC1_SetConfig+0x11c>)
 8010d10:	4293      	cmp	r3, r2
 8010d12:	d10c      	bne.n	8010d2e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010d14:	697b      	ldr	r3, [r7, #20]
 8010d16:	f023 0308 	bic.w	r3, r3, #8
 8010d1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010d1c:	683b      	ldr	r3, [r7, #0]
 8010d1e:	68db      	ldr	r3, [r3, #12]
 8010d20:	697a      	ldr	r2, [r7, #20]
 8010d22:	4313      	orrs	r3, r2
 8010d24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010d26:	697b      	ldr	r3, [r7, #20]
 8010d28:	f023 0304 	bic.w	r3, r3, #4
 8010d2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	4a1c      	ldr	r2, [pc, #112]	@ (8010da4 <TIM_OC1_SetConfig+0x10c>)
 8010d32:	4293      	cmp	r3, r2
 8010d34:	d00f      	beq.n	8010d56 <TIM_OC1_SetConfig+0xbe>
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	4a1b      	ldr	r2, [pc, #108]	@ (8010da8 <TIM_OC1_SetConfig+0x110>)
 8010d3a:	4293      	cmp	r3, r2
 8010d3c:	d00b      	beq.n	8010d56 <TIM_OC1_SetConfig+0xbe>
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	4a1a      	ldr	r2, [pc, #104]	@ (8010dac <TIM_OC1_SetConfig+0x114>)
 8010d42:	4293      	cmp	r3, r2
 8010d44:	d007      	beq.n	8010d56 <TIM_OC1_SetConfig+0xbe>
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	4a19      	ldr	r2, [pc, #100]	@ (8010db0 <TIM_OC1_SetConfig+0x118>)
 8010d4a:	4293      	cmp	r3, r2
 8010d4c:	d003      	beq.n	8010d56 <TIM_OC1_SetConfig+0xbe>
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	4a18      	ldr	r2, [pc, #96]	@ (8010db4 <TIM_OC1_SetConfig+0x11c>)
 8010d52:	4293      	cmp	r3, r2
 8010d54:	d111      	bne.n	8010d7a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010d56:	693b      	ldr	r3, [r7, #16]
 8010d58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010d5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010d5e:	693b      	ldr	r3, [r7, #16]
 8010d60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010d64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010d66:	683b      	ldr	r3, [r7, #0]
 8010d68:	695b      	ldr	r3, [r3, #20]
 8010d6a:	693a      	ldr	r2, [r7, #16]
 8010d6c:	4313      	orrs	r3, r2
 8010d6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010d70:	683b      	ldr	r3, [r7, #0]
 8010d72:	699b      	ldr	r3, [r3, #24]
 8010d74:	693a      	ldr	r2, [r7, #16]
 8010d76:	4313      	orrs	r3, r2
 8010d78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	693a      	ldr	r2, [r7, #16]
 8010d7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	68fa      	ldr	r2, [r7, #12]
 8010d84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010d86:	683b      	ldr	r3, [r7, #0]
 8010d88:	685a      	ldr	r2, [r3, #4]
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	697a      	ldr	r2, [r7, #20]
 8010d92:	621a      	str	r2, [r3, #32]
}
 8010d94:	bf00      	nop
 8010d96:	371c      	adds	r7, #28
 8010d98:	46bd      	mov	sp, r7
 8010d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d9e:	4770      	bx	lr
 8010da0:	fffeff8f 	.word	0xfffeff8f
 8010da4:	40010000 	.word	0x40010000
 8010da8:	40010400 	.word	0x40010400
 8010dac:	40014000 	.word	0x40014000
 8010db0:	40014400 	.word	0x40014400
 8010db4:	40014800 	.word	0x40014800

08010db8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010db8:	b480      	push	{r7}
 8010dba:	b087      	sub	sp, #28
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	6078      	str	r0, [r7, #4]
 8010dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	6a1b      	ldr	r3, [r3, #32]
 8010dc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	6a1b      	ldr	r3, [r3, #32]
 8010dcc:	f023 0210 	bic.w	r2, r3, #16
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	685b      	ldr	r3, [r3, #4]
 8010dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	699b      	ldr	r3, [r3, #24]
 8010dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010de0:	68fa      	ldr	r2, [r7, #12]
 8010de2:	4b34      	ldr	r3, [pc, #208]	@ (8010eb4 <TIM_OC2_SetConfig+0xfc>)
 8010de4:	4013      	ands	r3, r2
 8010de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010dee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010df0:	683b      	ldr	r3, [r7, #0]
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	021b      	lsls	r3, r3, #8
 8010df6:	68fa      	ldr	r2, [r7, #12]
 8010df8:	4313      	orrs	r3, r2
 8010dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010dfc:	697b      	ldr	r3, [r7, #20]
 8010dfe:	f023 0320 	bic.w	r3, r3, #32
 8010e02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010e04:	683b      	ldr	r3, [r7, #0]
 8010e06:	689b      	ldr	r3, [r3, #8]
 8010e08:	011b      	lsls	r3, r3, #4
 8010e0a:	697a      	ldr	r2, [r7, #20]
 8010e0c:	4313      	orrs	r3, r2
 8010e0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	4a29      	ldr	r2, [pc, #164]	@ (8010eb8 <TIM_OC2_SetConfig+0x100>)
 8010e14:	4293      	cmp	r3, r2
 8010e16:	d003      	beq.n	8010e20 <TIM_OC2_SetConfig+0x68>
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	4a28      	ldr	r2, [pc, #160]	@ (8010ebc <TIM_OC2_SetConfig+0x104>)
 8010e1c:	4293      	cmp	r3, r2
 8010e1e:	d10d      	bne.n	8010e3c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010e20:	697b      	ldr	r3, [r7, #20]
 8010e22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010e26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010e28:	683b      	ldr	r3, [r7, #0]
 8010e2a:	68db      	ldr	r3, [r3, #12]
 8010e2c:	011b      	lsls	r3, r3, #4
 8010e2e:	697a      	ldr	r2, [r7, #20]
 8010e30:	4313      	orrs	r3, r2
 8010e32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010e34:	697b      	ldr	r3, [r7, #20]
 8010e36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010e3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	4a1e      	ldr	r2, [pc, #120]	@ (8010eb8 <TIM_OC2_SetConfig+0x100>)
 8010e40:	4293      	cmp	r3, r2
 8010e42:	d00f      	beq.n	8010e64 <TIM_OC2_SetConfig+0xac>
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	4a1d      	ldr	r2, [pc, #116]	@ (8010ebc <TIM_OC2_SetConfig+0x104>)
 8010e48:	4293      	cmp	r3, r2
 8010e4a:	d00b      	beq.n	8010e64 <TIM_OC2_SetConfig+0xac>
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	4a1c      	ldr	r2, [pc, #112]	@ (8010ec0 <TIM_OC2_SetConfig+0x108>)
 8010e50:	4293      	cmp	r3, r2
 8010e52:	d007      	beq.n	8010e64 <TIM_OC2_SetConfig+0xac>
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	4a1b      	ldr	r2, [pc, #108]	@ (8010ec4 <TIM_OC2_SetConfig+0x10c>)
 8010e58:	4293      	cmp	r3, r2
 8010e5a:	d003      	beq.n	8010e64 <TIM_OC2_SetConfig+0xac>
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	4a1a      	ldr	r2, [pc, #104]	@ (8010ec8 <TIM_OC2_SetConfig+0x110>)
 8010e60:	4293      	cmp	r3, r2
 8010e62:	d113      	bne.n	8010e8c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010e64:	693b      	ldr	r3, [r7, #16]
 8010e66:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8010e6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010e6c:	693b      	ldr	r3, [r7, #16]
 8010e6e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010e72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010e74:	683b      	ldr	r3, [r7, #0]
 8010e76:	695b      	ldr	r3, [r3, #20]
 8010e78:	009b      	lsls	r3, r3, #2
 8010e7a:	693a      	ldr	r2, [r7, #16]
 8010e7c:	4313      	orrs	r3, r2
 8010e7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010e80:	683b      	ldr	r3, [r7, #0]
 8010e82:	699b      	ldr	r3, [r3, #24]
 8010e84:	009b      	lsls	r3, r3, #2
 8010e86:	693a      	ldr	r2, [r7, #16]
 8010e88:	4313      	orrs	r3, r2
 8010e8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	693a      	ldr	r2, [r7, #16]
 8010e90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	68fa      	ldr	r2, [r7, #12]
 8010e96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010e98:	683b      	ldr	r3, [r7, #0]
 8010e9a:	685a      	ldr	r2, [r3, #4]
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	697a      	ldr	r2, [r7, #20]
 8010ea4:	621a      	str	r2, [r3, #32]
}
 8010ea6:	bf00      	nop
 8010ea8:	371c      	adds	r7, #28
 8010eaa:	46bd      	mov	sp, r7
 8010eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb0:	4770      	bx	lr
 8010eb2:	bf00      	nop
 8010eb4:	feff8fff 	.word	0xfeff8fff
 8010eb8:	40010000 	.word	0x40010000
 8010ebc:	40010400 	.word	0x40010400
 8010ec0:	40014000 	.word	0x40014000
 8010ec4:	40014400 	.word	0x40014400
 8010ec8:	40014800 	.word	0x40014800

08010ecc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010ecc:	b480      	push	{r7}
 8010ece:	b087      	sub	sp, #28
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	6078      	str	r0, [r7, #4]
 8010ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	6a1b      	ldr	r3, [r3, #32]
 8010eda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	6a1b      	ldr	r3, [r3, #32]
 8010ee0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	685b      	ldr	r3, [r3, #4]
 8010eec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	69db      	ldr	r3, [r3, #28]
 8010ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010ef4:	68fa      	ldr	r2, [r7, #12]
 8010ef6:	4b33      	ldr	r3, [pc, #204]	@ (8010fc4 <TIM_OC3_SetConfig+0xf8>)
 8010ef8:	4013      	ands	r3, r2
 8010efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	f023 0303 	bic.w	r3, r3, #3
 8010f02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010f04:	683b      	ldr	r3, [r7, #0]
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	68fa      	ldr	r2, [r7, #12]
 8010f0a:	4313      	orrs	r3, r2
 8010f0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010f0e:	697b      	ldr	r3, [r7, #20]
 8010f10:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010f14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010f16:	683b      	ldr	r3, [r7, #0]
 8010f18:	689b      	ldr	r3, [r3, #8]
 8010f1a:	021b      	lsls	r3, r3, #8
 8010f1c:	697a      	ldr	r2, [r7, #20]
 8010f1e:	4313      	orrs	r3, r2
 8010f20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	4a28      	ldr	r2, [pc, #160]	@ (8010fc8 <TIM_OC3_SetConfig+0xfc>)
 8010f26:	4293      	cmp	r3, r2
 8010f28:	d003      	beq.n	8010f32 <TIM_OC3_SetConfig+0x66>
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	4a27      	ldr	r2, [pc, #156]	@ (8010fcc <TIM_OC3_SetConfig+0x100>)
 8010f2e:	4293      	cmp	r3, r2
 8010f30:	d10d      	bne.n	8010f4e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010f32:	697b      	ldr	r3, [r7, #20]
 8010f34:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010f38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010f3a:	683b      	ldr	r3, [r7, #0]
 8010f3c:	68db      	ldr	r3, [r3, #12]
 8010f3e:	021b      	lsls	r3, r3, #8
 8010f40:	697a      	ldr	r2, [r7, #20]
 8010f42:	4313      	orrs	r3, r2
 8010f44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010f46:	697b      	ldr	r3, [r7, #20]
 8010f48:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8010f4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	4a1d      	ldr	r2, [pc, #116]	@ (8010fc8 <TIM_OC3_SetConfig+0xfc>)
 8010f52:	4293      	cmp	r3, r2
 8010f54:	d00f      	beq.n	8010f76 <TIM_OC3_SetConfig+0xaa>
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	4a1c      	ldr	r2, [pc, #112]	@ (8010fcc <TIM_OC3_SetConfig+0x100>)
 8010f5a:	4293      	cmp	r3, r2
 8010f5c:	d00b      	beq.n	8010f76 <TIM_OC3_SetConfig+0xaa>
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	4a1b      	ldr	r2, [pc, #108]	@ (8010fd0 <TIM_OC3_SetConfig+0x104>)
 8010f62:	4293      	cmp	r3, r2
 8010f64:	d007      	beq.n	8010f76 <TIM_OC3_SetConfig+0xaa>
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	4a1a      	ldr	r2, [pc, #104]	@ (8010fd4 <TIM_OC3_SetConfig+0x108>)
 8010f6a:	4293      	cmp	r3, r2
 8010f6c:	d003      	beq.n	8010f76 <TIM_OC3_SetConfig+0xaa>
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	4a19      	ldr	r2, [pc, #100]	@ (8010fd8 <TIM_OC3_SetConfig+0x10c>)
 8010f72:	4293      	cmp	r3, r2
 8010f74:	d113      	bne.n	8010f9e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010f76:	693b      	ldr	r3, [r7, #16]
 8010f78:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010f7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010f7e:	693b      	ldr	r3, [r7, #16]
 8010f80:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8010f84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010f86:	683b      	ldr	r3, [r7, #0]
 8010f88:	695b      	ldr	r3, [r3, #20]
 8010f8a:	011b      	lsls	r3, r3, #4
 8010f8c:	693a      	ldr	r2, [r7, #16]
 8010f8e:	4313      	orrs	r3, r2
 8010f90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010f92:	683b      	ldr	r3, [r7, #0]
 8010f94:	699b      	ldr	r3, [r3, #24]
 8010f96:	011b      	lsls	r3, r3, #4
 8010f98:	693a      	ldr	r2, [r7, #16]
 8010f9a:	4313      	orrs	r3, r2
 8010f9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	693a      	ldr	r2, [r7, #16]
 8010fa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	68fa      	ldr	r2, [r7, #12]
 8010fa8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010faa:	683b      	ldr	r3, [r7, #0]
 8010fac:	685a      	ldr	r2, [r3, #4]
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	697a      	ldr	r2, [r7, #20]
 8010fb6:	621a      	str	r2, [r3, #32]
}
 8010fb8:	bf00      	nop
 8010fba:	371c      	adds	r7, #28
 8010fbc:	46bd      	mov	sp, r7
 8010fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc2:	4770      	bx	lr
 8010fc4:	fffeff8f 	.word	0xfffeff8f
 8010fc8:	40010000 	.word	0x40010000
 8010fcc:	40010400 	.word	0x40010400
 8010fd0:	40014000 	.word	0x40014000
 8010fd4:	40014400 	.word	0x40014400
 8010fd8:	40014800 	.word	0x40014800

08010fdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010fdc:	b480      	push	{r7}
 8010fde:	b087      	sub	sp, #28
 8010fe0:	af00      	add	r7, sp, #0
 8010fe2:	6078      	str	r0, [r7, #4]
 8010fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	6a1b      	ldr	r3, [r3, #32]
 8010fea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	6a1b      	ldr	r3, [r3, #32]
 8010ff0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	685b      	ldr	r3, [r3, #4]
 8010ffc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	69db      	ldr	r3, [r3, #28]
 8011002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011004:	68fa      	ldr	r2, [r7, #12]
 8011006:	4b24      	ldr	r3, [pc, #144]	@ (8011098 <TIM_OC4_SetConfig+0xbc>)
 8011008:	4013      	ands	r3, r2
 801100a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8011012:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011014:	683b      	ldr	r3, [r7, #0]
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	021b      	lsls	r3, r3, #8
 801101a:	68fa      	ldr	r2, [r7, #12]
 801101c:	4313      	orrs	r3, r2
 801101e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011020:	693b      	ldr	r3, [r7, #16]
 8011022:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8011026:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011028:	683b      	ldr	r3, [r7, #0]
 801102a:	689b      	ldr	r3, [r3, #8]
 801102c:	031b      	lsls	r3, r3, #12
 801102e:	693a      	ldr	r2, [r7, #16]
 8011030:	4313      	orrs	r3, r2
 8011032:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	4a19      	ldr	r2, [pc, #100]	@ (801109c <TIM_OC4_SetConfig+0xc0>)
 8011038:	4293      	cmp	r3, r2
 801103a:	d00f      	beq.n	801105c <TIM_OC4_SetConfig+0x80>
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	4a18      	ldr	r2, [pc, #96]	@ (80110a0 <TIM_OC4_SetConfig+0xc4>)
 8011040:	4293      	cmp	r3, r2
 8011042:	d00b      	beq.n	801105c <TIM_OC4_SetConfig+0x80>
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	4a17      	ldr	r2, [pc, #92]	@ (80110a4 <TIM_OC4_SetConfig+0xc8>)
 8011048:	4293      	cmp	r3, r2
 801104a:	d007      	beq.n	801105c <TIM_OC4_SetConfig+0x80>
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	4a16      	ldr	r2, [pc, #88]	@ (80110a8 <TIM_OC4_SetConfig+0xcc>)
 8011050:	4293      	cmp	r3, r2
 8011052:	d003      	beq.n	801105c <TIM_OC4_SetConfig+0x80>
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	4a15      	ldr	r2, [pc, #84]	@ (80110ac <TIM_OC4_SetConfig+0xd0>)
 8011058:	4293      	cmp	r3, r2
 801105a:	d109      	bne.n	8011070 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801105c:	697b      	ldr	r3, [r7, #20]
 801105e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011062:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011064:	683b      	ldr	r3, [r7, #0]
 8011066:	695b      	ldr	r3, [r3, #20]
 8011068:	019b      	lsls	r3, r3, #6
 801106a:	697a      	ldr	r2, [r7, #20]
 801106c:	4313      	orrs	r3, r2
 801106e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	697a      	ldr	r2, [r7, #20]
 8011074:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	68fa      	ldr	r2, [r7, #12]
 801107a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801107c:	683b      	ldr	r3, [r7, #0]
 801107e:	685a      	ldr	r2, [r3, #4]
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	693a      	ldr	r2, [r7, #16]
 8011088:	621a      	str	r2, [r3, #32]
}
 801108a:	bf00      	nop
 801108c:	371c      	adds	r7, #28
 801108e:	46bd      	mov	sp, r7
 8011090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011094:	4770      	bx	lr
 8011096:	bf00      	nop
 8011098:	feff8fff 	.word	0xfeff8fff
 801109c:	40010000 	.word	0x40010000
 80110a0:	40010400 	.word	0x40010400
 80110a4:	40014000 	.word	0x40014000
 80110a8:	40014400 	.word	0x40014400
 80110ac:	40014800 	.word	0x40014800

080110b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80110b0:	b480      	push	{r7}
 80110b2:	b087      	sub	sp, #28
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	6078      	str	r0, [r7, #4]
 80110b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	6a1b      	ldr	r3, [r3, #32]
 80110be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	6a1b      	ldr	r3, [r3, #32]
 80110c4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	685b      	ldr	r3, [r3, #4]
 80110d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80110d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80110d8:	68fa      	ldr	r2, [r7, #12]
 80110da:	4b21      	ldr	r3, [pc, #132]	@ (8011160 <TIM_OC5_SetConfig+0xb0>)
 80110dc:	4013      	ands	r3, r2
 80110de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80110e0:	683b      	ldr	r3, [r7, #0]
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	68fa      	ldr	r2, [r7, #12]
 80110e6:	4313      	orrs	r3, r2
 80110e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80110ea:	693b      	ldr	r3, [r7, #16]
 80110ec:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80110f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80110f2:	683b      	ldr	r3, [r7, #0]
 80110f4:	689b      	ldr	r3, [r3, #8]
 80110f6:	041b      	lsls	r3, r3, #16
 80110f8:	693a      	ldr	r2, [r7, #16]
 80110fa:	4313      	orrs	r3, r2
 80110fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	4a18      	ldr	r2, [pc, #96]	@ (8011164 <TIM_OC5_SetConfig+0xb4>)
 8011102:	4293      	cmp	r3, r2
 8011104:	d00f      	beq.n	8011126 <TIM_OC5_SetConfig+0x76>
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	4a17      	ldr	r2, [pc, #92]	@ (8011168 <TIM_OC5_SetConfig+0xb8>)
 801110a:	4293      	cmp	r3, r2
 801110c:	d00b      	beq.n	8011126 <TIM_OC5_SetConfig+0x76>
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	4a16      	ldr	r2, [pc, #88]	@ (801116c <TIM_OC5_SetConfig+0xbc>)
 8011112:	4293      	cmp	r3, r2
 8011114:	d007      	beq.n	8011126 <TIM_OC5_SetConfig+0x76>
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	4a15      	ldr	r2, [pc, #84]	@ (8011170 <TIM_OC5_SetConfig+0xc0>)
 801111a:	4293      	cmp	r3, r2
 801111c:	d003      	beq.n	8011126 <TIM_OC5_SetConfig+0x76>
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	4a14      	ldr	r2, [pc, #80]	@ (8011174 <TIM_OC5_SetConfig+0xc4>)
 8011122:	4293      	cmp	r3, r2
 8011124:	d109      	bne.n	801113a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8011126:	697b      	ldr	r3, [r7, #20]
 8011128:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801112c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801112e:	683b      	ldr	r3, [r7, #0]
 8011130:	695b      	ldr	r3, [r3, #20]
 8011132:	021b      	lsls	r3, r3, #8
 8011134:	697a      	ldr	r2, [r7, #20]
 8011136:	4313      	orrs	r3, r2
 8011138:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	697a      	ldr	r2, [r7, #20]
 801113e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	68fa      	ldr	r2, [r7, #12]
 8011144:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8011146:	683b      	ldr	r3, [r7, #0]
 8011148:	685a      	ldr	r2, [r3, #4]
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	693a      	ldr	r2, [r7, #16]
 8011152:	621a      	str	r2, [r3, #32]
}
 8011154:	bf00      	nop
 8011156:	371c      	adds	r7, #28
 8011158:	46bd      	mov	sp, r7
 801115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801115e:	4770      	bx	lr
 8011160:	fffeff8f 	.word	0xfffeff8f
 8011164:	40010000 	.word	0x40010000
 8011168:	40010400 	.word	0x40010400
 801116c:	40014000 	.word	0x40014000
 8011170:	40014400 	.word	0x40014400
 8011174:	40014800 	.word	0x40014800

08011178 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011178:	b480      	push	{r7}
 801117a:	b087      	sub	sp, #28
 801117c:	af00      	add	r7, sp, #0
 801117e:	6078      	str	r0, [r7, #4]
 8011180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	6a1b      	ldr	r3, [r3, #32]
 8011186:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	6a1b      	ldr	r3, [r3, #32]
 801118c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	685b      	ldr	r3, [r3, #4]
 8011198:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801119e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80111a0:	68fa      	ldr	r2, [r7, #12]
 80111a2:	4b22      	ldr	r3, [pc, #136]	@ (801122c <TIM_OC6_SetConfig+0xb4>)
 80111a4:	4013      	ands	r3, r2
 80111a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80111a8:	683b      	ldr	r3, [r7, #0]
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	021b      	lsls	r3, r3, #8
 80111ae:	68fa      	ldr	r2, [r7, #12]
 80111b0:	4313      	orrs	r3, r2
 80111b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80111b4:	693b      	ldr	r3, [r7, #16]
 80111b6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80111ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80111bc:	683b      	ldr	r3, [r7, #0]
 80111be:	689b      	ldr	r3, [r3, #8]
 80111c0:	051b      	lsls	r3, r3, #20
 80111c2:	693a      	ldr	r2, [r7, #16]
 80111c4:	4313      	orrs	r3, r2
 80111c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	4a19      	ldr	r2, [pc, #100]	@ (8011230 <TIM_OC6_SetConfig+0xb8>)
 80111cc:	4293      	cmp	r3, r2
 80111ce:	d00f      	beq.n	80111f0 <TIM_OC6_SetConfig+0x78>
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	4a18      	ldr	r2, [pc, #96]	@ (8011234 <TIM_OC6_SetConfig+0xbc>)
 80111d4:	4293      	cmp	r3, r2
 80111d6:	d00b      	beq.n	80111f0 <TIM_OC6_SetConfig+0x78>
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	4a17      	ldr	r2, [pc, #92]	@ (8011238 <TIM_OC6_SetConfig+0xc0>)
 80111dc:	4293      	cmp	r3, r2
 80111de:	d007      	beq.n	80111f0 <TIM_OC6_SetConfig+0x78>
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	4a16      	ldr	r2, [pc, #88]	@ (801123c <TIM_OC6_SetConfig+0xc4>)
 80111e4:	4293      	cmp	r3, r2
 80111e6:	d003      	beq.n	80111f0 <TIM_OC6_SetConfig+0x78>
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	4a15      	ldr	r2, [pc, #84]	@ (8011240 <TIM_OC6_SetConfig+0xc8>)
 80111ec:	4293      	cmp	r3, r2
 80111ee:	d109      	bne.n	8011204 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80111f0:	697b      	ldr	r3, [r7, #20]
 80111f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80111f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80111f8:	683b      	ldr	r3, [r7, #0]
 80111fa:	695b      	ldr	r3, [r3, #20]
 80111fc:	029b      	lsls	r3, r3, #10
 80111fe:	697a      	ldr	r2, [r7, #20]
 8011200:	4313      	orrs	r3, r2
 8011202:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	697a      	ldr	r2, [r7, #20]
 8011208:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	68fa      	ldr	r2, [r7, #12]
 801120e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8011210:	683b      	ldr	r3, [r7, #0]
 8011212:	685a      	ldr	r2, [r3, #4]
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	693a      	ldr	r2, [r7, #16]
 801121c:	621a      	str	r2, [r3, #32]
}
 801121e:	bf00      	nop
 8011220:	371c      	adds	r7, #28
 8011222:	46bd      	mov	sp, r7
 8011224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011228:	4770      	bx	lr
 801122a:	bf00      	nop
 801122c:	feff8fff 	.word	0xfeff8fff
 8011230:	40010000 	.word	0x40010000
 8011234:	40010400 	.word	0x40010400
 8011238:	40014000 	.word	0x40014000
 801123c:	40014400 	.word	0x40014400
 8011240:	40014800 	.word	0x40014800

08011244 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011244:	b480      	push	{r7}
 8011246:	b087      	sub	sp, #28
 8011248:	af00      	add	r7, sp, #0
 801124a:	60f8      	str	r0, [r7, #12]
 801124c:	60b9      	str	r1, [r7, #8]
 801124e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	6a1b      	ldr	r3, [r3, #32]
 8011254:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	6a1b      	ldr	r3, [r3, #32]
 801125a:	f023 0201 	bic.w	r2, r3, #1
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	699b      	ldr	r3, [r3, #24]
 8011266:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011268:	693b      	ldr	r3, [r7, #16]
 801126a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801126e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	011b      	lsls	r3, r3, #4
 8011274:	693a      	ldr	r2, [r7, #16]
 8011276:	4313      	orrs	r3, r2
 8011278:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801127a:	697b      	ldr	r3, [r7, #20]
 801127c:	f023 030a 	bic.w	r3, r3, #10
 8011280:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8011282:	697a      	ldr	r2, [r7, #20]
 8011284:	68bb      	ldr	r3, [r7, #8]
 8011286:	4313      	orrs	r3, r2
 8011288:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	693a      	ldr	r2, [r7, #16]
 801128e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	697a      	ldr	r2, [r7, #20]
 8011294:	621a      	str	r2, [r3, #32]
}
 8011296:	bf00      	nop
 8011298:	371c      	adds	r7, #28
 801129a:	46bd      	mov	sp, r7
 801129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a0:	4770      	bx	lr

080112a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80112a2:	b480      	push	{r7}
 80112a4:	b087      	sub	sp, #28
 80112a6:	af00      	add	r7, sp, #0
 80112a8:	60f8      	str	r0, [r7, #12]
 80112aa:	60b9      	str	r1, [r7, #8]
 80112ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	6a1b      	ldr	r3, [r3, #32]
 80112b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	6a1b      	ldr	r3, [r3, #32]
 80112b8:	f023 0210 	bic.w	r2, r3, #16
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	699b      	ldr	r3, [r3, #24]
 80112c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80112c6:	693b      	ldr	r3, [r7, #16]
 80112c8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80112cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	031b      	lsls	r3, r3, #12
 80112d2:	693a      	ldr	r2, [r7, #16]
 80112d4:	4313      	orrs	r3, r2
 80112d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80112d8:	697b      	ldr	r3, [r7, #20]
 80112da:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80112de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80112e0:	68bb      	ldr	r3, [r7, #8]
 80112e2:	011b      	lsls	r3, r3, #4
 80112e4:	697a      	ldr	r2, [r7, #20]
 80112e6:	4313      	orrs	r3, r2
 80112e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	693a      	ldr	r2, [r7, #16]
 80112ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	697a      	ldr	r2, [r7, #20]
 80112f4:	621a      	str	r2, [r3, #32]
}
 80112f6:	bf00      	nop
 80112f8:	371c      	adds	r7, #28
 80112fa:	46bd      	mov	sp, r7
 80112fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011300:	4770      	bx	lr
	...

08011304 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8011304:	b480      	push	{r7}
 8011306:	b085      	sub	sp, #20
 8011308:	af00      	add	r7, sp, #0
 801130a:	6078      	str	r0, [r7, #4]
 801130c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	689b      	ldr	r3, [r3, #8]
 8011312:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8011314:	68fa      	ldr	r2, [r7, #12]
 8011316:	4b09      	ldr	r3, [pc, #36]	@ (801133c <TIM_ITRx_SetConfig+0x38>)
 8011318:	4013      	ands	r3, r2
 801131a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801131c:	683a      	ldr	r2, [r7, #0]
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	4313      	orrs	r3, r2
 8011322:	f043 0307 	orr.w	r3, r3, #7
 8011326:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	68fa      	ldr	r2, [r7, #12]
 801132c:	609a      	str	r2, [r3, #8]
}
 801132e:	bf00      	nop
 8011330:	3714      	adds	r7, #20
 8011332:	46bd      	mov	sp, r7
 8011334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011338:	4770      	bx	lr
 801133a:	bf00      	nop
 801133c:	ffcfff8f 	.word	0xffcfff8f

08011340 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011340:	b480      	push	{r7}
 8011342:	b087      	sub	sp, #28
 8011344:	af00      	add	r7, sp, #0
 8011346:	60f8      	str	r0, [r7, #12]
 8011348:	60b9      	str	r1, [r7, #8]
 801134a:	607a      	str	r2, [r7, #4]
 801134c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	689b      	ldr	r3, [r3, #8]
 8011352:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011354:	697b      	ldr	r3, [r7, #20]
 8011356:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801135a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801135c:	683b      	ldr	r3, [r7, #0]
 801135e:	021a      	lsls	r2, r3, #8
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	431a      	orrs	r2, r3
 8011364:	68bb      	ldr	r3, [r7, #8]
 8011366:	4313      	orrs	r3, r2
 8011368:	697a      	ldr	r2, [r7, #20]
 801136a:	4313      	orrs	r3, r2
 801136c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	697a      	ldr	r2, [r7, #20]
 8011372:	609a      	str	r2, [r3, #8]
}
 8011374:	bf00      	nop
 8011376:	371c      	adds	r7, #28
 8011378:	46bd      	mov	sp, r7
 801137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801137e:	4770      	bx	lr

08011380 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011380:	b480      	push	{r7}
 8011382:	b085      	sub	sp, #20
 8011384:	af00      	add	r7, sp, #0
 8011386:	6078      	str	r0, [r7, #4]
 8011388:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011390:	2b01      	cmp	r3, #1
 8011392:	d101      	bne.n	8011398 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011394:	2302      	movs	r3, #2
 8011396:	e077      	b.n	8011488 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	2201      	movs	r2, #1
 801139c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	2202      	movs	r2, #2
 80113a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	685b      	ldr	r3, [r3, #4]
 80113ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	689b      	ldr	r3, [r3, #8]
 80113b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	4a35      	ldr	r2, [pc, #212]	@ (8011494 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80113be:	4293      	cmp	r3, r2
 80113c0:	d004      	beq.n	80113cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	4a34      	ldr	r2, [pc, #208]	@ (8011498 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80113c8:	4293      	cmp	r3, r2
 80113ca:	d108      	bne.n	80113de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80113d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80113d4:	683b      	ldr	r3, [r7, #0]
 80113d6:	685b      	ldr	r3, [r3, #4]
 80113d8:	68fa      	ldr	r2, [r7, #12]
 80113da:	4313      	orrs	r3, r2
 80113dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80113e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80113e6:	683b      	ldr	r3, [r7, #0]
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	68fa      	ldr	r2, [r7, #12]
 80113ec:	4313      	orrs	r3, r2
 80113ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	68fa      	ldr	r2, [r7, #12]
 80113f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	4a25      	ldr	r2, [pc, #148]	@ (8011494 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80113fe:	4293      	cmp	r3, r2
 8011400:	d02c      	beq.n	801145c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801140a:	d027      	beq.n	801145c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	4a22      	ldr	r2, [pc, #136]	@ (801149c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8011412:	4293      	cmp	r3, r2
 8011414:	d022      	beq.n	801145c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	4a21      	ldr	r2, [pc, #132]	@ (80114a0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 801141c:	4293      	cmp	r3, r2
 801141e:	d01d      	beq.n	801145c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	4a1f      	ldr	r2, [pc, #124]	@ (80114a4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8011426:	4293      	cmp	r3, r2
 8011428:	d018      	beq.n	801145c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	4a1a      	ldr	r2, [pc, #104]	@ (8011498 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8011430:	4293      	cmp	r3, r2
 8011432:	d013      	beq.n	801145c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	4a1b      	ldr	r2, [pc, #108]	@ (80114a8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 801143a:	4293      	cmp	r3, r2
 801143c:	d00e      	beq.n	801145c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	4a1a      	ldr	r2, [pc, #104]	@ (80114ac <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8011444:	4293      	cmp	r3, r2
 8011446:	d009      	beq.n	801145c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	4a18      	ldr	r2, [pc, #96]	@ (80114b0 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 801144e:	4293      	cmp	r3, r2
 8011450:	d004      	beq.n	801145c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	4a17      	ldr	r2, [pc, #92]	@ (80114b4 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8011458:	4293      	cmp	r3, r2
 801145a:	d10c      	bne.n	8011476 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801145c:	68bb      	ldr	r3, [r7, #8]
 801145e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011462:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011464:	683b      	ldr	r3, [r7, #0]
 8011466:	689b      	ldr	r3, [r3, #8]
 8011468:	68ba      	ldr	r2, [r7, #8]
 801146a:	4313      	orrs	r3, r2
 801146c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	68ba      	ldr	r2, [r7, #8]
 8011474:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	2201      	movs	r2, #1
 801147a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	2200      	movs	r2, #0
 8011482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8011486:	2300      	movs	r3, #0
}
 8011488:	4618      	mov	r0, r3
 801148a:	3714      	adds	r7, #20
 801148c:	46bd      	mov	sp, r7
 801148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011492:	4770      	bx	lr
 8011494:	40010000 	.word	0x40010000
 8011498:	40010400 	.word	0x40010400
 801149c:	40000400 	.word	0x40000400
 80114a0:	40000800 	.word	0x40000800
 80114a4:	40000c00 	.word	0x40000c00
 80114a8:	40001800 	.word	0x40001800
 80114ac:	40014000 	.word	0x40014000
 80114b0:	4000e000 	.word	0x4000e000
 80114b4:	4000e400 	.word	0x4000e400

080114b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80114b8:	b480      	push	{r7}
 80114ba:	b085      	sub	sp, #20
 80114bc:	af00      	add	r7, sp, #0
 80114be:	6078      	str	r0, [r7, #4]
 80114c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80114c2:	2300      	movs	r3, #0
 80114c4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80114cc:	2b01      	cmp	r3, #1
 80114ce:	d101      	bne.n	80114d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80114d0:	2302      	movs	r3, #2
 80114d2:	e073      	b.n	80115bc <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	2201      	movs	r2, #1
 80114d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80114e2:	683b      	ldr	r3, [r7, #0]
 80114e4:	68db      	ldr	r3, [r3, #12]
 80114e6:	4313      	orrs	r3, r2
 80114e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80114f0:	683b      	ldr	r3, [r7, #0]
 80114f2:	689b      	ldr	r3, [r3, #8]
 80114f4:	4313      	orrs	r3, r2
 80114f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80114fe:	683b      	ldr	r3, [r7, #0]
 8011500:	685b      	ldr	r3, [r3, #4]
 8011502:	4313      	orrs	r3, r2
 8011504:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 801150c:	683b      	ldr	r3, [r7, #0]
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	4313      	orrs	r3, r2
 8011512:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801151a:	683b      	ldr	r3, [r7, #0]
 801151c:	691b      	ldr	r3, [r3, #16]
 801151e:	4313      	orrs	r3, r2
 8011520:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8011528:	683b      	ldr	r3, [r7, #0]
 801152a:	695b      	ldr	r3, [r3, #20]
 801152c:	4313      	orrs	r3, r2
 801152e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8011536:	683b      	ldr	r3, [r7, #0]
 8011538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801153a:	4313      	orrs	r3, r2
 801153c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8011544:	683b      	ldr	r3, [r7, #0]
 8011546:	699b      	ldr	r3, [r3, #24]
 8011548:	041b      	lsls	r3, r3, #16
 801154a:	4313      	orrs	r3, r2
 801154c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8011554:	683b      	ldr	r3, [r7, #0]
 8011556:	69db      	ldr	r3, [r3, #28]
 8011558:	4313      	orrs	r3, r2
 801155a:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	4a19      	ldr	r2, [pc, #100]	@ (80115c8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8011562:	4293      	cmp	r3, r2
 8011564:	d004      	beq.n	8011570 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	4a18      	ldr	r2, [pc, #96]	@ (80115cc <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 801156c:	4293      	cmp	r3, r2
 801156e:	d11c      	bne.n	80115aa <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8011576:	683b      	ldr	r3, [r7, #0]
 8011578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801157a:	051b      	lsls	r3, r3, #20
 801157c:	4313      	orrs	r3, r2
 801157e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8011586:	683b      	ldr	r3, [r7, #0]
 8011588:	6a1b      	ldr	r3, [r3, #32]
 801158a:	4313      	orrs	r3, r2
 801158c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8011594:	683b      	ldr	r3, [r7, #0]
 8011596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011598:	4313      	orrs	r3, r2
 801159a:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80115a2:	683b      	ldr	r3, [r7, #0]
 80115a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115a6:	4313      	orrs	r3, r2
 80115a8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	68fa      	ldr	r2, [r7, #12]
 80115b0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	2200      	movs	r2, #0
 80115b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80115ba:	2300      	movs	r3, #0
}
 80115bc:	4618      	mov	r0, r3
 80115be:	3714      	adds	r7, #20
 80115c0:	46bd      	mov	sp, r7
 80115c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c6:	4770      	bx	lr
 80115c8:	40010000 	.word	0x40010000
 80115cc:	40010400 	.word	0x40010400

080115d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80115d0:	b480      	push	{r7}
 80115d2:	b083      	sub	sp, #12
 80115d4:	af00      	add	r7, sp, #0
 80115d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80115d8:	bf00      	nop
 80115da:	370c      	adds	r7, #12
 80115dc:	46bd      	mov	sp, r7
 80115de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e2:	4770      	bx	lr

080115e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80115e4:	b480      	push	{r7}
 80115e6:	b083      	sub	sp, #12
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80115ec:	bf00      	nop
 80115ee:	370c      	adds	r7, #12
 80115f0:	46bd      	mov	sp, r7
 80115f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f6:	4770      	bx	lr

080115f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80115f8:	b480      	push	{r7}
 80115fa:	b083      	sub	sp, #12
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8011600:	bf00      	nop
 8011602:	370c      	adds	r7, #12
 8011604:	46bd      	mov	sp, r7
 8011606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801160a:	4770      	bx	lr

0801160c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801160c:	b580      	push	{r7, lr}
 801160e:	b082      	sub	sp, #8
 8011610:	af00      	add	r7, sp, #0
 8011612:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	2b00      	cmp	r3, #0
 8011618:	d101      	bne.n	801161e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801161a:	2301      	movs	r3, #1
 801161c:	e042      	b.n	80116a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011624:	2b00      	cmp	r3, #0
 8011626:	d106      	bne.n	8011636 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	2200      	movs	r2, #0
 801162c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011630:	6878      	ldr	r0, [r7, #4]
 8011632:	f7f2 fab7 	bl	8003ba4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	2224      	movs	r2, #36	@ 0x24
 801163a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	681a      	ldr	r2, [r3, #0]
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	f022 0201 	bic.w	r2, r2, #1
 801164c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011652:	2b00      	cmp	r3, #0
 8011654:	d002      	beq.n	801165c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8011656:	6878      	ldr	r0, [r7, #4]
 8011658:	f000 ff22 	bl	80124a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801165c:	6878      	ldr	r0, [r7, #4]
 801165e:	f000 f8b3 	bl	80117c8 <UART_SetConfig>
 8011662:	4603      	mov	r3, r0
 8011664:	2b01      	cmp	r3, #1
 8011666:	d101      	bne.n	801166c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8011668:	2301      	movs	r3, #1
 801166a:	e01b      	b.n	80116a4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	685a      	ldr	r2, [r3, #4]
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801167a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	689a      	ldr	r2, [r3, #8]
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801168a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	681a      	ldr	r2, [r3, #0]
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	f042 0201 	orr.w	r2, r2, #1
 801169a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801169c:	6878      	ldr	r0, [r7, #4]
 801169e:	f000 ffa1 	bl	80125e4 <UART_CheckIdleState>
 80116a2:	4603      	mov	r3, r0
}
 80116a4:	4618      	mov	r0, r3
 80116a6:	3708      	adds	r7, #8
 80116a8:	46bd      	mov	sp, r7
 80116aa:	bd80      	pop	{r7, pc}

080116ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80116ac:	b580      	push	{r7, lr}
 80116ae:	b08a      	sub	sp, #40	@ 0x28
 80116b0:	af02      	add	r7, sp, #8
 80116b2:	60f8      	str	r0, [r7, #12]
 80116b4:	60b9      	str	r1, [r7, #8]
 80116b6:	603b      	str	r3, [r7, #0]
 80116b8:	4613      	mov	r3, r2
 80116ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80116c2:	2b20      	cmp	r3, #32
 80116c4:	d17b      	bne.n	80117be <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80116c6:	68bb      	ldr	r3, [r7, #8]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d002      	beq.n	80116d2 <HAL_UART_Transmit+0x26>
 80116cc:	88fb      	ldrh	r3, [r7, #6]
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d101      	bne.n	80116d6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80116d2:	2301      	movs	r3, #1
 80116d4:	e074      	b.n	80117c0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	2200      	movs	r2, #0
 80116da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	2221      	movs	r2, #33	@ 0x21
 80116e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80116e6:	f7f2 fd7d 	bl	80041e4 <HAL_GetTick>
 80116ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	88fa      	ldrh	r2, [r7, #6]
 80116f0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	88fa      	ldrh	r2, [r7, #6]
 80116f8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	689b      	ldr	r3, [r3, #8]
 8011700:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011704:	d108      	bne.n	8011718 <HAL_UART_Transmit+0x6c>
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	691b      	ldr	r3, [r3, #16]
 801170a:	2b00      	cmp	r3, #0
 801170c:	d104      	bne.n	8011718 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801170e:	2300      	movs	r3, #0
 8011710:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8011712:	68bb      	ldr	r3, [r7, #8]
 8011714:	61bb      	str	r3, [r7, #24]
 8011716:	e003      	b.n	8011720 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8011718:	68bb      	ldr	r3, [r7, #8]
 801171a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801171c:	2300      	movs	r3, #0
 801171e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8011720:	e030      	b.n	8011784 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011722:	683b      	ldr	r3, [r7, #0]
 8011724:	9300      	str	r3, [sp, #0]
 8011726:	697b      	ldr	r3, [r7, #20]
 8011728:	2200      	movs	r2, #0
 801172a:	2180      	movs	r1, #128	@ 0x80
 801172c:	68f8      	ldr	r0, [r7, #12]
 801172e:	f001 f803 	bl	8012738 <UART_WaitOnFlagUntilTimeout>
 8011732:	4603      	mov	r3, r0
 8011734:	2b00      	cmp	r3, #0
 8011736:	d005      	beq.n	8011744 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	2220      	movs	r2, #32
 801173c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8011740:	2303      	movs	r3, #3
 8011742:	e03d      	b.n	80117c0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8011744:	69fb      	ldr	r3, [r7, #28]
 8011746:	2b00      	cmp	r3, #0
 8011748:	d10b      	bne.n	8011762 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801174a:	69bb      	ldr	r3, [r7, #24]
 801174c:	881b      	ldrh	r3, [r3, #0]
 801174e:	461a      	mov	r2, r3
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011758:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801175a:	69bb      	ldr	r3, [r7, #24]
 801175c:	3302      	adds	r3, #2
 801175e:	61bb      	str	r3, [r7, #24]
 8011760:	e007      	b.n	8011772 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8011762:	69fb      	ldr	r3, [r7, #28]
 8011764:	781a      	ldrb	r2, [r3, #0]
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801176c:	69fb      	ldr	r3, [r7, #28]
 801176e:	3301      	adds	r3, #1
 8011770:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8011778:	b29b      	uxth	r3, r3
 801177a:	3b01      	subs	r3, #1
 801177c:	b29a      	uxth	r2, r3
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801178a:	b29b      	uxth	r3, r3
 801178c:	2b00      	cmp	r3, #0
 801178e:	d1c8      	bne.n	8011722 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8011790:	683b      	ldr	r3, [r7, #0]
 8011792:	9300      	str	r3, [sp, #0]
 8011794:	697b      	ldr	r3, [r7, #20]
 8011796:	2200      	movs	r2, #0
 8011798:	2140      	movs	r1, #64	@ 0x40
 801179a:	68f8      	ldr	r0, [r7, #12]
 801179c:	f000 ffcc 	bl	8012738 <UART_WaitOnFlagUntilTimeout>
 80117a0:	4603      	mov	r3, r0
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d005      	beq.n	80117b2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	2220      	movs	r2, #32
 80117aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80117ae:	2303      	movs	r3, #3
 80117b0:	e006      	b.n	80117c0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	2220      	movs	r2, #32
 80117b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80117ba:	2300      	movs	r3, #0
 80117bc:	e000      	b.n	80117c0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80117be:	2302      	movs	r3, #2
  }
}
 80117c0:	4618      	mov	r0, r3
 80117c2:	3720      	adds	r7, #32
 80117c4:	46bd      	mov	sp, r7
 80117c6:	bd80      	pop	{r7, pc}

080117c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80117c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80117cc:	b092      	sub	sp, #72	@ 0x48
 80117ce:	af00      	add	r7, sp, #0
 80117d0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80117d2:	2300      	movs	r3, #0
 80117d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80117d8:	697b      	ldr	r3, [r7, #20]
 80117da:	689a      	ldr	r2, [r3, #8]
 80117dc:	697b      	ldr	r3, [r7, #20]
 80117de:	691b      	ldr	r3, [r3, #16]
 80117e0:	431a      	orrs	r2, r3
 80117e2:	697b      	ldr	r3, [r7, #20]
 80117e4:	695b      	ldr	r3, [r3, #20]
 80117e6:	431a      	orrs	r2, r3
 80117e8:	697b      	ldr	r3, [r7, #20]
 80117ea:	69db      	ldr	r3, [r3, #28]
 80117ec:	4313      	orrs	r3, r2
 80117ee:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80117f0:	697b      	ldr	r3, [r7, #20]
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	681a      	ldr	r2, [r3, #0]
 80117f6:	4bbe      	ldr	r3, [pc, #760]	@ (8011af0 <UART_SetConfig+0x328>)
 80117f8:	4013      	ands	r3, r2
 80117fa:	697a      	ldr	r2, [r7, #20]
 80117fc:	6812      	ldr	r2, [r2, #0]
 80117fe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011800:	430b      	orrs	r3, r1
 8011802:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011804:	697b      	ldr	r3, [r7, #20]
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	685b      	ldr	r3, [r3, #4]
 801180a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801180e:	697b      	ldr	r3, [r7, #20]
 8011810:	68da      	ldr	r2, [r3, #12]
 8011812:	697b      	ldr	r3, [r7, #20]
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	430a      	orrs	r2, r1
 8011818:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801181a:	697b      	ldr	r3, [r7, #20]
 801181c:	699b      	ldr	r3, [r3, #24]
 801181e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011820:	697b      	ldr	r3, [r7, #20]
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	4ab3      	ldr	r2, [pc, #716]	@ (8011af4 <UART_SetConfig+0x32c>)
 8011826:	4293      	cmp	r3, r2
 8011828:	d004      	beq.n	8011834 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801182a:	697b      	ldr	r3, [r7, #20]
 801182c:	6a1b      	ldr	r3, [r3, #32]
 801182e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011830:	4313      	orrs	r3, r2
 8011832:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011834:	697b      	ldr	r3, [r7, #20]
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	689a      	ldr	r2, [r3, #8]
 801183a:	4baf      	ldr	r3, [pc, #700]	@ (8011af8 <UART_SetConfig+0x330>)
 801183c:	4013      	ands	r3, r2
 801183e:	697a      	ldr	r2, [r7, #20]
 8011840:	6812      	ldr	r2, [r2, #0]
 8011842:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011844:	430b      	orrs	r3, r1
 8011846:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011848:	697b      	ldr	r3, [r7, #20]
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801184e:	f023 010f 	bic.w	r1, r3, #15
 8011852:	697b      	ldr	r3, [r7, #20]
 8011854:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011856:	697b      	ldr	r3, [r7, #20]
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	430a      	orrs	r2, r1
 801185c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801185e:	697b      	ldr	r3, [r7, #20]
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	4aa6      	ldr	r2, [pc, #664]	@ (8011afc <UART_SetConfig+0x334>)
 8011864:	4293      	cmp	r3, r2
 8011866:	d177      	bne.n	8011958 <UART_SetConfig+0x190>
 8011868:	4ba5      	ldr	r3, [pc, #660]	@ (8011b00 <UART_SetConfig+0x338>)
 801186a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801186c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011870:	2b28      	cmp	r3, #40	@ 0x28
 8011872:	d86d      	bhi.n	8011950 <UART_SetConfig+0x188>
 8011874:	a201      	add	r2, pc, #4	@ (adr r2, 801187c <UART_SetConfig+0xb4>)
 8011876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801187a:	bf00      	nop
 801187c:	08011921 	.word	0x08011921
 8011880:	08011951 	.word	0x08011951
 8011884:	08011951 	.word	0x08011951
 8011888:	08011951 	.word	0x08011951
 801188c:	08011951 	.word	0x08011951
 8011890:	08011951 	.word	0x08011951
 8011894:	08011951 	.word	0x08011951
 8011898:	08011951 	.word	0x08011951
 801189c:	08011929 	.word	0x08011929
 80118a0:	08011951 	.word	0x08011951
 80118a4:	08011951 	.word	0x08011951
 80118a8:	08011951 	.word	0x08011951
 80118ac:	08011951 	.word	0x08011951
 80118b0:	08011951 	.word	0x08011951
 80118b4:	08011951 	.word	0x08011951
 80118b8:	08011951 	.word	0x08011951
 80118bc:	08011931 	.word	0x08011931
 80118c0:	08011951 	.word	0x08011951
 80118c4:	08011951 	.word	0x08011951
 80118c8:	08011951 	.word	0x08011951
 80118cc:	08011951 	.word	0x08011951
 80118d0:	08011951 	.word	0x08011951
 80118d4:	08011951 	.word	0x08011951
 80118d8:	08011951 	.word	0x08011951
 80118dc:	08011939 	.word	0x08011939
 80118e0:	08011951 	.word	0x08011951
 80118e4:	08011951 	.word	0x08011951
 80118e8:	08011951 	.word	0x08011951
 80118ec:	08011951 	.word	0x08011951
 80118f0:	08011951 	.word	0x08011951
 80118f4:	08011951 	.word	0x08011951
 80118f8:	08011951 	.word	0x08011951
 80118fc:	08011941 	.word	0x08011941
 8011900:	08011951 	.word	0x08011951
 8011904:	08011951 	.word	0x08011951
 8011908:	08011951 	.word	0x08011951
 801190c:	08011951 	.word	0x08011951
 8011910:	08011951 	.word	0x08011951
 8011914:	08011951 	.word	0x08011951
 8011918:	08011951 	.word	0x08011951
 801191c:	08011949 	.word	0x08011949
 8011920:	2301      	movs	r3, #1
 8011922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011926:	e326      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011928:	2304      	movs	r3, #4
 801192a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801192e:	e322      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011930:	2308      	movs	r3, #8
 8011932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011936:	e31e      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011938:	2310      	movs	r3, #16
 801193a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801193e:	e31a      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011940:	2320      	movs	r3, #32
 8011942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011946:	e316      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011948:	2340      	movs	r3, #64	@ 0x40
 801194a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801194e:	e312      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011950:	2380      	movs	r3, #128	@ 0x80
 8011952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011956:	e30e      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011958:	697b      	ldr	r3, [r7, #20]
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	4a69      	ldr	r2, [pc, #420]	@ (8011b04 <UART_SetConfig+0x33c>)
 801195e:	4293      	cmp	r3, r2
 8011960:	d130      	bne.n	80119c4 <UART_SetConfig+0x1fc>
 8011962:	4b67      	ldr	r3, [pc, #412]	@ (8011b00 <UART_SetConfig+0x338>)
 8011964:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011966:	f003 0307 	and.w	r3, r3, #7
 801196a:	2b05      	cmp	r3, #5
 801196c:	d826      	bhi.n	80119bc <UART_SetConfig+0x1f4>
 801196e:	a201      	add	r2, pc, #4	@ (adr r2, 8011974 <UART_SetConfig+0x1ac>)
 8011970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011974:	0801198d 	.word	0x0801198d
 8011978:	08011995 	.word	0x08011995
 801197c:	0801199d 	.word	0x0801199d
 8011980:	080119a5 	.word	0x080119a5
 8011984:	080119ad 	.word	0x080119ad
 8011988:	080119b5 	.word	0x080119b5
 801198c:	2300      	movs	r3, #0
 801198e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011992:	e2f0      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011994:	2304      	movs	r3, #4
 8011996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801199a:	e2ec      	b.n	8011f76 <UART_SetConfig+0x7ae>
 801199c:	2308      	movs	r3, #8
 801199e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80119a2:	e2e8      	b.n	8011f76 <UART_SetConfig+0x7ae>
 80119a4:	2310      	movs	r3, #16
 80119a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80119aa:	e2e4      	b.n	8011f76 <UART_SetConfig+0x7ae>
 80119ac:	2320      	movs	r3, #32
 80119ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80119b2:	e2e0      	b.n	8011f76 <UART_SetConfig+0x7ae>
 80119b4:	2340      	movs	r3, #64	@ 0x40
 80119b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80119ba:	e2dc      	b.n	8011f76 <UART_SetConfig+0x7ae>
 80119bc:	2380      	movs	r3, #128	@ 0x80
 80119be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80119c2:	e2d8      	b.n	8011f76 <UART_SetConfig+0x7ae>
 80119c4:	697b      	ldr	r3, [r7, #20]
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	4a4f      	ldr	r2, [pc, #316]	@ (8011b08 <UART_SetConfig+0x340>)
 80119ca:	4293      	cmp	r3, r2
 80119cc:	d130      	bne.n	8011a30 <UART_SetConfig+0x268>
 80119ce:	4b4c      	ldr	r3, [pc, #304]	@ (8011b00 <UART_SetConfig+0x338>)
 80119d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80119d2:	f003 0307 	and.w	r3, r3, #7
 80119d6:	2b05      	cmp	r3, #5
 80119d8:	d826      	bhi.n	8011a28 <UART_SetConfig+0x260>
 80119da:	a201      	add	r2, pc, #4	@ (adr r2, 80119e0 <UART_SetConfig+0x218>)
 80119dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119e0:	080119f9 	.word	0x080119f9
 80119e4:	08011a01 	.word	0x08011a01
 80119e8:	08011a09 	.word	0x08011a09
 80119ec:	08011a11 	.word	0x08011a11
 80119f0:	08011a19 	.word	0x08011a19
 80119f4:	08011a21 	.word	0x08011a21
 80119f8:	2300      	movs	r3, #0
 80119fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80119fe:	e2ba      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011a00:	2304      	movs	r3, #4
 8011a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011a06:	e2b6      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011a08:	2308      	movs	r3, #8
 8011a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011a0e:	e2b2      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011a10:	2310      	movs	r3, #16
 8011a12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011a16:	e2ae      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011a18:	2320      	movs	r3, #32
 8011a1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011a1e:	e2aa      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011a20:	2340      	movs	r3, #64	@ 0x40
 8011a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011a26:	e2a6      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011a28:	2380      	movs	r3, #128	@ 0x80
 8011a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011a2e:	e2a2      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011a30:	697b      	ldr	r3, [r7, #20]
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	4a35      	ldr	r2, [pc, #212]	@ (8011b0c <UART_SetConfig+0x344>)
 8011a36:	4293      	cmp	r3, r2
 8011a38:	d130      	bne.n	8011a9c <UART_SetConfig+0x2d4>
 8011a3a:	4b31      	ldr	r3, [pc, #196]	@ (8011b00 <UART_SetConfig+0x338>)
 8011a3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011a3e:	f003 0307 	and.w	r3, r3, #7
 8011a42:	2b05      	cmp	r3, #5
 8011a44:	d826      	bhi.n	8011a94 <UART_SetConfig+0x2cc>
 8011a46:	a201      	add	r2, pc, #4	@ (adr r2, 8011a4c <UART_SetConfig+0x284>)
 8011a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a4c:	08011a65 	.word	0x08011a65
 8011a50:	08011a6d 	.word	0x08011a6d
 8011a54:	08011a75 	.word	0x08011a75
 8011a58:	08011a7d 	.word	0x08011a7d
 8011a5c:	08011a85 	.word	0x08011a85
 8011a60:	08011a8d 	.word	0x08011a8d
 8011a64:	2300      	movs	r3, #0
 8011a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011a6a:	e284      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011a6c:	2304      	movs	r3, #4
 8011a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011a72:	e280      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011a74:	2308      	movs	r3, #8
 8011a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011a7a:	e27c      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011a7c:	2310      	movs	r3, #16
 8011a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011a82:	e278      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011a84:	2320      	movs	r3, #32
 8011a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011a8a:	e274      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011a8c:	2340      	movs	r3, #64	@ 0x40
 8011a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011a92:	e270      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011a94:	2380      	movs	r3, #128	@ 0x80
 8011a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011a9a:	e26c      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011a9c:	697b      	ldr	r3, [r7, #20]
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	4a1b      	ldr	r2, [pc, #108]	@ (8011b10 <UART_SetConfig+0x348>)
 8011aa2:	4293      	cmp	r3, r2
 8011aa4:	d142      	bne.n	8011b2c <UART_SetConfig+0x364>
 8011aa6:	4b16      	ldr	r3, [pc, #88]	@ (8011b00 <UART_SetConfig+0x338>)
 8011aa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011aaa:	f003 0307 	and.w	r3, r3, #7
 8011aae:	2b05      	cmp	r3, #5
 8011ab0:	d838      	bhi.n	8011b24 <UART_SetConfig+0x35c>
 8011ab2:	a201      	add	r2, pc, #4	@ (adr r2, 8011ab8 <UART_SetConfig+0x2f0>)
 8011ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ab8:	08011ad1 	.word	0x08011ad1
 8011abc:	08011ad9 	.word	0x08011ad9
 8011ac0:	08011ae1 	.word	0x08011ae1
 8011ac4:	08011ae9 	.word	0x08011ae9
 8011ac8:	08011b15 	.word	0x08011b15
 8011acc:	08011b1d 	.word	0x08011b1d
 8011ad0:	2300      	movs	r3, #0
 8011ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011ad6:	e24e      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011ad8:	2304      	movs	r3, #4
 8011ada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011ade:	e24a      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011ae0:	2308      	movs	r3, #8
 8011ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011ae6:	e246      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011ae8:	2310      	movs	r3, #16
 8011aea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011aee:	e242      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011af0:	cfff69f3 	.word	0xcfff69f3
 8011af4:	58000c00 	.word	0x58000c00
 8011af8:	11fff4ff 	.word	0x11fff4ff
 8011afc:	40011000 	.word	0x40011000
 8011b00:	58024400 	.word	0x58024400
 8011b04:	40004400 	.word	0x40004400
 8011b08:	40004800 	.word	0x40004800
 8011b0c:	40004c00 	.word	0x40004c00
 8011b10:	40005000 	.word	0x40005000
 8011b14:	2320      	movs	r3, #32
 8011b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011b1a:	e22c      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011b1c:	2340      	movs	r3, #64	@ 0x40
 8011b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011b22:	e228      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011b24:	2380      	movs	r3, #128	@ 0x80
 8011b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011b2a:	e224      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011b2c:	697b      	ldr	r3, [r7, #20]
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	4ab1      	ldr	r2, [pc, #708]	@ (8011df8 <UART_SetConfig+0x630>)
 8011b32:	4293      	cmp	r3, r2
 8011b34:	d176      	bne.n	8011c24 <UART_SetConfig+0x45c>
 8011b36:	4bb1      	ldr	r3, [pc, #708]	@ (8011dfc <UART_SetConfig+0x634>)
 8011b38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011b3a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011b3e:	2b28      	cmp	r3, #40	@ 0x28
 8011b40:	d86c      	bhi.n	8011c1c <UART_SetConfig+0x454>
 8011b42:	a201      	add	r2, pc, #4	@ (adr r2, 8011b48 <UART_SetConfig+0x380>)
 8011b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b48:	08011bed 	.word	0x08011bed
 8011b4c:	08011c1d 	.word	0x08011c1d
 8011b50:	08011c1d 	.word	0x08011c1d
 8011b54:	08011c1d 	.word	0x08011c1d
 8011b58:	08011c1d 	.word	0x08011c1d
 8011b5c:	08011c1d 	.word	0x08011c1d
 8011b60:	08011c1d 	.word	0x08011c1d
 8011b64:	08011c1d 	.word	0x08011c1d
 8011b68:	08011bf5 	.word	0x08011bf5
 8011b6c:	08011c1d 	.word	0x08011c1d
 8011b70:	08011c1d 	.word	0x08011c1d
 8011b74:	08011c1d 	.word	0x08011c1d
 8011b78:	08011c1d 	.word	0x08011c1d
 8011b7c:	08011c1d 	.word	0x08011c1d
 8011b80:	08011c1d 	.word	0x08011c1d
 8011b84:	08011c1d 	.word	0x08011c1d
 8011b88:	08011bfd 	.word	0x08011bfd
 8011b8c:	08011c1d 	.word	0x08011c1d
 8011b90:	08011c1d 	.word	0x08011c1d
 8011b94:	08011c1d 	.word	0x08011c1d
 8011b98:	08011c1d 	.word	0x08011c1d
 8011b9c:	08011c1d 	.word	0x08011c1d
 8011ba0:	08011c1d 	.word	0x08011c1d
 8011ba4:	08011c1d 	.word	0x08011c1d
 8011ba8:	08011c05 	.word	0x08011c05
 8011bac:	08011c1d 	.word	0x08011c1d
 8011bb0:	08011c1d 	.word	0x08011c1d
 8011bb4:	08011c1d 	.word	0x08011c1d
 8011bb8:	08011c1d 	.word	0x08011c1d
 8011bbc:	08011c1d 	.word	0x08011c1d
 8011bc0:	08011c1d 	.word	0x08011c1d
 8011bc4:	08011c1d 	.word	0x08011c1d
 8011bc8:	08011c0d 	.word	0x08011c0d
 8011bcc:	08011c1d 	.word	0x08011c1d
 8011bd0:	08011c1d 	.word	0x08011c1d
 8011bd4:	08011c1d 	.word	0x08011c1d
 8011bd8:	08011c1d 	.word	0x08011c1d
 8011bdc:	08011c1d 	.word	0x08011c1d
 8011be0:	08011c1d 	.word	0x08011c1d
 8011be4:	08011c1d 	.word	0x08011c1d
 8011be8:	08011c15 	.word	0x08011c15
 8011bec:	2301      	movs	r3, #1
 8011bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011bf2:	e1c0      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011bf4:	2304      	movs	r3, #4
 8011bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011bfa:	e1bc      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011bfc:	2308      	movs	r3, #8
 8011bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011c02:	e1b8      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011c04:	2310      	movs	r3, #16
 8011c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011c0a:	e1b4      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011c0c:	2320      	movs	r3, #32
 8011c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011c12:	e1b0      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011c14:	2340      	movs	r3, #64	@ 0x40
 8011c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011c1a:	e1ac      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011c1c:	2380      	movs	r3, #128	@ 0x80
 8011c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011c22:	e1a8      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011c24:	697b      	ldr	r3, [r7, #20]
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	4a75      	ldr	r2, [pc, #468]	@ (8011e00 <UART_SetConfig+0x638>)
 8011c2a:	4293      	cmp	r3, r2
 8011c2c:	d130      	bne.n	8011c90 <UART_SetConfig+0x4c8>
 8011c2e:	4b73      	ldr	r3, [pc, #460]	@ (8011dfc <UART_SetConfig+0x634>)
 8011c30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011c32:	f003 0307 	and.w	r3, r3, #7
 8011c36:	2b05      	cmp	r3, #5
 8011c38:	d826      	bhi.n	8011c88 <UART_SetConfig+0x4c0>
 8011c3a:	a201      	add	r2, pc, #4	@ (adr r2, 8011c40 <UART_SetConfig+0x478>)
 8011c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c40:	08011c59 	.word	0x08011c59
 8011c44:	08011c61 	.word	0x08011c61
 8011c48:	08011c69 	.word	0x08011c69
 8011c4c:	08011c71 	.word	0x08011c71
 8011c50:	08011c79 	.word	0x08011c79
 8011c54:	08011c81 	.word	0x08011c81
 8011c58:	2300      	movs	r3, #0
 8011c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011c5e:	e18a      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011c60:	2304      	movs	r3, #4
 8011c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011c66:	e186      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011c68:	2308      	movs	r3, #8
 8011c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011c6e:	e182      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011c70:	2310      	movs	r3, #16
 8011c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011c76:	e17e      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011c78:	2320      	movs	r3, #32
 8011c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011c7e:	e17a      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011c80:	2340      	movs	r3, #64	@ 0x40
 8011c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011c86:	e176      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011c88:	2380      	movs	r3, #128	@ 0x80
 8011c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011c8e:	e172      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011c90:	697b      	ldr	r3, [r7, #20]
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	4a5b      	ldr	r2, [pc, #364]	@ (8011e04 <UART_SetConfig+0x63c>)
 8011c96:	4293      	cmp	r3, r2
 8011c98:	d130      	bne.n	8011cfc <UART_SetConfig+0x534>
 8011c9a:	4b58      	ldr	r3, [pc, #352]	@ (8011dfc <UART_SetConfig+0x634>)
 8011c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011c9e:	f003 0307 	and.w	r3, r3, #7
 8011ca2:	2b05      	cmp	r3, #5
 8011ca4:	d826      	bhi.n	8011cf4 <UART_SetConfig+0x52c>
 8011ca6:	a201      	add	r2, pc, #4	@ (adr r2, 8011cac <UART_SetConfig+0x4e4>)
 8011ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cac:	08011cc5 	.word	0x08011cc5
 8011cb0:	08011ccd 	.word	0x08011ccd
 8011cb4:	08011cd5 	.word	0x08011cd5
 8011cb8:	08011cdd 	.word	0x08011cdd
 8011cbc:	08011ce5 	.word	0x08011ce5
 8011cc0:	08011ced 	.word	0x08011ced
 8011cc4:	2300      	movs	r3, #0
 8011cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011cca:	e154      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011ccc:	2304      	movs	r3, #4
 8011cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011cd2:	e150      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011cd4:	2308      	movs	r3, #8
 8011cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011cda:	e14c      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011cdc:	2310      	movs	r3, #16
 8011cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011ce2:	e148      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011ce4:	2320      	movs	r3, #32
 8011ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011cea:	e144      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011cec:	2340      	movs	r3, #64	@ 0x40
 8011cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011cf2:	e140      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011cf4:	2380      	movs	r3, #128	@ 0x80
 8011cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011cfa:	e13c      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011cfc:	697b      	ldr	r3, [r7, #20]
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	4a41      	ldr	r2, [pc, #260]	@ (8011e08 <UART_SetConfig+0x640>)
 8011d02:	4293      	cmp	r3, r2
 8011d04:	f040 8082 	bne.w	8011e0c <UART_SetConfig+0x644>
 8011d08:	4b3c      	ldr	r3, [pc, #240]	@ (8011dfc <UART_SetConfig+0x634>)
 8011d0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011d0c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011d10:	2b28      	cmp	r3, #40	@ 0x28
 8011d12:	d86d      	bhi.n	8011df0 <UART_SetConfig+0x628>
 8011d14:	a201      	add	r2, pc, #4	@ (adr r2, 8011d1c <UART_SetConfig+0x554>)
 8011d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d1a:	bf00      	nop
 8011d1c:	08011dc1 	.word	0x08011dc1
 8011d20:	08011df1 	.word	0x08011df1
 8011d24:	08011df1 	.word	0x08011df1
 8011d28:	08011df1 	.word	0x08011df1
 8011d2c:	08011df1 	.word	0x08011df1
 8011d30:	08011df1 	.word	0x08011df1
 8011d34:	08011df1 	.word	0x08011df1
 8011d38:	08011df1 	.word	0x08011df1
 8011d3c:	08011dc9 	.word	0x08011dc9
 8011d40:	08011df1 	.word	0x08011df1
 8011d44:	08011df1 	.word	0x08011df1
 8011d48:	08011df1 	.word	0x08011df1
 8011d4c:	08011df1 	.word	0x08011df1
 8011d50:	08011df1 	.word	0x08011df1
 8011d54:	08011df1 	.word	0x08011df1
 8011d58:	08011df1 	.word	0x08011df1
 8011d5c:	08011dd1 	.word	0x08011dd1
 8011d60:	08011df1 	.word	0x08011df1
 8011d64:	08011df1 	.word	0x08011df1
 8011d68:	08011df1 	.word	0x08011df1
 8011d6c:	08011df1 	.word	0x08011df1
 8011d70:	08011df1 	.word	0x08011df1
 8011d74:	08011df1 	.word	0x08011df1
 8011d78:	08011df1 	.word	0x08011df1
 8011d7c:	08011dd9 	.word	0x08011dd9
 8011d80:	08011df1 	.word	0x08011df1
 8011d84:	08011df1 	.word	0x08011df1
 8011d88:	08011df1 	.word	0x08011df1
 8011d8c:	08011df1 	.word	0x08011df1
 8011d90:	08011df1 	.word	0x08011df1
 8011d94:	08011df1 	.word	0x08011df1
 8011d98:	08011df1 	.word	0x08011df1
 8011d9c:	08011de1 	.word	0x08011de1
 8011da0:	08011df1 	.word	0x08011df1
 8011da4:	08011df1 	.word	0x08011df1
 8011da8:	08011df1 	.word	0x08011df1
 8011dac:	08011df1 	.word	0x08011df1
 8011db0:	08011df1 	.word	0x08011df1
 8011db4:	08011df1 	.word	0x08011df1
 8011db8:	08011df1 	.word	0x08011df1
 8011dbc:	08011de9 	.word	0x08011de9
 8011dc0:	2301      	movs	r3, #1
 8011dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011dc6:	e0d6      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011dc8:	2304      	movs	r3, #4
 8011dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011dce:	e0d2      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011dd0:	2308      	movs	r3, #8
 8011dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011dd6:	e0ce      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011dd8:	2310      	movs	r3, #16
 8011dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011dde:	e0ca      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011de0:	2320      	movs	r3, #32
 8011de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011de6:	e0c6      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011de8:	2340      	movs	r3, #64	@ 0x40
 8011dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011dee:	e0c2      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011df0:	2380      	movs	r3, #128	@ 0x80
 8011df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011df6:	e0be      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011df8:	40011400 	.word	0x40011400
 8011dfc:	58024400 	.word	0x58024400
 8011e00:	40007800 	.word	0x40007800
 8011e04:	40007c00 	.word	0x40007c00
 8011e08:	40011800 	.word	0x40011800
 8011e0c:	697b      	ldr	r3, [r7, #20]
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	4aad      	ldr	r2, [pc, #692]	@ (80120c8 <UART_SetConfig+0x900>)
 8011e12:	4293      	cmp	r3, r2
 8011e14:	d176      	bne.n	8011f04 <UART_SetConfig+0x73c>
 8011e16:	4bad      	ldr	r3, [pc, #692]	@ (80120cc <UART_SetConfig+0x904>)
 8011e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011e1a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011e1e:	2b28      	cmp	r3, #40	@ 0x28
 8011e20:	d86c      	bhi.n	8011efc <UART_SetConfig+0x734>
 8011e22:	a201      	add	r2, pc, #4	@ (adr r2, 8011e28 <UART_SetConfig+0x660>)
 8011e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e28:	08011ecd 	.word	0x08011ecd
 8011e2c:	08011efd 	.word	0x08011efd
 8011e30:	08011efd 	.word	0x08011efd
 8011e34:	08011efd 	.word	0x08011efd
 8011e38:	08011efd 	.word	0x08011efd
 8011e3c:	08011efd 	.word	0x08011efd
 8011e40:	08011efd 	.word	0x08011efd
 8011e44:	08011efd 	.word	0x08011efd
 8011e48:	08011ed5 	.word	0x08011ed5
 8011e4c:	08011efd 	.word	0x08011efd
 8011e50:	08011efd 	.word	0x08011efd
 8011e54:	08011efd 	.word	0x08011efd
 8011e58:	08011efd 	.word	0x08011efd
 8011e5c:	08011efd 	.word	0x08011efd
 8011e60:	08011efd 	.word	0x08011efd
 8011e64:	08011efd 	.word	0x08011efd
 8011e68:	08011edd 	.word	0x08011edd
 8011e6c:	08011efd 	.word	0x08011efd
 8011e70:	08011efd 	.word	0x08011efd
 8011e74:	08011efd 	.word	0x08011efd
 8011e78:	08011efd 	.word	0x08011efd
 8011e7c:	08011efd 	.word	0x08011efd
 8011e80:	08011efd 	.word	0x08011efd
 8011e84:	08011efd 	.word	0x08011efd
 8011e88:	08011ee5 	.word	0x08011ee5
 8011e8c:	08011efd 	.word	0x08011efd
 8011e90:	08011efd 	.word	0x08011efd
 8011e94:	08011efd 	.word	0x08011efd
 8011e98:	08011efd 	.word	0x08011efd
 8011e9c:	08011efd 	.word	0x08011efd
 8011ea0:	08011efd 	.word	0x08011efd
 8011ea4:	08011efd 	.word	0x08011efd
 8011ea8:	08011eed 	.word	0x08011eed
 8011eac:	08011efd 	.word	0x08011efd
 8011eb0:	08011efd 	.word	0x08011efd
 8011eb4:	08011efd 	.word	0x08011efd
 8011eb8:	08011efd 	.word	0x08011efd
 8011ebc:	08011efd 	.word	0x08011efd
 8011ec0:	08011efd 	.word	0x08011efd
 8011ec4:	08011efd 	.word	0x08011efd
 8011ec8:	08011ef5 	.word	0x08011ef5
 8011ecc:	2301      	movs	r3, #1
 8011ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011ed2:	e050      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011ed4:	2304      	movs	r3, #4
 8011ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011eda:	e04c      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011edc:	2308      	movs	r3, #8
 8011ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011ee2:	e048      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011ee4:	2310      	movs	r3, #16
 8011ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011eea:	e044      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011eec:	2320      	movs	r3, #32
 8011eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011ef2:	e040      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011ef4:	2340      	movs	r3, #64	@ 0x40
 8011ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011efa:	e03c      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011efc:	2380      	movs	r3, #128	@ 0x80
 8011efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011f02:	e038      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011f04:	697b      	ldr	r3, [r7, #20]
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	4a71      	ldr	r2, [pc, #452]	@ (80120d0 <UART_SetConfig+0x908>)
 8011f0a:	4293      	cmp	r3, r2
 8011f0c:	d130      	bne.n	8011f70 <UART_SetConfig+0x7a8>
 8011f0e:	4b6f      	ldr	r3, [pc, #444]	@ (80120cc <UART_SetConfig+0x904>)
 8011f10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011f12:	f003 0307 	and.w	r3, r3, #7
 8011f16:	2b05      	cmp	r3, #5
 8011f18:	d826      	bhi.n	8011f68 <UART_SetConfig+0x7a0>
 8011f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8011f20 <UART_SetConfig+0x758>)
 8011f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f20:	08011f39 	.word	0x08011f39
 8011f24:	08011f41 	.word	0x08011f41
 8011f28:	08011f49 	.word	0x08011f49
 8011f2c:	08011f51 	.word	0x08011f51
 8011f30:	08011f59 	.word	0x08011f59
 8011f34:	08011f61 	.word	0x08011f61
 8011f38:	2302      	movs	r3, #2
 8011f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011f3e:	e01a      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011f40:	2304      	movs	r3, #4
 8011f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011f46:	e016      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011f48:	2308      	movs	r3, #8
 8011f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011f4e:	e012      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011f50:	2310      	movs	r3, #16
 8011f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011f56:	e00e      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011f58:	2320      	movs	r3, #32
 8011f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011f5e:	e00a      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011f60:	2340      	movs	r3, #64	@ 0x40
 8011f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011f66:	e006      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011f68:	2380      	movs	r3, #128	@ 0x80
 8011f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011f6e:	e002      	b.n	8011f76 <UART_SetConfig+0x7ae>
 8011f70:	2380      	movs	r3, #128	@ 0x80
 8011f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011f76:	697b      	ldr	r3, [r7, #20]
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	4a55      	ldr	r2, [pc, #340]	@ (80120d0 <UART_SetConfig+0x908>)
 8011f7c:	4293      	cmp	r3, r2
 8011f7e:	f040 80f8 	bne.w	8012172 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011f82:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8011f86:	2b20      	cmp	r3, #32
 8011f88:	dc46      	bgt.n	8012018 <UART_SetConfig+0x850>
 8011f8a:	2b02      	cmp	r3, #2
 8011f8c:	db75      	blt.n	801207a <UART_SetConfig+0x8b2>
 8011f8e:	3b02      	subs	r3, #2
 8011f90:	2b1e      	cmp	r3, #30
 8011f92:	d872      	bhi.n	801207a <UART_SetConfig+0x8b2>
 8011f94:	a201      	add	r2, pc, #4	@ (adr r2, 8011f9c <UART_SetConfig+0x7d4>)
 8011f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f9a:	bf00      	nop
 8011f9c:	0801201f 	.word	0x0801201f
 8011fa0:	0801207b 	.word	0x0801207b
 8011fa4:	08012027 	.word	0x08012027
 8011fa8:	0801207b 	.word	0x0801207b
 8011fac:	0801207b 	.word	0x0801207b
 8011fb0:	0801207b 	.word	0x0801207b
 8011fb4:	08012037 	.word	0x08012037
 8011fb8:	0801207b 	.word	0x0801207b
 8011fbc:	0801207b 	.word	0x0801207b
 8011fc0:	0801207b 	.word	0x0801207b
 8011fc4:	0801207b 	.word	0x0801207b
 8011fc8:	0801207b 	.word	0x0801207b
 8011fcc:	0801207b 	.word	0x0801207b
 8011fd0:	0801207b 	.word	0x0801207b
 8011fd4:	08012047 	.word	0x08012047
 8011fd8:	0801207b 	.word	0x0801207b
 8011fdc:	0801207b 	.word	0x0801207b
 8011fe0:	0801207b 	.word	0x0801207b
 8011fe4:	0801207b 	.word	0x0801207b
 8011fe8:	0801207b 	.word	0x0801207b
 8011fec:	0801207b 	.word	0x0801207b
 8011ff0:	0801207b 	.word	0x0801207b
 8011ff4:	0801207b 	.word	0x0801207b
 8011ff8:	0801207b 	.word	0x0801207b
 8011ffc:	0801207b 	.word	0x0801207b
 8012000:	0801207b 	.word	0x0801207b
 8012004:	0801207b 	.word	0x0801207b
 8012008:	0801207b 	.word	0x0801207b
 801200c:	0801207b 	.word	0x0801207b
 8012010:	0801207b 	.word	0x0801207b
 8012014:	0801206d 	.word	0x0801206d
 8012018:	2b40      	cmp	r3, #64	@ 0x40
 801201a:	d02a      	beq.n	8012072 <UART_SetConfig+0x8aa>
 801201c:	e02d      	b.n	801207a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801201e:	f7fa fd91 	bl	800cb44 <HAL_RCCEx_GetD3PCLK1Freq>
 8012022:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8012024:	e02f      	b.n	8012086 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012026:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801202a:	4618      	mov	r0, r3
 801202c:	f7fa fda0 	bl	800cb70 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012032:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012034:	e027      	b.n	8012086 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012036:	f107 0318 	add.w	r3, r7, #24
 801203a:	4618      	mov	r0, r3
 801203c:	f7fa feec 	bl	800ce18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012040:	69fb      	ldr	r3, [r7, #28]
 8012042:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012044:	e01f      	b.n	8012086 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012046:	4b21      	ldr	r3, [pc, #132]	@ (80120cc <UART_SetConfig+0x904>)
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	f003 0320 	and.w	r3, r3, #32
 801204e:	2b00      	cmp	r3, #0
 8012050:	d009      	beq.n	8012066 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012052:	4b1e      	ldr	r3, [pc, #120]	@ (80120cc <UART_SetConfig+0x904>)
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	08db      	lsrs	r3, r3, #3
 8012058:	f003 0303 	and.w	r3, r3, #3
 801205c:	4a1d      	ldr	r2, [pc, #116]	@ (80120d4 <UART_SetConfig+0x90c>)
 801205e:	fa22 f303 	lsr.w	r3, r2, r3
 8012062:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012064:	e00f      	b.n	8012086 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8012066:	4b1b      	ldr	r3, [pc, #108]	@ (80120d4 <UART_SetConfig+0x90c>)
 8012068:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801206a:	e00c      	b.n	8012086 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801206c:	4b1a      	ldr	r3, [pc, #104]	@ (80120d8 <UART_SetConfig+0x910>)
 801206e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012070:	e009      	b.n	8012086 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012072:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012076:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012078:	e005      	b.n	8012086 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801207a:	2300      	movs	r3, #0
 801207c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801207e:	2301      	movs	r3, #1
 8012080:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8012084:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8012086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012088:	2b00      	cmp	r3, #0
 801208a:	f000 81ee 	beq.w	801246a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801208e:	697b      	ldr	r3, [r7, #20]
 8012090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012092:	4a12      	ldr	r2, [pc, #72]	@ (80120dc <UART_SetConfig+0x914>)
 8012094:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012098:	461a      	mov	r2, r3
 801209a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801209c:	fbb3 f3f2 	udiv	r3, r3, r2
 80120a0:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80120a2:	697b      	ldr	r3, [r7, #20]
 80120a4:	685a      	ldr	r2, [r3, #4]
 80120a6:	4613      	mov	r3, r2
 80120a8:	005b      	lsls	r3, r3, #1
 80120aa:	4413      	add	r3, r2
 80120ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80120ae:	429a      	cmp	r2, r3
 80120b0:	d305      	bcc.n	80120be <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80120b2:	697b      	ldr	r3, [r7, #20]
 80120b4:	685b      	ldr	r3, [r3, #4]
 80120b6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80120b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80120ba:	429a      	cmp	r2, r3
 80120bc:	d910      	bls.n	80120e0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80120be:	2301      	movs	r3, #1
 80120c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80120c4:	e1d1      	b.n	801246a <UART_SetConfig+0xca2>
 80120c6:	bf00      	nop
 80120c8:	40011c00 	.word	0x40011c00
 80120cc:	58024400 	.word	0x58024400
 80120d0:	58000c00 	.word	0x58000c00
 80120d4:	03d09000 	.word	0x03d09000
 80120d8:	003d0900 	.word	0x003d0900
 80120dc:	08018888 	.word	0x08018888
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80120e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80120e2:	2200      	movs	r2, #0
 80120e4:	60bb      	str	r3, [r7, #8]
 80120e6:	60fa      	str	r2, [r7, #12]
 80120e8:	697b      	ldr	r3, [r7, #20]
 80120ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120ec:	4ac0      	ldr	r2, [pc, #768]	@ (80123f0 <UART_SetConfig+0xc28>)
 80120ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80120f2:	b29b      	uxth	r3, r3
 80120f4:	2200      	movs	r2, #0
 80120f6:	603b      	str	r3, [r7, #0]
 80120f8:	607a      	str	r2, [r7, #4]
 80120fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80120fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8012102:	f7ee fb19 	bl	8000738 <__aeabi_uldivmod>
 8012106:	4602      	mov	r2, r0
 8012108:	460b      	mov	r3, r1
 801210a:	4610      	mov	r0, r2
 801210c:	4619      	mov	r1, r3
 801210e:	f04f 0200 	mov.w	r2, #0
 8012112:	f04f 0300 	mov.w	r3, #0
 8012116:	020b      	lsls	r3, r1, #8
 8012118:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801211c:	0202      	lsls	r2, r0, #8
 801211e:	6979      	ldr	r1, [r7, #20]
 8012120:	6849      	ldr	r1, [r1, #4]
 8012122:	0849      	lsrs	r1, r1, #1
 8012124:	2000      	movs	r0, #0
 8012126:	460c      	mov	r4, r1
 8012128:	4605      	mov	r5, r0
 801212a:	eb12 0804 	adds.w	r8, r2, r4
 801212e:	eb43 0905 	adc.w	r9, r3, r5
 8012132:	697b      	ldr	r3, [r7, #20]
 8012134:	685b      	ldr	r3, [r3, #4]
 8012136:	2200      	movs	r2, #0
 8012138:	469a      	mov	sl, r3
 801213a:	4693      	mov	fp, r2
 801213c:	4652      	mov	r2, sl
 801213e:	465b      	mov	r3, fp
 8012140:	4640      	mov	r0, r8
 8012142:	4649      	mov	r1, r9
 8012144:	f7ee faf8 	bl	8000738 <__aeabi_uldivmod>
 8012148:	4602      	mov	r2, r0
 801214a:	460b      	mov	r3, r1
 801214c:	4613      	mov	r3, r2
 801214e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8012150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012152:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8012156:	d308      	bcc.n	801216a <UART_SetConfig+0x9a2>
 8012158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801215a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801215e:	d204      	bcs.n	801216a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8012160:	697b      	ldr	r3, [r7, #20]
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012166:	60da      	str	r2, [r3, #12]
 8012168:	e17f      	b.n	801246a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 801216a:	2301      	movs	r3, #1
 801216c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8012170:	e17b      	b.n	801246a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012172:	697b      	ldr	r3, [r7, #20]
 8012174:	69db      	ldr	r3, [r3, #28]
 8012176:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801217a:	f040 80bd 	bne.w	80122f8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 801217e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8012182:	2b20      	cmp	r3, #32
 8012184:	dc48      	bgt.n	8012218 <UART_SetConfig+0xa50>
 8012186:	2b00      	cmp	r3, #0
 8012188:	db7b      	blt.n	8012282 <UART_SetConfig+0xaba>
 801218a:	2b20      	cmp	r3, #32
 801218c:	d879      	bhi.n	8012282 <UART_SetConfig+0xaba>
 801218e:	a201      	add	r2, pc, #4	@ (adr r2, 8012194 <UART_SetConfig+0x9cc>)
 8012190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012194:	0801221f 	.word	0x0801221f
 8012198:	08012227 	.word	0x08012227
 801219c:	08012283 	.word	0x08012283
 80121a0:	08012283 	.word	0x08012283
 80121a4:	0801222f 	.word	0x0801222f
 80121a8:	08012283 	.word	0x08012283
 80121ac:	08012283 	.word	0x08012283
 80121b0:	08012283 	.word	0x08012283
 80121b4:	0801223f 	.word	0x0801223f
 80121b8:	08012283 	.word	0x08012283
 80121bc:	08012283 	.word	0x08012283
 80121c0:	08012283 	.word	0x08012283
 80121c4:	08012283 	.word	0x08012283
 80121c8:	08012283 	.word	0x08012283
 80121cc:	08012283 	.word	0x08012283
 80121d0:	08012283 	.word	0x08012283
 80121d4:	0801224f 	.word	0x0801224f
 80121d8:	08012283 	.word	0x08012283
 80121dc:	08012283 	.word	0x08012283
 80121e0:	08012283 	.word	0x08012283
 80121e4:	08012283 	.word	0x08012283
 80121e8:	08012283 	.word	0x08012283
 80121ec:	08012283 	.word	0x08012283
 80121f0:	08012283 	.word	0x08012283
 80121f4:	08012283 	.word	0x08012283
 80121f8:	08012283 	.word	0x08012283
 80121fc:	08012283 	.word	0x08012283
 8012200:	08012283 	.word	0x08012283
 8012204:	08012283 	.word	0x08012283
 8012208:	08012283 	.word	0x08012283
 801220c:	08012283 	.word	0x08012283
 8012210:	08012283 	.word	0x08012283
 8012214:	08012275 	.word	0x08012275
 8012218:	2b40      	cmp	r3, #64	@ 0x40
 801221a:	d02e      	beq.n	801227a <UART_SetConfig+0xab2>
 801221c:	e031      	b.n	8012282 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801221e:	f7f8 fdf3 	bl	800ae08 <HAL_RCC_GetPCLK1Freq>
 8012222:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8012224:	e033      	b.n	801228e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012226:	f7f8 fe05 	bl	800ae34 <HAL_RCC_GetPCLK2Freq>
 801222a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801222c:	e02f      	b.n	801228e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801222e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012232:	4618      	mov	r0, r3
 8012234:	f7fa fc9c 	bl	800cb70 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801223a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801223c:	e027      	b.n	801228e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801223e:	f107 0318 	add.w	r3, r7, #24
 8012242:	4618      	mov	r0, r3
 8012244:	f7fa fde8 	bl	800ce18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012248:	69fb      	ldr	r3, [r7, #28]
 801224a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801224c:	e01f      	b.n	801228e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801224e:	4b69      	ldr	r3, [pc, #420]	@ (80123f4 <UART_SetConfig+0xc2c>)
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	f003 0320 	and.w	r3, r3, #32
 8012256:	2b00      	cmp	r3, #0
 8012258:	d009      	beq.n	801226e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801225a:	4b66      	ldr	r3, [pc, #408]	@ (80123f4 <UART_SetConfig+0xc2c>)
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	08db      	lsrs	r3, r3, #3
 8012260:	f003 0303 	and.w	r3, r3, #3
 8012264:	4a64      	ldr	r2, [pc, #400]	@ (80123f8 <UART_SetConfig+0xc30>)
 8012266:	fa22 f303 	lsr.w	r3, r2, r3
 801226a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801226c:	e00f      	b.n	801228e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 801226e:	4b62      	ldr	r3, [pc, #392]	@ (80123f8 <UART_SetConfig+0xc30>)
 8012270:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012272:	e00c      	b.n	801228e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012274:	4b61      	ldr	r3, [pc, #388]	@ (80123fc <UART_SetConfig+0xc34>)
 8012276:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012278:	e009      	b.n	801228e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801227a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801227e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012280:	e005      	b.n	801228e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8012282:	2300      	movs	r3, #0
 8012284:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8012286:	2301      	movs	r3, #1
 8012288:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801228c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801228e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012290:	2b00      	cmp	r3, #0
 8012292:	f000 80ea 	beq.w	801246a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012296:	697b      	ldr	r3, [r7, #20]
 8012298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801229a:	4a55      	ldr	r2, [pc, #340]	@ (80123f0 <UART_SetConfig+0xc28>)
 801229c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80122a0:	461a      	mov	r2, r3
 80122a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80122a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80122a8:	005a      	lsls	r2, r3, #1
 80122aa:	697b      	ldr	r3, [r7, #20]
 80122ac:	685b      	ldr	r3, [r3, #4]
 80122ae:	085b      	lsrs	r3, r3, #1
 80122b0:	441a      	add	r2, r3
 80122b2:	697b      	ldr	r3, [r7, #20]
 80122b4:	685b      	ldr	r3, [r3, #4]
 80122b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80122ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80122bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122be:	2b0f      	cmp	r3, #15
 80122c0:	d916      	bls.n	80122f0 <UART_SetConfig+0xb28>
 80122c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80122c8:	d212      	bcs.n	80122f0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80122ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122cc:	b29b      	uxth	r3, r3
 80122ce:	f023 030f 	bic.w	r3, r3, #15
 80122d2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80122d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122d6:	085b      	lsrs	r3, r3, #1
 80122d8:	b29b      	uxth	r3, r3
 80122da:	f003 0307 	and.w	r3, r3, #7
 80122de:	b29a      	uxth	r2, r3
 80122e0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80122e2:	4313      	orrs	r3, r2
 80122e4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80122e6:	697b      	ldr	r3, [r7, #20]
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80122ec:	60da      	str	r2, [r3, #12]
 80122ee:	e0bc      	b.n	801246a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80122f0:	2301      	movs	r3, #1
 80122f2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80122f6:	e0b8      	b.n	801246a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80122f8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80122fc:	2b20      	cmp	r3, #32
 80122fe:	dc4b      	bgt.n	8012398 <UART_SetConfig+0xbd0>
 8012300:	2b00      	cmp	r3, #0
 8012302:	f2c0 8087 	blt.w	8012414 <UART_SetConfig+0xc4c>
 8012306:	2b20      	cmp	r3, #32
 8012308:	f200 8084 	bhi.w	8012414 <UART_SetConfig+0xc4c>
 801230c:	a201      	add	r2, pc, #4	@ (adr r2, 8012314 <UART_SetConfig+0xb4c>)
 801230e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012312:	bf00      	nop
 8012314:	0801239f 	.word	0x0801239f
 8012318:	080123a7 	.word	0x080123a7
 801231c:	08012415 	.word	0x08012415
 8012320:	08012415 	.word	0x08012415
 8012324:	080123af 	.word	0x080123af
 8012328:	08012415 	.word	0x08012415
 801232c:	08012415 	.word	0x08012415
 8012330:	08012415 	.word	0x08012415
 8012334:	080123bf 	.word	0x080123bf
 8012338:	08012415 	.word	0x08012415
 801233c:	08012415 	.word	0x08012415
 8012340:	08012415 	.word	0x08012415
 8012344:	08012415 	.word	0x08012415
 8012348:	08012415 	.word	0x08012415
 801234c:	08012415 	.word	0x08012415
 8012350:	08012415 	.word	0x08012415
 8012354:	080123cf 	.word	0x080123cf
 8012358:	08012415 	.word	0x08012415
 801235c:	08012415 	.word	0x08012415
 8012360:	08012415 	.word	0x08012415
 8012364:	08012415 	.word	0x08012415
 8012368:	08012415 	.word	0x08012415
 801236c:	08012415 	.word	0x08012415
 8012370:	08012415 	.word	0x08012415
 8012374:	08012415 	.word	0x08012415
 8012378:	08012415 	.word	0x08012415
 801237c:	08012415 	.word	0x08012415
 8012380:	08012415 	.word	0x08012415
 8012384:	08012415 	.word	0x08012415
 8012388:	08012415 	.word	0x08012415
 801238c:	08012415 	.word	0x08012415
 8012390:	08012415 	.word	0x08012415
 8012394:	08012407 	.word	0x08012407
 8012398:	2b40      	cmp	r3, #64	@ 0x40
 801239a:	d037      	beq.n	801240c <UART_SetConfig+0xc44>
 801239c:	e03a      	b.n	8012414 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801239e:	f7f8 fd33 	bl	800ae08 <HAL_RCC_GetPCLK1Freq>
 80123a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80123a4:	e03c      	b.n	8012420 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80123a6:	f7f8 fd45 	bl	800ae34 <HAL_RCC_GetPCLK2Freq>
 80123aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80123ac:	e038      	b.n	8012420 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80123ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80123b2:	4618      	mov	r0, r3
 80123b4:	f7fa fbdc 	bl	800cb70 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80123b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80123bc:	e030      	b.n	8012420 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80123be:	f107 0318 	add.w	r3, r7, #24
 80123c2:	4618      	mov	r0, r3
 80123c4:	f7fa fd28 	bl	800ce18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80123c8:	69fb      	ldr	r3, [r7, #28]
 80123ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80123cc:	e028      	b.n	8012420 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80123ce:	4b09      	ldr	r3, [pc, #36]	@ (80123f4 <UART_SetConfig+0xc2c>)
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	f003 0320 	and.w	r3, r3, #32
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d012      	beq.n	8012400 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80123da:	4b06      	ldr	r3, [pc, #24]	@ (80123f4 <UART_SetConfig+0xc2c>)
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	08db      	lsrs	r3, r3, #3
 80123e0:	f003 0303 	and.w	r3, r3, #3
 80123e4:	4a04      	ldr	r2, [pc, #16]	@ (80123f8 <UART_SetConfig+0xc30>)
 80123e6:	fa22 f303 	lsr.w	r3, r2, r3
 80123ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80123ec:	e018      	b.n	8012420 <UART_SetConfig+0xc58>
 80123ee:	bf00      	nop
 80123f0:	08018888 	.word	0x08018888
 80123f4:	58024400 	.word	0x58024400
 80123f8:	03d09000 	.word	0x03d09000
 80123fc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8012400:	4b24      	ldr	r3, [pc, #144]	@ (8012494 <UART_SetConfig+0xccc>)
 8012402:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012404:	e00c      	b.n	8012420 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012406:	4b24      	ldr	r3, [pc, #144]	@ (8012498 <UART_SetConfig+0xcd0>)
 8012408:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801240a:	e009      	b.n	8012420 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801240c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012410:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012412:	e005      	b.n	8012420 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8012414:	2300      	movs	r3, #0
 8012416:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8012418:	2301      	movs	r3, #1
 801241a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801241e:	bf00      	nop
    }

    if (pclk != 0U)
 8012420:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012422:	2b00      	cmp	r3, #0
 8012424:	d021      	beq.n	801246a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012426:	697b      	ldr	r3, [r7, #20]
 8012428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801242a:	4a1c      	ldr	r2, [pc, #112]	@ (801249c <UART_SetConfig+0xcd4>)
 801242c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012430:	461a      	mov	r2, r3
 8012432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012434:	fbb3 f2f2 	udiv	r2, r3, r2
 8012438:	697b      	ldr	r3, [r7, #20]
 801243a:	685b      	ldr	r3, [r3, #4]
 801243c:	085b      	lsrs	r3, r3, #1
 801243e:	441a      	add	r2, r3
 8012440:	697b      	ldr	r3, [r7, #20]
 8012442:	685b      	ldr	r3, [r3, #4]
 8012444:	fbb2 f3f3 	udiv	r3, r2, r3
 8012448:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801244a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801244c:	2b0f      	cmp	r3, #15
 801244e:	d909      	bls.n	8012464 <UART_SetConfig+0xc9c>
 8012450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012452:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012456:	d205      	bcs.n	8012464 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8012458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801245a:	b29a      	uxth	r2, r3
 801245c:	697b      	ldr	r3, [r7, #20]
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	60da      	str	r2, [r3, #12]
 8012462:	e002      	b.n	801246a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8012464:	2301      	movs	r3, #1
 8012466:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801246a:	697b      	ldr	r3, [r7, #20]
 801246c:	2201      	movs	r2, #1
 801246e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8012472:	697b      	ldr	r3, [r7, #20]
 8012474:	2201      	movs	r2, #1
 8012476:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801247a:	697b      	ldr	r3, [r7, #20]
 801247c:	2200      	movs	r2, #0
 801247e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8012480:	697b      	ldr	r3, [r7, #20]
 8012482:	2200      	movs	r2, #0
 8012484:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8012486:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 801248a:	4618      	mov	r0, r3
 801248c:	3748      	adds	r7, #72	@ 0x48
 801248e:	46bd      	mov	sp, r7
 8012490:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012494:	03d09000 	.word	0x03d09000
 8012498:	003d0900 	.word	0x003d0900
 801249c:	08018888 	.word	0x08018888

080124a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80124a0:	b480      	push	{r7}
 80124a2:	b083      	sub	sp, #12
 80124a4:	af00      	add	r7, sp, #0
 80124a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80124ac:	f003 0308 	and.w	r3, r3, #8
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d00a      	beq.n	80124ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	685b      	ldr	r3, [r3, #4]
 80124ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	430a      	orrs	r2, r1
 80124c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80124ce:	f003 0301 	and.w	r3, r3, #1
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d00a      	beq.n	80124ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	685b      	ldr	r3, [r3, #4]
 80124dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	430a      	orrs	r2, r1
 80124ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80124f0:	f003 0302 	and.w	r3, r3, #2
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d00a      	beq.n	801250e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	685b      	ldr	r3, [r3, #4]
 80124fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	430a      	orrs	r2, r1
 801250c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012512:	f003 0304 	and.w	r3, r3, #4
 8012516:	2b00      	cmp	r3, #0
 8012518:	d00a      	beq.n	8012530 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	685b      	ldr	r3, [r3, #4]
 8012520:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	681b      	ldr	r3, [r3, #0]
 801252c:	430a      	orrs	r2, r1
 801252e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012534:	f003 0310 	and.w	r3, r3, #16
 8012538:	2b00      	cmp	r3, #0
 801253a:	d00a      	beq.n	8012552 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	689b      	ldr	r3, [r3, #8]
 8012542:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	430a      	orrs	r2, r1
 8012550:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012556:	f003 0320 	and.w	r3, r3, #32
 801255a:	2b00      	cmp	r3, #0
 801255c:	d00a      	beq.n	8012574 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	689b      	ldr	r3, [r3, #8]
 8012564:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	430a      	orrs	r2, r1
 8012572:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801257c:	2b00      	cmp	r3, #0
 801257e:	d01a      	beq.n	80125b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	685b      	ldr	r3, [r3, #4]
 8012586:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	430a      	orrs	r2, r1
 8012594:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801259a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801259e:	d10a      	bne.n	80125b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	685b      	ldr	r3, [r3, #4]
 80125a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	430a      	orrs	r2, r1
 80125b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80125ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d00a      	beq.n	80125d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	685b      	ldr	r3, [r3, #4]
 80125c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	430a      	orrs	r2, r1
 80125d6:	605a      	str	r2, [r3, #4]
  }
}
 80125d8:	bf00      	nop
 80125da:	370c      	adds	r7, #12
 80125dc:	46bd      	mov	sp, r7
 80125de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e2:	4770      	bx	lr

080125e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80125e4:	b580      	push	{r7, lr}
 80125e6:	b098      	sub	sp, #96	@ 0x60
 80125e8:	af02      	add	r7, sp, #8
 80125ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	2200      	movs	r2, #0
 80125f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80125f4:	f7f1 fdf6 	bl	80041e4 <HAL_GetTick>
 80125f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	f003 0308 	and.w	r3, r3, #8
 8012604:	2b08      	cmp	r3, #8
 8012606:	d12f      	bne.n	8012668 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012608:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801260c:	9300      	str	r3, [sp, #0]
 801260e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012610:	2200      	movs	r2, #0
 8012612:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8012616:	6878      	ldr	r0, [r7, #4]
 8012618:	f000 f88e 	bl	8012738 <UART_WaitOnFlagUntilTimeout>
 801261c:	4603      	mov	r3, r0
 801261e:	2b00      	cmp	r3, #0
 8012620:	d022      	beq.n	8012668 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801262a:	e853 3f00 	ldrex	r3, [r3]
 801262e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8012630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012632:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012636:	653b      	str	r3, [r7, #80]	@ 0x50
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	461a      	mov	r2, r3
 801263e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012640:	647b      	str	r3, [r7, #68]	@ 0x44
 8012642:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012644:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8012646:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012648:	e841 2300 	strex	r3, r2, [r1]
 801264c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801264e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012650:	2b00      	cmp	r3, #0
 8012652:	d1e6      	bne.n	8012622 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	2220      	movs	r2, #32
 8012658:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	2200      	movs	r2, #0
 8012660:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012664:	2303      	movs	r3, #3
 8012666:	e063      	b.n	8012730 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	f003 0304 	and.w	r3, r3, #4
 8012672:	2b04      	cmp	r3, #4
 8012674:	d149      	bne.n	801270a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012676:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801267a:	9300      	str	r3, [sp, #0]
 801267c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801267e:	2200      	movs	r2, #0
 8012680:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8012684:	6878      	ldr	r0, [r7, #4]
 8012686:	f000 f857 	bl	8012738 <UART_WaitOnFlagUntilTimeout>
 801268a:	4603      	mov	r3, r0
 801268c:	2b00      	cmp	r3, #0
 801268e:	d03c      	beq.n	801270a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012698:	e853 3f00 	ldrex	r3, [r3]
 801269c:	623b      	str	r3, [r7, #32]
   return(result);
 801269e:	6a3b      	ldr	r3, [r7, #32]
 80126a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80126a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	461a      	mov	r2, r3
 80126ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80126ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80126b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80126b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80126b6:	e841 2300 	strex	r3, r2, [r1]
 80126ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80126bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d1e6      	bne.n	8012690 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	3308      	adds	r3, #8
 80126c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126ca:	693b      	ldr	r3, [r7, #16]
 80126cc:	e853 3f00 	ldrex	r3, [r3]
 80126d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	f023 0301 	bic.w	r3, r3, #1
 80126d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	3308      	adds	r3, #8
 80126e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80126e2:	61fa      	str	r2, [r7, #28]
 80126e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126e6:	69b9      	ldr	r1, [r7, #24]
 80126e8:	69fa      	ldr	r2, [r7, #28]
 80126ea:	e841 2300 	strex	r3, r2, [r1]
 80126ee:	617b      	str	r3, [r7, #20]
   return(result);
 80126f0:	697b      	ldr	r3, [r7, #20]
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d1e5      	bne.n	80126c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	2220      	movs	r2, #32
 80126fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	2200      	movs	r2, #0
 8012702:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012706:	2303      	movs	r3, #3
 8012708:	e012      	b.n	8012730 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	2220      	movs	r2, #32
 801270e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	2220      	movs	r2, #32
 8012716:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	2200      	movs	r2, #0
 801271e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	2200      	movs	r2, #0
 8012724:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	2200      	movs	r2, #0
 801272a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801272e:	2300      	movs	r3, #0
}
 8012730:	4618      	mov	r0, r3
 8012732:	3758      	adds	r7, #88	@ 0x58
 8012734:	46bd      	mov	sp, r7
 8012736:	bd80      	pop	{r7, pc}

08012738 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8012738:	b580      	push	{r7, lr}
 801273a:	b084      	sub	sp, #16
 801273c:	af00      	add	r7, sp, #0
 801273e:	60f8      	str	r0, [r7, #12]
 8012740:	60b9      	str	r1, [r7, #8]
 8012742:	603b      	str	r3, [r7, #0]
 8012744:	4613      	mov	r3, r2
 8012746:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012748:	e04f      	b.n	80127ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801274a:	69bb      	ldr	r3, [r7, #24]
 801274c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012750:	d04b      	beq.n	80127ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012752:	f7f1 fd47 	bl	80041e4 <HAL_GetTick>
 8012756:	4602      	mov	r2, r0
 8012758:	683b      	ldr	r3, [r7, #0]
 801275a:	1ad3      	subs	r3, r2, r3
 801275c:	69ba      	ldr	r2, [r7, #24]
 801275e:	429a      	cmp	r2, r3
 8012760:	d302      	bcc.n	8012768 <UART_WaitOnFlagUntilTimeout+0x30>
 8012762:	69bb      	ldr	r3, [r7, #24]
 8012764:	2b00      	cmp	r3, #0
 8012766:	d101      	bne.n	801276c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8012768:	2303      	movs	r3, #3
 801276a:	e04e      	b.n	801280a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	f003 0304 	and.w	r3, r3, #4
 8012776:	2b00      	cmp	r3, #0
 8012778:	d037      	beq.n	80127ea <UART_WaitOnFlagUntilTimeout+0xb2>
 801277a:	68bb      	ldr	r3, [r7, #8]
 801277c:	2b80      	cmp	r3, #128	@ 0x80
 801277e:	d034      	beq.n	80127ea <UART_WaitOnFlagUntilTimeout+0xb2>
 8012780:	68bb      	ldr	r3, [r7, #8]
 8012782:	2b40      	cmp	r3, #64	@ 0x40
 8012784:	d031      	beq.n	80127ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	69db      	ldr	r3, [r3, #28]
 801278c:	f003 0308 	and.w	r3, r3, #8
 8012790:	2b08      	cmp	r3, #8
 8012792:	d110      	bne.n	80127b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	2208      	movs	r2, #8
 801279a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801279c:	68f8      	ldr	r0, [r7, #12]
 801279e:	f000 f839 	bl	8012814 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	2208      	movs	r2, #8
 80127a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	2200      	movs	r2, #0
 80127ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80127b2:	2301      	movs	r3, #1
 80127b4:	e029      	b.n	801280a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	69db      	ldr	r3, [r3, #28]
 80127bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80127c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80127c4:	d111      	bne.n	80127ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80127ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80127d0:	68f8      	ldr	r0, [r7, #12]
 80127d2:	f000 f81f 	bl	8012814 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	2220      	movs	r2, #32
 80127da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80127de:	68fb      	ldr	r3, [r7, #12]
 80127e0:	2200      	movs	r2, #0
 80127e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80127e6:	2303      	movs	r3, #3
 80127e8:	e00f      	b.n	801280a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	69da      	ldr	r2, [r3, #28]
 80127f0:	68bb      	ldr	r3, [r7, #8]
 80127f2:	4013      	ands	r3, r2
 80127f4:	68ba      	ldr	r2, [r7, #8]
 80127f6:	429a      	cmp	r2, r3
 80127f8:	bf0c      	ite	eq
 80127fa:	2301      	moveq	r3, #1
 80127fc:	2300      	movne	r3, #0
 80127fe:	b2db      	uxtb	r3, r3
 8012800:	461a      	mov	r2, r3
 8012802:	79fb      	ldrb	r3, [r7, #7]
 8012804:	429a      	cmp	r2, r3
 8012806:	d0a0      	beq.n	801274a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012808:	2300      	movs	r3, #0
}
 801280a:	4618      	mov	r0, r3
 801280c:	3710      	adds	r7, #16
 801280e:	46bd      	mov	sp, r7
 8012810:	bd80      	pop	{r7, pc}
	...

08012814 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012814:	b480      	push	{r7}
 8012816:	b095      	sub	sp, #84	@ 0x54
 8012818:	af00      	add	r7, sp, #0
 801281a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012824:	e853 3f00 	ldrex	r3, [r3]
 8012828:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801282a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801282c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8012830:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	461a      	mov	r2, r3
 8012838:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801283a:	643b      	str	r3, [r7, #64]	@ 0x40
 801283c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801283e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8012840:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012842:	e841 2300 	strex	r3, r2, [r1]
 8012846:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8012848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801284a:	2b00      	cmp	r3, #0
 801284c:	d1e6      	bne.n	801281c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	3308      	adds	r3, #8
 8012854:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012856:	6a3b      	ldr	r3, [r7, #32]
 8012858:	e853 3f00 	ldrex	r3, [r3]
 801285c:	61fb      	str	r3, [r7, #28]
   return(result);
 801285e:	69fa      	ldr	r2, [r7, #28]
 8012860:	4b1e      	ldr	r3, [pc, #120]	@ (80128dc <UART_EndRxTransfer+0xc8>)
 8012862:	4013      	ands	r3, r2
 8012864:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	3308      	adds	r3, #8
 801286c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801286e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8012870:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012872:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012874:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012876:	e841 2300 	strex	r3, r2, [r1]
 801287a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801287c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801287e:	2b00      	cmp	r3, #0
 8012880:	d1e5      	bne.n	801284e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012886:	2b01      	cmp	r3, #1
 8012888:	d118      	bne.n	80128bc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	e853 3f00 	ldrex	r3, [r3]
 8012896:	60bb      	str	r3, [r7, #8]
   return(result);
 8012898:	68bb      	ldr	r3, [r7, #8]
 801289a:	f023 0310 	bic.w	r3, r3, #16
 801289e:	647b      	str	r3, [r7, #68]	@ 0x44
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	461a      	mov	r2, r3
 80128a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80128a8:	61bb      	str	r3, [r7, #24]
 80128aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128ac:	6979      	ldr	r1, [r7, #20]
 80128ae:	69ba      	ldr	r2, [r7, #24]
 80128b0:	e841 2300 	strex	r3, r2, [r1]
 80128b4:	613b      	str	r3, [r7, #16]
   return(result);
 80128b6:	693b      	ldr	r3, [r7, #16]
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d1e6      	bne.n	801288a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	2220      	movs	r2, #32
 80128c0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	2200      	movs	r2, #0
 80128c8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	2200      	movs	r2, #0
 80128ce:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80128d0:	bf00      	nop
 80128d2:	3754      	adds	r7, #84	@ 0x54
 80128d4:	46bd      	mov	sp, r7
 80128d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128da:	4770      	bx	lr
 80128dc:	effffffe 	.word	0xeffffffe

080128e0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80128e0:	b480      	push	{r7}
 80128e2:	b085      	sub	sp, #20
 80128e4:	af00      	add	r7, sp, #0
 80128e6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80128ee:	2b01      	cmp	r3, #1
 80128f0:	d101      	bne.n	80128f6 <HAL_UARTEx_DisableFifoMode+0x16>
 80128f2:	2302      	movs	r3, #2
 80128f4:	e027      	b.n	8012946 <HAL_UARTEx_DisableFifoMode+0x66>
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	2201      	movs	r2, #1
 80128fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	2224      	movs	r2, #36	@ 0x24
 8012902:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	681a      	ldr	r2, [r3, #0]
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	f022 0201 	bic.w	r2, r2, #1
 801291c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8012924:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	2200      	movs	r2, #0
 801292a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	68fa      	ldr	r2, [r7, #12]
 8012932:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	2220      	movs	r2, #32
 8012938:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	2200      	movs	r2, #0
 8012940:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012944:	2300      	movs	r3, #0
}
 8012946:	4618      	mov	r0, r3
 8012948:	3714      	adds	r7, #20
 801294a:	46bd      	mov	sp, r7
 801294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012950:	4770      	bx	lr

08012952 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012952:	b580      	push	{r7, lr}
 8012954:	b084      	sub	sp, #16
 8012956:	af00      	add	r7, sp, #0
 8012958:	6078      	str	r0, [r7, #4]
 801295a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012962:	2b01      	cmp	r3, #1
 8012964:	d101      	bne.n	801296a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012966:	2302      	movs	r3, #2
 8012968:	e02d      	b.n	80129c6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	2201      	movs	r2, #1
 801296e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	2224      	movs	r2, #36	@ 0x24
 8012976:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	681a      	ldr	r2, [r3, #0]
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	f022 0201 	bic.w	r2, r2, #1
 8012990:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	689b      	ldr	r3, [r3, #8]
 8012998:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	683a      	ldr	r2, [r7, #0]
 80129a2:	430a      	orrs	r2, r1
 80129a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80129a6:	6878      	ldr	r0, [r7, #4]
 80129a8:	f000 f850 	bl	8012a4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	68fa      	ldr	r2, [r7, #12]
 80129b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	2220      	movs	r2, #32
 80129b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	2200      	movs	r2, #0
 80129c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80129c4:	2300      	movs	r3, #0
}
 80129c6:	4618      	mov	r0, r3
 80129c8:	3710      	adds	r7, #16
 80129ca:	46bd      	mov	sp, r7
 80129cc:	bd80      	pop	{r7, pc}

080129ce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80129ce:	b580      	push	{r7, lr}
 80129d0:	b084      	sub	sp, #16
 80129d2:	af00      	add	r7, sp, #0
 80129d4:	6078      	str	r0, [r7, #4]
 80129d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80129de:	2b01      	cmp	r3, #1
 80129e0:	d101      	bne.n	80129e6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80129e2:	2302      	movs	r3, #2
 80129e4:	e02d      	b.n	8012a42 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	2201      	movs	r2, #1
 80129ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	2224      	movs	r2, #36	@ 0x24
 80129f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	681a      	ldr	r2, [r3, #0]
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	f022 0201 	bic.w	r2, r2, #1
 8012a0c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	681b      	ldr	r3, [r3, #0]
 8012a12:	689b      	ldr	r3, [r3, #8]
 8012a14:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	683a      	ldr	r2, [r7, #0]
 8012a1e:	430a      	orrs	r2, r1
 8012a20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012a22:	6878      	ldr	r0, [r7, #4]
 8012a24:	f000 f812 	bl	8012a4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	68fa      	ldr	r2, [r7, #12]
 8012a2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	2220      	movs	r2, #32
 8012a34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	2200      	movs	r2, #0
 8012a3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012a40:	2300      	movs	r3, #0
}
 8012a42:	4618      	mov	r0, r3
 8012a44:	3710      	adds	r7, #16
 8012a46:	46bd      	mov	sp, r7
 8012a48:	bd80      	pop	{r7, pc}
	...

08012a4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012a4c:	b480      	push	{r7}
 8012a4e:	b085      	sub	sp, #20
 8012a50:	af00      	add	r7, sp, #0
 8012a52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d108      	bne.n	8012a6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	2201      	movs	r2, #1
 8012a60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	2201      	movs	r2, #1
 8012a68:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012a6c:	e031      	b.n	8012ad2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012a6e:	2310      	movs	r3, #16
 8012a70:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012a72:	2310      	movs	r3, #16
 8012a74:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	689b      	ldr	r3, [r3, #8]
 8012a7c:	0e5b      	lsrs	r3, r3, #25
 8012a7e:	b2db      	uxtb	r3, r3
 8012a80:	f003 0307 	and.w	r3, r3, #7
 8012a84:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	689b      	ldr	r3, [r3, #8]
 8012a8c:	0f5b      	lsrs	r3, r3, #29
 8012a8e:	b2db      	uxtb	r3, r3
 8012a90:	f003 0307 	and.w	r3, r3, #7
 8012a94:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012a96:	7bbb      	ldrb	r3, [r7, #14]
 8012a98:	7b3a      	ldrb	r2, [r7, #12]
 8012a9a:	4911      	ldr	r1, [pc, #68]	@ (8012ae0 <UARTEx_SetNbDataToProcess+0x94>)
 8012a9c:	5c8a      	ldrb	r2, [r1, r2]
 8012a9e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012aa2:	7b3a      	ldrb	r2, [r7, #12]
 8012aa4:	490f      	ldr	r1, [pc, #60]	@ (8012ae4 <UARTEx_SetNbDataToProcess+0x98>)
 8012aa6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012aa8:	fb93 f3f2 	sdiv	r3, r3, r2
 8012aac:	b29a      	uxth	r2, r3
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012ab4:	7bfb      	ldrb	r3, [r7, #15]
 8012ab6:	7b7a      	ldrb	r2, [r7, #13]
 8012ab8:	4909      	ldr	r1, [pc, #36]	@ (8012ae0 <UARTEx_SetNbDataToProcess+0x94>)
 8012aba:	5c8a      	ldrb	r2, [r1, r2]
 8012abc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012ac0:	7b7a      	ldrb	r2, [r7, #13]
 8012ac2:	4908      	ldr	r1, [pc, #32]	@ (8012ae4 <UARTEx_SetNbDataToProcess+0x98>)
 8012ac4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012ac6:	fb93 f3f2 	sdiv	r3, r3, r2
 8012aca:	b29a      	uxth	r2, r3
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8012ad2:	bf00      	nop
 8012ad4:	3714      	adds	r7, #20
 8012ad6:	46bd      	mov	sp, r7
 8012ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012adc:	4770      	bx	lr
 8012ade:	bf00      	nop
 8012ae0:	080188a0 	.word	0x080188a0
 8012ae4:	080188a8 	.word	0x080188a8

08012ae8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8012ae8:	b084      	sub	sp, #16
 8012aea:	b480      	push	{r7}
 8012aec:	b085      	sub	sp, #20
 8012aee:	af00      	add	r7, sp, #0
 8012af0:	6078      	str	r0, [r7, #4]
 8012af2:	f107 001c 	add.w	r0, r7, #28
 8012af6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8012afa:	2300      	movs	r3, #0
 8012afc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8012afe:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8012b00:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8012b02:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8012b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 8012b06:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8012b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 8012b0a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8012b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 8012b0e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8012b10:	68fa      	ldr	r2, [r7, #12]
 8012b12:	4313      	orrs	r3, r2
 8012b14:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	685a      	ldr	r2, [r3, #4]
 8012b1a:	4b07      	ldr	r3, [pc, #28]	@ (8012b38 <SDMMC_Init+0x50>)
 8012b1c:	4013      	ands	r3, r2
 8012b1e:	68fa      	ldr	r2, [r7, #12]
 8012b20:	431a      	orrs	r2, r3
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8012b26:	2300      	movs	r3, #0
}
 8012b28:	4618      	mov	r0, r3
 8012b2a:	3714      	adds	r7, #20
 8012b2c:	46bd      	mov	sp, r7
 8012b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b32:	b004      	add	sp, #16
 8012b34:	4770      	bx	lr
 8012b36:	bf00      	nop
 8012b38:	ffc02c00 	.word	0xffc02c00

08012b3c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8012b3c:	b480      	push	{r7}
 8012b3e:	b083      	sub	sp, #12
 8012b40:	af00      	add	r7, sp, #0
 8012b42:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8012b4a:	4618      	mov	r0, r3
 8012b4c:	370c      	adds	r7, #12
 8012b4e:	46bd      	mov	sp, r7
 8012b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b54:	4770      	bx	lr

08012b56 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8012b56:	b480      	push	{r7}
 8012b58:	b083      	sub	sp, #12
 8012b5a:	af00      	add	r7, sp, #0
 8012b5c:	6078      	str	r0, [r7, #4]
 8012b5e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8012b60:	683b      	ldr	r3, [r7, #0]
 8012b62:	681a      	ldr	r2, [r3, #0]
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8012b6a:	2300      	movs	r3, #0
}
 8012b6c:	4618      	mov	r0, r3
 8012b6e:	370c      	adds	r7, #12
 8012b70:	46bd      	mov	sp, r7
 8012b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b76:	4770      	bx	lr

08012b78 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8012b78:	b480      	push	{r7}
 8012b7a:	b083      	sub	sp, #12
 8012b7c:	af00      	add	r7, sp, #0
 8012b7e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	f043 0203 	orr.w	r2, r3, #3
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8012b8c:	2300      	movs	r3, #0
}
 8012b8e:	4618      	mov	r0, r3
 8012b90:	370c      	adds	r7, #12
 8012b92:	46bd      	mov	sp, r7
 8012b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b98:	4770      	bx	lr

08012b9a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8012b9a:	b480      	push	{r7}
 8012b9c:	b083      	sub	sp, #12
 8012b9e:	af00      	add	r7, sp, #0
 8012ba0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	f003 0303 	and.w	r3, r3, #3
}
 8012baa:	4618      	mov	r0, r3
 8012bac:	370c      	adds	r7, #12
 8012bae:	46bd      	mov	sp, r7
 8012bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bb4:	4770      	bx	lr
	...

08012bb8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8012bb8:	b480      	push	{r7}
 8012bba:	b085      	sub	sp, #20
 8012bbc:	af00      	add	r7, sp, #0
 8012bbe:	6078      	str	r0, [r7, #4]
 8012bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012bc2:	2300      	movs	r3, #0
 8012bc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8012bc6:	683b      	ldr	r3, [r7, #0]
 8012bc8:	681a      	ldr	r2, [r3, #0]
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012bce:	683b      	ldr	r3, [r7, #0]
 8012bd0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8012bd2:	683b      	ldr	r3, [r7, #0]
 8012bd4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012bd6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8012bd8:	683b      	ldr	r3, [r7, #0]
 8012bda:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8012bdc:	431a      	orrs	r2, r3
                       Command->CPSM);
 8012bde:	683b      	ldr	r3, [r7, #0]
 8012be0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8012be2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012be4:	68fa      	ldr	r2, [r7, #12]
 8012be6:	4313      	orrs	r3, r2
 8012be8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	68da      	ldr	r2, [r3, #12]
 8012bee:	4b06      	ldr	r3, [pc, #24]	@ (8012c08 <SDMMC_SendCommand+0x50>)
 8012bf0:	4013      	ands	r3, r2
 8012bf2:	68fa      	ldr	r2, [r7, #12]
 8012bf4:	431a      	orrs	r2, r3
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012bfa:	2300      	movs	r3, #0
}
 8012bfc:	4618      	mov	r0, r3
 8012bfe:	3714      	adds	r7, #20
 8012c00:	46bd      	mov	sp, r7
 8012c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c06:	4770      	bx	lr
 8012c08:	fffee0c0 	.word	0xfffee0c0

08012c0c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8012c0c:	b480      	push	{r7}
 8012c0e:	b083      	sub	sp, #12
 8012c10:	af00      	add	r7, sp, #0
 8012c12:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	691b      	ldr	r3, [r3, #16]
 8012c18:	b2db      	uxtb	r3, r3
}
 8012c1a:	4618      	mov	r0, r3
 8012c1c:	370c      	adds	r7, #12
 8012c1e:	46bd      	mov	sp, r7
 8012c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c24:	4770      	bx	lr

08012c26 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8012c26:	b480      	push	{r7}
 8012c28:	b085      	sub	sp, #20
 8012c2a:	af00      	add	r7, sp, #0
 8012c2c:	6078      	str	r0, [r7, #4]
 8012c2e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	3314      	adds	r3, #20
 8012c34:	461a      	mov	r2, r3
 8012c36:	683b      	ldr	r3, [r7, #0]
 8012c38:	4413      	add	r3, r2
 8012c3a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	681b      	ldr	r3, [r3, #0]
}
 8012c40:	4618      	mov	r0, r3
 8012c42:	3714      	adds	r7, #20
 8012c44:	46bd      	mov	sp, r7
 8012c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c4a:	4770      	bx	lr

08012c4c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8012c4c:	b480      	push	{r7}
 8012c4e:	b085      	sub	sp, #20
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	6078      	str	r0, [r7, #4]
 8012c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012c56:	2300      	movs	r3, #0
 8012c58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8012c5a:	683b      	ldr	r3, [r7, #0]
 8012c5c:	681a      	ldr	r2, [r3, #0]
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8012c62:	683b      	ldr	r3, [r7, #0]
 8012c64:	685a      	ldr	r2, [r3, #4]
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012c6a:	683b      	ldr	r3, [r7, #0]
 8012c6c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8012c6e:	683b      	ldr	r3, [r7, #0]
 8012c70:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012c72:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8012c74:	683b      	ldr	r3, [r7, #0]
 8012c76:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8012c78:	431a      	orrs	r2, r3
                       Data->DPSM);
 8012c7a:	683b      	ldr	r3, [r7, #0]
 8012c7c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8012c7e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012c80:	68fa      	ldr	r2, [r7, #12]
 8012c82:	4313      	orrs	r3, r2
 8012c84:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c8a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8012c8e:	68fb      	ldr	r3, [r7, #12]
 8012c90:	431a      	orrs	r2, r3
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8012c96:	2300      	movs	r3, #0

}
 8012c98:	4618      	mov	r0, r3
 8012c9a:	3714      	adds	r7, #20
 8012c9c:	46bd      	mov	sp, r7
 8012c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ca2:	4770      	bx	lr

08012ca4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8012ca4:	b580      	push	{r7, lr}
 8012ca6:	b088      	sub	sp, #32
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	6078      	str	r0, [r7, #4]
 8012cac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8012cae:	683b      	ldr	r3, [r7, #0]
 8012cb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8012cb2:	2310      	movs	r3, #16
 8012cb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012cb6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012cba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012cbc:	2300      	movs	r3, #0
 8012cbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012cc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012cc4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012cc6:	f107 0308 	add.w	r3, r7, #8
 8012cca:	4619      	mov	r1, r3
 8012ccc:	6878      	ldr	r0, [r7, #4]
 8012cce:	f7ff ff73 	bl	8012bb8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8012cd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012cd6:	2110      	movs	r1, #16
 8012cd8:	6878      	ldr	r0, [r7, #4]
 8012cda:	f000 fa5f 	bl	801319c <SDMMC_GetCmdResp1>
 8012cde:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012ce0:	69fb      	ldr	r3, [r7, #28]
}
 8012ce2:	4618      	mov	r0, r3
 8012ce4:	3720      	adds	r7, #32
 8012ce6:	46bd      	mov	sp, r7
 8012ce8:	bd80      	pop	{r7, pc}

08012cea <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012cea:	b580      	push	{r7, lr}
 8012cec:	b088      	sub	sp, #32
 8012cee:	af00      	add	r7, sp, #0
 8012cf0:	6078      	str	r0, [r7, #4]
 8012cf2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012cf4:	683b      	ldr	r3, [r7, #0]
 8012cf6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8012cf8:	2311      	movs	r3, #17
 8012cfa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012cfc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012d00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012d02:	2300      	movs	r3, #0
 8012d04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012d06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012d0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012d0c:	f107 0308 	add.w	r3, r7, #8
 8012d10:	4619      	mov	r1, r3
 8012d12:	6878      	ldr	r0, [r7, #4]
 8012d14:	f7ff ff50 	bl	8012bb8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012d18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012d1c:	2111      	movs	r1, #17
 8012d1e:	6878      	ldr	r0, [r7, #4]
 8012d20:	f000 fa3c 	bl	801319c <SDMMC_GetCmdResp1>
 8012d24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012d26:	69fb      	ldr	r3, [r7, #28]
}
 8012d28:	4618      	mov	r0, r3
 8012d2a:	3720      	adds	r7, #32
 8012d2c:	46bd      	mov	sp, r7
 8012d2e:	bd80      	pop	{r7, pc}

08012d30 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012d30:	b580      	push	{r7, lr}
 8012d32:	b088      	sub	sp, #32
 8012d34:	af00      	add	r7, sp, #0
 8012d36:	6078      	str	r0, [r7, #4]
 8012d38:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012d3a:	683b      	ldr	r3, [r7, #0]
 8012d3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8012d3e:	2312      	movs	r3, #18
 8012d40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012d42:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012d46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012d48:	2300      	movs	r3, #0
 8012d4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012d4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012d50:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012d52:	f107 0308 	add.w	r3, r7, #8
 8012d56:	4619      	mov	r1, r3
 8012d58:	6878      	ldr	r0, [r7, #4]
 8012d5a:	f7ff ff2d 	bl	8012bb8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012d5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012d62:	2112      	movs	r1, #18
 8012d64:	6878      	ldr	r0, [r7, #4]
 8012d66:	f000 fa19 	bl	801319c <SDMMC_GetCmdResp1>
 8012d6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012d6c:	69fb      	ldr	r3, [r7, #28]
}
 8012d6e:	4618      	mov	r0, r3
 8012d70:	3720      	adds	r7, #32
 8012d72:	46bd      	mov	sp, r7
 8012d74:	bd80      	pop	{r7, pc}

08012d76 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012d76:	b580      	push	{r7, lr}
 8012d78:	b088      	sub	sp, #32
 8012d7a:	af00      	add	r7, sp, #0
 8012d7c:	6078      	str	r0, [r7, #4]
 8012d7e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012d80:	683b      	ldr	r3, [r7, #0]
 8012d82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8012d84:	2318      	movs	r3, #24
 8012d86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012d88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012d8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012d8e:	2300      	movs	r3, #0
 8012d90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012d92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012d96:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012d98:	f107 0308 	add.w	r3, r7, #8
 8012d9c:	4619      	mov	r1, r3
 8012d9e:	6878      	ldr	r0, [r7, #4]
 8012da0:	f7ff ff0a 	bl	8012bb8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012da4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012da8:	2118      	movs	r1, #24
 8012daa:	6878      	ldr	r0, [r7, #4]
 8012dac:	f000 f9f6 	bl	801319c <SDMMC_GetCmdResp1>
 8012db0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012db2:	69fb      	ldr	r3, [r7, #28]
}
 8012db4:	4618      	mov	r0, r3
 8012db6:	3720      	adds	r7, #32
 8012db8:	46bd      	mov	sp, r7
 8012dba:	bd80      	pop	{r7, pc}

08012dbc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012dbc:	b580      	push	{r7, lr}
 8012dbe:	b088      	sub	sp, #32
 8012dc0:	af00      	add	r7, sp, #0
 8012dc2:	6078      	str	r0, [r7, #4]
 8012dc4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012dc6:	683b      	ldr	r3, [r7, #0]
 8012dc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8012dca:	2319      	movs	r3, #25
 8012dcc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012dce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012dd2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012dd4:	2300      	movs	r3, #0
 8012dd6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012dd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012ddc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012dde:	f107 0308 	add.w	r3, r7, #8
 8012de2:	4619      	mov	r1, r3
 8012de4:	6878      	ldr	r0, [r7, #4]
 8012de6:	f7ff fee7 	bl	8012bb8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012dea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012dee:	2119      	movs	r1, #25
 8012df0:	6878      	ldr	r0, [r7, #4]
 8012df2:	f000 f9d3 	bl	801319c <SDMMC_GetCmdResp1>
 8012df6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012df8:	69fb      	ldr	r3, [r7, #28]
}
 8012dfa:	4618      	mov	r0, r3
 8012dfc:	3720      	adds	r7, #32
 8012dfe:	46bd      	mov	sp, r7
 8012e00:	bd80      	pop	{r7, pc}
	...

08012e04 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8012e04:	b580      	push	{r7, lr}
 8012e06:	b088      	sub	sp, #32
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8012e0c:	2300      	movs	r3, #0
 8012e0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8012e10:	230c      	movs	r3, #12
 8012e12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012e14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012e18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012e1a:	2300      	movs	r3, #0
 8012e1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012e1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012e22:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	68db      	ldr	r3, [r3, #12]
 8012e28:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	68db      	ldr	r3, [r3, #12]
 8012e34:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012e3c:	f107 0308 	add.w	r3, r7, #8
 8012e40:	4619      	mov	r1, r3
 8012e42:	6878      	ldr	r0, [r7, #4]
 8012e44:	f7ff feb8 	bl	8012bb8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8012e48:	4a0b      	ldr	r2, [pc, #44]	@ (8012e78 <SDMMC_CmdStopTransfer+0x74>)
 8012e4a:	210c      	movs	r1, #12
 8012e4c:	6878      	ldr	r0, [r7, #4]
 8012e4e:	f000 f9a5 	bl	801319c <SDMMC_GetCmdResp1>
 8012e52:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	68db      	ldr	r3, [r3, #12]
 8012e58:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8012e60:	69fb      	ldr	r3, [r7, #28]
 8012e62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012e66:	d101      	bne.n	8012e6c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8012e68:	2300      	movs	r3, #0
 8012e6a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8012e6c:	69fb      	ldr	r3, [r7, #28]
}
 8012e6e:	4618      	mov	r0, r3
 8012e70:	3720      	adds	r7, #32
 8012e72:	46bd      	mov	sp, r7
 8012e74:	bd80      	pop	{r7, pc}
 8012e76:	bf00      	nop
 8012e78:	05f5e100 	.word	0x05f5e100

08012e7c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8012e7c:	b580      	push	{r7, lr}
 8012e7e:	b088      	sub	sp, #32
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	6078      	str	r0, [r7, #4]
 8012e84:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8012e86:	683b      	ldr	r3, [r7, #0]
 8012e88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8012e8a:	2307      	movs	r3, #7
 8012e8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012e8e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012e92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012e94:	2300      	movs	r3, #0
 8012e96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012e98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012e9c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012e9e:	f107 0308 	add.w	r3, r7, #8
 8012ea2:	4619      	mov	r1, r3
 8012ea4:	6878      	ldr	r0, [r7, #4]
 8012ea6:	f7ff fe87 	bl	8012bb8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8012eaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012eae:	2107      	movs	r1, #7
 8012eb0:	6878      	ldr	r0, [r7, #4]
 8012eb2:	f000 f973 	bl	801319c <SDMMC_GetCmdResp1>
 8012eb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012eb8:	69fb      	ldr	r3, [r7, #28]
}
 8012eba:	4618      	mov	r0, r3
 8012ebc:	3720      	adds	r7, #32
 8012ebe:	46bd      	mov	sp, r7
 8012ec0:	bd80      	pop	{r7, pc}

08012ec2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8012ec2:	b580      	push	{r7, lr}
 8012ec4:	b088      	sub	sp, #32
 8012ec6:	af00      	add	r7, sp, #0
 8012ec8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8012eca:	2300      	movs	r3, #0
 8012ecc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8012ece:	2300      	movs	r3, #0
 8012ed0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8012ed2:	2300      	movs	r3, #0
 8012ed4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012ed6:	2300      	movs	r3, #0
 8012ed8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012eda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012ede:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012ee0:	f107 0308 	add.w	r3, r7, #8
 8012ee4:	4619      	mov	r1, r3
 8012ee6:	6878      	ldr	r0, [r7, #4]
 8012ee8:	f7ff fe66 	bl	8012bb8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8012eec:	6878      	ldr	r0, [r7, #4]
 8012eee:	f000 fb97 	bl	8013620 <SDMMC_GetCmdError>
 8012ef2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012ef4:	69fb      	ldr	r3, [r7, #28]
}
 8012ef6:	4618      	mov	r0, r3
 8012ef8:	3720      	adds	r7, #32
 8012efa:	46bd      	mov	sp, r7
 8012efc:	bd80      	pop	{r7, pc}

08012efe <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8012efe:	b580      	push	{r7, lr}
 8012f00:	b088      	sub	sp, #32
 8012f02:	af00      	add	r7, sp, #0
 8012f04:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8012f06:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8012f0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8012f0c:	2308      	movs	r3, #8
 8012f0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012f10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012f14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012f16:	2300      	movs	r3, #0
 8012f18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012f1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012f1e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012f20:	f107 0308 	add.w	r3, r7, #8
 8012f24:	4619      	mov	r1, r3
 8012f26:	6878      	ldr	r0, [r7, #4]
 8012f28:	f7ff fe46 	bl	8012bb8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8012f2c:	6878      	ldr	r0, [r7, #4]
 8012f2e:	f000 fb29 	bl	8013584 <SDMMC_GetCmdResp7>
 8012f32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012f34:	69fb      	ldr	r3, [r7, #28]
}
 8012f36:	4618      	mov	r0, r3
 8012f38:	3720      	adds	r7, #32
 8012f3a:	46bd      	mov	sp, r7
 8012f3c:	bd80      	pop	{r7, pc}

08012f3e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012f3e:	b580      	push	{r7, lr}
 8012f40:	b088      	sub	sp, #32
 8012f42:	af00      	add	r7, sp, #0
 8012f44:	6078      	str	r0, [r7, #4]
 8012f46:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8012f48:	683b      	ldr	r3, [r7, #0]
 8012f4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8012f4c:	2337      	movs	r3, #55	@ 0x37
 8012f4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012f50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012f54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012f56:	2300      	movs	r3, #0
 8012f58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012f5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012f5e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012f60:	f107 0308 	add.w	r3, r7, #8
 8012f64:	4619      	mov	r1, r3
 8012f66:	6878      	ldr	r0, [r7, #4]
 8012f68:	f7ff fe26 	bl	8012bb8 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8012f6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012f70:	2137      	movs	r1, #55	@ 0x37
 8012f72:	6878      	ldr	r0, [r7, #4]
 8012f74:	f000 f912 	bl	801319c <SDMMC_GetCmdResp1>
 8012f78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012f7a:	69fb      	ldr	r3, [r7, #28]
}
 8012f7c:	4618      	mov	r0, r3
 8012f7e:	3720      	adds	r7, #32
 8012f80:	46bd      	mov	sp, r7
 8012f82:	bd80      	pop	{r7, pc}

08012f84 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012f84:	b580      	push	{r7, lr}
 8012f86:	b088      	sub	sp, #32
 8012f88:	af00      	add	r7, sp, #0
 8012f8a:	6078      	str	r0, [r7, #4]
 8012f8c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8012f8e:	683b      	ldr	r3, [r7, #0]
 8012f90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8012f92:	2329      	movs	r3, #41	@ 0x29
 8012f94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012f96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012f9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012f9c:	2300      	movs	r3, #0
 8012f9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012fa0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012fa4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012fa6:	f107 0308 	add.w	r3, r7, #8
 8012faa:	4619      	mov	r1, r3
 8012fac:	6878      	ldr	r0, [r7, #4]
 8012fae:	f7ff fe03 	bl	8012bb8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8012fb2:	6878      	ldr	r0, [r7, #4]
 8012fb4:	f000 fa2e 	bl	8013414 <SDMMC_GetCmdResp3>
 8012fb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012fba:	69fb      	ldr	r3, [r7, #28]
}
 8012fbc:	4618      	mov	r0, r3
 8012fbe:	3720      	adds	r7, #32
 8012fc0:	46bd      	mov	sp, r7
 8012fc2:	bd80      	pop	{r7, pc}

08012fc4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8012fc4:	b580      	push	{r7, lr}
 8012fc6:	b088      	sub	sp, #32
 8012fc8:	af00      	add	r7, sp, #0
 8012fca:	6078      	str	r0, [r7, #4]
 8012fcc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8012fce:	683b      	ldr	r3, [r7, #0]
 8012fd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8012fd2:	2306      	movs	r3, #6
 8012fd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012fd6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012fda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012fdc:	2300      	movs	r3, #0
 8012fde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012fe0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012fe4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012fe6:	f107 0308 	add.w	r3, r7, #8
 8012fea:	4619      	mov	r1, r3
 8012fec:	6878      	ldr	r0, [r7, #4]
 8012fee:	f7ff fde3 	bl	8012bb8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8012ff2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012ff6:	2106      	movs	r1, #6
 8012ff8:	6878      	ldr	r0, [r7, #4]
 8012ffa:	f000 f8cf 	bl	801319c <SDMMC_GetCmdResp1>
 8012ffe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013000:	69fb      	ldr	r3, [r7, #28]
}
 8013002:	4618      	mov	r0, r3
 8013004:	3720      	adds	r7, #32
 8013006:	46bd      	mov	sp, r7
 8013008:	bd80      	pop	{r7, pc}

0801300a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 801300a:	b580      	push	{r7, lr}
 801300c:	b088      	sub	sp, #32
 801300e:	af00      	add	r7, sp, #0
 8013010:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8013012:	2300      	movs	r3, #0
 8013014:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8013016:	2333      	movs	r3, #51	@ 0x33
 8013018:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801301a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801301e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013020:	2300      	movs	r3, #0
 8013022:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013024:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8013028:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801302a:	f107 0308 	add.w	r3, r7, #8
 801302e:	4619      	mov	r1, r3
 8013030:	6878      	ldr	r0, [r7, #4]
 8013032:	f7ff fdc1 	bl	8012bb8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8013036:	f241 3288 	movw	r2, #5000	@ 0x1388
 801303a:	2133      	movs	r1, #51	@ 0x33
 801303c:	6878      	ldr	r0, [r7, #4]
 801303e:	f000 f8ad 	bl	801319c <SDMMC_GetCmdResp1>
 8013042:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013044:	69fb      	ldr	r3, [r7, #28]
}
 8013046:	4618      	mov	r0, r3
 8013048:	3720      	adds	r7, #32
 801304a:	46bd      	mov	sp, r7
 801304c:	bd80      	pop	{r7, pc}

0801304e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 801304e:	b580      	push	{r7, lr}
 8013050:	b088      	sub	sp, #32
 8013052:	af00      	add	r7, sp, #0
 8013054:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8013056:	2300      	movs	r3, #0
 8013058:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801305a:	2302      	movs	r3, #2
 801305c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801305e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8013062:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013064:	2300      	movs	r3, #0
 8013066:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013068:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801306c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801306e:	f107 0308 	add.w	r3, r7, #8
 8013072:	4619      	mov	r1, r3
 8013074:	6878      	ldr	r0, [r7, #4]
 8013076:	f7ff fd9f 	bl	8012bb8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801307a:	6878      	ldr	r0, [r7, #4]
 801307c:	f000 f980 	bl	8013380 <SDMMC_GetCmdResp2>
 8013080:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013082:	69fb      	ldr	r3, [r7, #28]
}
 8013084:	4618      	mov	r0, r3
 8013086:	3720      	adds	r7, #32
 8013088:	46bd      	mov	sp, r7
 801308a:	bd80      	pop	{r7, pc}

0801308c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801308c:	b580      	push	{r7, lr}
 801308e:	b088      	sub	sp, #32
 8013090:	af00      	add	r7, sp, #0
 8013092:	6078      	str	r0, [r7, #4]
 8013094:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8013096:	683b      	ldr	r3, [r7, #0]
 8013098:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 801309a:	2309      	movs	r3, #9
 801309c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801309e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80130a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80130a4:	2300      	movs	r3, #0
 80130a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80130a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80130ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80130ae:	f107 0308 	add.w	r3, r7, #8
 80130b2:	4619      	mov	r1, r3
 80130b4:	6878      	ldr	r0, [r7, #4]
 80130b6:	f7ff fd7f 	bl	8012bb8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80130ba:	6878      	ldr	r0, [r7, #4]
 80130bc:	f000 f960 	bl	8013380 <SDMMC_GetCmdResp2>
 80130c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80130c2:	69fb      	ldr	r3, [r7, #28]
}
 80130c4:	4618      	mov	r0, r3
 80130c6:	3720      	adds	r7, #32
 80130c8:	46bd      	mov	sp, r7
 80130ca:	bd80      	pop	{r7, pc}

080130cc <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80130cc:	b580      	push	{r7, lr}
 80130ce:	b088      	sub	sp, #32
 80130d0:	af00      	add	r7, sp, #0
 80130d2:	6078      	str	r0, [r7, #4]
 80130d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80130d6:	2300      	movs	r3, #0
 80130d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80130da:	2303      	movs	r3, #3
 80130dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80130de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80130e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80130e4:	2300      	movs	r3, #0
 80130e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80130e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80130ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80130ee:	f107 0308 	add.w	r3, r7, #8
 80130f2:	4619      	mov	r1, r3
 80130f4:	6878      	ldr	r0, [r7, #4]
 80130f6:	f7ff fd5f 	bl	8012bb8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80130fa:	683a      	ldr	r2, [r7, #0]
 80130fc:	2103      	movs	r1, #3
 80130fe:	6878      	ldr	r0, [r7, #4]
 8013100:	f000 f9c8 	bl	8013494 <SDMMC_GetCmdResp6>
 8013104:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013106:	69fb      	ldr	r3, [r7, #28]
}
 8013108:	4618      	mov	r0, r3
 801310a:	3720      	adds	r7, #32
 801310c:	46bd      	mov	sp, r7
 801310e:	bd80      	pop	{r7, pc}

08013110 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8013110:	b580      	push	{r7, lr}
 8013112:	b088      	sub	sp, #32
 8013114:	af00      	add	r7, sp, #0
 8013116:	6078      	str	r0, [r7, #4]
 8013118:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801311a:	683b      	ldr	r3, [r7, #0]
 801311c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801311e:	230d      	movs	r3, #13
 8013120:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013122:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013126:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013128:	2300      	movs	r3, #0
 801312a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801312c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8013130:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013132:	f107 0308 	add.w	r3, r7, #8
 8013136:	4619      	mov	r1, r3
 8013138:	6878      	ldr	r0, [r7, #4]
 801313a:	f7ff fd3d 	bl	8012bb8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 801313e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013142:	210d      	movs	r1, #13
 8013144:	6878      	ldr	r0, [r7, #4]
 8013146:	f000 f829 	bl	801319c <SDMMC_GetCmdResp1>
 801314a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801314c:	69fb      	ldr	r3, [r7, #28]
}
 801314e:	4618      	mov	r0, r3
 8013150:	3720      	adds	r7, #32
 8013152:	46bd      	mov	sp, r7
 8013154:	bd80      	pop	{r7, pc}

08013156 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8013156:	b580      	push	{r7, lr}
 8013158:	b088      	sub	sp, #32
 801315a:	af00      	add	r7, sp, #0
 801315c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801315e:	2300      	movs	r3, #0
 8013160:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8013162:	230d      	movs	r3, #13
 8013164:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013166:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801316a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801316c:	2300      	movs	r3, #0
 801316e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013170:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8013174:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013176:	f107 0308 	add.w	r3, r7, #8
 801317a:	4619      	mov	r1, r3
 801317c:	6878      	ldr	r0, [r7, #4]
 801317e:	f7ff fd1b 	bl	8012bb8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8013182:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013186:	210d      	movs	r1, #13
 8013188:	6878      	ldr	r0, [r7, #4]
 801318a:	f000 f807 	bl	801319c <SDMMC_GetCmdResp1>
 801318e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013190:	69fb      	ldr	r3, [r7, #28]
}
 8013192:	4618      	mov	r0, r3
 8013194:	3720      	adds	r7, #32
 8013196:	46bd      	mov	sp, r7
 8013198:	bd80      	pop	{r7, pc}
	...

0801319c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 801319c:	b580      	push	{r7, lr}
 801319e:	b088      	sub	sp, #32
 80131a0:	af00      	add	r7, sp, #0
 80131a2:	60f8      	str	r0, [r7, #12]
 80131a4:	460b      	mov	r3, r1
 80131a6:	607a      	str	r2, [r7, #4]
 80131a8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80131aa:	4b70      	ldr	r3, [pc, #448]	@ (801336c <SDMMC_GetCmdResp1+0x1d0>)
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	4a70      	ldr	r2, [pc, #448]	@ (8013370 <SDMMC_GetCmdResp1+0x1d4>)
 80131b0:	fba2 2303 	umull	r2, r3, r2, r3
 80131b4:	0a5a      	lsrs	r2, r3, #9
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	fb02 f303 	mul.w	r3, r2, r3
 80131bc:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80131be:	69fb      	ldr	r3, [r7, #28]
 80131c0:	1e5a      	subs	r2, r3, #1
 80131c2:	61fa      	str	r2, [r7, #28]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d102      	bne.n	80131ce <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80131c8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80131cc:	e0c9      	b.n	8013362 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80131ce:	68fb      	ldr	r3, [r7, #12]
 80131d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80131d2:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80131d4:	69ba      	ldr	r2, [r7, #24]
 80131d6:	4b67      	ldr	r3, [pc, #412]	@ (8013374 <SDMMC_GetCmdResp1+0x1d8>)
 80131d8:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d0ef      	beq.n	80131be <SDMMC_GetCmdResp1+0x22>
 80131de:	69bb      	ldr	r3, [r7, #24]
 80131e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d1ea      	bne.n	80131be <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80131ec:	f003 0304 	and.w	r3, r3, #4
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d004      	beq.n	80131fe <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80131f4:	68fb      	ldr	r3, [r7, #12]
 80131f6:	2204      	movs	r2, #4
 80131f8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80131fa:	2304      	movs	r3, #4
 80131fc:	e0b1      	b.n	8013362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013202:	f003 0301 	and.w	r3, r3, #1
 8013206:	2b00      	cmp	r3, #0
 8013208:	d004      	beq.n	8013214 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	2201      	movs	r2, #1
 801320e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013210:	2301      	movs	r3, #1
 8013212:	e0a6      	b.n	8013362 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	4a58      	ldr	r2, [pc, #352]	@ (8013378 <SDMMC_GetCmdResp1+0x1dc>)
 8013218:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801321a:	68f8      	ldr	r0, [r7, #12]
 801321c:	f7ff fcf6 	bl	8012c0c <SDMMC_GetCommandResponse>
 8013220:	4603      	mov	r3, r0
 8013222:	461a      	mov	r2, r3
 8013224:	7afb      	ldrb	r3, [r7, #11]
 8013226:	4293      	cmp	r3, r2
 8013228:	d001      	beq.n	801322e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801322a:	2301      	movs	r3, #1
 801322c:	e099      	b.n	8013362 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801322e:	2100      	movs	r1, #0
 8013230:	68f8      	ldr	r0, [r7, #12]
 8013232:	f7ff fcf8 	bl	8012c26 <SDMMC_GetResponse>
 8013236:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8013238:	697a      	ldr	r2, [r7, #20]
 801323a:	4b50      	ldr	r3, [pc, #320]	@ (801337c <SDMMC_GetCmdResp1+0x1e0>)
 801323c:	4013      	ands	r3, r2
 801323e:	2b00      	cmp	r3, #0
 8013240:	d101      	bne.n	8013246 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8013242:	2300      	movs	r3, #0
 8013244:	e08d      	b.n	8013362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8013246:	697b      	ldr	r3, [r7, #20]
 8013248:	2b00      	cmp	r3, #0
 801324a:	da02      	bge.n	8013252 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801324c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8013250:	e087      	b.n	8013362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8013252:	697b      	ldr	r3, [r7, #20]
 8013254:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8013258:	2b00      	cmp	r3, #0
 801325a:	d001      	beq.n	8013260 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801325c:	2340      	movs	r3, #64	@ 0x40
 801325e:	e080      	b.n	8013362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8013260:	697b      	ldr	r3, [r7, #20]
 8013262:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013266:	2b00      	cmp	r3, #0
 8013268:	d001      	beq.n	801326e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801326a:	2380      	movs	r3, #128	@ 0x80
 801326c:	e079      	b.n	8013362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801326e:	697b      	ldr	r3, [r7, #20]
 8013270:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8013274:	2b00      	cmp	r3, #0
 8013276:	d002      	beq.n	801327e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8013278:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801327c:	e071      	b.n	8013362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801327e:	697b      	ldr	r3, [r7, #20]
 8013280:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013284:	2b00      	cmp	r3, #0
 8013286:	d002      	beq.n	801328e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8013288:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801328c:	e069      	b.n	8013362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801328e:	697b      	ldr	r3, [r7, #20]
 8013290:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8013294:	2b00      	cmp	r3, #0
 8013296:	d002      	beq.n	801329e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8013298:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801329c:	e061      	b.n	8013362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801329e:	697b      	ldr	r3, [r7, #20]
 80132a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d002      	beq.n	80132ae <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80132a8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80132ac:	e059      	b.n	8013362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80132ae:	697b      	ldr	r3, [r7, #20]
 80132b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d002      	beq.n	80132be <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80132b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80132bc:	e051      	b.n	8013362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80132be:	697b      	ldr	r3, [r7, #20]
 80132c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d002      	beq.n	80132ce <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80132c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80132cc:	e049      	b.n	8013362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80132ce:	697b      	ldr	r3, [r7, #20]
 80132d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d002      	beq.n	80132de <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80132d8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80132dc:	e041      	b.n	8013362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80132de:	697b      	ldr	r3, [r7, #20]
 80132e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d002      	beq.n	80132ee <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80132e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80132ec:	e039      	b.n	8013362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80132ee:	697b      	ldr	r3, [r7, #20]
 80132f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d002      	beq.n	80132fe <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80132f8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80132fc:	e031      	b.n	8013362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80132fe:	697b      	ldr	r3, [r7, #20]
 8013300:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013304:	2b00      	cmp	r3, #0
 8013306:	d002      	beq.n	801330e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8013308:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 801330c:	e029      	b.n	8013362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801330e:	697b      	ldr	r3, [r7, #20]
 8013310:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8013314:	2b00      	cmp	r3, #0
 8013316:	d002      	beq.n	801331e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8013318:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801331c:	e021      	b.n	8013362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801331e:	697b      	ldr	r3, [r7, #20]
 8013320:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8013324:	2b00      	cmp	r3, #0
 8013326:	d002      	beq.n	801332e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8013328:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 801332c:	e019      	b.n	8013362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801332e:	697b      	ldr	r3, [r7, #20]
 8013330:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8013334:	2b00      	cmp	r3, #0
 8013336:	d002      	beq.n	801333e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8013338:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 801333c:	e011      	b.n	8013362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801333e:	697b      	ldr	r3, [r7, #20]
 8013340:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8013344:	2b00      	cmp	r3, #0
 8013346:	d002      	beq.n	801334e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8013348:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 801334c:	e009      	b.n	8013362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801334e:	697b      	ldr	r3, [r7, #20]
 8013350:	f003 0308 	and.w	r3, r3, #8
 8013354:	2b00      	cmp	r3, #0
 8013356:	d002      	beq.n	801335e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8013358:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 801335c:	e001      	b.n	8013362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801335e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8013362:	4618      	mov	r0, r3
 8013364:	3720      	adds	r7, #32
 8013366:	46bd      	mov	sp, r7
 8013368:	bd80      	pop	{r7, pc}
 801336a:	bf00      	nop
 801336c:	24000010 	.word	0x24000010
 8013370:	10624dd3 	.word	0x10624dd3
 8013374:	00200045 	.word	0x00200045
 8013378:	002000c5 	.word	0x002000c5
 801337c:	fdffe008 	.word	0xfdffe008

08013380 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8013380:	b480      	push	{r7}
 8013382:	b085      	sub	sp, #20
 8013384:	af00      	add	r7, sp, #0
 8013386:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013388:	4b1f      	ldr	r3, [pc, #124]	@ (8013408 <SDMMC_GetCmdResp2+0x88>)
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	4a1f      	ldr	r2, [pc, #124]	@ (801340c <SDMMC_GetCmdResp2+0x8c>)
 801338e:	fba2 2303 	umull	r2, r3, r2, r3
 8013392:	0a5b      	lsrs	r3, r3, #9
 8013394:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013398:	fb02 f303 	mul.w	r3, r2, r3
 801339c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	1e5a      	subs	r2, r3, #1
 80133a2:	60fa      	str	r2, [r7, #12]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d102      	bne.n	80133ae <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80133a8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80133ac:	e026      	b.n	80133fc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80133b2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80133b4:	68bb      	ldr	r3, [r7, #8]
 80133b6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d0ef      	beq.n	801339e <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80133be:	68bb      	ldr	r3, [r7, #8]
 80133c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d1ea      	bne.n	801339e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80133cc:	f003 0304 	and.w	r3, r3, #4
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d004      	beq.n	80133de <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	2204      	movs	r2, #4
 80133d8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80133da:	2304      	movs	r3, #4
 80133dc:	e00e      	b.n	80133fc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80133e2:	f003 0301 	and.w	r3, r3, #1
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d004      	beq.n	80133f4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	2201      	movs	r2, #1
 80133ee:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80133f0:	2301      	movs	r3, #1
 80133f2:	e003      	b.n	80133fc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	4a06      	ldr	r2, [pc, #24]	@ (8013410 <SDMMC_GetCmdResp2+0x90>)
 80133f8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80133fa:	2300      	movs	r3, #0
}
 80133fc:	4618      	mov	r0, r3
 80133fe:	3714      	adds	r7, #20
 8013400:	46bd      	mov	sp, r7
 8013402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013406:	4770      	bx	lr
 8013408:	24000010 	.word	0x24000010
 801340c:	10624dd3 	.word	0x10624dd3
 8013410:	002000c5 	.word	0x002000c5

08013414 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8013414:	b480      	push	{r7}
 8013416:	b085      	sub	sp, #20
 8013418:	af00      	add	r7, sp, #0
 801341a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801341c:	4b1a      	ldr	r3, [pc, #104]	@ (8013488 <SDMMC_GetCmdResp3+0x74>)
 801341e:	681b      	ldr	r3, [r3, #0]
 8013420:	4a1a      	ldr	r2, [pc, #104]	@ (801348c <SDMMC_GetCmdResp3+0x78>)
 8013422:	fba2 2303 	umull	r2, r3, r2, r3
 8013426:	0a5b      	lsrs	r3, r3, #9
 8013428:	f241 3288 	movw	r2, #5000	@ 0x1388
 801342c:	fb02 f303 	mul.w	r3, r2, r3
 8013430:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	1e5a      	subs	r2, r3, #1
 8013436:	60fa      	str	r2, [r7, #12]
 8013438:	2b00      	cmp	r3, #0
 801343a:	d102      	bne.n	8013442 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801343c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8013440:	e01b      	b.n	801347a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013446:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013448:	68bb      	ldr	r3, [r7, #8]
 801344a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801344e:	2b00      	cmp	r3, #0
 8013450:	d0ef      	beq.n	8013432 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013452:	68bb      	ldr	r3, [r7, #8]
 8013454:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013458:	2b00      	cmp	r3, #0
 801345a:	d1ea      	bne.n	8013432 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013460:	f003 0304 	and.w	r3, r3, #4
 8013464:	2b00      	cmp	r3, #0
 8013466:	d004      	beq.n	8013472 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	2204      	movs	r2, #4
 801346c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801346e:	2304      	movs	r3, #4
 8013470:	e003      	b.n	801347a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	4a06      	ldr	r2, [pc, #24]	@ (8013490 <SDMMC_GetCmdResp3+0x7c>)
 8013476:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8013478:	2300      	movs	r3, #0
}
 801347a:	4618      	mov	r0, r3
 801347c:	3714      	adds	r7, #20
 801347e:	46bd      	mov	sp, r7
 8013480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013484:	4770      	bx	lr
 8013486:	bf00      	nop
 8013488:	24000010 	.word	0x24000010
 801348c:	10624dd3 	.word	0x10624dd3
 8013490:	002000c5 	.word	0x002000c5

08013494 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8013494:	b580      	push	{r7, lr}
 8013496:	b088      	sub	sp, #32
 8013498:	af00      	add	r7, sp, #0
 801349a:	60f8      	str	r0, [r7, #12]
 801349c:	460b      	mov	r3, r1
 801349e:	607a      	str	r2, [r7, #4]
 80134a0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80134a2:	4b35      	ldr	r3, [pc, #212]	@ (8013578 <SDMMC_GetCmdResp6+0xe4>)
 80134a4:	681b      	ldr	r3, [r3, #0]
 80134a6:	4a35      	ldr	r2, [pc, #212]	@ (801357c <SDMMC_GetCmdResp6+0xe8>)
 80134a8:	fba2 2303 	umull	r2, r3, r2, r3
 80134ac:	0a5b      	lsrs	r3, r3, #9
 80134ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80134b2:	fb02 f303 	mul.w	r3, r2, r3
 80134b6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80134b8:	69fb      	ldr	r3, [r7, #28]
 80134ba:	1e5a      	subs	r2, r3, #1
 80134bc:	61fa      	str	r2, [r7, #28]
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d102      	bne.n	80134c8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80134c2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80134c6:	e052      	b.n	801356e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80134cc:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80134ce:	69bb      	ldr	r3, [r7, #24]
 80134d0:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d0ef      	beq.n	80134b8 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80134d8:	69bb      	ldr	r3, [r7, #24]
 80134da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80134de:	2b00      	cmp	r3, #0
 80134e0:	d1ea      	bne.n	80134b8 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80134e6:	f003 0304 	and.w	r3, r3, #4
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d004      	beq.n	80134f8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	2204      	movs	r2, #4
 80134f2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80134f4:	2304      	movs	r3, #4
 80134f6:	e03a      	b.n	801356e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80134fc:	f003 0301 	and.w	r3, r3, #1
 8013500:	2b00      	cmp	r3, #0
 8013502:	d004      	beq.n	801350e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	2201      	movs	r2, #1
 8013508:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801350a:	2301      	movs	r3, #1
 801350c:	e02f      	b.n	801356e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801350e:	68f8      	ldr	r0, [r7, #12]
 8013510:	f7ff fb7c 	bl	8012c0c <SDMMC_GetCommandResponse>
 8013514:	4603      	mov	r3, r0
 8013516:	461a      	mov	r2, r3
 8013518:	7afb      	ldrb	r3, [r7, #11]
 801351a:	4293      	cmp	r3, r2
 801351c:	d001      	beq.n	8013522 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801351e:	2301      	movs	r3, #1
 8013520:	e025      	b.n	801356e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	4a16      	ldr	r2, [pc, #88]	@ (8013580 <SDMMC_GetCmdResp6+0xec>)
 8013526:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8013528:	2100      	movs	r1, #0
 801352a:	68f8      	ldr	r0, [r7, #12]
 801352c:	f7ff fb7b 	bl	8012c26 <SDMMC_GetResponse>
 8013530:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8013532:	697b      	ldr	r3, [r7, #20]
 8013534:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8013538:	2b00      	cmp	r3, #0
 801353a:	d106      	bne.n	801354a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 801353c:	697b      	ldr	r3, [r7, #20]
 801353e:	0c1b      	lsrs	r3, r3, #16
 8013540:	b29a      	uxth	r2, r3
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8013546:	2300      	movs	r3, #0
 8013548:	e011      	b.n	801356e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801354a:	697b      	ldr	r3, [r7, #20]
 801354c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8013550:	2b00      	cmp	r3, #0
 8013552:	d002      	beq.n	801355a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013554:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8013558:	e009      	b.n	801356e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 801355a:	697b      	ldr	r3, [r7, #20]
 801355c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8013560:	2b00      	cmp	r3, #0
 8013562:	d002      	beq.n	801356a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8013564:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8013568:	e001      	b.n	801356e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801356a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 801356e:	4618      	mov	r0, r3
 8013570:	3720      	adds	r7, #32
 8013572:	46bd      	mov	sp, r7
 8013574:	bd80      	pop	{r7, pc}
 8013576:	bf00      	nop
 8013578:	24000010 	.word	0x24000010
 801357c:	10624dd3 	.word	0x10624dd3
 8013580:	002000c5 	.word	0x002000c5

08013584 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8013584:	b480      	push	{r7}
 8013586:	b085      	sub	sp, #20
 8013588:	af00      	add	r7, sp, #0
 801358a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801358c:	4b22      	ldr	r3, [pc, #136]	@ (8013618 <SDMMC_GetCmdResp7+0x94>)
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	4a22      	ldr	r2, [pc, #136]	@ (801361c <SDMMC_GetCmdResp7+0x98>)
 8013592:	fba2 2303 	umull	r2, r3, r2, r3
 8013596:	0a5b      	lsrs	r3, r3, #9
 8013598:	f241 3288 	movw	r2, #5000	@ 0x1388
 801359c:	fb02 f303 	mul.w	r3, r2, r3
 80135a0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	1e5a      	subs	r2, r3, #1
 80135a6:	60fa      	str	r2, [r7, #12]
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d102      	bne.n	80135b2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80135ac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80135b0:	e02c      	b.n	801360c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80135b6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80135b8:	68bb      	ldr	r3, [r7, #8]
 80135ba:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d0ef      	beq.n	80135a2 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80135c2:	68bb      	ldr	r3, [r7, #8]
 80135c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d1ea      	bne.n	80135a2 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80135d0:	f003 0304 	and.w	r3, r3, #4
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d004      	beq.n	80135e2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	2204      	movs	r2, #4
 80135dc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80135de:	2304      	movs	r3, #4
 80135e0:	e014      	b.n	801360c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80135e6:	f003 0301 	and.w	r3, r3, #1
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d004      	beq.n	80135f8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	2201      	movs	r2, #1
 80135f2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80135f4:	2301      	movs	r3, #1
 80135f6:	e009      	b.n	801360c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80135fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013600:	2b00      	cmp	r3, #0
 8013602:	d002      	beq.n	801360a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	2240      	movs	r2, #64	@ 0x40
 8013608:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 801360a:	2300      	movs	r3, #0

}
 801360c:	4618      	mov	r0, r3
 801360e:	3714      	adds	r7, #20
 8013610:	46bd      	mov	sp, r7
 8013612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013616:	4770      	bx	lr
 8013618:	24000010 	.word	0x24000010
 801361c:	10624dd3 	.word	0x10624dd3

08013620 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8013620:	b480      	push	{r7}
 8013622:	b085      	sub	sp, #20
 8013624:	af00      	add	r7, sp, #0
 8013626:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013628:	4b11      	ldr	r3, [pc, #68]	@ (8013670 <SDMMC_GetCmdError+0x50>)
 801362a:	681b      	ldr	r3, [r3, #0]
 801362c:	4a11      	ldr	r2, [pc, #68]	@ (8013674 <SDMMC_GetCmdError+0x54>)
 801362e:	fba2 2303 	umull	r2, r3, r2, r3
 8013632:	0a5b      	lsrs	r3, r3, #9
 8013634:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013638:	fb02 f303 	mul.w	r3, r2, r3
 801363c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	1e5a      	subs	r2, r3, #1
 8013642:	60fa      	str	r2, [r7, #12]
 8013644:	2b00      	cmp	r3, #0
 8013646:	d102      	bne.n	801364e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013648:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801364c:	e009      	b.n	8013662 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013656:	2b00      	cmp	r3, #0
 8013658:	d0f1      	beq.n	801363e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	4a06      	ldr	r2, [pc, #24]	@ (8013678 <SDMMC_GetCmdError+0x58>)
 801365e:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 8013660:	2300      	movs	r3, #0
}
 8013662:	4618      	mov	r0, r3
 8013664:	3714      	adds	r7, #20
 8013666:	46bd      	mov	sp, r7
 8013668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801366c:	4770      	bx	lr
 801366e:	bf00      	nop
 8013670:	24000010 	.word	0x24000010
 8013674:	10624dd3 	.word	0x10624dd3
 8013678:	002000c5 	.word	0x002000c5

0801367c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801367c:	b580      	push	{r7, lr}
 801367e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8013680:	4904      	ldr	r1, [pc, #16]	@ (8013694 <MX_FATFS_Init+0x18>)
 8013682:	4805      	ldr	r0, [pc, #20]	@ (8013698 <MX_FATFS_Init+0x1c>)
 8013684:	f000 fa8e 	bl	8013ba4 <FATFS_LinkDriver>
 8013688:	4603      	mov	r3, r0
 801368a:	461a      	mov	r2, r3
 801368c:	4b03      	ldr	r3, [pc, #12]	@ (801369c <MX_FATFS_Init+0x20>)
 801368e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8013690:	bf00      	nop
 8013692:	bd80      	pop	{r7, pc}
 8013694:	240009b0 	.word	0x240009b0
 8013698:	080188b0 	.word	0x080188b0
 801369c:	240009ac 	.word	0x240009ac

080136a0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80136a0:	b580      	push	{r7, lr}
 80136a2:	b082      	sub	sp, #8
 80136a4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80136a6:	2300      	movs	r3, #0
 80136a8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80136aa:	f000 f885 	bl	80137b8 <BSP_SD_IsDetected>
 80136ae:	4603      	mov	r3, r0
 80136b0:	2b01      	cmp	r3, #1
 80136b2:	d001      	beq.n	80136b8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80136b4:	2302      	movs	r3, #2
 80136b6:	e012      	b.n	80136de <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80136b8:	480b      	ldr	r0, [pc, #44]	@ (80136e8 <BSP_SD_Init+0x48>)
 80136ba:	f7f9 ffb7 	bl	800d62c <HAL_SD_Init>
 80136be:	4603      	mov	r3, r0
 80136c0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80136c2:	79fb      	ldrb	r3, [r7, #7]
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d109      	bne.n	80136dc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80136c8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80136cc:	4806      	ldr	r0, [pc, #24]	@ (80136e8 <BSP_SD_Init+0x48>)
 80136ce:	f7fa fe6d 	bl	800e3ac <HAL_SD_ConfigWideBusOperation>
 80136d2:	4603      	mov	r3, r0
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d001      	beq.n	80136dc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80136d8:	2301      	movs	r3, #1
 80136da:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80136dc:	79fb      	ldrb	r3, [r7, #7]
}
 80136de:	4618      	mov	r0, r3
 80136e0:	3708      	adds	r7, #8
 80136e2:	46bd      	mov	sp, r7
 80136e4:	bd80      	pop	{r7, pc}
 80136e6:	bf00      	nop
 80136e8:	24000544 	.word	0x24000544

080136ec <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80136ec:	b580      	push	{r7, lr}
 80136ee:	b086      	sub	sp, #24
 80136f0:	af00      	add	r7, sp, #0
 80136f2:	60f8      	str	r0, [r7, #12]
 80136f4:	60b9      	str	r1, [r7, #8]
 80136f6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80136f8:	2300      	movs	r3, #0
 80136fa:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	68ba      	ldr	r2, [r7, #8]
 8013700:	68f9      	ldr	r1, [r7, #12]
 8013702:	4806      	ldr	r0, [pc, #24]	@ (801371c <BSP_SD_ReadBlocks_DMA+0x30>)
 8013704:	f7fa f8b2 	bl	800d86c <HAL_SD_ReadBlocks_DMA>
 8013708:	4603      	mov	r3, r0
 801370a:	2b00      	cmp	r3, #0
 801370c:	d001      	beq.n	8013712 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801370e:	2301      	movs	r3, #1
 8013710:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013712:	7dfb      	ldrb	r3, [r7, #23]
}
 8013714:	4618      	mov	r0, r3
 8013716:	3718      	adds	r7, #24
 8013718:	46bd      	mov	sp, r7
 801371a:	bd80      	pop	{r7, pc}
 801371c:	24000544 	.word	0x24000544

08013720 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8013720:	b580      	push	{r7, lr}
 8013722:	b086      	sub	sp, #24
 8013724:	af00      	add	r7, sp, #0
 8013726:	60f8      	str	r0, [r7, #12]
 8013728:	60b9      	str	r1, [r7, #8]
 801372a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801372c:	2300      	movs	r3, #0
 801372e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	68ba      	ldr	r2, [r7, #8]
 8013734:	68f9      	ldr	r1, [r7, #12]
 8013736:	4806      	ldr	r0, [pc, #24]	@ (8013750 <BSP_SD_WriteBlocks_DMA+0x30>)
 8013738:	f7fa f940 	bl	800d9bc <HAL_SD_WriteBlocks_DMA>
 801373c:	4603      	mov	r3, r0
 801373e:	2b00      	cmp	r3, #0
 8013740:	d001      	beq.n	8013746 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8013742:	2301      	movs	r3, #1
 8013744:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013746:	7dfb      	ldrb	r3, [r7, #23]
}
 8013748:	4618      	mov	r0, r3
 801374a:	3718      	adds	r7, #24
 801374c:	46bd      	mov	sp, r7
 801374e:	bd80      	pop	{r7, pc}
 8013750:	24000544 	.word	0x24000544

08013754 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8013754:	b580      	push	{r7, lr}
 8013756:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8013758:	4805      	ldr	r0, [pc, #20]	@ (8013770 <BSP_SD_GetCardState+0x1c>)
 801375a:	f7fa ff39 	bl	800e5d0 <HAL_SD_GetCardState>
 801375e:	4603      	mov	r3, r0
 8013760:	2b04      	cmp	r3, #4
 8013762:	bf14      	ite	ne
 8013764:	2301      	movne	r3, #1
 8013766:	2300      	moveq	r3, #0
 8013768:	b2db      	uxtb	r3, r3
}
 801376a:	4618      	mov	r0, r3
 801376c:	bd80      	pop	{r7, pc}
 801376e:	bf00      	nop
 8013770:	24000544 	.word	0x24000544

08013774 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8013774:	b580      	push	{r7, lr}
 8013776:	b082      	sub	sp, #8
 8013778:	af00      	add	r7, sp, #0
 801377a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 801377c:	6879      	ldr	r1, [r7, #4]
 801377e:	4803      	ldr	r0, [pc, #12]	@ (801378c <BSP_SD_GetCardInfo+0x18>)
 8013780:	f7fa fde8 	bl	800e354 <HAL_SD_GetCardInfo>
}
 8013784:	bf00      	nop
 8013786:	3708      	adds	r7, #8
 8013788:	46bd      	mov	sp, r7
 801378a:	bd80      	pop	{r7, pc}
 801378c:	24000544 	.word	0x24000544

08013790 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8013790:	b580      	push	{r7, lr}
 8013792:	b082      	sub	sp, #8
 8013794:	af00      	add	r7, sp, #0
 8013796:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8013798:	f000 f9a0 	bl	8013adc <BSP_SD_WriteCpltCallback>
}
 801379c:	bf00      	nop
 801379e:	3708      	adds	r7, #8
 80137a0:	46bd      	mov	sp, r7
 80137a2:	bd80      	pop	{r7, pc}

080137a4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80137a4:	b580      	push	{r7, lr}
 80137a6:	b082      	sub	sp, #8
 80137a8:	af00      	add	r7, sp, #0
 80137aa:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80137ac:	f000 f9a2 	bl	8013af4 <BSP_SD_ReadCpltCallback>
}
 80137b0:	bf00      	nop
 80137b2:	3708      	adds	r7, #8
 80137b4:	46bd      	mov	sp, r7
 80137b6:	bd80      	pop	{r7, pc}

080137b8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80137b8:	b580      	push	{r7, lr}
 80137ba:	b082      	sub	sp, #8
 80137bc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80137be:	2301      	movs	r3, #1
 80137c0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80137c2:	f000 f80b 	bl	80137dc <BSP_PlatformIsDetected>
 80137c6:	4603      	mov	r3, r0
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d101      	bne.n	80137d0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80137cc:	2300      	movs	r3, #0
 80137ce:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80137d0:	79fb      	ldrb	r3, [r7, #7]
 80137d2:	b2db      	uxtb	r3, r3
}
 80137d4:	4618      	mov	r0, r3
 80137d6:	3708      	adds	r7, #8
 80137d8:	46bd      	mov	sp, r7
 80137da:	bd80      	pop	{r7, pc}

080137dc <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80137dc:	b580      	push	{r7, lr}
 80137de:	b082      	sub	sp, #8
 80137e0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80137e2:	2301      	movs	r3, #1
 80137e4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80137e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80137ea:	4806      	ldr	r0, [pc, #24]	@ (8013804 <BSP_PlatformIsDetected+0x28>)
 80137ec:	f7f6 fb66 	bl	8009ebc <HAL_GPIO_ReadPin>
 80137f0:	4603      	mov	r3, r0
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d001      	beq.n	80137fa <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80137f6:	2300      	movs	r3, #0
 80137f8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80137fa:	79fb      	ldrb	r3, [r7, #7]
}
 80137fc:	4618      	mov	r0, r3
 80137fe:	3708      	adds	r7, #8
 8013800:	46bd      	mov	sp, r7
 8013802:	bd80      	pop	{r7, pc}
 8013804:	58021400 	.word	0x58021400

08013808 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8013808:	b580      	push	{r7, lr}
 801380a:	b084      	sub	sp, #16
 801380c:	af00      	add	r7, sp, #0
 801380e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8013810:	f7f0 fce8 	bl	80041e4 <HAL_GetTick>
 8013814:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8013816:	e006      	b.n	8013826 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013818:	f7ff ff9c 	bl	8013754 <BSP_SD_GetCardState>
 801381c:	4603      	mov	r3, r0
 801381e:	2b00      	cmp	r3, #0
 8013820:	d101      	bne.n	8013826 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8013822:	2300      	movs	r3, #0
 8013824:	e009      	b.n	801383a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8013826:	f7f0 fcdd 	bl	80041e4 <HAL_GetTick>
 801382a:	4602      	mov	r2, r0
 801382c:	68fb      	ldr	r3, [r7, #12]
 801382e:	1ad3      	subs	r3, r2, r3
 8013830:	687a      	ldr	r2, [r7, #4]
 8013832:	429a      	cmp	r2, r3
 8013834:	d8f0      	bhi.n	8013818 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8013836:	f04f 33ff 	mov.w	r3, #4294967295
}
 801383a:	4618      	mov	r0, r3
 801383c:	3710      	adds	r7, #16
 801383e:	46bd      	mov	sp, r7
 8013840:	bd80      	pop	{r7, pc}
	...

08013844 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8013844:	b580      	push	{r7, lr}
 8013846:	b082      	sub	sp, #8
 8013848:	af00      	add	r7, sp, #0
 801384a:	4603      	mov	r3, r0
 801384c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801384e:	4b0b      	ldr	r3, [pc, #44]	@ (801387c <SD_CheckStatus+0x38>)
 8013850:	2201      	movs	r2, #1
 8013852:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8013854:	f7ff ff7e 	bl	8013754 <BSP_SD_GetCardState>
 8013858:	4603      	mov	r3, r0
 801385a:	2b00      	cmp	r3, #0
 801385c:	d107      	bne.n	801386e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801385e:	4b07      	ldr	r3, [pc, #28]	@ (801387c <SD_CheckStatus+0x38>)
 8013860:	781b      	ldrb	r3, [r3, #0]
 8013862:	b2db      	uxtb	r3, r3
 8013864:	f023 0301 	bic.w	r3, r3, #1
 8013868:	b2da      	uxtb	r2, r3
 801386a:	4b04      	ldr	r3, [pc, #16]	@ (801387c <SD_CheckStatus+0x38>)
 801386c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801386e:	4b03      	ldr	r3, [pc, #12]	@ (801387c <SD_CheckStatus+0x38>)
 8013870:	781b      	ldrb	r3, [r3, #0]
 8013872:	b2db      	uxtb	r3, r3
}
 8013874:	4618      	mov	r0, r3
 8013876:	3708      	adds	r7, #8
 8013878:	46bd      	mov	sp, r7
 801387a:	bd80      	pop	{r7, pc}
 801387c:	2400001d 	.word	0x2400001d

08013880 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8013880:	b580      	push	{r7, lr}
 8013882:	b082      	sub	sp, #8
 8013884:	af00      	add	r7, sp, #0
 8013886:	4603      	mov	r3, r0
 8013888:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 801388a:	f7ff ff09 	bl	80136a0 <BSP_SD_Init>
 801388e:	4603      	mov	r3, r0
 8013890:	2b00      	cmp	r3, #0
 8013892:	d107      	bne.n	80138a4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8013894:	79fb      	ldrb	r3, [r7, #7]
 8013896:	4618      	mov	r0, r3
 8013898:	f7ff ffd4 	bl	8013844 <SD_CheckStatus>
 801389c:	4603      	mov	r3, r0
 801389e:	461a      	mov	r2, r3
 80138a0:	4b04      	ldr	r3, [pc, #16]	@ (80138b4 <SD_initialize+0x34>)
 80138a2:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80138a4:	4b03      	ldr	r3, [pc, #12]	@ (80138b4 <SD_initialize+0x34>)
 80138a6:	781b      	ldrb	r3, [r3, #0]
 80138a8:	b2db      	uxtb	r3, r3
}
 80138aa:	4618      	mov	r0, r3
 80138ac:	3708      	adds	r7, #8
 80138ae:	46bd      	mov	sp, r7
 80138b0:	bd80      	pop	{r7, pc}
 80138b2:	bf00      	nop
 80138b4:	2400001d 	.word	0x2400001d

080138b8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80138b8:	b580      	push	{r7, lr}
 80138ba:	b082      	sub	sp, #8
 80138bc:	af00      	add	r7, sp, #0
 80138be:	4603      	mov	r3, r0
 80138c0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80138c2:	79fb      	ldrb	r3, [r7, #7]
 80138c4:	4618      	mov	r0, r3
 80138c6:	f7ff ffbd 	bl	8013844 <SD_CheckStatus>
 80138ca:	4603      	mov	r3, r0
}
 80138cc:	4618      	mov	r0, r3
 80138ce:	3708      	adds	r7, #8
 80138d0:	46bd      	mov	sp, r7
 80138d2:	bd80      	pop	{r7, pc}

080138d4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80138d4:	b580      	push	{r7, lr}
 80138d6:	b086      	sub	sp, #24
 80138d8:	af00      	add	r7, sp, #0
 80138da:	60b9      	str	r1, [r7, #8]
 80138dc:	607a      	str	r2, [r7, #4]
 80138de:	603b      	str	r3, [r7, #0]
 80138e0:	4603      	mov	r3, r0
 80138e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80138e4:	2301      	movs	r3, #1
 80138e6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80138e8:	f247 5030 	movw	r0, #30000	@ 0x7530
 80138ec:	f7ff ff8c 	bl	8013808 <SD_CheckStatusWithTimeout>
 80138f0:	4603      	mov	r3, r0
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	da01      	bge.n	80138fa <SD_read+0x26>
  {
    return res;
 80138f6:	7dfb      	ldrb	r3, [r7, #23]
 80138f8:	e03b      	b.n	8013972 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80138fa:	683a      	ldr	r2, [r7, #0]
 80138fc:	6879      	ldr	r1, [r7, #4]
 80138fe:	68b8      	ldr	r0, [r7, #8]
 8013900:	f7ff fef4 	bl	80136ec <BSP_SD_ReadBlocks_DMA>
 8013904:	4603      	mov	r3, r0
 8013906:	2b00      	cmp	r3, #0
 8013908:	d132      	bne.n	8013970 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 801390a:	4b1c      	ldr	r3, [pc, #112]	@ (801397c <SD_read+0xa8>)
 801390c:	2200      	movs	r2, #0
 801390e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8013910:	f7f0 fc68 	bl	80041e4 <HAL_GetTick>
 8013914:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8013916:	bf00      	nop
 8013918:	4b18      	ldr	r3, [pc, #96]	@ (801397c <SD_read+0xa8>)
 801391a:	681b      	ldr	r3, [r3, #0]
 801391c:	2b00      	cmp	r3, #0
 801391e:	d108      	bne.n	8013932 <SD_read+0x5e>
 8013920:	f7f0 fc60 	bl	80041e4 <HAL_GetTick>
 8013924:	4602      	mov	r2, r0
 8013926:	693b      	ldr	r3, [r7, #16]
 8013928:	1ad3      	subs	r3, r2, r3
 801392a:	f247 522f 	movw	r2, #29999	@ 0x752f
 801392e:	4293      	cmp	r3, r2
 8013930:	d9f2      	bls.n	8013918 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8013932:	4b12      	ldr	r3, [pc, #72]	@ (801397c <SD_read+0xa8>)
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	2b00      	cmp	r3, #0
 8013938:	d102      	bne.n	8013940 <SD_read+0x6c>
      {
        res = RES_ERROR;
 801393a:	2301      	movs	r3, #1
 801393c:	75fb      	strb	r3, [r7, #23]
 801393e:	e017      	b.n	8013970 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8013940:	4b0e      	ldr	r3, [pc, #56]	@ (801397c <SD_read+0xa8>)
 8013942:	2200      	movs	r2, #0
 8013944:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8013946:	f7f0 fc4d 	bl	80041e4 <HAL_GetTick>
 801394a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801394c:	e007      	b.n	801395e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801394e:	f7ff ff01 	bl	8013754 <BSP_SD_GetCardState>
 8013952:	4603      	mov	r3, r0
 8013954:	2b00      	cmp	r3, #0
 8013956:	d102      	bne.n	801395e <SD_read+0x8a>
          {
            res = RES_OK;
 8013958:	2300      	movs	r3, #0
 801395a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 801395c:	e008      	b.n	8013970 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801395e:	f7f0 fc41 	bl	80041e4 <HAL_GetTick>
 8013962:	4602      	mov	r2, r0
 8013964:	693b      	ldr	r3, [r7, #16]
 8013966:	1ad3      	subs	r3, r2, r3
 8013968:	f247 522f 	movw	r2, #29999	@ 0x752f
 801396c:	4293      	cmp	r3, r2
 801396e:	d9ee      	bls.n	801394e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8013970:	7dfb      	ldrb	r3, [r7, #23]
}
 8013972:	4618      	mov	r0, r3
 8013974:	3718      	adds	r7, #24
 8013976:	46bd      	mov	sp, r7
 8013978:	bd80      	pop	{r7, pc}
 801397a:	bf00      	nop
 801397c:	240009b8 	.word	0x240009b8

08013980 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8013980:	b580      	push	{r7, lr}
 8013982:	b086      	sub	sp, #24
 8013984:	af00      	add	r7, sp, #0
 8013986:	60b9      	str	r1, [r7, #8]
 8013988:	607a      	str	r2, [r7, #4]
 801398a:	603b      	str	r3, [r7, #0]
 801398c:	4603      	mov	r3, r0
 801398e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013990:	2301      	movs	r3, #1
 8013992:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8013994:	4b24      	ldr	r3, [pc, #144]	@ (8013a28 <SD_write+0xa8>)
 8013996:	2200      	movs	r2, #0
 8013998:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801399a:	f247 5030 	movw	r0, #30000	@ 0x7530
 801399e:	f7ff ff33 	bl	8013808 <SD_CheckStatusWithTimeout>
 80139a2:	4603      	mov	r3, r0
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	da01      	bge.n	80139ac <SD_write+0x2c>
  {
    return res;
 80139a8:	7dfb      	ldrb	r3, [r7, #23]
 80139aa:	e038      	b.n	8013a1e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80139ac:	683a      	ldr	r2, [r7, #0]
 80139ae:	6879      	ldr	r1, [r7, #4]
 80139b0:	68b8      	ldr	r0, [r7, #8]
 80139b2:	f7ff feb5 	bl	8013720 <BSP_SD_WriteBlocks_DMA>
 80139b6:	4603      	mov	r3, r0
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d12f      	bne.n	8013a1c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80139bc:	f7f0 fc12 	bl	80041e4 <HAL_GetTick>
 80139c0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80139c2:	bf00      	nop
 80139c4:	4b18      	ldr	r3, [pc, #96]	@ (8013a28 <SD_write+0xa8>)
 80139c6:	681b      	ldr	r3, [r3, #0]
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d108      	bne.n	80139de <SD_write+0x5e>
 80139cc:	f7f0 fc0a 	bl	80041e4 <HAL_GetTick>
 80139d0:	4602      	mov	r2, r0
 80139d2:	693b      	ldr	r3, [r7, #16]
 80139d4:	1ad3      	subs	r3, r2, r3
 80139d6:	f247 522f 	movw	r2, #29999	@ 0x752f
 80139da:	4293      	cmp	r3, r2
 80139dc:	d9f2      	bls.n	80139c4 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80139de:	4b12      	ldr	r3, [pc, #72]	@ (8013a28 <SD_write+0xa8>)
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d102      	bne.n	80139ec <SD_write+0x6c>
      {
        res = RES_ERROR;
 80139e6:	2301      	movs	r3, #1
 80139e8:	75fb      	strb	r3, [r7, #23]
 80139ea:	e017      	b.n	8013a1c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80139ec:	4b0e      	ldr	r3, [pc, #56]	@ (8013a28 <SD_write+0xa8>)
 80139ee:	2200      	movs	r2, #0
 80139f0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80139f2:	f7f0 fbf7 	bl	80041e4 <HAL_GetTick>
 80139f6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80139f8:	e007      	b.n	8013a0a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80139fa:	f7ff feab 	bl	8013754 <BSP_SD_GetCardState>
 80139fe:	4603      	mov	r3, r0
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d102      	bne.n	8013a0a <SD_write+0x8a>
          {
            res = RES_OK;
 8013a04:	2300      	movs	r3, #0
 8013a06:	75fb      	strb	r3, [r7, #23]
            break;
 8013a08:	e008      	b.n	8013a1c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8013a0a:	f7f0 fbeb 	bl	80041e4 <HAL_GetTick>
 8013a0e:	4602      	mov	r2, r0
 8013a10:	693b      	ldr	r3, [r7, #16]
 8013a12:	1ad3      	subs	r3, r2, r3
 8013a14:	f247 522f 	movw	r2, #29999	@ 0x752f
 8013a18:	4293      	cmp	r3, r2
 8013a1a:	d9ee      	bls.n	80139fa <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8013a1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8013a1e:	4618      	mov	r0, r3
 8013a20:	3718      	adds	r7, #24
 8013a22:	46bd      	mov	sp, r7
 8013a24:	bd80      	pop	{r7, pc}
 8013a26:	bf00      	nop
 8013a28:	240009b4 	.word	0x240009b4

08013a2c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8013a2c:	b580      	push	{r7, lr}
 8013a2e:	b08c      	sub	sp, #48	@ 0x30
 8013a30:	af00      	add	r7, sp, #0
 8013a32:	4603      	mov	r3, r0
 8013a34:	603a      	str	r2, [r7, #0]
 8013a36:	71fb      	strb	r3, [r7, #7]
 8013a38:	460b      	mov	r3, r1
 8013a3a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8013a3c:	2301      	movs	r3, #1
 8013a3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8013a42:	4b25      	ldr	r3, [pc, #148]	@ (8013ad8 <SD_ioctl+0xac>)
 8013a44:	781b      	ldrb	r3, [r3, #0]
 8013a46:	b2db      	uxtb	r3, r3
 8013a48:	f003 0301 	and.w	r3, r3, #1
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d001      	beq.n	8013a54 <SD_ioctl+0x28>
 8013a50:	2303      	movs	r3, #3
 8013a52:	e03c      	b.n	8013ace <SD_ioctl+0xa2>

  switch (cmd)
 8013a54:	79bb      	ldrb	r3, [r7, #6]
 8013a56:	2b03      	cmp	r3, #3
 8013a58:	d834      	bhi.n	8013ac4 <SD_ioctl+0x98>
 8013a5a:	a201      	add	r2, pc, #4	@ (adr r2, 8013a60 <SD_ioctl+0x34>)
 8013a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a60:	08013a71 	.word	0x08013a71
 8013a64:	08013a79 	.word	0x08013a79
 8013a68:	08013a91 	.word	0x08013a91
 8013a6c:	08013aab 	.word	0x08013aab
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8013a70:	2300      	movs	r3, #0
 8013a72:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8013a76:	e028      	b.n	8013aca <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8013a78:	f107 0308 	add.w	r3, r7, #8
 8013a7c:	4618      	mov	r0, r3
 8013a7e:	f7ff fe79 	bl	8013774 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8013a82:	6a3a      	ldr	r2, [r7, #32]
 8013a84:	683b      	ldr	r3, [r7, #0]
 8013a86:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013a88:	2300      	movs	r3, #0
 8013a8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8013a8e:	e01c      	b.n	8013aca <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8013a90:	f107 0308 	add.w	r3, r7, #8
 8013a94:	4618      	mov	r0, r3
 8013a96:	f7ff fe6d 	bl	8013774 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8013a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a9c:	b29a      	uxth	r2, r3
 8013a9e:	683b      	ldr	r3, [r7, #0]
 8013aa0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8013aa2:	2300      	movs	r3, #0
 8013aa4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8013aa8:	e00f      	b.n	8013aca <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8013aaa:	f107 0308 	add.w	r3, r7, #8
 8013aae:	4618      	mov	r0, r3
 8013ab0:	f7ff fe60 	bl	8013774 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8013ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ab6:	0a5a      	lsrs	r2, r3, #9
 8013ab8:	683b      	ldr	r3, [r7, #0]
 8013aba:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013abc:	2300      	movs	r3, #0
 8013abe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8013ac2:	e002      	b.n	8013aca <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8013ac4:	2304      	movs	r3, #4
 8013ac6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8013aca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8013ace:	4618      	mov	r0, r3
 8013ad0:	3730      	adds	r7, #48	@ 0x30
 8013ad2:	46bd      	mov	sp, r7
 8013ad4:	bd80      	pop	{r7, pc}
 8013ad6:	bf00      	nop
 8013ad8:	2400001d 	.word	0x2400001d

08013adc <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8013adc:	b480      	push	{r7}
 8013ade:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8013ae0:	4b03      	ldr	r3, [pc, #12]	@ (8013af0 <BSP_SD_WriteCpltCallback+0x14>)
 8013ae2:	2201      	movs	r2, #1
 8013ae4:	601a      	str	r2, [r3, #0]
}
 8013ae6:	bf00      	nop
 8013ae8:	46bd      	mov	sp, r7
 8013aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aee:	4770      	bx	lr
 8013af0:	240009b4 	.word	0x240009b4

08013af4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8013af4:	b480      	push	{r7}
 8013af6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8013af8:	4b03      	ldr	r3, [pc, #12]	@ (8013b08 <BSP_SD_ReadCpltCallback+0x14>)
 8013afa:	2201      	movs	r2, #1
 8013afc:	601a      	str	r2, [r3, #0]
}
 8013afe:	bf00      	nop
 8013b00:	46bd      	mov	sp, r7
 8013b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b06:	4770      	bx	lr
 8013b08:	240009b8 	.word	0x240009b8

08013b0c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8013b0c:	b480      	push	{r7}
 8013b0e:	b087      	sub	sp, #28
 8013b10:	af00      	add	r7, sp, #0
 8013b12:	60f8      	str	r0, [r7, #12]
 8013b14:	60b9      	str	r1, [r7, #8]
 8013b16:	4613      	mov	r3, r2
 8013b18:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8013b1a:	2301      	movs	r3, #1
 8013b1c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8013b1e:	2300      	movs	r3, #0
 8013b20:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8013b22:	4b1f      	ldr	r3, [pc, #124]	@ (8013ba0 <FATFS_LinkDriverEx+0x94>)
 8013b24:	7a5b      	ldrb	r3, [r3, #9]
 8013b26:	b2db      	uxtb	r3, r3
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d131      	bne.n	8013b90 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8013b2c:	4b1c      	ldr	r3, [pc, #112]	@ (8013ba0 <FATFS_LinkDriverEx+0x94>)
 8013b2e:	7a5b      	ldrb	r3, [r3, #9]
 8013b30:	b2db      	uxtb	r3, r3
 8013b32:	461a      	mov	r2, r3
 8013b34:	4b1a      	ldr	r3, [pc, #104]	@ (8013ba0 <FATFS_LinkDriverEx+0x94>)
 8013b36:	2100      	movs	r1, #0
 8013b38:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8013b3a:	4b19      	ldr	r3, [pc, #100]	@ (8013ba0 <FATFS_LinkDriverEx+0x94>)
 8013b3c:	7a5b      	ldrb	r3, [r3, #9]
 8013b3e:	b2db      	uxtb	r3, r3
 8013b40:	4a17      	ldr	r2, [pc, #92]	@ (8013ba0 <FATFS_LinkDriverEx+0x94>)
 8013b42:	009b      	lsls	r3, r3, #2
 8013b44:	4413      	add	r3, r2
 8013b46:	68fa      	ldr	r2, [r7, #12]
 8013b48:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8013b4a:	4b15      	ldr	r3, [pc, #84]	@ (8013ba0 <FATFS_LinkDriverEx+0x94>)
 8013b4c:	7a5b      	ldrb	r3, [r3, #9]
 8013b4e:	b2db      	uxtb	r3, r3
 8013b50:	461a      	mov	r2, r3
 8013b52:	4b13      	ldr	r3, [pc, #76]	@ (8013ba0 <FATFS_LinkDriverEx+0x94>)
 8013b54:	4413      	add	r3, r2
 8013b56:	79fa      	ldrb	r2, [r7, #7]
 8013b58:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8013b5a:	4b11      	ldr	r3, [pc, #68]	@ (8013ba0 <FATFS_LinkDriverEx+0x94>)
 8013b5c:	7a5b      	ldrb	r3, [r3, #9]
 8013b5e:	b2db      	uxtb	r3, r3
 8013b60:	1c5a      	adds	r2, r3, #1
 8013b62:	b2d1      	uxtb	r1, r2
 8013b64:	4a0e      	ldr	r2, [pc, #56]	@ (8013ba0 <FATFS_LinkDriverEx+0x94>)
 8013b66:	7251      	strb	r1, [r2, #9]
 8013b68:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8013b6a:	7dbb      	ldrb	r3, [r7, #22]
 8013b6c:	3330      	adds	r3, #48	@ 0x30
 8013b6e:	b2da      	uxtb	r2, r3
 8013b70:	68bb      	ldr	r3, [r7, #8]
 8013b72:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8013b74:	68bb      	ldr	r3, [r7, #8]
 8013b76:	3301      	adds	r3, #1
 8013b78:	223a      	movs	r2, #58	@ 0x3a
 8013b7a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8013b7c:	68bb      	ldr	r3, [r7, #8]
 8013b7e:	3302      	adds	r3, #2
 8013b80:	222f      	movs	r2, #47	@ 0x2f
 8013b82:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8013b84:	68bb      	ldr	r3, [r7, #8]
 8013b86:	3303      	adds	r3, #3
 8013b88:	2200      	movs	r2, #0
 8013b8a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8013b8c:	2300      	movs	r3, #0
 8013b8e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8013b90:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b92:	4618      	mov	r0, r3
 8013b94:	371c      	adds	r7, #28
 8013b96:	46bd      	mov	sp, r7
 8013b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b9c:	4770      	bx	lr
 8013b9e:	bf00      	nop
 8013ba0:	240009bc 	.word	0x240009bc

08013ba4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8013ba4:	b580      	push	{r7, lr}
 8013ba6:	b082      	sub	sp, #8
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	6078      	str	r0, [r7, #4]
 8013bac:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8013bae:	2200      	movs	r2, #0
 8013bb0:	6839      	ldr	r1, [r7, #0]
 8013bb2:	6878      	ldr	r0, [r7, #4]
 8013bb4:	f7ff ffaa 	bl	8013b0c <FATFS_LinkDriverEx>
 8013bb8:	4603      	mov	r3, r0
}
 8013bba:	4618      	mov	r0, r3
 8013bbc:	3708      	adds	r7, #8
 8013bbe:	46bd      	mov	sp, r7
 8013bc0:	bd80      	pop	{r7, pc}

08013bc2 <__cvt>:
 8013bc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013bc4:	ed2d 8b02 	vpush	{d8}
 8013bc8:	eeb0 8b40 	vmov.f64	d8, d0
 8013bcc:	b085      	sub	sp, #20
 8013bce:	4617      	mov	r7, r2
 8013bd0:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8013bd2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013bd4:	ee18 2a90 	vmov	r2, s17
 8013bd8:	f025 0520 	bic.w	r5, r5, #32
 8013bdc:	2a00      	cmp	r2, #0
 8013bde:	bfb6      	itet	lt
 8013be0:	222d      	movlt	r2, #45	@ 0x2d
 8013be2:	2200      	movge	r2, #0
 8013be4:	eeb1 8b40 	vneglt.f64	d8, d0
 8013be8:	2d46      	cmp	r5, #70	@ 0x46
 8013bea:	460c      	mov	r4, r1
 8013bec:	701a      	strb	r2, [r3, #0]
 8013bee:	d004      	beq.n	8013bfa <__cvt+0x38>
 8013bf0:	2d45      	cmp	r5, #69	@ 0x45
 8013bf2:	d100      	bne.n	8013bf6 <__cvt+0x34>
 8013bf4:	3401      	adds	r4, #1
 8013bf6:	2102      	movs	r1, #2
 8013bf8:	e000      	b.n	8013bfc <__cvt+0x3a>
 8013bfa:	2103      	movs	r1, #3
 8013bfc:	ab03      	add	r3, sp, #12
 8013bfe:	9301      	str	r3, [sp, #4]
 8013c00:	ab02      	add	r3, sp, #8
 8013c02:	9300      	str	r3, [sp, #0]
 8013c04:	4622      	mov	r2, r4
 8013c06:	4633      	mov	r3, r6
 8013c08:	eeb0 0b48 	vmov.f64	d0, d8
 8013c0c:	f001 f944 	bl	8014e98 <_dtoa_r>
 8013c10:	2d47      	cmp	r5, #71	@ 0x47
 8013c12:	d114      	bne.n	8013c3e <__cvt+0x7c>
 8013c14:	07fb      	lsls	r3, r7, #31
 8013c16:	d50a      	bpl.n	8013c2e <__cvt+0x6c>
 8013c18:	1902      	adds	r2, r0, r4
 8013c1a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c22:	bf08      	it	eq
 8013c24:	9203      	streq	r2, [sp, #12]
 8013c26:	2130      	movs	r1, #48	@ 0x30
 8013c28:	9b03      	ldr	r3, [sp, #12]
 8013c2a:	4293      	cmp	r3, r2
 8013c2c:	d319      	bcc.n	8013c62 <__cvt+0xa0>
 8013c2e:	9b03      	ldr	r3, [sp, #12]
 8013c30:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013c32:	1a1b      	subs	r3, r3, r0
 8013c34:	6013      	str	r3, [r2, #0]
 8013c36:	b005      	add	sp, #20
 8013c38:	ecbd 8b02 	vpop	{d8}
 8013c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c3e:	2d46      	cmp	r5, #70	@ 0x46
 8013c40:	eb00 0204 	add.w	r2, r0, r4
 8013c44:	d1e9      	bne.n	8013c1a <__cvt+0x58>
 8013c46:	7803      	ldrb	r3, [r0, #0]
 8013c48:	2b30      	cmp	r3, #48	@ 0x30
 8013c4a:	d107      	bne.n	8013c5c <__cvt+0x9a>
 8013c4c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c54:	bf1c      	itt	ne
 8013c56:	f1c4 0401 	rsbne	r4, r4, #1
 8013c5a:	6034      	strne	r4, [r6, #0]
 8013c5c:	6833      	ldr	r3, [r6, #0]
 8013c5e:	441a      	add	r2, r3
 8013c60:	e7db      	b.n	8013c1a <__cvt+0x58>
 8013c62:	1c5c      	adds	r4, r3, #1
 8013c64:	9403      	str	r4, [sp, #12]
 8013c66:	7019      	strb	r1, [r3, #0]
 8013c68:	e7de      	b.n	8013c28 <__cvt+0x66>

08013c6a <__exponent>:
 8013c6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013c6c:	2900      	cmp	r1, #0
 8013c6e:	bfba      	itte	lt
 8013c70:	4249      	neglt	r1, r1
 8013c72:	232d      	movlt	r3, #45	@ 0x2d
 8013c74:	232b      	movge	r3, #43	@ 0x2b
 8013c76:	2909      	cmp	r1, #9
 8013c78:	7002      	strb	r2, [r0, #0]
 8013c7a:	7043      	strb	r3, [r0, #1]
 8013c7c:	dd29      	ble.n	8013cd2 <__exponent+0x68>
 8013c7e:	f10d 0307 	add.w	r3, sp, #7
 8013c82:	461d      	mov	r5, r3
 8013c84:	270a      	movs	r7, #10
 8013c86:	461a      	mov	r2, r3
 8013c88:	fbb1 f6f7 	udiv	r6, r1, r7
 8013c8c:	fb07 1416 	mls	r4, r7, r6, r1
 8013c90:	3430      	adds	r4, #48	@ 0x30
 8013c92:	f802 4c01 	strb.w	r4, [r2, #-1]
 8013c96:	460c      	mov	r4, r1
 8013c98:	2c63      	cmp	r4, #99	@ 0x63
 8013c9a:	f103 33ff 	add.w	r3, r3, #4294967295
 8013c9e:	4631      	mov	r1, r6
 8013ca0:	dcf1      	bgt.n	8013c86 <__exponent+0x1c>
 8013ca2:	3130      	adds	r1, #48	@ 0x30
 8013ca4:	1e94      	subs	r4, r2, #2
 8013ca6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013caa:	1c41      	adds	r1, r0, #1
 8013cac:	4623      	mov	r3, r4
 8013cae:	42ab      	cmp	r3, r5
 8013cb0:	d30a      	bcc.n	8013cc8 <__exponent+0x5e>
 8013cb2:	f10d 0309 	add.w	r3, sp, #9
 8013cb6:	1a9b      	subs	r3, r3, r2
 8013cb8:	42ac      	cmp	r4, r5
 8013cba:	bf88      	it	hi
 8013cbc:	2300      	movhi	r3, #0
 8013cbe:	3302      	adds	r3, #2
 8013cc0:	4403      	add	r3, r0
 8013cc2:	1a18      	subs	r0, r3, r0
 8013cc4:	b003      	add	sp, #12
 8013cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013cc8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8013ccc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8013cd0:	e7ed      	b.n	8013cae <__exponent+0x44>
 8013cd2:	2330      	movs	r3, #48	@ 0x30
 8013cd4:	3130      	adds	r1, #48	@ 0x30
 8013cd6:	7083      	strb	r3, [r0, #2]
 8013cd8:	70c1      	strb	r1, [r0, #3]
 8013cda:	1d03      	adds	r3, r0, #4
 8013cdc:	e7f1      	b.n	8013cc2 <__exponent+0x58>
	...

08013ce0 <_printf_float>:
 8013ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ce4:	b08d      	sub	sp, #52	@ 0x34
 8013ce6:	460c      	mov	r4, r1
 8013ce8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8013cec:	4616      	mov	r6, r2
 8013cee:	461f      	mov	r7, r3
 8013cf0:	4605      	mov	r5, r0
 8013cf2:	f000 ffbb 	bl	8014c6c <_localeconv_r>
 8013cf6:	f8d0 b000 	ldr.w	fp, [r0]
 8013cfa:	4658      	mov	r0, fp
 8013cfc:	f7ec fb58 	bl	80003b0 <strlen>
 8013d00:	2300      	movs	r3, #0
 8013d02:	930a      	str	r3, [sp, #40]	@ 0x28
 8013d04:	f8d8 3000 	ldr.w	r3, [r8]
 8013d08:	f894 9018 	ldrb.w	r9, [r4, #24]
 8013d0c:	6822      	ldr	r2, [r4, #0]
 8013d0e:	9005      	str	r0, [sp, #20]
 8013d10:	3307      	adds	r3, #7
 8013d12:	f023 0307 	bic.w	r3, r3, #7
 8013d16:	f103 0108 	add.w	r1, r3, #8
 8013d1a:	f8c8 1000 	str.w	r1, [r8]
 8013d1e:	ed93 0b00 	vldr	d0, [r3]
 8013d22:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8013f80 <_printf_float+0x2a0>
 8013d26:	eeb0 7bc0 	vabs.f64	d7, d0
 8013d2a:	eeb4 7b46 	vcmp.f64	d7, d6
 8013d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d32:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8013d36:	dd24      	ble.n	8013d82 <_printf_float+0xa2>
 8013d38:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8013d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d40:	d502      	bpl.n	8013d48 <_printf_float+0x68>
 8013d42:	232d      	movs	r3, #45	@ 0x2d
 8013d44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013d48:	498f      	ldr	r1, [pc, #572]	@ (8013f88 <_printf_float+0x2a8>)
 8013d4a:	4b90      	ldr	r3, [pc, #576]	@ (8013f8c <_printf_float+0x2ac>)
 8013d4c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8013d50:	bf8c      	ite	hi
 8013d52:	4688      	movhi	r8, r1
 8013d54:	4698      	movls	r8, r3
 8013d56:	f022 0204 	bic.w	r2, r2, #4
 8013d5a:	2303      	movs	r3, #3
 8013d5c:	6123      	str	r3, [r4, #16]
 8013d5e:	6022      	str	r2, [r4, #0]
 8013d60:	f04f 0a00 	mov.w	sl, #0
 8013d64:	9700      	str	r7, [sp, #0]
 8013d66:	4633      	mov	r3, r6
 8013d68:	aa0b      	add	r2, sp, #44	@ 0x2c
 8013d6a:	4621      	mov	r1, r4
 8013d6c:	4628      	mov	r0, r5
 8013d6e:	f000 f9d1 	bl	8014114 <_printf_common>
 8013d72:	3001      	adds	r0, #1
 8013d74:	f040 8089 	bne.w	8013e8a <_printf_float+0x1aa>
 8013d78:	f04f 30ff 	mov.w	r0, #4294967295
 8013d7c:	b00d      	add	sp, #52	@ 0x34
 8013d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d82:	eeb4 0b40 	vcmp.f64	d0, d0
 8013d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d8a:	d709      	bvc.n	8013da0 <_printf_float+0xc0>
 8013d8c:	ee10 3a90 	vmov	r3, s1
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	bfbc      	itt	lt
 8013d94:	232d      	movlt	r3, #45	@ 0x2d
 8013d96:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8013d9a:	497d      	ldr	r1, [pc, #500]	@ (8013f90 <_printf_float+0x2b0>)
 8013d9c:	4b7d      	ldr	r3, [pc, #500]	@ (8013f94 <_printf_float+0x2b4>)
 8013d9e:	e7d5      	b.n	8013d4c <_printf_float+0x6c>
 8013da0:	6863      	ldr	r3, [r4, #4]
 8013da2:	1c59      	adds	r1, r3, #1
 8013da4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8013da8:	d139      	bne.n	8013e1e <_printf_float+0x13e>
 8013daa:	2306      	movs	r3, #6
 8013dac:	6063      	str	r3, [r4, #4]
 8013dae:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8013db2:	2300      	movs	r3, #0
 8013db4:	6022      	str	r2, [r4, #0]
 8013db6:	9303      	str	r3, [sp, #12]
 8013db8:	ab0a      	add	r3, sp, #40	@ 0x28
 8013dba:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8013dbe:	ab09      	add	r3, sp, #36	@ 0x24
 8013dc0:	9300      	str	r3, [sp, #0]
 8013dc2:	6861      	ldr	r1, [r4, #4]
 8013dc4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8013dc8:	4628      	mov	r0, r5
 8013dca:	f7ff fefa 	bl	8013bc2 <__cvt>
 8013dce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8013dd2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013dd4:	4680      	mov	r8, r0
 8013dd6:	d129      	bne.n	8013e2c <_printf_float+0x14c>
 8013dd8:	1cc8      	adds	r0, r1, #3
 8013dda:	db02      	blt.n	8013de2 <_printf_float+0x102>
 8013ddc:	6863      	ldr	r3, [r4, #4]
 8013dde:	4299      	cmp	r1, r3
 8013de0:	dd41      	ble.n	8013e66 <_printf_float+0x186>
 8013de2:	f1a9 0902 	sub.w	r9, r9, #2
 8013de6:	fa5f f989 	uxtb.w	r9, r9
 8013dea:	3901      	subs	r1, #1
 8013dec:	464a      	mov	r2, r9
 8013dee:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8013df2:	9109      	str	r1, [sp, #36]	@ 0x24
 8013df4:	f7ff ff39 	bl	8013c6a <__exponent>
 8013df8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013dfa:	1813      	adds	r3, r2, r0
 8013dfc:	2a01      	cmp	r2, #1
 8013dfe:	4682      	mov	sl, r0
 8013e00:	6123      	str	r3, [r4, #16]
 8013e02:	dc02      	bgt.n	8013e0a <_printf_float+0x12a>
 8013e04:	6822      	ldr	r2, [r4, #0]
 8013e06:	07d2      	lsls	r2, r2, #31
 8013e08:	d501      	bpl.n	8013e0e <_printf_float+0x12e>
 8013e0a:	3301      	adds	r3, #1
 8013e0c:	6123      	str	r3, [r4, #16]
 8013e0e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d0a6      	beq.n	8013d64 <_printf_float+0x84>
 8013e16:	232d      	movs	r3, #45	@ 0x2d
 8013e18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013e1c:	e7a2      	b.n	8013d64 <_printf_float+0x84>
 8013e1e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8013e22:	d1c4      	bne.n	8013dae <_printf_float+0xce>
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d1c2      	bne.n	8013dae <_printf_float+0xce>
 8013e28:	2301      	movs	r3, #1
 8013e2a:	e7bf      	b.n	8013dac <_printf_float+0xcc>
 8013e2c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8013e30:	d9db      	bls.n	8013dea <_printf_float+0x10a>
 8013e32:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8013e36:	d118      	bne.n	8013e6a <_printf_float+0x18a>
 8013e38:	2900      	cmp	r1, #0
 8013e3a:	6863      	ldr	r3, [r4, #4]
 8013e3c:	dd0b      	ble.n	8013e56 <_printf_float+0x176>
 8013e3e:	6121      	str	r1, [r4, #16]
 8013e40:	b913      	cbnz	r3, 8013e48 <_printf_float+0x168>
 8013e42:	6822      	ldr	r2, [r4, #0]
 8013e44:	07d0      	lsls	r0, r2, #31
 8013e46:	d502      	bpl.n	8013e4e <_printf_float+0x16e>
 8013e48:	3301      	adds	r3, #1
 8013e4a:	440b      	add	r3, r1
 8013e4c:	6123      	str	r3, [r4, #16]
 8013e4e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8013e50:	f04f 0a00 	mov.w	sl, #0
 8013e54:	e7db      	b.n	8013e0e <_printf_float+0x12e>
 8013e56:	b913      	cbnz	r3, 8013e5e <_printf_float+0x17e>
 8013e58:	6822      	ldr	r2, [r4, #0]
 8013e5a:	07d2      	lsls	r2, r2, #31
 8013e5c:	d501      	bpl.n	8013e62 <_printf_float+0x182>
 8013e5e:	3302      	adds	r3, #2
 8013e60:	e7f4      	b.n	8013e4c <_printf_float+0x16c>
 8013e62:	2301      	movs	r3, #1
 8013e64:	e7f2      	b.n	8013e4c <_printf_float+0x16c>
 8013e66:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8013e6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013e6c:	4299      	cmp	r1, r3
 8013e6e:	db05      	blt.n	8013e7c <_printf_float+0x19c>
 8013e70:	6823      	ldr	r3, [r4, #0]
 8013e72:	6121      	str	r1, [r4, #16]
 8013e74:	07d8      	lsls	r0, r3, #31
 8013e76:	d5ea      	bpl.n	8013e4e <_printf_float+0x16e>
 8013e78:	1c4b      	adds	r3, r1, #1
 8013e7a:	e7e7      	b.n	8013e4c <_printf_float+0x16c>
 8013e7c:	2900      	cmp	r1, #0
 8013e7e:	bfd4      	ite	le
 8013e80:	f1c1 0202 	rsble	r2, r1, #2
 8013e84:	2201      	movgt	r2, #1
 8013e86:	4413      	add	r3, r2
 8013e88:	e7e0      	b.n	8013e4c <_printf_float+0x16c>
 8013e8a:	6823      	ldr	r3, [r4, #0]
 8013e8c:	055a      	lsls	r2, r3, #21
 8013e8e:	d407      	bmi.n	8013ea0 <_printf_float+0x1c0>
 8013e90:	6923      	ldr	r3, [r4, #16]
 8013e92:	4642      	mov	r2, r8
 8013e94:	4631      	mov	r1, r6
 8013e96:	4628      	mov	r0, r5
 8013e98:	47b8      	blx	r7
 8013e9a:	3001      	adds	r0, #1
 8013e9c:	d12a      	bne.n	8013ef4 <_printf_float+0x214>
 8013e9e:	e76b      	b.n	8013d78 <_printf_float+0x98>
 8013ea0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8013ea4:	f240 80e0 	bls.w	8014068 <_printf_float+0x388>
 8013ea8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8013eac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013eb4:	d133      	bne.n	8013f1e <_printf_float+0x23e>
 8013eb6:	4a38      	ldr	r2, [pc, #224]	@ (8013f98 <_printf_float+0x2b8>)
 8013eb8:	2301      	movs	r3, #1
 8013eba:	4631      	mov	r1, r6
 8013ebc:	4628      	mov	r0, r5
 8013ebe:	47b8      	blx	r7
 8013ec0:	3001      	adds	r0, #1
 8013ec2:	f43f af59 	beq.w	8013d78 <_printf_float+0x98>
 8013ec6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8013eca:	4543      	cmp	r3, r8
 8013ecc:	db02      	blt.n	8013ed4 <_printf_float+0x1f4>
 8013ece:	6823      	ldr	r3, [r4, #0]
 8013ed0:	07d8      	lsls	r0, r3, #31
 8013ed2:	d50f      	bpl.n	8013ef4 <_printf_float+0x214>
 8013ed4:	9b05      	ldr	r3, [sp, #20]
 8013ed6:	465a      	mov	r2, fp
 8013ed8:	4631      	mov	r1, r6
 8013eda:	4628      	mov	r0, r5
 8013edc:	47b8      	blx	r7
 8013ede:	3001      	adds	r0, #1
 8013ee0:	f43f af4a 	beq.w	8013d78 <_printf_float+0x98>
 8013ee4:	f04f 0900 	mov.w	r9, #0
 8013ee8:	f108 38ff 	add.w	r8, r8, #4294967295
 8013eec:	f104 0a1a 	add.w	sl, r4, #26
 8013ef0:	45c8      	cmp	r8, r9
 8013ef2:	dc09      	bgt.n	8013f08 <_printf_float+0x228>
 8013ef4:	6823      	ldr	r3, [r4, #0]
 8013ef6:	079b      	lsls	r3, r3, #30
 8013ef8:	f100 8107 	bmi.w	801410a <_printf_float+0x42a>
 8013efc:	68e0      	ldr	r0, [r4, #12]
 8013efe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013f00:	4298      	cmp	r0, r3
 8013f02:	bfb8      	it	lt
 8013f04:	4618      	movlt	r0, r3
 8013f06:	e739      	b.n	8013d7c <_printf_float+0x9c>
 8013f08:	2301      	movs	r3, #1
 8013f0a:	4652      	mov	r2, sl
 8013f0c:	4631      	mov	r1, r6
 8013f0e:	4628      	mov	r0, r5
 8013f10:	47b8      	blx	r7
 8013f12:	3001      	adds	r0, #1
 8013f14:	f43f af30 	beq.w	8013d78 <_printf_float+0x98>
 8013f18:	f109 0901 	add.w	r9, r9, #1
 8013f1c:	e7e8      	b.n	8013ef0 <_printf_float+0x210>
 8013f1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	dc3b      	bgt.n	8013f9c <_printf_float+0x2bc>
 8013f24:	4a1c      	ldr	r2, [pc, #112]	@ (8013f98 <_printf_float+0x2b8>)
 8013f26:	2301      	movs	r3, #1
 8013f28:	4631      	mov	r1, r6
 8013f2a:	4628      	mov	r0, r5
 8013f2c:	47b8      	blx	r7
 8013f2e:	3001      	adds	r0, #1
 8013f30:	f43f af22 	beq.w	8013d78 <_printf_float+0x98>
 8013f34:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8013f38:	ea59 0303 	orrs.w	r3, r9, r3
 8013f3c:	d102      	bne.n	8013f44 <_printf_float+0x264>
 8013f3e:	6823      	ldr	r3, [r4, #0]
 8013f40:	07d9      	lsls	r1, r3, #31
 8013f42:	d5d7      	bpl.n	8013ef4 <_printf_float+0x214>
 8013f44:	9b05      	ldr	r3, [sp, #20]
 8013f46:	465a      	mov	r2, fp
 8013f48:	4631      	mov	r1, r6
 8013f4a:	4628      	mov	r0, r5
 8013f4c:	47b8      	blx	r7
 8013f4e:	3001      	adds	r0, #1
 8013f50:	f43f af12 	beq.w	8013d78 <_printf_float+0x98>
 8013f54:	f04f 0a00 	mov.w	sl, #0
 8013f58:	f104 0b1a 	add.w	fp, r4, #26
 8013f5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f5e:	425b      	negs	r3, r3
 8013f60:	4553      	cmp	r3, sl
 8013f62:	dc01      	bgt.n	8013f68 <_printf_float+0x288>
 8013f64:	464b      	mov	r3, r9
 8013f66:	e794      	b.n	8013e92 <_printf_float+0x1b2>
 8013f68:	2301      	movs	r3, #1
 8013f6a:	465a      	mov	r2, fp
 8013f6c:	4631      	mov	r1, r6
 8013f6e:	4628      	mov	r0, r5
 8013f70:	47b8      	blx	r7
 8013f72:	3001      	adds	r0, #1
 8013f74:	f43f af00 	beq.w	8013d78 <_printf_float+0x98>
 8013f78:	f10a 0a01 	add.w	sl, sl, #1
 8013f7c:	e7ee      	b.n	8013f5c <_printf_float+0x27c>
 8013f7e:	bf00      	nop
 8013f80:	ffffffff 	.word	0xffffffff
 8013f84:	7fefffff 	.word	0x7fefffff
 8013f88:	080188c8 	.word	0x080188c8
 8013f8c:	080188c4 	.word	0x080188c4
 8013f90:	080188d0 	.word	0x080188d0
 8013f94:	080188cc 	.word	0x080188cc
 8013f98:	080188d4 	.word	0x080188d4
 8013f9c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8013f9e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8013fa2:	4553      	cmp	r3, sl
 8013fa4:	bfa8      	it	ge
 8013fa6:	4653      	movge	r3, sl
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	4699      	mov	r9, r3
 8013fac:	dc37      	bgt.n	801401e <_printf_float+0x33e>
 8013fae:	2300      	movs	r3, #0
 8013fb0:	9307      	str	r3, [sp, #28]
 8013fb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013fb6:	f104 021a 	add.w	r2, r4, #26
 8013fba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8013fbc:	9907      	ldr	r1, [sp, #28]
 8013fbe:	9306      	str	r3, [sp, #24]
 8013fc0:	eba3 0309 	sub.w	r3, r3, r9
 8013fc4:	428b      	cmp	r3, r1
 8013fc6:	dc31      	bgt.n	801402c <_printf_float+0x34c>
 8013fc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013fca:	459a      	cmp	sl, r3
 8013fcc:	dc3b      	bgt.n	8014046 <_printf_float+0x366>
 8013fce:	6823      	ldr	r3, [r4, #0]
 8013fd0:	07da      	lsls	r2, r3, #31
 8013fd2:	d438      	bmi.n	8014046 <_printf_float+0x366>
 8013fd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013fd6:	ebaa 0903 	sub.w	r9, sl, r3
 8013fda:	9b06      	ldr	r3, [sp, #24]
 8013fdc:	ebaa 0303 	sub.w	r3, sl, r3
 8013fe0:	4599      	cmp	r9, r3
 8013fe2:	bfa8      	it	ge
 8013fe4:	4699      	movge	r9, r3
 8013fe6:	f1b9 0f00 	cmp.w	r9, #0
 8013fea:	dc34      	bgt.n	8014056 <_printf_float+0x376>
 8013fec:	f04f 0800 	mov.w	r8, #0
 8013ff0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013ff4:	f104 0b1a 	add.w	fp, r4, #26
 8013ff8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013ffa:	ebaa 0303 	sub.w	r3, sl, r3
 8013ffe:	eba3 0309 	sub.w	r3, r3, r9
 8014002:	4543      	cmp	r3, r8
 8014004:	f77f af76 	ble.w	8013ef4 <_printf_float+0x214>
 8014008:	2301      	movs	r3, #1
 801400a:	465a      	mov	r2, fp
 801400c:	4631      	mov	r1, r6
 801400e:	4628      	mov	r0, r5
 8014010:	47b8      	blx	r7
 8014012:	3001      	adds	r0, #1
 8014014:	f43f aeb0 	beq.w	8013d78 <_printf_float+0x98>
 8014018:	f108 0801 	add.w	r8, r8, #1
 801401c:	e7ec      	b.n	8013ff8 <_printf_float+0x318>
 801401e:	4642      	mov	r2, r8
 8014020:	4631      	mov	r1, r6
 8014022:	4628      	mov	r0, r5
 8014024:	47b8      	blx	r7
 8014026:	3001      	adds	r0, #1
 8014028:	d1c1      	bne.n	8013fae <_printf_float+0x2ce>
 801402a:	e6a5      	b.n	8013d78 <_printf_float+0x98>
 801402c:	2301      	movs	r3, #1
 801402e:	4631      	mov	r1, r6
 8014030:	4628      	mov	r0, r5
 8014032:	9206      	str	r2, [sp, #24]
 8014034:	47b8      	blx	r7
 8014036:	3001      	adds	r0, #1
 8014038:	f43f ae9e 	beq.w	8013d78 <_printf_float+0x98>
 801403c:	9b07      	ldr	r3, [sp, #28]
 801403e:	9a06      	ldr	r2, [sp, #24]
 8014040:	3301      	adds	r3, #1
 8014042:	9307      	str	r3, [sp, #28]
 8014044:	e7b9      	b.n	8013fba <_printf_float+0x2da>
 8014046:	9b05      	ldr	r3, [sp, #20]
 8014048:	465a      	mov	r2, fp
 801404a:	4631      	mov	r1, r6
 801404c:	4628      	mov	r0, r5
 801404e:	47b8      	blx	r7
 8014050:	3001      	adds	r0, #1
 8014052:	d1bf      	bne.n	8013fd4 <_printf_float+0x2f4>
 8014054:	e690      	b.n	8013d78 <_printf_float+0x98>
 8014056:	9a06      	ldr	r2, [sp, #24]
 8014058:	464b      	mov	r3, r9
 801405a:	4442      	add	r2, r8
 801405c:	4631      	mov	r1, r6
 801405e:	4628      	mov	r0, r5
 8014060:	47b8      	blx	r7
 8014062:	3001      	adds	r0, #1
 8014064:	d1c2      	bne.n	8013fec <_printf_float+0x30c>
 8014066:	e687      	b.n	8013d78 <_printf_float+0x98>
 8014068:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 801406c:	f1b9 0f01 	cmp.w	r9, #1
 8014070:	dc01      	bgt.n	8014076 <_printf_float+0x396>
 8014072:	07db      	lsls	r3, r3, #31
 8014074:	d536      	bpl.n	80140e4 <_printf_float+0x404>
 8014076:	2301      	movs	r3, #1
 8014078:	4642      	mov	r2, r8
 801407a:	4631      	mov	r1, r6
 801407c:	4628      	mov	r0, r5
 801407e:	47b8      	blx	r7
 8014080:	3001      	adds	r0, #1
 8014082:	f43f ae79 	beq.w	8013d78 <_printf_float+0x98>
 8014086:	9b05      	ldr	r3, [sp, #20]
 8014088:	465a      	mov	r2, fp
 801408a:	4631      	mov	r1, r6
 801408c:	4628      	mov	r0, r5
 801408e:	47b8      	blx	r7
 8014090:	3001      	adds	r0, #1
 8014092:	f43f ae71 	beq.w	8013d78 <_printf_float+0x98>
 8014096:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801409a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801409e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140a2:	f109 39ff 	add.w	r9, r9, #4294967295
 80140a6:	d018      	beq.n	80140da <_printf_float+0x3fa>
 80140a8:	464b      	mov	r3, r9
 80140aa:	f108 0201 	add.w	r2, r8, #1
 80140ae:	4631      	mov	r1, r6
 80140b0:	4628      	mov	r0, r5
 80140b2:	47b8      	blx	r7
 80140b4:	3001      	adds	r0, #1
 80140b6:	d10c      	bne.n	80140d2 <_printf_float+0x3f2>
 80140b8:	e65e      	b.n	8013d78 <_printf_float+0x98>
 80140ba:	2301      	movs	r3, #1
 80140bc:	465a      	mov	r2, fp
 80140be:	4631      	mov	r1, r6
 80140c0:	4628      	mov	r0, r5
 80140c2:	47b8      	blx	r7
 80140c4:	3001      	adds	r0, #1
 80140c6:	f43f ae57 	beq.w	8013d78 <_printf_float+0x98>
 80140ca:	f108 0801 	add.w	r8, r8, #1
 80140ce:	45c8      	cmp	r8, r9
 80140d0:	dbf3      	blt.n	80140ba <_printf_float+0x3da>
 80140d2:	4653      	mov	r3, sl
 80140d4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80140d8:	e6dc      	b.n	8013e94 <_printf_float+0x1b4>
 80140da:	f04f 0800 	mov.w	r8, #0
 80140de:	f104 0b1a 	add.w	fp, r4, #26
 80140e2:	e7f4      	b.n	80140ce <_printf_float+0x3ee>
 80140e4:	2301      	movs	r3, #1
 80140e6:	4642      	mov	r2, r8
 80140e8:	e7e1      	b.n	80140ae <_printf_float+0x3ce>
 80140ea:	2301      	movs	r3, #1
 80140ec:	464a      	mov	r2, r9
 80140ee:	4631      	mov	r1, r6
 80140f0:	4628      	mov	r0, r5
 80140f2:	47b8      	blx	r7
 80140f4:	3001      	adds	r0, #1
 80140f6:	f43f ae3f 	beq.w	8013d78 <_printf_float+0x98>
 80140fa:	f108 0801 	add.w	r8, r8, #1
 80140fe:	68e3      	ldr	r3, [r4, #12]
 8014100:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014102:	1a5b      	subs	r3, r3, r1
 8014104:	4543      	cmp	r3, r8
 8014106:	dcf0      	bgt.n	80140ea <_printf_float+0x40a>
 8014108:	e6f8      	b.n	8013efc <_printf_float+0x21c>
 801410a:	f04f 0800 	mov.w	r8, #0
 801410e:	f104 0919 	add.w	r9, r4, #25
 8014112:	e7f4      	b.n	80140fe <_printf_float+0x41e>

08014114 <_printf_common>:
 8014114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014118:	4616      	mov	r6, r2
 801411a:	4698      	mov	r8, r3
 801411c:	688a      	ldr	r2, [r1, #8]
 801411e:	690b      	ldr	r3, [r1, #16]
 8014120:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014124:	4293      	cmp	r3, r2
 8014126:	bfb8      	it	lt
 8014128:	4613      	movlt	r3, r2
 801412a:	6033      	str	r3, [r6, #0]
 801412c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014130:	4607      	mov	r7, r0
 8014132:	460c      	mov	r4, r1
 8014134:	b10a      	cbz	r2, 801413a <_printf_common+0x26>
 8014136:	3301      	adds	r3, #1
 8014138:	6033      	str	r3, [r6, #0]
 801413a:	6823      	ldr	r3, [r4, #0]
 801413c:	0699      	lsls	r1, r3, #26
 801413e:	bf42      	ittt	mi
 8014140:	6833      	ldrmi	r3, [r6, #0]
 8014142:	3302      	addmi	r3, #2
 8014144:	6033      	strmi	r3, [r6, #0]
 8014146:	6825      	ldr	r5, [r4, #0]
 8014148:	f015 0506 	ands.w	r5, r5, #6
 801414c:	d106      	bne.n	801415c <_printf_common+0x48>
 801414e:	f104 0a19 	add.w	sl, r4, #25
 8014152:	68e3      	ldr	r3, [r4, #12]
 8014154:	6832      	ldr	r2, [r6, #0]
 8014156:	1a9b      	subs	r3, r3, r2
 8014158:	42ab      	cmp	r3, r5
 801415a:	dc26      	bgt.n	80141aa <_printf_common+0x96>
 801415c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014160:	6822      	ldr	r2, [r4, #0]
 8014162:	3b00      	subs	r3, #0
 8014164:	bf18      	it	ne
 8014166:	2301      	movne	r3, #1
 8014168:	0692      	lsls	r2, r2, #26
 801416a:	d42b      	bmi.n	80141c4 <_printf_common+0xb0>
 801416c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014170:	4641      	mov	r1, r8
 8014172:	4638      	mov	r0, r7
 8014174:	47c8      	blx	r9
 8014176:	3001      	adds	r0, #1
 8014178:	d01e      	beq.n	80141b8 <_printf_common+0xa4>
 801417a:	6823      	ldr	r3, [r4, #0]
 801417c:	6922      	ldr	r2, [r4, #16]
 801417e:	f003 0306 	and.w	r3, r3, #6
 8014182:	2b04      	cmp	r3, #4
 8014184:	bf02      	ittt	eq
 8014186:	68e5      	ldreq	r5, [r4, #12]
 8014188:	6833      	ldreq	r3, [r6, #0]
 801418a:	1aed      	subeq	r5, r5, r3
 801418c:	68a3      	ldr	r3, [r4, #8]
 801418e:	bf0c      	ite	eq
 8014190:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014194:	2500      	movne	r5, #0
 8014196:	4293      	cmp	r3, r2
 8014198:	bfc4      	itt	gt
 801419a:	1a9b      	subgt	r3, r3, r2
 801419c:	18ed      	addgt	r5, r5, r3
 801419e:	2600      	movs	r6, #0
 80141a0:	341a      	adds	r4, #26
 80141a2:	42b5      	cmp	r5, r6
 80141a4:	d11a      	bne.n	80141dc <_printf_common+0xc8>
 80141a6:	2000      	movs	r0, #0
 80141a8:	e008      	b.n	80141bc <_printf_common+0xa8>
 80141aa:	2301      	movs	r3, #1
 80141ac:	4652      	mov	r2, sl
 80141ae:	4641      	mov	r1, r8
 80141b0:	4638      	mov	r0, r7
 80141b2:	47c8      	blx	r9
 80141b4:	3001      	adds	r0, #1
 80141b6:	d103      	bne.n	80141c0 <_printf_common+0xac>
 80141b8:	f04f 30ff 	mov.w	r0, #4294967295
 80141bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80141c0:	3501      	adds	r5, #1
 80141c2:	e7c6      	b.n	8014152 <_printf_common+0x3e>
 80141c4:	18e1      	adds	r1, r4, r3
 80141c6:	1c5a      	adds	r2, r3, #1
 80141c8:	2030      	movs	r0, #48	@ 0x30
 80141ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80141ce:	4422      	add	r2, r4
 80141d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80141d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80141d8:	3302      	adds	r3, #2
 80141da:	e7c7      	b.n	801416c <_printf_common+0x58>
 80141dc:	2301      	movs	r3, #1
 80141de:	4622      	mov	r2, r4
 80141e0:	4641      	mov	r1, r8
 80141e2:	4638      	mov	r0, r7
 80141e4:	47c8      	blx	r9
 80141e6:	3001      	adds	r0, #1
 80141e8:	d0e6      	beq.n	80141b8 <_printf_common+0xa4>
 80141ea:	3601      	adds	r6, #1
 80141ec:	e7d9      	b.n	80141a2 <_printf_common+0x8e>
	...

080141f0 <_printf_i>:
 80141f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80141f4:	7e0f      	ldrb	r7, [r1, #24]
 80141f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80141f8:	2f78      	cmp	r7, #120	@ 0x78
 80141fa:	4691      	mov	r9, r2
 80141fc:	4680      	mov	r8, r0
 80141fe:	460c      	mov	r4, r1
 8014200:	469a      	mov	sl, r3
 8014202:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8014206:	d807      	bhi.n	8014218 <_printf_i+0x28>
 8014208:	2f62      	cmp	r7, #98	@ 0x62
 801420a:	d80a      	bhi.n	8014222 <_printf_i+0x32>
 801420c:	2f00      	cmp	r7, #0
 801420e:	f000 80d1 	beq.w	80143b4 <_printf_i+0x1c4>
 8014212:	2f58      	cmp	r7, #88	@ 0x58
 8014214:	f000 80b8 	beq.w	8014388 <_printf_i+0x198>
 8014218:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801421c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014220:	e03a      	b.n	8014298 <_printf_i+0xa8>
 8014222:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8014226:	2b15      	cmp	r3, #21
 8014228:	d8f6      	bhi.n	8014218 <_printf_i+0x28>
 801422a:	a101      	add	r1, pc, #4	@ (adr r1, 8014230 <_printf_i+0x40>)
 801422c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014230:	08014289 	.word	0x08014289
 8014234:	0801429d 	.word	0x0801429d
 8014238:	08014219 	.word	0x08014219
 801423c:	08014219 	.word	0x08014219
 8014240:	08014219 	.word	0x08014219
 8014244:	08014219 	.word	0x08014219
 8014248:	0801429d 	.word	0x0801429d
 801424c:	08014219 	.word	0x08014219
 8014250:	08014219 	.word	0x08014219
 8014254:	08014219 	.word	0x08014219
 8014258:	08014219 	.word	0x08014219
 801425c:	0801439b 	.word	0x0801439b
 8014260:	080142c7 	.word	0x080142c7
 8014264:	08014355 	.word	0x08014355
 8014268:	08014219 	.word	0x08014219
 801426c:	08014219 	.word	0x08014219
 8014270:	080143bd 	.word	0x080143bd
 8014274:	08014219 	.word	0x08014219
 8014278:	080142c7 	.word	0x080142c7
 801427c:	08014219 	.word	0x08014219
 8014280:	08014219 	.word	0x08014219
 8014284:	0801435d 	.word	0x0801435d
 8014288:	6833      	ldr	r3, [r6, #0]
 801428a:	1d1a      	adds	r2, r3, #4
 801428c:	681b      	ldr	r3, [r3, #0]
 801428e:	6032      	str	r2, [r6, #0]
 8014290:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014294:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014298:	2301      	movs	r3, #1
 801429a:	e09c      	b.n	80143d6 <_printf_i+0x1e6>
 801429c:	6833      	ldr	r3, [r6, #0]
 801429e:	6820      	ldr	r0, [r4, #0]
 80142a0:	1d19      	adds	r1, r3, #4
 80142a2:	6031      	str	r1, [r6, #0]
 80142a4:	0606      	lsls	r6, r0, #24
 80142a6:	d501      	bpl.n	80142ac <_printf_i+0xbc>
 80142a8:	681d      	ldr	r5, [r3, #0]
 80142aa:	e003      	b.n	80142b4 <_printf_i+0xc4>
 80142ac:	0645      	lsls	r5, r0, #25
 80142ae:	d5fb      	bpl.n	80142a8 <_printf_i+0xb8>
 80142b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80142b4:	2d00      	cmp	r5, #0
 80142b6:	da03      	bge.n	80142c0 <_printf_i+0xd0>
 80142b8:	232d      	movs	r3, #45	@ 0x2d
 80142ba:	426d      	negs	r5, r5
 80142bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80142c0:	4858      	ldr	r0, [pc, #352]	@ (8014424 <_printf_i+0x234>)
 80142c2:	230a      	movs	r3, #10
 80142c4:	e011      	b.n	80142ea <_printf_i+0xfa>
 80142c6:	6821      	ldr	r1, [r4, #0]
 80142c8:	6833      	ldr	r3, [r6, #0]
 80142ca:	0608      	lsls	r0, r1, #24
 80142cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80142d0:	d402      	bmi.n	80142d8 <_printf_i+0xe8>
 80142d2:	0649      	lsls	r1, r1, #25
 80142d4:	bf48      	it	mi
 80142d6:	b2ad      	uxthmi	r5, r5
 80142d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80142da:	4852      	ldr	r0, [pc, #328]	@ (8014424 <_printf_i+0x234>)
 80142dc:	6033      	str	r3, [r6, #0]
 80142de:	bf14      	ite	ne
 80142e0:	230a      	movne	r3, #10
 80142e2:	2308      	moveq	r3, #8
 80142e4:	2100      	movs	r1, #0
 80142e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80142ea:	6866      	ldr	r6, [r4, #4]
 80142ec:	60a6      	str	r6, [r4, #8]
 80142ee:	2e00      	cmp	r6, #0
 80142f0:	db05      	blt.n	80142fe <_printf_i+0x10e>
 80142f2:	6821      	ldr	r1, [r4, #0]
 80142f4:	432e      	orrs	r6, r5
 80142f6:	f021 0104 	bic.w	r1, r1, #4
 80142fa:	6021      	str	r1, [r4, #0]
 80142fc:	d04b      	beq.n	8014396 <_printf_i+0x1a6>
 80142fe:	4616      	mov	r6, r2
 8014300:	fbb5 f1f3 	udiv	r1, r5, r3
 8014304:	fb03 5711 	mls	r7, r3, r1, r5
 8014308:	5dc7      	ldrb	r7, [r0, r7]
 801430a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801430e:	462f      	mov	r7, r5
 8014310:	42bb      	cmp	r3, r7
 8014312:	460d      	mov	r5, r1
 8014314:	d9f4      	bls.n	8014300 <_printf_i+0x110>
 8014316:	2b08      	cmp	r3, #8
 8014318:	d10b      	bne.n	8014332 <_printf_i+0x142>
 801431a:	6823      	ldr	r3, [r4, #0]
 801431c:	07df      	lsls	r7, r3, #31
 801431e:	d508      	bpl.n	8014332 <_printf_i+0x142>
 8014320:	6923      	ldr	r3, [r4, #16]
 8014322:	6861      	ldr	r1, [r4, #4]
 8014324:	4299      	cmp	r1, r3
 8014326:	bfde      	ittt	le
 8014328:	2330      	movle	r3, #48	@ 0x30
 801432a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801432e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014332:	1b92      	subs	r2, r2, r6
 8014334:	6122      	str	r2, [r4, #16]
 8014336:	f8cd a000 	str.w	sl, [sp]
 801433a:	464b      	mov	r3, r9
 801433c:	aa03      	add	r2, sp, #12
 801433e:	4621      	mov	r1, r4
 8014340:	4640      	mov	r0, r8
 8014342:	f7ff fee7 	bl	8014114 <_printf_common>
 8014346:	3001      	adds	r0, #1
 8014348:	d14a      	bne.n	80143e0 <_printf_i+0x1f0>
 801434a:	f04f 30ff 	mov.w	r0, #4294967295
 801434e:	b004      	add	sp, #16
 8014350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014354:	6823      	ldr	r3, [r4, #0]
 8014356:	f043 0320 	orr.w	r3, r3, #32
 801435a:	6023      	str	r3, [r4, #0]
 801435c:	4832      	ldr	r0, [pc, #200]	@ (8014428 <_printf_i+0x238>)
 801435e:	2778      	movs	r7, #120	@ 0x78
 8014360:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8014364:	6823      	ldr	r3, [r4, #0]
 8014366:	6831      	ldr	r1, [r6, #0]
 8014368:	061f      	lsls	r7, r3, #24
 801436a:	f851 5b04 	ldr.w	r5, [r1], #4
 801436e:	d402      	bmi.n	8014376 <_printf_i+0x186>
 8014370:	065f      	lsls	r7, r3, #25
 8014372:	bf48      	it	mi
 8014374:	b2ad      	uxthmi	r5, r5
 8014376:	6031      	str	r1, [r6, #0]
 8014378:	07d9      	lsls	r1, r3, #31
 801437a:	bf44      	itt	mi
 801437c:	f043 0320 	orrmi.w	r3, r3, #32
 8014380:	6023      	strmi	r3, [r4, #0]
 8014382:	b11d      	cbz	r5, 801438c <_printf_i+0x19c>
 8014384:	2310      	movs	r3, #16
 8014386:	e7ad      	b.n	80142e4 <_printf_i+0xf4>
 8014388:	4826      	ldr	r0, [pc, #152]	@ (8014424 <_printf_i+0x234>)
 801438a:	e7e9      	b.n	8014360 <_printf_i+0x170>
 801438c:	6823      	ldr	r3, [r4, #0]
 801438e:	f023 0320 	bic.w	r3, r3, #32
 8014392:	6023      	str	r3, [r4, #0]
 8014394:	e7f6      	b.n	8014384 <_printf_i+0x194>
 8014396:	4616      	mov	r6, r2
 8014398:	e7bd      	b.n	8014316 <_printf_i+0x126>
 801439a:	6833      	ldr	r3, [r6, #0]
 801439c:	6825      	ldr	r5, [r4, #0]
 801439e:	6961      	ldr	r1, [r4, #20]
 80143a0:	1d18      	adds	r0, r3, #4
 80143a2:	6030      	str	r0, [r6, #0]
 80143a4:	062e      	lsls	r6, r5, #24
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	d501      	bpl.n	80143ae <_printf_i+0x1be>
 80143aa:	6019      	str	r1, [r3, #0]
 80143ac:	e002      	b.n	80143b4 <_printf_i+0x1c4>
 80143ae:	0668      	lsls	r0, r5, #25
 80143b0:	d5fb      	bpl.n	80143aa <_printf_i+0x1ba>
 80143b2:	8019      	strh	r1, [r3, #0]
 80143b4:	2300      	movs	r3, #0
 80143b6:	6123      	str	r3, [r4, #16]
 80143b8:	4616      	mov	r6, r2
 80143ba:	e7bc      	b.n	8014336 <_printf_i+0x146>
 80143bc:	6833      	ldr	r3, [r6, #0]
 80143be:	1d1a      	adds	r2, r3, #4
 80143c0:	6032      	str	r2, [r6, #0]
 80143c2:	681e      	ldr	r6, [r3, #0]
 80143c4:	6862      	ldr	r2, [r4, #4]
 80143c6:	2100      	movs	r1, #0
 80143c8:	4630      	mov	r0, r6
 80143ca:	f7eb ffa1 	bl	8000310 <memchr>
 80143ce:	b108      	cbz	r0, 80143d4 <_printf_i+0x1e4>
 80143d0:	1b80      	subs	r0, r0, r6
 80143d2:	6060      	str	r0, [r4, #4]
 80143d4:	6863      	ldr	r3, [r4, #4]
 80143d6:	6123      	str	r3, [r4, #16]
 80143d8:	2300      	movs	r3, #0
 80143da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80143de:	e7aa      	b.n	8014336 <_printf_i+0x146>
 80143e0:	6923      	ldr	r3, [r4, #16]
 80143e2:	4632      	mov	r2, r6
 80143e4:	4649      	mov	r1, r9
 80143e6:	4640      	mov	r0, r8
 80143e8:	47d0      	blx	sl
 80143ea:	3001      	adds	r0, #1
 80143ec:	d0ad      	beq.n	801434a <_printf_i+0x15a>
 80143ee:	6823      	ldr	r3, [r4, #0]
 80143f0:	079b      	lsls	r3, r3, #30
 80143f2:	d413      	bmi.n	801441c <_printf_i+0x22c>
 80143f4:	68e0      	ldr	r0, [r4, #12]
 80143f6:	9b03      	ldr	r3, [sp, #12]
 80143f8:	4298      	cmp	r0, r3
 80143fa:	bfb8      	it	lt
 80143fc:	4618      	movlt	r0, r3
 80143fe:	e7a6      	b.n	801434e <_printf_i+0x15e>
 8014400:	2301      	movs	r3, #1
 8014402:	4632      	mov	r2, r6
 8014404:	4649      	mov	r1, r9
 8014406:	4640      	mov	r0, r8
 8014408:	47d0      	blx	sl
 801440a:	3001      	adds	r0, #1
 801440c:	d09d      	beq.n	801434a <_printf_i+0x15a>
 801440e:	3501      	adds	r5, #1
 8014410:	68e3      	ldr	r3, [r4, #12]
 8014412:	9903      	ldr	r1, [sp, #12]
 8014414:	1a5b      	subs	r3, r3, r1
 8014416:	42ab      	cmp	r3, r5
 8014418:	dcf2      	bgt.n	8014400 <_printf_i+0x210>
 801441a:	e7eb      	b.n	80143f4 <_printf_i+0x204>
 801441c:	2500      	movs	r5, #0
 801441e:	f104 0619 	add.w	r6, r4, #25
 8014422:	e7f5      	b.n	8014410 <_printf_i+0x220>
 8014424:	080188d6 	.word	0x080188d6
 8014428:	080188e7 	.word	0x080188e7

0801442c <_scanf_float>:
 801442c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014430:	b087      	sub	sp, #28
 8014432:	4691      	mov	r9, r2
 8014434:	9303      	str	r3, [sp, #12]
 8014436:	688b      	ldr	r3, [r1, #8]
 8014438:	1e5a      	subs	r2, r3, #1
 801443a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801443e:	bf81      	itttt	hi
 8014440:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8014444:	eb03 0b05 	addhi.w	fp, r3, r5
 8014448:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801444c:	608b      	strhi	r3, [r1, #8]
 801444e:	680b      	ldr	r3, [r1, #0]
 8014450:	460a      	mov	r2, r1
 8014452:	f04f 0500 	mov.w	r5, #0
 8014456:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801445a:	f842 3b1c 	str.w	r3, [r2], #28
 801445e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8014462:	4680      	mov	r8, r0
 8014464:	460c      	mov	r4, r1
 8014466:	bf98      	it	ls
 8014468:	f04f 0b00 	movls.w	fp, #0
 801446c:	9201      	str	r2, [sp, #4]
 801446e:	4616      	mov	r6, r2
 8014470:	46aa      	mov	sl, r5
 8014472:	462f      	mov	r7, r5
 8014474:	9502      	str	r5, [sp, #8]
 8014476:	68a2      	ldr	r2, [r4, #8]
 8014478:	b15a      	cbz	r2, 8014492 <_scanf_float+0x66>
 801447a:	f8d9 3000 	ldr.w	r3, [r9]
 801447e:	781b      	ldrb	r3, [r3, #0]
 8014480:	2b4e      	cmp	r3, #78	@ 0x4e
 8014482:	d863      	bhi.n	801454c <_scanf_float+0x120>
 8014484:	2b40      	cmp	r3, #64	@ 0x40
 8014486:	d83b      	bhi.n	8014500 <_scanf_float+0xd4>
 8014488:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801448c:	b2c8      	uxtb	r0, r1
 801448e:	280e      	cmp	r0, #14
 8014490:	d939      	bls.n	8014506 <_scanf_float+0xda>
 8014492:	b11f      	cbz	r7, 801449c <_scanf_float+0x70>
 8014494:	6823      	ldr	r3, [r4, #0]
 8014496:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801449a:	6023      	str	r3, [r4, #0]
 801449c:	f10a 3aff 	add.w	sl, sl, #4294967295
 80144a0:	f1ba 0f01 	cmp.w	sl, #1
 80144a4:	f200 8114 	bhi.w	80146d0 <_scanf_float+0x2a4>
 80144a8:	9b01      	ldr	r3, [sp, #4]
 80144aa:	429e      	cmp	r6, r3
 80144ac:	f200 8105 	bhi.w	80146ba <_scanf_float+0x28e>
 80144b0:	2001      	movs	r0, #1
 80144b2:	b007      	add	sp, #28
 80144b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144b8:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80144bc:	2a0d      	cmp	r2, #13
 80144be:	d8e8      	bhi.n	8014492 <_scanf_float+0x66>
 80144c0:	a101      	add	r1, pc, #4	@ (adr r1, 80144c8 <_scanf_float+0x9c>)
 80144c2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80144c6:	bf00      	nop
 80144c8:	08014611 	.word	0x08014611
 80144cc:	08014493 	.word	0x08014493
 80144d0:	08014493 	.word	0x08014493
 80144d4:	08014493 	.word	0x08014493
 80144d8:	0801466d 	.word	0x0801466d
 80144dc:	08014647 	.word	0x08014647
 80144e0:	08014493 	.word	0x08014493
 80144e4:	08014493 	.word	0x08014493
 80144e8:	0801461f 	.word	0x0801461f
 80144ec:	08014493 	.word	0x08014493
 80144f0:	08014493 	.word	0x08014493
 80144f4:	08014493 	.word	0x08014493
 80144f8:	08014493 	.word	0x08014493
 80144fc:	080145db 	.word	0x080145db
 8014500:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8014504:	e7da      	b.n	80144bc <_scanf_float+0x90>
 8014506:	290e      	cmp	r1, #14
 8014508:	d8c3      	bhi.n	8014492 <_scanf_float+0x66>
 801450a:	a001      	add	r0, pc, #4	@ (adr r0, 8014510 <_scanf_float+0xe4>)
 801450c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8014510:	080145cb 	.word	0x080145cb
 8014514:	08014493 	.word	0x08014493
 8014518:	080145cb 	.word	0x080145cb
 801451c:	0801465b 	.word	0x0801465b
 8014520:	08014493 	.word	0x08014493
 8014524:	0801456d 	.word	0x0801456d
 8014528:	080145b1 	.word	0x080145b1
 801452c:	080145b1 	.word	0x080145b1
 8014530:	080145b1 	.word	0x080145b1
 8014534:	080145b1 	.word	0x080145b1
 8014538:	080145b1 	.word	0x080145b1
 801453c:	080145b1 	.word	0x080145b1
 8014540:	080145b1 	.word	0x080145b1
 8014544:	080145b1 	.word	0x080145b1
 8014548:	080145b1 	.word	0x080145b1
 801454c:	2b6e      	cmp	r3, #110	@ 0x6e
 801454e:	d809      	bhi.n	8014564 <_scanf_float+0x138>
 8014550:	2b60      	cmp	r3, #96	@ 0x60
 8014552:	d8b1      	bhi.n	80144b8 <_scanf_float+0x8c>
 8014554:	2b54      	cmp	r3, #84	@ 0x54
 8014556:	d07b      	beq.n	8014650 <_scanf_float+0x224>
 8014558:	2b59      	cmp	r3, #89	@ 0x59
 801455a:	d19a      	bne.n	8014492 <_scanf_float+0x66>
 801455c:	2d07      	cmp	r5, #7
 801455e:	d198      	bne.n	8014492 <_scanf_float+0x66>
 8014560:	2508      	movs	r5, #8
 8014562:	e02f      	b.n	80145c4 <_scanf_float+0x198>
 8014564:	2b74      	cmp	r3, #116	@ 0x74
 8014566:	d073      	beq.n	8014650 <_scanf_float+0x224>
 8014568:	2b79      	cmp	r3, #121	@ 0x79
 801456a:	e7f6      	b.n	801455a <_scanf_float+0x12e>
 801456c:	6821      	ldr	r1, [r4, #0]
 801456e:	05c8      	lsls	r0, r1, #23
 8014570:	d51e      	bpl.n	80145b0 <_scanf_float+0x184>
 8014572:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8014576:	6021      	str	r1, [r4, #0]
 8014578:	3701      	adds	r7, #1
 801457a:	f1bb 0f00 	cmp.w	fp, #0
 801457e:	d003      	beq.n	8014588 <_scanf_float+0x15c>
 8014580:	3201      	adds	r2, #1
 8014582:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014586:	60a2      	str	r2, [r4, #8]
 8014588:	68a3      	ldr	r3, [r4, #8]
 801458a:	3b01      	subs	r3, #1
 801458c:	60a3      	str	r3, [r4, #8]
 801458e:	6923      	ldr	r3, [r4, #16]
 8014590:	3301      	adds	r3, #1
 8014592:	6123      	str	r3, [r4, #16]
 8014594:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014598:	3b01      	subs	r3, #1
 801459a:	2b00      	cmp	r3, #0
 801459c:	f8c9 3004 	str.w	r3, [r9, #4]
 80145a0:	f340 8082 	ble.w	80146a8 <_scanf_float+0x27c>
 80145a4:	f8d9 3000 	ldr.w	r3, [r9]
 80145a8:	3301      	adds	r3, #1
 80145aa:	f8c9 3000 	str.w	r3, [r9]
 80145ae:	e762      	b.n	8014476 <_scanf_float+0x4a>
 80145b0:	eb1a 0105 	adds.w	r1, sl, r5
 80145b4:	f47f af6d 	bne.w	8014492 <_scanf_float+0x66>
 80145b8:	6822      	ldr	r2, [r4, #0]
 80145ba:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80145be:	6022      	str	r2, [r4, #0]
 80145c0:	460d      	mov	r5, r1
 80145c2:	468a      	mov	sl, r1
 80145c4:	f806 3b01 	strb.w	r3, [r6], #1
 80145c8:	e7de      	b.n	8014588 <_scanf_float+0x15c>
 80145ca:	6822      	ldr	r2, [r4, #0]
 80145cc:	0610      	lsls	r0, r2, #24
 80145ce:	f57f af60 	bpl.w	8014492 <_scanf_float+0x66>
 80145d2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80145d6:	6022      	str	r2, [r4, #0]
 80145d8:	e7f4      	b.n	80145c4 <_scanf_float+0x198>
 80145da:	f1ba 0f00 	cmp.w	sl, #0
 80145de:	d10c      	bne.n	80145fa <_scanf_float+0x1ce>
 80145e0:	b977      	cbnz	r7, 8014600 <_scanf_float+0x1d4>
 80145e2:	6822      	ldr	r2, [r4, #0]
 80145e4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80145e8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80145ec:	d108      	bne.n	8014600 <_scanf_float+0x1d4>
 80145ee:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80145f2:	6022      	str	r2, [r4, #0]
 80145f4:	f04f 0a01 	mov.w	sl, #1
 80145f8:	e7e4      	b.n	80145c4 <_scanf_float+0x198>
 80145fa:	f1ba 0f02 	cmp.w	sl, #2
 80145fe:	d050      	beq.n	80146a2 <_scanf_float+0x276>
 8014600:	2d01      	cmp	r5, #1
 8014602:	d002      	beq.n	801460a <_scanf_float+0x1de>
 8014604:	2d04      	cmp	r5, #4
 8014606:	f47f af44 	bne.w	8014492 <_scanf_float+0x66>
 801460a:	3501      	adds	r5, #1
 801460c:	b2ed      	uxtb	r5, r5
 801460e:	e7d9      	b.n	80145c4 <_scanf_float+0x198>
 8014610:	f1ba 0f01 	cmp.w	sl, #1
 8014614:	f47f af3d 	bne.w	8014492 <_scanf_float+0x66>
 8014618:	f04f 0a02 	mov.w	sl, #2
 801461c:	e7d2      	b.n	80145c4 <_scanf_float+0x198>
 801461e:	b975      	cbnz	r5, 801463e <_scanf_float+0x212>
 8014620:	2f00      	cmp	r7, #0
 8014622:	f47f af37 	bne.w	8014494 <_scanf_float+0x68>
 8014626:	6822      	ldr	r2, [r4, #0]
 8014628:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801462c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8014630:	f040 80fc 	bne.w	801482c <_scanf_float+0x400>
 8014634:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8014638:	6022      	str	r2, [r4, #0]
 801463a:	2501      	movs	r5, #1
 801463c:	e7c2      	b.n	80145c4 <_scanf_float+0x198>
 801463e:	2d03      	cmp	r5, #3
 8014640:	d0e3      	beq.n	801460a <_scanf_float+0x1de>
 8014642:	2d05      	cmp	r5, #5
 8014644:	e7df      	b.n	8014606 <_scanf_float+0x1da>
 8014646:	2d02      	cmp	r5, #2
 8014648:	f47f af23 	bne.w	8014492 <_scanf_float+0x66>
 801464c:	2503      	movs	r5, #3
 801464e:	e7b9      	b.n	80145c4 <_scanf_float+0x198>
 8014650:	2d06      	cmp	r5, #6
 8014652:	f47f af1e 	bne.w	8014492 <_scanf_float+0x66>
 8014656:	2507      	movs	r5, #7
 8014658:	e7b4      	b.n	80145c4 <_scanf_float+0x198>
 801465a:	6822      	ldr	r2, [r4, #0]
 801465c:	0591      	lsls	r1, r2, #22
 801465e:	f57f af18 	bpl.w	8014492 <_scanf_float+0x66>
 8014662:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8014666:	6022      	str	r2, [r4, #0]
 8014668:	9702      	str	r7, [sp, #8]
 801466a:	e7ab      	b.n	80145c4 <_scanf_float+0x198>
 801466c:	6822      	ldr	r2, [r4, #0]
 801466e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8014672:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8014676:	d005      	beq.n	8014684 <_scanf_float+0x258>
 8014678:	0550      	lsls	r0, r2, #21
 801467a:	f57f af0a 	bpl.w	8014492 <_scanf_float+0x66>
 801467e:	2f00      	cmp	r7, #0
 8014680:	f000 80d4 	beq.w	801482c <_scanf_float+0x400>
 8014684:	0591      	lsls	r1, r2, #22
 8014686:	bf58      	it	pl
 8014688:	9902      	ldrpl	r1, [sp, #8]
 801468a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801468e:	bf58      	it	pl
 8014690:	1a79      	subpl	r1, r7, r1
 8014692:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8014696:	bf58      	it	pl
 8014698:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801469c:	6022      	str	r2, [r4, #0]
 801469e:	2700      	movs	r7, #0
 80146a0:	e790      	b.n	80145c4 <_scanf_float+0x198>
 80146a2:	f04f 0a03 	mov.w	sl, #3
 80146a6:	e78d      	b.n	80145c4 <_scanf_float+0x198>
 80146a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80146ac:	4649      	mov	r1, r9
 80146ae:	4640      	mov	r0, r8
 80146b0:	4798      	blx	r3
 80146b2:	2800      	cmp	r0, #0
 80146b4:	f43f aedf 	beq.w	8014476 <_scanf_float+0x4a>
 80146b8:	e6eb      	b.n	8014492 <_scanf_float+0x66>
 80146ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80146be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80146c2:	464a      	mov	r2, r9
 80146c4:	4640      	mov	r0, r8
 80146c6:	4798      	blx	r3
 80146c8:	6923      	ldr	r3, [r4, #16]
 80146ca:	3b01      	subs	r3, #1
 80146cc:	6123      	str	r3, [r4, #16]
 80146ce:	e6eb      	b.n	80144a8 <_scanf_float+0x7c>
 80146d0:	1e6b      	subs	r3, r5, #1
 80146d2:	2b06      	cmp	r3, #6
 80146d4:	d824      	bhi.n	8014720 <_scanf_float+0x2f4>
 80146d6:	2d02      	cmp	r5, #2
 80146d8:	d836      	bhi.n	8014748 <_scanf_float+0x31c>
 80146da:	9b01      	ldr	r3, [sp, #4]
 80146dc:	429e      	cmp	r6, r3
 80146de:	f67f aee7 	bls.w	80144b0 <_scanf_float+0x84>
 80146e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80146e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80146ea:	464a      	mov	r2, r9
 80146ec:	4640      	mov	r0, r8
 80146ee:	4798      	blx	r3
 80146f0:	6923      	ldr	r3, [r4, #16]
 80146f2:	3b01      	subs	r3, #1
 80146f4:	6123      	str	r3, [r4, #16]
 80146f6:	e7f0      	b.n	80146da <_scanf_float+0x2ae>
 80146f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80146fc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8014700:	464a      	mov	r2, r9
 8014702:	4640      	mov	r0, r8
 8014704:	4798      	blx	r3
 8014706:	6923      	ldr	r3, [r4, #16]
 8014708:	3b01      	subs	r3, #1
 801470a:	6123      	str	r3, [r4, #16]
 801470c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014710:	fa5f fa8a 	uxtb.w	sl, sl
 8014714:	f1ba 0f02 	cmp.w	sl, #2
 8014718:	d1ee      	bne.n	80146f8 <_scanf_float+0x2cc>
 801471a:	3d03      	subs	r5, #3
 801471c:	b2ed      	uxtb	r5, r5
 801471e:	1b76      	subs	r6, r6, r5
 8014720:	6823      	ldr	r3, [r4, #0]
 8014722:	05da      	lsls	r2, r3, #23
 8014724:	d530      	bpl.n	8014788 <_scanf_float+0x35c>
 8014726:	055b      	lsls	r3, r3, #21
 8014728:	d511      	bpl.n	801474e <_scanf_float+0x322>
 801472a:	9b01      	ldr	r3, [sp, #4]
 801472c:	429e      	cmp	r6, r3
 801472e:	f67f aebf 	bls.w	80144b0 <_scanf_float+0x84>
 8014732:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014736:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801473a:	464a      	mov	r2, r9
 801473c:	4640      	mov	r0, r8
 801473e:	4798      	blx	r3
 8014740:	6923      	ldr	r3, [r4, #16]
 8014742:	3b01      	subs	r3, #1
 8014744:	6123      	str	r3, [r4, #16]
 8014746:	e7f0      	b.n	801472a <_scanf_float+0x2fe>
 8014748:	46aa      	mov	sl, r5
 801474a:	46b3      	mov	fp, r6
 801474c:	e7de      	b.n	801470c <_scanf_float+0x2e0>
 801474e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8014752:	6923      	ldr	r3, [r4, #16]
 8014754:	2965      	cmp	r1, #101	@ 0x65
 8014756:	f103 33ff 	add.w	r3, r3, #4294967295
 801475a:	f106 35ff 	add.w	r5, r6, #4294967295
 801475e:	6123      	str	r3, [r4, #16]
 8014760:	d00c      	beq.n	801477c <_scanf_float+0x350>
 8014762:	2945      	cmp	r1, #69	@ 0x45
 8014764:	d00a      	beq.n	801477c <_scanf_float+0x350>
 8014766:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801476a:	464a      	mov	r2, r9
 801476c:	4640      	mov	r0, r8
 801476e:	4798      	blx	r3
 8014770:	6923      	ldr	r3, [r4, #16]
 8014772:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8014776:	3b01      	subs	r3, #1
 8014778:	1eb5      	subs	r5, r6, #2
 801477a:	6123      	str	r3, [r4, #16]
 801477c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014780:	464a      	mov	r2, r9
 8014782:	4640      	mov	r0, r8
 8014784:	4798      	blx	r3
 8014786:	462e      	mov	r6, r5
 8014788:	6822      	ldr	r2, [r4, #0]
 801478a:	f012 0210 	ands.w	r2, r2, #16
 801478e:	d001      	beq.n	8014794 <_scanf_float+0x368>
 8014790:	2000      	movs	r0, #0
 8014792:	e68e      	b.n	80144b2 <_scanf_float+0x86>
 8014794:	7032      	strb	r2, [r6, #0]
 8014796:	6823      	ldr	r3, [r4, #0]
 8014798:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801479c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80147a0:	d123      	bne.n	80147ea <_scanf_float+0x3be>
 80147a2:	9b02      	ldr	r3, [sp, #8]
 80147a4:	429f      	cmp	r7, r3
 80147a6:	d00a      	beq.n	80147be <_scanf_float+0x392>
 80147a8:	1bda      	subs	r2, r3, r7
 80147aa:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80147ae:	429e      	cmp	r6, r3
 80147b0:	bf28      	it	cs
 80147b2:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80147b6:	491e      	ldr	r1, [pc, #120]	@ (8014830 <_scanf_float+0x404>)
 80147b8:	4630      	mov	r0, r6
 80147ba:	f000 f9e9 	bl	8014b90 <siprintf>
 80147be:	9901      	ldr	r1, [sp, #4]
 80147c0:	2200      	movs	r2, #0
 80147c2:	4640      	mov	r0, r8
 80147c4:	f002 fc22 	bl	801700c <_strtod_r>
 80147c8:	9b03      	ldr	r3, [sp, #12]
 80147ca:	6821      	ldr	r1, [r4, #0]
 80147cc:	681b      	ldr	r3, [r3, #0]
 80147ce:	f011 0f02 	tst.w	r1, #2
 80147d2:	f103 0204 	add.w	r2, r3, #4
 80147d6:	d015      	beq.n	8014804 <_scanf_float+0x3d8>
 80147d8:	9903      	ldr	r1, [sp, #12]
 80147da:	600a      	str	r2, [r1, #0]
 80147dc:	681b      	ldr	r3, [r3, #0]
 80147de:	ed83 0b00 	vstr	d0, [r3]
 80147e2:	68e3      	ldr	r3, [r4, #12]
 80147e4:	3301      	adds	r3, #1
 80147e6:	60e3      	str	r3, [r4, #12]
 80147e8:	e7d2      	b.n	8014790 <_scanf_float+0x364>
 80147ea:	9b04      	ldr	r3, [sp, #16]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d0e6      	beq.n	80147be <_scanf_float+0x392>
 80147f0:	9905      	ldr	r1, [sp, #20]
 80147f2:	230a      	movs	r3, #10
 80147f4:	3101      	adds	r1, #1
 80147f6:	4640      	mov	r0, r8
 80147f8:	f002 fc88 	bl	801710c <_strtol_r>
 80147fc:	9b04      	ldr	r3, [sp, #16]
 80147fe:	9e05      	ldr	r6, [sp, #20]
 8014800:	1ac2      	subs	r2, r0, r3
 8014802:	e7d2      	b.n	80147aa <_scanf_float+0x37e>
 8014804:	f011 0f04 	tst.w	r1, #4
 8014808:	9903      	ldr	r1, [sp, #12]
 801480a:	600a      	str	r2, [r1, #0]
 801480c:	d1e6      	bne.n	80147dc <_scanf_float+0x3b0>
 801480e:	eeb4 0b40 	vcmp.f64	d0, d0
 8014812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014816:	681d      	ldr	r5, [r3, #0]
 8014818:	d705      	bvc.n	8014826 <_scanf_float+0x3fa>
 801481a:	4806      	ldr	r0, [pc, #24]	@ (8014834 <_scanf_float+0x408>)
 801481c:	f000 faac 	bl	8014d78 <nanf>
 8014820:	ed85 0a00 	vstr	s0, [r5]
 8014824:	e7dd      	b.n	80147e2 <_scanf_float+0x3b6>
 8014826:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801482a:	e7f9      	b.n	8014820 <_scanf_float+0x3f4>
 801482c:	2700      	movs	r7, #0
 801482e:	e635      	b.n	801449c <_scanf_float+0x70>
 8014830:	080188f8 	.word	0x080188f8
 8014834:	08018a39 	.word	0x08018a39

08014838 <std>:
 8014838:	2300      	movs	r3, #0
 801483a:	b510      	push	{r4, lr}
 801483c:	4604      	mov	r4, r0
 801483e:	e9c0 3300 	strd	r3, r3, [r0]
 8014842:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014846:	6083      	str	r3, [r0, #8]
 8014848:	8181      	strh	r1, [r0, #12]
 801484a:	6643      	str	r3, [r0, #100]	@ 0x64
 801484c:	81c2      	strh	r2, [r0, #14]
 801484e:	6183      	str	r3, [r0, #24]
 8014850:	4619      	mov	r1, r3
 8014852:	2208      	movs	r2, #8
 8014854:	305c      	adds	r0, #92	@ 0x5c
 8014856:	f000 fa00 	bl	8014c5a <memset>
 801485a:	4b0d      	ldr	r3, [pc, #52]	@ (8014890 <std+0x58>)
 801485c:	6263      	str	r3, [r4, #36]	@ 0x24
 801485e:	4b0d      	ldr	r3, [pc, #52]	@ (8014894 <std+0x5c>)
 8014860:	62a3      	str	r3, [r4, #40]	@ 0x28
 8014862:	4b0d      	ldr	r3, [pc, #52]	@ (8014898 <std+0x60>)
 8014864:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014866:	4b0d      	ldr	r3, [pc, #52]	@ (801489c <std+0x64>)
 8014868:	6323      	str	r3, [r4, #48]	@ 0x30
 801486a:	4b0d      	ldr	r3, [pc, #52]	@ (80148a0 <std+0x68>)
 801486c:	6224      	str	r4, [r4, #32]
 801486e:	429c      	cmp	r4, r3
 8014870:	d006      	beq.n	8014880 <std+0x48>
 8014872:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8014876:	4294      	cmp	r4, r2
 8014878:	d002      	beq.n	8014880 <std+0x48>
 801487a:	33d0      	adds	r3, #208	@ 0xd0
 801487c:	429c      	cmp	r4, r3
 801487e:	d105      	bne.n	801488c <std+0x54>
 8014880:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014888:	f000 ba64 	b.w	8014d54 <__retarget_lock_init_recursive>
 801488c:	bd10      	pop	{r4, pc}
 801488e:	bf00      	nop
 8014890:	08014bd5 	.word	0x08014bd5
 8014894:	08014bf7 	.word	0x08014bf7
 8014898:	08014c2f 	.word	0x08014c2f
 801489c:	08014c53 	.word	0x08014c53
 80148a0:	240009c8 	.word	0x240009c8

080148a4 <stdio_exit_handler>:
 80148a4:	4a02      	ldr	r2, [pc, #8]	@ (80148b0 <stdio_exit_handler+0xc>)
 80148a6:	4903      	ldr	r1, [pc, #12]	@ (80148b4 <stdio_exit_handler+0x10>)
 80148a8:	4803      	ldr	r0, [pc, #12]	@ (80148b8 <stdio_exit_handler+0x14>)
 80148aa:	f000 b869 	b.w	8014980 <_fwalk_sglue>
 80148ae:	bf00      	nop
 80148b0:	24000020 	.word	0x24000020
 80148b4:	080174c9 	.word	0x080174c9
 80148b8:	24000030 	.word	0x24000030

080148bc <cleanup_stdio>:
 80148bc:	6841      	ldr	r1, [r0, #4]
 80148be:	4b0c      	ldr	r3, [pc, #48]	@ (80148f0 <cleanup_stdio+0x34>)
 80148c0:	4299      	cmp	r1, r3
 80148c2:	b510      	push	{r4, lr}
 80148c4:	4604      	mov	r4, r0
 80148c6:	d001      	beq.n	80148cc <cleanup_stdio+0x10>
 80148c8:	f002 fdfe 	bl	80174c8 <_fflush_r>
 80148cc:	68a1      	ldr	r1, [r4, #8]
 80148ce:	4b09      	ldr	r3, [pc, #36]	@ (80148f4 <cleanup_stdio+0x38>)
 80148d0:	4299      	cmp	r1, r3
 80148d2:	d002      	beq.n	80148da <cleanup_stdio+0x1e>
 80148d4:	4620      	mov	r0, r4
 80148d6:	f002 fdf7 	bl	80174c8 <_fflush_r>
 80148da:	68e1      	ldr	r1, [r4, #12]
 80148dc:	4b06      	ldr	r3, [pc, #24]	@ (80148f8 <cleanup_stdio+0x3c>)
 80148de:	4299      	cmp	r1, r3
 80148e0:	d004      	beq.n	80148ec <cleanup_stdio+0x30>
 80148e2:	4620      	mov	r0, r4
 80148e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80148e8:	f002 bdee 	b.w	80174c8 <_fflush_r>
 80148ec:	bd10      	pop	{r4, pc}
 80148ee:	bf00      	nop
 80148f0:	240009c8 	.word	0x240009c8
 80148f4:	24000a30 	.word	0x24000a30
 80148f8:	24000a98 	.word	0x24000a98

080148fc <global_stdio_init.part.0>:
 80148fc:	b510      	push	{r4, lr}
 80148fe:	4b0b      	ldr	r3, [pc, #44]	@ (801492c <global_stdio_init.part.0+0x30>)
 8014900:	4c0b      	ldr	r4, [pc, #44]	@ (8014930 <global_stdio_init.part.0+0x34>)
 8014902:	4a0c      	ldr	r2, [pc, #48]	@ (8014934 <global_stdio_init.part.0+0x38>)
 8014904:	601a      	str	r2, [r3, #0]
 8014906:	4620      	mov	r0, r4
 8014908:	2200      	movs	r2, #0
 801490a:	2104      	movs	r1, #4
 801490c:	f7ff ff94 	bl	8014838 <std>
 8014910:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014914:	2201      	movs	r2, #1
 8014916:	2109      	movs	r1, #9
 8014918:	f7ff ff8e 	bl	8014838 <std>
 801491c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014920:	2202      	movs	r2, #2
 8014922:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014926:	2112      	movs	r1, #18
 8014928:	f7ff bf86 	b.w	8014838 <std>
 801492c:	24000b00 	.word	0x24000b00
 8014930:	240009c8 	.word	0x240009c8
 8014934:	080148a5 	.word	0x080148a5

08014938 <__sfp_lock_acquire>:
 8014938:	4801      	ldr	r0, [pc, #4]	@ (8014940 <__sfp_lock_acquire+0x8>)
 801493a:	f000 ba0c 	b.w	8014d56 <__retarget_lock_acquire_recursive>
 801493e:	bf00      	nop
 8014940:	24000b09 	.word	0x24000b09

08014944 <__sfp_lock_release>:
 8014944:	4801      	ldr	r0, [pc, #4]	@ (801494c <__sfp_lock_release+0x8>)
 8014946:	f000 ba07 	b.w	8014d58 <__retarget_lock_release_recursive>
 801494a:	bf00      	nop
 801494c:	24000b09 	.word	0x24000b09

08014950 <__sinit>:
 8014950:	b510      	push	{r4, lr}
 8014952:	4604      	mov	r4, r0
 8014954:	f7ff fff0 	bl	8014938 <__sfp_lock_acquire>
 8014958:	6a23      	ldr	r3, [r4, #32]
 801495a:	b11b      	cbz	r3, 8014964 <__sinit+0x14>
 801495c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014960:	f7ff bff0 	b.w	8014944 <__sfp_lock_release>
 8014964:	4b04      	ldr	r3, [pc, #16]	@ (8014978 <__sinit+0x28>)
 8014966:	6223      	str	r3, [r4, #32]
 8014968:	4b04      	ldr	r3, [pc, #16]	@ (801497c <__sinit+0x2c>)
 801496a:	681b      	ldr	r3, [r3, #0]
 801496c:	2b00      	cmp	r3, #0
 801496e:	d1f5      	bne.n	801495c <__sinit+0xc>
 8014970:	f7ff ffc4 	bl	80148fc <global_stdio_init.part.0>
 8014974:	e7f2      	b.n	801495c <__sinit+0xc>
 8014976:	bf00      	nop
 8014978:	080148bd 	.word	0x080148bd
 801497c:	24000b00 	.word	0x24000b00

08014980 <_fwalk_sglue>:
 8014980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014984:	4607      	mov	r7, r0
 8014986:	4688      	mov	r8, r1
 8014988:	4614      	mov	r4, r2
 801498a:	2600      	movs	r6, #0
 801498c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014990:	f1b9 0901 	subs.w	r9, r9, #1
 8014994:	d505      	bpl.n	80149a2 <_fwalk_sglue+0x22>
 8014996:	6824      	ldr	r4, [r4, #0]
 8014998:	2c00      	cmp	r4, #0
 801499a:	d1f7      	bne.n	801498c <_fwalk_sglue+0xc>
 801499c:	4630      	mov	r0, r6
 801499e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80149a2:	89ab      	ldrh	r3, [r5, #12]
 80149a4:	2b01      	cmp	r3, #1
 80149a6:	d907      	bls.n	80149b8 <_fwalk_sglue+0x38>
 80149a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80149ac:	3301      	adds	r3, #1
 80149ae:	d003      	beq.n	80149b8 <_fwalk_sglue+0x38>
 80149b0:	4629      	mov	r1, r5
 80149b2:	4638      	mov	r0, r7
 80149b4:	47c0      	blx	r8
 80149b6:	4306      	orrs	r6, r0
 80149b8:	3568      	adds	r5, #104	@ 0x68
 80149ba:	e7e9      	b.n	8014990 <_fwalk_sglue+0x10>

080149bc <setvbuf>:
 80149bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80149c0:	461d      	mov	r5, r3
 80149c2:	4b57      	ldr	r3, [pc, #348]	@ (8014b20 <setvbuf+0x164>)
 80149c4:	681f      	ldr	r7, [r3, #0]
 80149c6:	4604      	mov	r4, r0
 80149c8:	460e      	mov	r6, r1
 80149ca:	4690      	mov	r8, r2
 80149cc:	b127      	cbz	r7, 80149d8 <setvbuf+0x1c>
 80149ce:	6a3b      	ldr	r3, [r7, #32]
 80149d0:	b913      	cbnz	r3, 80149d8 <setvbuf+0x1c>
 80149d2:	4638      	mov	r0, r7
 80149d4:	f7ff ffbc 	bl	8014950 <__sinit>
 80149d8:	f1b8 0f02 	cmp.w	r8, #2
 80149dc:	d006      	beq.n	80149ec <setvbuf+0x30>
 80149de:	f1b8 0f01 	cmp.w	r8, #1
 80149e2:	f200 809a 	bhi.w	8014b1a <setvbuf+0x15e>
 80149e6:	2d00      	cmp	r5, #0
 80149e8:	f2c0 8097 	blt.w	8014b1a <setvbuf+0x15e>
 80149ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80149ee:	07d9      	lsls	r1, r3, #31
 80149f0:	d405      	bmi.n	80149fe <setvbuf+0x42>
 80149f2:	89a3      	ldrh	r3, [r4, #12]
 80149f4:	059a      	lsls	r2, r3, #22
 80149f6:	d402      	bmi.n	80149fe <setvbuf+0x42>
 80149f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80149fa:	f000 f9ac 	bl	8014d56 <__retarget_lock_acquire_recursive>
 80149fe:	4621      	mov	r1, r4
 8014a00:	4638      	mov	r0, r7
 8014a02:	f002 fd61 	bl	80174c8 <_fflush_r>
 8014a06:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014a08:	b141      	cbz	r1, 8014a1c <setvbuf+0x60>
 8014a0a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014a0e:	4299      	cmp	r1, r3
 8014a10:	d002      	beq.n	8014a18 <setvbuf+0x5c>
 8014a12:	4638      	mov	r0, r7
 8014a14:	f000 ff9e 	bl	8015954 <_free_r>
 8014a18:	2300      	movs	r3, #0
 8014a1a:	6363      	str	r3, [r4, #52]	@ 0x34
 8014a1c:	2300      	movs	r3, #0
 8014a1e:	61a3      	str	r3, [r4, #24]
 8014a20:	6063      	str	r3, [r4, #4]
 8014a22:	89a3      	ldrh	r3, [r4, #12]
 8014a24:	061b      	lsls	r3, r3, #24
 8014a26:	d503      	bpl.n	8014a30 <setvbuf+0x74>
 8014a28:	6921      	ldr	r1, [r4, #16]
 8014a2a:	4638      	mov	r0, r7
 8014a2c:	f000 ff92 	bl	8015954 <_free_r>
 8014a30:	89a3      	ldrh	r3, [r4, #12]
 8014a32:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8014a36:	f023 0303 	bic.w	r3, r3, #3
 8014a3a:	f1b8 0f02 	cmp.w	r8, #2
 8014a3e:	81a3      	strh	r3, [r4, #12]
 8014a40:	d061      	beq.n	8014b06 <setvbuf+0x14a>
 8014a42:	ab01      	add	r3, sp, #4
 8014a44:	466a      	mov	r2, sp
 8014a46:	4621      	mov	r1, r4
 8014a48:	4638      	mov	r0, r7
 8014a4a:	f002 fd65 	bl	8017518 <__swhatbuf_r>
 8014a4e:	89a3      	ldrh	r3, [r4, #12]
 8014a50:	4318      	orrs	r0, r3
 8014a52:	81a0      	strh	r0, [r4, #12]
 8014a54:	bb2d      	cbnz	r5, 8014aa2 <setvbuf+0xe6>
 8014a56:	9d00      	ldr	r5, [sp, #0]
 8014a58:	4628      	mov	r0, r5
 8014a5a:	f000 ffc5 	bl	80159e8 <malloc>
 8014a5e:	4606      	mov	r6, r0
 8014a60:	2800      	cmp	r0, #0
 8014a62:	d152      	bne.n	8014b0a <setvbuf+0x14e>
 8014a64:	f8dd 9000 	ldr.w	r9, [sp]
 8014a68:	45a9      	cmp	r9, r5
 8014a6a:	d140      	bne.n	8014aee <setvbuf+0x132>
 8014a6c:	f04f 35ff 	mov.w	r5, #4294967295
 8014a70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a74:	f043 0202 	orr.w	r2, r3, #2
 8014a78:	81a2      	strh	r2, [r4, #12]
 8014a7a:	2200      	movs	r2, #0
 8014a7c:	60a2      	str	r2, [r4, #8]
 8014a7e:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8014a82:	6022      	str	r2, [r4, #0]
 8014a84:	6122      	str	r2, [r4, #16]
 8014a86:	2201      	movs	r2, #1
 8014a88:	6162      	str	r2, [r4, #20]
 8014a8a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014a8c:	07d6      	lsls	r6, r2, #31
 8014a8e:	d404      	bmi.n	8014a9a <setvbuf+0xde>
 8014a90:	0598      	lsls	r0, r3, #22
 8014a92:	d402      	bmi.n	8014a9a <setvbuf+0xde>
 8014a94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014a96:	f000 f95f 	bl	8014d58 <__retarget_lock_release_recursive>
 8014a9a:	4628      	mov	r0, r5
 8014a9c:	b003      	add	sp, #12
 8014a9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014aa2:	2e00      	cmp	r6, #0
 8014aa4:	d0d8      	beq.n	8014a58 <setvbuf+0x9c>
 8014aa6:	6a3b      	ldr	r3, [r7, #32]
 8014aa8:	b913      	cbnz	r3, 8014ab0 <setvbuf+0xf4>
 8014aaa:	4638      	mov	r0, r7
 8014aac:	f7ff ff50 	bl	8014950 <__sinit>
 8014ab0:	f1b8 0f01 	cmp.w	r8, #1
 8014ab4:	bf08      	it	eq
 8014ab6:	89a3      	ldrheq	r3, [r4, #12]
 8014ab8:	6026      	str	r6, [r4, #0]
 8014aba:	bf04      	itt	eq
 8014abc:	f043 0301 	orreq.w	r3, r3, #1
 8014ac0:	81a3      	strheq	r3, [r4, #12]
 8014ac2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ac6:	f013 0208 	ands.w	r2, r3, #8
 8014aca:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8014ace:	d01e      	beq.n	8014b0e <setvbuf+0x152>
 8014ad0:	07d9      	lsls	r1, r3, #31
 8014ad2:	bf41      	itttt	mi
 8014ad4:	2200      	movmi	r2, #0
 8014ad6:	426d      	negmi	r5, r5
 8014ad8:	60a2      	strmi	r2, [r4, #8]
 8014ada:	61a5      	strmi	r5, [r4, #24]
 8014adc:	bf58      	it	pl
 8014ade:	60a5      	strpl	r5, [r4, #8]
 8014ae0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014ae2:	07d2      	lsls	r2, r2, #31
 8014ae4:	d401      	bmi.n	8014aea <setvbuf+0x12e>
 8014ae6:	059b      	lsls	r3, r3, #22
 8014ae8:	d513      	bpl.n	8014b12 <setvbuf+0x156>
 8014aea:	2500      	movs	r5, #0
 8014aec:	e7d5      	b.n	8014a9a <setvbuf+0xde>
 8014aee:	4648      	mov	r0, r9
 8014af0:	f000 ff7a 	bl	80159e8 <malloc>
 8014af4:	4606      	mov	r6, r0
 8014af6:	2800      	cmp	r0, #0
 8014af8:	d0b8      	beq.n	8014a6c <setvbuf+0xb0>
 8014afa:	89a3      	ldrh	r3, [r4, #12]
 8014afc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014b00:	81a3      	strh	r3, [r4, #12]
 8014b02:	464d      	mov	r5, r9
 8014b04:	e7cf      	b.n	8014aa6 <setvbuf+0xea>
 8014b06:	2500      	movs	r5, #0
 8014b08:	e7b2      	b.n	8014a70 <setvbuf+0xb4>
 8014b0a:	46a9      	mov	r9, r5
 8014b0c:	e7f5      	b.n	8014afa <setvbuf+0x13e>
 8014b0e:	60a2      	str	r2, [r4, #8]
 8014b10:	e7e6      	b.n	8014ae0 <setvbuf+0x124>
 8014b12:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014b14:	f000 f920 	bl	8014d58 <__retarget_lock_release_recursive>
 8014b18:	e7e7      	b.n	8014aea <setvbuf+0x12e>
 8014b1a:	f04f 35ff 	mov.w	r5, #4294967295
 8014b1e:	e7bc      	b.n	8014a9a <setvbuf+0xde>
 8014b20:	2400002c 	.word	0x2400002c

08014b24 <sniprintf>:
 8014b24:	b40c      	push	{r2, r3}
 8014b26:	b530      	push	{r4, r5, lr}
 8014b28:	4b18      	ldr	r3, [pc, #96]	@ (8014b8c <sniprintf+0x68>)
 8014b2a:	1e0c      	subs	r4, r1, #0
 8014b2c:	681d      	ldr	r5, [r3, #0]
 8014b2e:	b09d      	sub	sp, #116	@ 0x74
 8014b30:	da08      	bge.n	8014b44 <sniprintf+0x20>
 8014b32:	238b      	movs	r3, #139	@ 0x8b
 8014b34:	602b      	str	r3, [r5, #0]
 8014b36:	f04f 30ff 	mov.w	r0, #4294967295
 8014b3a:	b01d      	add	sp, #116	@ 0x74
 8014b3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014b40:	b002      	add	sp, #8
 8014b42:	4770      	bx	lr
 8014b44:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8014b48:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014b4c:	f04f 0300 	mov.w	r3, #0
 8014b50:	931b      	str	r3, [sp, #108]	@ 0x6c
 8014b52:	bf14      	ite	ne
 8014b54:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014b58:	4623      	moveq	r3, r4
 8014b5a:	9304      	str	r3, [sp, #16]
 8014b5c:	9307      	str	r3, [sp, #28]
 8014b5e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014b62:	9002      	str	r0, [sp, #8]
 8014b64:	9006      	str	r0, [sp, #24]
 8014b66:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014b6a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8014b6c:	ab21      	add	r3, sp, #132	@ 0x84
 8014b6e:	a902      	add	r1, sp, #8
 8014b70:	4628      	mov	r0, r5
 8014b72:	9301      	str	r3, [sp, #4]
 8014b74:	f002 fb28 	bl	80171c8 <_svfiprintf_r>
 8014b78:	1c43      	adds	r3, r0, #1
 8014b7a:	bfbc      	itt	lt
 8014b7c:	238b      	movlt	r3, #139	@ 0x8b
 8014b7e:	602b      	strlt	r3, [r5, #0]
 8014b80:	2c00      	cmp	r4, #0
 8014b82:	d0da      	beq.n	8014b3a <sniprintf+0x16>
 8014b84:	9b02      	ldr	r3, [sp, #8]
 8014b86:	2200      	movs	r2, #0
 8014b88:	701a      	strb	r2, [r3, #0]
 8014b8a:	e7d6      	b.n	8014b3a <sniprintf+0x16>
 8014b8c:	2400002c 	.word	0x2400002c

08014b90 <siprintf>:
 8014b90:	b40e      	push	{r1, r2, r3}
 8014b92:	b510      	push	{r4, lr}
 8014b94:	b09d      	sub	sp, #116	@ 0x74
 8014b96:	ab1f      	add	r3, sp, #124	@ 0x7c
 8014b98:	9002      	str	r0, [sp, #8]
 8014b9a:	9006      	str	r0, [sp, #24]
 8014b9c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014ba0:	480a      	ldr	r0, [pc, #40]	@ (8014bcc <siprintf+0x3c>)
 8014ba2:	9107      	str	r1, [sp, #28]
 8014ba4:	9104      	str	r1, [sp, #16]
 8014ba6:	490a      	ldr	r1, [pc, #40]	@ (8014bd0 <siprintf+0x40>)
 8014ba8:	f853 2b04 	ldr.w	r2, [r3], #4
 8014bac:	9105      	str	r1, [sp, #20]
 8014bae:	2400      	movs	r4, #0
 8014bb0:	a902      	add	r1, sp, #8
 8014bb2:	6800      	ldr	r0, [r0, #0]
 8014bb4:	9301      	str	r3, [sp, #4]
 8014bb6:	941b      	str	r4, [sp, #108]	@ 0x6c
 8014bb8:	f002 fb06 	bl	80171c8 <_svfiprintf_r>
 8014bbc:	9b02      	ldr	r3, [sp, #8]
 8014bbe:	701c      	strb	r4, [r3, #0]
 8014bc0:	b01d      	add	sp, #116	@ 0x74
 8014bc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014bc6:	b003      	add	sp, #12
 8014bc8:	4770      	bx	lr
 8014bca:	bf00      	nop
 8014bcc:	2400002c 	.word	0x2400002c
 8014bd0:	ffff0208 	.word	0xffff0208

08014bd4 <__sread>:
 8014bd4:	b510      	push	{r4, lr}
 8014bd6:	460c      	mov	r4, r1
 8014bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014bdc:	f000 f86c 	bl	8014cb8 <_read_r>
 8014be0:	2800      	cmp	r0, #0
 8014be2:	bfab      	itete	ge
 8014be4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014be6:	89a3      	ldrhlt	r3, [r4, #12]
 8014be8:	181b      	addge	r3, r3, r0
 8014bea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014bee:	bfac      	ite	ge
 8014bf0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014bf2:	81a3      	strhlt	r3, [r4, #12]
 8014bf4:	bd10      	pop	{r4, pc}

08014bf6 <__swrite>:
 8014bf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bfa:	461f      	mov	r7, r3
 8014bfc:	898b      	ldrh	r3, [r1, #12]
 8014bfe:	05db      	lsls	r3, r3, #23
 8014c00:	4605      	mov	r5, r0
 8014c02:	460c      	mov	r4, r1
 8014c04:	4616      	mov	r6, r2
 8014c06:	d505      	bpl.n	8014c14 <__swrite+0x1e>
 8014c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c0c:	2302      	movs	r3, #2
 8014c0e:	2200      	movs	r2, #0
 8014c10:	f000 f840 	bl	8014c94 <_lseek_r>
 8014c14:	89a3      	ldrh	r3, [r4, #12]
 8014c16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014c1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014c1e:	81a3      	strh	r3, [r4, #12]
 8014c20:	4632      	mov	r2, r6
 8014c22:	463b      	mov	r3, r7
 8014c24:	4628      	mov	r0, r5
 8014c26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014c2a:	f000 b857 	b.w	8014cdc <_write_r>

08014c2e <__sseek>:
 8014c2e:	b510      	push	{r4, lr}
 8014c30:	460c      	mov	r4, r1
 8014c32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c36:	f000 f82d 	bl	8014c94 <_lseek_r>
 8014c3a:	1c43      	adds	r3, r0, #1
 8014c3c:	89a3      	ldrh	r3, [r4, #12]
 8014c3e:	bf15      	itete	ne
 8014c40:	6560      	strne	r0, [r4, #84]	@ 0x54
 8014c42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8014c46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8014c4a:	81a3      	strheq	r3, [r4, #12]
 8014c4c:	bf18      	it	ne
 8014c4e:	81a3      	strhne	r3, [r4, #12]
 8014c50:	bd10      	pop	{r4, pc}

08014c52 <__sclose>:
 8014c52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c56:	f000 b80d 	b.w	8014c74 <_close_r>

08014c5a <memset>:
 8014c5a:	4402      	add	r2, r0
 8014c5c:	4603      	mov	r3, r0
 8014c5e:	4293      	cmp	r3, r2
 8014c60:	d100      	bne.n	8014c64 <memset+0xa>
 8014c62:	4770      	bx	lr
 8014c64:	f803 1b01 	strb.w	r1, [r3], #1
 8014c68:	e7f9      	b.n	8014c5e <memset+0x4>
	...

08014c6c <_localeconv_r>:
 8014c6c:	4800      	ldr	r0, [pc, #0]	@ (8014c70 <_localeconv_r+0x4>)
 8014c6e:	4770      	bx	lr
 8014c70:	2400016c 	.word	0x2400016c

08014c74 <_close_r>:
 8014c74:	b538      	push	{r3, r4, r5, lr}
 8014c76:	4d06      	ldr	r5, [pc, #24]	@ (8014c90 <_close_r+0x1c>)
 8014c78:	2300      	movs	r3, #0
 8014c7a:	4604      	mov	r4, r0
 8014c7c:	4608      	mov	r0, r1
 8014c7e:	602b      	str	r3, [r5, #0]
 8014c80:	f7ef f91e 	bl	8003ec0 <_close>
 8014c84:	1c43      	adds	r3, r0, #1
 8014c86:	d102      	bne.n	8014c8e <_close_r+0x1a>
 8014c88:	682b      	ldr	r3, [r5, #0]
 8014c8a:	b103      	cbz	r3, 8014c8e <_close_r+0x1a>
 8014c8c:	6023      	str	r3, [r4, #0]
 8014c8e:	bd38      	pop	{r3, r4, r5, pc}
 8014c90:	24000b04 	.word	0x24000b04

08014c94 <_lseek_r>:
 8014c94:	b538      	push	{r3, r4, r5, lr}
 8014c96:	4d07      	ldr	r5, [pc, #28]	@ (8014cb4 <_lseek_r+0x20>)
 8014c98:	4604      	mov	r4, r0
 8014c9a:	4608      	mov	r0, r1
 8014c9c:	4611      	mov	r1, r2
 8014c9e:	2200      	movs	r2, #0
 8014ca0:	602a      	str	r2, [r5, #0]
 8014ca2:	461a      	mov	r2, r3
 8014ca4:	f7ef f933 	bl	8003f0e <_lseek>
 8014ca8:	1c43      	adds	r3, r0, #1
 8014caa:	d102      	bne.n	8014cb2 <_lseek_r+0x1e>
 8014cac:	682b      	ldr	r3, [r5, #0]
 8014cae:	b103      	cbz	r3, 8014cb2 <_lseek_r+0x1e>
 8014cb0:	6023      	str	r3, [r4, #0]
 8014cb2:	bd38      	pop	{r3, r4, r5, pc}
 8014cb4:	24000b04 	.word	0x24000b04

08014cb8 <_read_r>:
 8014cb8:	b538      	push	{r3, r4, r5, lr}
 8014cba:	4d07      	ldr	r5, [pc, #28]	@ (8014cd8 <_read_r+0x20>)
 8014cbc:	4604      	mov	r4, r0
 8014cbe:	4608      	mov	r0, r1
 8014cc0:	4611      	mov	r1, r2
 8014cc2:	2200      	movs	r2, #0
 8014cc4:	602a      	str	r2, [r5, #0]
 8014cc6:	461a      	mov	r2, r3
 8014cc8:	f7ef f8c1 	bl	8003e4e <_read>
 8014ccc:	1c43      	adds	r3, r0, #1
 8014cce:	d102      	bne.n	8014cd6 <_read_r+0x1e>
 8014cd0:	682b      	ldr	r3, [r5, #0]
 8014cd2:	b103      	cbz	r3, 8014cd6 <_read_r+0x1e>
 8014cd4:	6023      	str	r3, [r4, #0]
 8014cd6:	bd38      	pop	{r3, r4, r5, pc}
 8014cd8:	24000b04 	.word	0x24000b04

08014cdc <_write_r>:
 8014cdc:	b538      	push	{r3, r4, r5, lr}
 8014cde:	4d07      	ldr	r5, [pc, #28]	@ (8014cfc <_write_r+0x20>)
 8014ce0:	4604      	mov	r4, r0
 8014ce2:	4608      	mov	r0, r1
 8014ce4:	4611      	mov	r1, r2
 8014ce6:	2200      	movs	r2, #0
 8014ce8:	602a      	str	r2, [r5, #0]
 8014cea:	461a      	mov	r2, r3
 8014cec:	f7ef f8cc 	bl	8003e88 <_write>
 8014cf0:	1c43      	adds	r3, r0, #1
 8014cf2:	d102      	bne.n	8014cfa <_write_r+0x1e>
 8014cf4:	682b      	ldr	r3, [r5, #0]
 8014cf6:	b103      	cbz	r3, 8014cfa <_write_r+0x1e>
 8014cf8:	6023      	str	r3, [r4, #0]
 8014cfa:	bd38      	pop	{r3, r4, r5, pc}
 8014cfc:	24000b04 	.word	0x24000b04

08014d00 <__errno>:
 8014d00:	4b01      	ldr	r3, [pc, #4]	@ (8014d08 <__errno+0x8>)
 8014d02:	6818      	ldr	r0, [r3, #0]
 8014d04:	4770      	bx	lr
 8014d06:	bf00      	nop
 8014d08:	2400002c 	.word	0x2400002c

08014d0c <__libc_init_array>:
 8014d0c:	b570      	push	{r4, r5, r6, lr}
 8014d0e:	4d0d      	ldr	r5, [pc, #52]	@ (8014d44 <__libc_init_array+0x38>)
 8014d10:	4c0d      	ldr	r4, [pc, #52]	@ (8014d48 <__libc_init_array+0x3c>)
 8014d12:	1b64      	subs	r4, r4, r5
 8014d14:	10a4      	asrs	r4, r4, #2
 8014d16:	2600      	movs	r6, #0
 8014d18:	42a6      	cmp	r6, r4
 8014d1a:	d109      	bne.n	8014d30 <__libc_init_array+0x24>
 8014d1c:	4d0b      	ldr	r5, [pc, #44]	@ (8014d4c <__libc_init_array+0x40>)
 8014d1e:	4c0c      	ldr	r4, [pc, #48]	@ (8014d50 <__libc_init_array+0x44>)
 8014d20:	f003 fab4 	bl	801828c <_init>
 8014d24:	1b64      	subs	r4, r4, r5
 8014d26:	10a4      	asrs	r4, r4, #2
 8014d28:	2600      	movs	r6, #0
 8014d2a:	42a6      	cmp	r6, r4
 8014d2c:	d105      	bne.n	8014d3a <__libc_init_array+0x2e>
 8014d2e:	bd70      	pop	{r4, r5, r6, pc}
 8014d30:	f855 3b04 	ldr.w	r3, [r5], #4
 8014d34:	4798      	blx	r3
 8014d36:	3601      	adds	r6, #1
 8014d38:	e7ee      	b.n	8014d18 <__libc_init_array+0xc>
 8014d3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8014d3e:	4798      	blx	r3
 8014d40:	3601      	adds	r6, #1
 8014d42:	e7f2      	b.n	8014d2a <__libc_init_array+0x1e>
 8014d44:	08018cf4 	.word	0x08018cf4
 8014d48:	08018cf4 	.word	0x08018cf4
 8014d4c:	08018cf4 	.word	0x08018cf4
 8014d50:	08018cf8 	.word	0x08018cf8

08014d54 <__retarget_lock_init_recursive>:
 8014d54:	4770      	bx	lr

08014d56 <__retarget_lock_acquire_recursive>:
 8014d56:	4770      	bx	lr

08014d58 <__retarget_lock_release_recursive>:
 8014d58:	4770      	bx	lr

08014d5a <memcpy>:
 8014d5a:	440a      	add	r2, r1
 8014d5c:	4291      	cmp	r1, r2
 8014d5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8014d62:	d100      	bne.n	8014d66 <memcpy+0xc>
 8014d64:	4770      	bx	lr
 8014d66:	b510      	push	{r4, lr}
 8014d68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014d6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014d70:	4291      	cmp	r1, r2
 8014d72:	d1f9      	bne.n	8014d68 <memcpy+0xe>
 8014d74:	bd10      	pop	{r4, pc}
	...

08014d78 <nanf>:
 8014d78:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8014d80 <nanf+0x8>
 8014d7c:	4770      	bx	lr
 8014d7e:	bf00      	nop
 8014d80:	7fc00000 	.word	0x7fc00000

08014d84 <quorem>:
 8014d84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d88:	6903      	ldr	r3, [r0, #16]
 8014d8a:	690c      	ldr	r4, [r1, #16]
 8014d8c:	42a3      	cmp	r3, r4
 8014d8e:	4607      	mov	r7, r0
 8014d90:	db7e      	blt.n	8014e90 <quorem+0x10c>
 8014d92:	3c01      	subs	r4, #1
 8014d94:	f101 0814 	add.w	r8, r1, #20
 8014d98:	00a3      	lsls	r3, r4, #2
 8014d9a:	f100 0514 	add.w	r5, r0, #20
 8014d9e:	9300      	str	r3, [sp, #0]
 8014da0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014da4:	9301      	str	r3, [sp, #4]
 8014da6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014daa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014dae:	3301      	adds	r3, #1
 8014db0:	429a      	cmp	r2, r3
 8014db2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014db6:	fbb2 f6f3 	udiv	r6, r2, r3
 8014dba:	d32e      	bcc.n	8014e1a <quorem+0x96>
 8014dbc:	f04f 0a00 	mov.w	sl, #0
 8014dc0:	46c4      	mov	ip, r8
 8014dc2:	46ae      	mov	lr, r5
 8014dc4:	46d3      	mov	fp, sl
 8014dc6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014dca:	b298      	uxth	r0, r3
 8014dcc:	fb06 a000 	mla	r0, r6, r0, sl
 8014dd0:	0c02      	lsrs	r2, r0, #16
 8014dd2:	0c1b      	lsrs	r3, r3, #16
 8014dd4:	fb06 2303 	mla	r3, r6, r3, r2
 8014dd8:	f8de 2000 	ldr.w	r2, [lr]
 8014ddc:	b280      	uxth	r0, r0
 8014dde:	b292      	uxth	r2, r2
 8014de0:	1a12      	subs	r2, r2, r0
 8014de2:	445a      	add	r2, fp
 8014de4:	f8de 0000 	ldr.w	r0, [lr]
 8014de8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014dec:	b29b      	uxth	r3, r3
 8014dee:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8014df2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8014df6:	b292      	uxth	r2, r2
 8014df8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8014dfc:	45e1      	cmp	r9, ip
 8014dfe:	f84e 2b04 	str.w	r2, [lr], #4
 8014e02:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8014e06:	d2de      	bcs.n	8014dc6 <quorem+0x42>
 8014e08:	9b00      	ldr	r3, [sp, #0]
 8014e0a:	58eb      	ldr	r3, [r5, r3]
 8014e0c:	b92b      	cbnz	r3, 8014e1a <quorem+0x96>
 8014e0e:	9b01      	ldr	r3, [sp, #4]
 8014e10:	3b04      	subs	r3, #4
 8014e12:	429d      	cmp	r5, r3
 8014e14:	461a      	mov	r2, r3
 8014e16:	d32f      	bcc.n	8014e78 <quorem+0xf4>
 8014e18:	613c      	str	r4, [r7, #16]
 8014e1a:	4638      	mov	r0, r7
 8014e1c:	f001 f956 	bl	80160cc <__mcmp>
 8014e20:	2800      	cmp	r0, #0
 8014e22:	db25      	blt.n	8014e70 <quorem+0xec>
 8014e24:	4629      	mov	r1, r5
 8014e26:	2000      	movs	r0, #0
 8014e28:	f858 2b04 	ldr.w	r2, [r8], #4
 8014e2c:	f8d1 c000 	ldr.w	ip, [r1]
 8014e30:	fa1f fe82 	uxth.w	lr, r2
 8014e34:	fa1f f38c 	uxth.w	r3, ip
 8014e38:	eba3 030e 	sub.w	r3, r3, lr
 8014e3c:	4403      	add	r3, r0
 8014e3e:	0c12      	lsrs	r2, r2, #16
 8014e40:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8014e44:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8014e48:	b29b      	uxth	r3, r3
 8014e4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014e4e:	45c1      	cmp	r9, r8
 8014e50:	f841 3b04 	str.w	r3, [r1], #4
 8014e54:	ea4f 4022 	mov.w	r0, r2, asr #16
 8014e58:	d2e6      	bcs.n	8014e28 <quorem+0xa4>
 8014e5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014e5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014e62:	b922      	cbnz	r2, 8014e6e <quorem+0xea>
 8014e64:	3b04      	subs	r3, #4
 8014e66:	429d      	cmp	r5, r3
 8014e68:	461a      	mov	r2, r3
 8014e6a:	d30b      	bcc.n	8014e84 <quorem+0x100>
 8014e6c:	613c      	str	r4, [r7, #16]
 8014e6e:	3601      	adds	r6, #1
 8014e70:	4630      	mov	r0, r6
 8014e72:	b003      	add	sp, #12
 8014e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e78:	6812      	ldr	r2, [r2, #0]
 8014e7a:	3b04      	subs	r3, #4
 8014e7c:	2a00      	cmp	r2, #0
 8014e7e:	d1cb      	bne.n	8014e18 <quorem+0x94>
 8014e80:	3c01      	subs	r4, #1
 8014e82:	e7c6      	b.n	8014e12 <quorem+0x8e>
 8014e84:	6812      	ldr	r2, [r2, #0]
 8014e86:	3b04      	subs	r3, #4
 8014e88:	2a00      	cmp	r2, #0
 8014e8a:	d1ef      	bne.n	8014e6c <quorem+0xe8>
 8014e8c:	3c01      	subs	r4, #1
 8014e8e:	e7ea      	b.n	8014e66 <quorem+0xe2>
 8014e90:	2000      	movs	r0, #0
 8014e92:	e7ee      	b.n	8014e72 <quorem+0xee>
 8014e94:	0000      	movs	r0, r0
	...

08014e98 <_dtoa_r>:
 8014e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e9c:	ed2d 8b02 	vpush	{d8}
 8014ea0:	69c7      	ldr	r7, [r0, #28]
 8014ea2:	b091      	sub	sp, #68	@ 0x44
 8014ea4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014ea8:	ec55 4b10 	vmov	r4, r5, d0
 8014eac:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8014eae:	9107      	str	r1, [sp, #28]
 8014eb0:	4681      	mov	r9, r0
 8014eb2:	9209      	str	r2, [sp, #36]	@ 0x24
 8014eb4:	930d      	str	r3, [sp, #52]	@ 0x34
 8014eb6:	b97f      	cbnz	r7, 8014ed8 <_dtoa_r+0x40>
 8014eb8:	2010      	movs	r0, #16
 8014eba:	f000 fd95 	bl	80159e8 <malloc>
 8014ebe:	4602      	mov	r2, r0
 8014ec0:	f8c9 001c 	str.w	r0, [r9, #28]
 8014ec4:	b920      	cbnz	r0, 8014ed0 <_dtoa_r+0x38>
 8014ec6:	4ba0      	ldr	r3, [pc, #640]	@ (8015148 <_dtoa_r+0x2b0>)
 8014ec8:	21ef      	movs	r1, #239	@ 0xef
 8014eca:	48a0      	ldr	r0, [pc, #640]	@ (801514c <_dtoa_r+0x2b4>)
 8014ecc:	f002 fbec 	bl	80176a8 <__assert_func>
 8014ed0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8014ed4:	6007      	str	r7, [r0, #0]
 8014ed6:	60c7      	str	r7, [r0, #12]
 8014ed8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014edc:	6819      	ldr	r1, [r3, #0]
 8014ede:	b159      	cbz	r1, 8014ef8 <_dtoa_r+0x60>
 8014ee0:	685a      	ldr	r2, [r3, #4]
 8014ee2:	604a      	str	r2, [r1, #4]
 8014ee4:	2301      	movs	r3, #1
 8014ee6:	4093      	lsls	r3, r2
 8014ee8:	608b      	str	r3, [r1, #8]
 8014eea:	4648      	mov	r0, r9
 8014eec:	f000 fe72 	bl	8015bd4 <_Bfree>
 8014ef0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014ef4:	2200      	movs	r2, #0
 8014ef6:	601a      	str	r2, [r3, #0]
 8014ef8:	1e2b      	subs	r3, r5, #0
 8014efa:	bfbb      	ittet	lt
 8014efc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8014f00:	9303      	strlt	r3, [sp, #12]
 8014f02:	2300      	movge	r3, #0
 8014f04:	2201      	movlt	r2, #1
 8014f06:	bfac      	ite	ge
 8014f08:	6033      	strge	r3, [r6, #0]
 8014f0a:	6032      	strlt	r2, [r6, #0]
 8014f0c:	4b90      	ldr	r3, [pc, #576]	@ (8015150 <_dtoa_r+0x2b8>)
 8014f0e:	9e03      	ldr	r6, [sp, #12]
 8014f10:	43b3      	bics	r3, r6
 8014f12:	d110      	bne.n	8014f36 <_dtoa_r+0x9e>
 8014f14:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014f16:	f242 730f 	movw	r3, #9999	@ 0x270f
 8014f1a:	6013      	str	r3, [r2, #0]
 8014f1c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8014f20:	4323      	orrs	r3, r4
 8014f22:	f000 84e6 	beq.w	80158f2 <_dtoa_r+0xa5a>
 8014f26:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014f28:	4f8a      	ldr	r7, [pc, #552]	@ (8015154 <_dtoa_r+0x2bc>)
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	f000 84e8 	beq.w	8015900 <_dtoa_r+0xa68>
 8014f30:	1cfb      	adds	r3, r7, #3
 8014f32:	f000 bce3 	b.w	80158fc <_dtoa_r+0xa64>
 8014f36:	ed9d 8b02 	vldr	d8, [sp, #8]
 8014f3a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8014f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f42:	d10a      	bne.n	8014f5a <_dtoa_r+0xc2>
 8014f44:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014f46:	2301      	movs	r3, #1
 8014f48:	6013      	str	r3, [r2, #0]
 8014f4a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014f4c:	b113      	cbz	r3, 8014f54 <_dtoa_r+0xbc>
 8014f4e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8014f50:	4b81      	ldr	r3, [pc, #516]	@ (8015158 <_dtoa_r+0x2c0>)
 8014f52:	6013      	str	r3, [r2, #0]
 8014f54:	4f81      	ldr	r7, [pc, #516]	@ (801515c <_dtoa_r+0x2c4>)
 8014f56:	f000 bcd3 	b.w	8015900 <_dtoa_r+0xa68>
 8014f5a:	aa0e      	add	r2, sp, #56	@ 0x38
 8014f5c:	a90f      	add	r1, sp, #60	@ 0x3c
 8014f5e:	4648      	mov	r0, r9
 8014f60:	eeb0 0b48 	vmov.f64	d0, d8
 8014f64:	f001 f9d2 	bl	801630c <__d2b>
 8014f68:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8014f6c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014f6e:	9001      	str	r0, [sp, #4]
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d045      	beq.n	8015000 <_dtoa_r+0x168>
 8014f74:	eeb0 7b48 	vmov.f64	d7, d8
 8014f78:	ee18 1a90 	vmov	r1, s17
 8014f7c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8014f80:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8014f84:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8014f88:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8014f8c:	2500      	movs	r5, #0
 8014f8e:	ee07 1a90 	vmov	s15, r1
 8014f92:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8014f96:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8015130 <_dtoa_r+0x298>
 8014f9a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014f9e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8015138 <_dtoa_r+0x2a0>
 8014fa2:	eea7 6b05 	vfma.f64	d6, d7, d5
 8014fa6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8015140 <_dtoa_r+0x2a8>
 8014faa:	ee07 3a90 	vmov	s15, r3
 8014fae:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8014fb2:	eeb0 7b46 	vmov.f64	d7, d6
 8014fb6:	eea4 7b05 	vfma.f64	d7, d4, d5
 8014fba:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8014fbe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8014fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fc6:	ee16 8a90 	vmov	r8, s13
 8014fca:	d508      	bpl.n	8014fde <_dtoa_r+0x146>
 8014fcc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8014fd0:	eeb4 6b47 	vcmp.f64	d6, d7
 8014fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fd8:	bf18      	it	ne
 8014fda:	f108 38ff 	addne.w	r8, r8, #4294967295
 8014fde:	f1b8 0f16 	cmp.w	r8, #22
 8014fe2:	d82b      	bhi.n	801503c <_dtoa_r+0x1a4>
 8014fe4:	495e      	ldr	r1, [pc, #376]	@ (8015160 <_dtoa_r+0x2c8>)
 8014fe6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8014fea:	ed91 7b00 	vldr	d7, [r1]
 8014fee:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8014ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ff6:	d501      	bpl.n	8014ffc <_dtoa_r+0x164>
 8014ff8:	f108 38ff 	add.w	r8, r8, #4294967295
 8014ffc:	2100      	movs	r1, #0
 8014ffe:	e01e      	b.n	801503e <_dtoa_r+0x1a6>
 8015000:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015002:	4413      	add	r3, r2
 8015004:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8015008:	2920      	cmp	r1, #32
 801500a:	bfc1      	itttt	gt
 801500c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8015010:	408e      	lslgt	r6, r1
 8015012:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8015016:	fa24 f101 	lsrgt.w	r1, r4, r1
 801501a:	bfd6      	itet	le
 801501c:	f1c1 0120 	rsble	r1, r1, #32
 8015020:	4331      	orrgt	r1, r6
 8015022:	fa04 f101 	lslle.w	r1, r4, r1
 8015026:	ee07 1a90 	vmov	s15, r1
 801502a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801502e:	3b01      	subs	r3, #1
 8015030:	ee17 1a90 	vmov	r1, s15
 8015034:	2501      	movs	r5, #1
 8015036:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 801503a:	e7a8      	b.n	8014f8e <_dtoa_r+0xf6>
 801503c:	2101      	movs	r1, #1
 801503e:	1ad2      	subs	r2, r2, r3
 8015040:	1e53      	subs	r3, r2, #1
 8015042:	9306      	str	r3, [sp, #24]
 8015044:	bf45      	ittet	mi
 8015046:	f1c2 0301 	rsbmi	r3, r2, #1
 801504a:	9304      	strmi	r3, [sp, #16]
 801504c:	2300      	movpl	r3, #0
 801504e:	2300      	movmi	r3, #0
 8015050:	bf4c      	ite	mi
 8015052:	9306      	strmi	r3, [sp, #24]
 8015054:	9304      	strpl	r3, [sp, #16]
 8015056:	f1b8 0f00 	cmp.w	r8, #0
 801505a:	910c      	str	r1, [sp, #48]	@ 0x30
 801505c:	db18      	blt.n	8015090 <_dtoa_r+0x1f8>
 801505e:	9b06      	ldr	r3, [sp, #24]
 8015060:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8015064:	4443      	add	r3, r8
 8015066:	9306      	str	r3, [sp, #24]
 8015068:	2300      	movs	r3, #0
 801506a:	9a07      	ldr	r2, [sp, #28]
 801506c:	2a09      	cmp	r2, #9
 801506e:	d845      	bhi.n	80150fc <_dtoa_r+0x264>
 8015070:	2a05      	cmp	r2, #5
 8015072:	bfc4      	itt	gt
 8015074:	3a04      	subgt	r2, #4
 8015076:	9207      	strgt	r2, [sp, #28]
 8015078:	9a07      	ldr	r2, [sp, #28]
 801507a:	f1a2 0202 	sub.w	r2, r2, #2
 801507e:	bfcc      	ite	gt
 8015080:	2400      	movgt	r4, #0
 8015082:	2401      	movle	r4, #1
 8015084:	2a03      	cmp	r2, #3
 8015086:	d844      	bhi.n	8015112 <_dtoa_r+0x27a>
 8015088:	e8df f002 	tbb	[pc, r2]
 801508c:	0b173634 	.word	0x0b173634
 8015090:	9b04      	ldr	r3, [sp, #16]
 8015092:	2200      	movs	r2, #0
 8015094:	eba3 0308 	sub.w	r3, r3, r8
 8015098:	9304      	str	r3, [sp, #16]
 801509a:	920a      	str	r2, [sp, #40]	@ 0x28
 801509c:	f1c8 0300 	rsb	r3, r8, #0
 80150a0:	e7e3      	b.n	801506a <_dtoa_r+0x1d2>
 80150a2:	2201      	movs	r2, #1
 80150a4:	9208      	str	r2, [sp, #32]
 80150a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80150a8:	eb08 0b02 	add.w	fp, r8, r2
 80150ac:	f10b 0a01 	add.w	sl, fp, #1
 80150b0:	4652      	mov	r2, sl
 80150b2:	2a01      	cmp	r2, #1
 80150b4:	bfb8      	it	lt
 80150b6:	2201      	movlt	r2, #1
 80150b8:	e006      	b.n	80150c8 <_dtoa_r+0x230>
 80150ba:	2201      	movs	r2, #1
 80150bc:	9208      	str	r2, [sp, #32]
 80150be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80150c0:	2a00      	cmp	r2, #0
 80150c2:	dd29      	ble.n	8015118 <_dtoa_r+0x280>
 80150c4:	4693      	mov	fp, r2
 80150c6:	4692      	mov	sl, r2
 80150c8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80150cc:	2100      	movs	r1, #0
 80150ce:	2004      	movs	r0, #4
 80150d0:	f100 0614 	add.w	r6, r0, #20
 80150d4:	4296      	cmp	r6, r2
 80150d6:	d926      	bls.n	8015126 <_dtoa_r+0x28e>
 80150d8:	6079      	str	r1, [r7, #4]
 80150da:	4648      	mov	r0, r9
 80150dc:	9305      	str	r3, [sp, #20]
 80150de:	f000 fd39 	bl	8015b54 <_Balloc>
 80150e2:	9b05      	ldr	r3, [sp, #20]
 80150e4:	4607      	mov	r7, r0
 80150e6:	2800      	cmp	r0, #0
 80150e8:	d13e      	bne.n	8015168 <_dtoa_r+0x2d0>
 80150ea:	4b1e      	ldr	r3, [pc, #120]	@ (8015164 <_dtoa_r+0x2cc>)
 80150ec:	4602      	mov	r2, r0
 80150ee:	f240 11af 	movw	r1, #431	@ 0x1af
 80150f2:	e6ea      	b.n	8014eca <_dtoa_r+0x32>
 80150f4:	2200      	movs	r2, #0
 80150f6:	e7e1      	b.n	80150bc <_dtoa_r+0x224>
 80150f8:	2200      	movs	r2, #0
 80150fa:	e7d3      	b.n	80150a4 <_dtoa_r+0x20c>
 80150fc:	2401      	movs	r4, #1
 80150fe:	2200      	movs	r2, #0
 8015100:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8015104:	f04f 3bff 	mov.w	fp, #4294967295
 8015108:	2100      	movs	r1, #0
 801510a:	46da      	mov	sl, fp
 801510c:	2212      	movs	r2, #18
 801510e:	9109      	str	r1, [sp, #36]	@ 0x24
 8015110:	e7da      	b.n	80150c8 <_dtoa_r+0x230>
 8015112:	2201      	movs	r2, #1
 8015114:	9208      	str	r2, [sp, #32]
 8015116:	e7f5      	b.n	8015104 <_dtoa_r+0x26c>
 8015118:	f04f 0b01 	mov.w	fp, #1
 801511c:	46da      	mov	sl, fp
 801511e:	465a      	mov	r2, fp
 8015120:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8015124:	e7d0      	b.n	80150c8 <_dtoa_r+0x230>
 8015126:	3101      	adds	r1, #1
 8015128:	0040      	lsls	r0, r0, #1
 801512a:	e7d1      	b.n	80150d0 <_dtoa_r+0x238>
 801512c:	f3af 8000 	nop.w
 8015130:	636f4361 	.word	0x636f4361
 8015134:	3fd287a7 	.word	0x3fd287a7
 8015138:	8b60c8b3 	.word	0x8b60c8b3
 801513c:	3fc68a28 	.word	0x3fc68a28
 8015140:	509f79fb 	.word	0x509f79fb
 8015144:	3fd34413 	.word	0x3fd34413
 8015148:	0801890a 	.word	0x0801890a
 801514c:	08018921 	.word	0x08018921
 8015150:	7ff00000 	.word	0x7ff00000
 8015154:	08018906 	.word	0x08018906
 8015158:	080188d5 	.word	0x080188d5
 801515c:	080188d4 	.word	0x080188d4
 8015160:	08018ad0 	.word	0x08018ad0
 8015164:	08018979 	.word	0x08018979
 8015168:	f8d9 201c 	ldr.w	r2, [r9, #28]
 801516c:	f1ba 0f0e 	cmp.w	sl, #14
 8015170:	6010      	str	r0, [r2, #0]
 8015172:	d86e      	bhi.n	8015252 <_dtoa_r+0x3ba>
 8015174:	2c00      	cmp	r4, #0
 8015176:	d06c      	beq.n	8015252 <_dtoa_r+0x3ba>
 8015178:	f1b8 0f00 	cmp.w	r8, #0
 801517c:	f340 80b4 	ble.w	80152e8 <_dtoa_r+0x450>
 8015180:	4ac8      	ldr	r2, [pc, #800]	@ (80154a4 <_dtoa_r+0x60c>)
 8015182:	f008 010f 	and.w	r1, r8, #15
 8015186:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801518a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801518e:	ed92 7b00 	vldr	d7, [r2]
 8015192:	ea4f 1128 	mov.w	r1, r8, asr #4
 8015196:	f000 809b 	beq.w	80152d0 <_dtoa_r+0x438>
 801519a:	4ac3      	ldr	r2, [pc, #780]	@ (80154a8 <_dtoa_r+0x610>)
 801519c:	ed92 6b08 	vldr	d6, [r2, #32]
 80151a0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80151a4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80151a8:	f001 010f 	and.w	r1, r1, #15
 80151ac:	2203      	movs	r2, #3
 80151ae:	48be      	ldr	r0, [pc, #760]	@ (80154a8 <_dtoa_r+0x610>)
 80151b0:	2900      	cmp	r1, #0
 80151b2:	f040 808f 	bne.w	80152d4 <_dtoa_r+0x43c>
 80151b6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80151ba:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80151be:	ed8d 7b02 	vstr	d7, [sp, #8]
 80151c2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80151c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80151c8:	2900      	cmp	r1, #0
 80151ca:	f000 80b3 	beq.w	8015334 <_dtoa_r+0x49c>
 80151ce:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80151d2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80151d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151da:	f140 80ab 	bpl.w	8015334 <_dtoa_r+0x49c>
 80151de:	f1ba 0f00 	cmp.w	sl, #0
 80151e2:	f000 80a7 	beq.w	8015334 <_dtoa_r+0x49c>
 80151e6:	f1bb 0f00 	cmp.w	fp, #0
 80151ea:	dd30      	ble.n	801524e <_dtoa_r+0x3b6>
 80151ec:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80151f0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80151f4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80151f8:	f108 31ff 	add.w	r1, r8, #4294967295
 80151fc:	9105      	str	r1, [sp, #20]
 80151fe:	3201      	adds	r2, #1
 8015200:	465c      	mov	r4, fp
 8015202:	ed9d 6b02 	vldr	d6, [sp, #8]
 8015206:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801520a:	ee07 2a90 	vmov	s15, r2
 801520e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015212:	eea7 5b06 	vfma.f64	d5, d7, d6
 8015216:	ee15 2a90 	vmov	r2, s11
 801521a:	ec51 0b15 	vmov	r0, r1, d5
 801521e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8015222:	2c00      	cmp	r4, #0
 8015224:	f040 808a 	bne.w	801533c <_dtoa_r+0x4a4>
 8015228:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801522c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8015230:	ec41 0b17 	vmov	d7, r0, r1
 8015234:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801523c:	f300 826a 	bgt.w	8015714 <_dtoa_r+0x87c>
 8015240:	eeb1 7b47 	vneg.f64	d7, d7
 8015244:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801524c:	d423      	bmi.n	8015296 <_dtoa_r+0x3fe>
 801524e:	ed8d 8b02 	vstr	d8, [sp, #8]
 8015252:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8015254:	2a00      	cmp	r2, #0
 8015256:	f2c0 8129 	blt.w	80154ac <_dtoa_r+0x614>
 801525a:	f1b8 0f0e 	cmp.w	r8, #14
 801525e:	f300 8125 	bgt.w	80154ac <_dtoa_r+0x614>
 8015262:	4b90      	ldr	r3, [pc, #576]	@ (80154a4 <_dtoa_r+0x60c>)
 8015264:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8015268:	ed93 6b00 	vldr	d6, [r3]
 801526c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801526e:	2b00      	cmp	r3, #0
 8015270:	f280 80c8 	bge.w	8015404 <_dtoa_r+0x56c>
 8015274:	f1ba 0f00 	cmp.w	sl, #0
 8015278:	f300 80c4 	bgt.w	8015404 <_dtoa_r+0x56c>
 801527c:	d10b      	bne.n	8015296 <_dtoa_r+0x3fe>
 801527e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8015282:	ee26 6b07 	vmul.f64	d6, d6, d7
 8015286:	ed9d 7b02 	vldr	d7, [sp, #8]
 801528a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801528e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015292:	f2c0 823c 	blt.w	801570e <_dtoa_r+0x876>
 8015296:	2400      	movs	r4, #0
 8015298:	4625      	mov	r5, r4
 801529a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801529c:	43db      	mvns	r3, r3
 801529e:	9305      	str	r3, [sp, #20]
 80152a0:	463e      	mov	r6, r7
 80152a2:	f04f 0800 	mov.w	r8, #0
 80152a6:	4621      	mov	r1, r4
 80152a8:	4648      	mov	r0, r9
 80152aa:	f000 fc93 	bl	8015bd4 <_Bfree>
 80152ae:	2d00      	cmp	r5, #0
 80152b0:	f000 80a2 	beq.w	80153f8 <_dtoa_r+0x560>
 80152b4:	f1b8 0f00 	cmp.w	r8, #0
 80152b8:	d005      	beq.n	80152c6 <_dtoa_r+0x42e>
 80152ba:	45a8      	cmp	r8, r5
 80152bc:	d003      	beq.n	80152c6 <_dtoa_r+0x42e>
 80152be:	4641      	mov	r1, r8
 80152c0:	4648      	mov	r0, r9
 80152c2:	f000 fc87 	bl	8015bd4 <_Bfree>
 80152c6:	4629      	mov	r1, r5
 80152c8:	4648      	mov	r0, r9
 80152ca:	f000 fc83 	bl	8015bd4 <_Bfree>
 80152ce:	e093      	b.n	80153f8 <_dtoa_r+0x560>
 80152d0:	2202      	movs	r2, #2
 80152d2:	e76c      	b.n	80151ae <_dtoa_r+0x316>
 80152d4:	07cc      	lsls	r4, r1, #31
 80152d6:	d504      	bpl.n	80152e2 <_dtoa_r+0x44a>
 80152d8:	ed90 6b00 	vldr	d6, [r0]
 80152dc:	3201      	adds	r2, #1
 80152de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80152e2:	1049      	asrs	r1, r1, #1
 80152e4:	3008      	adds	r0, #8
 80152e6:	e763      	b.n	80151b0 <_dtoa_r+0x318>
 80152e8:	d022      	beq.n	8015330 <_dtoa_r+0x498>
 80152ea:	f1c8 0100 	rsb	r1, r8, #0
 80152ee:	4a6d      	ldr	r2, [pc, #436]	@ (80154a4 <_dtoa_r+0x60c>)
 80152f0:	f001 000f 	and.w	r0, r1, #15
 80152f4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80152f8:	ed92 7b00 	vldr	d7, [r2]
 80152fc:	ee28 7b07 	vmul.f64	d7, d8, d7
 8015300:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015304:	4868      	ldr	r0, [pc, #416]	@ (80154a8 <_dtoa_r+0x610>)
 8015306:	1109      	asrs	r1, r1, #4
 8015308:	2400      	movs	r4, #0
 801530a:	2202      	movs	r2, #2
 801530c:	b929      	cbnz	r1, 801531a <_dtoa_r+0x482>
 801530e:	2c00      	cmp	r4, #0
 8015310:	f43f af57 	beq.w	80151c2 <_dtoa_r+0x32a>
 8015314:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015318:	e753      	b.n	80151c2 <_dtoa_r+0x32a>
 801531a:	07ce      	lsls	r6, r1, #31
 801531c:	d505      	bpl.n	801532a <_dtoa_r+0x492>
 801531e:	ed90 6b00 	vldr	d6, [r0]
 8015322:	3201      	adds	r2, #1
 8015324:	2401      	movs	r4, #1
 8015326:	ee27 7b06 	vmul.f64	d7, d7, d6
 801532a:	1049      	asrs	r1, r1, #1
 801532c:	3008      	adds	r0, #8
 801532e:	e7ed      	b.n	801530c <_dtoa_r+0x474>
 8015330:	2202      	movs	r2, #2
 8015332:	e746      	b.n	80151c2 <_dtoa_r+0x32a>
 8015334:	f8cd 8014 	str.w	r8, [sp, #20]
 8015338:	4654      	mov	r4, sl
 801533a:	e762      	b.n	8015202 <_dtoa_r+0x36a>
 801533c:	4a59      	ldr	r2, [pc, #356]	@ (80154a4 <_dtoa_r+0x60c>)
 801533e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8015342:	ed12 4b02 	vldr	d4, [r2, #-8]
 8015346:	9a08      	ldr	r2, [sp, #32]
 8015348:	ec41 0b17 	vmov	d7, r0, r1
 801534c:	443c      	add	r4, r7
 801534e:	b34a      	cbz	r2, 80153a4 <_dtoa_r+0x50c>
 8015350:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8015354:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8015358:	463e      	mov	r6, r7
 801535a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801535e:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8015362:	ee35 7b47 	vsub.f64	d7, d5, d7
 8015366:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801536a:	ee14 2a90 	vmov	r2, s9
 801536e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8015372:	3230      	adds	r2, #48	@ 0x30
 8015374:	ee36 6b45 	vsub.f64	d6, d6, d5
 8015378:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801537c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015380:	f806 2b01 	strb.w	r2, [r6], #1
 8015384:	d438      	bmi.n	80153f8 <_dtoa_r+0x560>
 8015386:	ee32 5b46 	vsub.f64	d5, d2, d6
 801538a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801538e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015392:	d46e      	bmi.n	8015472 <_dtoa_r+0x5da>
 8015394:	42a6      	cmp	r6, r4
 8015396:	f43f af5a 	beq.w	801524e <_dtoa_r+0x3b6>
 801539a:	ee27 7b03 	vmul.f64	d7, d7, d3
 801539e:	ee26 6b03 	vmul.f64	d6, d6, d3
 80153a2:	e7e0      	b.n	8015366 <_dtoa_r+0x4ce>
 80153a4:	4621      	mov	r1, r4
 80153a6:	463e      	mov	r6, r7
 80153a8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80153ac:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80153b0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80153b4:	ee14 2a90 	vmov	r2, s9
 80153b8:	3230      	adds	r2, #48	@ 0x30
 80153ba:	f806 2b01 	strb.w	r2, [r6], #1
 80153be:	42a6      	cmp	r6, r4
 80153c0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80153c4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80153c8:	d119      	bne.n	80153fe <_dtoa_r+0x566>
 80153ca:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80153ce:	ee37 4b05 	vadd.f64	d4, d7, d5
 80153d2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80153d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153da:	dc4a      	bgt.n	8015472 <_dtoa_r+0x5da>
 80153dc:	ee35 5b47 	vsub.f64	d5, d5, d7
 80153e0:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80153e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153e8:	f57f af31 	bpl.w	801524e <_dtoa_r+0x3b6>
 80153ec:	460e      	mov	r6, r1
 80153ee:	3901      	subs	r1, #1
 80153f0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80153f4:	2b30      	cmp	r3, #48	@ 0x30
 80153f6:	d0f9      	beq.n	80153ec <_dtoa_r+0x554>
 80153f8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80153fc:	e027      	b.n	801544e <_dtoa_r+0x5b6>
 80153fe:	ee26 6b03 	vmul.f64	d6, d6, d3
 8015402:	e7d5      	b.n	80153b0 <_dtoa_r+0x518>
 8015404:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015408:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 801540c:	463e      	mov	r6, r7
 801540e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8015412:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8015416:	ee15 3a10 	vmov	r3, s10
 801541a:	3330      	adds	r3, #48	@ 0x30
 801541c:	f806 3b01 	strb.w	r3, [r6], #1
 8015420:	1bf3      	subs	r3, r6, r7
 8015422:	459a      	cmp	sl, r3
 8015424:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8015428:	eea3 7b46 	vfms.f64	d7, d3, d6
 801542c:	d132      	bne.n	8015494 <_dtoa_r+0x5fc>
 801542e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8015432:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801543a:	dc18      	bgt.n	801546e <_dtoa_r+0x5d6>
 801543c:	eeb4 7b46 	vcmp.f64	d7, d6
 8015440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015444:	d103      	bne.n	801544e <_dtoa_r+0x5b6>
 8015446:	ee15 3a10 	vmov	r3, s10
 801544a:	07db      	lsls	r3, r3, #31
 801544c:	d40f      	bmi.n	801546e <_dtoa_r+0x5d6>
 801544e:	9901      	ldr	r1, [sp, #4]
 8015450:	4648      	mov	r0, r9
 8015452:	f000 fbbf 	bl	8015bd4 <_Bfree>
 8015456:	2300      	movs	r3, #0
 8015458:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801545a:	7033      	strb	r3, [r6, #0]
 801545c:	f108 0301 	add.w	r3, r8, #1
 8015460:	6013      	str	r3, [r2, #0]
 8015462:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8015464:	2b00      	cmp	r3, #0
 8015466:	f000 824b 	beq.w	8015900 <_dtoa_r+0xa68>
 801546a:	601e      	str	r6, [r3, #0]
 801546c:	e248      	b.n	8015900 <_dtoa_r+0xa68>
 801546e:	f8cd 8014 	str.w	r8, [sp, #20]
 8015472:	4633      	mov	r3, r6
 8015474:	461e      	mov	r6, r3
 8015476:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801547a:	2a39      	cmp	r2, #57	@ 0x39
 801547c:	d106      	bne.n	801548c <_dtoa_r+0x5f4>
 801547e:	429f      	cmp	r7, r3
 8015480:	d1f8      	bne.n	8015474 <_dtoa_r+0x5dc>
 8015482:	9a05      	ldr	r2, [sp, #20]
 8015484:	3201      	adds	r2, #1
 8015486:	9205      	str	r2, [sp, #20]
 8015488:	2230      	movs	r2, #48	@ 0x30
 801548a:	703a      	strb	r2, [r7, #0]
 801548c:	781a      	ldrb	r2, [r3, #0]
 801548e:	3201      	adds	r2, #1
 8015490:	701a      	strb	r2, [r3, #0]
 8015492:	e7b1      	b.n	80153f8 <_dtoa_r+0x560>
 8015494:	ee27 7b04 	vmul.f64	d7, d7, d4
 8015498:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801549c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154a0:	d1b5      	bne.n	801540e <_dtoa_r+0x576>
 80154a2:	e7d4      	b.n	801544e <_dtoa_r+0x5b6>
 80154a4:	08018ad0 	.word	0x08018ad0
 80154a8:	08018aa8 	.word	0x08018aa8
 80154ac:	9908      	ldr	r1, [sp, #32]
 80154ae:	2900      	cmp	r1, #0
 80154b0:	f000 80e9 	beq.w	8015686 <_dtoa_r+0x7ee>
 80154b4:	9907      	ldr	r1, [sp, #28]
 80154b6:	2901      	cmp	r1, #1
 80154b8:	f300 80cb 	bgt.w	8015652 <_dtoa_r+0x7ba>
 80154bc:	2d00      	cmp	r5, #0
 80154be:	f000 80c4 	beq.w	801564a <_dtoa_r+0x7b2>
 80154c2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80154c6:	9e04      	ldr	r6, [sp, #16]
 80154c8:	461c      	mov	r4, r3
 80154ca:	9305      	str	r3, [sp, #20]
 80154cc:	9b04      	ldr	r3, [sp, #16]
 80154ce:	4413      	add	r3, r2
 80154d0:	9304      	str	r3, [sp, #16]
 80154d2:	9b06      	ldr	r3, [sp, #24]
 80154d4:	2101      	movs	r1, #1
 80154d6:	4413      	add	r3, r2
 80154d8:	4648      	mov	r0, r9
 80154da:	9306      	str	r3, [sp, #24]
 80154dc:	f000 fc78 	bl	8015dd0 <__i2b>
 80154e0:	9b05      	ldr	r3, [sp, #20]
 80154e2:	4605      	mov	r5, r0
 80154e4:	b166      	cbz	r6, 8015500 <_dtoa_r+0x668>
 80154e6:	9a06      	ldr	r2, [sp, #24]
 80154e8:	2a00      	cmp	r2, #0
 80154ea:	dd09      	ble.n	8015500 <_dtoa_r+0x668>
 80154ec:	42b2      	cmp	r2, r6
 80154ee:	9904      	ldr	r1, [sp, #16]
 80154f0:	bfa8      	it	ge
 80154f2:	4632      	movge	r2, r6
 80154f4:	1a89      	subs	r1, r1, r2
 80154f6:	9104      	str	r1, [sp, #16]
 80154f8:	9906      	ldr	r1, [sp, #24]
 80154fa:	1ab6      	subs	r6, r6, r2
 80154fc:	1a8a      	subs	r2, r1, r2
 80154fe:	9206      	str	r2, [sp, #24]
 8015500:	b30b      	cbz	r3, 8015546 <_dtoa_r+0x6ae>
 8015502:	9a08      	ldr	r2, [sp, #32]
 8015504:	2a00      	cmp	r2, #0
 8015506:	f000 80c5 	beq.w	8015694 <_dtoa_r+0x7fc>
 801550a:	2c00      	cmp	r4, #0
 801550c:	f000 80bf 	beq.w	801568e <_dtoa_r+0x7f6>
 8015510:	4629      	mov	r1, r5
 8015512:	4622      	mov	r2, r4
 8015514:	4648      	mov	r0, r9
 8015516:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015518:	f000 fd12 	bl	8015f40 <__pow5mult>
 801551c:	9a01      	ldr	r2, [sp, #4]
 801551e:	4601      	mov	r1, r0
 8015520:	4605      	mov	r5, r0
 8015522:	4648      	mov	r0, r9
 8015524:	f000 fc6a 	bl	8015dfc <__multiply>
 8015528:	9901      	ldr	r1, [sp, #4]
 801552a:	9005      	str	r0, [sp, #20]
 801552c:	4648      	mov	r0, r9
 801552e:	f000 fb51 	bl	8015bd4 <_Bfree>
 8015532:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015534:	1b1b      	subs	r3, r3, r4
 8015536:	f000 80b0 	beq.w	801569a <_dtoa_r+0x802>
 801553a:	9905      	ldr	r1, [sp, #20]
 801553c:	461a      	mov	r2, r3
 801553e:	4648      	mov	r0, r9
 8015540:	f000 fcfe 	bl	8015f40 <__pow5mult>
 8015544:	9001      	str	r0, [sp, #4]
 8015546:	2101      	movs	r1, #1
 8015548:	4648      	mov	r0, r9
 801554a:	f000 fc41 	bl	8015dd0 <__i2b>
 801554e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015550:	4604      	mov	r4, r0
 8015552:	2b00      	cmp	r3, #0
 8015554:	f000 81da 	beq.w	801590c <_dtoa_r+0xa74>
 8015558:	461a      	mov	r2, r3
 801555a:	4601      	mov	r1, r0
 801555c:	4648      	mov	r0, r9
 801555e:	f000 fcef 	bl	8015f40 <__pow5mult>
 8015562:	9b07      	ldr	r3, [sp, #28]
 8015564:	2b01      	cmp	r3, #1
 8015566:	4604      	mov	r4, r0
 8015568:	f300 80a0 	bgt.w	80156ac <_dtoa_r+0x814>
 801556c:	9b02      	ldr	r3, [sp, #8]
 801556e:	2b00      	cmp	r3, #0
 8015570:	f040 8096 	bne.w	80156a0 <_dtoa_r+0x808>
 8015574:	9b03      	ldr	r3, [sp, #12]
 8015576:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801557a:	2a00      	cmp	r2, #0
 801557c:	f040 8092 	bne.w	80156a4 <_dtoa_r+0x80c>
 8015580:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8015584:	0d12      	lsrs	r2, r2, #20
 8015586:	0512      	lsls	r2, r2, #20
 8015588:	2a00      	cmp	r2, #0
 801558a:	f000 808d 	beq.w	80156a8 <_dtoa_r+0x810>
 801558e:	9b04      	ldr	r3, [sp, #16]
 8015590:	3301      	adds	r3, #1
 8015592:	9304      	str	r3, [sp, #16]
 8015594:	9b06      	ldr	r3, [sp, #24]
 8015596:	3301      	adds	r3, #1
 8015598:	9306      	str	r3, [sp, #24]
 801559a:	2301      	movs	r3, #1
 801559c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801559e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	f000 81b9 	beq.w	8015918 <_dtoa_r+0xa80>
 80155a6:	6922      	ldr	r2, [r4, #16]
 80155a8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80155ac:	6910      	ldr	r0, [r2, #16]
 80155ae:	f000 fbc3 	bl	8015d38 <__hi0bits>
 80155b2:	f1c0 0020 	rsb	r0, r0, #32
 80155b6:	9b06      	ldr	r3, [sp, #24]
 80155b8:	4418      	add	r0, r3
 80155ba:	f010 001f 	ands.w	r0, r0, #31
 80155be:	f000 8081 	beq.w	80156c4 <_dtoa_r+0x82c>
 80155c2:	f1c0 0220 	rsb	r2, r0, #32
 80155c6:	2a04      	cmp	r2, #4
 80155c8:	dd73      	ble.n	80156b2 <_dtoa_r+0x81a>
 80155ca:	9b04      	ldr	r3, [sp, #16]
 80155cc:	f1c0 001c 	rsb	r0, r0, #28
 80155d0:	4403      	add	r3, r0
 80155d2:	9304      	str	r3, [sp, #16]
 80155d4:	9b06      	ldr	r3, [sp, #24]
 80155d6:	4406      	add	r6, r0
 80155d8:	4403      	add	r3, r0
 80155da:	9306      	str	r3, [sp, #24]
 80155dc:	9b04      	ldr	r3, [sp, #16]
 80155de:	2b00      	cmp	r3, #0
 80155e0:	dd05      	ble.n	80155ee <_dtoa_r+0x756>
 80155e2:	9901      	ldr	r1, [sp, #4]
 80155e4:	461a      	mov	r2, r3
 80155e6:	4648      	mov	r0, r9
 80155e8:	f000 fd04 	bl	8015ff4 <__lshift>
 80155ec:	9001      	str	r0, [sp, #4]
 80155ee:	9b06      	ldr	r3, [sp, #24]
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	dd05      	ble.n	8015600 <_dtoa_r+0x768>
 80155f4:	4621      	mov	r1, r4
 80155f6:	461a      	mov	r2, r3
 80155f8:	4648      	mov	r0, r9
 80155fa:	f000 fcfb 	bl	8015ff4 <__lshift>
 80155fe:	4604      	mov	r4, r0
 8015600:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015602:	2b00      	cmp	r3, #0
 8015604:	d060      	beq.n	80156c8 <_dtoa_r+0x830>
 8015606:	9801      	ldr	r0, [sp, #4]
 8015608:	4621      	mov	r1, r4
 801560a:	f000 fd5f 	bl	80160cc <__mcmp>
 801560e:	2800      	cmp	r0, #0
 8015610:	da5a      	bge.n	80156c8 <_dtoa_r+0x830>
 8015612:	f108 33ff 	add.w	r3, r8, #4294967295
 8015616:	9305      	str	r3, [sp, #20]
 8015618:	9901      	ldr	r1, [sp, #4]
 801561a:	2300      	movs	r3, #0
 801561c:	220a      	movs	r2, #10
 801561e:	4648      	mov	r0, r9
 8015620:	f000 fafa 	bl	8015c18 <__multadd>
 8015624:	9b08      	ldr	r3, [sp, #32]
 8015626:	9001      	str	r0, [sp, #4]
 8015628:	2b00      	cmp	r3, #0
 801562a:	f000 8177 	beq.w	801591c <_dtoa_r+0xa84>
 801562e:	4629      	mov	r1, r5
 8015630:	2300      	movs	r3, #0
 8015632:	220a      	movs	r2, #10
 8015634:	4648      	mov	r0, r9
 8015636:	f000 faef 	bl	8015c18 <__multadd>
 801563a:	f1bb 0f00 	cmp.w	fp, #0
 801563e:	4605      	mov	r5, r0
 8015640:	dc6e      	bgt.n	8015720 <_dtoa_r+0x888>
 8015642:	9b07      	ldr	r3, [sp, #28]
 8015644:	2b02      	cmp	r3, #2
 8015646:	dc48      	bgt.n	80156da <_dtoa_r+0x842>
 8015648:	e06a      	b.n	8015720 <_dtoa_r+0x888>
 801564a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801564c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8015650:	e739      	b.n	80154c6 <_dtoa_r+0x62e>
 8015652:	f10a 34ff 	add.w	r4, sl, #4294967295
 8015656:	42a3      	cmp	r3, r4
 8015658:	db07      	blt.n	801566a <_dtoa_r+0x7d2>
 801565a:	f1ba 0f00 	cmp.w	sl, #0
 801565e:	eba3 0404 	sub.w	r4, r3, r4
 8015662:	db0b      	blt.n	801567c <_dtoa_r+0x7e4>
 8015664:	9e04      	ldr	r6, [sp, #16]
 8015666:	4652      	mov	r2, sl
 8015668:	e72f      	b.n	80154ca <_dtoa_r+0x632>
 801566a:	1ae2      	subs	r2, r4, r3
 801566c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801566e:	9e04      	ldr	r6, [sp, #16]
 8015670:	4413      	add	r3, r2
 8015672:	930a      	str	r3, [sp, #40]	@ 0x28
 8015674:	4652      	mov	r2, sl
 8015676:	4623      	mov	r3, r4
 8015678:	2400      	movs	r4, #0
 801567a:	e726      	b.n	80154ca <_dtoa_r+0x632>
 801567c:	9a04      	ldr	r2, [sp, #16]
 801567e:	eba2 060a 	sub.w	r6, r2, sl
 8015682:	2200      	movs	r2, #0
 8015684:	e721      	b.n	80154ca <_dtoa_r+0x632>
 8015686:	9e04      	ldr	r6, [sp, #16]
 8015688:	9d08      	ldr	r5, [sp, #32]
 801568a:	461c      	mov	r4, r3
 801568c:	e72a      	b.n	80154e4 <_dtoa_r+0x64c>
 801568e:	9a01      	ldr	r2, [sp, #4]
 8015690:	9205      	str	r2, [sp, #20]
 8015692:	e752      	b.n	801553a <_dtoa_r+0x6a2>
 8015694:	9901      	ldr	r1, [sp, #4]
 8015696:	461a      	mov	r2, r3
 8015698:	e751      	b.n	801553e <_dtoa_r+0x6a6>
 801569a:	9b05      	ldr	r3, [sp, #20]
 801569c:	9301      	str	r3, [sp, #4]
 801569e:	e752      	b.n	8015546 <_dtoa_r+0x6ae>
 80156a0:	2300      	movs	r3, #0
 80156a2:	e77b      	b.n	801559c <_dtoa_r+0x704>
 80156a4:	9b02      	ldr	r3, [sp, #8]
 80156a6:	e779      	b.n	801559c <_dtoa_r+0x704>
 80156a8:	920b      	str	r2, [sp, #44]	@ 0x2c
 80156aa:	e778      	b.n	801559e <_dtoa_r+0x706>
 80156ac:	2300      	movs	r3, #0
 80156ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80156b0:	e779      	b.n	80155a6 <_dtoa_r+0x70e>
 80156b2:	d093      	beq.n	80155dc <_dtoa_r+0x744>
 80156b4:	9b04      	ldr	r3, [sp, #16]
 80156b6:	321c      	adds	r2, #28
 80156b8:	4413      	add	r3, r2
 80156ba:	9304      	str	r3, [sp, #16]
 80156bc:	9b06      	ldr	r3, [sp, #24]
 80156be:	4416      	add	r6, r2
 80156c0:	4413      	add	r3, r2
 80156c2:	e78a      	b.n	80155da <_dtoa_r+0x742>
 80156c4:	4602      	mov	r2, r0
 80156c6:	e7f5      	b.n	80156b4 <_dtoa_r+0x81c>
 80156c8:	f1ba 0f00 	cmp.w	sl, #0
 80156cc:	f8cd 8014 	str.w	r8, [sp, #20]
 80156d0:	46d3      	mov	fp, sl
 80156d2:	dc21      	bgt.n	8015718 <_dtoa_r+0x880>
 80156d4:	9b07      	ldr	r3, [sp, #28]
 80156d6:	2b02      	cmp	r3, #2
 80156d8:	dd1e      	ble.n	8015718 <_dtoa_r+0x880>
 80156da:	f1bb 0f00 	cmp.w	fp, #0
 80156de:	f47f addc 	bne.w	801529a <_dtoa_r+0x402>
 80156e2:	4621      	mov	r1, r4
 80156e4:	465b      	mov	r3, fp
 80156e6:	2205      	movs	r2, #5
 80156e8:	4648      	mov	r0, r9
 80156ea:	f000 fa95 	bl	8015c18 <__multadd>
 80156ee:	4601      	mov	r1, r0
 80156f0:	4604      	mov	r4, r0
 80156f2:	9801      	ldr	r0, [sp, #4]
 80156f4:	f000 fcea 	bl	80160cc <__mcmp>
 80156f8:	2800      	cmp	r0, #0
 80156fa:	f77f adce 	ble.w	801529a <_dtoa_r+0x402>
 80156fe:	463e      	mov	r6, r7
 8015700:	2331      	movs	r3, #49	@ 0x31
 8015702:	f806 3b01 	strb.w	r3, [r6], #1
 8015706:	9b05      	ldr	r3, [sp, #20]
 8015708:	3301      	adds	r3, #1
 801570a:	9305      	str	r3, [sp, #20]
 801570c:	e5c9      	b.n	80152a2 <_dtoa_r+0x40a>
 801570e:	f8cd 8014 	str.w	r8, [sp, #20]
 8015712:	4654      	mov	r4, sl
 8015714:	4625      	mov	r5, r4
 8015716:	e7f2      	b.n	80156fe <_dtoa_r+0x866>
 8015718:	9b08      	ldr	r3, [sp, #32]
 801571a:	2b00      	cmp	r3, #0
 801571c:	f000 8102 	beq.w	8015924 <_dtoa_r+0xa8c>
 8015720:	2e00      	cmp	r6, #0
 8015722:	dd05      	ble.n	8015730 <_dtoa_r+0x898>
 8015724:	4629      	mov	r1, r5
 8015726:	4632      	mov	r2, r6
 8015728:	4648      	mov	r0, r9
 801572a:	f000 fc63 	bl	8015ff4 <__lshift>
 801572e:	4605      	mov	r5, r0
 8015730:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015732:	2b00      	cmp	r3, #0
 8015734:	d058      	beq.n	80157e8 <_dtoa_r+0x950>
 8015736:	6869      	ldr	r1, [r5, #4]
 8015738:	4648      	mov	r0, r9
 801573a:	f000 fa0b 	bl	8015b54 <_Balloc>
 801573e:	4606      	mov	r6, r0
 8015740:	b928      	cbnz	r0, 801574e <_dtoa_r+0x8b6>
 8015742:	4b82      	ldr	r3, [pc, #520]	@ (801594c <_dtoa_r+0xab4>)
 8015744:	4602      	mov	r2, r0
 8015746:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801574a:	f7ff bbbe 	b.w	8014eca <_dtoa_r+0x32>
 801574e:	692a      	ldr	r2, [r5, #16]
 8015750:	3202      	adds	r2, #2
 8015752:	0092      	lsls	r2, r2, #2
 8015754:	f105 010c 	add.w	r1, r5, #12
 8015758:	300c      	adds	r0, #12
 801575a:	f7ff fafe 	bl	8014d5a <memcpy>
 801575e:	2201      	movs	r2, #1
 8015760:	4631      	mov	r1, r6
 8015762:	4648      	mov	r0, r9
 8015764:	f000 fc46 	bl	8015ff4 <__lshift>
 8015768:	1c7b      	adds	r3, r7, #1
 801576a:	9304      	str	r3, [sp, #16]
 801576c:	eb07 030b 	add.w	r3, r7, fp
 8015770:	9309      	str	r3, [sp, #36]	@ 0x24
 8015772:	9b02      	ldr	r3, [sp, #8]
 8015774:	f003 0301 	and.w	r3, r3, #1
 8015778:	46a8      	mov	r8, r5
 801577a:	9308      	str	r3, [sp, #32]
 801577c:	4605      	mov	r5, r0
 801577e:	9b04      	ldr	r3, [sp, #16]
 8015780:	9801      	ldr	r0, [sp, #4]
 8015782:	4621      	mov	r1, r4
 8015784:	f103 3bff 	add.w	fp, r3, #4294967295
 8015788:	f7ff fafc 	bl	8014d84 <quorem>
 801578c:	4641      	mov	r1, r8
 801578e:	9002      	str	r0, [sp, #8]
 8015790:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8015794:	9801      	ldr	r0, [sp, #4]
 8015796:	f000 fc99 	bl	80160cc <__mcmp>
 801579a:	462a      	mov	r2, r5
 801579c:	9006      	str	r0, [sp, #24]
 801579e:	4621      	mov	r1, r4
 80157a0:	4648      	mov	r0, r9
 80157a2:	f000 fcaf 	bl	8016104 <__mdiff>
 80157a6:	68c2      	ldr	r2, [r0, #12]
 80157a8:	4606      	mov	r6, r0
 80157aa:	b9fa      	cbnz	r2, 80157ec <_dtoa_r+0x954>
 80157ac:	4601      	mov	r1, r0
 80157ae:	9801      	ldr	r0, [sp, #4]
 80157b0:	f000 fc8c 	bl	80160cc <__mcmp>
 80157b4:	4602      	mov	r2, r0
 80157b6:	4631      	mov	r1, r6
 80157b8:	4648      	mov	r0, r9
 80157ba:	920a      	str	r2, [sp, #40]	@ 0x28
 80157bc:	f000 fa0a 	bl	8015bd4 <_Bfree>
 80157c0:	9b07      	ldr	r3, [sp, #28]
 80157c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80157c4:	9e04      	ldr	r6, [sp, #16]
 80157c6:	ea42 0103 	orr.w	r1, r2, r3
 80157ca:	9b08      	ldr	r3, [sp, #32]
 80157cc:	4319      	orrs	r1, r3
 80157ce:	d10f      	bne.n	80157f0 <_dtoa_r+0x958>
 80157d0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80157d4:	d028      	beq.n	8015828 <_dtoa_r+0x990>
 80157d6:	9b06      	ldr	r3, [sp, #24]
 80157d8:	2b00      	cmp	r3, #0
 80157da:	dd02      	ble.n	80157e2 <_dtoa_r+0x94a>
 80157dc:	9b02      	ldr	r3, [sp, #8]
 80157de:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80157e2:	f88b a000 	strb.w	sl, [fp]
 80157e6:	e55e      	b.n	80152a6 <_dtoa_r+0x40e>
 80157e8:	4628      	mov	r0, r5
 80157ea:	e7bd      	b.n	8015768 <_dtoa_r+0x8d0>
 80157ec:	2201      	movs	r2, #1
 80157ee:	e7e2      	b.n	80157b6 <_dtoa_r+0x91e>
 80157f0:	9b06      	ldr	r3, [sp, #24]
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	db04      	blt.n	8015800 <_dtoa_r+0x968>
 80157f6:	9907      	ldr	r1, [sp, #28]
 80157f8:	430b      	orrs	r3, r1
 80157fa:	9908      	ldr	r1, [sp, #32]
 80157fc:	430b      	orrs	r3, r1
 80157fe:	d120      	bne.n	8015842 <_dtoa_r+0x9aa>
 8015800:	2a00      	cmp	r2, #0
 8015802:	ddee      	ble.n	80157e2 <_dtoa_r+0x94a>
 8015804:	9901      	ldr	r1, [sp, #4]
 8015806:	2201      	movs	r2, #1
 8015808:	4648      	mov	r0, r9
 801580a:	f000 fbf3 	bl	8015ff4 <__lshift>
 801580e:	4621      	mov	r1, r4
 8015810:	9001      	str	r0, [sp, #4]
 8015812:	f000 fc5b 	bl	80160cc <__mcmp>
 8015816:	2800      	cmp	r0, #0
 8015818:	dc03      	bgt.n	8015822 <_dtoa_r+0x98a>
 801581a:	d1e2      	bne.n	80157e2 <_dtoa_r+0x94a>
 801581c:	f01a 0f01 	tst.w	sl, #1
 8015820:	d0df      	beq.n	80157e2 <_dtoa_r+0x94a>
 8015822:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8015826:	d1d9      	bne.n	80157dc <_dtoa_r+0x944>
 8015828:	2339      	movs	r3, #57	@ 0x39
 801582a:	f88b 3000 	strb.w	r3, [fp]
 801582e:	4633      	mov	r3, r6
 8015830:	461e      	mov	r6, r3
 8015832:	3b01      	subs	r3, #1
 8015834:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8015838:	2a39      	cmp	r2, #57	@ 0x39
 801583a:	d052      	beq.n	80158e2 <_dtoa_r+0xa4a>
 801583c:	3201      	adds	r2, #1
 801583e:	701a      	strb	r2, [r3, #0]
 8015840:	e531      	b.n	80152a6 <_dtoa_r+0x40e>
 8015842:	2a00      	cmp	r2, #0
 8015844:	dd07      	ble.n	8015856 <_dtoa_r+0x9be>
 8015846:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801584a:	d0ed      	beq.n	8015828 <_dtoa_r+0x990>
 801584c:	f10a 0301 	add.w	r3, sl, #1
 8015850:	f88b 3000 	strb.w	r3, [fp]
 8015854:	e527      	b.n	80152a6 <_dtoa_r+0x40e>
 8015856:	9b04      	ldr	r3, [sp, #16]
 8015858:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801585a:	f803 ac01 	strb.w	sl, [r3, #-1]
 801585e:	4293      	cmp	r3, r2
 8015860:	d029      	beq.n	80158b6 <_dtoa_r+0xa1e>
 8015862:	9901      	ldr	r1, [sp, #4]
 8015864:	2300      	movs	r3, #0
 8015866:	220a      	movs	r2, #10
 8015868:	4648      	mov	r0, r9
 801586a:	f000 f9d5 	bl	8015c18 <__multadd>
 801586e:	45a8      	cmp	r8, r5
 8015870:	9001      	str	r0, [sp, #4]
 8015872:	f04f 0300 	mov.w	r3, #0
 8015876:	f04f 020a 	mov.w	r2, #10
 801587a:	4641      	mov	r1, r8
 801587c:	4648      	mov	r0, r9
 801587e:	d107      	bne.n	8015890 <_dtoa_r+0x9f8>
 8015880:	f000 f9ca 	bl	8015c18 <__multadd>
 8015884:	4680      	mov	r8, r0
 8015886:	4605      	mov	r5, r0
 8015888:	9b04      	ldr	r3, [sp, #16]
 801588a:	3301      	adds	r3, #1
 801588c:	9304      	str	r3, [sp, #16]
 801588e:	e776      	b.n	801577e <_dtoa_r+0x8e6>
 8015890:	f000 f9c2 	bl	8015c18 <__multadd>
 8015894:	4629      	mov	r1, r5
 8015896:	4680      	mov	r8, r0
 8015898:	2300      	movs	r3, #0
 801589a:	220a      	movs	r2, #10
 801589c:	4648      	mov	r0, r9
 801589e:	f000 f9bb 	bl	8015c18 <__multadd>
 80158a2:	4605      	mov	r5, r0
 80158a4:	e7f0      	b.n	8015888 <_dtoa_r+0x9f0>
 80158a6:	f1bb 0f00 	cmp.w	fp, #0
 80158aa:	bfcc      	ite	gt
 80158ac:	465e      	movgt	r6, fp
 80158ae:	2601      	movle	r6, #1
 80158b0:	443e      	add	r6, r7
 80158b2:	f04f 0800 	mov.w	r8, #0
 80158b6:	9901      	ldr	r1, [sp, #4]
 80158b8:	2201      	movs	r2, #1
 80158ba:	4648      	mov	r0, r9
 80158bc:	f000 fb9a 	bl	8015ff4 <__lshift>
 80158c0:	4621      	mov	r1, r4
 80158c2:	9001      	str	r0, [sp, #4]
 80158c4:	f000 fc02 	bl	80160cc <__mcmp>
 80158c8:	2800      	cmp	r0, #0
 80158ca:	dcb0      	bgt.n	801582e <_dtoa_r+0x996>
 80158cc:	d102      	bne.n	80158d4 <_dtoa_r+0xa3c>
 80158ce:	f01a 0f01 	tst.w	sl, #1
 80158d2:	d1ac      	bne.n	801582e <_dtoa_r+0x996>
 80158d4:	4633      	mov	r3, r6
 80158d6:	461e      	mov	r6, r3
 80158d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80158dc:	2a30      	cmp	r2, #48	@ 0x30
 80158de:	d0fa      	beq.n	80158d6 <_dtoa_r+0xa3e>
 80158e0:	e4e1      	b.n	80152a6 <_dtoa_r+0x40e>
 80158e2:	429f      	cmp	r7, r3
 80158e4:	d1a4      	bne.n	8015830 <_dtoa_r+0x998>
 80158e6:	9b05      	ldr	r3, [sp, #20]
 80158e8:	3301      	adds	r3, #1
 80158ea:	9305      	str	r3, [sp, #20]
 80158ec:	2331      	movs	r3, #49	@ 0x31
 80158ee:	703b      	strb	r3, [r7, #0]
 80158f0:	e4d9      	b.n	80152a6 <_dtoa_r+0x40e>
 80158f2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80158f4:	4f16      	ldr	r7, [pc, #88]	@ (8015950 <_dtoa_r+0xab8>)
 80158f6:	b11b      	cbz	r3, 8015900 <_dtoa_r+0xa68>
 80158f8:	f107 0308 	add.w	r3, r7, #8
 80158fc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80158fe:	6013      	str	r3, [r2, #0]
 8015900:	4638      	mov	r0, r7
 8015902:	b011      	add	sp, #68	@ 0x44
 8015904:	ecbd 8b02 	vpop	{d8}
 8015908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801590c:	9b07      	ldr	r3, [sp, #28]
 801590e:	2b01      	cmp	r3, #1
 8015910:	f77f ae2c 	ble.w	801556c <_dtoa_r+0x6d4>
 8015914:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015916:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015918:	2001      	movs	r0, #1
 801591a:	e64c      	b.n	80155b6 <_dtoa_r+0x71e>
 801591c:	f1bb 0f00 	cmp.w	fp, #0
 8015920:	f77f aed8 	ble.w	80156d4 <_dtoa_r+0x83c>
 8015924:	463e      	mov	r6, r7
 8015926:	9801      	ldr	r0, [sp, #4]
 8015928:	4621      	mov	r1, r4
 801592a:	f7ff fa2b 	bl	8014d84 <quorem>
 801592e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8015932:	f806 ab01 	strb.w	sl, [r6], #1
 8015936:	1bf2      	subs	r2, r6, r7
 8015938:	4593      	cmp	fp, r2
 801593a:	ddb4      	ble.n	80158a6 <_dtoa_r+0xa0e>
 801593c:	9901      	ldr	r1, [sp, #4]
 801593e:	2300      	movs	r3, #0
 8015940:	220a      	movs	r2, #10
 8015942:	4648      	mov	r0, r9
 8015944:	f000 f968 	bl	8015c18 <__multadd>
 8015948:	9001      	str	r0, [sp, #4]
 801594a:	e7ec      	b.n	8015926 <_dtoa_r+0xa8e>
 801594c:	08018979 	.word	0x08018979
 8015950:	080188fd 	.word	0x080188fd

08015954 <_free_r>:
 8015954:	b538      	push	{r3, r4, r5, lr}
 8015956:	4605      	mov	r5, r0
 8015958:	2900      	cmp	r1, #0
 801595a:	d041      	beq.n	80159e0 <_free_r+0x8c>
 801595c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015960:	1f0c      	subs	r4, r1, #4
 8015962:	2b00      	cmp	r3, #0
 8015964:	bfb8      	it	lt
 8015966:	18e4      	addlt	r4, r4, r3
 8015968:	f000 f8e8 	bl	8015b3c <__malloc_lock>
 801596c:	4a1d      	ldr	r2, [pc, #116]	@ (80159e4 <_free_r+0x90>)
 801596e:	6813      	ldr	r3, [r2, #0]
 8015970:	b933      	cbnz	r3, 8015980 <_free_r+0x2c>
 8015972:	6063      	str	r3, [r4, #4]
 8015974:	6014      	str	r4, [r2, #0]
 8015976:	4628      	mov	r0, r5
 8015978:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801597c:	f000 b8e4 	b.w	8015b48 <__malloc_unlock>
 8015980:	42a3      	cmp	r3, r4
 8015982:	d908      	bls.n	8015996 <_free_r+0x42>
 8015984:	6820      	ldr	r0, [r4, #0]
 8015986:	1821      	adds	r1, r4, r0
 8015988:	428b      	cmp	r3, r1
 801598a:	bf01      	itttt	eq
 801598c:	6819      	ldreq	r1, [r3, #0]
 801598e:	685b      	ldreq	r3, [r3, #4]
 8015990:	1809      	addeq	r1, r1, r0
 8015992:	6021      	streq	r1, [r4, #0]
 8015994:	e7ed      	b.n	8015972 <_free_r+0x1e>
 8015996:	461a      	mov	r2, r3
 8015998:	685b      	ldr	r3, [r3, #4]
 801599a:	b10b      	cbz	r3, 80159a0 <_free_r+0x4c>
 801599c:	42a3      	cmp	r3, r4
 801599e:	d9fa      	bls.n	8015996 <_free_r+0x42>
 80159a0:	6811      	ldr	r1, [r2, #0]
 80159a2:	1850      	adds	r0, r2, r1
 80159a4:	42a0      	cmp	r0, r4
 80159a6:	d10b      	bne.n	80159c0 <_free_r+0x6c>
 80159a8:	6820      	ldr	r0, [r4, #0]
 80159aa:	4401      	add	r1, r0
 80159ac:	1850      	adds	r0, r2, r1
 80159ae:	4283      	cmp	r3, r0
 80159b0:	6011      	str	r1, [r2, #0]
 80159b2:	d1e0      	bne.n	8015976 <_free_r+0x22>
 80159b4:	6818      	ldr	r0, [r3, #0]
 80159b6:	685b      	ldr	r3, [r3, #4]
 80159b8:	6053      	str	r3, [r2, #4]
 80159ba:	4408      	add	r0, r1
 80159bc:	6010      	str	r0, [r2, #0]
 80159be:	e7da      	b.n	8015976 <_free_r+0x22>
 80159c0:	d902      	bls.n	80159c8 <_free_r+0x74>
 80159c2:	230c      	movs	r3, #12
 80159c4:	602b      	str	r3, [r5, #0]
 80159c6:	e7d6      	b.n	8015976 <_free_r+0x22>
 80159c8:	6820      	ldr	r0, [r4, #0]
 80159ca:	1821      	adds	r1, r4, r0
 80159cc:	428b      	cmp	r3, r1
 80159ce:	bf04      	itt	eq
 80159d0:	6819      	ldreq	r1, [r3, #0]
 80159d2:	685b      	ldreq	r3, [r3, #4]
 80159d4:	6063      	str	r3, [r4, #4]
 80159d6:	bf04      	itt	eq
 80159d8:	1809      	addeq	r1, r1, r0
 80159da:	6021      	streq	r1, [r4, #0]
 80159dc:	6054      	str	r4, [r2, #4]
 80159de:	e7ca      	b.n	8015976 <_free_r+0x22>
 80159e0:	bd38      	pop	{r3, r4, r5, pc}
 80159e2:	bf00      	nop
 80159e4:	24000b10 	.word	0x24000b10

080159e8 <malloc>:
 80159e8:	4b02      	ldr	r3, [pc, #8]	@ (80159f4 <malloc+0xc>)
 80159ea:	4601      	mov	r1, r0
 80159ec:	6818      	ldr	r0, [r3, #0]
 80159ee:	f000 b825 	b.w	8015a3c <_malloc_r>
 80159f2:	bf00      	nop
 80159f4:	2400002c 	.word	0x2400002c

080159f8 <sbrk_aligned>:
 80159f8:	b570      	push	{r4, r5, r6, lr}
 80159fa:	4e0f      	ldr	r6, [pc, #60]	@ (8015a38 <sbrk_aligned+0x40>)
 80159fc:	460c      	mov	r4, r1
 80159fe:	6831      	ldr	r1, [r6, #0]
 8015a00:	4605      	mov	r5, r0
 8015a02:	b911      	cbnz	r1, 8015a0a <sbrk_aligned+0x12>
 8015a04:	f001 fe38 	bl	8017678 <_sbrk_r>
 8015a08:	6030      	str	r0, [r6, #0]
 8015a0a:	4621      	mov	r1, r4
 8015a0c:	4628      	mov	r0, r5
 8015a0e:	f001 fe33 	bl	8017678 <_sbrk_r>
 8015a12:	1c43      	adds	r3, r0, #1
 8015a14:	d103      	bne.n	8015a1e <sbrk_aligned+0x26>
 8015a16:	f04f 34ff 	mov.w	r4, #4294967295
 8015a1a:	4620      	mov	r0, r4
 8015a1c:	bd70      	pop	{r4, r5, r6, pc}
 8015a1e:	1cc4      	adds	r4, r0, #3
 8015a20:	f024 0403 	bic.w	r4, r4, #3
 8015a24:	42a0      	cmp	r0, r4
 8015a26:	d0f8      	beq.n	8015a1a <sbrk_aligned+0x22>
 8015a28:	1a21      	subs	r1, r4, r0
 8015a2a:	4628      	mov	r0, r5
 8015a2c:	f001 fe24 	bl	8017678 <_sbrk_r>
 8015a30:	3001      	adds	r0, #1
 8015a32:	d1f2      	bne.n	8015a1a <sbrk_aligned+0x22>
 8015a34:	e7ef      	b.n	8015a16 <sbrk_aligned+0x1e>
 8015a36:	bf00      	nop
 8015a38:	24000b0c 	.word	0x24000b0c

08015a3c <_malloc_r>:
 8015a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015a40:	1ccd      	adds	r5, r1, #3
 8015a42:	f025 0503 	bic.w	r5, r5, #3
 8015a46:	3508      	adds	r5, #8
 8015a48:	2d0c      	cmp	r5, #12
 8015a4a:	bf38      	it	cc
 8015a4c:	250c      	movcc	r5, #12
 8015a4e:	2d00      	cmp	r5, #0
 8015a50:	4606      	mov	r6, r0
 8015a52:	db01      	blt.n	8015a58 <_malloc_r+0x1c>
 8015a54:	42a9      	cmp	r1, r5
 8015a56:	d904      	bls.n	8015a62 <_malloc_r+0x26>
 8015a58:	230c      	movs	r3, #12
 8015a5a:	6033      	str	r3, [r6, #0]
 8015a5c:	2000      	movs	r0, #0
 8015a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015b38 <_malloc_r+0xfc>
 8015a66:	f000 f869 	bl	8015b3c <__malloc_lock>
 8015a6a:	f8d8 3000 	ldr.w	r3, [r8]
 8015a6e:	461c      	mov	r4, r3
 8015a70:	bb44      	cbnz	r4, 8015ac4 <_malloc_r+0x88>
 8015a72:	4629      	mov	r1, r5
 8015a74:	4630      	mov	r0, r6
 8015a76:	f7ff ffbf 	bl	80159f8 <sbrk_aligned>
 8015a7a:	1c43      	adds	r3, r0, #1
 8015a7c:	4604      	mov	r4, r0
 8015a7e:	d158      	bne.n	8015b32 <_malloc_r+0xf6>
 8015a80:	f8d8 4000 	ldr.w	r4, [r8]
 8015a84:	4627      	mov	r7, r4
 8015a86:	2f00      	cmp	r7, #0
 8015a88:	d143      	bne.n	8015b12 <_malloc_r+0xd6>
 8015a8a:	2c00      	cmp	r4, #0
 8015a8c:	d04b      	beq.n	8015b26 <_malloc_r+0xea>
 8015a8e:	6823      	ldr	r3, [r4, #0]
 8015a90:	4639      	mov	r1, r7
 8015a92:	4630      	mov	r0, r6
 8015a94:	eb04 0903 	add.w	r9, r4, r3
 8015a98:	f001 fdee 	bl	8017678 <_sbrk_r>
 8015a9c:	4581      	cmp	r9, r0
 8015a9e:	d142      	bne.n	8015b26 <_malloc_r+0xea>
 8015aa0:	6821      	ldr	r1, [r4, #0]
 8015aa2:	1a6d      	subs	r5, r5, r1
 8015aa4:	4629      	mov	r1, r5
 8015aa6:	4630      	mov	r0, r6
 8015aa8:	f7ff ffa6 	bl	80159f8 <sbrk_aligned>
 8015aac:	3001      	adds	r0, #1
 8015aae:	d03a      	beq.n	8015b26 <_malloc_r+0xea>
 8015ab0:	6823      	ldr	r3, [r4, #0]
 8015ab2:	442b      	add	r3, r5
 8015ab4:	6023      	str	r3, [r4, #0]
 8015ab6:	f8d8 3000 	ldr.w	r3, [r8]
 8015aba:	685a      	ldr	r2, [r3, #4]
 8015abc:	bb62      	cbnz	r2, 8015b18 <_malloc_r+0xdc>
 8015abe:	f8c8 7000 	str.w	r7, [r8]
 8015ac2:	e00f      	b.n	8015ae4 <_malloc_r+0xa8>
 8015ac4:	6822      	ldr	r2, [r4, #0]
 8015ac6:	1b52      	subs	r2, r2, r5
 8015ac8:	d420      	bmi.n	8015b0c <_malloc_r+0xd0>
 8015aca:	2a0b      	cmp	r2, #11
 8015acc:	d917      	bls.n	8015afe <_malloc_r+0xc2>
 8015ace:	1961      	adds	r1, r4, r5
 8015ad0:	42a3      	cmp	r3, r4
 8015ad2:	6025      	str	r5, [r4, #0]
 8015ad4:	bf18      	it	ne
 8015ad6:	6059      	strne	r1, [r3, #4]
 8015ad8:	6863      	ldr	r3, [r4, #4]
 8015ada:	bf08      	it	eq
 8015adc:	f8c8 1000 	streq.w	r1, [r8]
 8015ae0:	5162      	str	r2, [r4, r5]
 8015ae2:	604b      	str	r3, [r1, #4]
 8015ae4:	4630      	mov	r0, r6
 8015ae6:	f000 f82f 	bl	8015b48 <__malloc_unlock>
 8015aea:	f104 000b 	add.w	r0, r4, #11
 8015aee:	1d23      	adds	r3, r4, #4
 8015af0:	f020 0007 	bic.w	r0, r0, #7
 8015af4:	1ac2      	subs	r2, r0, r3
 8015af6:	bf1c      	itt	ne
 8015af8:	1a1b      	subne	r3, r3, r0
 8015afa:	50a3      	strne	r3, [r4, r2]
 8015afc:	e7af      	b.n	8015a5e <_malloc_r+0x22>
 8015afe:	6862      	ldr	r2, [r4, #4]
 8015b00:	42a3      	cmp	r3, r4
 8015b02:	bf0c      	ite	eq
 8015b04:	f8c8 2000 	streq.w	r2, [r8]
 8015b08:	605a      	strne	r2, [r3, #4]
 8015b0a:	e7eb      	b.n	8015ae4 <_malloc_r+0xa8>
 8015b0c:	4623      	mov	r3, r4
 8015b0e:	6864      	ldr	r4, [r4, #4]
 8015b10:	e7ae      	b.n	8015a70 <_malloc_r+0x34>
 8015b12:	463c      	mov	r4, r7
 8015b14:	687f      	ldr	r7, [r7, #4]
 8015b16:	e7b6      	b.n	8015a86 <_malloc_r+0x4a>
 8015b18:	461a      	mov	r2, r3
 8015b1a:	685b      	ldr	r3, [r3, #4]
 8015b1c:	42a3      	cmp	r3, r4
 8015b1e:	d1fb      	bne.n	8015b18 <_malloc_r+0xdc>
 8015b20:	2300      	movs	r3, #0
 8015b22:	6053      	str	r3, [r2, #4]
 8015b24:	e7de      	b.n	8015ae4 <_malloc_r+0xa8>
 8015b26:	230c      	movs	r3, #12
 8015b28:	6033      	str	r3, [r6, #0]
 8015b2a:	4630      	mov	r0, r6
 8015b2c:	f000 f80c 	bl	8015b48 <__malloc_unlock>
 8015b30:	e794      	b.n	8015a5c <_malloc_r+0x20>
 8015b32:	6005      	str	r5, [r0, #0]
 8015b34:	e7d6      	b.n	8015ae4 <_malloc_r+0xa8>
 8015b36:	bf00      	nop
 8015b38:	24000b10 	.word	0x24000b10

08015b3c <__malloc_lock>:
 8015b3c:	4801      	ldr	r0, [pc, #4]	@ (8015b44 <__malloc_lock+0x8>)
 8015b3e:	f7ff b90a 	b.w	8014d56 <__retarget_lock_acquire_recursive>
 8015b42:	bf00      	nop
 8015b44:	24000b08 	.word	0x24000b08

08015b48 <__malloc_unlock>:
 8015b48:	4801      	ldr	r0, [pc, #4]	@ (8015b50 <__malloc_unlock+0x8>)
 8015b4a:	f7ff b905 	b.w	8014d58 <__retarget_lock_release_recursive>
 8015b4e:	bf00      	nop
 8015b50:	24000b08 	.word	0x24000b08

08015b54 <_Balloc>:
 8015b54:	b570      	push	{r4, r5, r6, lr}
 8015b56:	69c6      	ldr	r6, [r0, #28]
 8015b58:	4604      	mov	r4, r0
 8015b5a:	460d      	mov	r5, r1
 8015b5c:	b976      	cbnz	r6, 8015b7c <_Balloc+0x28>
 8015b5e:	2010      	movs	r0, #16
 8015b60:	f7ff ff42 	bl	80159e8 <malloc>
 8015b64:	4602      	mov	r2, r0
 8015b66:	61e0      	str	r0, [r4, #28]
 8015b68:	b920      	cbnz	r0, 8015b74 <_Balloc+0x20>
 8015b6a:	4b18      	ldr	r3, [pc, #96]	@ (8015bcc <_Balloc+0x78>)
 8015b6c:	4818      	ldr	r0, [pc, #96]	@ (8015bd0 <_Balloc+0x7c>)
 8015b6e:	216b      	movs	r1, #107	@ 0x6b
 8015b70:	f001 fd9a 	bl	80176a8 <__assert_func>
 8015b74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015b78:	6006      	str	r6, [r0, #0]
 8015b7a:	60c6      	str	r6, [r0, #12]
 8015b7c:	69e6      	ldr	r6, [r4, #28]
 8015b7e:	68f3      	ldr	r3, [r6, #12]
 8015b80:	b183      	cbz	r3, 8015ba4 <_Balloc+0x50>
 8015b82:	69e3      	ldr	r3, [r4, #28]
 8015b84:	68db      	ldr	r3, [r3, #12]
 8015b86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015b8a:	b9b8      	cbnz	r0, 8015bbc <_Balloc+0x68>
 8015b8c:	2101      	movs	r1, #1
 8015b8e:	fa01 f605 	lsl.w	r6, r1, r5
 8015b92:	1d72      	adds	r2, r6, #5
 8015b94:	0092      	lsls	r2, r2, #2
 8015b96:	4620      	mov	r0, r4
 8015b98:	f001 fda4 	bl	80176e4 <_calloc_r>
 8015b9c:	b160      	cbz	r0, 8015bb8 <_Balloc+0x64>
 8015b9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015ba2:	e00e      	b.n	8015bc2 <_Balloc+0x6e>
 8015ba4:	2221      	movs	r2, #33	@ 0x21
 8015ba6:	2104      	movs	r1, #4
 8015ba8:	4620      	mov	r0, r4
 8015baa:	f001 fd9b 	bl	80176e4 <_calloc_r>
 8015bae:	69e3      	ldr	r3, [r4, #28]
 8015bb0:	60f0      	str	r0, [r6, #12]
 8015bb2:	68db      	ldr	r3, [r3, #12]
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d1e4      	bne.n	8015b82 <_Balloc+0x2e>
 8015bb8:	2000      	movs	r0, #0
 8015bba:	bd70      	pop	{r4, r5, r6, pc}
 8015bbc:	6802      	ldr	r2, [r0, #0]
 8015bbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015bc2:	2300      	movs	r3, #0
 8015bc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015bc8:	e7f7      	b.n	8015bba <_Balloc+0x66>
 8015bca:	bf00      	nop
 8015bcc:	0801890a 	.word	0x0801890a
 8015bd0:	0801898a 	.word	0x0801898a

08015bd4 <_Bfree>:
 8015bd4:	b570      	push	{r4, r5, r6, lr}
 8015bd6:	69c6      	ldr	r6, [r0, #28]
 8015bd8:	4605      	mov	r5, r0
 8015bda:	460c      	mov	r4, r1
 8015bdc:	b976      	cbnz	r6, 8015bfc <_Bfree+0x28>
 8015bde:	2010      	movs	r0, #16
 8015be0:	f7ff ff02 	bl	80159e8 <malloc>
 8015be4:	4602      	mov	r2, r0
 8015be6:	61e8      	str	r0, [r5, #28]
 8015be8:	b920      	cbnz	r0, 8015bf4 <_Bfree+0x20>
 8015bea:	4b09      	ldr	r3, [pc, #36]	@ (8015c10 <_Bfree+0x3c>)
 8015bec:	4809      	ldr	r0, [pc, #36]	@ (8015c14 <_Bfree+0x40>)
 8015bee:	218f      	movs	r1, #143	@ 0x8f
 8015bf0:	f001 fd5a 	bl	80176a8 <__assert_func>
 8015bf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015bf8:	6006      	str	r6, [r0, #0]
 8015bfa:	60c6      	str	r6, [r0, #12]
 8015bfc:	b13c      	cbz	r4, 8015c0e <_Bfree+0x3a>
 8015bfe:	69eb      	ldr	r3, [r5, #28]
 8015c00:	6862      	ldr	r2, [r4, #4]
 8015c02:	68db      	ldr	r3, [r3, #12]
 8015c04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015c08:	6021      	str	r1, [r4, #0]
 8015c0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015c0e:	bd70      	pop	{r4, r5, r6, pc}
 8015c10:	0801890a 	.word	0x0801890a
 8015c14:	0801898a 	.word	0x0801898a

08015c18 <__multadd>:
 8015c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c1c:	690d      	ldr	r5, [r1, #16]
 8015c1e:	4607      	mov	r7, r0
 8015c20:	460c      	mov	r4, r1
 8015c22:	461e      	mov	r6, r3
 8015c24:	f101 0c14 	add.w	ip, r1, #20
 8015c28:	2000      	movs	r0, #0
 8015c2a:	f8dc 3000 	ldr.w	r3, [ip]
 8015c2e:	b299      	uxth	r1, r3
 8015c30:	fb02 6101 	mla	r1, r2, r1, r6
 8015c34:	0c1e      	lsrs	r6, r3, #16
 8015c36:	0c0b      	lsrs	r3, r1, #16
 8015c38:	fb02 3306 	mla	r3, r2, r6, r3
 8015c3c:	b289      	uxth	r1, r1
 8015c3e:	3001      	adds	r0, #1
 8015c40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015c44:	4285      	cmp	r5, r0
 8015c46:	f84c 1b04 	str.w	r1, [ip], #4
 8015c4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015c4e:	dcec      	bgt.n	8015c2a <__multadd+0x12>
 8015c50:	b30e      	cbz	r6, 8015c96 <__multadd+0x7e>
 8015c52:	68a3      	ldr	r3, [r4, #8]
 8015c54:	42ab      	cmp	r3, r5
 8015c56:	dc19      	bgt.n	8015c8c <__multadd+0x74>
 8015c58:	6861      	ldr	r1, [r4, #4]
 8015c5a:	4638      	mov	r0, r7
 8015c5c:	3101      	adds	r1, #1
 8015c5e:	f7ff ff79 	bl	8015b54 <_Balloc>
 8015c62:	4680      	mov	r8, r0
 8015c64:	b928      	cbnz	r0, 8015c72 <__multadd+0x5a>
 8015c66:	4602      	mov	r2, r0
 8015c68:	4b0c      	ldr	r3, [pc, #48]	@ (8015c9c <__multadd+0x84>)
 8015c6a:	480d      	ldr	r0, [pc, #52]	@ (8015ca0 <__multadd+0x88>)
 8015c6c:	21ba      	movs	r1, #186	@ 0xba
 8015c6e:	f001 fd1b 	bl	80176a8 <__assert_func>
 8015c72:	6922      	ldr	r2, [r4, #16]
 8015c74:	3202      	adds	r2, #2
 8015c76:	f104 010c 	add.w	r1, r4, #12
 8015c7a:	0092      	lsls	r2, r2, #2
 8015c7c:	300c      	adds	r0, #12
 8015c7e:	f7ff f86c 	bl	8014d5a <memcpy>
 8015c82:	4621      	mov	r1, r4
 8015c84:	4638      	mov	r0, r7
 8015c86:	f7ff ffa5 	bl	8015bd4 <_Bfree>
 8015c8a:	4644      	mov	r4, r8
 8015c8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015c90:	3501      	adds	r5, #1
 8015c92:	615e      	str	r6, [r3, #20]
 8015c94:	6125      	str	r5, [r4, #16]
 8015c96:	4620      	mov	r0, r4
 8015c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c9c:	08018979 	.word	0x08018979
 8015ca0:	0801898a 	.word	0x0801898a

08015ca4 <__s2b>:
 8015ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015ca8:	460c      	mov	r4, r1
 8015caa:	4615      	mov	r5, r2
 8015cac:	461f      	mov	r7, r3
 8015cae:	2209      	movs	r2, #9
 8015cb0:	3308      	adds	r3, #8
 8015cb2:	4606      	mov	r6, r0
 8015cb4:	fb93 f3f2 	sdiv	r3, r3, r2
 8015cb8:	2100      	movs	r1, #0
 8015cba:	2201      	movs	r2, #1
 8015cbc:	429a      	cmp	r2, r3
 8015cbe:	db09      	blt.n	8015cd4 <__s2b+0x30>
 8015cc0:	4630      	mov	r0, r6
 8015cc2:	f7ff ff47 	bl	8015b54 <_Balloc>
 8015cc6:	b940      	cbnz	r0, 8015cda <__s2b+0x36>
 8015cc8:	4602      	mov	r2, r0
 8015cca:	4b19      	ldr	r3, [pc, #100]	@ (8015d30 <__s2b+0x8c>)
 8015ccc:	4819      	ldr	r0, [pc, #100]	@ (8015d34 <__s2b+0x90>)
 8015cce:	21d3      	movs	r1, #211	@ 0xd3
 8015cd0:	f001 fcea 	bl	80176a8 <__assert_func>
 8015cd4:	0052      	lsls	r2, r2, #1
 8015cd6:	3101      	adds	r1, #1
 8015cd8:	e7f0      	b.n	8015cbc <__s2b+0x18>
 8015cda:	9b08      	ldr	r3, [sp, #32]
 8015cdc:	6143      	str	r3, [r0, #20]
 8015cde:	2d09      	cmp	r5, #9
 8015ce0:	f04f 0301 	mov.w	r3, #1
 8015ce4:	6103      	str	r3, [r0, #16]
 8015ce6:	dd16      	ble.n	8015d16 <__s2b+0x72>
 8015ce8:	f104 0909 	add.w	r9, r4, #9
 8015cec:	46c8      	mov	r8, r9
 8015cee:	442c      	add	r4, r5
 8015cf0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015cf4:	4601      	mov	r1, r0
 8015cf6:	3b30      	subs	r3, #48	@ 0x30
 8015cf8:	220a      	movs	r2, #10
 8015cfa:	4630      	mov	r0, r6
 8015cfc:	f7ff ff8c 	bl	8015c18 <__multadd>
 8015d00:	45a0      	cmp	r8, r4
 8015d02:	d1f5      	bne.n	8015cf0 <__s2b+0x4c>
 8015d04:	f1a5 0408 	sub.w	r4, r5, #8
 8015d08:	444c      	add	r4, r9
 8015d0a:	1b2d      	subs	r5, r5, r4
 8015d0c:	1963      	adds	r3, r4, r5
 8015d0e:	42bb      	cmp	r3, r7
 8015d10:	db04      	blt.n	8015d1c <__s2b+0x78>
 8015d12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015d16:	340a      	adds	r4, #10
 8015d18:	2509      	movs	r5, #9
 8015d1a:	e7f6      	b.n	8015d0a <__s2b+0x66>
 8015d1c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015d20:	4601      	mov	r1, r0
 8015d22:	3b30      	subs	r3, #48	@ 0x30
 8015d24:	220a      	movs	r2, #10
 8015d26:	4630      	mov	r0, r6
 8015d28:	f7ff ff76 	bl	8015c18 <__multadd>
 8015d2c:	e7ee      	b.n	8015d0c <__s2b+0x68>
 8015d2e:	bf00      	nop
 8015d30:	08018979 	.word	0x08018979
 8015d34:	0801898a 	.word	0x0801898a

08015d38 <__hi0bits>:
 8015d38:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8015d3c:	4603      	mov	r3, r0
 8015d3e:	bf36      	itet	cc
 8015d40:	0403      	lslcc	r3, r0, #16
 8015d42:	2000      	movcs	r0, #0
 8015d44:	2010      	movcc	r0, #16
 8015d46:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8015d4a:	bf3c      	itt	cc
 8015d4c:	021b      	lslcc	r3, r3, #8
 8015d4e:	3008      	addcc	r0, #8
 8015d50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015d54:	bf3c      	itt	cc
 8015d56:	011b      	lslcc	r3, r3, #4
 8015d58:	3004      	addcc	r0, #4
 8015d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015d5e:	bf3c      	itt	cc
 8015d60:	009b      	lslcc	r3, r3, #2
 8015d62:	3002      	addcc	r0, #2
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	db05      	blt.n	8015d74 <__hi0bits+0x3c>
 8015d68:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8015d6c:	f100 0001 	add.w	r0, r0, #1
 8015d70:	bf08      	it	eq
 8015d72:	2020      	moveq	r0, #32
 8015d74:	4770      	bx	lr

08015d76 <__lo0bits>:
 8015d76:	6803      	ldr	r3, [r0, #0]
 8015d78:	4602      	mov	r2, r0
 8015d7a:	f013 0007 	ands.w	r0, r3, #7
 8015d7e:	d00b      	beq.n	8015d98 <__lo0bits+0x22>
 8015d80:	07d9      	lsls	r1, r3, #31
 8015d82:	d421      	bmi.n	8015dc8 <__lo0bits+0x52>
 8015d84:	0798      	lsls	r0, r3, #30
 8015d86:	bf49      	itett	mi
 8015d88:	085b      	lsrmi	r3, r3, #1
 8015d8a:	089b      	lsrpl	r3, r3, #2
 8015d8c:	2001      	movmi	r0, #1
 8015d8e:	6013      	strmi	r3, [r2, #0]
 8015d90:	bf5c      	itt	pl
 8015d92:	6013      	strpl	r3, [r2, #0]
 8015d94:	2002      	movpl	r0, #2
 8015d96:	4770      	bx	lr
 8015d98:	b299      	uxth	r1, r3
 8015d9a:	b909      	cbnz	r1, 8015da0 <__lo0bits+0x2a>
 8015d9c:	0c1b      	lsrs	r3, r3, #16
 8015d9e:	2010      	movs	r0, #16
 8015da0:	b2d9      	uxtb	r1, r3
 8015da2:	b909      	cbnz	r1, 8015da8 <__lo0bits+0x32>
 8015da4:	3008      	adds	r0, #8
 8015da6:	0a1b      	lsrs	r3, r3, #8
 8015da8:	0719      	lsls	r1, r3, #28
 8015daa:	bf04      	itt	eq
 8015dac:	091b      	lsreq	r3, r3, #4
 8015dae:	3004      	addeq	r0, #4
 8015db0:	0799      	lsls	r1, r3, #30
 8015db2:	bf04      	itt	eq
 8015db4:	089b      	lsreq	r3, r3, #2
 8015db6:	3002      	addeq	r0, #2
 8015db8:	07d9      	lsls	r1, r3, #31
 8015dba:	d403      	bmi.n	8015dc4 <__lo0bits+0x4e>
 8015dbc:	085b      	lsrs	r3, r3, #1
 8015dbe:	f100 0001 	add.w	r0, r0, #1
 8015dc2:	d003      	beq.n	8015dcc <__lo0bits+0x56>
 8015dc4:	6013      	str	r3, [r2, #0]
 8015dc6:	4770      	bx	lr
 8015dc8:	2000      	movs	r0, #0
 8015dca:	4770      	bx	lr
 8015dcc:	2020      	movs	r0, #32
 8015dce:	4770      	bx	lr

08015dd0 <__i2b>:
 8015dd0:	b510      	push	{r4, lr}
 8015dd2:	460c      	mov	r4, r1
 8015dd4:	2101      	movs	r1, #1
 8015dd6:	f7ff febd 	bl	8015b54 <_Balloc>
 8015dda:	4602      	mov	r2, r0
 8015ddc:	b928      	cbnz	r0, 8015dea <__i2b+0x1a>
 8015dde:	4b05      	ldr	r3, [pc, #20]	@ (8015df4 <__i2b+0x24>)
 8015de0:	4805      	ldr	r0, [pc, #20]	@ (8015df8 <__i2b+0x28>)
 8015de2:	f240 1145 	movw	r1, #325	@ 0x145
 8015de6:	f001 fc5f 	bl	80176a8 <__assert_func>
 8015dea:	2301      	movs	r3, #1
 8015dec:	6144      	str	r4, [r0, #20]
 8015dee:	6103      	str	r3, [r0, #16]
 8015df0:	bd10      	pop	{r4, pc}
 8015df2:	bf00      	nop
 8015df4:	08018979 	.word	0x08018979
 8015df8:	0801898a 	.word	0x0801898a

08015dfc <__multiply>:
 8015dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e00:	4617      	mov	r7, r2
 8015e02:	690a      	ldr	r2, [r1, #16]
 8015e04:	693b      	ldr	r3, [r7, #16]
 8015e06:	429a      	cmp	r2, r3
 8015e08:	bfa8      	it	ge
 8015e0a:	463b      	movge	r3, r7
 8015e0c:	4689      	mov	r9, r1
 8015e0e:	bfa4      	itt	ge
 8015e10:	460f      	movge	r7, r1
 8015e12:	4699      	movge	r9, r3
 8015e14:	693d      	ldr	r5, [r7, #16]
 8015e16:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015e1a:	68bb      	ldr	r3, [r7, #8]
 8015e1c:	6879      	ldr	r1, [r7, #4]
 8015e1e:	eb05 060a 	add.w	r6, r5, sl
 8015e22:	42b3      	cmp	r3, r6
 8015e24:	b085      	sub	sp, #20
 8015e26:	bfb8      	it	lt
 8015e28:	3101      	addlt	r1, #1
 8015e2a:	f7ff fe93 	bl	8015b54 <_Balloc>
 8015e2e:	b930      	cbnz	r0, 8015e3e <__multiply+0x42>
 8015e30:	4602      	mov	r2, r0
 8015e32:	4b41      	ldr	r3, [pc, #260]	@ (8015f38 <__multiply+0x13c>)
 8015e34:	4841      	ldr	r0, [pc, #260]	@ (8015f3c <__multiply+0x140>)
 8015e36:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8015e3a:	f001 fc35 	bl	80176a8 <__assert_func>
 8015e3e:	f100 0414 	add.w	r4, r0, #20
 8015e42:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8015e46:	4623      	mov	r3, r4
 8015e48:	2200      	movs	r2, #0
 8015e4a:	4573      	cmp	r3, lr
 8015e4c:	d320      	bcc.n	8015e90 <__multiply+0x94>
 8015e4e:	f107 0814 	add.w	r8, r7, #20
 8015e52:	f109 0114 	add.w	r1, r9, #20
 8015e56:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8015e5a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8015e5e:	9302      	str	r3, [sp, #8]
 8015e60:	1beb      	subs	r3, r5, r7
 8015e62:	3b15      	subs	r3, #21
 8015e64:	f023 0303 	bic.w	r3, r3, #3
 8015e68:	3304      	adds	r3, #4
 8015e6a:	3715      	adds	r7, #21
 8015e6c:	42bd      	cmp	r5, r7
 8015e6e:	bf38      	it	cc
 8015e70:	2304      	movcc	r3, #4
 8015e72:	9301      	str	r3, [sp, #4]
 8015e74:	9b02      	ldr	r3, [sp, #8]
 8015e76:	9103      	str	r1, [sp, #12]
 8015e78:	428b      	cmp	r3, r1
 8015e7a:	d80c      	bhi.n	8015e96 <__multiply+0x9a>
 8015e7c:	2e00      	cmp	r6, #0
 8015e7e:	dd03      	ble.n	8015e88 <__multiply+0x8c>
 8015e80:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	d055      	beq.n	8015f34 <__multiply+0x138>
 8015e88:	6106      	str	r6, [r0, #16]
 8015e8a:	b005      	add	sp, #20
 8015e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e90:	f843 2b04 	str.w	r2, [r3], #4
 8015e94:	e7d9      	b.n	8015e4a <__multiply+0x4e>
 8015e96:	f8b1 a000 	ldrh.w	sl, [r1]
 8015e9a:	f1ba 0f00 	cmp.w	sl, #0
 8015e9e:	d01f      	beq.n	8015ee0 <__multiply+0xe4>
 8015ea0:	46c4      	mov	ip, r8
 8015ea2:	46a1      	mov	r9, r4
 8015ea4:	2700      	movs	r7, #0
 8015ea6:	f85c 2b04 	ldr.w	r2, [ip], #4
 8015eaa:	f8d9 3000 	ldr.w	r3, [r9]
 8015eae:	fa1f fb82 	uxth.w	fp, r2
 8015eb2:	b29b      	uxth	r3, r3
 8015eb4:	fb0a 330b 	mla	r3, sl, fp, r3
 8015eb8:	443b      	add	r3, r7
 8015eba:	f8d9 7000 	ldr.w	r7, [r9]
 8015ebe:	0c12      	lsrs	r2, r2, #16
 8015ec0:	0c3f      	lsrs	r7, r7, #16
 8015ec2:	fb0a 7202 	mla	r2, sl, r2, r7
 8015ec6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8015eca:	b29b      	uxth	r3, r3
 8015ecc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015ed0:	4565      	cmp	r5, ip
 8015ed2:	f849 3b04 	str.w	r3, [r9], #4
 8015ed6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8015eda:	d8e4      	bhi.n	8015ea6 <__multiply+0xaa>
 8015edc:	9b01      	ldr	r3, [sp, #4]
 8015ede:	50e7      	str	r7, [r4, r3]
 8015ee0:	9b03      	ldr	r3, [sp, #12]
 8015ee2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8015ee6:	3104      	adds	r1, #4
 8015ee8:	f1b9 0f00 	cmp.w	r9, #0
 8015eec:	d020      	beq.n	8015f30 <__multiply+0x134>
 8015eee:	6823      	ldr	r3, [r4, #0]
 8015ef0:	4647      	mov	r7, r8
 8015ef2:	46a4      	mov	ip, r4
 8015ef4:	f04f 0a00 	mov.w	sl, #0
 8015ef8:	f8b7 b000 	ldrh.w	fp, [r7]
 8015efc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8015f00:	fb09 220b 	mla	r2, r9, fp, r2
 8015f04:	4452      	add	r2, sl
 8015f06:	b29b      	uxth	r3, r3
 8015f08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015f0c:	f84c 3b04 	str.w	r3, [ip], #4
 8015f10:	f857 3b04 	ldr.w	r3, [r7], #4
 8015f14:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015f18:	f8bc 3000 	ldrh.w	r3, [ip]
 8015f1c:	fb09 330a 	mla	r3, r9, sl, r3
 8015f20:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8015f24:	42bd      	cmp	r5, r7
 8015f26:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015f2a:	d8e5      	bhi.n	8015ef8 <__multiply+0xfc>
 8015f2c:	9a01      	ldr	r2, [sp, #4]
 8015f2e:	50a3      	str	r3, [r4, r2]
 8015f30:	3404      	adds	r4, #4
 8015f32:	e79f      	b.n	8015e74 <__multiply+0x78>
 8015f34:	3e01      	subs	r6, #1
 8015f36:	e7a1      	b.n	8015e7c <__multiply+0x80>
 8015f38:	08018979 	.word	0x08018979
 8015f3c:	0801898a 	.word	0x0801898a

08015f40 <__pow5mult>:
 8015f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015f44:	4615      	mov	r5, r2
 8015f46:	f012 0203 	ands.w	r2, r2, #3
 8015f4a:	4607      	mov	r7, r0
 8015f4c:	460e      	mov	r6, r1
 8015f4e:	d007      	beq.n	8015f60 <__pow5mult+0x20>
 8015f50:	4c25      	ldr	r4, [pc, #148]	@ (8015fe8 <__pow5mult+0xa8>)
 8015f52:	3a01      	subs	r2, #1
 8015f54:	2300      	movs	r3, #0
 8015f56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015f5a:	f7ff fe5d 	bl	8015c18 <__multadd>
 8015f5e:	4606      	mov	r6, r0
 8015f60:	10ad      	asrs	r5, r5, #2
 8015f62:	d03d      	beq.n	8015fe0 <__pow5mult+0xa0>
 8015f64:	69fc      	ldr	r4, [r7, #28]
 8015f66:	b97c      	cbnz	r4, 8015f88 <__pow5mult+0x48>
 8015f68:	2010      	movs	r0, #16
 8015f6a:	f7ff fd3d 	bl	80159e8 <malloc>
 8015f6e:	4602      	mov	r2, r0
 8015f70:	61f8      	str	r0, [r7, #28]
 8015f72:	b928      	cbnz	r0, 8015f80 <__pow5mult+0x40>
 8015f74:	4b1d      	ldr	r3, [pc, #116]	@ (8015fec <__pow5mult+0xac>)
 8015f76:	481e      	ldr	r0, [pc, #120]	@ (8015ff0 <__pow5mult+0xb0>)
 8015f78:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8015f7c:	f001 fb94 	bl	80176a8 <__assert_func>
 8015f80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015f84:	6004      	str	r4, [r0, #0]
 8015f86:	60c4      	str	r4, [r0, #12]
 8015f88:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8015f8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015f90:	b94c      	cbnz	r4, 8015fa6 <__pow5mult+0x66>
 8015f92:	f240 2171 	movw	r1, #625	@ 0x271
 8015f96:	4638      	mov	r0, r7
 8015f98:	f7ff ff1a 	bl	8015dd0 <__i2b>
 8015f9c:	2300      	movs	r3, #0
 8015f9e:	f8c8 0008 	str.w	r0, [r8, #8]
 8015fa2:	4604      	mov	r4, r0
 8015fa4:	6003      	str	r3, [r0, #0]
 8015fa6:	f04f 0900 	mov.w	r9, #0
 8015faa:	07eb      	lsls	r3, r5, #31
 8015fac:	d50a      	bpl.n	8015fc4 <__pow5mult+0x84>
 8015fae:	4631      	mov	r1, r6
 8015fb0:	4622      	mov	r2, r4
 8015fb2:	4638      	mov	r0, r7
 8015fb4:	f7ff ff22 	bl	8015dfc <__multiply>
 8015fb8:	4631      	mov	r1, r6
 8015fba:	4680      	mov	r8, r0
 8015fbc:	4638      	mov	r0, r7
 8015fbe:	f7ff fe09 	bl	8015bd4 <_Bfree>
 8015fc2:	4646      	mov	r6, r8
 8015fc4:	106d      	asrs	r5, r5, #1
 8015fc6:	d00b      	beq.n	8015fe0 <__pow5mult+0xa0>
 8015fc8:	6820      	ldr	r0, [r4, #0]
 8015fca:	b938      	cbnz	r0, 8015fdc <__pow5mult+0x9c>
 8015fcc:	4622      	mov	r2, r4
 8015fce:	4621      	mov	r1, r4
 8015fd0:	4638      	mov	r0, r7
 8015fd2:	f7ff ff13 	bl	8015dfc <__multiply>
 8015fd6:	6020      	str	r0, [r4, #0]
 8015fd8:	f8c0 9000 	str.w	r9, [r0]
 8015fdc:	4604      	mov	r4, r0
 8015fde:	e7e4      	b.n	8015faa <__pow5mult+0x6a>
 8015fe0:	4630      	mov	r0, r6
 8015fe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015fe6:	bf00      	nop
 8015fe8:	08018a9c 	.word	0x08018a9c
 8015fec:	0801890a 	.word	0x0801890a
 8015ff0:	0801898a 	.word	0x0801898a

08015ff4 <__lshift>:
 8015ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ff8:	460c      	mov	r4, r1
 8015ffa:	6849      	ldr	r1, [r1, #4]
 8015ffc:	6923      	ldr	r3, [r4, #16]
 8015ffe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016002:	68a3      	ldr	r3, [r4, #8]
 8016004:	4607      	mov	r7, r0
 8016006:	4691      	mov	r9, r2
 8016008:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801600c:	f108 0601 	add.w	r6, r8, #1
 8016010:	42b3      	cmp	r3, r6
 8016012:	db0b      	blt.n	801602c <__lshift+0x38>
 8016014:	4638      	mov	r0, r7
 8016016:	f7ff fd9d 	bl	8015b54 <_Balloc>
 801601a:	4605      	mov	r5, r0
 801601c:	b948      	cbnz	r0, 8016032 <__lshift+0x3e>
 801601e:	4602      	mov	r2, r0
 8016020:	4b28      	ldr	r3, [pc, #160]	@ (80160c4 <__lshift+0xd0>)
 8016022:	4829      	ldr	r0, [pc, #164]	@ (80160c8 <__lshift+0xd4>)
 8016024:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8016028:	f001 fb3e 	bl	80176a8 <__assert_func>
 801602c:	3101      	adds	r1, #1
 801602e:	005b      	lsls	r3, r3, #1
 8016030:	e7ee      	b.n	8016010 <__lshift+0x1c>
 8016032:	2300      	movs	r3, #0
 8016034:	f100 0114 	add.w	r1, r0, #20
 8016038:	f100 0210 	add.w	r2, r0, #16
 801603c:	4618      	mov	r0, r3
 801603e:	4553      	cmp	r3, sl
 8016040:	db33      	blt.n	80160aa <__lshift+0xb6>
 8016042:	6920      	ldr	r0, [r4, #16]
 8016044:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016048:	f104 0314 	add.w	r3, r4, #20
 801604c:	f019 091f 	ands.w	r9, r9, #31
 8016050:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016054:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016058:	d02b      	beq.n	80160b2 <__lshift+0xbe>
 801605a:	f1c9 0e20 	rsb	lr, r9, #32
 801605e:	468a      	mov	sl, r1
 8016060:	2200      	movs	r2, #0
 8016062:	6818      	ldr	r0, [r3, #0]
 8016064:	fa00 f009 	lsl.w	r0, r0, r9
 8016068:	4310      	orrs	r0, r2
 801606a:	f84a 0b04 	str.w	r0, [sl], #4
 801606e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016072:	459c      	cmp	ip, r3
 8016074:	fa22 f20e 	lsr.w	r2, r2, lr
 8016078:	d8f3      	bhi.n	8016062 <__lshift+0x6e>
 801607a:	ebac 0304 	sub.w	r3, ip, r4
 801607e:	3b15      	subs	r3, #21
 8016080:	f023 0303 	bic.w	r3, r3, #3
 8016084:	3304      	adds	r3, #4
 8016086:	f104 0015 	add.w	r0, r4, #21
 801608a:	4560      	cmp	r0, ip
 801608c:	bf88      	it	hi
 801608e:	2304      	movhi	r3, #4
 8016090:	50ca      	str	r2, [r1, r3]
 8016092:	b10a      	cbz	r2, 8016098 <__lshift+0xa4>
 8016094:	f108 0602 	add.w	r6, r8, #2
 8016098:	3e01      	subs	r6, #1
 801609a:	4638      	mov	r0, r7
 801609c:	612e      	str	r6, [r5, #16]
 801609e:	4621      	mov	r1, r4
 80160a0:	f7ff fd98 	bl	8015bd4 <_Bfree>
 80160a4:	4628      	mov	r0, r5
 80160a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80160aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80160ae:	3301      	adds	r3, #1
 80160b0:	e7c5      	b.n	801603e <__lshift+0x4a>
 80160b2:	3904      	subs	r1, #4
 80160b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80160b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80160bc:	459c      	cmp	ip, r3
 80160be:	d8f9      	bhi.n	80160b4 <__lshift+0xc0>
 80160c0:	e7ea      	b.n	8016098 <__lshift+0xa4>
 80160c2:	bf00      	nop
 80160c4:	08018979 	.word	0x08018979
 80160c8:	0801898a 	.word	0x0801898a

080160cc <__mcmp>:
 80160cc:	690a      	ldr	r2, [r1, #16]
 80160ce:	4603      	mov	r3, r0
 80160d0:	6900      	ldr	r0, [r0, #16]
 80160d2:	1a80      	subs	r0, r0, r2
 80160d4:	b530      	push	{r4, r5, lr}
 80160d6:	d10e      	bne.n	80160f6 <__mcmp+0x2a>
 80160d8:	3314      	adds	r3, #20
 80160da:	3114      	adds	r1, #20
 80160dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80160e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80160e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80160e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80160ec:	4295      	cmp	r5, r2
 80160ee:	d003      	beq.n	80160f8 <__mcmp+0x2c>
 80160f0:	d205      	bcs.n	80160fe <__mcmp+0x32>
 80160f2:	f04f 30ff 	mov.w	r0, #4294967295
 80160f6:	bd30      	pop	{r4, r5, pc}
 80160f8:	42a3      	cmp	r3, r4
 80160fa:	d3f3      	bcc.n	80160e4 <__mcmp+0x18>
 80160fc:	e7fb      	b.n	80160f6 <__mcmp+0x2a>
 80160fe:	2001      	movs	r0, #1
 8016100:	e7f9      	b.n	80160f6 <__mcmp+0x2a>
	...

08016104 <__mdiff>:
 8016104:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016108:	4689      	mov	r9, r1
 801610a:	4606      	mov	r6, r0
 801610c:	4611      	mov	r1, r2
 801610e:	4648      	mov	r0, r9
 8016110:	4614      	mov	r4, r2
 8016112:	f7ff ffdb 	bl	80160cc <__mcmp>
 8016116:	1e05      	subs	r5, r0, #0
 8016118:	d112      	bne.n	8016140 <__mdiff+0x3c>
 801611a:	4629      	mov	r1, r5
 801611c:	4630      	mov	r0, r6
 801611e:	f7ff fd19 	bl	8015b54 <_Balloc>
 8016122:	4602      	mov	r2, r0
 8016124:	b928      	cbnz	r0, 8016132 <__mdiff+0x2e>
 8016126:	4b3f      	ldr	r3, [pc, #252]	@ (8016224 <__mdiff+0x120>)
 8016128:	f240 2137 	movw	r1, #567	@ 0x237
 801612c:	483e      	ldr	r0, [pc, #248]	@ (8016228 <__mdiff+0x124>)
 801612e:	f001 fabb 	bl	80176a8 <__assert_func>
 8016132:	2301      	movs	r3, #1
 8016134:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016138:	4610      	mov	r0, r2
 801613a:	b003      	add	sp, #12
 801613c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016140:	bfbc      	itt	lt
 8016142:	464b      	movlt	r3, r9
 8016144:	46a1      	movlt	r9, r4
 8016146:	4630      	mov	r0, r6
 8016148:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801614c:	bfba      	itte	lt
 801614e:	461c      	movlt	r4, r3
 8016150:	2501      	movlt	r5, #1
 8016152:	2500      	movge	r5, #0
 8016154:	f7ff fcfe 	bl	8015b54 <_Balloc>
 8016158:	4602      	mov	r2, r0
 801615a:	b918      	cbnz	r0, 8016164 <__mdiff+0x60>
 801615c:	4b31      	ldr	r3, [pc, #196]	@ (8016224 <__mdiff+0x120>)
 801615e:	f240 2145 	movw	r1, #581	@ 0x245
 8016162:	e7e3      	b.n	801612c <__mdiff+0x28>
 8016164:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8016168:	6926      	ldr	r6, [r4, #16]
 801616a:	60c5      	str	r5, [r0, #12]
 801616c:	f109 0310 	add.w	r3, r9, #16
 8016170:	f109 0514 	add.w	r5, r9, #20
 8016174:	f104 0e14 	add.w	lr, r4, #20
 8016178:	f100 0b14 	add.w	fp, r0, #20
 801617c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8016180:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8016184:	9301      	str	r3, [sp, #4]
 8016186:	46d9      	mov	r9, fp
 8016188:	f04f 0c00 	mov.w	ip, #0
 801618c:	9b01      	ldr	r3, [sp, #4]
 801618e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8016192:	f853 af04 	ldr.w	sl, [r3, #4]!
 8016196:	9301      	str	r3, [sp, #4]
 8016198:	fa1f f38a 	uxth.w	r3, sl
 801619c:	4619      	mov	r1, r3
 801619e:	b283      	uxth	r3, r0
 80161a0:	1acb      	subs	r3, r1, r3
 80161a2:	0c00      	lsrs	r0, r0, #16
 80161a4:	4463      	add	r3, ip
 80161a6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80161aa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80161ae:	b29b      	uxth	r3, r3
 80161b0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80161b4:	4576      	cmp	r6, lr
 80161b6:	f849 3b04 	str.w	r3, [r9], #4
 80161ba:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80161be:	d8e5      	bhi.n	801618c <__mdiff+0x88>
 80161c0:	1b33      	subs	r3, r6, r4
 80161c2:	3b15      	subs	r3, #21
 80161c4:	f023 0303 	bic.w	r3, r3, #3
 80161c8:	3415      	adds	r4, #21
 80161ca:	3304      	adds	r3, #4
 80161cc:	42a6      	cmp	r6, r4
 80161ce:	bf38      	it	cc
 80161d0:	2304      	movcc	r3, #4
 80161d2:	441d      	add	r5, r3
 80161d4:	445b      	add	r3, fp
 80161d6:	461e      	mov	r6, r3
 80161d8:	462c      	mov	r4, r5
 80161da:	4544      	cmp	r4, r8
 80161dc:	d30e      	bcc.n	80161fc <__mdiff+0xf8>
 80161de:	f108 0103 	add.w	r1, r8, #3
 80161e2:	1b49      	subs	r1, r1, r5
 80161e4:	f021 0103 	bic.w	r1, r1, #3
 80161e8:	3d03      	subs	r5, #3
 80161ea:	45a8      	cmp	r8, r5
 80161ec:	bf38      	it	cc
 80161ee:	2100      	movcc	r1, #0
 80161f0:	440b      	add	r3, r1
 80161f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80161f6:	b191      	cbz	r1, 801621e <__mdiff+0x11a>
 80161f8:	6117      	str	r7, [r2, #16]
 80161fa:	e79d      	b.n	8016138 <__mdiff+0x34>
 80161fc:	f854 1b04 	ldr.w	r1, [r4], #4
 8016200:	46e6      	mov	lr, ip
 8016202:	0c08      	lsrs	r0, r1, #16
 8016204:	fa1c fc81 	uxtah	ip, ip, r1
 8016208:	4471      	add	r1, lr
 801620a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801620e:	b289      	uxth	r1, r1
 8016210:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8016214:	f846 1b04 	str.w	r1, [r6], #4
 8016218:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801621c:	e7dd      	b.n	80161da <__mdiff+0xd6>
 801621e:	3f01      	subs	r7, #1
 8016220:	e7e7      	b.n	80161f2 <__mdiff+0xee>
 8016222:	bf00      	nop
 8016224:	08018979 	.word	0x08018979
 8016228:	0801898a 	.word	0x0801898a

0801622c <__ulp>:
 801622c:	b082      	sub	sp, #8
 801622e:	ed8d 0b00 	vstr	d0, [sp]
 8016232:	9a01      	ldr	r2, [sp, #4]
 8016234:	4b0f      	ldr	r3, [pc, #60]	@ (8016274 <__ulp+0x48>)
 8016236:	4013      	ands	r3, r2
 8016238:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801623c:	2b00      	cmp	r3, #0
 801623e:	dc08      	bgt.n	8016252 <__ulp+0x26>
 8016240:	425b      	negs	r3, r3
 8016242:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8016246:	ea4f 5223 	mov.w	r2, r3, asr #20
 801624a:	da04      	bge.n	8016256 <__ulp+0x2a>
 801624c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8016250:	4113      	asrs	r3, r2
 8016252:	2200      	movs	r2, #0
 8016254:	e008      	b.n	8016268 <__ulp+0x3c>
 8016256:	f1a2 0314 	sub.w	r3, r2, #20
 801625a:	2b1e      	cmp	r3, #30
 801625c:	bfda      	itte	le
 801625e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8016262:	40da      	lsrle	r2, r3
 8016264:	2201      	movgt	r2, #1
 8016266:	2300      	movs	r3, #0
 8016268:	4619      	mov	r1, r3
 801626a:	4610      	mov	r0, r2
 801626c:	ec41 0b10 	vmov	d0, r0, r1
 8016270:	b002      	add	sp, #8
 8016272:	4770      	bx	lr
 8016274:	7ff00000 	.word	0x7ff00000

08016278 <__b2d>:
 8016278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801627c:	6906      	ldr	r6, [r0, #16]
 801627e:	f100 0814 	add.w	r8, r0, #20
 8016282:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8016286:	1f37      	subs	r7, r6, #4
 8016288:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801628c:	4610      	mov	r0, r2
 801628e:	f7ff fd53 	bl	8015d38 <__hi0bits>
 8016292:	f1c0 0320 	rsb	r3, r0, #32
 8016296:	280a      	cmp	r0, #10
 8016298:	600b      	str	r3, [r1, #0]
 801629a:	491b      	ldr	r1, [pc, #108]	@ (8016308 <__b2d+0x90>)
 801629c:	dc15      	bgt.n	80162ca <__b2d+0x52>
 801629e:	f1c0 0c0b 	rsb	ip, r0, #11
 80162a2:	fa22 f30c 	lsr.w	r3, r2, ip
 80162a6:	45b8      	cmp	r8, r7
 80162a8:	ea43 0501 	orr.w	r5, r3, r1
 80162ac:	bf34      	ite	cc
 80162ae:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80162b2:	2300      	movcs	r3, #0
 80162b4:	3015      	adds	r0, #21
 80162b6:	fa02 f000 	lsl.w	r0, r2, r0
 80162ba:	fa23 f30c 	lsr.w	r3, r3, ip
 80162be:	4303      	orrs	r3, r0
 80162c0:	461c      	mov	r4, r3
 80162c2:	ec45 4b10 	vmov	d0, r4, r5
 80162c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162ca:	45b8      	cmp	r8, r7
 80162cc:	bf3a      	itte	cc
 80162ce:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80162d2:	f1a6 0708 	subcc.w	r7, r6, #8
 80162d6:	2300      	movcs	r3, #0
 80162d8:	380b      	subs	r0, #11
 80162da:	d012      	beq.n	8016302 <__b2d+0x8a>
 80162dc:	f1c0 0120 	rsb	r1, r0, #32
 80162e0:	fa23 f401 	lsr.w	r4, r3, r1
 80162e4:	4082      	lsls	r2, r0
 80162e6:	4322      	orrs	r2, r4
 80162e8:	4547      	cmp	r7, r8
 80162ea:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80162ee:	bf8c      	ite	hi
 80162f0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80162f4:	2200      	movls	r2, #0
 80162f6:	4083      	lsls	r3, r0
 80162f8:	40ca      	lsrs	r2, r1
 80162fa:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80162fe:	4313      	orrs	r3, r2
 8016300:	e7de      	b.n	80162c0 <__b2d+0x48>
 8016302:	ea42 0501 	orr.w	r5, r2, r1
 8016306:	e7db      	b.n	80162c0 <__b2d+0x48>
 8016308:	3ff00000 	.word	0x3ff00000

0801630c <__d2b>:
 801630c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016310:	460f      	mov	r7, r1
 8016312:	2101      	movs	r1, #1
 8016314:	ec59 8b10 	vmov	r8, r9, d0
 8016318:	4616      	mov	r6, r2
 801631a:	f7ff fc1b 	bl	8015b54 <_Balloc>
 801631e:	4604      	mov	r4, r0
 8016320:	b930      	cbnz	r0, 8016330 <__d2b+0x24>
 8016322:	4602      	mov	r2, r0
 8016324:	4b23      	ldr	r3, [pc, #140]	@ (80163b4 <__d2b+0xa8>)
 8016326:	4824      	ldr	r0, [pc, #144]	@ (80163b8 <__d2b+0xac>)
 8016328:	f240 310f 	movw	r1, #783	@ 0x30f
 801632c:	f001 f9bc 	bl	80176a8 <__assert_func>
 8016330:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016334:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016338:	b10d      	cbz	r5, 801633e <__d2b+0x32>
 801633a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801633e:	9301      	str	r3, [sp, #4]
 8016340:	f1b8 0300 	subs.w	r3, r8, #0
 8016344:	d023      	beq.n	801638e <__d2b+0x82>
 8016346:	4668      	mov	r0, sp
 8016348:	9300      	str	r3, [sp, #0]
 801634a:	f7ff fd14 	bl	8015d76 <__lo0bits>
 801634e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8016352:	b1d0      	cbz	r0, 801638a <__d2b+0x7e>
 8016354:	f1c0 0320 	rsb	r3, r0, #32
 8016358:	fa02 f303 	lsl.w	r3, r2, r3
 801635c:	430b      	orrs	r3, r1
 801635e:	40c2      	lsrs	r2, r0
 8016360:	6163      	str	r3, [r4, #20]
 8016362:	9201      	str	r2, [sp, #4]
 8016364:	9b01      	ldr	r3, [sp, #4]
 8016366:	61a3      	str	r3, [r4, #24]
 8016368:	2b00      	cmp	r3, #0
 801636a:	bf0c      	ite	eq
 801636c:	2201      	moveq	r2, #1
 801636e:	2202      	movne	r2, #2
 8016370:	6122      	str	r2, [r4, #16]
 8016372:	b1a5      	cbz	r5, 801639e <__d2b+0x92>
 8016374:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8016378:	4405      	add	r5, r0
 801637a:	603d      	str	r5, [r7, #0]
 801637c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8016380:	6030      	str	r0, [r6, #0]
 8016382:	4620      	mov	r0, r4
 8016384:	b003      	add	sp, #12
 8016386:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801638a:	6161      	str	r1, [r4, #20]
 801638c:	e7ea      	b.n	8016364 <__d2b+0x58>
 801638e:	a801      	add	r0, sp, #4
 8016390:	f7ff fcf1 	bl	8015d76 <__lo0bits>
 8016394:	9b01      	ldr	r3, [sp, #4]
 8016396:	6163      	str	r3, [r4, #20]
 8016398:	3020      	adds	r0, #32
 801639a:	2201      	movs	r2, #1
 801639c:	e7e8      	b.n	8016370 <__d2b+0x64>
 801639e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80163a2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80163a6:	6038      	str	r0, [r7, #0]
 80163a8:	6918      	ldr	r0, [r3, #16]
 80163aa:	f7ff fcc5 	bl	8015d38 <__hi0bits>
 80163ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80163b2:	e7e5      	b.n	8016380 <__d2b+0x74>
 80163b4:	08018979 	.word	0x08018979
 80163b8:	0801898a 	.word	0x0801898a

080163bc <__ratio>:
 80163bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163c0:	4688      	mov	r8, r1
 80163c2:	4669      	mov	r1, sp
 80163c4:	4681      	mov	r9, r0
 80163c6:	f7ff ff57 	bl	8016278 <__b2d>
 80163ca:	a901      	add	r1, sp, #4
 80163cc:	4640      	mov	r0, r8
 80163ce:	ec55 4b10 	vmov	r4, r5, d0
 80163d2:	f7ff ff51 	bl	8016278 <__b2d>
 80163d6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80163da:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80163de:	1ad2      	subs	r2, r2, r3
 80163e0:	e9dd 3100 	ldrd	r3, r1, [sp]
 80163e4:	1a5b      	subs	r3, r3, r1
 80163e6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80163ea:	ec57 6b10 	vmov	r6, r7, d0
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	bfd6      	itet	le
 80163f2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80163f6:	462a      	movgt	r2, r5
 80163f8:	463a      	movle	r2, r7
 80163fa:	46ab      	mov	fp, r5
 80163fc:	46a2      	mov	sl, r4
 80163fe:	bfce      	itee	gt
 8016400:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8016404:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8016408:	ee00 3a90 	vmovle	s1, r3
 801640c:	ec4b ab17 	vmov	d7, sl, fp
 8016410:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8016414:	b003      	add	sp, #12
 8016416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801641a <__copybits>:
 801641a:	3901      	subs	r1, #1
 801641c:	b570      	push	{r4, r5, r6, lr}
 801641e:	1149      	asrs	r1, r1, #5
 8016420:	6914      	ldr	r4, [r2, #16]
 8016422:	3101      	adds	r1, #1
 8016424:	f102 0314 	add.w	r3, r2, #20
 8016428:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801642c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016430:	1f05      	subs	r5, r0, #4
 8016432:	42a3      	cmp	r3, r4
 8016434:	d30c      	bcc.n	8016450 <__copybits+0x36>
 8016436:	1aa3      	subs	r3, r4, r2
 8016438:	3b11      	subs	r3, #17
 801643a:	f023 0303 	bic.w	r3, r3, #3
 801643e:	3211      	adds	r2, #17
 8016440:	42a2      	cmp	r2, r4
 8016442:	bf88      	it	hi
 8016444:	2300      	movhi	r3, #0
 8016446:	4418      	add	r0, r3
 8016448:	2300      	movs	r3, #0
 801644a:	4288      	cmp	r0, r1
 801644c:	d305      	bcc.n	801645a <__copybits+0x40>
 801644e:	bd70      	pop	{r4, r5, r6, pc}
 8016450:	f853 6b04 	ldr.w	r6, [r3], #4
 8016454:	f845 6f04 	str.w	r6, [r5, #4]!
 8016458:	e7eb      	b.n	8016432 <__copybits+0x18>
 801645a:	f840 3b04 	str.w	r3, [r0], #4
 801645e:	e7f4      	b.n	801644a <__copybits+0x30>

08016460 <__any_on>:
 8016460:	f100 0214 	add.w	r2, r0, #20
 8016464:	6900      	ldr	r0, [r0, #16]
 8016466:	114b      	asrs	r3, r1, #5
 8016468:	4298      	cmp	r0, r3
 801646a:	b510      	push	{r4, lr}
 801646c:	db11      	blt.n	8016492 <__any_on+0x32>
 801646e:	dd0a      	ble.n	8016486 <__any_on+0x26>
 8016470:	f011 011f 	ands.w	r1, r1, #31
 8016474:	d007      	beq.n	8016486 <__any_on+0x26>
 8016476:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801647a:	fa24 f001 	lsr.w	r0, r4, r1
 801647e:	fa00 f101 	lsl.w	r1, r0, r1
 8016482:	428c      	cmp	r4, r1
 8016484:	d10b      	bne.n	801649e <__any_on+0x3e>
 8016486:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801648a:	4293      	cmp	r3, r2
 801648c:	d803      	bhi.n	8016496 <__any_on+0x36>
 801648e:	2000      	movs	r0, #0
 8016490:	bd10      	pop	{r4, pc}
 8016492:	4603      	mov	r3, r0
 8016494:	e7f7      	b.n	8016486 <__any_on+0x26>
 8016496:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801649a:	2900      	cmp	r1, #0
 801649c:	d0f5      	beq.n	801648a <__any_on+0x2a>
 801649e:	2001      	movs	r0, #1
 80164a0:	e7f6      	b.n	8016490 <__any_on+0x30>

080164a2 <sulp>:
 80164a2:	b570      	push	{r4, r5, r6, lr}
 80164a4:	4604      	mov	r4, r0
 80164a6:	460d      	mov	r5, r1
 80164a8:	4616      	mov	r6, r2
 80164aa:	ec45 4b10 	vmov	d0, r4, r5
 80164ae:	f7ff febd 	bl	801622c <__ulp>
 80164b2:	b17e      	cbz	r6, 80164d4 <sulp+0x32>
 80164b4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80164b8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80164bc:	2b00      	cmp	r3, #0
 80164be:	dd09      	ble.n	80164d4 <sulp+0x32>
 80164c0:	051b      	lsls	r3, r3, #20
 80164c2:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 80164c6:	2000      	movs	r0, #0
 80164c8:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 80164cc:	ec41 0b17 	vmov	d7, r0, r1
 80164d0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80164d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080164d8 <_strtod_l>:
 80164d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164dc:	ed2d 8b0a 	vpush	{d8-d12}
 80164e0:	b097      	sub	sp, #92	@ 0x5c
 80164e2:	4688      	mov	r8, r1
 80164e4:	920e      	str	r2, [sp, #56]	@ 0x38
 80164e6:	2200      	movs	r2, #0
 80164e8:	9212      	str	r2, [sp, #72]	@ 0x48
 80164ea:	9005      	str	r0, [sp, #20]
 80164ec:	f04f 0a00 	mov.w	sl, #0
 80164f0:	f04f 0b00 	mov.w	fp, #0
 80164f4:	460a      	mov	r2, r1
 80164f6:	9211      	str	r2, [sp, #68]	@ 0x44
 80164f8:	7811      	ldrb	r1, [r2, #0]
 80164fa:	292b      	cmp	r1, #43	@ 0x2b
 80164fc:	d04c      	beq.n	8016598 <_strtod_l+0xc0>
 80164fe:	d839      	bhi.n	8016574 <_strtod_l+0x9c>
 8016500:	290d      	cmp	r1, #13
 8016502:	d833      	bhi.n	801656c <_strtod_l+0x94>
 8016504:	2908      	cmp	r1, #8
 8016506:	d833      	bhi.n	8016570 <_strtod_l+0x98>
 8016508:	2900      	cmp	r1, #0
 801650a:	d03c      	beq.n	8016586 <_strtod_l+0xae>
 801650c:	2200      	movs	r2, #0
 801650e:	9208      	str	r2, [sp, #32]
 8016510:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8016512:	782a      	ldrb	r2, [r5, #0]
 8016514:	2a30      	cmp	r2, #48	@ 0x30
 8016516:	f040 80b7 	bne.w	8016688 <_strtod_l+0x1b0>
 801651a:	786a      	ldrb	r2, [r5, #1]
 801651c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8016520:	2a58      	cmp	r2, #88	@ 0x58
 8016522:	d170      	bne.n	8016606 <_strtod_l+0x12e>
 8016524:	9302      	str	r3, [sp, #8]
 8016526:	9b08      	ldr	r3, [sp, #32]
 8016528:	9301      	str	r3, [sp, #4]
 801652a:	ab12      	add	r3, sp, #72	@ 0x48
 801652c:	9300      	str	r3, [sp, #0]
 801652e:	4a90      	ldr	r2, [pc, #576]	@ (8016770 <_strtod_l+0x298>)
 8016530:	9805      	ldr	r0, [sp, #20]
 8016532:	ab13      	add	r3, sp, #76	@ 0x4c
 8016534:	a911      	add	r1, sp, #68	@ 0x44
 8016536:	f001 f951 	bl	80177dc <__gethex>
 801653a:	f010 060f 	ands.w	r6, r0, #15
 801653e:	4604      	mov	r4, r0
 8016540:	d005      	beq.n	801654e <_strtod_l+0x76>
 8016542:	2e06      	cmp	r6, #6
 8016544:	d12a      	bne.n	801659c <_strtod_l+0xc4>
 8016546:	3501      	adds	r5, #1
 8016548:	2300      	movs	r3, #0
 801654a:	9511      	str	r5, [sp, #68]	@ 0x44
 801654c:	9308      	str	r3, [sp, #32]
 801654e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016550:	2b00      	cmp	r3, #0
 8016552:	f040 8537 	bne.w	8016fc4 <_strtod_l+0xaec>
 8016556:	9b08      	ldr	r3, [sp, #32]
 8016558:	ec4b ab10 	vmov	d0, sl, fp
 801655c:	b1cb      	cbz	r3, 8016592 <_strtod_l+0xba>
 801655e:	eeb1 0b40 	vneg.f64	d0, d0
 8016562:	b017      	add	sp, #92	@ 0x5c
 8016564:	ecbd 8b0a 	vpop	{d8-d12}
 8016568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801656c:	2920      	cmp	r1, #32
 801656e:	d1cd      	bne.n	801650c <_strtod_l+0x34>
 8016570:	3201      	adds	r2, #1
 8016572:	e7c0      	b.n	80164f6 <_strtod_l+0x1e>
 8016574:	292d      	cmp	r1, #45	@ 0x2d
 8016576:	d1c9      	bne.n	801650c <_strtod_l+0x34>
 8016578:	2101      	movs	r1, #1
 801657a:	9108      	str	r1, [sp, #32]
 801657c:	1c51      	adds	r1, r2, #1
 801657e:	9111      	str	r1, [sp, #68]	@ 0x44
 8016580:	7852      	ldrb	r2, [r2, #1]
 8016582:	2a00      	cmp	r2, #0
 8016584:	d1c4      	bne.n	8016510 <_strtod_l+0x38>
 8016586:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016588:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 801658c:	2b00      	cmp	r3, #0
 801658e:	f040 8517 	bne.w	8016fc0 <_strtod_l+0xae8>
 8016592:	ec4b ab10 	vmov	d0, sl, fp
 8016596:	e7e4      	b.n	8016562 <_strtod_l+0x8a>
 8016598:	2100      	movs	r1, #0
 801659a:	e7ee      	b.n	801657a <_strtod_l+0xa2>
 801659c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801659e:	b13a      	cbz	r2, 80165b0 <_strtod_l+0xd8>
 80165a0:	2135      	movs	r1, #53	@ 0x35
 80165a2:	a814      	add	r0, sp, #80	@ 0x50
 80165a4:	f7ff ff39 	bl	801641a <__copybits>
 80165a8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80165aa:	9805      	ldr	r0, [sp, #20]
 80165ac:	f7ff fb12 	bl	8015bd4 <_Bfree>
 80165b0:	1e73      	subs	r3, r6, #1
 80165b2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80165b4:	2b04      	cmp	r3, #4
 80165b6:	d806      	bhi.n	80165c6 <_strtod_l+0xee>
 80165b8:	e8df f003 	tbb	[pc, r3]
 80165bc:	201d0314 	.word	0x201d0314
 80165c0:	14          	.byte	0x14
 80165c1:	00          	.byte	0x00
 80165c2:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 80165c6:	05e3      	lsls	r3, r4, #23
 80165c8:	bf48      	it	mi
 80165ca:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80165ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80165d2:	0d1b      	lsrs	r3, r3, #20
 80165d4:	051b      	lsls	r3, r3, #20
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	d1b9      	bne.n	801654e <_strtod_l+0x76>
 80165da:	f7fe fb91 	bl	8014d00 <__errno>
 80165de:	2322      	movs	r3, #34	@ 0x22
 80165e0:	6003      	str	r3, [r0, #0]
 80165e2:	e7b4      	b.n	801654e <_strtod_l+0x76>
 80165e4:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 80165e8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80165ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80165f0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80165f4:	e7e7      	b.n	80165c6 <_strtod_l+0xee>
 80165f6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8016778 <_strtod_l+0x2a0>
 80165fa:	e7e4      	b.n	80165c6 <_strtod_l+0xee>
 80165fc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8016600:	f04f 3aff 	mov.w	sl, #4294967295
 8016604:	e7df      	b.n	80165c6 <_strtod_l+0xee>
 8016606:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016608:	1c5a      	adds	r2, r3, #1
 801660a:	9211      	str	r2, [sp, #68]	@ 0x44
 801660c:	785b      	ldrb	r3, [r3, #1]
 801660e:	2b30      	cmp	r3, #48	@ 0x30
 8016610:	d0f9      	beq.n	8016606 <_strtod_l+0x12e>
 8016612:	2b00      	cmp	r3, #0
 8016614:	d09b      	beq.n	801654e <_strtod_l+0x76>
 8016616:	2301      	movs	r3, #1
 8016618:	9307      	str	r3, [sp, #28]
 801661a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801661c:	930a      	str	r3, [sp, #40]	@ 0x28
 801661e:	2300      	movs	r3, #0
 8016620:	9306      	str	r3, [sp, #24]
 8016622:	4699      	mov	r9, r3
 8016624:	461d      	mov	r5, r3
 8016626:	220a      	movs	r2, #10
 8016628:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801662a:	7804      	ldrb	r4, [r0, #0]
 801662c:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8016630:	b2d9      	uxtb	r1, r3
 8016632:	2909      	cmp	r1, #9
 8016634:	d92a      	bls.n	801668c <_strtod_l+0x1b4>
 8016636:	494f      	ldr	r1, [pc, #316]	@ (8016774 <_strtod_l+0x29c>)
 8016638:	2201      	movs	r2, #1
 801663a:	f000 ffe9 	bl	8017610 <strncmp>
 801663e:	b398      	cbz	r0, 80166a8 <_strtod_l+0x1d0>
 8016640:	2000      	movs	r0, #0
 8016642:	4622      	mov	r2, r4
 8016644:	462b      	mov	r3, r5
 8016646:	4607      	mov	r7, r0
 8016648:	4601      	mov	r1, r0
 801664a:	2a65      	cmp	r2, #101	@ 0x65
 801664c:	d001      	beq.n	8016652 <_strtod_l+0x17a>
 801664e:	2a45      	cmp	r2, #69	@ 0x45
 8016650:	d118      	bne.n	8016684 <_strtod_l+0x1ac>
 8016652:	b91b      	cbnz	r3, 801665c <_strtod_l+0x184>
 8016654:	9b07      	ldr	r3, [sp, #28]
 8016656:	4303      	orrs	r3, r0
 8016658:	d095      	beq.n	8016586 <_strtod_l+0xae>
 801665a:	2300      	movs	r3, #0
 801665c:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8016660:	f108 0201 	add.w	r2, r8, #1
 8016664:	9211      	str	r2, [sp, #68]	@ 0x44
 8016666:	f898 2001 	ldrb.w	r2, [r8, #1]
 801666a:	2a2b      	cmp	r2, #43	@ 0x2b
 801666c:	d074      	beq.n	8016758 <_strtod_l+0x280>
 801666e:	2a2d      	cmp	r2, #45	@ 0x2d
 8016670:	d07a      	beq.n	8016768 <_strtod_l+0x290>
 8016672:	f04f 0e00 	mov.w	lr, #0
 8016676:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 801667a:	2c09      	cmp	r4, #9
 801667c:	f240 8082 	bls.w	8016784 <_strtod_l+0x2ac>
 8016680:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8016684:	2400      	movs	r4, #0
 8016686:	e09d      	b.n	80167c4 <_strtod_l+0x2ec>
 8016688:	2300      	movs	r3, #0
 801668a:	e7c5      	b.n	8016618 <_strtod_l+0x140>
 801668c:	2d08      	cmp	r5, #8
 801668e:	bfc8      	it	gt
 8016690:	9906      	ldrgt	r1, [sp, #24]
 8016692:	f100 0001 	add.w	r0, r0, #1
 8016696:	bfca      	itet	gt
 8016698:	fb02 3301 	mlagt	r3, r2, r1, r3
 801669c:	fb02 3909 	mlale	r9, r2, r9, r3
 80166a0:	9306      	strgt	r3, [sp, #24]
 80166a2:	3501      	adds	r5, #1
 80166a4:	9011      	str	r0, [sp, #68]	@ 0x44
 80166a6:	e7bf      	b.n	8016628 <_strtod_l+0x150>
 80166a8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80166aa:	1c5a      	adds	r2, r3, #1
 80166ac:	9211      	str	r2, [sp, #68]	@ 0x44
 80166ae:	785a      	ldrb	r2, [r3, #1]
 80166b0:	b3bd      	cbz	r5, 8016722 <_strtod_l+0x24a>
 80166b2:	4607      	mov	r7, r0
 80166b4:	462b      	mov	r3, r5
 80166b6:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80166ba:	2909      	cmp	r1, #9
 80166bc:	d912      	bls.n	80166e4 <_strtod_l+0x20c>
 80166be:	2101      	movs	r1, #1
 80166c0:	e7c3      	b.n	801664a <_strtod_l+0x172>
 80166c2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80166c4:	1c5a      	adds	r2, r3, #1
 80166c6:	9211      	str	r2, [sp, #68]	@ 0x44
 80166c8:	785a      	ldrb	r2, [r3, #1]
 80166ca:	3001      	adds	r0, #1
 80166cc:	2a30      	cmp	r2, #48	@ 0x30
 80166ce:	d0f8      	beq.n	80166c2 <_strtod_l+0x1ea>
 80166d0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80166d4:	2b08      	cmp	r3, #8
 80166d6:	f200 847a 	bhi.w	8016fce <_strtod_l+0xaf6>
 80166da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80166dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80166de:	4607      	mov	r7, r0
 80166e0:	2000      	movs	r0, #0
 80166e2:	4603      	mov	r3, r0
 80166e4:	3a30      	subs	r2, #48	@ 0x30
 80166e6:	f100 0101 	add.w	r1, r0, #1
 80166ea:	d014      	beq.n	8016716 <_strtod_l+0x23e>
 80166ec:	440f      	add	r7, r1
 80166ee:	469c      	mov	ip, r3
 80166f0:	f04f 0e0a 	mov.w	lr, #10
 80166f4:	f10c 0401 	add.w	r4, ip, #1
 80166f8:	1ae6      	subs	r6, r4, r3
 80166fa:	42b1      	cmp	r1, r6
 80166fc:	dc13      	bgt.n	8016726 <_strtod_l+0x24e>
 80166fe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8016702:	1819      	adds	r1, r3, r0
 8016704:	2908      	cmp	r1, #8
 8016706:	f103 0301 	add.w	r3, r3, #1
 801670a:	4403      	add	r3, r0
 801670c:	dc19      	bgt.n	8016742 <_strtod_l+0x26a>
 801670e:	210a      	movs	r1, #10
 8016710:	fb01 2909 	mla	r9, r1, r9, r2
 8016714:	2100      	movs	r1, #0
 8016716:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8016718:	1c50      	adds	r0, r2, #1
 801671a:	9011      	str	r0, [sp, #68]	@ 0x44
 801671c:	7852      	ldrb	r2, [r2, #1]
 801671e:	4608      	mov	r0, r1
 8016720:	e7c9      	b.n	80166b6 <_strtod_l+0x1de>
 8016722:	4628      	mov	r0, r5
 8016724:	e7d2      	b.n	80166cc <_strtod_l+0x1f4>
 8016726:	f1bc 0f08 	cmp.w	ip, #8
 801672a:	dc03      	bgt.n	8016734 <_strtod_l+0x25c>
 801672c:	fb0e f909 	mul.w	r9, lr, r9
 8016730:	46a4      	mov	ip, r4
 8016732:	e7df      	b.n	80166f4 <_strtod_l+0x21c>
 8016734:	2c10      	cmp	r4, #16
 8016736:	bfde      	ittt	le
 8016738:	9e06      	ldrle	r6, [sp, #24]
 801673a:	fb0e f606 	mulle.w	r6, lr, r6
 801673e:	9606      	strle	r6, [sp, #24]
 8016740:	e7f6      	b.n	8016730 <_strtod_l+0x258>
 8016742:	290f      	cmp	r1, #15
 8016744:	bfdf      	itttt	le
 8016746:	9806      	ldrle	r0, [sp, #24]
 8016748:	210a      	movle	r1, #10
 801674a:	fb01 2200 	mlale	r2, r1, r0, r2
 801674e:	9206      	strle	r2, [sp, #24]
 8016750:	e7e0      	b.n	8016714 <_strtod_l+0x23c>
 8016752:	2700      	movs	r7, #0
 8016754:	2101      	movs	r1, #1
 8016756:	e77d      	b.n	8016654 <_strtod_l+0x17c>
 8016758:	f04f 0e00 	mov.w	lr, #0
 801675c:	f108 0202 	add.w	r2, r8, #2
 8016760:	9211      	str	r2, [sp, #68]	@ 0x44
 8016762:	f898 2002 	ldrb.w	r2, [r8, #2]
 8016766:	e786      	b.n	8016676 <_strtod_l+0x19e>
 8016768:	f04f 0e01 	mov.w	lr, #1
 801676c:	e7f6      	b.n	801675c <_strtod_l+0x284>
 801676e:	bf00      	nop
 8016770:	08018bac 	.word	0x08018bac
 8016774:	080189e3 	.word	0x080189e3
 8016778:	7ff00000 	.word	0x7ff00000
 801677c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801677e:	1c54      	adds	r4, r2, #1
 8016780:	9411      	str	r4, [sp, #68]	@ 0x44
 8016782:	7852      	ldrb	r2, [r2, #1]
 8016784:	2a30      	cmp	r2, #48	@ 0x30
 8016786:	d0f9      	beq.n	801677c <_strtod_l+0x2a4>
 8016788:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 801678c:	2c08      	cmp	r4, #8
 801678e:	f63f af79 	bhi.w	8016684 <_strtod_l+0x1ac>
 8016792:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8016796:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8016798:	9209      	str	r2, [sp, #36]	@ 0x24
 801679a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801679c:	1c54      	adds	r4, r2, #1
 801679e:	9411      	str	r4, [sp, #68]	@ 0x44
 80167a0:	7852      	ldrb	r2, [r2, #1]
 80167a2:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 80167a6:	2e09      	cmp	r6, #9
 80167a8:	d937      	bls.n	801681a <_strtod_l+0x342>
 80167aa:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80167ac:	1ba4      	subs	r4, r4, r6
 80167ae:	2c08      	cmp	r4, #8
 80167b0:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 80167b4:	dc02      	bgt.n	80167bc <_strtod_l+0x2e4>
 80167b6:	4564      	cmp	r4, ip
 80167b8:	bfa8      	it	ge
 80167ba:	4664      	movge	r4, ip
 80167bc:	f1be 0f00 	cmp.w	lr, #0
 80167c0:	d000      	beq.n	80167c4 <_strtod_l+0x2ec>
 80167c2:	4264      	negs	r4, r4
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	d14d      	bne.n	8016864 <_strtod_l+0x38c>
 80167c8:	9b07      	ldr	r3, [sp, #28]
 80167ca:	4318      	orrs	r0, r3
 80167cc:	f47f aebf 	bne.w	801654e <_strtod_l+0x76>
 80167d0:	2900      	cmp	r1, #0
 80167d2:	f47f aed8 	bne.w	8016586 <_strtod_l+0xae>
 80167d6:	2a69      	cmp	r2, #105	@ 0x69
 80167d8:	d027      	beq.n	801682a <_strtod_l+0x352>
 80167da:	dc24      	bgt.n	8016826 <_strtod_l+0x34e>
 80167dc:	2a49      	cmp	r2, #73	@ 0x49
 80167de:	d024      	beq.n	801682a <_strtod_l+0x352>
 80167e0:	2a4e      	cmp	r2, #78	@ 0x4e
 80167e2:	f47f aed0 	bne.w	8016586 <_strtod_l+0xae>
 80167e6:	4997      	ldr	r1, [pc, #604]	@ (8016a44 <_strtod_l+0x56c>)
 80167e8:	a811      	add	r0, sp, #68	@ 0x44
 80167ea:	f001 fa19 	bl	8017c20 <__match>
 80167ee:	2800      	cmp	r0, #0
 80167f0:	f43f aec9 	beq.w	8016586 <_strtod_l+0xae>
 80167f4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80167f6:	781b      	ldrb	r3, [r3, #0]
 80167f8:	2b28      	cmp	r3, #40	@ 0x28
 80167fa:	d12d      	bne.n	8016858 <_strtod_l+0x380>
 80167fc:	4992      	ldr	r1, [pc, #584]	@ (8016a48 <_strtod_l+0x570>)
 80167fe:	aa14      	add	r2, sp, #80	@ 0x50
 8016800:	a811      	add	r0, sp, #68	@ 0x44
 8016802:	f001 fa21 	bl	8017c48 <__hexnan>
 8016806:	2805      	cmp	r0, #5
 8016808:	d126      	bne.n	8016858 <_strtod_l+0x380>
 801680a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801680c:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8016810:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8016814:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8016818:	e699      	b.n	801654e <_strtod_l+0x76>
 801681a:	240a      	movs	r4, #10
 801681c:	fb04 2c0c 	mla	ip, r4, ip, r2
 8016820:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8016824:	e7b9      	b.n	801679a <_strtod_l+0x2c2>
 8016826:	2a6e      	cmp	r2, #110	@ 0x6e
 8016828:	e7db      	b.n	80167e2 <_strtod_l+0x30a>
 801682a:	4988      	ldr	r1, [pc, #544]	@ (8016a4c <_strtod_l+0x574>)
 801682c:	a811      	add	r0, sp, #68	@ 0x44
 801682e:	f001 f9f7 	bl	8017c20 <__match>
 8016832:	2800      	cmp	r0, #0
 8016834:	f43f aea7 	beq.w	8016586 <_strtod_l+0xae>
 8016838:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801683a:	4985      	ldr	r1, [pc, #532]	@ (8016a50 <_strtod_l+0x578>)
 801683c:	3b01      	subs	r3, #1
 801683e:	a811      	add	r0, sp, #68	@ 0x44
 8016840:	9311      	str	r3, [sp, #68]	@ 0x44
 8016842:	f001 f9ed 	bl	8017c20 <__match>
 8016846:	b910      	cbnz	r0, 801684e <_strtod_l+0x376>
 8016848:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801684a:	3301      	adds	r3, #1
 801684c:	9311      	str	r3, [sp, #68]	@ 0x44
 801684e:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8016a64 <_strtod_l+0x58c>
 8016852:	f04f 0a00 	mov.w	sl, #0
 8016856:	e67a      	b.n	801654e <_strtod_l+0x76>
 8016858:	487e      	ldr	r0, [pc, #504]	@ (8016a54 <_strtod_l+0x57c>)
 801685a:	f000 ff1d 	bl	8017698 <nan>
 801685e:	ec5b ab10 	vmov	sl, fp, d0
 8016862:	e674      	b.n	801654e <_strtod_l+0x76>
 8016864:	ee07 9a90 	vmov	s15, r9
 8016868:	1be2      	subs	r2, r4, r7
 801686a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801686e:	2d00      	cmp	r5, #0
 8016870:	bf08      	it	eq
 8016872:	461d      	moveq	r5, r3
 8016874:	2b10      	cmp	r3, #16
 8016876:	9209      	str	r2, [sp, #36]	@ 0x24
 8016878:	461a      	mov	r2, r3
 801687a:	bfa8      	it	ge
 801687c:	2210      	movge	r2, #16
 801687e:	2b09      	cmp	r3, #9
 8016880:	ec5b ab17 	vmov	sl, fp, d7
 8016884:	dc15      	bgt.n	80168b2 <_strtod_l+0x3da>
 8016886:	1be1      	subs	r1, r4, r7
 8016888:	2900      	cmp	r1, #0
 801688a:	f43f ae60 	beq.w	801654e <_strtod_l+0x76>
 801688e:	eba4 0107 	sub.w	r1, r4, r7
 8016892:	dd72      	ble.n	801697a <_strtod_l+0x4a2>
 8016894:	2916      	cmp	r1, #22
 8016896:	dc59      	bgt.n	801694c <_strtod_l+0x474>
 8016898:	4b6f      	ldr	r3, [pc, #444]	@ (8016a58 <_strtod_l+0x580>)
 801689a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801689c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80168a0:	ed93 7b00 	vldr	d7, [r3]
 80168a4:	ec4b ab16 	vmov	d6, sl, fp
 80168a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80168ac:	ec5b ab17 	vmov	sl, fp, d7
 80168b0:	e64d      	b.n	801654e <_strtod_l+0x76>
 80168b2:	4969      	ldr	r1, [pc, #420]	@ (8016a58 <_strtod_l+0x580>)
 80168b4:	eddd 6a06 	vldr	s13, [sp, #24]
 80168b8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80168bc:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 80168c0:	2b0f      	cmp	r3, #15
 80168c2:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80168c6:	eea7 6b05 	vfma.f64	d6, d7, d5
 80168ca:	ec5b ab16 	vmov	sl, fp, d6
 80168ce:	ddda      	ble.n	8016886 <_strtod_l+0x3ae>
 80168d0:	1a9a      	subs	r2, r3, r2
 80168d2:	1be1      	subs	r1, r4, r7
 80168d4:	440a      	add	r2, r1
 80168d6:	2a00      	cmp	r2, #0
 80168d8:	f340 8094 	ble.w	8016a04 <_strtod_l+0x52c>
 80168dc:	f012 000f 	ands.w	r0, r2, #15
 80168e0:	d00a      	beq.n	80168f8 <_strtod_l+0x420>
 80168e2:	495d      	ldr	r1, [pc, #372]	@ (8016a58 <_strtod_l+0x580>)
 80168e4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80168e8:	ed91 7b00 	vldr	d7, [r1]
 80168ec:	ec4b ab16 	vmov	d6, sl, fp
 80168f0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80168f4:	ec5b ab17 	vmov	sl, fp, d7
 80168f8:	f032 020f 	bics.w	r2, r2, #15
 80168fc:	d073      	beq.n	80169e6 <_strtod_l+0x50e>
 80168fe:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8016902:	dd47      	ble.n	8016994 <_strtod_l+0x4bc>
 8016904:	2400      	movs	r4, #0
 8016906:	4625      	mov	r5, r4
 8016908:	9407      	str	r4, [sp, #28]
 801690a:	4626      	mov	r6, r4
 801690c:	9a05      	ldr	r2, [sp, #20]
 801690e:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8016a64 <_strtod_l+0x58c>
 8016912:	2322      	movs	r3, #34	@ 0x22
 8016914:	6013      	str	r3, [r2, #0]
 8016916:	f04f 0a00 	mov.w	sl, #0
 801691a:	9b07      	ldr	r3, [sp, #28]
 801691c:	2b00      	cmp	r3, #0
 801691e:	f43f ae16 	beq.w	801654e <_strtod_l+0x76>
 8016922:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016924:	9805      	ldr	r0, [sp, #20]
 8016926:	f7ff f955 	bl	8015bd4 <_Bfree>
 801692a:	9805      	ldr	r0, [sp, #20]
 801692c:	4631      	mov	r1, r6
 801692e:	f7ff f951 	bl	8015bd4 <_Bfree>
 8016932:	9805      	ldr	r0, [sp, #20]
 8016934:	4629      	mov	r1, r5
 8016936:	f7ff f94d 	bl	8015bd4 <_Bfree>
 801693a:	9907      	ldr	r1, [sp, #28]
 801693c:	9805      	ldr	r0, [sp, #20]
 801693e:	f7ff f949 	bl	8015bd4 <_Bfree>
 8016942:	9805      	ldr	r0, [sp, #20]
 8016944:	4621      	mov	r1, r4
 8016946:	f7ff f945 	bl	8015bd4 <_Bfree>
 801694a:	e600      	b.n	801654e <_strtod_l+0x76>
 801694c:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8016950:	1be0      	subs	r0, r4, r7
 8016952:	4281      	cmp	r1, r0
 8016954:	dbbc      	blt.n	80168d0 <_strtod_l+0x3f8>
 8016956:	4a40      	ldr	r2, [pc, #256]	@ (8016a58 <_strtod_l+0x580>)
 8016958:	f1c3 030f 	rsb	r3, r3, #15
 801695c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8016960:	ed91 7b00 	vldr	d7, [r1]
 8016964:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016966:	ec4b ab16 	vmov	d6, sl, fp
 801696a:	1acb      	subs	r3, r1, r3
 801696c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8016970:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016974:	ed92 6b00 	vldr	d6, [r2]
 8016978:	e796      	b.n	80168a8 <_strtod_l+0x3d0>
 801697a:	3116      	adds	r1, #22
 801697c:	dba8      	blt.n	80168d0 <_strtod_l+0x3f8>
 801697e:	4b36      	ldr	r3, [pc, #216]	@ (8016a58 <_strtod_l+0x580>)
 8016980:	1b3c      	subs	r4, r7, r4
 8016982:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8016986:	ed94 7b00 	vldr	d7, [r4]
 801698a:	ec4b ab16 	vmov	d6, sl, fp
 801698e:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8016992:	e78b      	b.n	80168ac <_strtod_l+0x3d4>
 8016994:	2000      	movs	r0, #0
 8016996:	ec4b ab17 	vmov	d7, sl, fp
 801699a:	4e30      	ldr	r6, [pc, #192]	@ (8016a5c <_strtod_l+0x584>)
 801699c:	1112      	asrs	r2, r2, #4
 801699e:	4601      	mov	r1, r0
 80169a0:	2a01      	cmp	r2, #1
 80169a2:	dc23      	bgt.n	80169ec <_strtod_l+0x514>
 80169a4:	b108      	cbz	r0, 80169aa <_strtod_l+0x4d2>
 80169a6:	ec5b ab17 	vmov	sl, fp, d7
 80169aa:	4a2c      	ldr	r2, [pc, #176]	@ (8016a5c <_strtod_l+0x584>)
 80169ac:	482c      	ldr	r0, [pc, #176]	@ (8016a60 <_strtod_l+0x588>)
 80169ae:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80169b2:	ed92 7b00 	vldr	d7, [r2]
 80169b6:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80169ba:	ec4b ab16 	vmov	d6, sl, fp
 80169be:	4a29      	ldr	r2, [pc, #164]	@ (8016a64 <_strtod_l+0x58c>)
 80169c0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80169c4:	ee17 1a90 	vmov	r1, s15
 80169c8:	400a      	ands	r2, r1
 80169ca:	4282      	cmp	r2, r0
 80169cc:	ec5b ab17 	vmov	sl, fp, d7
 80169d0:	d898      	bhi.n	8016904 <_strtod_l+0x42c>
 80169d2:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 80169d6:	4282      	cmp	r2, r0
 80169d8:	bf86      	itte	hi
 80169da:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8016a68 <_strtod_l+0x590>
 80169de:	f04f 3aff 	movhi.w	sl, #4294967295
 80169e2:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 80169e6:	2200      	movs	r2, #0
 80169e8:	9206      	str	r2, [sp, #24]
 80169ea:	e076      	b.n	8016ada <_strtod_l+0x602>
 80169ec:	f012 0f01 	tst.w	r2, #1
 80169f0:	d004      	beq.n	80169fc <_strtod_l+0x524>
 80169f2:	ed96 6b00 	vldr	d6, [r6]
 80169f6:	2001      	movs	r0, #1
 80169f8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80169fc:	3101      	adds	r1, #1
 80169fe:	1052      	asrs	r2, r2, #1
 8016a00:	3608      	adds	r6, #8
 8016a02:	e7cd      	b.n	80169a0 <_strtod_l+0x4c8>
 8016a04:	d0ef      	beq.n	80169e6 <_strtod_l+0x50e>
 8016a06:	4252      	negs	r2, r2
 8016a08:	f012 000f 	ands.w	r0, r2, #15
 8016a0c:	d00a      	beq.n	8016a24 <_strtod_l+0x54c>
 8016a0e:	4912      	ldr	r1, [pc, #72]	@ (8016a58 <_strtod_l+0x580>)
 8016a10:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8016a14:	ed91 7b00 	vldr	d7, [r1]
 8016a18:	ec4b ab16 	vmov	d6, sl, fp
 8016a1c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8016a20:	ec5b ab17 	vmov	sl, fp, d7
 8016a24:	1112      	asrs	r2, r2, #4
 8016a26:	d0de      	beq.n	80169e6 <_strtod_l+0x50e>
 8016a28:	2a1f      	cmp	r2, #31
 8016a2a:	dd1f      	ble.n	8016a6c <_strtod_l+0x594>
 8016a2c:	2400      	movs	r4, #0
 8016a2e:	4625      	mov	r5, r4
 8016a30:	9407      	str	r4, [sp, #28]
 8016a32:	4626      	mov	r6, r4
 8016a34:	9a05      	ldr	r2, [sp, #20]
 8016a36:	2322      	movs	r3, #34	@ 0x22
 8016a38:	f04f 0a00 	mov.w	sl, #0
 8016a3c:	f04f 0b00 	mov.w	fp, #0
 8016a40:	6013      	str	r3, [r2, #0]
 8016a42:	e76a      	b.n	801691a <_strtod_l+0x442>
 8016a44:	080188d1 	.word	0x080188d1
 8016a48:	08018b98 	.word	0x08018b98
 8016a4c:	080188c9 	.word	0x080188c9
 8016a50:	08018900 	.word	0x08018900
 8016a54:	08018a39 	.word	0x08018a39
 8016a58:	08018ad0 	.word	0x08018ad0
 8016a5c:	08018aa8 	.word	0x08018aa8
 8016a60:	7ca00000 	.word	0x7ca00000
 8016a64:	7ff00000 	.word	0x7ff00000
 8016a68:	7fefffff 	.word	0x7fefffff
 8016a6c:	f012 0110 	ands.w	r1, r2, #16
 8016a70:	bf18      	it	ne
 8016a72:	216a      	movne	r1, #106	@ 0x6a
 8016a74:	9106      	str	r1, [sp, #24]
 8016a76:	ec4b ab17 	vmov	d7, sl, fp
 8016a7a:	49af      	ldr	r1, [pc, #700]	@ (8016d38 <_strtod_l+0x860>)
 8016a7c:	2000      	movs	r0, #0
 8016a7e:	07d6      	lsls	r6, r2, #31
 8016a80:	d504      	bpl.n	8016a8c <_strtod_l+0x5b4>
 8016a82:	ed91 6b00 	vldr	d6, [r1]
 8016a86:	2001      	movs	r0, #1
 8016a88:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016a8c:	1052      	asrs	r2, r2, #1
 8016a8e:	f101 0108 	add.w	r1, r1, #8
 8016a92:	d1f4      	bne.n	8016a7e <_strtod_l+0x5a6>
 8016a94:	b108      	cbz	r0, 8016a9a <_strtod_l+0x5c2>
 8016a96:	ec5b ab17 	vmov	sl, fp, d7
 8016a9a:	9a06      	ldr	r2, [sp, #24]
 8016a9c:	b1b2      	cbz	r2, 8016acc <_strtod_l+0x5f4>
 8016a9e:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8016aa2:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8016aa6:	2a00      	cmp	r2, #0
 8016aa8:	4658      	mov	r0, fp
 8016aaa:	dd0f      	ble.n	8016acc <_strtod_l+0x5f4>
 8016aac:	2a1f      	cmp	r2, #31
 8016aae:	dd55      	ble.n	8016b5c <_strtod_l+0x684>
 8016ab0:	2a34      	cmp	r2, #52	@ 0x34
 8016ab2:	bfde      	ittt	le
 8016ab4:	f04f 32ff 	movle.w	r2, #4294967295
 8016ab8:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8016abc:	408a      	lslle	r2, r1
 8016abe:	f04f 0a00 	mov.w	sl, #0
 8016ac2:	bfcc      	ite	gt
 8016ac4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8016ac8:	ea02 0b00 	andle.w	fp, r2, r0
 8016acc:	ec4b ab17 	vmov	d7, sl, fp
 8016ad0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8016ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ad8:	d0a8      	beq.n	8016a2c <_strtod_l+0x554>
 8016ada:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016adc:	9805      	ldr	r0, [sp, #20]
 8016ade:	f8cd 9000 	str.w	r9, [sp]
 8016ae2:	462a      	mov	r2, r5
 8016ae4:	f7ff f8de 	bl	8015ca4 <__s2b>
 8016ae8:	9007      	str	r0, [sp, #28]
 8016aea:	2800      	cmp	r0, #0
 8016aec:	f43f af0a 	beq.w	8016904 <_strtod_l+0x42c>
 8016af0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016af2:	1b3f      	subs	r7, r7, r4
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	bfb4      	ite	lt
 8016af8:	463b      	movlt	r3, r7
 8016afa:	2300      	movge	r3, #0
 8016afc:	930a      	str	r3, [sp, #40]	@ 0x28
 8016afe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016b00:	ed9f bb89 	vldr	d11, [pc, #548]	@ 8016d28 <_strtod_l+0x850>
 8016b04:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016b08:	2400      	movs	r4, #0
 8016b0a:	930d      	str	r3, [sp, #52]	@ 0x34
 8016b0c:	4625      	mov	r5, r4
 8016b0e:	9b07      	ldr	r3, [sp, #28]
 8016b10:	9805      	ldr	r0, [sp, #20]
 8016b12:	6859      	ldr	r1, [r3, #4]
 8016b14:	f7ff f81e 	bl	8015b54 <_Balloc>
 8016b18:	4606      	mov	r6, r0
 8016b1a:	2800      	cmp	r0, #0
 8016b1c:	f43f aef6 	beq.w	801690c <_strtod_l+0x434>
 8016b20:	9b07      	ldr	r3, [sp, #28]
 8016b22:	691a      	ldr	r2, [r3, #16]
 8016b24:	ec4b ab19 	vmov	d9, sl, fp
 8016b28:	3202      	adds	r2, #2
 8016b2a:	f103 010c 	add.w	r1, r3, #12
 8016b2e:	0092      	lsls	r2, r2, #2
 8016b30:	300c      	adds	r0, #12
 8016b32:	f7fe f912 	bl	8014d5a <memcpy>
 8016b36:	eeb0 0b49 	vmov.f64	d0, d9
 8016b3a:	9805      	ldr	r0, [sp, #20]
 8016b3c:	aa14      	add	r2, sp, #80	@ 0x50
 8016b3e:	a913      	add	r1, sp, #76	@ 0x4c
 8016b40:	f7ff fbe4 	bl	801630c <__d2b>
 8016b44:	9012      	str	r0, [sp, #72]	@ 0x48
 8016b46:	2800      	cmp	r0, #0
 8016b48:	f43f aee0 	beq.w	801690c <_strtod_l+0x434>
 8016b4c:	9805      	ldr	r0, [sp, #20]
 8016b4e:	2101      	movs	r1, #1
 8016b50:	f7ff f93e 	bl	8015dd0 <__i2b>
 8016b54:	4605      	mov	r5, r0
 8016b56:	b940      	cbnz	r0, 8016b6a <_strtod_l+0x692>
 8016b58:	2500      	movs	r5, #0
 8016b5a:	e6d7      	b.n	801690c <_strtod_l+0x434>
 8016b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8016b60:	fa01 f202 	lsl.w	r2, r1, r2
 8016b64:	ea02 0a0a 	and.w	sl, r2, sl
 8016b68:	e7b0      	b.n	8016acc <_strtod_l+0x5f4>
 8016b6a:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8016b6c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8016b6e:	2f00      	cmp	r7, #0
 8016b70:	bfab      	itete	ge
 8016b72:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8016b74:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8016b76:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8016b7a:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8016b7e:	bfac      	ite	ge
 8016b80:	eb07 0903 	addge.w	r9, r7, r3
 8016b84:	eba3 0807 	sublt.w	r8, r3, r7
 8016b88:	9b06      	ldr	r3, [sp, #24]
 8016b8a:	1aff      	subs	r7, r7, r3
 8016b8c:	4417      	add	r7, r2
 8016b8e:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8016b92:	4a6a      	ldr	r2, [pc, #424]	@ (8016d3c <_strtod_l+0x864>)
 8016b94:	3f01      	subs	r7, #1
 8016b96:	4297      	cmp	r7, r2
 8016b98:	da51      	bge.n	8016c3e <_strtod_l+0x766>
 8016b9a:	1bd1      	subs	r1, r2, r7
 8016b9c:	291f      	cmp	r1, #31
 8016b9e:	eba3 0301 	sub.w	r3, r3, r1
 8016ba2:	f04f 0201 	mov.w	r2, #1
 8016ba6:	dc3e      	bgt.n	8016c26 <_strtod_l+0x74e>
 8016ba8:	408a      	lsls	r2, r1
 8016baa:	920c      	str	r2, [sp, #48]	@ 0x30
 8016bac:	2200      	movs	r2, #0
 8016bae:	920b      	str	r2, [sp, #44]	@ 0x2c
 8016bb0:	eb09 0703 	add.w	r7, r9, r3
 8016bb4:	4498      	add	r8, r3
 8016bb6:	9b06      	ldr	r3, [sp, #24]
 8016bb8:	45b9      	cmp	r9, r7
 8016bba:	4498      	add	r8, r3
 8016bbc:	464b      	mov	r3, r9
 8016bbe:	bfa8      	it	ge
 8016bc0:	463b      	movge	r3, r7
 8016bc2:	4543      	cmp	r3, r8
 8016bc4:	bfa8      	it	ge
 8016bc6:	4643      	movge	r3, r8
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	bfc2      	ittt	gt
 8016bcc:	1aff      	subgt	r7, r7, r3
 8016bce:	eba8 0803 	subgt.w	r8, r8, r3
 8016bd2:	eba9 0903 	subgt.w	r9, r9, r3
 8016bd6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	dd16      	ble.n	8016c0a <_strtod_l+0x732>
 8016bdc:	4629      	mov	r1, r5
 8016bde:	9805      	ldr	r0, [sp, #20]
 8016be0:	461a      	mov	r2, r3
 8016be2:	f7ff f9ad 	bl	8015f40 <__pow5mult>
 8016be6:	4605      	mov	r5, r0
 8016be8:	2800      	cmp	r0, #0
 8016bea:	d0b5      	beq.n	8016b58 <_strtod_l+0x680>
 8016bec:	4601      	mov	r1, r0
 8016bee:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016bf0:	9805      	ldr	r0, [sp, #20]
 8016bf2:	f7ff f903 	bl	8015dfc <__multiply>
 8016bf6:	900f      	str	r0, [sp, #60]	@ 0x3c
 8016bf8:	2800      	cmp	r0, #0
 8016bfa:	f43f ae87 	beq.w	801690c <_strtod_l+0x434>
 8016bfe:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016c00:	9805      	ldr	r0, [sp, #20]
 8016c02:	f7fe ffe7 	bl	8015bd4 <_Bfree>
 8016c06:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016c08:	9312      	str	r3, [sp, #72]	@ 0x48
 8016c0a:	2f00      	cmp	r7, #0
 8016c0c:	dc1b      	bgt.n	8016c46 <_strtod_l+0x76e>
 8016c0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016c10:	2b00      	cmp	r3, #0
 8016c12:	dd21      	ble.n	8016c58 <_strtod_l+0x780>
 8016c14:	4631      	mov	r1, r6
 8016c16:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016c18:	9805      	ldr	r0, [sp, #20]
 8016c1a:	f7ff f991 	bl	8015f40 <__pow5mult>
 8016c1e:	4606      	mov	r6, r0
 8016c20:	b9d0      	cbnz	r0, 8016c58 <_strtod_l+0x780>
 8016c22:	2600      	movs	r6, #0
 8016c24:	e672      	b.n	801690c <_strtod_l+0x434>
 8016c26:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8016c2a:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8016c2e:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8016c32:	37e2      	adds	r7, #226	@ 0xe2
 8016c34:	fa02 f107 	lsl.w	r1, r2, r7
 8016c38:	910b      	str	r1, [sp, #44]	@ 0x2c
 8016c3a:	920c      	str	r2, [sp, #48]	@ 0x30
 8016c3c:	e7b8      	b.n	8016bb0 <_strtod_l+0x6d8>
 8016c3e:	2200      	movs	r2, #0
 8016c40:	920b      	str	r2, [sp, #44]	@ 0x2c
 8016c42:	2201      	movs	r2, #1
 8016c44:	e7f9      	b.n	8016c3a <_strtod_l+0x762>
 8016c46:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016c48:	9805      	ldr	r0, [sp, #20]
 8016c4a:	463a      	mov	r2, r7
 8016c4c:	f7ff f9d2 	bl	8015ff4 <__lshift>
 8016c50:	9012      	str	r0, [sp, #72]	@ 0x48
 8016c52:	2800      	cmp	r0, #0
 8016c54:	d1db      	bne.n	8016c0e <_strtod_l+0x736>
 8016c56:	e659      	b.n	801690c <_strtod_l+0x434>
 8016c58:	f1b8 0f00 	cmp.w	r8, #0
 8016c5c:	dd07      	ble.n	8016c6e <_strtod_l+0x796>
 8016c5e:	4631      	mov	r1, r6
 8016c60:	9805      	ldr	r0, [sp, #20]
 8016c62:	4642      	mov	r2, r8
 8016c64:	f7ff f9c6 	bl	8015ff4 <__lshift>
 8016c68:	4606      	mov	r6, r0
 8016c6a:	2800      	cmp	r0, #0
 8016c6c:	d0d9      	beq.n	8016c22 <_strtod_l+0x74a>
 8016c6e:	f1b9 0f00 	cmp.w	r9, #0
 8016c72:	dd08      	ble.n	8016c86 <_strtod_l+0x7ae>
 8016c74:	4629      	mov	r1, r5
 8016c76:	9805      	ldr	r0, [sp, #20]
 8016c78:	464a      	mov	r2, r9
 8016c7a:	f7ff f9bb 	bl	8015ff4 <__lshift>
 8016c7e:	4605      	mov	r5, r0
 8016c80:	2800      	cmp	r0, #0
 8016c82:	f43f ae43 	beq.w	801690c <_strtod_l+0x434>
 8016c86:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016c88:	9805      	ldr	r0, [sp, #20]
 8016c8a:	4632      	mov	r2, r6
 8016c8c:	f7ff fa3a 	bl	8016104 <__mdiff>
 8016c90:	4604      	mov	r4, r0
 8016c92:	2800      	cmp	r0, #0
 8016c94:	f43f ae3a 	beq.w	801690c <_strtod_l+0x434>
 8016c98:	2300      	movs	r3, #0
 8016c9a:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8016c9e:	60c3      	str	r3, [r0, #12]
 8016ca0:	4629      	mov	r1, r5
 8016ca2:	f7ff fa13 	bl	80160cc <__mcmp>
 8016ca6:	2800      	cmp	r0, #0
 8016ca8:	da4c      	bge.n	8016d44 <_strtod_l+0x86c>
 8016caa:	ea58 080a 	orrs.w	r8, r8, sl
 8016cae:	d172      	bne.n	8016d96 <_strtod_l+0x8be>
 8016cb0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016cb4:	2b00      	cmp	r3, #0
 8016cb6:	d16e      	bne.n	8016d96 <_strtod_l+0x8be>
 8016cb8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016cbc:	0d1b      	lsrs	r3, r3, #20
 8016cbe:	051b      	lsls	r3, r3, #20
 8016cc0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8016cc4:	d967      	bls.n	8016d96 <_strtod_l+0x8be>
 8016cc6:	6963      	ldr	r3, [r4, #20]
 8016cc8:	b913      	cbnz	r3, 8016cd0 <_strtod_l+0x7f8>
 8016cca:	6923      	ldr	r3, [r4, #16]
 8016ccc:	2b01      	cmp	r3, #1
 8016cce:	dd62      	ble.n	8016d96 <_strtod_l+0x8be>
 8016cd0:	4621      	mov	r1, r4
 8016cd2:	2201      	movs	r2, #1
 8016cd4:	9805      	ldr	r0, [sp, #20]
 8016cd6:	f7ff f98d 	bl	8015ff4 <__lshift>
 8016cda:	4629      	mov	r1, r5
 8016cdc:	4604      	mov	r4, r0
 8016cde:	f7ff f9f5 	bl	80160cc <__mcmp>
 8016ce2:	2800      	cmp	r0, #0
 8016ce4:	dd57      	ble.n	8016d96 <_strtod_l+0x8be>
 8016ce6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016cea:	9a06      	ldr	r2, [sp, #24]
 8016cec:	0d1b      	lsrs	r3, r3, #20
 8016cee:	051b      	lsls	r3, r3, #20
 8016cf0:	2a00      	cmp	r2, #0
 8016cf2:	d06e      	beq.n	8016dd2 <_strtod_l+0x8fa>
 8016cf4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8016cf8:	d86b      	bhi.n	8016dd2 <_strtod_l+0x8fa>
 8016cfa:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8016cfe:	f67f ae99 	bls.w	8016a34 <_strtod_l+0x55c>
 8016d02:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 8016d30 <_strtod_l+0x858>
 8016d06:	ec4b ab16 	vmov	d6, sl, fp
 8016d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8016d40 <_strtod_l+0x868>)
 8016d0c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8016d10:	ee17 2a90 	vmov	r2, s15
 8016d14:	4013      	ands	r3, r2
 8016d16:	ec5b ab17 	vmov	sl, fp, d7
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	f47f ae01 	bne.w	8016922 <_strtod_l+0x44a>
 8016d20:	9a05      	ldr	r2, [sp, #20]
 8016d22:	2322      	movs	r3, #34	@ 0x22
 8016d24:	6013      	str	r3, [r2, #0]
 8016d26:	e5fc      	b.n	8016922 <_strtod_l+0x44a>
 8016d28:	ffc00000 	.word	0xffc00000
 8016d2c:	41dfffff 	.word	0x41dfffff
 8016d30:	00000000 	.word	0x00000000
 8016d34:	39500000 	.word	0x39500000
 8016d38:	08018bc0 	.word	0x08018bc0
 8016d3c:	fffffc02 	.word	0xfffffc02
 8016d40:	7ff00000 	.word	0x7ff00000
 8016d44:	46d9      	mov	r9, fp
 8016d46:	d15d      	bne.n	8016e04 <_strtod_l+0x92c>
 8016d48:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016d4c:	f1b8 0f00 	cmp.w	r8, #0
 8016d50:	d02a      	beq.n	8016da8 <_strtod_l+0x8d0>
 8016d52:	4aa9      	ldr	r2, [pc, #676]	@ (8016ff8 <_strtod_l+0xb20>)
 8016d54:	4293      	cmp	r3, r2
 8016d56:	d12a      	bne.n	8016dae <_strtod_l+0x8d6>
 8016d58:	9b06      	ldr	r3, [sp, #24]
 8016d5a:	4652      	mov	r2, sl
 8016d5c:	b1fb      	cbz	r3, 8016d9e <_strtod_l+0x8c6>
 8016d5e:	4ba7      	ldr	r3, [pc, #668]	@ (8016ffc <_strtod_l+0xb24>)
 8016d60:	ea0b 0303 	and.w	r3, fp, r3
 8016d64:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8016d68:	f04f 31ff 	mov.w	r1, #4294967295
 8016d6c:	d81a      	bhi.n	8016da4 <_strtod_l+0x8cc>
 8016d6e:	0d1b      	lsrs	r3, r3, #20
 8016d70:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8016d74:	fa01 f303 	lsl.w	r3, r1, r3
 8016d78:	429a      	cmp	r2, r3
 8016d7a:	d118      	bne.n	8016dae <_strtod_l+0x8d6>
 8016d7c:	4ba0      	ldr	r3, [pc, #640]	@ (8017000 <_strtod_l+0xb28>)
 8016d7e:	4599      	cmp	r9, r3
 8016d80:	d102      	bne.n	8016d88 <_strtod_l+0x8b0>
 8016d82:	3201      	adds	r2, #1
 8016d84:	f43f adc2 	beq.w	801690c <_strtod_l+0x434>
 8016d88:	4b9c      	ldr	r3, [pc, #624]	@ (8016ffc <_strtod_l+0xb24>)
 8016d8a:	ea09 0303 	and.w	r3, r9, r3
 8016d8e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8016d92:	f04f 0a00 	mov.w	sl, #0
 8016d96:	9b06      	ldr	r3, [sp, #24]
 8016d98:	2b00      	cmp	r3, #0
 8016d9a:	d1b2      	bne.n	8016d02 <_strtod_l+0x82a>
 8016d9c:	e5c1      	b.n	8016922 <_strtod_l+0x44a>
 8016d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8016da2:	e7e9      	b.n	8016d78 <_strtod_l+0x8a0>
 8016da4:	460b      	mov	r3, r1
 8016da6:	e7e7      	b.n	8016d78 <_strtod_l+0x8a0>
 8016da8:	ea53 030a 	orrs.w	r3, r3, sl
 8016dac:	d09b      	beq.n	8016ce6 <_strtod_l+0x80e>
 8016dae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016db0:	b1c3      	cbz	r3, 8016de4 <_strtod_l+0x90c>
 8016db2:	ea13 0f09 	tst.w	r3, r9
 8016db6:	d0ee      	beq.n	8016d96 <_strtod_l+0x8be>
 8016db8:	9a06      	ldr	r2, [sp, #24]
 8016dba:	4650      	mov	r0, sl
 8016dbc:	4659      	mov	r1, fp
 8016dbe:	f1b8 0f00 	cmp.w	r8, #0
 8016dc2:	d013      	beq.n	8016dec <_strtod_l+0x914>
 8016dc4:	f7ff fb6d 	bl	80164a2 <sulp>
 8016dc8:	ee39 7b00 	vadd.f64	d7, d9, d0
 8016dcc:	ec5b ab17 	vmov	sl, fp, d7
 8016dd0:	e7e1      	b.n	8016d96 <_strtod_l+0x8be>
 8016dd2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8016dd6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016dda:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8016dde:	f04f 3aff 	mov.w	sl, #4294967295
 8016de2:	e7d8      	b.n	8016d96 <_strtod_l+0x8be>
 8016de4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016de6:	ea13 0f0a 	tst.w	r3, sl
 8016dea:	e7e4      	b.n	8016db6 <_strtod_l+0x8de>
 8016dec:	f7ff fb59 	bl	80164a2 <sulp>
 8016df0:	ee39 0b40 	vsub.f64	d0, d9, d0
 8016df4:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8016df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016dfc:	ec5b ab10 	vmov	sl, fp, d0
 8016e00:	d1c9      	bne.n	8016d96 <_strtod_l+0x8be>
 8016e02:	e617      	b.n	8016a34 <_strtod_l+0x55c>
 8016e04:	4629      	mov	r1, r5
 8016e06:	4620      	mov	r0, r4
 8016e08:	f7ff fad8 	bl	80163bc <__ratio>
 8016e0c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8016e10:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8016e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e18:	d85d      	bhi.n	8016ed6 <_strtod_l+0x9fe>
 8016e1a:	f1b8 0f00 	cmp.w	r8, #0
 8016e1e:	d164      	bne.n	8016eea <_strtod_l+0xa12>
 8016e20:	f1ba 0f00 	cmp.w	sl, #0
 8016e24:	d14b      	bne.n	8016ebe <_strtod_l+0x9e6>
 8016e26:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016e2a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8016e2e:	2b00      	cmp	r3, #0
 8016e30:	d160      	bne.n	8016ef4 <_strtod_l+0xa1c>
 8016e32:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8016e36:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8016e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e3e:	d401      	bmi.n	8016e44 <_strtod_l+0x96c>
 8016e40:	ee20 8b08 	vmul.f64	d8, d0, d8
 8016e44:	eeb1 ab48 	vneg.f64	d10, d8
 8016e48:	486c      	ldr	r0, [pc, #432]	@ (8016ffc <_strtod_l+0xb24>)
 8016e4a:	496e      	ldr	r1, [pc, #440]	@ (8017004 <_strtod_l+0xb2c>)
 8016e4c:	ea09 0700 	and.w	r7, r9, r0
 8016e50:	428f      	cmp	r7, r1
 8016e52:	ec53 2b1a 	vmov	r2, r3, d10
 8016e56:	d17d      	bne.n	8016f54 <_strtod_l+0xa7c>
 8016e58:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8016e5c:	ec4b ab1c 	vmov	d12, sl, fp
 8016e60:	eeb0 0b4c 	vmov.f64	d0, d12
 8016e64:	f7ff f9e2 	bl	801622c <__ulp>
 8016e68:	4864      	ldr	r0, [pc, #400]	@ (8016ffc <_strtod_l+0xb24>)
 8016e6a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8016e6e:	ee1c 3a90 	vmov	r3, s25
 8016e72:	4a65      	ldr	r2, [pc, #404]	@ (8017008 <_strtod_l+0xb30>)
 8016e74:	ea03 0100 	and.w	r1, r3, r0
 8016e78:	4291      	cmp	r1, r2
 8016e7a:	ec5b ab1c 	vmov	sl, fp, d12
 8016e7e:	d93c      	bls.n	8016efa <_strtod_l+0xa22>
 8016e80:	ee19 2a90 	vmov	r2, s19
 8016e84:	4b5e      	ldr	r3, [pc, #376]	@ (8017000 <_strtod_l+0xb28>)
 8016e86:	429a      	cmp	r2, r3
 8016e88:	d104      	bne.n	8016e94 <_strtod_l+0x9bc>
 8016e8a:	ee19 3a10 	vmov	r3, s18
 8016e8e:	3301      	adds	r3, #1
 8016e90:	f43f ad3c 	beq.w	801690c <_strtod_l+0x434>
 8016e94:	f8df b168 	ldr.w	fp, [pc, #360]	@ 8017000 <_strtod_l+0xb28>
 8016e98:	f04f 3aff 	mov.w	sl, #4294967295
 8016e9c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016e9e:	9805      	ldr	r0, [sp, #20]
 8016ea0:	f7fe fe98 	bl	8015bd4 <_Bfree>
 8016ea4:	9805      	ldr	r0, [sp, #20]
 8016ea6:	4631      	mov	r1, r6
 8016ea8:	f7fe fe94 	bl	8015bd4 <_Bfree>
 8016eac:	9805      	ldr	r0, [sp, #20]
 8016eae:	4629      	mov	r1, r5
 8016eb0:	f7fe fe90 	bl	8015bd4 <_Bfree>
 8016eb4:	9805      	ldr	r0, [sp, #20]
 8016eb6:	4621      	mov	r1, r4
 8016eb8:	f7fe fe8c 	bl	8015bd4 <_Bfree>
 8016ebc:	e627      	b.n	8016b0e <_strtod_l+0x636>
 8016ebe:	f1ba 0f01 	cmp.w	sl, #1
 8016ec2:	d103      	bne.n	8016ecc <_strtod_l+0x9f4>
 8016ec4:	f1bb 0f00 	cmp.w	fp, #0
 8016ec8:	f43f adb4 	beq.w	8016a34 <_strtod_l+0x55c>
 8016ecc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8016ed0:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8016ed4:	e7b8      	b.n	8016e48 <_strtod_l+0x970>
 8016ed6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8016eda:	ee20 8b08 	vmul.f64	d8, d0, d8
 8016ede:	f1b8 0f00 	cmp.w	r8, #0
 8016ee2:	d0af      	beq.n	8016e44 <_strtod_l+0x96c>
 8016ee4:	eeb0 ab48 	vmov.f64	d10, d8
 8016ee8:	e7ae      	b.n	8016e48 <_strtod_l+0x970>
 8016eea:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8016eee:	eeb0 8b4a 	vmov.f64	d8, d10
 8016ef2:	e7a9      	b.n	8016e48 <_strtod_l+0x970>
 8016ef4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8016ef8:	e7a6      	b.n	8016e48 <_strtod_l+0x970>
 8016efa:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8016efe:	9b06      	ldr	r3, [sp, #24]
 8016f00:	46d9      	mov	r9, fp
 8016f02:	2b00      	cmp	r3, #0
 8016f04:	d1ca      	bne.n	8016e9c <_strtod_l+0x9c4>
 8016f06:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016f0a:	0d1b      	lsrs	r3, r3, #20
 8016f0c:	051b      	lsls	r3, r3, #20
 8016f0e:	429f      	cmp	r7, r3
 8016f10:	d1c4      	bne.n	8016e9c <_strtod_l+0x9c4>
 8016f12:	ec51 0b18 	vmov	r0, r1, d8
 8016f16:	f7e9 fc27 	bl	8000768 <__aeabi_d2lz>
 8016f1a:	f7e9 fbdf 	bl	80006dc <__aeabi_l2d>
 8016f1e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8016f22:	ec41 0b17 	vmov	d7, r0, r1
 8016f26:	ea49 090a 	orr.w	r9, r9, sl
 8016f2a:	ea59 0908 	orrs.w	r9, r9, r8
 8016f2e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8016f32:	d03c      	beq.n	8016fae <_strtod_l+0xad6>
 8016f34:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8016fe0 <_strtod_l+0xb08>
 8016f38:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8016f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f40:	f53f acef 	bmi.w	8016922 <_strtod_l+0x44a>
 8016f44:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 8016fe8 <_strtod_l+0xb10>
 8016f48:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8016f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f50:	dda4      	ble.n	8016e9c <_strtod_l+0x9c4>
 8016f52:	e4e6      	b.n	8016922 <_strtod_l+0x44a>
 8016f54:	9906      	ldr	r1, [sp, #24]
 8016f56:	b1e1      	cbz	r1, 8016f92 <_strtod_l+0xaba>
 8016f58:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8016f5c:	d819      	bhi.n	8016f92 <_strtod_l+0xaba>
 8016f5e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8016f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f66:	d811      	bhi.n	8016f8c <_strtod_l+0xab4>
 8016f68:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8016f6c:	ee18 3a10 	vmov	r3, s16
 8016f70:	2b01      	cmp	r3, #1
 8016f72:	bf38      	it	cc
 8016f74:	2301      	movcc	r3, #1
 8016f76:	ee08 3a10 	vmov	s16, r3
 8016f7a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8016f7e:	f1b8 0f00 	cmp.w	r8, #0
 8016f82:	d111      	bne.n	8016fa8 <_strtod_l+0xad0>
 8016f84:	eeb1 7b48 	vneg.f64	d7, d8
 8016f88:	ec53 2b17 	vmov	r2, r3, d7
 8016f8c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8016f90:	1bcb      	subs	r3, r1, r7
 8016f92:	eeb0 0b49 	vmov.f64	d0, d9
 8016f96:	ec43 2b1a 	vmov	d10, r2, r3
 8016f9a:	f7ff f947 	bl	801622c <__ulp>
 8016f9e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8016fa2:	ec5b ab19 	vmov	sl, fp, d9
 8016fa6:	e7aa      	b.n	8016efe <_strtod_l+0xa26>
 8016fa8:	eeb0 7b48 	vmov.f64	d7, d8
 8016fac:	e7ec      	b.n	8016f88 <_strtod_l+0xab0>
 8016fae:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8016ff0 <_strtod_l+0xb18>
 8016fb2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8016fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fba:	f57f af6f 	bpl.w	8016e9c <_strtod_l+0x9c4>
 8016fbe:	e4b0      	b.n	8016922 <_strtod_l+0x44a>
 8016fc0:	2300      	movs	r3, #0
 8016fc2:	9308      	str	r3, [sp, #32]
 8016fc4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016fc6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016fc8:	6013      	str	r3, [r2, #0]
 8016fca:	f7ff bac4 	b.w	8016556 <_strtod_l+0x7e>
 8016fce:	2a65      	cmp	r2, #101	@ 0x65
 8016fd0:	f43f abbf 	beq.w	8016752 <_strtod_l+0x27a>
 8016fd4:	2a45      	cmp	r2, #69	@ 0x45
 8016fd6:	f43f abbc 	beq.w	8016752 <_strtod_l+0x27a>
 8016fda:	2101      	movs	r1, #1
 8016fdc:	f7ff bbf4 	b.w	80167c8 <_strtod_l+0x2f0>
 8016fe0:	94a03595 	.word	0x94a03595
 8016fe4:	3fdfffff 	.word	0x3fdfffff
 8016fe8:	35afe535 	.word	0x35afe535
 8016fec:	3fe00000 	.word	0x3fe00000
 8016ff0:	94a03595 	.word	0x94a03595
 8016ff4:	3fcfffff 	.word	0x3fcfffff
 8016ff8:	000fffff 	.word	0x000fffff
 8016ffc:	7ff00000 	.word	0x7ff00000
 8017000:	7fefffff 	.word	0x7fefffff
 8017004:	7fe00000 	.word	0x7fe00000
 8017008:	7c9fffff 	.word	0x7c9fffff

0801700c <_strtod_r>:
 801700c:	4b01      	ldr	r3, [pc, #4]	@ (8017014 <_strtod_r+0x8>)
 801700e:	f7ff ba63 	b.w	80164d8 <_strtod_l>
 8017012:	bf00      	nop
 8017014:	2400007c 	.word	0x2400007c

08017018 <_strtol_l.isra.0>:
 8017018:	2b24      	cmp	r3, #36	@ 0x24
 801701a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801701e:	4686      	mov	lr, r0
 8017020:	4690      	mov	r8, r2
 8017022:	d801      	bhi.n	8017028 <_strtol_l.isra.0+0x10>
 8017024:	2b01      	cmp	r3, #1
 8017026:	d106      	bne.n	8017036 <_strtol_l.isra.0+0x1e>
 8017028:	f7fd fe6a 	bl	8014d00 <__errno>
 801702c:	2316      	movs	r3, #22
 801702e:	6003      	str	r3, [r0, #0]
 8017030:	2000      	movs	r0, #0
 8017032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017036:	4834      	ldr	r0, [pc, #208]	@ (8017108 <_strtol_l.isra.0+0xf0>)
 8017038:	460d      	mov	r5, r1
 801703a:	462a      	mov	r2, r5
 801703c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017040:	5d06      	ldrb	r6, [r0, r4]
 8017042:	f016 0608 	ands.w	r6, r6, #8
 8017046:	d1f8      	bne.n	801703a <_strtol_l.isra.0+0x22>
 8017048:	2c2d      	cmp	r4, #45	@ 0x2d
 801704a:	d110      	bne.n	801706e <_strtol_l.isra.0+0x56>
 801704c:	782c      	ldrb	r4, [r5, #0]
 801704e:	2601      	movs	r6, #1
 8017050:	1c95      	adds	r5, r2, #2
 8017052:	f033 0210 	bics.w	r2, r3, #16
 8017056:	d115      	bne.n	8017084 <_strtol_l.isra.0+0x6c>
 8017058:	2c30      	cmp	r4, #48	@ 0x30
 801705a:	d10d      	bne.n	8017078 <_strtol_l.isra.0+0x60>
 801705c:	782a      	ldrb	r2, [r5, #0]
 801705e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8017062:	2a58      	cmp	r2, #88	@ 0x58
 8017064:	d108      	bne.n	8017078 <_strtol_l.isra.0+0x60>
 8017066:	786c      	ldrb	r4, [r5, #1]
 8017068:	3502      	adds	r5, #2
 801706a:	2310      	movs	r3, #16
 801706c:	e00a      	b.n	8017084 <_strtol_l.isra.0+0x6c>
 801706e:	2c2b      	cmp	r4, #43	@ 0x2b
 8017070:	bf04      	itt	eq
 8017072:	782c      	ldrbeq	r4, [r5, #0]
 8017074:	1c95      	addeq	r5, r2, #2
 8017076:	e7ec      	b.n	8017052 <_strtol_l.isra.0+0x3a>
 8017078:	2b00      	cmp	r3, #0
 801707a:	d1f6      	bne.n	801706a <_strtol_l.isra.0+0x52>
 801707c:	2c30      	cmp	r4, #48	@ 0x30
 801707e:	bf14      	ite	ne
 8017080:	230a      	movne	r3, #10
 8017082:	2308      	moveq	r3, #8
 8017084:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8017088:	f10c 3cff 	add.w	ip, ip, #4294967295
 801708c:	2200      	movs	r2, #0
 801708e:	fbbc f9f3 	udiv	r9, ip, r3
 8017092:	4610      	mov	r0, r2
 8017094:	fb03 ca19 	mls	sl, r3, r9, ip
 8017098:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801709c:	2f09      	cmp	r7, #9
 801709e:	d80f      	bhi.n	80170c0 <_strtol_l.isra.0+0xa8>
 80170a0:	463c      	mov	r4, r7
 80170a2:	42a3      	cmp	r3, r4
 80170a4:	dd1b      	ble.n	80170de <_strtol_l.isra.0+0xc6>
 80170a6:	1c57      	adds	r7, r2, #1
 80170a8:	d007      	beq.n	80170ba <_strtol_l.isra.0+0xa2>
 80170aa:	4581      	cmp	r9, r0
 80170ac:	d314      	bcc.n	80170d8 <_strtol_l.isra.0+0xc0>
 80170ae:	d101      	bne.n	80170b4 <_strtol_l.isra.0+0x9c>
 80170b0:	45a2      	cmp	sl, r4
 80170b2:	db11      	blt.n	80170d8 <_strtol_l.isra.0+0xc0>
 80170b4:	fb00 4003 	mla	r0, r0, r3, r4
 80170b8:	2201      	movs	r2, #1
 80170ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80170be:	e7eb      	b.n	8017098 <_strtol_l.isra.0+0x80>
 80170c0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80170c4:	2f19      	cmp	r7, #25
 80170c6:	d801      	bhi.n	80170cc <_strtol_l.isra.0+0xb4>
 80170c8:	3c37      	subs	r4, #55	@ 0x37
 80170ca:	e7ea      	b.n	80170a2 <_strtol_l.isra.0+0x8a>
 80170cc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80170d0:	2f19      	cmp	r7, #25
 80170d2:	d804      	bhi.n	80170de <_strtol_l.isra.0+0xc6>
 80170d4:	3c57      	subs	r4, #87	@ 0x57
 80170d6:	e7e4      	b.n	80170a2 <_strtol_l.isra.0+0x8a>
 80170d8:	f04f 32ff 	mov.w	r2, #4294967295
 80170dc:	e7ed      	b.n	80170ba <_strtol_l.isra.0+0xa2>
 80170de:	1c53      	adds	r3, r2, #1
 80170e0:	d108      	bne.n	80170f4 <_strtol_l.isra.0+0xdc>
 80170e2:	2322      	movs	r3, #34	@ 0x22
 80170e4:	f8ce 3000 	str.w	r3, [lr]
 80170e8:	4660      	mov	r0, ip
 80170ea:	f1b8 0f00 	cmp.w	r8, #0
 80170ee:	d0a0      	beq.n	8017032 <_strtol_l.isra.0+0x1a>
 80170f0:	1e69      	subs	r1, r5, #1
 80170f2:	e006      	b.n	8017102 <_strtol_l.isra.0+0xea>
 80170f4:	b106      	cbz	r6, 80170f8 <_strtol_l.isra.0+0xe0>
 80170f6:	4240      	negs	r0, r0
 80170f8:	f1b8 0f00 	cmp.w	r8, #0
 80170fc:	d099      	beq.n	8017032 <_strtol_l.isra.0+0x1a>
 80170fe:	2a00      	cmp	r2, #0
 8017100:	d1f6      	bne.n	80170f0 <_strtol_l.isra.0+0xd8>
 8017102:	f8c8 1000 	str.w	r1, [r8]
 8017106:	e794      	b.n	8017032 <_strtol_l.isra.0+0x1a>
 8017108:	08018be9 	.word	0x08018be9

0801710c <_strtol_r>:
 801710c:	f7ff bf84 	b.w	8017018 <_strtol_l.isra.0>

08017110 <__ssputs_r>:
 8017110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017114:	688e      	ldr	r6, [r1, #8]
 8017116:	461f      	mov	r7, r3
 8017118:	42be      	cmp	r6, r7
 801711a:	680b      	ldr	r3, [r1, #0]
 801711c:	4682      	mov	sl, r0
 801711e:	460c      	mov	r4, r1
 8017120:	4690      	mov	r8, r2
 8017122:	d82d      	bhi.n	8017180 <__ssputs_r+0x70>
 8017124:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017128:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801712c:	d026      	beq.n	801717c <__ssputs_r+0x6c>
 801712e:	6965      	ldr	r5, [r4, #20]
 8017130:	6909      	ldr	r1, [r1, #16]
 8017132:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017136:	eba3 0901 	sub.w	r9, r3, r1
 801713a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801713e:	1c7b      	adds	r3, r7, #1
 8017140:	444b      	add	r3, r9
 8017142:	106d      	asrs	r5, r5, #1
 8017144:	429d      	cmp	r5, r3
 8017146:	bf38      	it	cc
 8017148:	461d      	movcc	r5, r3
 801714a:	0553      	lsls	r3, r2, #21
 801714c:	d527      	bpl.n	801719e <__ssputs_r+0x8e>
 801714e:	4629      	mov	r1, r5
 8017150:	f7fe fc74 	bl	8015a3c <_malloc_r>
 8017154:	4606      	mov	r6, r0
 8017156:	b360      	cbz	r0, 80171b2 <__ssputs_r+0xa2>
 8017158:	6921      	ldr	r1, [r4, #16]
 801715a:	464a      	mov	r2, r9
 801715c:	f7fd fdfd 	bl	8014d5a <memcpy>
 8017160:	89a3      	ldrh	r3, [r4, #12]
 8017162:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8017166:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801716a:	81a3      	strh	r3, [r4, #12]
 801716c:	6126      	str	r6, [r4, #16]
 801716e:	6165      	str	r5, [r4, #20]
 8017170:	444e      	add	r6, r9
 8017172:	eba5 0509 	sub.w	r5, r5, r9
 8017176:	6026      	str	r6, [r4, #0]
 8017178:	60a5      	str	r5, [r4, #8]
 801717a:	463e      	mov	r6, r7
 801717c:	42be      	cmp	r6, r7
 801717e:	d900      	bls.n	8017182 <__ssputs_r+0x72>
 8017180:	463e      	mov	r6, r7
 8017182:	6820      	ldr	r0, [r4, #0]
 8017184:	4632      	mov	r2, r6
 8017186:	4641      	mov	r1, r8
 8017188:	f000 fa28 	bl	80175dc <memmove>
 801718c:	68a3      	ldr	r3, [r4, #8]
 801718e:	1b9b      	subs	r3, r3, r6
 8017190:	60a3      	str	r3, [r4, #8]
 8017192:	6823      	ldr	r3, [r4, #0]
 8017194:	4433      	add	r3, r6
 8017196:	6023      	str	r3, [r4, #0]
 8017198:	2000      	movs	r0, #0
 801719a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801719e:	462a      	mov	r2, r5
 80171a0:	f000 fdff 	bl	8017da2 <_realloc_r>
 80171a4:	4606      	mov	r6, r0
 80171a6:	2800      	cmp	r0, #0
 80171a8:	d1e0      	bne.n	801716c <__ssputs_r+0x5c>
 80171aa:	6921      	ldr	r1, [r4, #16]
 80171ac:	4650      	mov	r0, sl
 80171ae:	f7fe fbd1 	bl	8015954 <_free_r>
 80171b2:	230c      	movs	r3, #12
 80171b4:	f8ca 3000 	str.w	r3, [sl]
 80171b8:	89a3      	ldrh	r3, [r4, #12]
 80171ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80171be:	81a3      	strh	r3, [r4, #12]
 80171c0:	f04f 30ff 	mov.w	r0, #4294967295
 80171c4:	e7e9      	b.n	801719a <__ssputs_r+0x8a>
	...

080171c8 <_svfiprintf_r>:
 80171c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171cc:	4698      	mov	r8, r3
 80171ce:	898b      	ldrh	r3, [r1, #12]
 80171d0:	061b      	lsls	r3, r3, #24
 80171d2:	b09d      	sub	sp, #116	@ 0x74
 80171d4:	4607      	mov	r7, r0
 80171d6:	460d      	mov	r5, r1
 80171d8:	4614      	mov	r4, r2
 80171da:	d510      	bpl.n	80171fe <_svfiprintf_r+0x36>
 80171dc:	690b      	ldr	r3, [r1, #16]
 80171de:	b973      	cbnz	r3, 80171fe <_svfiprintf_r+0x36>
 80171e0:	2140      	movs	r1, #64	@ 0x40
 80171e2:	f7fe fc2b 	bl	8015a3c <_malloc_r>
 80171e6:	6028      	str	r0, [r5, #0]
 80171e8:	6128      	str	r0, [r5, #16]
 80171ea:	b930      	cbnz	r0, 80171fa <_svfiprintf_r+0x32>
 80171ec:	230c      	movs	r3, #12
 80171ee:	603b      	str	r3, [r7, #0]
 80171f0:	f04f 30ff 	mov.w	r0, #4294967295
 80171f4:	b01d      	add	sp, #116	@ 0x74
 80171f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171fa:	2340      	movs	r3, #64	@ 0x40
 80171fc:	616b      	str	r3, [r5, #20]
 80171fe:	2300      	movs	r3, #0
 8017200:	9309      	str	r3, [sp, #36]	@ 0x24
 8017202:	2320      	movs	r3, #32
 8017204:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017208:	f8cd 800c 	str.w	r8, [sp, #12]
 801720c:	2330      	movs	r3, #48	@ 0x30
 801720e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80173ac <_svfiprintf_r+0x1e4>
 8017212:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017216:	f04f 0901 	mov.w	r9, #1
 801721a:	4623      	mov	r3, r4
 801721c:	469a      	mov	sl, r3
 801721e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017222:	b10a      	cbz	r2, 8017228 <_svfiprintf_r+0x60>
 8017224:	2a25      	cmp	r2, #37	@ 0x25
 8017226:	d1f9      	bne.n	801721c <_svfiprintf_r+0x54>
 8017228:	ebba 0b04 	subs.w	fp, sl, r4
 801722c:	d00b      	beq.n	8017246 <_svfiprintf_r+0x7e>
 801722e:	465b      	mov	r3, fp
 8017230:	4622      	mov	r2, r4
 8017232:	4629      	mov	r1, r5
 8017234:	4638      	mov	r0, r7
 8017236:	f7ff ff6b 	bl	8017110 <__ssputs_r>
 801723a:	3001      	adds	r0, #1
 801723c:	f000 80a7 	beq.w	801738e <_svfiprintf_r+0x1c6>
 8017240:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017242:	445a      	add	r2, fp
 8017244:	9209      	str	r2, [sp, #36]	@ 0x24
 8017246:	f89a 3000 	ldrb.w	r3, [sl]
 801724a:	2b00      	cmp	r3, #0
 801724c:	f000 809f 	beq.w	801738e <_svfiprintf_r+0x1c6>
 8017250:	2300      	movs	r3, #0
 8017252:	f04f 32ff 	mov.w	r2, #4294967295
 8017256:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801725a:	f10a 0a01 	add.w	sl, sl, #1
 801725e:	9304      	str	r3, [sp, #16]
 8017260:	9307      	str	r3, [sp, #28]
 8017262:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017266:	931a      	str	r3, [sp, #104]	@ 0x68
 8017268:	4654      	mov	r4, sl
 801726a:	2205      	movs	r2, #5
 801726c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017270:	484e      	ldr	r0, [pc, #312]	@ (80173ac <_svfiprintf_r+0x1e4>)
 8017272:	f7e9 f84d 	bl	8000310 <memchr>
 8017276:	9a04      	ldr	r2, [sp, #16]
 8017278:	b9d8      	cbnz	r0, 80172b2 <_svfiprintf_r+0xea>
 801727a:	06d0      	lsls	r0, r2, #27
 801727c:	bf44      	itt	mi
 801727e:	2320      	movmi	r3, #32
 8017280:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017284:	0711      	lsls	r1, r2, #28
 8017286:	bf44      	itt	mi
 8017288:	232b      	movmi	r3, #43	@ 0x2b
 801728a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801728e:	f89a 3000 	ldrb.w	r3, [sl]
 8017292:	2b2a      	cmp	r3, #42	@ 0x2a
 8017294:	d015      	beq.n	80172c2 <_svfiprintf_r+0xfa>
 8017296:	9a07      	ldr	r2, [sp, #28]
 8017298:	4654      	mov	r4, sl
 801729a:	2000      	movs	r0, #0
 801729c:	f04f 0c0a 	mov.w	ip, #10
 80172a0:	4621      	mov	r1, r4
 80172a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80172a6:	3b30      	subs	r3, #48	@ 0x30
 80172a8:	2b09      	cmp	r3, #9
 80172aa:	d94b      	bls.n	8017344 <_svfiprintf_r+0x17c>
 80172ac:	b1b0      	cbz	r0, 80172dc <_svfiprintf_r+0x114>
 80172ae:	9207      	str	r2, [sp, #28]
 80172b0:	e014      	b.n	80172dc <_svfiprintf_r+0x114>
 80172b2:	eba0 0308 	sub.w	r3, r0, r8
 80172b6:	fa09 f303 	lsl.w	r3, r9, r3
 80172ba:	4313      	orrs	r3, r2
 80172bc:	9304      	str	r3, [sp, #16]
 80172be:	46a2      	mov	sl, r4
 80172c0:	e7d2      	b.n	8017268 <_svfiprintf_r+0xa0>
 80172c2:	9b03      	ldr	r3, [sp, #12]
 80172c4:	1d19      	adds	r1, r3, #4
 80172c6:	681b      	ldr	r3, [r3, #0]
 80172c8:	9103      	str	r1, [sp, #12]
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	bfbb      	ittet	lt
 80172ce:	425b      	neglt	r3, r3
 80172d0:	f042 0202 	orrlt.w	r2, r2, #2
 80172d4:	9307      	strge	r3, [sp, #28]
 80172d6:	9307      	strlt	r3, [sp, #28]
 80172d8:	bfb8      	it	lt
 80172da:	9204      	strlt	r2, [sp, #16]
 80172dc:	7823      	ldrb	r3, [r4, #0]
 80172de:	2b2e      	cmp	r3, #46	@ 0x2e
 80172e0:	d10a      	bne.n	80172f8 <_svfiprintf_r+0x130>
 80172e2:	7863      	ldrb	r3, [r4, #1]
 80172e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80172e6:	d132      	bne.n	801734e <_svfiprintf_r+0x186>
 80172e8:	9b03      	ldr	r3, [sp, #12]
 80172ea:	1d1a      	adds	r2, r3, #4
 80172ec:	681b      	ldr	r3, [r3, #0]
 80172ee:	9203      	str	r2, [sp, #12]
 80172f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80172f4:	3402      	adds	r4, #2
 80172f6:	9305      	str	r3, [sp, #20]
 80172f8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80173bc <_svfiprintf_r+0x1f4>
 80172fc:	7821      	ldrb	r1, [r4, #0]
 80172fe:	2203      	movs	r2, #3
 8017300:	4650      	mov	r0, sl
 8017302:	f7e9 f805 	bl	8000310 <memchr>
 8017306:	b138      	cbz	r0, 8017318 <_svfiprintf_r+0x150>
 8017308:	9b04      	ldr	r3, [sp, #16]
 801730a:	eba0 000a 	sub.w	r0, r0, sl
 801730e:	2240      	movs	r2, #64	@ 0x40
 8017310:	4082      	lsls	r2, r0
 8017312:	4313      	orrs	r3, r2
 8017314:	3401      	adds	r4, #1
 8017316:	9304      	str	r3, [sp, #16]
 8017318:	f814 1b01 	ldrb.w	r1, [r4], #1
 801731c:	4824      	ldr	r0, [pc, #144]	@ (80173b0 <_svfiprintf_r+0x1e8>)
 801731e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017322:	2206      	movs	r2, #6
 8017324:	f7e8 fff4 	bl	8000310 <memchr>
 8017328:	2800      	cmp	r0, #0
 801732a:	d036      	beq.n	801739a <_svfiprintf_r+0x1d2>
 801732c:	4b21      	ldr	r3, [pc, #132]	@ (80173b4 <_svfiprintf_r+0x1ec>)
 801732e:	bb1b      	cbnz	r3, 8017378 <_svfiprintf_r+0x1b0>
 8017330:	9b03      	ldr	r3, [sp, #12]
 8017332:	3307      	adds	r3, #7
 8017334:	f023 0307 	bic.w	r3, r3, #7
 8017338:	3308      	adds	r3, #8
 801733a:	9303      	str	r3, [sp, #12]
 801733c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801733e:	4433      	add	r3, r6
 8017340:	9309      	str	r3, [sp, #36]	@ 0x24
 8017342:	e76a      	b.n	801721a <_svfiprintf_r+0x52>
 8017344:	fb0c 3202 	mla	r2, ip, r2, r3
 8017348:	460c      	mov	r4, r1
 801734a:	2001      	movs	r0, #1
 801734c:	e7a8      	b.n	80172a0 <_svfiprintf_r+0xd8>
 801734e:	2300      	movs	r3, #0
 8017350:	3401      	adds	r4, #1
 8017352:	9305      	str	r3, [sp, #20]
 8017354:	4619      	mov	r1, r3
 8017356:	f04f 0c0a 	mov.w	ip, #10
 801735a:	4620      	mov	r0, r4
 801735c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017360:	3a30      	subs	r2, #48	@ 0x30
 8017362:	2a09      	cmp	r2, #9
 8017364:	d903      	bls.n	801736e <_svfiprintf_r+0x1a6>
 8017366:	2b00      	cmp	r3, #0
 8017368:	d0c6      	beq.n	80172f8 <_svfiprintf_r+0x130>
 801736a:	9105      	str	r1, [sp, #20]
 801736c:	e7c4      	b.n	80172f8 <_svfiprintf_r+0x130>
 801736e:	fb0c 2101 	mla	r1, ip, r1, r2
 8017372:	4604      	mov	r4, r0
 8017374:	2301      	movs	r3, #1
 8017376:	e7f0      	b.n	801735a <_svfiprintf_r+0x192>
 8017378:	ab03      	add	r3, sp, #12
 801737a:	9300      	str	r3, [sp, #0]
 801737c:	462a      	mov	r2, r5
 801737e:	4b0e      	ldr	r3, [pc, #56]	@ (80173b8 <_svfiprintf_r+0x1f0>)
 8017380:	a904      	add	r1, sp, #16
 8017382:	4638      	mov	r0, r7
 8017384:	f7fc fcac 	bl	8013ce0 <_printf_float>
 8017388:	1c42      	adds	r2, r0, #1
 801738a:	4606      	mov	r6, r0
 801738c:	d1d6      	bne.n	801733c <_svfiprintf_r+0x174>
 801738e:	89ab      	ldrh	r3, [r5, #12]
 8017390:	065b      	lsls	r3, r3, #25
 8017392:	f53f af2d 	bmi.w	80171f0 <_svfiprintf_r+0x28>
 8017396:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017398:	e72c      	b.n	80171f4 <_svfiprintf_r+0x2c>
 801739a:	ab03      	add	r3, sp, #12
 801739c:	9300      	str	r3, [sp, #0]
 801739e:	462a      	mov	r2, r5
 80173a0:	4b05      	ldr	r3, [pc, #20]	@ (80173b8 <_svfiprintf_r+0x1f0>)
 80173a2:	a904      	add	r1, sp, #16
 80173a4:	4638      	mov	r0, r7
 80173a6:	f7fc ff23 	bl	80141f0 <_printf_i>
 80173aa:	e7ed      	b.n	8017388 <_svfiprintf_r+0x1c0>
 80173ac:	080189e5 	.word	0x080189e5
 80173b0:	080189ef 	.word	0x080189ef
 80173b4:	08013ce1 	.word	0x08013ce1
 80173b8:	08017111 	.word	0x08017111
 80173bc:	080189eb 	.word	0x080189eb

080173c0 <__sflush_r>:
 80173c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80173c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173c8:	0716      	lsls	r6, r2, #28
 80173ca:	4605      	mov	r5, r0
 80173cc:	460c      	mov	r4, r1
 80173ce:	d454      	bmi.n	801747a <__sflush_r+0xba>
 80173d0:	684b      	ldr	r3, [r1, #4]
 80173d2:	2b00      	cmp	r3, #0
 80173d4:	dc02      	bgt.n	80173dc <__sflush_r+0x1c>
 80173d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80173d8:	2b00      	cmp	r3, #0
 80173da:	dd48      	ble.n	801746e <__sflush_r+0xae>
 80173dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80173de:	2e00      	cmp	r6, #0
 80173e0:	d045      	beq.n	801746e <__sflush_r+0xae>
 80173e2:	2300      	movs	r3, #0
 80173e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80173e8:	682f      	ldr	r7, [r5, #0]
 80173ea:	6a21      	ldr	r1, [r4, #32]
 80173ec:	602b      	str	r3, [r5, #0]
 80173ee:	d030      	beq.n	8017452 <__sflush_r+0x92>
 80173f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80173f2:	89a3      	ldrh	r3, [r4, #12]
 80173f4:	0759      	lsls	r1, r3, #29
 80173f6:	d505      	bpl.n	8017404 <__sflush_r+0x44>
 80173f8:	6863      	ldr	r3, [r4, #4]
 80173fa:	1ad2      	subs	r2, r2, r3
 80173fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80173fe:	b10b      	cbz	r3, 8017404 <__sflush_r+0x44>
 8017400:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017402:	1ad2      	subs	r2, r2, r3
 8017404:	2300      	movs	r3, #0
 8017406:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017408:	6a21      	ldr	r1, [r4, #32]
 801740a:	4628      	mov	r0, r5
 801740c:	47b0      	blx	r6
 801740e:	1c43      	adds	r3, r0, #1
 8017410:	89a3      	ldrh	r3, [r4, #12]
 8017412:	d106      	bne.n	8017422 <__sflush_r+0x62>
 8017414:	6829      	ldr	r1, [r5, #0]
 8017416:	291d      	cmp	r1, #29
 8017418:	d82b      	bhi.n	8017472 <__sflush_r+0xb2>
 801741a:	4a2a      	ldr	r2, [pc, #168]	@ (80174c4 <__sflush_r+0x104>)
 801741c:	40ca      	lsrs	r2, r1
 801741e:	07d6      	lsls	r6, r2, #31
 8017420:	d527      	bpl.n	8017472 <__sflush_r+0xb2>
 8017422:	2200      	movs	r2, #0
 8017424:	6062      	str	r2, [r4, #4]
 8017426:	04d9      	lsls	r1, r3, #19
 8017428:	6922      	ldr	r2, [r4, #16]
 801742a:	6022      	str	r2, [r4, #0]
 801742c:	d504      	bpl.n	8017438 <__sflush_r+0x78>
 801742e:	1c42      	adds	r2, r0, #1
 8017430:	d101      	bne.n	8017436 <__sflush_r+0x76>
 8017432:	682b      	ldr	r3, [r5, #0]
 8017434:	b903      	cbnz	r3, 8017438 <__sflush_r+0x78>
 8017436:	6560      	str	r0, [r4, #84]	@ 0x54
 8017438:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801743a:	602f      	str	r7, [r5, #0]
 801743c:	b1b9      	cbz	r1, 801746e <__sflush_r+0xae>
 801743e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017442:	4299      	cmp	r1, r3
 8017444:	d002      	beq.n	801744c <__sflush_r+0x8c>
 8017446:	4628      	mov	r0, r5
 8017448:	f7fe fa84 	bl	8015954 <_free_r>
 801744c:	2300      	movs	r3, #0
 801744e:	6363      	str	r3, [r4, #52]	@ 0x34
 8017450:	e00d      	b.n	801746e <__sflush_r+0xae>
 8017452:	2301      	movs	r3, #1
 8017454:	4628      	mov	r0, r5
 8017456:	47b0      	blx	r6
 8017458:	4602      	mov	r2, r0
 801745a:	1c50      	adds	r0, r2, #1
 801745c:	d1c9      	bne.n	80173f2 <__sflush_r+0x32>
 801745e:	682b      	ldr	r3, [r5, #0]
 8017460:	2b00      	cmp	r3, #0
 8017462:	d0c6      	beq.n	80173f2 <__sflush_r+0x32>
 8017464:	2b1d      	cmp	r3, #29
 8017466:	d001      	beq.n	801746c <__sflush_r+0xac>
 8017468:	2b16      	cmp	r3, #22
 801746a:	d11e      	bne.n	80174aa <__sflush_r+0xea>
 801746c:	602f      	str	r7, [r5, #0]
 801746e:	2000      	movs	r0, #0
 8017470:	e022      	b.n	80174b8 <__sflush_r+0xf8>
 8017472:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017476:	b21b      	sxth	r3, r3
 8017478:	e01b      	b.n	80174b2 <__sflush_r+0xf2>
 801747a:	690f      	ldr	r7, [r1, #16]
 801747c:	2f00      	cmp	r7, #0
 801747e:	d0f6      	beq.n	801746e <__sflush_r+0xae>
 8017480:	0793      	lsls	r3, r2, #30
 8017482:	680e      	ldr	r6, [r1, #0]
 8017484:	bf08      	it	eq
 8017486:	694b      	ldreq	r3, [r1, #20]
 8017488:	600f      	str	r7, [r1, #0]
 801748a:	bf18      	it	ne
 801748c:	2300      	movne	r3, #0
 801748e:	eba6 0807 	sub.w	r8, r6, r7
 8017492:	608b      	str	r3, [r1, #8]
 8017494:	f1b8 0f00 	cmp.w	r8, #0
 8017498:	dde9      	ble.n	801746e <__sflush_r+0xae>
 801749a:	6a21      	ldr	r1, [r4, #32]
 801749c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801749e:	4643      	mov	r3, r8
 80174a0:	463a      	mov	r2, r7
 80174a2:	4628      	mov	r0, r5
 80174a4:	47b0      	blx	r6
 80174a6:	2800      	cmp	r0, #0
 80174a8:	dc08      	bgt.n	80174bc <__sflush_r+0xfc>
 80174aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80174ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80174b2:	81a3      	strh	r3, [r4, #12]
 80174b4:	f04f 30ff 	mov.w	r0, #4294967295
 80174b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80174bc:	4407      	add	r7, r0
 80174be:	eba8 0800 	sub.w	r8, r8, r0
 80174c2:	e7e7      	b.n	8017494 <__sflush_r+0xd4>
 80174c4:	20400001 	.word	0x20400001

080174c8 <_fflush_r>:
 80174c8:	b538      	push	{r3, r4, r5, lr}
 80174ca:	690b      	ldr	r3, [r1, #16]
 80174cc:	4605      	mov	r5, r0
 80174ce:	460c      	mov	r4, r1
 80174d0:	b913      	cbnz	r3, 80174d8 <_fflush_r+0x10>
 80174d2:	2500      	movs	r5, #0
 80174d4:	4628      	mov	r0, r5
 80174d6:	bd38      	pop	{r3, r4, r5, pc}
 80174d8:	b118      	cbz	r0, 80174e2 <_fflush_r+0x1a>
 80174da:	6a03      	ldr	r3, [r0, #32]
 80174dc:	b90b      	cbnz	r3, 80174e2 <_fflush_r+0x1a>
 80174de:	f7fd fa37 	bl	8014950 <__sinit>
 80174e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80174e6:	2b00      	cmp	r3, #0
 80174e8:	d0f3      	beq.n	80174d2 <_fflush_r+0xa>
 80174ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80174ec:	07d0      	lsls	r0, r2, #31
 80174ee:	d404      	bmi.n	80174fa <_fflush_r+0x32>
 80174f0:	0599      	lsls	r1, r3, #22
 80174f2:	d402      	bmi.n	80174fa <_fflush_r+0x32>
 80174f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80174f6:	f7fd fc2e 	bl	8014d56 <__retarget_lock_acquire_recursive>
 80174fa:	4628      	mov	r0, r5
 80174fc:	4621      	mov	r1, r4
 80174fe:	f7ff ff5f 	bl	80173c0 <__sflush_r>
 8017502:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017504:	07da      	lsls	r2, r3, #31
 8017506:	4605      	mov	r5, r0
 8017508:	d4e4      	bmi.n	80174d4 <_fflush_r+0xc>
 801750a:	89a3      	ldrh	r3, [r4, #12]
 801750c:	059b      	lsls	r3, r3, #22
 801750e:	d4e1      	bmi.n	80174d4 <_fflush_r+0xc>
 8017510:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017512:	f7fd fc21 	bl	8014d58 <__retarget_lock_release_recursive>
 8017516:	e7dd      	b.n	80174d4 <_fflush_r+0xc>

08017518 <__swhatbuf_r>:
 8017518:	b570      	push	{r4, r5, r6, lr}
 801751a:	460c      	mov	r4, r1
 801751c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017520:	2900      	cmp	r1, #0
 8017522:	b096      	sub	sp, #88	@ 0x58
 8017524:	4615      	mov	r5, r2
 8017526:	461e      	mov	r6, r3
 8017528:	da0d      	bge.n	8017546 <__swhatbuf_r+0x2e>
 801752a:	89a3      	ldrh	r3, [r4, #12]
 801752c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017530:	f04f 0100 	mov.w	r1, #0
 8017534:	bf14      	ite	ne
 8017536:	2340      	movne	r3, #64	@ 0x40
 8017538:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801753c:	2000      	movs	r0, #0
 801753e:	6031      	str	r1, [r6, #0]
 8017540:	602b      	str	r3, [r5, #0]
 8017542:	b016      	add	sp, #88	@ 0x58
 8017544:	bd70      	pop	{r4, r5, r6, pc}
 8017546:	466a      	mov	r2, sp
 8017548:	f000 f874 	bl	8017634 <_fstat_r>
 801754c:	2800      	cmp	r0, #0
 801754e:	dbec      	blt.n	801752a <__swhatbuf_r+0x12>
 8017550:	9901      	ldr	r1, [sp, #4]
 8017552:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017556:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801755a:	4259      	negs	r1, r3
 801755c:	4159      	adcs	r1, r3
 801755e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017562:	e7eb      	b.n	801753c <__swhatbuf_r+0x24>

08017564 <__smakebuf_r>:
 8017564:	898b      	ldrh	r3, [r1, #12]
 8017566:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017568:	079d      	lsls	r5, r3, #30
 801756a:	4606      	mov	r6, r0
 801756c:	460c      	mov	r4, r1
 801756e:	d507      	bpl.n	8017580 <__smakebuf_r+0x1c>
 8017570:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017574:	6023      	str	r3, [r4, #0]
 8017576:	6123      	str	r3, [r4, #16]
 8017578:	2301      	movs	r3, #1
 801757a:	6163      	str	r3, [r4, #20]
 801757c:	b003      	add	sp, #12
 801757e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017580:	ab01      	add	r3, sp, #4
 8017582:	466a      	mov	r2, sp
 8017584:	f7ff ffc8 	bl	8017518 <__swhatbuf_r>
 8017588:	9f00      	ldr	r7, [sp, #0]
 801758a:	4605      	mov	r5, r0
 801758c:	4639      	mov	r1, r7
 801758e:	4630      	mov	r0, r6
 8017590:	f7fe fa54 	bl	8015a3c <_malloc_r>
 8017594:	b948      	cbnz	r0, 80175aa <__smakebuf_r+0x46>
 8017596:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801759a:	059a      	lsls	r2, r3, #22
 801759c:	d4ee      	bmi.n	801757c <__smakebuf_r+0x18>
 801759e:	f023 0303 	bic.w	r3, r3, #3
 80175a2:	f043 0302 	orr.w	r3, r3, #2
 80175a6:	81a3      	strh	r3, [r4, #12]
 80175a8:	e7e2      	b.n	8017570 <__smakebuf_r+0xc>
 80175aa:	89a3      	ldrh	r3, [r4, #12]
 80175ac:	6020      	str	r0, [r4, #0]
 80175ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80175b2:	81a3      	strh	r3, [r4, #12]
 80175b4:	9b01      	ldr	r3, [sp, #4]
 80175b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80175ba:	b15b      	cbz	r3, 80175d4 <__smakebuf_r+0x70>
 80175bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80175c0:	4630      	mov	r0, r6
 80175c2:	f000 f849 	bl	8017658 <_isatty_r>
 80175c6:	b128      	cbz	r0, 80175d4 <__smakebuf_r+0x70>
 80175c8:	89a3      	ldrh	r3, [r4, #12]
 80175ca:	f023 0303 	bic.w	r3, r3, #3
 80175ce:	f043 0301 	orr.w	r3, r3, #1
 80175d2:	81a3      	strh	r3, [r4, #12]
 80175d4:	89a3      	ldrh	r3, [r4, #12]
 80175d6:	431d      	orrs	r5, r3
 80175d8:	81a5      	strh	r5, [r4, #12]
 80175da:	e7cf      	b.n	801757c <__smakebuf_r+0x18>

080175dc <memmove>:
 80175dc:	4288      	cmp	r0, r1
 80175de:	b510      	push	{r4, lr}
 80175e0:	eb01 0402 	add.w	r4, r1, r2
 80175e4:	d902      	bls.n	80175ec <memmove+0x10>
 80175e6:	4284      	cmp	r4, r0
 80175e8:	4623      	mov	r3, r4
 80175ea:	d807      	bhi.n	80175fc <memmove+0x20>
 80175ec:	1e43      	subs	r3, r0, #1
 80175ee:	42a1      	cmp	r1, r4
 80175f0:	d008      	beq.n	8017604 <memmove+0x28>
 80175f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80175f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80175fa:	e7f8      	b.n	80175ee <memmove+0x12>
 80175fc:	4402      	add	r2, r0
 80175fe:	4601      	mov	r1, r0
 8017600:	428a      	cmp	r2, r1
 8017602:	d100      	bne.n	8017606 <memmove+0x2a>
 8017604:	bd10      	pop	{r4, pc}
 8017606:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801760a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801760e:	e7f7      	b.n	8017600 <memmove+0x24>

08017610 <strncmp>:
 8017610:	b510      	push	{r4, lr}
 8017612:	b16a      	cbz	r2, 8017630 <strncmp+0x20>
 8017614:	3901      	subs	r1, #1
 8017616:	1884      	adds	r4, r0, r2
 8017618:	f810 2b01 	ldrb.w	r2, [r0], #1
 801761c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017620:	429a      	cmp	r2, r3
 8017622:	d103      	bne.n	801762c <strncmp+0x1c>
 8017624:	42a0      	cmp	r0, r4
 8017626:	d001      	beq.n	801762c <strncmp+0x1c>
 8017628:	2a00      	cmp	r2, #0
 801762a:	d1f5      	bne.n	8017618 <strncmp+0x8>
 801762c:	1ad0      	subs	r0, r2, r3
 801762e:	bd10      	pop	{r4, pc}
 8017630:	4610      	mov	r0, r2
 8017632:	e7fc      	b.n	801762e <strncmp+0x1e>

08017634 <_fstat_r>:
 8017634:	b538      	push	{r3, r4, r5, lr}
 8017636:	4d07      	ldr	r5, [pc, #28]	@ (8017654 <_fstat_r+0x20>)
 8017638:	2300      	movs	r3, #0
 801763a:	4604      	mov	r4, r0
 801763c:	4608      	mov	r0, r1
 801763e:	4611      	mov	r1, r2
 8017640:	602b      	str	r3, [r5, #0]
 8017642:	f7ec fc49 	bl	8003ed8 <_fstat>
 8017646:	1c43      	adds	r3, r0, #1
 8017648:	d102      	bne.n	8017650 <_fstat_r+0x1c>
 801764a:	682b      	ldr	r3, [r5, #0]
 801764c:	b103      	cbz	r3, 8017650 <_fstat_r+0x1c>
 801764e:	6023      	str	r3, [r4, #0]
 8017650:	bd38      	pop	{r3, r4, r5, pc}
 8017652:	bf00      	nop
 8017654:	24000b04 	.word	0x24000b04

08017658 <_isatty_r>:
 8017658:	b538      	push	{r3, r4, r5, lr}
 801765a:	4d06      	ldr	r5, [pc, #24]	@ (8017674 <_isatty_r+0x1c>)
 801765c:	2300      	movs	r3, #0
 801765e:	4604      	mov	r4, r0
 8017660:	4608      	mov	r0, r1
 8017662:	602b      	str	r3, [r5, #0]
 8017664:	f7ec fc48 	bl	8003ef8 <_isatty>
 8017668:	1c43      	adds	r3, r0, #1
 801766a:	d102      	bne.n	8017672 <_isatty_r+0x1a>
 801766c:	682b      	ldr	r3, [r5, #0]
 801766e:	b103      	cbz	r3, 8017672 <_isatty_r+0x1a>
 8017670:	6023      	str	r3, [r4, #0]
 8017672:	bd38      	pop	{r3, r4, r5, pc}
 8017674:	24000b04 	.word	0x24000b04

08017678 <_sbrk_r>:
 8017678:	b538      	push	{r3, r4, r5, lr}
 801767a:	4d06      	ldr	r5, [pc, #24]	@ (8017694 <_sbrk_r+0x1c>)
 801767c:	2300      	movs	r3, #0
 801767e:	4604      	mov	r4, r0
 8017680:	4608      	mov	r0, r1
 8017682:	602b      	str	r3, [r5, #0]
 8017684:	f7ec fc50 	bl	8003f28 <_sbrk>
 8017688:	1c43      	adds	r3, r0, #1
 801768a:	d102      	bne.n	8017692 <_sbrk_r+0x1a>
 801768c:	682b      	ldr	r3, [r5, #0]
 801768e:	b103      	cbz	r3, 8017692 <_sbrk_r+0x1a>
 8017690:	6023      	str	r3, [r4, #0]
 8017692:	bd38      	pop	{r3, r4, r5, pc}
 8017694:	24000b04 	.word	0x24000b04

08017698 <nan>:
 8017698:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80176a0 <nan+0x8>
 801769c:	4770      	bx	lr
 801769e:	bf00      	nop
 80176a0:	00000000 	.word	0x00000000
 80176a4:	7ff80000 	.word	0x7ff80000

080176a8 <__assert_func>:
 80176a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80176aa:	4614      	mov	r4, r2
 80176ac:	461a      	mov	r2, r3
 80176ae:	4b09      	ldr	r3, [pc, #36]	@ (80176d4 <__assert_func+0x2c>)
 80176b0:	681b      	ldr	r3, [r3, #0]
 80176b2:	4605      	mov	r5, r0
 80176b4:	68d8      	ldr	r0, [r3, #12]
 80176b6:	b14c      	cbz	r4, 80176cc <__assert_func+0x24>
 80176b8:	4b07      	ldr	r3, [pc, #28]	@ (80176d8 <__assert_func+0x30>)
 80176ba:	9100      	str	r1, [sp, #0]
 80176bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80176c0:	4906      	ldr	r1, [pc, #24]	@ (80176dc <__assert_func+0x34>)
 80176c2:	462b      	mov	r3, r5
 80176c4:	f000 fba8 	bl	8017e18 <fiprintf>
 80176c8:	f000 fbb8 	bl	8017e3c <abort>
 80176cc:	4b04      	ldr	r3, [pc, #16]	@ (80176e0 <__assert_func+0x38>)
 80176ce:	461c      	mov	r4, r3
 80176d0:	e7f3      	b.n	80176ba <__assert_func+0x12>
 80176d2:	bf00      	nop
 80176d4:	2400002c 	.word	0x2400002c
 80176d8:	080189fe 	.word	0x080189fe
 80176dc:	08018a0b 	.word	0x08018a0b
 80176e0:	08018a39 	.word	0x08018a39

080176e4 <_calloc_r>:
 80176e4:	b570      	push	{r4, r5, r6, lr}
 80176e6:	fba1 5402 	umull	r5, r4, r1, r2
 80176ea:	b934      	cbnz	r4, 80176fa <_calloc_r+0x16>
 80176ec:	4629      	mov	r1, r5
 80176ee:	f7fe f9a5 	bl	8015a3c <_malloc_r>
 80176f2:	4606      	mov	r6, r0
 80176f4:	b928      	cbnz	r0, 8017702 <_calloc_r+0x1e>
 80176f6:	4630      	mov	r0, r6
 80176f8:	bd70      	pop	{r4, r5, r6, pc}
 80176fa:	220c      	movs	r2, #12
 80176fc:	6002      	str	r2, [r0, #0]
 80176fe:	2600      	movs	r6, #0
 8017700:	e7f9      	b.n	80176f6 <_calloc_r+0x12>
 8017702:	462a      	mov	r2, r5
 8017704:	4621      	mov	r1, r4
 8017706:	f7fd faa8 	bl	8014c5a <memset>
 801770a:	e7f4      	b.n	80176f6 <_calloc_r+0x12>

0801770c <rshift>:
 801770c:	6903      	ldr	r3, [r0, #16]
 801770e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8017712:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017716:	ea4f 1261 	mov.w	r2, r1, asr #5
 801771a:	f100 0414 	add.w	r4, r0, #20
 801771e:	dd45      	ble.n	80177ac <rshift+0xa0>
 8017720:	f011 011f 	ands.w	r1, r1, #31
 8017724:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8017728:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801772c:	d10c      	bne.n	8017748 <rshift+0x3c>
 801772e:	f100 0710 	add.w	r7, r0, #16
 8017732:	4629      	mov	r1, r5
 8017734:	42b1      	cmp	r1, r6
 8017736:	d334      	bcc.n	80177a2 <rshift+0x96>
 8017738:	1a9b      	subs	r3, r3, r2
 801773a:	009b      	lsls	r3, r3, #2
 801773c:	1eea      	subs	r2, r5, #3
 801773e:	4296      	cmp	r6, r2
 8017740:	bf38      	it	cc
 8017742:	2300      	movcc	r3, #0
 8017744:	4423      	add	r3, r4
 8017746:	e015      	b.n	8017774 <rshift+0x68>
 8017748:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801774c:	f1c1 0820 	rsb	r8, r1, #32
 8017750:	40cf      	lsrs	r7, r1
 8017752:	f105 0e04 	add.w	lr, r5, #4
 8017756:	46a1      	mov	r9, r4
 8017758:	4576      	cmp	r6, lr
 801775a:	46f4      	mov	ip, lr
 801775c:	d815      	bhi.n	801778a <rshift+0x7e>
 801775e:	1a9a      	subs	r2, r3, r2
 8017760:	0092      	lsls	r2, r2, #2
 8017762:	3a04      	subs	r2, #4
 8017764:	3501      	adds	r5, #1
 8017766:	42ae      	cmp	r6, r5
 8017768:	bf38      	it	cc
 801776a:	2200      	movcc	r2, #0
 801776c:	18a3      	adds	r3, r4, r2
 801776e:	50a7      	str	r7, [r4, r2]
 8017770:	b107      	cbz	r7, 8017774 <rshift+0x68>
 8017772:	3304      	adds	r3, #4
 8017774:	1b1a      	subs	r2, r3, r4
 8017776:	42a3      	cmp	r3, r4
 8017778:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801777c:	bf08      	it	eq
 801777e:	2300      	moveq	r3, #0
 8017780:	6102      	str	r2, [r0, #16]
 8017782:	bf08      	it	eq
 8017784:	6143      	streq	r3, [r0, #20]
 8017786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801778a:	f8dc c000 	ldr.w	ip, [ip]
 801778e:	fa0c fc08 	lsl.w	ip, ip, r8
 8017792:	ea4c 0707 	orr.w	r7, ip, r7
 8017796:	f849 7b04 	str.w	r7, [r9], #4
 801779a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801779e:	40cf      	lsrs	r7, r1
 80177a0:	e7da      	b.n	8017758 <rshift+0x4c>
 80177a2:	f851 cb04 	ldr.w	ip, [r1], #4
 80177a6:	f847 cf04 	str.w	ip, [r7, #4]!
 80177aa:	e7c3      	b.n	8017734 <rshift+0x28>
 80177ac:	4623      	mov	r3, r4
 80177ae:	e7e1      	b.n	8017774 <rshift+0x68>

080177b0 <__hexdig_fun>:
 80177b0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80177b4:	2b09      	cmp	r3, #9
 80177b6:	d802      	bhi.n	80177be <__hexdig_fun+0xe>
 80177b8:	3820      	subs	r0, #32
 80177ba:	b2c0      	uxtb	r0, r0
 80177bc:	4770      	bx	lr
 80177be:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80177c2:	2b05      	cmp	r3, #5
 80177c4:	d801      	bhi.n	80177ca <__hexdig_fun+0x1a>
 80177c6:	3847      	subs	r0, #71	@ 0x47
 80177c8:	e7f7      	b.n	80177ba <__hexdig_fun+0xa>
 80177ca:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80177ce:	2b05      	cmp	r3, #5
 80177d0:	d801      	bhi.n	80177d6 <__hexdig_fun+0x26>
 80177d2:	3827      	subs	r0, #39	@ 0x27
 80177d4:	e7f1      	b.n	80177ba <__hexdig_fun+0xa>
 80177d6:	2000      	movs	r0, #0
 80177d8:	4770      	bx	lr
	...

080177dc <__gethex>:
 80177dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177e0:	b085      	sub	sp, #20
 80177e2:	468a      	mov	sl, r1
 80177e4:	9302      	str	r3, [sp, #8]
 80177e6:	680b      	ldr	r3, [r1, #0]
 80177e8:	9001      	str	r0, [sp, #4]
 80177ea:	4690      	mov	r8, r2
 80177ec:	1c9c      	adds	r4, r3, #2
 80177ee:	46a1      	mov	r9, r4
 80177f0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80177f4:	2830      	cmp	r0, #48	@ 0x30
 80177f6:	d0fa      	beq.n	80177ee <__gethex+0x12>
 80177f8:	eba9 0303 	sub.w	r3, r9, r3
 80177fc:	f1a3 0b02 	sub.w	fp, r3, #2
 8017800:	f7ff ffd6 	bl	80177b0 <__hexdig_fun>
 8017804:	4605      	mov	r5, r0
 8017806:	2800      	cmp	r0, #0
 8017808:	d168      	bne.n	80178dc <__gethex+0x100>
 801780a:	49a0      	ldr	r1, [pc, #640]	@ (8017a8c <__gethex+0x2b0>)
 801780c:	2201      	movs	r2, #1
 801780e:	4648      	mov	r0, r9
 8017810:	f7ff fefe 	bl	8017610 <strncmp>
 8017814:	4607      	mov	r7, r0
 8017816:	2800      	cmp	r0, #0
 8017818:	d167      	bne.n	80178ea <__gethex+0x10e>
 801781a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801781e:	4626      	mov	r6, r4
 8017820:	f7ff ffc6 	bl	80177b0 <__hexdig_fun>
 8017824:	2800      	cmp	r0, #0
 8017826:	d062      	beq.n	80178ee <__gethex+0x112>
 8017828:	4623      	mov	r3, r4
 801782a:	7818      	ldrb	r0, [r3, #0]
 801782c:	2830      	cmp	r0, #48	@ 0x30
 801782e:	4699      	mov	r9, r3
 8017830:	f103 0301 	add.w	r3, r3, #1
 8017834:	d0f9      	beq.n	801782a <__gethex+0x4e>
 8017836:	f7ff ffbb 	bl	80177b0 <__hexdig_fun>
 801783a:	fab0 f580 	clz	r5, r0
 801783e:	096d      	lsrs	r5, r5, #5
 8017840:	f04f 0b01 	mov.w	fp, #1
 8017844:	464a      	mov	r2, r9
 8017846:	4616      	mov	r6, r2
 8017848:	3201      	adds	r2, #1
 801784a:	7830      	ldrb	r0, [r6, #0]
 801784c:	f7ff ffb0 	bl	80177b0 <__hexdig_fun>
 8017850:	2800      	cmp	r0, #0
 8017852:	d1f8      	bne.n	8017846 <__gethex+0x6a>
 8017854:	498d      	ldr	r1, [pc, #564]	@ (8017a8c <__gethex+0x2b0>)
 8017856:	2201      	movs	r2, #1
 8017858:	4630      	mov	r0, r6
 801785a:	f7ff fed9 	bl	8017610 <strncmp>
 801785e:	2800      	cmp	r0, #0
 8017860:	d13f      	bne.n	80178e2 <__gethex+0x106>
 8017862:	b944      	cbnz	r4, 8017876 <__gethex+0x9a>
 8017864:	1c74      	adds	r4, r6, #1
 8017866:	4622      	mov	r2, r4
 8017868:	4616      	mov	r6, r2
 801786a:	3201      	adds	r2, #1
 801786c:	7830      	ldrb	r0, [r6, #0]
 801786e:	f7ff ff9f 	bl	80177b0 <__hexdig_fun>
 8017872:	2800      	cmp	r0, #0
 8017874:	d1f8      	bne.n	8017868 <__gethex+0x8c>
 8017876:	1ba4      	subs	r4, r4, r6
 8017878:	00a7      	lsls	r7, r4, #2
 801787a:	7833      	ldrb	r3, [r6, #0]
 801787c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8017880:	2b50      	cmp	r3, #80	@ 0x50
 8017882:	d13e      	bne.n	8017902 <__gethex+0x126>
 8017884:	7873      	ldrb	r3, [r6, #1]
 8017886:	2b2b      	cmp	r3, #43	@ 0x2b
 8017888:	d033      	beq.n	80178f2 <__gethex+0x116>
 801788a:	2b2d      	cmp	r3, #45	@ 0x2d
 801788c:	d034      	beq.n	80178f8 <__gethex+0x11c>
 801788e:	1c71      	adds	r1, r6, #1
 8017890:	2400      	movs	r4, #0
 8017892:	7808      	ldrb	r0, [r1, #0]
 8017894:	f7ff ff8c 	bl	80177b0 <__hexdig_fun>
 8017898:	1e43      	subs	r3, r0, #1
 801789a:	b2db      	uxtb	r3, r3
 801789c:	2b18      	cmp	r3, #24
 801789e:	d830      	bhi.n	8017902 <__gethex+0x126>
 80178a0:	f1a0 0210 	sub.w	r2, r0, #16
 80178a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80178a8:	f7ff ff82 	bl	80177b0 <__hexdig_fun>
 80178ac:	f100 3cff 	add.w	ip, r0, #4294967295
 80178b0:	fa5f fc8c 	uxtb.w	ip, ip
 80178b4:	f1bc 0f18 	cmp.w	ip, #24
 80178b8:	f04f 030a 	mov.w	r3, #10
 80178bc:	d91e      	bls.n	80178fc <__gethex+0x120>
 80178be:	b104      	cbz	r4, 80178c2 <__gethex+0xe6>
 80178c0:	4252      	negs	r2, r2
 80178c2:	4417      	add	r7, r2
 80178c4:	f8ca 1000 	str.w	r1, [sl]
 80178c8:	b1ed      	cbz	r5, 8017906 <__gethex+0x12a>
 80178ca:	f1bb 0f00 	cmp.w	fp, #0
 80178ce:	bf0c      	ite	eq
 80178d0:	2506      	moveq	r5, #6
 80178d2:	2500      	movne	r5, #0
 80178d4:	4628      	mov	r0, r5
 80178d6:	b005      	add	sp, #20
 80178d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178dc:	2500      	movs	r5, #0
 80178de:	462c      	mov	r4, r5
 80178e0:	e7b0      	b.n	8017844 <__gethex+0x68>
 80178e2:	2c00      	cmp	r4, #0
 80178e4:	d1c7      	bne.n	8017876 <__gethex+0x9a>
 80178e6:	4627      	mov	r7, r4
 80178e8:	e7c7      	b.n	801787a <__gethex+0x9e>
 80178ea:	464e      	mov	r6, r9
 80178ec:	462f      	mov	r7, r5
 80178ee:	2501      	movs	r5, #1
 80178f0:	e7c3      	b.n	801787a <__gethex+0x9e>
 80178f2:	2400      	movs	r4, #0
 80178f4:	1cb1      	adds	r1, r6, #2
 80178f6:	e7cc      	b.n	8017892 <__gethex+0xb6>
 80178f8:	2401      	movs	r4, #1
 80178fa:	e7fb      	b.n	80178f4 <__gethex+0x118>
 80178fc:	fb03 0002 	mla	r0, r3, r2, r0
 8017900:	e7ce      	b.n	80178a0 <__gethex+0xc4>
 8017902:	4631      	mov	r1, r6
 8017904:	e7de      	b.n	80178c4 <__gethex+0xe8>
 8017906:	eba6 0309 	sub.w	r3, r6, r9
 801790a:	3b01      	subs	r3, #1
 801790c:	4629      	mov	r1, r5
 801790e:	2b07      	cmp	r3, #7
 8017910:	dc0a      	bgt.n	8017928 <__gethex+0x14c>
 8017912:	9801      	ldr	r0, [sp, #4]
 8017914:	f7fe f91e 	bl	8015b54 <_Balloc>
 8017918:	4604      	mov	r4, r0
 801791a:	b940      	cbnz	r0, 801792e <__gethex+0x152>
 801791c:	4b5c      	ldr	r3, [pc, #368]	@ (8017a90 <__gethex+0x2b4>)
 801791e:	4602      	mov	r2, r0
 8017920:	21e4      	movs	r1, #228	@ 0xe4
 8017922:	485c      	ldr	r0, [pc, #368]	@ (8017a94 <__gethex+0x2b8>)
 8017924:	f7ff fec0 	bl	80176a8 <__assert_func>
 8017928:	3101      	adds	r1, #1
 801792a:	105b      	asrs	r3, r3, #1
 801792c:	e7ef      	b.n	801790e <__gethex+0x132>
 801792e:	f100 0a14 	add.w	sl, r0, #20
 8017932:	2300      	movs	r3, #0
 8017934:	4655      	mov	r5, sl
 8017936:	469b      	mov	fp, r3
 8017938:	45b1      	cmp	r9, r6
 801793a:	d337      	bcc.n	80179ac <__gethex+0x1d0>
 801793c:	f845 bb04 	str.w	fp, [r5], #4
 8017940:	eba5 050a 	sub.w	r5, r5, sl
 8017944:	10ad      	asrs	r5, r5, #2
 8017946:	6125      	str	r5, [r4, #16]
 8017948:	4658      	mov	r0, fp
 801794a:	f7fe f9f5 	bl	8015d38 <__hi0bits>
 801794e:	016d      	lsls	r5, r5, #5
 8017950:	f8d8 6000 	ldr.w	r6, [r8]
 8017954:	1a2d      	subs	r5, r5, r0
 8017956:	42b5      	cmp	r5, r6
 8017958:	dd54      	ble.n	8017a04 <__gethex+0x228>
 801795a:	1bad      	subs	r5, r5, r6
 801795c:	4629      	mov	r1, r5
 801795e:	4620      	mov	r0, r4
 8017960:	f7fe fd7e 	bl	8016460 <__any_on>
 8017964:	4681      	mov	r9, r0
 8017966:	b178      	cbz	r0, 8017988 <__gethex+0x1ac>
 8017968:	1e6b      	subs	r3, r5, #1
 801796a:	1159      	asrs	r1, r3, #5
 801796c:	f003 021f 	and.w	r2, r3, #31
 8017970:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8017974:	f04f 0901 	mov.w	r9, #1
 8017978:	fa09 f202 	lsl.w	r2, r9, r2
 801797c:	420a      	tst	r2, r1
 801797e:	d003      	beq.n	8017988 <__gethex+0x1ac>
 8017980:	454b      	cmp	r3, r9
 8017982:	dc36      	bgt.n	80179f2 <__gethex+0x216>
 8017984:	f04f 0902 	mov.w	r9, #2
 8017988:	4629      	mov	r1, r5
 801798a:	4620      	mov	r0, r4
 801798c:	f7ff febe 	bl	801770c <rshift>
 8017990:	442f      	add	r7, r5
 8017992:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017996:	42bb      	cmp	r3, r7
 8017998:	da42      	bge.n	8017a20 <__gethex+0x244>
 801799a:	9801      	ldr	r0, [sp, #4]
 801799c:	4621      	mov	r1, r4
 801799e:	f7fe f919 	bl	8015bd4 <_Bfree>
 80179a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80179a4:	2300      	movs	r3, #0
 80179a6:	6013      	str	r3, [r2, #0]
 80179a8:	25a3      	movs	r5, #163	@ 0xa3
 80179aa:	e793      	b.n	80178d4 <__gethex+0xf8>
 80179ac:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80179b0:	2a2e      	cmp	r2, #46	@ 0x2e
 80179b2:	d012      	beq.n	80179da <__gethex+0x1fe>
 80179b4:	2b20      	cmp	r3, #32
 80179b6:	d104      	bne.n	80179c2 <__gethex+0x1e6>
 80179b8:	f845 bb04 	str.w	fp, [r5], #4
 80179bc:	f04f 0b00 	mov.w	fp, #0
 80179c0:	465b      	mov	r3, fp
 80179c2:	7830      	ldrb	r0, [r6, #0]
 80179c4:	9303      	str	r3, [sp, #12]
 80179c6:	f7ff fef3 	bl	80177b0 <__hexdig_fun>
 80179ca:	9b03      	ldr	r3, [sp, #12]
 80179cc:	f000 000f 	and.w	r0, r0, #15
 80179d0:	4098      	lsls	r0, r3
 80179d2:	ea4b 0b00 	orr.w	fp, fp, r0
 80179d6:	3304      	adds	r3, #4
 80179d8:	e7ae      	b.n	8017938 <__gethex+0x15c>
 80179da:	45b1      	cmp	r9, r6
 80179dc:	d8ea      	bhi.n	80179b4 <__gethex+0x1d8>
 80179de:	492b      	ldr	r1, [pc, #172]	@ (8017a8c <__gethex+0x2b0>)
 80179e0:	9303      	str	r3, [sp, #12]
 80179e2:	2201      	movs	r2, #1
 80179e4:	4630      	mov	r0, r6
 80179e6:	f7ff fe13 	bl	8017610 <strncmp>
 80179ea:	9b03      	ldr	r3, [sp, #12]
 80179ec:	2800      	cmp	r0, #0
 80179ee:	d1e1      	bne.n	80179b4 <__gethex+0x1d8>
 80179f0:	e7a2      	b.n	8017938 <__gethex+0x15c>
 80179f2:	1ea9      	subs	r1, r5, #2
 80179f4:	4620      	mov	r0, r4
 80179f6:	f7fe fd33 	bl	8016460 <__any_on>
 80179fa:	2800      	cmp	r0, #0
 80179fc:	d0c2      	beq.n	8017984 <__gethex+0x1a8>
 80179fe:	f04f 0903 	mov.w	r9, #3
 8017a02:	e7c1      	b.n	8017988 <__gethex+0x1ac>
 8017a04:	da09      	bge.n	8017a1a <__gethex+0x23e>
 8017a06:	1b75      	subs	r5, r6, r5
 8017a08:	4621      	mov	r1, r4
 8017a0a:	9801      	ldr	r0, [sp, #4]
 8017a0c:	462a      	mov	r2, r5
 8017a0e:	f7fe faf1 	bl	8015ff4 <__lshift>
 8017a12:	1b7f      	subs	r7, r7, r5
 8017a14:	4604      	mov	r4, r0
 8017a16:	f100 0a14 	add.w	sl, r0, #20
 8017a1a:	f04f 0900 	mov.w	r9, #0
 8017a1e:	e7b8      	b.n	8017992 <__gethex+0x1b6>
 8017a20:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8017a24:	42bd      	cmp	r5, r7
 8017a26:	dd6f      	ble.n	8017b08 <__gethex+0x32c>
 8017a28:	1bed      	subs	r5, r5, r7
 8017a2a:	42ae      	cmp	r6, r5
 8017a2c:	dc34      	bgt.n	8017a98 <__gethex+0x2bc>
 8017a2e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017a32:	2b02      	cmp	r3, #2
 8017a34:	d022      	beq.n	8017a7c <__gethex+0x2a0>
 8017a36:	2b03      	cmp	r3, #3
 8017a38:	d024      	beq.n	8017a84 <__gethex+0x2a8>
 8017a3a:	2b01      	cmp	r3, #1
 8017a3c:	d115      	bne.n	8017a6a <__gethex+0x28e>
 8017a3e:	42ae      	cmp	r6, r5
 8017a40:	d113      	bne.n	8017a6a <__gethex+0x28e>
 8017a42:	2e01      	cmp	r6, #1
 8017a44:	d10b      	bne.n	8017a5e <__gethex+0x282>
 8017a46:	9a02      	ldr	r2, [sp, #8]
 8017a48:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017a4c:	6013      	str	r3, [r2, #0]
 8017a4e:	2301      	movs	r3, #1
 8017a50:	6123      	str	r3, [r4, #16]
 8017a52:	f8ca 3000 	str.w	r3, [sl]
 8017a56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017a58:	2562      	movs	r5, #98	@ 0x62
 8017a5a:	601c      	str	r4, [r3, #0]
 8017a5c:	e73a      	b.n	80178d4 <__gethex+0xf8>
 8017a5e:	1e71      	subs	r1, r6, #1
 8017a60:	4620      	mov	r0, r4
 8017a62:	f7fe fcfd 	bl	8016460 <__any_on>
 8017a66:	2800      	cmp	r0, #0
 8017a68:	d1ed      	bne.n	8017a46 <__gethex+0x26a>
 8017a6a:	9801      	ldr	r0, [sp, #4]
 8017a6c:	4621      	mov	r1, r4
 8017a6e:	f7fe f8b1 	bl	8015bd4 <_Bfree>
 8017a72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017a74:	2300      	movs	r3, #0
 8017a76:	6013      	str	r3, [r2, #0]
 8017a78:	2550      	movs	r5, #80	@ 0x50
 8017a7a:	e72b      	b.n	80178d4 <__gethex+0xf8>
 8017a7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	d1f3      	bne.n	8017a6a <__gethex+0x28e>
 8017a82:	e7e0      	b.n	8017a46 <__gethex+0x26a>
 8017a84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	d1dd      	bne.n	8017a46 <__gethex+0x26a>
 8017a8a:	e7ee      	b.n	8017a6a <__gethex+0x28e>
 8017a8c:	080189e3 	.word	0x080189e3
 8017a90:	08018979 	.word	0x08018979
 8017a94:	08018a3a 	.word	0x08018a3a
 8017a98:	1e6f      	subs	r7, r5, #1
 8017a9a:	f1b9 0f00 	cmp.w	r9, #0
 8017a9e:	d130      	bne.n	8017b02 <__gethex+0x326>
 8017aa0:	b127      	cbz	r7, 8017aac <__gethex+0x2d0>
 8017aa2:	4639      	mov	r1, r7
 8017aa4:	4620      	mov	r0, r4
 8017aa6:	f7fe fcdb 	bl	8016460 <__any_on>
 8017aaa:	4681      	mov	r9, r0
 8017aac:	117a      	asrs	r2, r7, #5
 8017aae:	2301      	movs	r3, #1
 8017ab0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8017ab4:	f007 071f 	and.w	r7, r7, #31
 8017ab8:	40bb      	lsls	r3, r7
 8017aba:	4213      	tst	r3, r2
 8017abc:	4629      	mov	r1, r5
 8017abe:	4620      	mov	r0, r4
 8017ac0:	bf18      	it	ne
 8017ac2:	f049 0902 	orrne.w	r9, r9, #2
 8017ac6:	f7ff fe21 	bl	801770c <rshift>
 8017aca:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8017ace:	1b76      	subs	r6, r6, r5
 8017ad0:	2502      	movs	r5, #2
 8017ad2:	f1b9 0f00 	cmp.w	r9, #0
 8017ad6:	d047      	beq.n	8017b68 <__gethex+0x38c>
 8017ad8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017adc:	2b02      	cmp	r3, #2
 8017ade:	d015      	beq.n	8017b0c <__gethex+0x330>
 8017ae0:	2b03      	cmp	r3, #3
 8017ae2:	d017      	beq.n	8017b14 <__gethex+0x338>
 8017ae4:	2b01      	cmp	r3, #1
 8017ae6:	d109      	bne.n	8017afc <__gethex+0x320>
 8017ae8:	f019 0f02 	tst.w	r9, #2
 8017aec:	d006      	beq.n	8017afc <__gethex+0x320>
 8017aee:	f8da 3000 	ldr.w	r3, [sl]
 8017af2:	ea49 0903 	orr.w	r9, r9, r3
 8017af6:	f019 0f01 	tst.w	r9, #1
 8017afa:	d10e      	bne.n	8017b1a <__gethex+0x33e>
 8017afc:	f045 0510 	orr.w	r5, r5, #16
 8017b00:	e032      	b.n	8017b68 <__gethex+0x38c>
 8017b02:	f04f 0901 	mov.w	r9, #1
 8017b06:	e7d1      	b.n	8017aac <__gethex+0x2d0>
 8017b08:	2501      	movs	r5, #1
 8017b0a:	e7e2      	b.n	8017ad2 <__gethex+0x2f6>
 8017b0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017b0e:	f1c3 0301 	rsb	r3, r3, #1
 8017b12:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017b14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017b16:	2b00      	cmp	r3, #0
 8017b18:	d0f0      	beq.n	8017afc <__gethex+0x320>
 8017b1a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8017b1e:	f104 0314 	add.w	r3, r4, #20
 8017b22:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8017b26:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8017b2a:	f04f 0c00 	mov.w	ip, #0
 8017b2e:	4618      	mov	r0, r3
 8017b30:	f853 2b04 	ldr.w	r2, [r3], #4
 8017b34:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017b38:	d01b      	beq.n	8017b72 <__gethex+0x396>
 8017b3a:	3201      	adds	r2, #1
 8017b3c:	6002      	str	r2, [r0, #0]
 8017b3e:	2d02      	cmp	r5, #2
 8017b40:	f104 0314 	add.w	r3, r4, #20
 8017b44:	d13c      	bne.n	8017bc0 <__gethex+0x3e4>
 8017b46:	f8d8 2000 	ldr.w	r2, [r8]
 8017b4a:	3a01      	subs	r2, #1
 8017b4c:	42b2      	cmp	r2, r6
 8017b4e:	d109      	bne.n	8017b64 <__gethex+0x388>
 8017b50:	1171      	asrs	r1, r6, #5
 8017b52:	2201      	movs	r2, #1
 8017b54:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017b58:	f006 061f 	and.w	r6, r6, #31
 8017b5c:	fa02 f606 	lsl.w	r6, r2, r6
 8017b60:	421e      	tst	r6, r3
 8017b62:	d13a      	bne.n	8017bda <__gethex+0x3fe>
 8017b64:	f045 0520 	orr.w	r5, r5, #32
 8017b68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017b6a:	601c      	str	r4, [r3, #0]
 8017b6c:	9b02      	ldr	r3, [sp, #8]
 8017b6e:	601f      	str	r7, [r3, #0]
 8017b70:	e6b0      	b.n	80178d4 <__gethex+0xf8>
 8017b72:	4299      	cmp	r1, r3
 8017b74:	f843 cc04 	str.w	ip, [r3, #-4]
 8017b78:	d8d9      	bhi.n	8017b2e <__gethex+0x352>
 8017b7a:	68a3      	ldr	r3, [r4, #8]
 8017b7c:	459b      	cmp	fp, r3
 8017b7e:	db17      	blt.n	8017bb0 <__gethex+0x3d4>
 8017b80:	6861      	ldr	r1, [r4, #4]
 8017b82:	9801      	ldr	r0, [sp, #4]
 8017b84:	3101      	adds	r1, #1
 8017b86:	f7fd ffe5 	bl	8015b54 <_Balloc>
 8017b8a:	4681      	mov	r9, r0
 8017b8c:	b918      	cbnz	r0, 8017b96 <__gethex+0x3ba>
 8017b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8017bf8 <__gethex+0x41c>)
 8017b90:	4602      	mov	r2, r0
 8017b92:	2184      	movs	r1, #132	@ 0x84
 8017b94:	e6c5      	b.n	8017922 <__gethex+0x146>
 8017b96:	6922      	ldr	r2, [r4, #16]
 8017b98:	3202      	adds	r2, #2
 8017b9a:	f104 010c 	add.w	r1, r4, #12
 8017b9e:	0092      	lsls	r2, r2, #2
 8017ba0:	300c      	adds	r0, #12
 8017ba2:	f7fd f8da 	bl	8014d5a <memcpy>
 8017ba6:	4621      	mov	r1, r4
 8017ba8:	9801      	ldr	r0, [sp, #4]
 8017baa:	f7fe f813 	bl	8015bd4 <_Bfree>
 8017bae:	464c      	mov	r4, r9
 8017bb0:	6923      	ldr	r3, [r4, #16]
 8017bb2:	1c5a      	adds	r2, r3, #1
 8017bb4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8017bb8:	6122      	str	r2, [r4, #16]
 8017bba:	2201      	movs	r2, #1
 8017bbc:	615a      	str	r2, [r3, #20]
 8017bbe:	e7be      	b.n	8017b3e <__gethex+0x362>
 8017bc0:	6922      	ldr	r2, [r4, #16]
 8017bc2:	455a      	cmp	r2, fp
 8017bc4:	dd0b      	ble.n	8017bde <__gethex+0x402>
 8017bc6:	2101      	movs	r1, #1
 8017bc8:	4620      	mov	r0, r4
 8017bca:	f7ff fd9f 	bl	801770c <rshift>
 8017bce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017bd2:	3701      	adds	r7, #1
 8017bd4:	42bb      	cmp	r3, r7
 8017bd6:	f6ff aee0 	blt.w	801799a <__gethex+0x1be>
 8017bda:	2501      	movs	r5, #1
 8017bdc:	e7c2      	b.n	8017b64 <__gethex+0x388>
 8017bde:	f016 061f 	ands.w	r6, r6, #31
 8017be2:	d0fa      	beq.n	8017bda <__gethex+0x3fe>
 8017be4:	4453      	add	r3, sl
 8017be6:	f1c6 0620 	rsb	r6, r6, #32
 8017bea:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8017bee:	f7fe f8a3 	bl	8015d38 <__hi0bits>
 8017bf2:	42b0      	cmp	r0, r6
 8017bf4:	dbe7      	blt.n	8017bc6 <__gethex+0x3ea>
 8017bf6:	e7f0      	b.n	8017bda <__gethex+0x3fe>
 8017bf8:	08018979 	.word	0x08018979

08017bfc <L_shift>:
 8017bfc:	f1c2 0208 	rsb	r2, r2, #8
 8017c00:	0092      	lsls	r2, r2, #2
 8017c02:	b570      	push	{r4, r5, r6, lr}
 8017c04:	f1c2 0620 	rsb	r6, r2, #32
 8017c08:	6843      	ldr	r3, [r0, #4]
 8017c0a:	6804      	ldr	r4, [r0, #0]
 8017c0c:	fa03 f506 	lsl.w	r5, r3, r6
 8017c10:	432c      	orrs	r4, r5
 8017c12:	40d3      	lsrs	r3, r2
 8017c14:	6004      	str	r4, [r0, #0]
 8017c16:	f840 3f04 	str.w	r3, [r0, #4]!
 8017c1a:	4288      	cmp	r0, r1
 8017c1c:	d3f4      	bcc.n	8017c08 <L_shift+0xc>
 8017c1e:	bd70      	pop	{r4, r5, r6, pc}

08017c20 <__match>:
 8017c20:	b530      	push	{r4, r5, lr}
 8017c22:	6803      	ldr	r3, [r0, #0]
 8017c24:	3301      	adds	r3, #1
 8017c26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017c2a:	b914      	cbnz	r4, 8017c32 <__match+0x12>
 8017c2c:	6003      	str	r3, [r0, #0]
 8017c2e:	2001      	movs	r0, #1
 8017c30:	bd30      	pop	{r4, r5, pc}
 8017c32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017c36:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8017c3a:	2d19      	cmp	r5, #25
 8017c3c:	bf98      	it	ls
 8017c3e:	3220      	addls	r2, #32
 8017c40:	42a2      	cmp	r2, r4
 8017c42:	d0f0      	beq.n	8017c26 <__match+0x6>
 8017c44:	2000      	movs	r0, #0
 8017c46:	e7f3      	b.n	8017c30 <__match+0x10>

08017c48 <__hexnan>:
 8017c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c4c:	680b      	ldr	r3, [r1, #0]
 8017c4e:	6801      	ldr	r1, [r0, #0]
 8017c50:	115e      	asrs	r6, r3, #5
 8017c52:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8017c56:	f013 031f 	ands.w	r3, r3, #31
 8017c5a:	b087      	sub	sp, #28
 8017c5c:	bf18      	it	ne
 8017c5e:	3604      	addne	r6, #4
 8017c60:	2500      	movs	r5, #0
 8017c62:	1f37      	subs	r7, r6, #4
 8017c64:	4682      	mov	sl, r0
 8017c66:	4690      	mov	r8, r2
 8017c68:	9301      	str	r3, [sp, #4]
 8017c6a:	f846 5c04 	str.w	r5, [r6, #-4]
 8017c6e:	46b9      	mov	r9, r7
 8017c70:	463c      	mov	r4, r7
 8017c72:	9502      	str	r5, [sp, #8]
 8017c74:	46ab      	mov	fp, r5
 8017c76:	784a      	ldrb	r2, [r1, #1]
 8017c78:	1c4b      	adds	r3, r1, #1
 8017c7a:	9303      	str	r3, [sp, #12]
 8017c7c:	b342      	cbz	r2, 8017cd0 <__hexnan+0x88>
 8017c7e:	4610      	mov	r0, r2
 8017c80:	9105      	str	r1, [sp, #20]
 8017c82:	9204      	str	r2, [sp, #16]
 8017c84:	f7ff fd94 	bl	80177b0 <__hexdig_fun>
 8017c88:	2800      	cmp	r0, #0
 8017c8a:	d151      	bne.n	8017d30 <__hexnan+0xe8>
 8017c8c:	9a04      	ldr	r2, [sp, #16]
 8017c8e:	9905      	ldr	r1, [sp, #20]
 8017c90:	2a20      	cmp	r2, #32
 8017c92:	d818      	bhi.n	8017cc6 <__hexnan+0x7e>
 8017c94:	9b02      	ldr	r3, [sp, #8]
 8017c96:	459b      	cmp	fp, r3
 8017c98:	dd13      	ble.n	8017cc2 <__hexnan+0x7a>
 8017c9a:	454c      	cmp	r4, r9
 8017c9c:	d206      	bcs.n	8017cac <__hexnan+0x64>
 8017c9e:	2d07      	cmp	r5, #7
 8017ca0:	dc04      	bgt.n	8017cac <__hexnan+0x64>
 8017ca2:	462a      	mov	r2, r5
 8017ca4:	4649      	mov	r1, r9
 8017ca6:	4620      	mov	r0, r4
 8017ca8:	f7ff ffa8 	bl	8017bfc <L_shift>
 8017cac:	4544      	cmp	r4, r8
 8017cae:	d952      	bls.n	8017d56 <__hexnan+0x10e>
 8017cb0:	2300      	movs	r3, #0
 8017cb2:	f1a4 0904 	sub.w	r9, r4, #4
 8017cb6:	f844 3c04 	str.w	r3, [r4, #-4]
 8017cba:	f8cd b008 	str.w	fp, [sp, #8]
 8017cbe:	464c      	mov	r4, r9
 8017cc0:	461d      	mov	r5, r3
 8017cc2:	9903      	ldr	r1, [sp, #12]
 8017cc4:	e7d7      	b.n	8017c76 <__hexnan+0x2e>
 8017cc6:	2a29      	cmp	r2, #41	@ 0x29
 8017cc8:	d157      	bne.n	8017d7a <__hexnan+0x132>
 8017cca:	3102      	adds	r1, #2
 8017ccc:	f8ca 1000 	str.w	r1, [sl]
 8017cd0:	f1bb 0f00 	cmp.w	fp, #0
 8017cd4:	d051      	beq.n	8017d7a <__hexnan+0x132>
 8017cd6:	454c      	cmp	r4, r9
 8017cd8:	d206      	bcs.n	8017ce8 <__hexnan+0xa0>
 8017cda:	2d07      	cmp	r5, #7
 8017cdc:	dc04      	bgt.n	8017ce8 <__hexnan+0xa0>
 8017cde:	462a      	mov	r2, r5
 8017ce0:	4649      	mov	r1, r9
 8017ce2:	4620      	mov	r0, r4
 8017ce4:	f7ff ff8a 	bl	8017bfc <L_shift>
 8017ce8:	4544      	cmp	r4, r8
 8017cea:	d936      	bls.n	8017d5a <__hexnan+0x112>
 8017cec:	f1a8 0204 	sub.w	r2, r8, #4
 8017cf0:	4623      	mov	r3, r4
 8017cf2:	f853 1b04 	ldr.w	r1, [r3], #4
 8017cf6:	f842 1f04 	str.w	r1, [r2, #4]!
 8017cfa:	429f      	cmp	r7, r3
 8017cfc:	d2f9      	bcs.n	8017cf2 <__hexnan+0xaa>
 8017cfe:	1b3b      	subs	r3, r7, r4
 8017d00:	f023 0303 	bic.w	r3, r3, #3
 8017d04:	3304      	adds	r3, #4
 8017d06:	3401      	adds	r4, #1
 8017d08:	3e03      	subs	r6, #3
 8017d0a:	42b4      	cmp	r4, r6
 8017d0c:	bf88      	it	hi
 8017d0e:	2304      	movhi	r3, #4
 8017d10:	4443      	add	r3, r8
 8017d12:	2200      	movs	r2, #0
 8017d14:	f843 2b04 	str.w	r2, [r3], #4
 8017d18:	429f      	cmp	r7, r3
 8017d1a:	d2fb      	bcs.n	8017d14 <__hexnan+0xcc>
 8017d1c:	683b      	ldr	r3, [r7, #0]
 8017d1e:	b91b      	cbnz	r3, 8017d28 <__hexnan+0xe0>
 8017d20:	4547      	cmp	r7, r8
 8017d22:	d128      	bne.n	8017d76 <__hexnan+0x12e>
 8017d24:	2301      	movs	r3, #1
 8017d26:	603b      	str	r3, [r7, #0]
 8017d28:	2005      	movs	r0, #5
 8017d2a:	b007      	add	sp, #28
 8017d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d30:	3501      	adds	r5, #1
 8017d32:	2d08      	cmp	r5, #8
 8017d34:	f10b 0b01 	add.w	fp, fp, #1
 8017d38:	dd06      	ble.n	8017d48 <__hexnan+0x100>
 8017d3a:	4544      	cmp	r4, r8
 8017d3c:	d9c1      	bls.n	8017cc2 <__hexnan+0x7a>
 8017d3e:	2300      	movs	r3, #0
 8017d40:	f844 3c04 	str.w	r3, [r4, #-4]
 8017d44:	2501      	movs	r5, #1
 8017d46:	3c04      	subs	r4, #4
 8017d48:	6822      	ldr	r2, [r4, #0]
 8017d4a:	f000 000f 	and.w	r0, r0, #15
 8017d4e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8017d52:	6020      	str	r0, [r4, #0]
 8017d54:	e7b5      	b.n	8017cc2 <__hexnan+0x7a>
 8017d56:	2508      	movs	r5, #8
 8017d58:	e7b3      	b.n	8017cc2 <__hexnan+0x7a>
 8017d5a:	9b01      	ldr	r3, [sp, #4]
 8017d5c:	2b00      	cmp	r3, #0
 8017d5e:	d0dd      	beq.n	8017d1c <__hexnan+0xd4>
 8017d60:	f1c3 0320 	rsb	r3, r3, #32
 8017d64:	f04f 32ff 	mov.w	r2, #4294967295
 8017d68:	40da      	lsrs	r2, r3
 8017d6a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8017d6e:	4013      	ands	r3, r2
 8017d70:	f846 3c04 	str.w	r3, [r6, #-4]
 8017d74:	e7d2      	b.n	8017d1c <__hexnan+0xd4>
 8017d76:	3f04      	subs	r7, #4
 8017d78:	e7d0      	b.n	8017d1c <__hexnan+0xd4>
 8017d7a:	2004      	movs	r0, #4
 8017d7c:	e7d5      	b.n	8017d2a <__hexnan+0xe2>

08017d7e <__ascii_mbtowc>:
 8017d7e:	b082      	sub	sp, #8
 8017d80:	b901      	cbnz	r1, 8017d84 <__ascii_mbtowc+0x6>
 8017d82:	a901      	add	r1, sp, #4
 8017d84:	b142      	cbz	r2, 8017d98 <__ascii_mbtowc+0x1a>
 8017d86:	b14b      	cbz	r3, 8017d9c <__ascii_mbtowc+0x1e>
 8017d88:	7813      	ldrb	r3, [r2, #0]
 8017d8a:	600b      	str	r3, [r1, #0]
 8017d8c:	7812      	ldrb	r2, [r2, #0]
 8017d8e:	1e10      	subs	r0, r2, #0
 8017d90:	bf18      	it	ne
 8017d92:	2001      	movne	r0, #1
 8017d94:	b002      	add	sp, #8
 8017d96:	4770      	bx	lr
 8017d98:	4610      	mov	r0, r2
 8017d9a:	e7fb      	b.n	8017d94 <__ascii_mbtowc+0x16>
 8017d9c:	f06f 0001 	mvn.w	r0, #1
 8017da0:	e7f8      	b.n	8017d94 <__ascii_mbtowc+0x16>

08017da2 <_realloc_r>:
 8017da2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017da6:	4607      	mov	r7, r0
 8017da8:	4614      	mov	r4, r2
 8017daa:	460d      	mov	r5, r1
 8017dac:	b921      	cbnz	r1, 8017db8 <_realloc_r+0x16>
 8017dae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017db2:	4611      	mov	r1, r2
 8017db4:	f7fd be42 	b.w	8015a3c <_malloc_r>
 8017db8:	b92a      	cbnz	r2, 8017dc6 <_realloc_r+0x24>
 8017dba:	f7fd fdcb 	bl	8015954 <_free_r>
 8017dbe:	4625      	mov	r5, r4
 8017dc0:	4628      	mov	r0, r5
 8017dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017dc6:	f000 f840 	bl	8017e4a <_malloc_usable_size_r>
 8017dca:	4284      	cmp	r4, r0
 8017dcc:	4606      	mov	r6, r0
 8017dce:	d802      	bhi.n	8017dd6 <_realloc_r+0x34>
 8017dd0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017dd4:	d8f4      	bhi.n	8017dc0 <_realloc_r+0x1e>
 8017dd6:	4621      	mov	r1, r4
 8017dd8:	4638      	mov	r0, r7
 8017dda:	f7fd fe2f 	bl	8015a3c <_malloc_r>
 8017dde:	4680      	mov	r8, r0
 8017de0:	b908      	cbnz	r0, 8017de6 <_realloc_r+0x44>
 8017de2:	4645      	mov	r5, r8
 8017de4:	e7ec      	b.n	8017dc0 <_realloc_r+0x1e>
 8017de6:	42b4      	cmp	r4, r6
 8017de8:	4622      	mov	r2, r4
 8017dea:	4629      	mov	r1, r5
 8017dec:	bf28      	it	cs
 8017dee:	4632      	movcs	r2, r6
 8017df0:	f7fc ffb3 	bl	8014d5a <memcpy>
 8017df4:	4629      	mov	r1, r5
 8017df6:	4638      	mov	r0, r7
 8017df8:	f7fd fdac 	bl	8015954 <_free_r>
 8017dfc:	e7f1      	b.n	8017de2 <_realloc_r+0x40>

08017dfe <__ascii_wctomb>:
 8017dfe:	4603      	mov	r3, r0
 8017e00:	4608      	mov	r0, r1
 8017e02:	b141      	cbz	r1, 8017e16 <__ascii_wctomb+0x18>
 8017e04:	2aff      	cmp	r2, #255	@ 0xff
 8017e06:	d904      	bls.n	8017e12 <__ascii_wctomb+0x14>
 8017e08:	228a      	movs	r2, #138	@ 0x8a
 8017e0a:	601a      	str	r2, [r3, #0]
 8017e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8017e10:	4770      	bx	lr
 8017e12:	700a      	strb	r2, [r1, #0]
 8017e14:	2001      	movs	r0, #1
 8017e16:	4770      	bx	lr

08017e18 <fiprintf>:
 8017e18:	b40e      	push	{r1, r2, r3}
 8017e1a:	b503      	push	{r0, r1, lr}
 8017e1c:	4601      	mov	r1, r0
 8017e1e:	ab03      	add	r3, sp, #12
 8017e20:	4805      	ldr	r0, [pc, #20]	@ (8017e38 <fiprintf+0x20>)
 8017e22:	f853 2b04 	ldr.w	r2, [r3], #4
 8017e26:	6800      	ldr	r0, [r0, #0]
 8017e28:	9301      	str	r3, [sp, #4]
 8017e2a:	f000 f83f 	bl	8017eac <_vfiprintf_r>
 8017e2e:	b002      	add	sp, #8
 8017e30:	f85d eb04 	ldr.w	lr, [sp], #4
 8017e34:	b003      	add	sp, #12
 8017e36:	4770      	bx	lr
 8017e38:	2400002c 	.word	0x2400002c

08017e3c <abort>:
 8017e3c:	b508      	push	{r3, lr}
 8017e3e:	2006      	movs	r0, #6
 8017e40:	f000 fa08 	bl	8018254 <raise>
 8017e44:	2001      	movs	r0, #1
 8017e46:	f7eb fff7 	bl	8003e38 <_exit>

08017e4a <_malloc_usable_size_r>:
 8017e4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017e4e:	1f18      	subs	r0, r3, #4
 8017e50:	2b00      	cmp	r3, #0
 8017e52:	bfbc      	itt	lt
 8017e54:	580b      	ldrlt	r3, [r1, r0]
 8017e56:	18c0      	addlt	r0, r0, r3
 8017e58:	4770      	bx	lr

08017e5a <__sfputc_r>:
 8017e5a:	6893      	ldr	r3, [r2, #8]
 8017e5c:	3b01      	subs	r3, #1
 8017e5e:	2b00      	cmp	r3, #0
 8017e60:	b410      	push	{r4}
 8017e62:	6093      	str	r3, [r2, #8]
 8017e64:	da08      	bge.n	8017e78 <__sfputc_r+0x1e>
 8017e66:	6994      	ldr	r4, [r2, #24]
 8017e68:	42a3      	cmp	r3, r4
 8017e6a:	db01      	blt.n	8017e70 <__sfputc_r+0x16>
 8017e6c:	290a      	cmp	r1, #10
 8017e6e:	d103      	bne.n	8017e78 <__sfputc_r+0x1e>
 8017e70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017e74:	f000 b932 	b.w	80180dc <__swbuf_r>
 8017e78:	6813      	ldr	r3, [r2, #0]
 8017e7a:	1c58      	adds	r0, r3, #1
 8017e7c:	6010      	str	r0, [r2, #0]
 8017e7e:	7019      	strb	r1, [r3, #0]
 8017e80:	4608      	mov	r0, r1
 8017e82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017e86:	4770      	bx	lr

08017e88 <__sfputs_r>:
 8017e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e8a:	4606      	mov	r6, r0
 8017e8c:	460f      	mov	r7, r1
 8017e8e:	4614      	mov	r4, r2
 8017e90:	18d5      	adds	r5, r2, r3
 8017e92:	42ac      	cmp	r4, r5
 8017e94:	d101      	bne.n	8017e9a <__sfputs_r+0x12>
 8017e96:	2000      	movs	r0, #0
 8017e98:	e007      	b.n	8017eaa <__sfputs_r+0x22>
 8017e9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017e9e:	463a      	mov	r2, r7
 8017ea0:	4630      	mov	r0, r6
 8017ea2:	f7ff ffda 	bl	8017e5a <__sfputc_r>
 8017ea6:	1c43      	adds	r3, r0, #1
 8017ea8:	d1f3      	bne.n	8017e92 <__sfputs_r+0xa>
 8017eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017eac <_vfiprintf_r>:
 8017eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017eb0:	460d      	mov	r5, r1
 8017eb2:	b09d      	sub	sp, #116	@ 0x74
 8017eb4:	4614      	mov	r4, r2
 8017eb6:	4698      	mov	r8, r3
 8017eb8:	4606      	mov	r6, r0
 8017eba:	b118      	cbz	r0, 8017ec4 <_vfiprintf_r+0x18>
 8017ebc:	6a03      	ldr	r3, [r0, #32]
 8017ebe:	b90b      	cbnz	r3, 8017ec4 <_vfiprintf_r+0x18>
 8017ec0:	f7fc fd46 	bl	8014950 <__sinit>
 8017ec4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017ec6:	07d9      	lsls	r1, r3, #31
 8017ec8:	d405      	bmi.n	8017ed6 <_vfiprintf_r+0x2a>
 8017eca:	89ab      	ldrh	r3, [r5, #12]
 8017ecc:	059a      	lsls	r2, r3, #22
 8017ece:	d402      	bmi.n	8017ed6 <_vfiprintf_r+0x2a>
 8017ed0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017ed2:	f7fc ff40 	bl	8014d56 <__retarget_lock_acquire_recursive>
 8017ed6:	89ab      	ldrh	r3, [r5, #12]
 8017ed8:	071b      	lsls	r3, r3, #28
 8017eda:	d501      	bpl.n	8017ee0 <_vfiprintf_r+0x34>
 8017edc:	692b      	ldr	r3, [r5, #16]
 8017ede:	b99b      	cbnz	r3, 8017f08 <_vfiprintf_r+0x5c>
 8017ee0:	4629      	mov	r1, r5
 8017ee2:	4630      	mov	r0, r6
 8017ee4:	f000 f938 	bl	8018158 <__swsetup_r>
 8017ee8:	b170      	cbz	r0, 8017f08 <_vfiprintf_r+0x5c>
 8017eea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017eec:	07dc      	lsls	r4, r3, #31
 8017eee:	d504      	bpl.n	8017efa <_vfiprintf_r+0x4e>
 8017ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8017ef4:	b01d      	add	sp, #116	@ 0x74
 8017ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017efa:	89ab      	ldrh	r3, [r5, #12]
 8017efc:	0598      	lsls	r0, r3, #22
 8017efe:	d4f7      	bmi.n	8017ef0 <_vfiprintf_r+0x44>
 8017f00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017f02:	f7fc ff29 	bl	8014d58 <__retarget_lock_release_recursive>
 8017f06:	e7f3      	b.n	8017ef0 <_vfiprintf_r+0x44>
 8017f08:	2300      	movs	r3, #0
 8017f0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8017f0c:	2320      	movs	r3, #32
 8017f0e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017f12:	f8cd 800c 	str.w	r8, [sp, #12]
 8017f16:	2330      	movs	r3, #48	@ 0x30
 8017f18:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80180c8 <_vfiprintf_r+0x21c>
 8017f1c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017f20:	f04f 0901 	mov.w	r9, #1
 8017f24:	4623      	mov	r3, r4
 8017f26:	469a      	mov	sl, r3
 8017f28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017f2c:	b10a      	cbz	r2, 8017f32 <_vfiprintf_r+0x86>
 8017f2e:	2a25      	cmp	r2, #37	@ 0x25
 8017f30:	d1f9      	bne.n	8017f26 <_vfiprintf_r+0x7a>
 8017f32:	ebba 0b04 	subs.w	fp, sl, r4
 8017f36:	d00b      	beq.n	8017f50 <_vfiprintf_r+0xa4>
 8017f38:	465b      	mov	r3, fp
 8017f3a:	4622      	mov	r2, r4
 8017f3c:	4629      	mov	r1, r5
 8017f3e:	4630      	mov	r0, r6
 8017f40:	f7ff ffa2 	bl	8017e88 <__sfputs_r>
 8017f44:	3001      	adds	r0, #1
 8017f46:	f000 80a7 	beq.w	8018098 <_vfiprintf_r+0x1ec>
 8017f4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017f4c:	445a      	add	r2, fp
 8017f4e:	9209      	str	r2, [sp, #36]	@ 0x24
 8017f50:	f89a 3000 	ldrb.w	r3, [sl]
 8017f54:	2b00      	cmp	r3, #0
 8017f56:	f000 809f 	beq.w	8018098 <_vfiprintf_r+0x1ec>
 8017f5a:	2300      	movs	r3, #0
 8017f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8017f60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017f64:	f10a 0a01 	add.w	sl, sl, #1
 8017f68:	9304      	str	r3, [sp, #16]
 8017f6a:	9307      	str	r3, [sp, #28]
 8017f6c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017f70:	931a      	str	r3, [sp, #104]	@ 0x68
 8017f72:	4654      	mov	r4, sl
 8017f74:	2205      	movs	r2, #5
 8017f76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017f7a:	4853      	ldr	r0, [pc, #332]	@ (80180c8 <_vfiprintf_r+0x21c>)
 8017f7c:	f7e8 f9c8 	bl	8000310 <memchr>
 8017f80:	9a04      	ldr	r2, [sp, #16]
 8017f82:	b9d8      	cbnz	r0, 8017fbc <_vfiprintf_r+0x110>
 8017f84:	06d1      	lsls	r1, r2, #27
 8017f86:	bf44      	itt	mi
 8017f88:	2320      	movmi	r3, #32
 8017f8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017f8e:	0713      	lsls	r3, r2, #28
 8017f90:	bf44      	itt	mi
 8017f92:	232b      	movmi	r3, #43	@ 0x2b
 8017f94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017f98:	f89a 3000 	ldrb.w	r3, [sl]
 8017f9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8017f9e:	d015      	beq.n	8017fcc <_vfiprintf_r+0x120>
 8017fa0:	9a07      	ldr	r2, [sp, #28]
 8017fa2:	4654      	mov	r4, sl
 8017fa4:	2000      	movs	r0, #0
 8017fa6:	f04f 0c0a 	mov.w	ip, #10
 8017faa:	4621      	mov	r1, r4
 8017fac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017fb0:	3b30      	subs	r3, #48	@ 0x30
 8017fb2:	2b09      	cmp	r3, #9
 8017fb4:	d94b      	bls.n	801804e <_vfiprintf_r+0x1a2>
 8017fb6:	b1b0      	cbz	r0, 8017fe6 <_vfiprintf_r+0x13a>
 8017fb8:	9207      	str	r2, [sp, #28]
 8017fba:	e014      	b.n	8017fe6 <_vfiprintf_r+0x13a>
 8017fbc:	eba0 0308 	sub.w	r3, r0, r8
 8017fc0:	fa09 f303 	lsl.w	r3, r9, r3
 8017fc4:	4313      	orrs	r3, r2
 8017fc6:	9304      	str	r3, [sp, #16]
 8017fc8:	46a2      	mov	sl, r4
 8017fca:	e7d2      	b.n	8017f72 <_vfiprintf_r+0xc6>
 8017fcc:	9b03      	ldr	r3, [sp, #12]
 8017fce:	1d19      	adds	r1, r3, #4
 8017fd0:	681b      	ldr	r3, [r3, #0]
 8017fd2:	9103      	str	r1, [sp, #12]
 8017fd4:	2b00      	cmp	r3, #0
 8017fd6:	bfbb      	ittet	lt
 8017fd8:	425b      	neglt	r3, r3
 8017fda:	f042 0202 	orrlt.w	r2, r2, #2
 8017fde:	9307      	strge	r3, [sp, #28]
 8017fe0:	9307      	strlt	r3, [sp, #28]
 8017fe2:	bfb8      	it	lt
 8017fe4:	9204      	strlt	r2, [sp, #16]
 8017fe6:	7823      	ldrb	r3, [r4, #0]
 8017fe8:	2b2e      	cmp	r3, #46	@ 0x2e
 8017fea:	d10a      	bne.n	8018002 <_vfiprintf_r+0x156>
 8017fec:	7863      	ldrb	r3, [r4, #1]
 8017fee:	2b2a      	cmp	r3, #42	@ 0x2a
 8017ff0:	d132      	bne.n	8018058 <_vfiprintf_r+0x1ac>
 8017ff2:	9b03      	ldr	r3, [sp, #12]
 8017ff4:	1d1a      	adds	r2, r3, #4
 8017ff6:	681b      	ldr	r3, [r3, #0]
 8017ff8:	9203      	str	r2, [sp, #12]
 8017ffa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017ffe:	3402      	adds	r4, #2
 8018000:	9305      	str	r3, [sp, #20]
 8018002:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80180d8 <_vfiprintf_r+0x22c>
 8018006:	7821      	ldrb	r1, [r4, #0]
 8018008:	2203      	movs	r2, #3
 801800a:	4650      	mov	r0, sl
 801800c:	f7e8 f980 	bl	8000310 <memchr>
 8018010:	b138      	cbz	r0, 8018022 <_vfiprintf_r+0x176>
 8018012:	9b04      	ldr	r3, [sp, #16]
 8018014:	eba0 000a 	sub.w	r0, r0, sl
 8018018:	2240      	movs	r2, #64	@ 0x40
 801801a:	4082      	lsls	r2, r0
 801801c:	4313      	orrs	r3, r2
 801801e:	3401      	adds	r4, #1
 8018020:	9304      	str	r3, [sp, #16]
 8018022:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018026:	4829      	ldr	r0, [pc, #164]	@ (80180cc <_vfiprintf_r+0x220>)
 8018028:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801802c:	2206      	movs	r2, #6
 801802e:	f7e8 f96f 	bl	8000310 <memchr>
 8018032:	2800      	cmp	r0, #0
 8018034:	d03f      	beq.n	80180b6 <_vfiprintf_r+0x20a>
 8018036:	4b26      	ldr	r3, [pc, #152]	@ (80180d0 <_vfiprintf_r+0x224>)
 8018038:	bb1b      	cbnz	r3, 8018082 <_vfiprintf_r+0x1d6>
 801803a:	9b03      	ldr	r3, [sp, #12]
 801803c:	3307      	adds	r3, #7
 801803e:	f023 0307 	bic.w	r3, r3, #7
 8018042:	3308      	adds	r3, #8
 8018044:	9303      	str	r3, [sp, #12]
 8018046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018048:	443b      	add	r3, r7
 801804a:	9309      	str	r3, [sp, #36]	@ 0x24
 801804c:	e76a      	b.n	8017f24 <_vfiprintf_r+0x78>
 801804e:	fb0c 3202 	mla	r2, ip, r2, r3
 8018052:	460c      	mov	r4, r1
 8018054:	2001      	movs	r0, #1
 8018056:	e7a8      	b.n	8017faa <_vfiprintf_r+0xfe>
 8018058:	2300      	movs	r3, #0
 801805a:	3401      	adds	r4, #1
 801805c:	9305      	str	r3, [sp, #20]
 801805e:	4619      	mov	r1, r3
 8018060:	f04f 0c0a 	mov.w	ip, #10
 8018064:	4620      	mov	r0, r4
 8018066:	f810 2b01 	ldrb.w	r2, [r0], #1
 801806a:	3a30      	subs	r2, #48	@ 0x30
 801806c:	2a09      	cmp	r2, #9
 801806e:	d903      	bls.n	8018078 <_vfiprintf_r+0x1cc>
 8018070:	2b00      	cmp	r3, #0
 8018072:	d0c6      	beq.n	8018002 <_vfiprintf_r+0x156>
 8018074:	9105      	str	r1, [sp, #20]
 8018076:	e7c4      	b.n	8018002 <_vfiprintf_r+0x156>
 8018078:	fb0c 2101 	mla	r1, ip, r1, r2
 801807c:	4604      	mov	r4, r0
 801807e:	2301      	movs	r3, #1
 8018080:	e7f0      	b.n	8018064 <_vfiprintf_r+0x1b8>
 8018082:	ab03      	add	r3, sp, #12
 8018084:	9300      	str	r3, [sp, #0]
 8018086:	462a      	mov	r2, r5
 8018088:	4b12      	ldr	r3, [pc, #72]	@ (80180d4 <_vfiprintf_r+0x228>)
 801808a:	a904      	add	r1, sp, #16
 801808c:	4630      	mov	r0, r6
 801808e:	f7fb fe27 	bl	8013ce0 <_printf_float>
 8018092:	4607      	mov	r7, r0
 8018094:	1c78      	adds	r0, r7, #1
 8018096:	d1d6      	bne.n	8018046 <_vfiprintf_r+0x19a>
 8018098:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801809a:	07d9      	lsls	r1, r3, #31
 801809c:	d405      	bmi.n	80180aa <_vfiprintf_r+0x1fe>
 801809e:	89ab      	ldrh	r3, [r5, #12]
 80180a0:	059a      	lsls	r2, r3, #22
 80180a2:	d402      	bmi.n	80180aa <_vfiprintf_r+0x1fe>
 80180a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80180a6:	f7fc fe57 	bl	8014d58 <__retarget_lock_release_recursive>
 80180aa:	89ab      	ldrh	r3, [r5, #12]
 80180ac:	065b      	lsls	r3, r3, #25
 80180ae:	f53f af1f 	bmi.w	8017ef0 <_vfiprintf_r+0x44>
 80180b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80180b4:	e71e      	b.n	8017ef4 <_vfiprintf_r+0x48>
 80180b6:	ab03      	add	r3, sp, #12
 80180b8:	9300      	str	r3, [sp, #0]
 80180ba:	462a      	mov	r2, r5
 80180bc:	4b05      	ldr	r3, [pc, #20]	@ (80180d4 <_vfiprintf_r+0x228>)
 80180be:	a904      	add	r1, sp, #16
 80180c0:	4630      	mov	r0, r6
 80180c2:	f7fc f895 	bl	80141f0 <_printf_i>
 80180c6:	e7e4      	b.n	8018092 <_vfiprintf_r+0x1e6>
 80180c8:	080189e5 	.word	0x080189e5
 80180cc:	080189ef 	.word	0x080189ef
 80180d0:	08013ce1 	.word	0x08013ce1
 80180d4:	08017e89 	.word	0x08017e89
 80180d8:	080189eb 	.word	0x080189eb

080180dc <__swbuf_r>:
 80180dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80180de:	460e      	mov	r6, r1
 80180e0:	4614      	mov	r4, r2
 80180e2:	4605      	mov	r5, r0
 80180e4:	b118      	cbz	r0, 80180ee <__swbuf_r+0x12>
 80180e6:	6a03      	ldr	r3, [r0, #32]
 80180e8:	b90b      	cbnz	r3, 80180ee <__swbuf_r+0x12>
 80180ea:	f7fc fc31 	bl	8014950 <__sinit>
 80180ee:	69a3      	ldr	r3, [r4, #24]
 80180f0:	60a3      	str	r3, [r4, #8]
 80180f2:	89a3      	ldrh	r3, [r4, #12]
 80180f4:	071a      	lsls	r2, r3, #28
 80180f6:	d501      	bpl.n	80180fc <__swbuf_r+0x20>
 80180f8:	6923      	ldr	r3, [r4, #16]
 80180fa:	b943      	cbnz	r3, 801810e <__swbuf_r+0x32>
 80180fc:	4621      	mov	r1, r4
 80180fe:	4628      	mov	r0, r5
 8018100:	f000 f82a 	bl	8018158 <__swsetup_r>
 8018104:	b118      	cbz	r0, 801810e <__swbuf_r+0x32>
 8018106:	f04f 37ff 	mov.w	r7, #4294967295
 801810a:	4638      	mov	r0, r7
 801810c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801810e:	6823      	ldr	r3, [r4, #0]
 8018110:	6922      	ldr	r2, [r4, #16]
 8018112:	1a98      	subs	r0, r3, r2
 8018114:	6963      	ldr	r3, [r4, #20]
 8018116:	b2f6      	uxtb	r6, r6
 8018118:	4283      	cmp	r3, r0
 801811a:	4637      	mov	r7, r6
 801811c:	dc05      	bgt.n	801812a <__swbuf_r+0x4e>
 801811e:	4621      	mov	r1, r4
 8018120:	4628      	mov	r0, r5
 8018122:	f7ff f9d1 	bl	80174c8 <_fflush_r>
 8018126:	2800      	cmp	r0, #0
 8018128:	d1ed      	bne.n	8018106 <__swbuf_r+0x2a>
 801812a:	68a3      	ldr	r3, [r4, #8]
 801812c:	3b01      	subs	r3, #1
 801812e:	60a3      	str	r3, [r4, #8]
 8018130:	6823      	ldr	r3, [r4, #0]
 8018132:	1c5a      	adds	r2, r3, #1
 8018134:	6022      	str	r2, [r4, #0]
 8018136:	701e      	strb	r6, [r3, #0]
 8018138:	6962      	ldr	r2, [r4, #20]
 801813a:	1c43      	adds	r3, r0, #1
 801813c:	429a      	cmp	r2, r3
 801813e:	d004      	beq.n	801814a <__swbuf_r+0x6e>
 8018140:	89a3      	ldrh	r3, [r4, #12]
 8018142:	07db      	lsls	r3, r3, #31
 8018144:	d5e1      	bpl.n	801810a <__swbuf_r+0x2e>
 8018146:	2e0a      	cmp	r6, #10
 8018148:	d1df      	bne.n	801810a <__swbuf_r+0x2e>
 801814a:	4621      	mov	r1, r4
 801814c:	4628      	mov	r0, r5
 801814e:	f7ff f9bb 	bl	80174c8 <_fflush_r>
 8018152:	2800      	cmp	r0, #0
 8018154:	d0d9      	beq.n	801810a <__swbuf_r+0x2e>
 8018156:	e7d6      	b.n	8018106 <__swbuf_r+0x2a>

08018158 <__swsetup_r>:
 8018158:	b538      	push	{r3, r4, r5, lr}
 801815a:	4b29      	ldr	r3, [pc, #164]	@ (8018200 <__swsetup_r+0xa8>)
 801815c:	4605      	mov	r5, r0
 801815e:	6818      	ldr	r0, [r3, #0]
 8018160:	460c      	mov	r4, r1
 8018162:	b118      	cbz	r0, 801816c <__swsetup_r+0x14>
 8018164:	6a03      	ldr	r3, [r0, #32]
 8018166:	b90b      	cbnz	r3, 801816c <__swsetup_r+0x14>
 8018168:	f7fc fbf2 	bl	8014950 <__sinit>
 801816c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018170:	0719      	lsls	r1, r3, #28
 8018172:	d422      	bmi.n	80181ba <__swsetup_r+0x62>
 8018174:	06da      	lsls	r2, r3, #27
 8018176:	d407      	bmi.n	8018188 <__swsetup_r+0x30>
 8018178:	2209      	movs	r2, #9
 801817a:	602a      	str	r2, [r5, #0]
 801817c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018180:	81a3      	strh	r3, [r4, #12]
 8018182:	f04f 30ff 	mov.w	r0, #4294967295
 8018186:	e033      	b.n	80181f0 <__swsetup_r+0x98>
 8018188:	0758      	lsls	r0, r3, #29
 801818a:	d512      	bpl.n	80181b2 <__swsetup_r+0x5a>
 801818c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801818e:	b141      	cbz	r1, 80181a2 <__swsetup_r+0x4a>
 8018190:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018194:	4299      	cmp	r1, r3
 8018196:	d002      	beq.n	801819e <__swsetup_r+0x46>
 8018198:	4628      	mov	r0, r5
 801819a:	f7fd fbdb 	bl	8015954 <_free_r>
 801819e:	2300      	movs	r3, #0
 80181a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80181a2:	89a3      	ldrh	r3, [r4, #12]
 80181a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80181a8:	81a3      	strh	r3, [r4, #12]
 80181aa:	2300      	movs	r3, #0
 80181ac:	6063      	str	r3, [r4, #4]
 80181ae:	6923      	ldr	r3, [r4, #16]
 80181b0:	6023      	str	r3, [r4, #0]
 80181b2:	89a3      	ldrh	r3, [r4, #12]
 80181b4:	f043 0308 	orr.w	r3, r3, #8
 80181b8:	81a3      	strh	r3, [r4, #12]
 80181ba:	6923      	ldr	r3, [r4, #16]
 80181bc:	b94b      	cbnz	r3, 80181d2 <__swsetup_r+0x7a>
 80181be:	89a3      	ldrh	r3, [r4, #12]
 80181c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80181c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80181c8:	d003      	beq.n	80181d2 <__swsetup_r+0x7a>
 80181ca:	4621      	mov	r1, r4
 80181cc:	4628      	mov	r0, r5
 80181ce:	f7ff f9c9 	bl	8017564 <__smakebuf_r>
 80181d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80181d6:	f013 0201 	ands.w	r2, r3, #1
 80181da:	d00a      	beq.n	80181f2 <__swsetup_r+0x9a>
 80181dc:	2200      	movs	r2, #0
 80181de:	60a2      	str	r2, [r4, #8]
 80181e0:	6962      	ldr	r2, [r4, #20]
 80181e2:	4252      	negs	r2, r2
 80181e4:	61a2      	str	r2, [r4, #24]
 80181e6:	6922      	ldr	r2, [r4, #16]
 80181e8:	b942      	cbnz	r2, 80181fc <__swsetup_r+0xa4>
 80181ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80181ee:	d1c5      	bne.n	801817c <__swsetup_r+0x24>
 80181f0:	bd38      	pop	{r3, r4, r5, pc}
 80181f2:	0799      	lsls	r1, r3, #30
 80181f4:	bf58      	it	pl
 80181f6:	6962      	ldrpl	r2, [r4, #20]
 80181f8:	60a2      	str	r2, [r4, #8]
 80181fa:	e7f4      	b.n	80181e6 <__swsetup_r+0x8e>
 80181fc:	2000      	movs	r0, #0
 80181fe:	e7f7      	b.n	80181f0 <__swsetup_r+0x98>
 8018200:	2400002c 	.word	0x2400002c

08018204 <_raise_r>:
 8018204:	291f      	cmp	r1, #31
 8018206:	b538      	push	{r3, r4, r5, lr}
 8018208:	4605      	mov	r5, r0
 801820a:	460c      	mov	r4, r1
 801820c:	d904      	bls.n	8018218 <_raise_r+0x14>
 801820e:	2316      	movs	r3, #22
 8018210:	6003      	str	r3, [r0, #0]
 8018212:	f04f 30ff 	mov.w	r0, #4294967295
 8018216:	bd38      	pop	{r3, r4, r5, pc}
 8018218:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801821a:	b112      	cbz	r2, 8018222 <_raise_r+0x1e>
 801821c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018220:	b94b      	cbnz	r3, 8018236 <_raise_r+0x32>
 8018222:	4628      	mov	r0, r5
 8018224:	f000 f830 	bl	8018288 <_getpid_r>
 8018228:	4622      	mov	r2, r4
 801822a:	4601      	mov	r1, r0
 801822c:	4628      	mov	r0, r5
 801822e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018232:	f000 b817 	b.w	8018264 <_kill_r>
 8018236:	2b01      	cmp	r3, #1
 8018238:	d00a      	beq.n	8018250 <_raise_r+0x4c>
 801823a:	1c59      	adds	r1, r3, #1
 801823c:	d103      	bne.n	8018246 <_raise_r+0x42>
 801823e:	2316      	movs	r3, #22
 8018240:	6003      	str	r3, [r0, #0]
 8018242:	2001      	movs	r0, #1
 8018244:	e7e7      	b.n	8018216 <_raise_r+0x12>
 8018246:	2100      	movs	r1, #0
 8018248:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801824c:	4620      	mov	r0, r4
 801824e:	4798      	blx	r3
 8018250:	2000      	movs	r0, #0
 8018252:	e7e0      	b.n	8018216 <_raise_r+0x12>

08018254 <raise>:
 8018254:	4b02      	ldr	r3, [pc, #8]	@ (8018260 <raise+0xc>)
 8018256:	4601      	mov	r1, r0
 8018258:	6818      	ldr	r0, [r3, #0]
 801825a:	f7ff bfd3 	b.w	8018204 <_raise_r>
 801825e:	bf00      	nop
 8018260:	2400002c 	.word	0x2400002c

08018264 <_kill_r>:
 8018264:	b538      	push	{r3, r4, r5, lr}
 8018266:	4d07      	ldr	r5, [pc, #28]	@ (8018284 <_kill_r+0x20>)
 8018268:	2300      	movs	r3, #0
 801826a:	4604      	mov	r4, r0
 801826c:	4608      	mov	r0, r1
 801826e:	4611      	mov	r1, r2
 8018270:	602b      	str	r3, [r5, #0]
 8018272:	f7eb fdd1 	bl	8003e18 <_kill>
 8018276:	1c43      	adds	r3, r0, #1
 8018278:	d102      	bne.n	8018280 <_kill_r+0x1c>
 801827a:	682b      	ldr	r3, [r5, #0]
 801827c:	b103      	cbz	r3, 8018280 <_kill_r+0x1c>
 801827e:	6023      	str	r3, [r4, #0]
 8018280:	bd38      	pop	{r3, r4, r5, pc}
 8018282:	bf00      	nop
 8018284:	24000b04 	.word	0x24000b04

08018288 <_getpid_r>:
 8018288:	f7eb bdbe 	b.w	8003e08 <_getpid>

0801828c <_init>:
 801828c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801828e:	bf00      	nop
 8018290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018292:	bc08      	pop	{r3}
 8018294:	469e      	mov	lr, r3
 8018296:	4770      	bx	lr

08018298 <_fini>:
 8018298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801829a:	bf00      	nop
 801829c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801829e:	bc08      	pop	{r3}
 80182a0:	469e      	mov	lr, r3
 80182a2:	4770      	bx	lr
