
VCU IFS06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014230  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000514  08014500  08014500  00015500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014a14  08014a14  00015a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014a1c  08014a1c  00015a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08014a20  08014a20  00015a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  24000000  08014a24  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000a40  24000084  08014aa8  00016084  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000ac4  08014aa8  00016ac4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00016084  2**0
                  CONTENTS, READONLY
 10 .debug_info   00028b67  00000000  00000000  000160b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000429d  00000000  00000000  0003ec19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002098  00000000  00000000  00042eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000195e  00000000  00000000  00044f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a51f  00000000  00000000  000468ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002a2e4  00000000  00000000  00080dcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017db69  00000000  00000000  000ab0b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00228c1a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000093c4  00000000  00000000  00228c60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000084  00000000  00000000  00232024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000084 	.word	0x24000084
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080144e8 	.word	0x080144e8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000088 	.word	0x24000088
 800030c:	080144e8 	.word	0x080144e8

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b988 	b.w	80006e8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	468e      	mov	lr, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	4688      	mov	r8, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d962      	bls.n	80004cc <__udivmoddi4+0xdc>
 8000406:	fab2 f682 	clz	r6, r2
 800040a:	b14e      	cbz	r6, 8000420 <__udivmoddi4+0x30>
 800040c:	f1c6 0320 	rsb	r3, r6, #32
 8000410:	fa01 f806 	lsl.w	r8, r1, r6
 8000414:	fa20 f303 	lsr.w	r3, r0, r3
 8000418:	40b7      	lsls	r7, r6
 800041a:	ea43 0808 	orr.w	r8, r3, r8
 800041e:	40b4      	lsls	r4, r6
 8000420:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000424:	fa1f fc87 	uxth.w	ip, r7
 8000428:	fbb8 f1fe 	udiv	r1, r8, lr
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fb01 f20c 	mul.w	r2, r1, ip
 800043a:	429a      	cmp	r2, r3
 800043c:	d909      	bls.n	8000452 <__udivmoddi4+0x62>
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	f101 30ff 	add.w	r0, r1, #4294967295
 8000444:	f080 80ea 	bcs.w	800061c <__udivmoddi4+0x22c>
 8000448:	429a      	cmp	r2, r3
 800044a:	f240 80e7 	bls.w	800061c <__udivmoddi4+0x22c>
 800044e:	3902      	subs	r1, #2
 8000450:	443b      	add	r3, r7
 8000452:	1a9a      	subs	r2, r3, r2
 8000454:	b2a3      	uxth	r3, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000462:	fb00 fc0c 	mul.w	ip, r0, ip
 8000466:	459c      	cmp	ip, r3
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x8e>
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000470:	f080 80d6 	bcs.w	8000620 <__udivmoddi4+0x230>
 8000474:	459c      	cmp	ip, r3
 8000476:	f240 80d3 	bls.w	8000620 <__udivmoddi4+0x230>
 800047a:	443b      	add	r3, r7
 800047c:	3802      	subs	r0, #2
 800047e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000482:	eba3 030c 	sub.w	r3, r3, ip
 8000486:	2100      	movs	r1, #0
 8000488:	b11d      	cbz	r5, 8000492 <__udivmoddi4+0xa2>
 800048a:	40f3      	lsrs	r3, r6
 800048c:	2200      	movs	r2, #0
 800048e:	e9c5 3200 	strd	r3, r2, [r5]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d905      	bls.n	80004a6 <__udivmoddi4+0xb6>
 800049a:	b10d      	cbz	r5, 80004a0 <__udivmoddi4+0xb0>
 800049c:	e9c5 0100 	strd	r0, r1, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	4608      	mov	r0, r1
 80004a4:	e7f5      	b.n	8000492 <__udivmoddi4+0xa2>
 80004a6:	fab3 f183 	clz	r1, r3
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d146      	bne.n	800053c <__udivmoddi4+0x14c>
 80004ae:	4573      	cmp	r3, lr
 80004b0:	d302      	bcc.n	80004b8 <__udivmoddi4+0xc8>
 80004b2:	4282      	cmp	r2, r0
 80004b4:	f200 8105 	bhi.w	80006c2 <__udivmoddi4+0x2d2>
 80004b8:	1a84      	subs	r4, r0, r2
 80004ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80004be:	2001      	movs	r0, #1
 80004c0:	4690      	mov	r8, r2
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d0e5      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004c6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ca:	e7e2      	b.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f000 8090 	beq.w	80005f2 <__udivmoddi4+0x202>
 80004d2:	fab2 f682 	clz	r6, r2
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	f040 80a4 	bne.w	8000624 <__udivmoddi4+0x234>
 80004dc:	1a8a      	subs	r2, r1, r2
 80004de:	0c03      	lsrs	r3, r0, #16
 80004e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e4:	b280      	uxth	r0, r0
 80004e6:	b2bc      	uxth	r4, r7
 80004e8:	2101      	movs	r1, #1
 80004ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80004f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004f6:	fb04 f20c 	mul.w	r2, r4, ip
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x11e>
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x11c>
 8000506:	429a      	cmp	r2, r3
 8000508:	f200 80e0 	bhi.w	80006cc <__udivmoddi4+0x2dc>
 800050c:	46c4      	mov	ip, r8
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	fbb3 f2fe 	udiv	r2, r3, lr
 8000514:	fb0e 3312 	mls	r3, lr, r2, r3
 8000518:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800051c:	fb02 f404 	mul.w	r4, r2, r4
 8000520:	429c      	cmp	r4, r3
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x144>
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	f102 30ff 	add.w	r0, r2, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x142>
 800052c:	429c      	cmp	r4, r3
 800052e:	f200 80ca 	bhi.w	80006c6 <__udivmoddi4+0x2d6>
 8000532:	4602      	mov	r2, r0
 8000534:	1b1b      	subs	r3, r3, r4
 8000536:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800053a:	e7a5      	b.n	8000488 <__udivmoddi4+0x98>
 800053c:	f1c1 0620 	rsb	r6, r1, #32
 8000540:	408b      	lsls	r3, r1
 8000542:	fa22 f706 	lsr.w	r7, r2, r6
 8000546:	431f      	orrs	r7, r3
 8000548:	fa0e f401 	lsl.w	r4, lr, r1
 800054c:	fa20 f306 	lsr.w	r3, r0, r6
 8000550:	fa2e fe06 	lsr.w	lr, lr, r6
 8000554:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000558:	4323      	orrs	r3, r4
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	fa1f fc87 	uxth.w	ip, r7
 8000562:	fbbe f0f9 	udiv	r0, lr, r9
 8000566:	0c1c      	lsrs	r4, r3, #16
 8000568:	fb09 ee10 	mls	lr, r9, r0, lr
 800056c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000570:	fb00 fe0c 	mul.w	lr, r0, ip
 8000574:	45a6      	cmp	lr, r4
 8000576:	fa02 f201 	lsl.w	r2, r2, r1
 800057a:	d909      	bls.n	8000590 <__udivmoddi4+0x1a0>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000582:	f080 809c 	bcs.w	80006be <__udivmoddi4+0x2ce>
 8000586:	45a6      	cmp	lr, r4
 8000588:	f240 8099 	bls.w	80006be <__udivmoddi4+0x2ce>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	eba4 040e 	sub.w	r4, r4, lr
 8000594:	fa1f fe83 	uxth.w	lr, r3
 8000598:	fbb4 f3f9 	udiv	r3, r4, r9
 800059c:	fb09 4413 	mls	r4, r9, r3, r4
 80005a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005a8:	45a4      	cmp	ip, r4
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x1ce>
 80005ac:	193c      	adds	r4, r7, r4
 80005ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80005b2:	f080 8082 	bcs.w	80006ba <__udivmoddi4+0x2ca>
 80005b6:	45a4      	cmp	ip, r4
 80005b8:	d97f      	bls.n	80006ba <__udivmoddi4+0x2ca>
 80005ba:	3b02      	subs	r3, #2
 80005bc:	443c      	add	r4, r7
 80005be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005c2:	eba4 040c 	sub.w	r4, r4, ip
 80005c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ca:	4564      	cmp	r4, ip
 80005cc:	4673      	mov	r3, lr
 80005ce:	46e1      	mov	r9, ip
 80005d0:	d362      	bcc.n	8000698 <__udivmoddi4+0x2a8>
 80005d2:	d05f      	beq.n	8000694 <__udivmoddi4+0x2a4>
 80005d4:	b15d      	cbz	r5, 80005ee <__udivmoddi4+0x1fe>
 80005d6:	ebb8 0203 	subs.w	r2, r8, r3
 80005da:	eb64 0409 	sbc.w	r4, r4, r9
 80005de:	fa04 f606 	lsl.w	r6, r4, r6
 80005e2:	fa22 f301 	lsr.w	r3, r2, r1
 80005e6:	431e      	orrs	r6, r3
 80005e8:	40cc      	lsrs	r4, r1
 80005ea:	e9c5 6400 	strd	r6, r4, [r5]
 80005ee:	2100      	movs	r1, #0
 80005f0:	e74f      	b.n	8000492 <__udivmoddi4+0xa2>
 80005f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005f6:	0c01      	lsrs	r1, r0, #16
 80005f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005fc:	b280      	uxth	r0, r0
 80005fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000602:	463b      	mov	r3, r7
 8000604:	4638      	mov	r0, r7
 8000606:	463c      	mov	r4, r7
 8000608:	46b8      	mov	r8, r7
 800060a:	46be      	mov	lr, r7
 800060c:	2620      	movs	r6, #32
 800060e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000612:	eba2 0208 	sub.w	r2, r2, r8
 8000616:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800061a:	e766      	b.n	80004ea <__udivmoddi4+0xfa>
 800061c:	4601      	mov	r1, r0
 800061e:	e718      	b.n	8000452 <__udivmoddi4+0x62>
 8000620:	4610      	mov	r0, r2
 8000622:	e72c      	b.n	800047e <__udivmoddi4+0x8e>
 8000624:	f1c6 0220 	rsb	r2, r6, #32
 8000628:	fa2e f302 	lsr.w	r3, lr, r2
 800062c:	40b7      	lsls	r7, r6
 800062e:	40b1      	lsls	r1, r6
 8000630:	fa20 f202 	lsr.w	r2, r0, r2
 8000634:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000638:	430a      	orrs	r2, r1
 800063a:	fbb3 f8fe 	udiv	r8, r3, lr
 800063e:	b2bc      	uxth	r4, r7
 8000640:	fb0e 3318 	mls	r3, lr, r8, r3
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800064a:	fb08 f904 	mul.w	r9, r8, r4
 800064e:	40b0      	lsls	r0, r6
 8000650:	4589      	cmp	r9, r1
 8000652:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000656:	b280      	uxth	r0, r0
 8000658:	d93e      	bls.n	80006d8 <__udivmoddi4+0x2e8>
 800065a:	1879      	adds	r1, r7, r1
 800065c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000660:	d201      	bcs.n	8000666 <__udivmoddi4+0x276>
 8000662:	4589      	cmp	r9, r1
 8000664:	d81f      	bhi.n	80006a6 <__udivmoddi4+0x2b6>
 8000666:	eba1 0109 	sub.w	r1, r1, r9
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	fb0e 1119 	mls	r1, lr, r9, r1
 8000676:	b292      	uxth	r2, r2
 8000678:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800067c:	4542      	cmp	r2, r8
 800067e:	d229      	bcs.n	80006d4 <__udivmoddi4+0x2e4>
 8000680:	18ba      	adds	r2, r7, r2
 8000682:	f109 31ff 	add.w	r1, r9, #4294967295
 8000686:	d2c4      	bcs.n	8000612 <__udivmoddi4+0x222>
 8000688:	4542      	cmp	r2, r8
 800068a:	d2c2      	bcs.n	8000612 <__udivmoddi4+0x222>
 800068c:	f1a9 0102 	sub.w	r1, r9, #2
 8000690:	443a      	add	r2, r7
 8000692:	e7be      	b.n	8000612 <__udivmoddi4+0x222>
 8000694:	45f0      	cmp	r8, lr
 8000696:	d29d      	bcs.n	80005d4 <__udivmoddi4+0x1e4>
 8000698:	ebbe 0302 	subs.w	r3, lr, r2
 800069c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006a0:	3801      	subs	r0, #1
 80006a2:	46e1      	mov	r9, ip
 80006a4:	e796      	b.n	80005d4 <__udivmoddi4+0x1e4>
 80006a6:	eba7 0909 	sub.w	r9, r7, r9
 80006aa:	4449      	add	r1, r9
 80006ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80006b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b4:	fb09 f804 	mul.w	r8, r9, r4
 80006b8:	e7db      	b.n	8000672 <__udivmoddi4+0x282>
 80006ba:	4673      	mov	r3, lr
 80006bc:	e77f      	b.n	80005be <__udivmoddi4+0x1ce>
 80006be:	4650      	mov	r0, sl
 80006c0:	e766      	b.n	8000590 <__udivmoddi4+0x1a0>
 80006c2:	4608      	mov	r0, r1
 80006c4:	e6fd      	b.n	80004c2 <__udivmoddi4+0xd2>
 80006c6:	443b      	add	r3, r7
 80006c8:	3a02      	subs	r2, #2
 80006ca:	e733      	b.n	8000534 <__udivmoddi4+0x144>
 80006cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006d0:	443b      	add	r3, r7
 80006d2:	e71c      	b.n	800050e <__udivmoddi4+0x11e>
 80006d4:	4649      	mov	r1, r9
 80006d6:	e79c      	b.n	8000612 <__udivmoddi4+0x222>
 80006d8:	eba1 0109 	sub.w	r1, r1, r9
 80006dc:	46c4      	mov	ip, r8
 80006de:	fbb1 f9fe 	udiv	r9, r1, lr
 80006e2:	fb09 f804 	mul.w	r8, r9, r4
 80006e6:	e7c4      	b.n	8000672 <__udivmoddi4+0x282>

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ee:	b0df      	sub	sp, #380	@ 0x17c
 80006f0:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f2:	f003 f991 	bl	8003a18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f6:	f000 fb95 	bl	8000e24 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006fa:	f000 fc01 	bl	8000f00 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fe:	f001 f8bb 	bl	8001878 <MX_GPIO_Init>
  MX_DMA_Init();
 8000702:	f001 f899 	bl	8001838 <MX_DMA_Init>
  MX_ADC1_Init();
 8000706:	f000 fc2d 	bl	8000f64 <MX_ADC1_Init>
  MX_ADC2_Init();
 800070a:	f000 fcc7 	bl	800109c <MX_ADC2_Init>
  MX_FDCAN1_Init();
 800070e:	f000 fd2d 	bl	800116c <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000712:	f000 fda9 	bl	8001268 <MX_FDCAN2_Init>
  MX_TIM1_Init();
 8000716:	f000 ff17 	bl	8001548 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800071a:	f001 f841 	bl	80017a0 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 800071e:	f000 ffcb 	bl	80016b8 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 8000722:	f000 fff1 	bl	8001708 <MX_USART1_UART_Init>
  MX_SDMMC1_SD_Init();
 8000726:	f000 fe9b 	bl	8001460 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800072a:	f012 ff63 	bl	80135f4 <MX_FATFS_Init>
  MX_FDCAN3_Init();
 800072e:	f000 fe19 	bl	8001364 <MX_FDCAN3_Init>
  MX_SPI1_Init();
 8000732:	f000 feb3 	bl	800149c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	// Inicializar tarjeta microSD
	//SDCard_start();
	//HAL_Delay(2000)
  /* USER CODE BEGIN 2 */
  HAL_Delay(5);  // let rails settle
 8000736:	2005      	movs	r0, #5
 8000738:	f003 fa00 	bl	8003b3c <HAL_Delay>

  // --- Keep radio idle while configuring ---
  HAL_GPIO_WritePin(NRF24_CE_PORT,  NRF24_CE_PIN,  GPIO_PIN_RESET); // CE low
 800073c:	2200      	movs	r2, #0
 800073e:	2140      	movs	r1, #64	@ 0x40
 8000740:	48b5      	ldr	r0, [pc, #724]	@ (8000a18 <main+0x32c>)
 8000742:	f009 fb8f 	bl	8009e64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);   // CSN high
 8000746:	2201      	movs	r2, #1
 8000748:	2108      	movs	r1, #8
 800074a:	48b4      	ldr	r0, [pc, #720]	@ (8000a1c <main+0x330>)
 800074c:	f009 fb8a 	bl	8009e64 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000750:	2001      	movs	r0, #1
 8000752:	f003 f9f3 	bl	8003b3c <HAL_Delay>



  // Sanity: write CONFIG=0x0B and read it back
  uint8_t w_cfg[2] = { (uint8_t)(0x20 | 0x00), 0x0B }; // W_REGISTER|CONFIG = 0x0B
 8000756:	f44f 6332 	mov.w	r3, #2848	@ 0xb20
 800075a:	f8a7 3150 	strh.w	r3, [r7, #336]	@ 0x150
  uint8_t r_cfg[2] = { 0x00, 0xFF };                   // R_REGISTER|CONFIG, dummy
 800075e:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8000762:	f8a7 314c 	strh.w	r3, [r7, #332]	@ 0x14c
  uint8_t rxw[2] = {0}, rxr[2] = {0};
 8000766:	2300      	movs	r3, #0
 8000768:	f8a7 3148 	strh.w	r3, [r7, #328]	@ 0x148
 800076c:	2300      	movs	r3, #0
 800076e:	f8a7 3144 	strh.w	r3, [r7, #324]	@ 0x144

  CSN_LOW();  HAL_SPI_TransmitReceive(&hspi1, w_cfg, rxw, 2, 100);  CSN_HIGH();
 8000772:	2200      	movs	r2, #0
 8000774:	2108      	movs	r1, #8
 8000776:	48a9      	ldr	r0, [pc, #676]	@ (8000a1c <main+0x330>)
 8000778:	f009 fb74 	bl	8009e64 <HAL_GPIO_WritePin>
 800077c:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8000780:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8000784:	2364      	movs	r3, #100	@ 0x64
 8000786:	9300      	str	r3, [sp, #0]
 8000788:	2302      	movs	r3, #2
 800078a:	48a5      	ldr	r0, [pc, #660]	@ (8000a20 <main+0x334>)
 800078c:	f00f f8f2 	bl	800f974 <HAL_SPI_TransmitReceive>
 8000790:	2201      	movs	r2, #1
 8000792:	2108      	movs	r1, #8
 8000794:	48a1      	ldr	r0, [pc, #644]	@ (8000a1c <main+0x330>)
 8000796:	f009 fb65 	bl	8009e64 <HAL_GPIO_WritePin>
  CSN_LOW();  HAL_SPI_TransmitReceive(&hspi1, r_cfg, rxr, 2, 100);  CSN_HIGH();
 800079a:	2200      	movs	r2, #0
 800079c:	2108      	movs	r1, #8
 800079e:	489f      	ldr	r0, [pc, #636]	@ (8000a1c <main+0x330>)
 80007a0:	f009 fb60 	bl	8009e64 <HAL_GPIO_WritePin>
 80007a4:	f507 72a2 	add.w	r2, r7, #324	@ 0x144
 80007a8:	f507 71a6 	add.w	r1, r7, #332	@ 0x14c
 80007ac:	2364      	movs	r3, #100	@ 0x64
 80007ae:	9300      	str	r3, [sp, #0]
 80007b0:	2302      	movs	r3, #2
 80007b2:	489b      	ldr	r0, [pc, #620]	@ (8000a20 <main+0x334>)
 80007b4:	f00f f8de 	bl	800f974 <HAL_SPI_TransmitReceive>
 80007b8:	2201      	movs	r2, #1
 80007ba:	2108      	movs	r1, #8
 80007bc:	4897      	ldr	r0, [pc, #604]	@ (8000a1c <main+0x330>)
 80007be:	f009 fb51 	bl	8009e64 <HAL_GPIO_WritePin>

  char dbg[96];
  snprintf(dbg, sizeof dbg, "[POST-ACTIVATE] status_w=%02X cfg=%02X\r\n", rxw[0], rxr[1]);
 80007c2:	f897 3148 	ldrb.w	r3, [r7, #328]	@ 0x148
 80007c6:	461a      	mov	r2, r3
 80007c8:	f897 3145 	ldrb.w	r3, [r7, #325]	@ 0x145
 80007cc:	f107 00e4 	add.w	r0, r7, #228	@ 0xe4
 80007d0:	9300      	str	r3, [sp, #0]
 80007d2:	4613      	mov	r3, r2
 80007d4:	4a93      	ldr	r2, [pc, #588]	@ (8000a24 <main+0x338>)
 80007d6:	2160      	movs	r1, #96	@ 0x60
 80007d8:	f013 f9b0 	bl	8013b3c <sniprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)dbg, strlen(dbg), HAL_MAX_DELAY);
 80007dc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff fd95 	bl	8000310 <strlen>
 80007e6:	4603      	mov	r3, r0
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	f107 01e4 	add.w	r1, r7, #228	@ 0xe4
 80007ee:	f04f 33ff 	mov.w	r3, #4294967295
 80007f2:	488d      	ldr	r0, [pc, #564]	@ (8000a28 <main+0x33c>)
 80007f4:	f010 ff16 	bl	8011624 <HAL_UART_Transmit>

  // ---- proceed with your driver now ----
  HAL_Delay(5);
 80007f8:	2005      	movs	r0, #5
 80007fa:	f003 f99f 	bl	8003b3c <HAL_Delay>
  uint8_t st = NRF24_StatusNOP();
 80007fe:	f002 f9f7 	bl	8002bf0 <NRF24_StatusNOP>
 8000802:	4603      	mov	r3, r0
 8000804:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
  char m[64];
  snprintf(m,sizeof(m),"[NRF] STATUS via NOP = 0x%02X\r\n", st);
 8000808:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
 800080c:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 8000810:	4a86      	ldr	r2, [pc, #536]	@ (8000a2c <main+0x340>)
 8000812:	2140      	movs	r1, #64	@ 0x40
 8000814:	f013 f992 	bl	8013b3c <sniprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)m,strlen(m),HAL_MAX_DELAY);
 8000818:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff fd77 	bl	8000310 <strlen>
 8000822:	4603      	mov	r3, r0
 8000824:	b29a      	uxth	r2, r3
 8000826:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 800082a:	f04f 33ff 	mov.w	r3, #4294967295
 800082e:	487e      	ldr	r0, [pc, #504]	@ (8000a28 <main+0x33c>)
 8000830:	f010 fef8 	bl	8011624 <HAL_UART_Transmit>
  NRF24_Init();
 8000834:	f002 f89c 	bl	8002970 <NRF24_Init>
  NRF24_TxMode(rf_addr, TEL_CHAN);
 8000838:	214c      	movs	r1, #76	@ 0x4c
 800083a:	487d      	ldr	r0, [pc, #500]	@ (8000a30 <main+0x344>)
 800083c:	f002 f8e4 	bl	8002a08 <NRF24_TxMode>
  NRF24_Dump();
 8000840:	f002 f950 	bl	8002ae4 <NRF24_Dump>
  uint8_t cfg = nrf24_ReadReg(CONFIG);
 8000844:	2000      	movs	r0, #0
 8000846:	f001 ffb1 	bl	80027ac <nrf24_ReadReg>
 800084a:	4603      	mov	r3, r0
 800084c:	f887 3156 	strb.w	r3, [r7, #342]	@ 0x156
  uint8_t rf  = nrf24_ReadReg(RF_SETUP);
 8000850:	2006      	movs	r0, #6
 8000852:	f001 ffab 	bl	80027ac <nrf24_ReadReg>
 8000856:	4603      	mov	r3, r0
 8000858:	f887 3155 	strb.w	r3, [r7, #341]	@ 0x155
  uint8_t ch  = nrf24_ReadReg(RF_CH);
 800085c:	2005      	movs	r0, #5
 800085e:	f001 ffa5 	bl	80027ac <nrf24_ReadReg>
 8000862:	4603      	mov	r3, r0
 8000864:	f887 3154 	strb.w	r3, [r7, #340]	@ 0x154
  char info[64];
  snprintf(info, sizeof(info), "[NRF] CFG=%02X RF=%02X CH=%u\r\n", cfg, rf, ch);
 8000868:	f897 1156 	ldrb.w	r1, [r7, #342]	@ 0x156
 800086c:	f897 3155 	ldrb.w	r3, [r7, #341]	@ 0x155
 8000870:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8000874:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 8000878:	9201      	str	r2, [sp, #4]
 800087a:	9300      	str	r3, [sp, #0]
 800087c:	460b      	mov	r3, r1
 800087e:	4a6d      	ldr	r2, [pc, #436]	@ (8000a34 <main+0x348>)
 8000880:	2140      	movs	r1, #64	@ 0x40
 8000882:	f013 f95b 	bl	8013b3c <sniprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 8000886:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff fd40 	bl	8000310 <strlen>
 8000890:	4603      	mov	r3, r0
 8000892:	b29a      	uxth	r2, r3
 8000894:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 8000898:	f04f 33ff 	mov.w	r3, #4294967295
 800089c:	4862      	ldr	r0, [pc, #392]	@ (8000a28 <main+0x33c>)
 800089e:	f010 fec1 	bl	8011624 <HAL_UART_Transmit>


  // ---- nRF24 bring-up ----
  //Comentar para uso real
  //dummy transmission, comentar para CAN ID
  for (int i = 0; i < 10; ++i) {
 80008a2:	2300      	movs	r3, #0
 80008a4:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 80008a8:	e027      	b.n	80008fa <main+0x20e>
    float pkt[8] = {0};
 80008aa:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80008ae:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80008b2:	4618      	mov	r0, r3
 80008b4:	2320      	movs	r3, #32
 80008b6:	461a      	mov	r2, r3
 80008b8:	2100      	movs	r1, #0
 80008ba:	f013 f997 	bl	8013bec <memset>
    pkt[0] = 0x600;          // ID
 80008be:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80008c2:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80008c6:	4a5c      	ldr	r2, [pc, #368]	@ (8000a38 <main+0x34c>)
 80008c8:	601a      	str	r2, [r3, #0]
    pkt[1] = 321.0f;     // some dummy values
 80008ca:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80008ce:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80008d2:	4a5a      	ldr	r2, [pc, #360]	@ (8000a3c <main+0x350>)
 80008d4:	605a      	str	r2, [r3, #4]
    pkt[2] = 1234.0f;
 80008d6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80008da:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80008de:	4a58      	ldr	r2, [pc, #352]	@ (8000a40 <main+0x354>)
 80008e0:	609a      	str	r2, [r3, #8]
    NRF24_Transmit((uint8_t*)pkt);
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4618      	mov	r0, r3
 80008e6:	f002 f9ff 	bl	8002ce8 <NRF24_Transmit>
    HAL_Delay(100);
 80008ea:	2064      	movs	r0, #100	@ 0x64
 80008ec:	f003 f926 	bl	8003b3c <HAL_Delay>
  for (int i = 0; i < 10; ++i) {
 80008f0:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80008f4:	3301      	adds	r3, #1
 80008f6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 80008fa:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80008fe:	2b09      	cmp	r3, #9
 8000900:	ddd3      	ble.n	80008aa <main+0x1be>
	//sprintf(buffer, "%u,1test,1test1,1test2\n", (unsigned)time(NULL));
	//SDCard_write("data.csv", "1test,1test1,1test2\n", 0); // el modo 0 asume que existe el archivo y añade datos
	//print(buffer);

	// HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)buffer_adc, 3) != HAL_OK)
 8000902:	2203      	movs	r2, #3
 8000904:	494f      	ldr	r1, [pc, #316]	@ (8000a44 <main+0x358>)
 8000906:	4850      	ldr	r0, [pc, #320]	@ (8000a48 <main+0x35c>)
 8000908:	f004 f872 	bl	80049f0 <HAL_ADC_Start_DMA>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d004      	beq.n	800091c <main+0x230>
	{
#if DEBUG
		print("Error al inicializar ADC_DMA");
 8000912:	484e      	ldr	r0, [pc, #312]	@ (8000a4c <main+0x360>)
 8000914:	f001 f8b0 	bl	8001a78 <print>
#endif
		Error_Handler();
 8000918:	f001 feb8 	bl	800268c <Error_Handler>
	//LPF_EMA_Init(&s1_filt, 0.2f);
	//LPF_EMA_Init(&s2_filt, 0.2f);

	// Inicialización de buses CAN
	// Inversor
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 800091c:	484c      	ldr	r0, [pc, #304]	@ (8000a50 <main+0x364>)
 800091e:	f008 f973 	bl	8008c08 <HAL_FDCAN_Start>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d004      	beq.n	8000932 <main+0x246>
	{
#if DEBUG
		print("Error al inicializar CAN_INV");
 8000928:	484a      	ldr	r0, [pc, #296]	@ (8000a54 <main+0x368>)
 800092a:	f001 f8a5 	bl	8001a78 <print>
#endif
		Error_Handler();
 800092e:	f001 fead 	bl	800268c <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000932:	2200      	movs	r2, #0
 8000934:	2101      	movs	r1, #1
 8000936:	4846      	ldr	r0, [pc, #280]	@ (8000a50 <main+0x364>)
 8000938:	f008 fb58 	bl	8008fec <HAL_FDCAN_ActivateNotification>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d004      	beq.n	800094c <main+0x260>
									   0) != HAL_OK)
	{

#if DEBUG
		print("Error al activar NOTIFICACION CAN_INV");
 8000942:	4845      	ldr	r0, [pc, #276]	@ (8000a58 <main+0x36c>)
 8000944:	f001 f898 	bl	8001a78 <print>
#endif
		Error_Handler();
 8000948:	f001 fea0 	bl	800268c <Error_Handler>
#endif
		Error_Handler();
	}*/

	// Acumulador
	if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK)
 800094c:	4843      	ldr	r0, [pc, #268]	@ (8000a5c <main+0x370>)
 800094e:	f008 f95b 	bl	8008c08 <HAL_FDCAN_Start>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d004      	beq.n	8000962 <main+0x276>
	{

#if DEBUG
		print("Error al inicializar CAN_ACU");
 8000958:	4841      	ldr	r0, [pc, #260]	@ (8000a60 <main+0x374>)
 800095a:	f001 f88d 	bl	8001a78 <print>

#endif
		Error_Handler();
 800095e:	f001 fe95 	bl	800268c <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000962:	2200      	movs	r2, #0
 8000964:	2101      	movs	r1, #1
 8000966:	483d      	ldr	r0, [pc, #244]	@ (8000a5c <main+0x370>)
 8000968:	f008 fb40 	bl	8008fec <HAL_FDCAN_ActivateNotification>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d004      	beq.n	800097c <main+0x290>
									   0) != HAL_OK)
	{

#if DEBUG
		print("Error al activar NOTIFICATION CAN_ACU");
 8000972:	483c      	ldr	r0, [pc, #240]	@ (8000a64 <main+0x378>)
 8000974:	f001 f880 	bl	8001a78 <print>
#endif
		Error_Handler();
 8000978:	f001 fe88 	bl	800268c <Error_Handler>
	}

	//Dash
	if (HAL_FDCAN_Start(&hfdcan3) != HAL_OK)
 800097c:	483a      	ldr	r0, [pc, #232]	@ (8000a68 <main+0x37c>)
 800097e:	f008 f943 	bl	8008c08 <HAL_FDCAN_Start>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d004      	beq.n	8000992 <main+0x2a6>
	{

#if DEBUG
		print("Error al inicializar CAN_DASH");
 8000988:	4838      	ldr	r0, [pc, #224]	@ (8000a6c <main+0x380>)
 800098a:	f001 f875 	bl	8001a78 <print>

#endif
		Error_Handler();
 800098e:	f001 fe7d 	bl	800268c <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan3, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000992:	2200      	movs	r2, #0
 8000994:	2101      	movs	r1, #1
 8000996:	4834      	ldr	r0, [pc, #208]	@ (8000a68 <main+0x37c>)
 8000998:	f008 fb28 	bl	8008fec <HAL_FDCAN_ActivateNotification>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d004      	beq.n	80009ac <main+0x2c0>
									   0) != HAL_OK)
	{

#if DEBUG
		print("Error al activar NOTIFICATION CAN_DASH");
 80009a2:	4833      	ldr	r0, [pc, #204]	@ (8000a70 <main+0x384>)
 80009a4:	f001 f868 	bl	8001a78 <print>
#endif
		Error_Handler();
 80009a8:	f001 fe70 	bl	800268c <Error_Handler>
	}

	//---------- SECUENCIA DE ARRANQUE ----------
#if (DEBUG)
	print("Solicitar tensión inversor");
 80009ac:	4831      	ldr	r0, [pc, #196]	@ (8000a74 <main+0x388>)
 80009ae:	f001 f863 	bl	8001a78 <print>
	config_inv_lectura_v = 1;
#endif

	// Espera ACK inversor (DC bus)
	//Comentar para CAN ID
	HAL_TIM_Base_Start_IT(&htim16);
 80009b2:	4831      	ldr	r0, [pc, #196]	@ (8000a78 <main+0x38c>)
 80009b4:	f00f fc58 	bl	8010268 <HAL_TIM_Base_Start_IT>
	uint32_t _last_req_log = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
	while (config_inv_lectura_v == 0)
 80009be:	e026      	b.n	8000a0e <main+0x322>
	{
		if ((HAL_GetTick() - _last_req_log) >= 1000) {
 80009c0:	f003 f8b0 	bl	8003b24 <HAL_GetTick>
 80009c4:	4602      	mov	r2, r0
 80009c6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80009ca:	1ad3      	subs	r3, r2, r3
 80009cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80009d0:	d306      	bcc.n	80009e0 <main+0x2f4>
		        _last_req_log = HAL_GetTick();
 80009d2:	f003 f8a7 	bl	8003b24 <HAL_GetTick>
 80009d6:	f8c7 0158 	str.w	r0, [r7, #344]	@ 0x158
		        print("Solicitar tensión inversor");
 80009da:	4826      	ldr	r0, [pc, #152]	@ (8000a74 <main+0x388>)
 80009dc:	f001 f84c 	bl	8001a78 <print>
		    }
		static uint32_t last = 0;
		    if (HAL_GetTick() - last >= 500) {
 80009e0:	f003 f8a0 	bl	8003b24 <HAL_GetTick>
 80009e4:	4602      	mov	r2, r0
 80009e6:	4b25      	ldr	r3, [pc, #148]	@ (8000a7c <main+0x390>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	1ad3      	subs	r3, r2, r3
 80009ec:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80009f0:	d306      	bcc.n	8000a00 <main+0x314>
		        last = HAL_GetTick();
 80009f2:	f003 f897 	bl	8003b24 <HAL_GetTick>
 80009f6:	4603      	mov	r3, r0
 80009f8:	4a20      	ldr	r2, [pc, #128]	@ (8000a7c <main+0x390>)
 80009fa:	6013      	str	r3, [r2, #0]
		        tel_send_now();   // sends one 32-byte frame
 80009fc:	f001 fd70 	bl	80024e0 <tel_send_now>
		    }
		if (config_inv_lectura_v == 1)
 8000a00:	4b1f      	ldr	r3, [pc, #124]	@ (8000a80 <main+0x394>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d102      	bne.n	8000a0e <main+0x322>
		{

#if DEBUG
			print("CAN_INV: Lectura de DC_BUS_VOLTAGE correctamente");
 8000a08:	481e      	ldr	r0, [pc, #120]	@ (8000a84 <main+0x398>)
 8000a0a:	f001 f835 	bl	8001a78 <print>
	while (config_inv_lectura_v == 0)
 8000a0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a80 <main+0x394>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d0d4      	beq.n	80009c0 <main+0x2d4>
	}

#if !CALIBRATION

	// PRE-CHARGE
	while (precarga_inv == 0 && inv_dc_bus_voltage < 300)
 8000a16:	e08e      	b.n	8000b36 <main+0x44a>
 8000a18:	58020800 	.word	0x58020800
 8000a1c:	58021800 	.word	0x58021800
 8000a20:	24000460 	.word	0x24000460
 8000a24:	08014500 	.word	0x08014500
 8000a28:	24000614 	.word	0x24000614
 8000a2c:	0801452c 	.word	0x0801452c
 8000a30:	24000008 	.word	0x24000008
 8000a34:	0801454c 	.word	0x0801454c
 8000a38:	44c00000 	.word	0x44c00000
 8000a3c:	43a08000 	.word	0x43a08000
 8000a40:	449a4000 	.word	0x449a4000
 8000a44:	240007ac 	.word	0x240007ac
 8000a48:	240000ac 	.word	0x240000ac
 8000a4c:	0801456c 	.word	0x0801456c
 8000a50:	24000204 	.word	0x24000204
 8000a54:	0801458c 	.word	0x0801458c
 8000a58:	080145ac 	.word	0x080145ac
 8000a5c:	240002a4 	.word	0x240002a4
 8000a60:	080145d4 	.word	0x080145d4
 8000a64:	080145f4 	.word	0x080145f4
 8000a68:	24000344 	.word	0x24000344
 8000a6c:	0801461c 	.word	0x0801461c
 8000a70:	0801463c 	.word	0x0801463c
 8000a74:	08014664 	.word	0x08014664
 8000a78:	24000534 	.word	0x24000534
 8000a7c:	24000940 	.word	0x24000940
 8000a80:	240000a4 	.word	0x240000a4
 8000a84:	08014680 	.word	0x08014680
	{

#if DEBUG
		sprintf(TxBuffer, "DC_BUS_VOLTAGE: %i V\r\n", inv_dc_bus_voltage);
 8000a88:	4b9e      	ldr	r3, [pc, #632]	@ (8000d04 <main+0x618>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	499e      	ldr	r1, [pc, #632]	@ (8000d08 <main+0x61c>)
 8000a90:	489e      	ldr	r0, [pc, #632]	@ (8000d0c <main+0x620>)
 8000a92:	f013 f889 	bl	8013ba8 <siprintf>
		//print(TxBuffer);
		// printValue((int) ((byte1_voltage << 8) | byte0_voltage));
#endif

		// Reenvío DC_BUS_VOLTAGE al AMS por CAN_ACU
		TxHeader_Acu.Identifier = ID_dc_bus_voltage;
 8000a96:	4b9e      	ldr	r3, [pc, #632]	@ (8000d10 <main+0x624>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a9e      	ldr	r2, [pc, #632]	@ (8000d14 <main+0x628>)
 8000a9c:	6013      	str	r3, [r2, #0]
		TxHeader_Acu.DataLength = 2;
 8000a9e:	4b9d      	ldr	r3, [pc, #628]	@ (8000d14 <main+0x628>)
 8000aa0:	2202      	movs	r2, #2
 8000aa2:	60da      	str	r2, [r3, #12]
		TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 8000aa4:	4b9b      	ldr	r3, [pc, #620]	@ (8000d14 <main+0x628>)
 8000aa6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000aaa:	605a      	str	r2, [r3, #4]
		TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 8000aac:	4b99      	ldr	r3, [pc, #612]	@ (8000d14 <main+0x628>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	619a      	str	r2, [r3, #24]
		TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 8000ab2:	4b98      	ldr	r3, [pc, #608]	@ (8000d14 <main+0x628>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]

		/*		TxData_Acu[0] = byte0_voltage;
		 TxData_Acu[1] = byte1_voltage;*/
		TxData_Acu[0] = inv_dc_bus_voltage & 0xFF;
 8000ab8:	4b92      	ldr	r3, [pc, #584]	@ (8000d04 <main+0x618>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	b2da      	uxtb	r2, r3
 8000abe:	4b96      	ldr	r3, [pc, #600]	@ (8000d18 <main+0x62c>)
 8000ac0:	701a      	strb	r2, [r3, #0]
		TxData_Acu[1] = (inv_dc_bus_voltage >> 8) & 0xFF;
 8000ac2:	4b90      	ldr	r3, [pc, #576]	@ (8000d04 <main+0x618>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	121b      	asrs	r3, r3, #8
 8000ac8:	b2da      	uxtb	r2, r3
 8000aca:	4b93      	ldr	r3, [pc, #588]	@ (8000d18 <main+0x62c>)
 8000acc:	705a      	strb	r2, [r3, #1]
		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK)
 8000ace:	4a92      	ldr	r2, [pc, #584]	@ (8000d18 <main+0x62c>)
 8000ad0:	4990      	ldr	r1, [pc, #576]	@ (8000d14 <main+0x628>)
 8000ad2:	4892      	ldr	r0, [pc, #584]	@ (8000d1c <main+0x630>)
 8000ad4:	f008 f8c3 	bl	8008c5e <HAL_FDCAN_AddMessageToTxFifoQ>
#if DEBUG
			//print("CAN_ACU: DC_BUS_VOLTAGE enviado a AMS");
#endif
		}

		precharge_button = HAL_GPIO_ReadPin(START_BUTTON_GPIO_Port,
 8000ad8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000adc:	4890      	ldr	r0, [pc, #576]	@ (8000d20 <main+0x634>)
 8000ade:	f009 f9a9 	bl	8009e34 <HAL_GPIO_ReadPin>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	4b8f      	ldr	r3, [pc, #572]	@ (8000d24 <main+0x638>)
 8000ae8:	601a      	str	r2, [r3, #0]
											START_BUTTON_Pin);
		if (precharge_button == 1){
 8000aea:	4b8e      	ldr	r3, [pc, #568]	@ (8000d24 <main+0x638>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d11a      	bne.n	8000b28 <main+0x43c>
			TxHeader_Acu.Identifier = 0x600;
 8000af2:	4b88      	ldr	r3, [pc, #544]	@ (8000d14 <main+0x628>)
 8000af4:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8000af8:	601a      	str	r2, [r3, #0]
			TxHeader_Acu.DataLength = 2;
 8000afa:	4b86      	ldr	r3, [pc, #536]	@ (8000d14 <main+0x628>)
 8000afc:	2202      	movs	r2, #2
 8000afe:	60da      	str	r2, [r3, #12]
			TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 8000b00:	4b84      	ldr	r3, [pc, #528]	@ (8000d14 <main+0x628>)
 8000b02:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b06:	605a      	str	r2, [r3, #4]
			TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 8000b08:	4b82      	ldr	r3, [pc, #520]	@ (8000d14 <main+0x628>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	619a      	str	r2, [r3, #24]
			TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 8000b0e:	4b81      	ldr	r3, [pc, #516]	@ (8000d14 <main+0x628>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]


			TxData_Acu[0] = precharge_button;
 8000b14:	4b83      	ldr	r3, [pc, #524]	@ (8000d24 <main+0x638>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	4b7f      	ldr	r3, [pc, #508]	@ (8000d18 <main+0x62c>)
 8000b1c:	701a      	strb	r2, [r3, #0]

			if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK)
 8000b1e:	4a7e      	ldr	r2, [pc, #504]	@ (8000d18 <main+0x62c>)
 8000b20:	497c      	ldr	r1, [pc, #496]	@ (8000d14 <main+0x628>)
 8000b22:	487e      	ldr	r0, [pc, #504]	@ (8000d1c <main+0x630>)
 8000b24:	f008 f89b 	bl	8008c5e <HAL_FDCAN_AddMessageToTxFifoQ>
			}
		}



		if (precarga_inv == 1)
 8000b28:	4b7f      	ldr	r3, [pc, #508]	@ (8000d28 <main+0x63c>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d102      	bne.n	8000b36 <main+0x44a>
		{
#if DEBUG
			print("CAN_ACU: Precarga correcta");
 8000b30:	487e      	ldr	r0, [pc, #504]	@ (8000d2c <main+0x640>)
 8000b32:	f000 ffa1 	bl	8001a78 <print>
	while (precarga_inv == 0 && inv_dc_bus_voltage < 300)
 8000b36:	4b7c      	ldr	r3, [pc, #496]	@ (8000d28 <main+0x63c>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d104      	bne.n	8000b48 <main+0x45c>
 8000b3e:	4b71      	ldr	r3, [pc, #452]	@ (8000d04 <main+0x618>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000b46:	db9f      	blt.n	8000a88 <main+0x39c>
#endif
		}

	}

	TxHeader_Acu.Identifier = ID_dc_bus_voltage;
 8000b48:	4b71      	ldr	r3, [pc, #452]	@ (8000d10 <main+0x624>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a71      	ldr	r2, [pc, #452]	@ (8000d14 <main+0x628>)
 8000b4e:	6013      	str	r3, [r2, #0]
	TxHeader_Acu.DataLength = 2;
 8000b50:	4b70      	ldr	r3, [pc, #448]	@ (8000d14 <main+0x628>)
 8000b52:	2202      	movs	r2, #2
 8000b54:	60da      	str	r2, [r3, #12]
	TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 8000b56:	4b6f      	ldr	r3, [pc, #444]	@ (8000d14 <main+0x628>)
 8000b58:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b5c:	605a      	str	r2, [r3, #4]
	TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 8000b5e:	4b6d      	ldr	r3, [pc, #436]	@ (8000d14 <main+0x628>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
	TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 8000b64:	4b6b      	ldr	r3, [pc, #428]	@ (8000d14 <main+0x628>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]

	TxData_Acu[0] = inv_dc_bus_voltage & 0xFF;
 8000b6a:	4b66      	ldr	r3, [pc, #408]	@ (8000d04 <main+0x618>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	b2da      	uxtb	r2, r3
 8000b70:	4b69      	ldr	r3, [pc, #420]	@ (8000d18 <main+0x62c>)
 8000b72:	701a      	strb	r2, [r3, #0]
	TxData_Acu[1] = (inv_dc_bus_voltage >> 8) & 0xFF;
 8000b74:	4b63      	ldr	r3, [pc, #396]	@ (8000d04 <main+0x618>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	121b      	asrs	r3, r3, #8
 8000b7a:	b2da      	uxtb	r2, r3
 8000b7c:	4b66      	ldr	r3, [pc, #408]	@ (8000d18 <main+0x62c>)
 8000b7e:	705a      	strb	r2, [r3, #1]
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK)
 8000b80:	4a65      	ldr	r2, [pc, #404]	@ (8000d18 <main+0x62c>)
 8000b82:	4964      	ldr	r1, [pc, #400]	@ (8000d14 <main+0x628>)
 8000b84:	4865      	ldr	r0, [pc, #404]	@ (8000d1c <main+0x630>)
 8000b86:	f008 f86a 	bl	8008c5e <HAL_FDCAN_AddMessageToTxFifoQ>
	//HAL_TIM_Base_Start_IT(&htim16);
#endif

#if 1
	// Espera a que se pulse el botón de arranque mientras se pisa el freno
	while (boton_arranque == 0)
 8000b8a:	e033      	b.n	8000bf4 <main+0x508>
	{

		HAL_ADC_Start(&hadc1);
 8000b8c:	4868      	ldr	r0, [pc, #416]	@ (8000d30 <main+0x644>)
 8000b8e:	f003 fd3d 	bl	800460c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000b92:	f04f 31ff 	mov.w	r1, #4294967295
 8000b96:	4866      	ldr	r0, [pc, #408]	@ (8000d30 <main+0x644>)
 8000b98:	f003 fe36 	bl	8004808 <HAL_ADC_PollForConversion>

		s_freno = HAL_ADC_GetValue(&hadc1);
 8000b9c:	4864      	ldr	r0, [pc, #400]	@ (8000d30 <main+0x644>)
 8000b9e:	f004 f803 	bl	8004ba8 <HAL_ADC_GetValue>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4b63      	ldr	r3, [pc, #396]	@ (8000d34 <main+0x648>)
 8000ba8:	601a      	str	r2, [r3, #0]

		HAL_ADC_Stop(&hadc1);
 8000baa:	4861      	ldr	r0, [pc, #388]	@ (8000d30 <main+0x644>)
 8000bac:	f003 fdf8 	bl	80047a0 <HAL_ADC_Stop>

		//printValue(s_freno);
		print("Pulsa botón");
 8000bb0:	4861      	ldr	r0, [pc, #388]	@ (8000d38 <main+0x64c>)
 8000bb2:	f000 ff61 	bl	8001a78 <print>

		start_button_act = HAL_GPIO_ReadPin(START_BUTTON_GPIO_Port,
 8000bb6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bba:	4859      	ldr	r0, [pc, #356]	@ (8000d20 <main+0x634>)
 8000bbc:	f009 f93a 	bl	8009e34 <HAL_GPIO_ReadPin>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	4b5d      	ldr	r3, [pc, #372]	@ (8000d3c <main+0x650>)
 8000bc6:	601a      	str	r2, [r3, #0]
											START_BUTTON_Pin);

		if (start_button_act == 1)
 8000bc8:	4b5c      	ldr	r3, [pc, #368]	@ (8000d3c <main+0x650>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d111      	bne.n	8000bf4 <main+0x508>
		{

#if DEBUG
			//printValue(s_freno);
			print("Pulsa freno");
 8000bd0:	485b      	ldr	r0, [pc, #364]	@ (8000d40 <main+0x654>)
 8000bd2:	f000 ff51 	bl	8001a78 <print>
#endif
			if (s_freno > 900)
 8000bd6:	4b57      	ldr	r3, [pc, #348]	@ (8000d34 <main+0x648>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8000bde:	dd06      	ble.n	8000bee <main+0x502>
			{
				boton_arranque = 1;
 8000be0:	4b58      	ldr	r3, [pc, #352]	@ (8000d44 <main+0x658>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	601a      	str	r2, [r3, #0]
#if DEBUG
				print("Coche arrancado correctamente");
 8000be6:	4858      	ldr	r0, [pc, #352]	@ (8000d48 <main+0x65c>)
 8000be8:	f000 ff46 	bl	8001a78 <print>
 8000bec:	e002      	b.n	8000bf4 <main+0x508>
#endif
			}
			else
			{
#if DEBUG
				print("Pulsar freno para arrancar");
 8000bee:	4857      	ldr	r0, [pc, #348]	@ (8000d4c <main+0x660>)
 8000bf0:	f000 ff42 	bl	8001a78 <print>
	while (boton_arranque == 0)
 8000bf4:	4b53      	ldr	r3, [pc, #332]	@ (8000d44 <main+0x658>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d0c7      	beq.n	8000b8c <main+0x4a0>
	}
#endif

	// Activar READY-TO-DRIVE-SOUND (RTDS) durante 2s
#if DEBUG
	print("RTDS sonando");
 8000bfc:	4854      	ldr	r0, [pc, #336]	@ (8000d50 <main+0x664>)
 8000bfe:	f000 ff3b 	bl	8001a78 <print>
#endif
#if !CALIBRATION

	flag_r2d = 1;
 8000c02:	4b54      	ldr	r3, [pc, #336]	@ (8000d54 <main+0x668>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(RTDS_GPIO_Port, RTDS_Pin, GPIO_PIN_SET); // Enciende RTDS
 8000c08:	2201      	movs	r2, #1
 8000c0a:	2102      	movs	r1, #2
 8000c0c:	4852      	ldr	r0, [pc, #328]	@ (8000d58 <main+0x66c>)
 8000c0e:	f009 f929 	bl	8009e64 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 8000c12:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000c16:	f002 ff91 	bl	8003b3c <HAL_Delay>
	HAL_GPIO_WritePin(RTDS_GPIO_Port, RTDS_Pin, GPIO_PIN_RESET); // Apaga RTDS
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2102      	movs	r1, #2
 8000c1e:	484e      	ldr	r0, [pc, #312]	@ (8000d58 <main+0x66c>)
 8000c20:	f009 f920 	bl	8009e64 <HAL_GPIO_WritePin>

#endif

#if DEBUG
	print("RTDS apagado");
 8000c24:	484d      	ldr	r0, [pc, #308]	@ (8000d5c <main+0x670>)
 8000c26:	f000 ff27 	bl	8001a78 <print>
#endif

	// Estado STAND BY inversor
	while (state != 3)
 8000c2a:	e006      	b.n	8000c3a <main+0x54e>
	{
		if (state == 3)
 8000c2c:	4b4c      	ldr	r3, [pc, #304]	@ (8000d60 <main+0x674>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b03      	cmp	r3, #3
 8000c32:	d102      	bne.n	8000c3a <main+0x54e>
		{
#if DEBUG
			print("Precarga");
 8000c34:	484b      	ldr	r0, [pc, #300]	@ (8000d64 <main+0x678>)
 8000c36:	f000 ff1f 	bl	8001a78 <print>
	while (state != 3)
 8000c3a:	4b49      	ldr	r3, [pc, #292]	@ (8000d60 <main+0x674>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b03      	cmp	r3, #3
 8000c40:	d1f4      	bne.n	8000c2c <main+0x540>
#endif
		}
	}

#if DEBUG
	print("state : stand by");
 8000c42:	4849      	ldr	r0, [pc, #292]	@ (8000d68 <main+0x67c>)
 8000c44:	f000 ff18 	bl	8001a78 <print>
#endif

	while (state != 4)
 8000c48:	e037      	b.n	8000cba <main+0x5ce>
	{
		// Estado READY inversor
		TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8000c4a:	4b48      	ldr	r3, [pc, #288]	@ (8000d6c <main+0x680>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a48      	ldr	r2, [pc, #288]	@ (8000d70 <main+0x684>)
 8000c50:	6013      	str	r3, [r2, #0]
		TxHeader_Inv.DataLength = 3;
 8000c52:	4b47      	ldr	r3, [pc, #284]	@ (8000d70 <main+0x684>)
 8000c54:	2203      	movs	r2, #3
 8000c56:	60da      	str	r2, [r3, #12]
		TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8000c58:	4b45      	ldr	r3, [pc, #276]	@ (8000d70 <main+0x684>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	605a      	str	r2, [r3, #4]

		TxData_Inv[0] = 0x0;
 8000c5e:	4b45      	ldr	r3, [pc, #276]	@ (8000d74 <main+0x688>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	701a      	strb	r2, [r3, #0]
		TxData_Inv[1] = 0x0;
 8000c64:	4b43      	ldr	r3, [pc, #268]	@ (8000d74 <main+0x688>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	705a      	strb	r2, [r3, #1]
		TxData_Inv[2] = 0x4;
 8000c6a:	4b42      	ldr	r3, [pc, #264]	@ (8000d74 <main+0x688>)
 8000c6c:	2204      	movs	r2, #4
 8000c6e:	709a      	strb	r2, [r3, #2]
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8000c70:	4a40      	ldr	r2, [pc, #256]	@ (8000d74 <main+0x688>)
 8000c72:	493f      	ldr	r1, [pc, #252]	@ (8000d70 <main+0x684>)
 8000c74:	4840      	ldr	r0, [pc, #256]	@ (8000d78 <main+0x68c>)
 8000c76:	f007 fff2 	bl	8008c5e <HAL_FDCAN_AddMessageToTxFifoQ>

		TxHeader_Inv.Identifier = 0x362;
 8000c7a:	4b3d      	ldr	r3, [pc, #244]	@ (8000d70 <main+0x684>)
 8000c7c:	f240 3262 	movw	r2, #866	@ 0x362
 8000c80:	601a      	str	r2, [r3, #0]
		TxHeader_Inv.DataLength = 4;
 8000c82:	4b3b      	ldr	r3, [pc, #236]	@ (8000d70 <main+0x684>)
 8000c84:	2204      	movs	r2, #4
 8000c86:	60da      	str	r2, [r3, #12]

		real_torque = 0;
 8000c88:	4b3c      	ldr	r3, [pc, #240]	@ (8000d7c <main+0x690>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	801a      	strh	r2, [r3, #0]

		TxData_Inv[0] = 0x0;
 8000c8e:	4b39      	ldr	r3, [pc, #228]	@ (8000d74 <main+0x688>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	701a      	strb	r2, [r3, #0]
		TxData_Inv[1] = 0x0;
 8000c94:	4b37      	ldr	r3, [pc, #220]	@ (8000d74 <main+0x688>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	705a      	strb	r2, [r3, #1]
		TxData_Inv[2] = real_torque;
 8000c9a:	4b38      	ldr	r3, [pc, #224]	@ (8000d7c <main+0x690>)
 8000c9c:	881b      	ldrh	r3, [r3, #0]
 8000c9e:	b2da      	uxtb	r2, r3
 8000ca0:	4b34      	ldr	r3, [pc, #208]	@ (8000d74 <main+0x688>)
 8000ca2:	709a      	strb	r2, [r3, #2]
		TxData_Inv[3] = 0x0;
 8000ca4:	4b33      	ldr	r3, [pc, #204]	@ (8000d74 <main+0x688>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	70da      	strb	r2, [r3, #3]
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8000caa:	4a32      	ldr	r2, [pc, #200]	@ (8000d74 <main+0x688>)
 8000cac:	4930      	ldr	r1, [pc, #192]	@ (8000d70 <main+0x684>)
 8000cae:	4832      	ldr	r0, [pc, #200]	@ (8000d78 <main+0x68c>)
 8000cb0:	f007 ffd5 	bl	8008c5e <HAL_FDCAN_AddMessageToTxFifoQ>
		HAL_Delay(10);
 8000cb4:	200a      	movs	r0, #10
 8000cb6:	f002 ff41 	bl	8003b3c <HAL_Delay>
	while (state != 4)
 8000cba:	4b29      	ldr	r3, [pc, #164]	@ (8000d60 <main+0x674>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	2b04      	cmp	r3, #4
 8000cc0:	d1c3      	bne.n	8000c4a <main+0x55e>

	}

#if DEBUG
	print("state: ready");
 8000cc2:	482f      	ldr	r0, [pc, #188]	@ (8000d80 <main+0x694>)
 8000cc4:	f000 fed8 	bl	8001a78 <print>
	{

		// Envío datos telemetría
		static uint32_t last_1s = 0;
		static uint32_t last_irq_seen = 0;
		if (HAL_GetTick() - last_1s >= 1000) {
 8000cc8:	f002 ff2c 	bl	8003b24 <HAL_GetTick>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	4b2d      	ldr	r3, [pc, #180]	@ (8000d84 <main+0x698>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	1ad3      	subs	r3, r2, r3
 8000cd4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000cd8:	f0c0 8085 	bcc.w	8000de6 <main+0x6fa>
		    last_1s = HAL_GetTick();
 8000cdc:	f002 ff22 	bl	8003b24 <HAL_GetTick>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	4a28      	ldr	r2, [pc, #160]	@ (8000d84 <main+0x698>)
 8000ce4:	6013      	str	r3, [r2, #0]
		    char hb[96];
		    snprintf(hb, sizeof(hb),
 8000ce6:	4b28      	ldr	r3, [pc, #160]	@ (8000d88 <main+0x69c>)
 8000ce8:	681e      	ldr	r6, [r3, #0]
 8000cea:	4b28      	ldr	r3, [pc, #160]	@ (8000d8c <main+0x6a0>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a28      	ldr	r2, [pc, #160]	@ (8000d90 <main+0x6a4>)
 8000cf0:	6812      	ldr	r2, [r2, #0]
		             "[TEL] irq=%lu sent=%lu fail=%lu%s  Vdc=%d  rpm=%d  state=%u\r\n",
		             (unsigned long)tel_irq_cnt,
		             (unsigned long)tel_sent_ok,
		             (unsigned long)tel_sent_fail,
		             (tel_irq_cnt == last_irq_seen) ? " (NO NEW IRQ!)" : "",
 8000cf2:	4925      	ldr	r1, [pc, #148]	@ (8000d88 <main+0x69c>)
 8000cf4:	6808      	ldr	r0, [r1, #0]
 8000cf6:	4927      	ldr	r1, [pc, #156]	@ (8000d94 <main+0x6a8>)
 8000cf8:	6809      	ldr	r1, [r1, #0]
		    snprintf(hb, sizeof(hb),
 8000cfa:	4288      	cmp	r0, r1
 8000cfc:	d14e      	bne.n	8000d9c <main+0x6b0>
 8000cfe:	4926      	ldr	r1, [pc, #152]	@ (8000d98 <main+0x6ac>)
 8000d00:	e04d      	b.n	8000d9e <main+0x6b2>
 8000d02:	bf00      	nop
 8000d04:	240007a4 	.word	0x240007a4
 8000d08:	080146b4 	.word	0x080146b4
 8000d0c:	24000840 	.word	0x24000840
 8000d10:	24000004 	.word	0x24000004
 8000d14:	24000704 	.word	0x24000704
 8000d18:	24000788 	.word	0x24000788
 8000d1c:	240002a4 	.word	0x240002a4
 8000d20:	58021400 	.word	0x58021400
 8000d24:	240007d8 	.word	0x240007d8
 8000d28:	240000a0 	.word	0x240000a0
 8000d2c:	080146cc 	.word	0x080146cc
 8000d30:	240000ac 	.word	0x240000ac
 8000d34:	240007bc 	.word	0x240007bc
 8000d38:	080146e8 	.word	0x080146e8
 8000d3c:	240007a0 	.word	0x240007a0
 8000d40:	080146f8 	.word	0x080146f8
 8000d44:	240000a8 	.word	0x240000a8
 8000d48:	08014704 	.word	0x08014704
 8000d4c:	08014724 	.word	0x08014724
 8000d50:	08014740 	.word	0x08014740
 8000d54:	2400093c 	.word	0x2400093c
 8000d58:	58020800 	.word	0x58020800
 8000d5c:	08014750 	.word	0x08014750
 8000d60:	240007ca 	.word	0x240007ca
 8000d64:	08014760 	.word	0x08014760
 8000d68:	0801476c 	.word	0x0801476c
 8000d6c:	24000000 	.word	0x24000000
 8000d70:	240006b8 	.word	0x240006b8
 8000d74:	24000778 	.word	0x24000778
 8000d78:	24000204 	.word	0x24000204
 8000d7c:	240007c8 	.word	0x240007c8
 8000d80:	08014780 	.word	0x08014780
 8000d84:	24000944 	.word	0x24000944
 8000d88:	240006ac 	.word	0x240006ac
 8000d8c:	240006b0 	.word	0x240006b0
 8000d90:	240006b4 	.word	0x240006b4
 8000d94:	24000948 	.word	0x24000948
 8000d98:	08014790 	.word	0x08014790
 8000d9c:	4918      	ldr	r1, [pc, #96]	@ (8000e00 <main+0x714>)
 8000d9e:	4819      	ldr	r0, [pc, #100]	@ (8000e04 <main+0x718>)
 8000da0:	6800      	ldr	r0, [r0, #0]
 8000da2:	4c19      	ldr	r4, [pc, #100]	@ (8000e08 <main+0x71c>)
 8000da4:	6824      	ldr	r4, [r4, #0]
 8000da6:	4d19      	ldr	r5, [pc, #100]	@ (8000e0c <main+0x720>)
 8000da8:	782d      	ldrb	r5, [r5, #0]
 8000daa:	f107 0c04 	add.w	ip, r7, #4
 8000dae:	9505      	str	r5, [sp, #20]
 8000db0:	9404      	str	r4, [sp, #16]
 8000db2:	9003      	str	r0, [sp, #12]
 8000db4:	9102      	str	r1, [sp, #8]
 8000db6:	9201      	str	r2, [sp, #4]
 8000db8:	9300      	str	r3, [sp, #0]
 8000dba:	4633      	mov	r3, r6
 8000dbc:	4a14      	ldr	r2, [pc, #80]	@ (8000e10 <main+0x724>)
 8000dbe:	2160      	movs	r1, #96	@ 0x60
 8000dc0:	4660      	mov	r0, ip
 8000dc2:	f012 febb 	bl	8013b3c <sniprintf>
		             inv_dc_bus_voltage, e_machine_rpm, state);
		    HAL_UART_Transmit(&huart2, (uint8_t*)hb, strlen(hb), HAL_MAX_DELAY);
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff faa1 	bl	8000310 <strlen>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	b29a      	uxth	r2, r3
 8000dd2:	1d39      	adds	r1, r7, #4
 8000dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd8:	480e      	ldr	r0, [pc, #56]	@ (8000e14 <main+0x728>)
 8000dda:	f010 fc23 	bl	8011624 <HAL_UART_Transmit>
		    last_irq_seen = tel_irq_cnt;
 8000dde:	4b0e      	ldr	r3, [pc, #56]	@ (8000e18 <main+0x72c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a0e      	ldr	r2, [pc, #56]	@ (8000e1c <main+0x730>)
 8000de4:	6013      	str	r3, [r2, #0]

		}

		if (tel_tick >= 500) {
 8000de6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e20 <main+0x734>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000dee:	f4ff af6b 	bcc.w	8000cc8 <main+0x5dc>
		        tel_tick = 0;          // consume the tick
 8000df2:	4b0b      	ldr	r3, [pc, #44]	@ (8000e20 <main+0x734>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
		        tel_send_now();        // SPI + UART OK here (foreground)
 8000df8:	f001 fb72 	bl	80024e0 <tel_send_now>
	{
 8000dfc:	e764      	b.n	8000cc8 <main+0x5dc>
 8000dfe:	bf00      	nop
 8000e00:	080147a0 	.word	0x080147a0
 8000e04:	240007a4 	.word	0x240007a4
 8000e08:	240007a8 	.word	0x240007a8
 8000e0c:	240007ca 	.word	0x240007ca
 8000e10:	080147a4 	.word	0x080147a4
 8000e14:	24000614 	.word	0x24000614
 8000e18:	240006ac 	.word	0x240006ac
 8000e1c:	24000948 	.word	0x24000948
 8000e20:	240006a8 	.word	0x240006a8

08000e24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b09c      	sub	sp, #112	@ 0x70
 8000e28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e2e:	224c      	movs	r2, #76	@ 0x4c
 8000e30:	2100      	movs	r1, #0
 8000e32:	4618      	mov	r0, r3
 8000e34:	f012 feda 	bl	8013bec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	2220      	movs	r2, #32
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f012 fed4 	bl	8013bec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000e44:	2002      	movs	r0, #2
 8000e46:	f009 f827 	bl	8009e98 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	603b      	str	r3, [r7, #0]
 8000e4e:	4b2b      	ldr	r3, [pc, #172]	@ (8000efc <SystemClock_Config+0xd8>)
 8000e50:	699b      	ldr	r3, [r3, #24]
 8000e52:	4a2a      	ldr	r2, [pc, #168]	@ (8000efc <SystemClock_Config+0xd8>)
 8000e54:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000e58:	6193      	str	r3, [r2, #24]
 8000e5a:	4b28      	ldr	r3, [pc, #160]	@ (8000efc <SystemClock_Config+0xd8>)
 8000e5c:	699b      	ldr	r3, [r3, #24]
 8000e5e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e62:	603b      	str	r3, [r7, #0]
 8000e64:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e66:	bf00      	nop
 8000e68:	4b24      	ldr	r3, [pc, #144]	@ (8000efc <SystemClock_Config+0xd8>)
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e74:	d1f8      	bne.n	8000e68 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e76:	2301      	movs	r3, #1
 8000e78:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e7a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e80:	2302      	movs	r3, #2
 8000e82:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e84:	2302      	movs	r3, #2
 8000e86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8000e8c:	232c      	movs	r3, #44	@ 0x2c
 8000e8e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000e90:	2301      	movs	r3, #1
 8000e92:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e94:	2304      	movs	r3, #4
 8000e96:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000e9c:	230c      	movs	r3, #12
 8000e9e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ea8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eac:	4618      	mov	r0, r3
 8000eae:	f009 f82d 	bl	8009f0c <HAL_RCC_OscConfig>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000eb8:	f001 fbe8 	bl	800268c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ebc:	233f      	movs	r3, #63	@ 0x3f
 8000ebe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ec8:	2308      	movs	r3, #8
 8000eca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ecc:	2340      	movs	r3, #64	@ 0x40
 8000ece:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ed0:	2340      	movs	r3, #64	@ 0x40
 8000ed2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ed4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ed8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000eda:	2340      	movs	r3, #64	@ 0x40
 8000edc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	2103      	movs	r1, #3
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f009 fbec 	bl	800a6c0 <HAL_RCC_ClockConfig>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000eee:	f001 fbcd 	bl	800268c <Error_Handler>
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	3770      	adds	r7, #112	@ 0x70
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	58024800 	.word	0x58024800

08000f00 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b0ae      	sub	sp, #184	@ 0xb8
 8000f04:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f06:	463b      	mov	r3, r7
 8000f08:	22b8      	movs	r2, #184	@ 0xb8
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f012 fe6d 	bl	8013bec <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SDMMC;
 8000f12:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8000f16:	f04f 0300 	mov.w	r3, #0
 8000f1a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000f22:	2310      	movs	r3, #16
 8000f24:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000f26:	2302      	movs	r3, #2
 8000f28:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 1;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000f32:	23c0      	movs	r3, #192	@ 0xc0
 8000f34:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000f36:	2300      	movs	r3, #0
 8000f38:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000f3e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f42:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000f44:	2300      	movs	r3, #0
 8000f46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f4a:	463b      	mov	r3, r7
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f009 ff43 	bl	800add8 <HAL_RCCEx_PeriphCLKConfig>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8000f58:	f001 fb98 	bl	800268c <Error_Handler>
  }
}
 8000f5c:	bf00      	nop
 8000f5e:	37b8      	adds	r7, #184	@ 0xb8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08c      	sub	sp, #48	@ 0x30
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f76:	463b      	mov	r3, r7
 8000f78:	2224      	movs	r2, #36	@ 0x24
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f012 fe35 	bl	8013bec <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f82:	4b41      	ldr	r3, [pc, #260]	@ (8001088 <MX_ADC1_Init+0x124>)
 8000f84:	4a41      	ldr	r2, [pc, #260]	@ (800108c <MX_ADC1_Init+0x128>)
 8000f86:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000f88:	4b3f      	ldr	r3, [pc, #252]	@ (8001088 <MX_ADC1_Init+0x124>)
 8000f8a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000f8e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f90:	4b3d      	ldr	r3, [pc, #244]	@ (8001088 <MX_ADC1_Init+0x124>)
 8000f92:	2208      	movs	r2, #8
 8000f94:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f96:	4b3c      	ldr	r3, [pc, #240]	@ (8001088 <MX_ADC1_Init+0x124>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000f9c:	4b3a      	ldr	r3, [pc, #232]	@ (8001088 <MX_ADC1_Init+0x124>)
 8000f9e:	2208      	movs	r2, #8
 8000fa0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fa2:	4b39      	ldr	r3, [pc, #228]	@ (8001088 <MX_ADC1_Init+0x124>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000fa8:	4b37      	ldr	r3, [pc, #220]	@ (8001088 <MX_ADC1_Init+0x124>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8000fae:	4b36      	ldr	r3, [pc, #216]	@ (8001088 <MX_ADC1_Init+0x124>)
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fb4:	4b34      	ldr	r3, [pc, #208]	@ (8001088 <MX_ADC1_Init+0x124>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fbc:	4b32      	ldr	r3, [pc, #200]	@ (8001088 <MX_ADC1_Init+0x124>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fc2:	4b31      	ldr	r3, [pc, #196]	@ (8001088 <MX_ADC1_Init+0x124>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000fc8:	4b2f      	ldr	r3, [pc, #188]	@ (8001088 <MX_ADC1_Init+0x124>)
 8000fca:	2203      	movs	r2, #3
 8000fcc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fce:	4b2e      	ldr	r3, [pc, #184]	@ (8001088 <MX_ADC1_Init+0x124>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000fd4:	4b2c      	ldr	r3, [pc, #176]	@ (8001088 <MX_ADC1_Init+0x124>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000fda:	4b2b      	ldr	r3, [pc, #172]	@ (8001088 <MX_ADC1_Init+0x124>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8000fe2:	4b29      	ldr	r3, [pc, #164]	@ (8001088 <MX_ADC1_Init+0x124>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fe8:	4827      	ldr	r0, [pc, #156]	@ (8001088 <MX_ADC1_Init+0x124>)
 8000fea:	f003 f907 	bl	80041fc <HAL_ADC_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000ff4:	f001 fb4a 	bl	800268c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ffc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001000:	4619      	mov	r1, r3
 8001002:	4821      	ldr	r0, [pc, #132]	@ (8001088 <MX_ADC1_Init+0x124>)
 8001004:	f005 f8e6 	bl	80061d4 <HAL_ADCEx_MultiModeConfigChannel>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800100e:	f001 fb3d 	bl	800268c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001012:	4b1f      	ldr	r3, [pc, #124]	@ (8001090 <MX_ADC1_Init+0x12c>)
 8001014:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001016:	2306      	movs	r3, #6
 8001018:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 800101a:	2305      	movs	r3, #5
 800101c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800101e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001022:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001024:	2304      	movs	r3, #4
 8001026:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800102c:	2300      	movs	r3, #0
 800102e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001032:	463b      	mov	r3, r7
 8001034:	4619      	mov	r1, r3
 8001036:	4814      	ldr	r0, [pc, #80]	@ (8001088 <MX_ADC1_Init+0x124>)
 8001038:	f004 f81c 	bl	8005074 <HAL_ADC_ConfigChannel>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001042:	f001 fb23 	bl	800268c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001046:	4b13      	ldr	r3, [pc, #76]	@ (8001094 <MX_ADC1_Init+0x130>)
 8001048:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800104a:	230c      	movs	r3, #12
 800104c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800104e:	463b      	mov	r3, r7
 8001050:	4619      	mov	r1, r3
 8001052:	480d      	ldr	r0, [pc, #52]	@ (8001088 <MX_ADC1_Init+0x124>)
 8001054:	f004 f80e 	bl	8005074 <HAL_ADC_ConfigChannel>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800105e:	f001 fb15 	bl	800268c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001062:	4b0d      	ldr	r3, [pc, #52]	@ (8001098 <MX_ADC1_Init+0x134>)
 8001064:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001066:	2312      	movs	r3, #18
 8001068:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800106a:	463b      	mov	r3, r7
 800106c:	4619      	mov	r1, r3
 800106e:	4806      	ldr	r0, [pc, #24]	@ (8001088 <MX_ADC1_Init+0x124>)
 8001070:	f004 f800 	bl	8005074 <HAL_ADC_ConfigChannel>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 800107a:	f001 fb07 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800107e:	bf00      	nop
 8001080:	3730      	adds	r7, #48	@ 0x30
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	240000ac 	.word	0x240000ac
 800108c:	40022000 	.word	0x40022000
 8001090:	10c00010 	.word	0x10c00010
 8001094:	14f00020 	.word	0x14f00020
 8001098:	08600004 	.word	0x08600004

0800109c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	@ 0x28
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	2224      	movs	r2, #36	@ 0x24
 80010a6:	2100      	movs	r1, #0
 80010a8:	4618      	mov	r0, r3
 80010aa:	f012 fd9f 	bl	8013bec <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80010ae:	4b2c      	ldr	r3, [pc, #176]	@ (8001160 <MX_ADC2_Init+0xc4>)
 80010b0:	4a2c      	ldr	r2, [pc, #176]	@ (8001164 <MX_ADC2_Init+0xc8>)
 80010b2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80010b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001160 <MX_ADC2_Init+0xc4>)
 80010b6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80010ba:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80010bc:	4b28      	ldr	r3, [pc, #160]	@ (8001160 <MX_ADC2_Init+0xc4>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010c2:	4b27      	ldr	r3, [pc, #156]	@ (8001160 <MX_ADC2_Init+0xc4>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010c8:	4b25      	ldr	r3, [pc, #148]	@ (8001160 <MX_ADC2_Init+0xc4>)
 80010ca:	2204      	movs	r2, #4
 80010cc:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80010ce:	4b24      	ldr	r3, [pc, #144]	@ (8001160 <MX_ADC2_Init+0xc4>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80010d4:	4b22      	ldr	r3, [pc, #136]	@ (8001160 <MX_ADC2_Init+0xc4>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80010da:	4b21      	ldr	r3, [pc, #132]	@ (8001160 <MX_ADC2_Init+0xc4>)
 80010dc:	2201      	movs	r2, #1
 80010de:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80010e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001160 <MX_ADC2_Init+0xc4>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001160 <MX_ADC2_Init+0xc4>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001160 <MX_ADC2_Init+0xc4>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80010f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001160 <MX_ADC2_Init+0xc4>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010fa:	4b19      	ldr	r3, [pc, #100]	@ (8001160 <MX_ADC2_Init+0xc4>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001100:	4b17      	ldr	r3, [pc, #92]	@ (8001160 <MX_ADC2_Init+0xc4>)
 8001102:	2200      	movs	r2, #0
 8001104:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8001106:	4b16      	ldr	r3, [pc, #88]	@ (8001160 <MX_ADC2_Init+0xc4>)
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 800110e:	4b14      	ldr	r3, [pc, #80]	@ (8001160 <MX_ADC2_Init+0xc4>)
 8001110:	2201      	movs	r2, #1
 8001112:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001114:	4812      	ldr	r0, [pc, #72]	@ (8001160 <MX_ADC2_Init+0xc4>)
 8001116:	f003 f871 	bl	80041fc <HAL_ADC_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8001120:	f001 fab4 	bl	800268c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001124:	4b10      	ldr	r3, [pc, #64]	@ (8001168 <MX_ADC2_Init+0xcc>)
 8001126:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001128:	2306      	movs	r3, #6
 800112a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800112c:	2300      	movs	r3, #0
 800112e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001130:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001134:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001136:	2304      	movs	r3, #4
 8001138:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001144:	1d3b      	adds	r3, r7, #4
 8001146:	4619      	mov	r1, r3
 8001148:	4805      	ldr	r0, [pc, #20]	@ (8001160 <MX_ADC2_Init+0xc4>)
 800114a:	f003 ff93 	bl	8005074 <HAL_ADC_ConfigChannel>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_ADC2_Init+0xbc>
  {
    Error_Handler();
 8001154:	f001 fa9a 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001158:	bf00      	nop
 800115a:	3728      	adds	r7, #40	@ 0x28
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	2400011c 	.word	0x2400011c
 8001164:	40022100 	.word	0x40022100
 8001168:	25b00200 	.word	0x25b00200

0800116c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b088      	sub	sp, #32
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001172:	4b3b      	ldr	r3, [pc, #236]	@ (8001260 <MX_FDCAN1_Init+0xf4>)
 8001174:	4a3b      	ldr	r2, [pc, #236]	@ (8001264 <MX_FDCAN1_Init+0xf8>)
 8001176:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001178:	4b39      	ldr	r3, [pc, #228]	@ (8001260 <MX_FDCAN1_Init+0xf4>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800117e:	4b38      	ldr	r3, [pc, #224]	@ (8001260 <MX_FDCAN1_Init+0xf4>)
 8001180:	2200      	movs	r2, #0
 8001182:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8001184:	4b36      	ldr	r3, [pc, #216]	@ (8001260 <MX_FDCAN1_Init+0xf4>)
 8001186:	2201      	movs	r2, #1
 8001188:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800118a:	4b35      	ldr	r3, [pc, #212]	@ (8001260 <MX_FDCAN1_Init+0xf4>)
 800118c:	2200      	movs	r2, #0
 800118e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001190:	4b33      	ldr	r3, [pc, #204]	@ (8001260 <MX_FDCAN1_Init+0xf4>)
 8001192:	2200      	movs	r2, #0
 8001194:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 6;
 8001196:	4b32      	ldr	r3, [pc, #200]	@ (8001260 <MX_FDCAN1_Init+0xf4>)
 8001198:	2206      	movs	r2, #6
 800119a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800119c:	4b30      	ldr	r3, [pc, #192]	@ (8001260 <MX_FDCAN1_Init+0xf4>)
 800119e:	2201      	movs	r2, #1
 80011a0:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 80011a2:	4b2f      	ldr	r3, [pc, #188]	@ (8001260 <MX_FDCAN1_Init+0xf4>)
 80011a4:	2202      	movs	r2, #2
 80011a6:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 80011a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001260 <MX_FDCAN1_Init+0xf4>)
 80011aa:	2205      	movs	r2, #5
 80011ac:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80011ae:	4b2c      	ldr	r3, [pc, #176]	@ (8001260 <MX_FDCAN1_Init+0xf4>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80011b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001260 <MX_FDCAN1_Init+0xf4>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80011ba:	4b29      	ldr	r3, [pc, #164]	@ (8001260 <MX_FDCAN1_Init+0xf4>)
 80011bc:	2201      	movs	r2, #1
 80011be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80011c0:	4b27      	ldr	r3, [pc, #156]	@ (8001260 <MX_FDCAN1_Init+0xf4>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80011c6:	4b26      	ldr	r3, [pc, #152]	@ (8001260 <MX_FDCAN1_Init+0xf4>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 80011cc:	4b24      	ldr	r3, [pc, #144]	@ (8001260 <MX_FDCAN1_Init+0xf4>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 1;
 80011d2:	4b23      	ldr	r3, [pc, #140]	@ (8001260 <MX_FDCAN1_Init+0xf4>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 80011d8:	4b21      	ldr	r3, [pc, #132]	@ (8001260 <MX_FDCAN1_Init+0xf4>)
 80011da:	2220      	movs	r2, #32
 80011dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80011de:	4b20      	ldr	r3, [pc, #128]	@ (8001260 <MX_FDCAN1_Init+0xf4>)
 80011e0:	2204      	movs	r2, #4
 80011e2:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 80011e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001260 <MX_FDCAN1_Init+0xf4>)
 80011e6:	2220      	movs	r2, #32
 80011e8:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80011ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001260 <MX_FDCAN1_Init+0xf4>)
 80011ec:	2204      	movs	r2, #4
 80011ee:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80011f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001260 <MX_FDCAN1_Init+0xf4>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80011f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001260 <MX_FDCAN1_Init+0xf4>)
 80011f8:	2204      	movs	r2, #4
 80011fa:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80011fc:	4b18      	ldr	r3, [pc, #96]	@ (8001260 <MX_FDCAN1_Init+0xf4>)
 80011fe:	2200      	movs	r2, #0
 8001200:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001202:	4b17      	ldr	r3, [pc, #92]	@ (8001260 <MX_FDCAN1_Init+0xf4>)
 8001204:	2200      	movs	r2, #0
 8001206:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 8001208:	4b15      	ldr	r3, [pc, #84]	@ (8001260 <MX_FDCAN1_Init+0xf4>)
 800120a:	2220      	movs	r2, #32
 800120c:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800120e:	4b14      	ldr	r3, [pc, #80]	@ (8001260 <MX_FDCAN1_Init+0xf4>)
 8001210:	2200      	movs	r2, #0
 8001212:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001214:	4b12      	ldr	r3, [pc, #72]	@ (8001260 <MX_FDCAN1_Init+0xf4>)
 8001216:	2204      	movs	r2, #4
 8001218:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800121a:	4811      	ldr	r0, [pc, #68]	@ (8001260 <MX_FDCAN1_Init+0xf4>)
 800121c:	f007 faa0 	bl	8008760 <HAL_FDCAN_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8001226:	f001 fa31 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800122a:	2300      	movs	r3, #0
 800122c:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001232:	2302      	movs	r3, #2
 8001234:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001236:	2301      	movs	r3, #1
 8001238:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 800123a:	2300      	movs	r3, #0
 800123c:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8001242:	463b      	mov	r3, r7
 8001244:	4619      	mov	r1, r3
 8001246:	4806      	ldr	r0, [pc, #24]	@ (8001260 <MX_FDCAN1_Init+0xf4>)
 8001248:	f007 fc68 	bl	8008b1c <HAL_FDCAN_ConfigFilter>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_FDCAN1_Init+0xea>
	{
		Error_Handler();
 8001252:	f001 fa1b 	bl	800268c <Error_Handler>
	}
  /* USER CODE END FDCAN1_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	3720      	adds	r7, #32
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	24000204 	.word	0x24000204
 8001264:	4000a000 	.word	0x4000a000

08001268 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 800126e:	4b3b      	ldr	r3, [pc, #236]	@ (800135c <MX_FDCAN2_Init+0xf4>)
 8001270:	4a3b      	ldr	r2, [pc, #236]	@ (8001360 <MX_FDCAN2_Init+0xf8>)
 8001272:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001274:	4b39      	ldr	r3, [pc, #228]	@ (800135c <MX_FDCAN2_Init+0xf4>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800127a:	4b38      	ldr	r3, [pc, #224]	@ (800135c <MX_FDCAN2_Init+0xf4>)
 800127c:	2200      	movs	r2, #0
 800127e:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001280:	4b36      	ldr	r3, [pc, #216]	@ (800135c <MX_FDCAN2_Init+0xf4>)
 8001282:	2200      	movs	r2, #0
 8001284:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001286:	4b35      	ldr	r3, [pc, #212]	@ (800135c <MX_FDCAN2_Init+0xf4>)
 8001288:	2200      	movs	r2, #0
 800128a:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800128c:	4b33      	ldr	r3, [pc, #204]	@ (800135c <MX_FDCAN2_Init+0xf4>)
 800128e:	2200      	movs	r2, #0
 8001290:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 6;
 8001292:	4b32      	ldr	r3, [pc, #200]	@ (800135c <MX_FDCAN2_Init+0xf4>)
 8001294:	2206      	movs	r2, #6
 8001296:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001298:	4b30      	ldr	r3, [pc, #192]	@ (800135c <MX_FDCAN2_Init+0xf4>)
 800129a:	2201      	movs	r2, #1
 800129c:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 800129e:	4b2f      	ldr	r3, [pc, #188]	@ (800135c <MX_FDCAN2_Init+0xf4>)
 80012a0:	2202      	movs	r2, #2
 80012a2:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 5;
 80012a4:	4b2d      	ldr	r3, [pc, #180]	@ (800135c <MX_FDCAN2_Init+0xf4>)
 80012a6:	2205      	movs	r2, #5
 80012a8:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80012aa:	4b2c      	ldr	r3, [pc, #176]	@ (800135c <MX_FDCAN2_Init+0xf4>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80012b0:	4b2a      	ldr	r3, [pc, #168]	@ (800135c <MX_FDCAN2_Init+0xf4>)
 80012b2:	2201      	movs	r2, #1
 80012b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80012b6:	4b29      	ldr	r3, [pc, #164]	@ (800135c <MX_FDCAN2_Init+0xf4>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80012bc:	4b27      	ldr	r3, [pc, #156]	@ (800135c <MX_FDCAN2_Init+0xf4>)
 80012be:	2201      	movs	r2, #1
 80012c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 80012c2:	4b26      	ldr	r3, [pc, #152]	@ (800135c <MX_FDCAN2_Init+0xf4>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 1;
 80012c8:	4b24      	ldr	r3, [pc, #144]	@ (800135c <MX_FDCAN2_Init+0xf4>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 1;
 80012ce:	4b23      	ldr	r3, [pc, #140]	@ (800135c <MX_FDCAN2_Init+0xf4>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 16;
 80012d4:	4b21      	ldr	r3, [pc, #132]	@ (800135c <MX_FDCAN2_Init+0xf4>)
 80012d6:	2210      	movs	r2, #16
 80012d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80012da:	4b20      	ldr	r3, [pc, #128]	@ (800135c <MX_FDCAN2_Init+0xf4>)
 80012dc:	2204      	movs	r2, #4
 80012de:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 16;
 80012e0:	4b1e      	ldr	r3, [pc, #120]	@ (800135c <MX_FDCAN2_Init+0xf4>)
 80012e2:	2210      	movs	r2, #16
 80012e4:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80012e6:	4b1d      	ldr	r3, [pc, #116]	@ (800135c <MX_FDCAN2_Init+0xf4>)
 80012e8:	2204      	movs	r2, #4
 80012ea:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 80012ec:	4b1b      	ldr	r3, [pc, #108]	@ (800135c <MX_FDCAN2_Init+0xf4>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80012f2:	4b1a      	ldr	r3, [pc, #104]	@ (800135c <MX_FDCAN2_Init+0xf4>)
 80012f4:	2204      	movs	r2, #4
 80012f6:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 80012f8:	4b18      	ldr	r3, [pc, #96]	@ (800135c <MX_FDCAN2_Init+0xf4>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 80012fe:	4b17      	ldr	r3, [pc, #92]	@ (800135c <MX_FDCAN2_Init+0xf4>)
 8001300:	2200      	movs	r2, #0
 8001302:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 16;
 8001304:	4b15      	ldr	r3, [pc, #84]	@ (800135c <MX_FDCAN2_Init+0xf4>)
 8001306:	2210      	movs	r2, #16
 8001308:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800130a:	4b14      	ldr	r3, [pc, #80]	@ (800135c <MX_FDCAN2_Init+0xf4>)
 800130c:	2200      	movs	r2, #0
 800130e:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001310:	4b12      	ldr	r3, [pc, #72]	@ (800135c <MX_FDCAN2_Init+0xf4>)
 8001312:	2204      	movs	r2, #4
 8001314:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001316:	4811      	ldr	r0, [pc, #68]	@ (800135c <MX_FDCAN2_Init+0xf4>)
 8001318:	f007 fa22 	bl	8008760 <HAL_FDCAN_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_FDCAN2_Init+0xbe>
  {
    Error_Handler();
 8001322:	f001 f9b3 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8001326:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800132a:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001330:	2302      	movs	r3, #2
 8001332:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001334:	2301      	movs	r3, #1
 8001336:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 8001338:	2300      	movs	r3, #0
 800133a:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 8001340:	463b      	mov	r3, r7
 8001342:	4619      	mov	r1, r3
 8001344:	4805      	ldr	r0, [pc, #20]	@ (800135c <MX_FDCAN2_Init+0xf4>)
 8001346:	f007 fbe9 	bl	8008b1c <HAL_FDCAN_ConfigFilter>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_FDCAN2_Init+0xec>
	{
		Error_Handler();
 8001350:	f001 f99c 	bl	800268c <Error_Handler>
	}
  /* USER CODE END FDCAN2_Init 2 */

}
 8001354:	bf00      	nop
 8001356:	3720      	adds	r7, #32
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	240002a4 	.word	0x240002a4
 8001360:	4000a400 	.word	0x4000a400

08001364 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b088      	sub	sp, #32
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 800136a:	4b3b      	ldr	r3, [pc, #236]	@ (8001458 <MX_FDCAN3_Init+0xf4>)
 800136c:	4a3b      	ldr	r2, [pc, #236]	@ (800145c <MX_FDCAN3_Init+0xf8>)
 800136e:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001370:	4b39      	ldr	r3, [pc, #228]	@ (8001458 <MX_FDCAN3_Init+0xf4>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8001376:	4b38      	ldr	r3, [pc, #224]	@ (8001458 <MX_FDCAN3_Init+0xf4>)
 8001378:	2200      	movs	r2, #0
 800137a:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 800137c:	4b36      	ldr	r3, [pc, #216]	@ (8001458 <MX_FDCAN3_Init+0xf4>)
 800137e:	2200      	movs	r2, #0
 8001380:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8001382:	4b35      	ldr	r3, [pc, #212]	@ (8001458 <MX_FDCAN3_Init+0xf4>)
 8001384:	2200      	movs	r2, #0
 8001386:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8001388:	4b33      	ldr	r3, [pc, #204]	@ (8001458 <MX_FDCAN3_Init+0xf4>)
 800138a:	2200      	movs	r2, #0
 800138c:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 6;
 800138e:	4b32      	ldr	r3, [pc, #200]	@ (8001458 <MX_FDCAN3_Init+0xf4>)
 8001390:	2206      	movs	r2, #6
 8001392:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8001394:	4b30      	ldr	r3, [pc, #192]	@ (8001458 <MX_FDCAN3_Init+0xf4>)
 8001396:	2201      	movs	r2, #1
 8001398:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 800139a:	4b2f      	ldr	r3, [pc, #188]	@ (8001458 <MX_FDCAN3_Init+0xf4>)
 800139c:	2202      	movs	r2, #2
 800139e:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 5;
 80013a0:	4b2d      	ldr	r3, [pc, #180]	@ (8001458 <MX_FDCAN3_Init+0xf4>)
 80013a2:	2205      	movs	r2, #5
 80013a4:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 80013a6:	4b2c      	ldr	r3, [pc, #176]	@ (8001458 <MX_FDCAN3_Init+0xf4>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 80013ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001458 <MX_FDCAN3_Init+0xf4>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 80013b2:	4b29      	ldr	r3, [pc, #164]	@ (8001458 <MX_FDCAN3_Init+0xf4>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 80013b8:	4b27      	ldr	r3, [pc, #156]	@ (8001458 <MX_FDCAN3_Init+0xf4>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 80013be:	4b26      	ldr	r3, [pc, #152]	@ (8001458 <MX_FDCAN3_Init+0xf4>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan3.Init.StdFiltersNbr = 1;
 80013c4:	4b24      	ldr	r3, [pc, #144]	@ (8001458 <MX_FDCAN3_Init+0xf4>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan3.Init.ExtFiltersNbr = 1;
 80013ca:	4b23      	ldr	r3, [pc, #140]	@ (8001458 <MX_FDCAN3_Init+0xf4>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 16;
 80013d0:	4b21      	ldr	r3, [pc, #132]	@ (8001458 <MX_FDCAN3_Init+0xf4>)
 80013d2:	2210      	movs	r2, #16
 80013d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80013d6:	4b20      	ldr	r3, [pc, #128]	@ (8001458 <MX_FDCAN3_Init+0xf4>)
 80013d8:	2204      	movs	r2, #4
 80013da:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 16;
 80013dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001458 <MX_FDCAN3_Init+0xf4>)
 80013de:	2210      	movs	r2, #16
 80013e0:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80013e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001458 <MX_FDCAN3_Init+0xf4>)
 80013e4:	2204      	movs	r2, #4
 80013e6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 80013e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001458 <MX_FDCAN3_Init+0xf4>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80013ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001458 <MX_FDCAN3_Init+0xf4>)
 80013f0:	2204      	movs	r2, #4
 80013f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 80013f4:	4b18      	ldr	r3, [pc, #96]	@ (8001458 <MX_FDCAN3_Init+0xf4>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 80013fa:	4b17      	ldr	r3, [pc, #92]	@ (8001458 <MX_FDCAN3_Init+0xf4>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 16;
 8001400:	4b15      	ldr	r3, [pc, #84]	@ (8001458 <MX_FDCAN3_Init+0xf4>)
 8001402:	2210      	movs	r2, #16
 8001404:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001406:	4b14      	ldr	r3, [pc, #80]	@ (8001458 <MX_FDCAN3_Init+0xf4>)
 8001408:	2200      	movs	r2, #0
 800140a:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800140c:	4b12      	ldr	r3, [pc, #72]	@ (8001458 <MX_FDCAN3_Init+0xf4>)
 800140e:	2204      	movs	r2, #4
 8001410:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8001412:	4811      	ldr	r0, [pc, #68]	@ (8001458 <MX_FDCAN3_Init+0xf4>)
 8001414:	f007 f9a4 	bl	8008760 <HAL_FDCAN_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_FDCAN3_Init+0xbe>
  {
    Error_Handler();
 800141e:	f001 f935 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8001422:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001426:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800142c:	2302      	movs	r3, #2
 800142e:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001430:	2301      	movs	r3, #1
 8001432:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 8001434:	2300      	movs	r3, #0
 8001436:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan3, &sFilterConfig) != HAL_OK)
 800143c:	463b      	mov	r3, r7
 800143e:	4619      	mov	r1, r3
 8001440:	4805      	ldr	r0, [pc, #20]	@ (8001458 <MX_FDCAN3_Init+0xf4>)
 8001442:	f007 fb6b 	bl	8008b1c <HAL_FDCAN_ConfigFilter>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_FDCAN3_Init+0xec>
	{
		Error_Handler();
 800144c:	f001 f91e 	bl	800268c <Error_Handler>
	}

  /* USER CODE END FDCAN3_Init 2 */

}
 8001450:	bf00      	nop
 8001452:	3720      	adds	r7, #32
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	24000344 	.word	0x24000344
 800145c:	4000d400 	.word	0x4000d400

08001460 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001464:	4b0b      	ldr	r3, [pc, #44]	@ (8001494 <MX_SDMMC1_SD_Init+0x34>)
 8001466:	4a0c      	ldr	r2, [pc, #48]	@ (8001498 <MX_SDMMC1_SD_Init+0x38>)
 8001468:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800146a:	4b0a      	ldr	r3, [pc, #40]	@ (8001494 <MX_SDMMC1_SD_Init+0x34>)
 800146c:	2200      	movs	r2, #0
 800146e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001470:	4b08      	ldr	r3, [pc, #32]	@ (8001494 <MX_SDMMC1_SD_Init+0x34>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001476:	4b07      	ldr	r3, [pc, #28]	@ (8001494 <MX_SDMMC1_SD_Init+0x34>)
 8001478:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800147c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800147e:	4b05      	ldr	r3, [pc, #20]	@ (8001494 <MX_SDMMC1_SD_Init+0x34>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 2;
 8001484:	4b03      	ldr	r3, [pc, #12]	@ (8001494 <MX_SDMMC1_SD_Init+0x34>)
 8001486:	2202      	movs	r2, #2
 8001488:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800148a:	bf00      	nop
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	240003e4 	.word	0x240003e4
 8001498:	52007000 	.word	0x52007000

0800149c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014a0:	4b27      	ldr	r3, [pc, #156]	@ (8001540 <MX_SPI1_Init+0xa4>)
 80014a2:	4a28      	ldr	r2, [pc, #160]	@ (8001544 <MX_SPI1_Init+0xa8>)
 80014a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014a6:	4b26      	ldr	r3, [pc, #152]	@ (8001540 <MX_SPI1_Init+0xa4>)
 80014a8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80014ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014ae:	4b24      	ldr	r3, [pc, #144]	@ (8001540 <MX_SPI1_Init+0xa4>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014b4:	4b22      	ldr	r3, [pc, #136]	@ (8001540 <MX_SPI1_Init+0xa4>)
 80014b6:	2207      	movs	r2, #7
 80014b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014ba:	4b21      	ldr	r3, [pc, #132]	@ (8001540 <MX_SPI1_Init+0xa4>)
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001540 <MX_SPI1_Init+0xa4>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001540 <MX_SPI1_Init+0xa4>)
 80014c8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80014cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80014ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001540 <MX_SPI1_Init+0xa4>)
 80014d0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80014d4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001540 <MX_SPI1_Init+0xa4>)
 80014d8:	2200      	movs	r2, #0
 80014da:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014dc:	4b18      	ldr	r3, [pc, #96]	@ (8001540 <MX_SPI1_Init+0xa4>)
 80014de:	2200      	movs	r2, #0
 80014e0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014e2:	4b17      	ldr	r3, [pc, #92]	@ (8001540 <MX_SPI1_Init+0xa4>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80014e8:	4b15      	ldr	r3, [pc, #84]	@ (8001540 <MX_SPI1_Init+0xa4>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80014ee:	4b14      	ldr	r3, [pc, #80]	@ (8001540 <MX_SPI1_Init+0xa4>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80014f4:	4b12      	ldr	r3, [pc, #72]	@ (8001540 <MX_SPI1_Init+0xa4>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80014fa:	4b11      	ldr	r3, [pc, #68]	@ (8001540 <MX_SPI1_Init+0xa4>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001500:	4b0f      	ldr	r3, [pc, #60]	@ (8001540 <MX_SPI1_Init+0xa4>)
 8001502:	2200      	movs	r2, #0
 8001504:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001506:	4b0e      	ldr	r3, [pc, #56]	@ (8001540 <MX_SPI1_Init+0xa4>)
 8001508:	2200      	movs	r2, #0
 800150a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800150c:	4b0c      	ldr	r3, [pc, #48]	@ (8001540 <MX_SPI1_Init+0xa4>)
 800150e:	2200      	movs	r2, #0
 8001510:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001512:	4b0b      	ldr	r3, [pc, #44]	@ (8001540 <MX_SPI1_Init+0xa4>)
 8001514:	2200      	movs	r2, #0
 8001516:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001518:	4b09      	ldr	r3, [pc, #36]	@ (8001540 <MX_SPI1_Init+0xa4>)
 800151a:	2200      	movs	r2, #0
 800151c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800151e:	4b08      	ldr	r3, [pc, #32]	@ (8001540 <MX_SPI1_Init+0xa4>)
 8001520:	2200      	movs	r2, #0
 8001522:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001524:	4b06      	ldr	r3, [pc, #24]	@ (8001540 <MX_SPI1_Init+0xa4>)
 8001526:	2200      	movs	r2, #0
 8001528:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800152a:	4805      	ldr	r0, [pc, #20]	@ (8001540 <MX_SPI1_Init+0xa4>)
 800152c:	f00d fc9e 	bl	800ee6c <HAL_SPI_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8001536:	f001 f8a9 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	24000460 	.word	0x24000460
 8001544:	40013000 	.word	0x40013000

08001548 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b09c      	sub	sp, #112	@ 0x70
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800154e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	605a      	str	r2, [r3, #4]
 8001558:	609a      	str	r2, [r3, #8]
 800155a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800155c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001568:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
 8001578:	615a      	str	r2, [r3, #20]
 800157a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800157c:	1d3b      	adds	r3, r7, #4
 800157e:	2234      	movs	r2, #52	@ 0x34
 8001580:	2100      	movs	r1, #0
 8001582:	4618      	mov	r0, r3
 8001584:	f012 fb32 	bl	8013bec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001588:	4b49      	ldr	r3, [pc, #292]	@ (80016b0 <MX_TIM1_Init+0x168>)
 800158a:	4a4a      	ldr	r2, [pc, #296]	@ (80016b4 <MX_TIM1_Init+0x16c>)
 800158c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800158e:	4b48      	ldr	r3, [pc, #288]	@ (80016b0 <MX_TIM1_Init+0x168>)
 8001590:	2200      	movs	r2, #0
 8001592:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001594:	4b46      	ldr	r3, [pc, #280]	@ (80016b0 <MX_TIM1_Init+0x168>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800159a:	4b45      	ldr	r3, [pc, #276]	@ (80016b0 <MX_TIM1_Init+0x168>)
 800159c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015a0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a2:	4b43      	ldr	r3, [pc, #268]	@ (80016b0 <MX_TIM1_Init+0x168>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015a8:	4b41      	ldr	r3, [pc, #260]	@ (80016b0 <MX_TIM1_Init+0x168>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015ae:	4b40      	ldr	r3, [pc, #256]	@ (80016b0 <MX_TIM1_Init+0x168>)
 80015b0:	2280      	movs	r2, #128	@ 0x80
 80015b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015b4:	483e      	ldr	r0, [pc, #248]	@ (80016b0 <MX_TIM1_Init+0x168>)
 80015b6:	f00e fe00 	bl	80101ba <HAL_TIM_Base_Init>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80015c0:	f001 f864 	bl	800268c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015c8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015ca:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80015ce:	4619      	mov	r1, r3
 80015d0:	4837      	ldr	r0, [pc, #220]	@ (80016b0 <MX_TIM1_Init+0x168>)
 80015d2:	f00f f94b 	bl	801086c <HAL_TIM_ConfigClockSource>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80015dc:	f001 f856 	bl	800268c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015e0:	4833      	ldr	r0, [pc, #204]	@ (80016b0 <MX_TIM1_Init+0x168>)
 80015e2:	f00e fec7 	bl	8010374 <HAL_TIM_PWM_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80015ec:	f001 f84e 	bl	800268c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f0:	2300      	movs	r3, #0
 80015f2:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015f4:	2300      	movs	r3, #0
 80015f6:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015fc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001600:	4619      	mov	r1, r3
 8001602:	482b      	ldr	r0, [pc, #172]	@ (80016b0 <MX_TIM1_Init+0x168>)
 8001604:	f00f fe78 	bl	80112f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800160e:	f001 f83d 	bl	800268c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001612:	2360      	movs	r3, #96	@ 0x60
 8001614:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800161a:	2300      	movs	r3, #0
 800161c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800161e:	2300      	movs	r3, #0
 8001620:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001622:	2300      	movs	r3, #0
 8001624:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001626:	2300      	movs	r3, #0
 8001628:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800162a:	2300      	movs	r3, #0
 800162c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800162e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001632:	2200      	movs	r2, #0
 8001634:	4619      	mov	r1, r3
 8001636:	481e      	ldr	r0, [pc, #120]	@ (80016b0 <MX_TIM1_Init+0x168>)
 8001638:	f00f f804 	bl	8010644 <HAL_TIM_PWM_ConfigChannel>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001642:	f001 f823 	bl	800268c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001646:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800164a:	2204      	movs	r2, #4
 800164c:	4619      	mov	r1, r3
 800164e:	4818      	ldr	r0, [pc, #96]	@ (80016b0 <MX_TIM1_Init+0x168>)
 8001650:	f00e fff8 	bl	8010644 <HAL_TIM_PWM_ConfigChannel>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800165a:	f001 f817 	bl	800268c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800165e:	2300      	movs	r3, #0
 8001660:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001662:	2300      	movs	r3, #0
 8001664:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001672:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001676:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800167c:	2300      	movs	r3, #0
 800167e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001680:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001684:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800168a:	2300      	movs	r3, #0
 800168c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800168e:	1d3b      	adds	r3, r7, #4
 8001690:	4619      	mov	r1, r3
 8001692:	4807      	ldr	r0, [pc, #28]	@ (80016b0 <MX_TIM1_Init+0x168>)
 8001694:	f00f fecc 	bl	8011430 <HAL_TIMEx_ConfigBreakDeadTime>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800169e:	f000 fff5 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80016a2:	4803      	ldr	r0, [pc, #12]	@ (80016b0 <MX_TIM1_Init+0x168>)
 80016a4:	f001 ff72 	bl	800358c <HAL_TIM_MspPostInit>

}
 80016a8:	bf00      	nop
 80016aa:	3770      	adds	r7, #112	@ 0x70
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	240004e8 	.word	0x240004e8
 80016b4:	40010000 	.word	0x40010000

080016b8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80016bc:	4b10      	ldr	r3, [pc, #64]	@ (8001700 <MX_TIM16_Init+0x48>)
 80016be:	4a11      	ldr	r2, [pc, #68]	@ (8001704 <MX_TIM16_Init+0x4c>)
 80016c0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 528;
 80016c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001700 <MX_TIM16_Init+0x48>)
 80016c4:	f44f 7204 	mov.w	r2, #528	@ 0x210
 80016c8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001700 <MX_TIM16_Init+0x48>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000 - 1;
 80016d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001700 <MX_TIM16_Init+0x48>)
 80016d2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80016d6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d8:	4b09      	ldr	r3, [pc, #36]	@ (8001700 <MX_TIM16_Init+0x48>)
 80016da:	2200      	movs	r2, #0
 80016dc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80016de:	4b08      	ldr	r3, [pc, #32]	@ (8001700 <MX_TIM16_Init+0x48>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e4:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <MX_TIM16_Init+0x48>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80016ea:	4805      	ldr	r0, [pc, #20]	@ (8001700 <MX_TIM16_Init+0x48>)
 80016ec:	f00e fd65 	bl	80101ba <HAL_TIM_Base_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80016f6:	f000 ffc9 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	24000534 	.word	0x24000534
 8001704:	40014400 	.word	0x40014400

08001708 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800170c:	4b22      	ldr	r3, [pc, #136]	@ (8001798 <MX_USART1_UART_Init+0x90>)
 800170e:	4a23      	ldr	r2, [pc, #140]	@ (800179c <MX_USART1_UART_Init+0x94>)
 8001710:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001712:	4b21      	ldr	r3, [pc, #132]	@ (8001798 <MX_USART1_UART_Init+0x90>)
 8001714:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001718:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800171a:	4b1f      	ldr	r3, [pc, #124]	@ (8001798 <MX_USART1_UART_Init+0x90>)
 800171c:	2200      	movs	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001720:	4b1d      	ldr	r3, [pc, #116]	@ (8001798 <MX_USART1_UART_Init+0x90>)
 8001722:	2200      	movs	r2, #0
 8001724:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001726:	4b1c      	ldr	r3, [pc, #112]	@ (8001798 <MX_USART1_UART_Init+0x90>)
 8001728:	2200      	movs	r2, #0
 800172a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800172c:	4b1a      	ldr	r3, [pc, #104]	@ (8001798 <MX_USART1_UART_Init+0x90>)
 800172e:	220c      	movs	r2, #12
 8001730:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001732:	4b19      	ldr	r3, [pc, #100]	@ (8001798 <MX_USART1_UART_Init+0x90>)
 8001734:	2200      	movs	r2, #0
 8001736:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001738:	4b17      	ldr	r3, [pc, #92]	@ (8001798 <MX_USART1_UART_Init+0x90>)
 800173a:	2200      	movs	r2, #0
 800173c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800173e:	4b16      	ldr	r3, [pc, #88]	@ (8001798 <MX_USART1_UART_Init+0x90>)
 8001740:	2200      	movs	r2, #0
 8001742:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001744:	4b14      	ldr	r3, [pc, #80]	@ (8001798 <MX_USART1_UART_Init+0x90>)
 8001746:	2200      	movs	r2, #0
 8001748:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800174a:	4b13      	ldr	r3, [pc, #76]	@ (8001798 <MX_USART1_UART_Init+0x90>)
 800174c:	2200      	movs	r2, #0
 800174e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001750:	4811      	ldr	r0, [pc, #68]	@ (8001798 <MX_USART1_UART_Init+0x90>)
 8001752:	f00f ff17 	bl	8011584 <HAL_UART_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800175c:	f000 ff96 	bl	800268c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001760:	2100      	movs	r1, #0
 8001762:	480d      	ldr	r0, [pc, #52]	@ (8001798 <MX_USART1_UART_Init+0x90>)
 8001764:	f011 f8b1 	bl	80128ca <HAL_UARTEx_SetTxFifoThreshold>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800176e:	f000 ff8d 	bl	800268c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001772:	2100      	movs	r1, #0
 8001774:	4808      	ldr	r0, [pc, #32]	@ (8001798 <MX_USART1_UART_Init+0x90>)
 8001776:	f011 f8e6 	bl	8012946 <HAL_UARTEx_SetRxFifoThreshold>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001780:	f000 ff84 	bl	800268c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001784:	4804      	ldr	r0, [pc, #16]	@ (8001798 <MX_USART1_UART_Init+0x90>)
 8001786:	f011 f867 	bl	8012858 <HAL_UARTEx_DisableFifoMode>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001790:	f000 ff7c 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001794:	bf00      	nop
 8001796:	bd80      	pop	{r7, pc}
 8001798:	24000580 	.word	0x24000580
 800179c:	40011000 	.word	0x40011000

080017a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017a4:	4b22      	ldr	r3, [pc, #136]	@ (8001830 <MX_USART2_UART_Init+0x90>)
 80017a6:	4a23      	ldr	r2, [pc, #140]	@ (8001834 <MX_USART2_UART_Init+0x94>)
 80017a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017aa:	4b21      	ldr	r3, [pc, #132]	@ (8001830 <MX_USART2_UART_Init+0x90>)
 80017ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001830 <MX_USART2_UART_Init+0x90>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001830 <MX_USART2_UART_Init+0x90>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017be:	4b1c      	ldr	r3, [pc, #112]	@ (8001830 <MX_USART2_UART_Init+0x90>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001830 <MX_USART2_UART_Init+0x90>)
 80017c6:	220c      	movs	r2, #12
 80017c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ca:	4b19      	ldr	r3, [pc, #100]	@ (8001830 <MX_USART2_UART_Init+0x90>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017d0:	4b17      	ldr	r3, [pc, #92]	@ (8001830 <MX_USART2_UART_Init+0x90>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017d6:	4b16      	ldr	r3, [pc, #88]	@ (8001830 <MX_USART2_UART_Init+0x90>)
 80017d8:	2200      	movs	r2, #0
 80017da:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017dc:	4b14      	ldr	r3, [pc, #80]	@ (8001830 <MX_USART2_UART_Init+0x90>)
 80017de:	2200      	movs	r2, #0
 80017e0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017e2:	4b13      	ldr	r3, [pc, #76]	@ (8001830 <MX_USART2_UART_Init+0x90>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017e8:	4811      	ldr	r0, [pc, #68]	@ (8001830 <MX_USART2_UART_Init+0x90>)
 80017ea:	f00f fecb 	bl	8011584 <HAL_UART_Init>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80017f4:	f000 ff4a 	bl	800268c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017f8:	2100      	movs	r1, #0
 80017fa:	480d      	ldr	r0, [pc, #52]	@ (8001830 <MX_USART2_UART_Init+0x90>)
 80017fc:	f011 f865 	bl	80128ca <HAL_UARTEx_SetTxFifoThreshold>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001806:	f000 ff41 	bl	800268c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800180a:	2100      	movs	r1, #0
 800180c:	4808      	ldr	r0, [pc, #32]	@ (8001830 <MX_USART2_UART_Init+0x90>)
 800180e:	f011 f89a 	bl	8012946 <HAL_UARTEx_SetRxFifoThreshold>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001818:	f000 ff38 	bl	800268c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800181c:	4804      	ldr	r0, [pc, #16]	@ (8001830 <MX_USART2_UART_Init+0x90>)
 800181e:	f011 f81b 	bl	8012858 <HAL_UARTEx_DisableFifoMode>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001828:	f000 ff30 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}
 8001830:	24000614 	.word	0x24000614
 8001834:	40004400 	.word	0x40004400

08001838 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800183e:	4b0d      	ldr	r3, [pc, #52]	@ (8001874 <MX_DMA_Init+0x3c>)
 8001840:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001844:	4a0b      	ldr	r2, [pc, #44]	@ (8001874 <MX_DMA_Init+0x3c>)
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800184e:	4b09      	ldr	r3, [pc, #36]	@ (8001874 <MX_DMA_Init+0x3c>)
 8001850:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	607b      	str	r3, [r7, #4]
 800185a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800185c:	2200      	movs	r2, #0
 800185e:	2100      	movs	r1, #0
 8001860:	200b      	movs	r0, #11
 8001862:	f004 fe74 	bl	800654e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001866:	200b      	movs	r0, #11
 8001868:	f004 fe8b 	bl	8006582 <HAL_NVIC_EnableIRQ>

}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	58024400 	.word	0x58024400

08001878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08e      	sub	sp, #56	@ 0x38
 800187c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	605a      	str	r2, [r3, #4]
 8001888:	609a      	str	r2, [r3, #8]
 800188a:	60da      	str	r2, [r3, #12]
 800188c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800188e:	4b75      	ldr	r3, [pc, #468]	@ (8001a64 <MX_GPIO_Init+0x1ec>)
 8001890:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001894:	4a73      	ldr	r2, [pc, #460]	@ (8001a64 <MX_GPIO_Init+0x1ec>)
 8001896:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800189a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800189e:	4b71      	ldr	r3, [pc, #452]	@ (8001a64 <MX_GPIO_Init+0x1ec>)
 80018a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018a8:	623b      	str	r3, [r7, #32]
 80018aa:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ac:	4b6d      	ldr	r3, [pc, #436]	@ (8001a64 <MX_GPIO_Init+0x1ec>)
 80018ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018b2:	4a6c      	ldr	r2, [pc, #432]	@ (8001a64 <MX_GPIO_Init+0x1ec>)
 80018b4:	f043 0304 	orr.w	r3, r3, #4
 80018b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018bc:	4b69      	ldr	r3, [pc, #420]	@ (8001a64 <MX_GPIO_Init+0x1ec>)
 80018be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018c2:	f003 0304 	and.w	r3, r3, #4
 80018c6:	61fb      	str	r3, [r7, #28]
 80018c8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ca:	4b66      	ldr	r3, [pc, #408]	@ (8001a64 <MX_GPIO_Init+0x1ec>)
 80018cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018d0:	4a64      	ldr	r2, [pc, #400]	@ (8001a64 <MX_GPIO_Init+0x1ec>)
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018da:	4b62      	ldr	r3, [pc, #392]	@ (8001a64 <MX_GPIO_Init+0x1ec>)
 80018dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018e0:	f003 0301 	and.w	r3, r3, #1
 80018e4:	61bb      	str	r3, [r7, #24]
 80018e6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e8:	4b5e      	ldr	r3, [pc, #376]	@ (8001a64 <MX_GPIO_Init+0x1ec>)
 80018ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018ee:	4a5d      	ldr	r2, [pc, #372]	@ (8001a64 <MX_GPIO_Init+0x1ec>)
 80018f0:	f043 0302 	orr.w	r3, r3, #2
 80018f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018f8:	4b5a      	ldr	r3, [pc, #360]	@ (8001a64 <MX_GPIO_Init+0x1ec>)
 80018fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001906:	4b57      	ldr	r3, [pc, #348]	@ (8001a64 <MX_GPIO_Init+0x1ec>)
 8001908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800190c:	4a55      	ldr	r2, [pc, #340]	@ (8001a64 <MX_GPIO_Init+0x1ec>)
 800190e:	f043 0320 	orr.w	r3, r3, #32
 8001912:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001916:	4b53      	ldr	r3, [pc, #332]	@ (8001a64 <MX_GPIO_Init+0x1ec>)
 8001918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800191c:	f003 0320 	and.w	r3, r3, #32
 8001920:	613b      	str	r3, [r7, #16]
 8001922:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001924:	4b4f      	ldr	r3, [pc, #316]	@ (8001a64 <MX_GPIO_Init+0x1ec>)
 8001926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800192a:	4a4e      	ldr	r2, [pc, #312]	@ (8001a64 <MX_GPIO_Init+0x1ec>)
 800192c:	f043 0310 	orr.w	r3, r3, #16
 8001930:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001934:	4b4b      	ldr	r3, [pc, #300]	@ (8001a64 <MX_GPIO_Init+0x1ec>)
 8001936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800193a:	f003 0310 	and.w	r3, r3, #16
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001942:	4b48      	ldr	r3, [pc, #288]	@ (8001a64 <MX_GPIO_Init+0x1ec>)
 8001944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001948:	4a46      	ldr	r2, [pc, #280]	@ (8001a64 <MX_GPIO_Init+0x1ec>)
 800194a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800194e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001952:	4b44      	ldr	r3, [pc, #272]	@ (8001a64 <MX_GPIO_Init+0x1ec>)
 8001954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001958:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800195c:	60bb      	str	r3, [r7, #8]
 800195e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001960:	4b40      	ldr	r3, [pc, #256]	@ (8001a64 <MX_GPIO_Init+0x1ec>)
 8001962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001966:	4a3f      	ldr	r2, [pc, #252]	@ (8001a64 <MX_GPIO_Init+0x1ec>)
 8001968:	f043 0308 	orr.w	r3, r3, #8
 800196c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001970:	4b3c      	ldr	r3, [pc, #240]	@ (8001a64 <MX_GPIO_Init+0x1ec>)
 8001972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001976:	f003 0308 	and.w	r3, r3, #8
 800197a:	607b      	str	r3, [r7, #4]
 800197c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, START_BUTTON_LED_Pin|RTDS_Pin, GPIO_PIN_RESET);
 800197e:	2200      	movs	r2, #0
 8001980:	2103      	movs	r1, #3
 8001982:	4839      	ldr	r0, [pc, #228]	@ (8001a68 <MX_GPIO_Init+0x1f0>)
 8001984:	f008 fa6e 	bl	8009e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS18B20_Data_GPIO_Port, DS18B20_Data_Pin, GPIO_PIN_RESET);
 8001988:	2200      	movs	r2, #0
 800198a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800198e:	4837      	ldr	r0, [pc, #220]	@ (8001a6c <MX_GPIO_Init+0x1f4>)
 8001990:	f008 fa68 	bl	8009e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : START_BUTTON_LED_Pin RTDS_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_LED_Pin|RTDS_Pin;
 8001994:	2303      	movs	r3, #3
 8001996:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001998:	2301      	movs	r3, #1
 800199a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a0:	2300      	movs	r3, #0
 80019a2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019a8:	4619      	mov	r1, r3
 80019aa:	482f      	ldr	r0, [pc, #188]	@ (8001a68 <MX_GPIO_Init+0x1f0>)
 80019ac:	f008 f89a 	bl	8009ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 80019b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b6:	2300      	movs	r3, #0
 80019b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019ba:	2302      	movs	r3, #2
 80019bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80019be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019c2:	4619      	mov	r1, r3
 80019c4:	482a      	ldr	r0, [pc, #168]	@ (8001a70 <MX_GPIO_Init+0x1f8>)
 80019c6:	f008 f88d 	bl	8009ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MICROSD_DET_Pin */
  GPIO_InitStruct.Pin = MICROSD_DET_Pin;
 80019ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80019ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019d0:	2300      	movs	r3, #0
 80019d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(MICROSD_DET_GPIO_Port, &GPIO_InitStruct);
 80019d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019dc:	4619      	mov	r1, r3
 80019de:	4824      	ldr	r0, [pc, #144]	@ (8001a70 <MX_GPIO_Init+0x1f8>)
 80019e0:	f008 f880 	bl	8009ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DS18B20_Data_Pin */
  GPIO_InitStruct.Pin = DS18B20_Data_Pin;
 80019e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ea:	2301      	movs	r3, #1
 80019ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f2:	2300      	movs	r3, #0
 80019f4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(DS18B20_Data_GPIO_Port, &GPIO_InitStruct);
 80019f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019fa:	4619      	mov	r1, r3
 80019fc:	481b      	ldr	r0, [pc, #108]	@ (8001a6c <MX_GPIO_Init+0x1f4>)
 80019fe:	f008 f871 	bl	8009ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON1_Pin */
  GPIO_InitStruct.Pin = START_BUTTON1_Pin;
 8001a02:	2380      	movs	r3, #128	@ 0x80
 8001a04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a06:	2300      	movs	r3, #0
 8001a08:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(START_BUTTON1_GPIO_Port, &GPIO_InitStruct);
 8001a0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a12:	4619      	mov	r1, r3
 8001a14:	4817      	ldr	r0, [pc, #92]	@ (8001a74 <MX_GPIO_Init+0x1fc>)
 8001a16:	f008 f865 	bl	8009ae4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  /* --- nRF24 CE/CSN pins (PG3=CSN idle HIGH, PC6=CE idle LOW) --- */

  // Idle levels
  HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);   // CSN idle HIGH
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	2108      	movs	r1, #8
 8001a1e:	4815      	ldr	r0, [pc, #84]	@ (8001a74 <MX_GPIO_Init+0x1fc>)
 8001a20:	f008 fa20 	bl	8009e64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(NRF24_CE_PORT,  NRF24_CE_PIN,  GPIO_PIN_RESET); // CE  idle LOW
 8001a24:	2200      	movs	r2, #0
 8001a26:	2140      	movs	r1, #64	@ 0x40
 8001a28:	480f      	ldr	r0, [pc, #60]	@ (8001a68 <MX_GPIO_Init+0x1f0>)
 8001a2a:	f008 fa1b 	bl	8009e64 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a36:	2303      	movs	r3, #3
 8001a38:	633b      	str	r3, [r7, #48]	@ 0x30

  GPIO_InitStruct.Pin = NRF24_CSN_PIN;
 8001a3a:	2308      	movs	r3, #8
 8001a3c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(NRF24_CSN_PORT, &GPIO_InitStruct);
 8001a3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a42:	4619      	mov	r1, r3
 8001a44:	480b      	ldr	r0, [pc, #44]	@ (8001a74 <MX_GPIO_Init+0x1fc>)
 8001a46:	f008 f84d 	bl	8009ae4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = NRF24_CE_PIN;
 8001a4a:	2340      	movs	r3, #64	@ 0x40
 8001a4c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(NRF24_CE_PORT, &GPIO_InitStruct);
 8001a4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a52:	4619      	mov	r1, r3
 8001a54:	4804      	ldr	r0, [pc, #16]	@ (8001a68 <MX_GPIO_Init+0x1f0>)
 8001a56:	f008 f845 	bl	8009ae4 <HAL_GPIO_Init>



/* USER CODE END MX_GPIO_Init_2 */
}
 8001a5a:	bf00      	nop
 8001a5c:	3738      	adds	r7, #56	@ 0x38
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	58024400 	.word	0x58024400
 8001a68:	58020800 	.word	0x58020800
 8001a6c:	58021000 	.word	0x58021000
 8001a70:	58021400 	.word	0x58021400
 8001a74:	58021800 	.word	0x58021800

08001a78 <print>:

/* USER CODE BEGIN 4 */
void print(char uart_buffer[])
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s \n\r", uart_buffer);
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	4909      	ldr	r1, [pc, #36]	@ (8001aa8 <print+0x30>)
 8001a84:	4809      	ldr	r0, [pc, #36]	@ (8001aac <print+0x34>)
 8001a86:	f012 f88f 	bl	8013ba8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_msg, strlen(uart_msg),
 8001a8a:	4808      	ldr	r0, [pc, #32]	@ (8001aac <print+0x34>)
 8001a8c:	f7fe fc40 	bl	8000310 <strlen>
 8001a90:	4603      	mov	r3, r0
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	f04f 33ff 	mov.w	r3, #4294967295
 8001a98:	4904      	ldr	r1, [pc, #16]	@ (8001aac <print+0x34>)
 8001a9a:	4805      	ldr	r0, [pc, #20]	@ (8001ab0 <print+0x38>)
 8001a9c:	f00f fdc2 	bl	8011624 <HAL_UART_Transmit>
					  HAL_MAX_DELAY);
}
 8001aa0:	bf00      	nop
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	080147e4 	.word	0x080147e4
 8001aac:	240007dc 	.word	0x240007dc
 8001ab0:	24000614 	.word	0x24000614

08001ab4 <printValue>:

void printValue(int value)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%hu \n\r", value);
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	4909      	ldr	r1, [pc, #36]	@ (8001ae4 <printValue+0x30>)
 8001ac0:	4809      	ldr	r0, [pc, #36]	@ (8001ae8 <printValue+0x34>)
 8001ac2:	f012 f871 	bl	8013ba8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_msg, strlen(uart_msg),
 8001ac6:	4808      	ldr	r0, [pc, #32]	@ (8001ae8 <printValue+0x34>)
 8001ac8:	f7fe fc22 	bl	8000310 <strlen>
 8001acc:	4603      	mov	r3, r0
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad4:	4904      	ldr	r1, [pc, #16]	@ (8001ae8 <printValue+0x34>)
 8001ad6:	4805      	ldr	r0, [pc, #20]	@ (8001aec <printValue+0x38>)
 8001ad8:	f00f fda4 	bl	8011624 <HAL_UART_Transmit>
					  HAL_MAX_DELAY);
}
 8001adc:	bf00      	nop
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	080147ec 	.word	0x080147ec
 8001ae8:	240007dc 	.word	0x240007dc
 8001aec:	24000614 	.word	0x24000614

08001af0 <HAL_ADC_ConvCpltCallback>:
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_msg, strlen(uart_msg),
					  HAL_MAX_DELAY);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
	//s1_aceleracion = buffer_adc[0];
	//s2_aceleracion = buffer_adc[1];
	//s_freno = buffer_adc[2];
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <HAL_FDCAN_RxFifo0Callback>:
		Error_Handler();
	}
}

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f000 80cc 	beq.w	8001cb2 <HAL_FDCAN_RxFifo0Callback+0x1ae>
	{
		/* Retreive Rx messages from RX FIFO0 */

		if (hfdcan->Instance == FDCAN1)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a67      	ldr	r2, [pc, #412]	@ (8001cbc <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d164      	bne.n	8001bee <HAL_FDCAN_RxFifo0Callback+0xea>
		{
			if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader_Inv,
 8001b24:	4b66      	ldr	r3, [pc, #408]	@ (8001cc0 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001b26:	4a67      	ldr	r2, [pc, #412]	@ (8001cc4 <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 8001b28:	2140      	movs	r1, #64	@ 0x40
 8001b2a:	4867      	ldr	r0, [pc, #412]	@ (8001cc8 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 8001b2c:	f007 f8f2 	bl	8008d14 <HAL_FDCAN_GetRxMessage>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f040 80bd 	bne.w	8001cb2 <HAL_FDCAN_RxFifo0Callback+0x1ae>
									   RxData_Inv) == HAL_OK)
			{
				switch (RxHeader_Inv.Identifier)
 8001b38:	4b62      	ldr	r3, [pc, #392]	@ (8001cc4 <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f240 4266 	movw	r2, #1126	@ 0x466
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d03c      	beq.n	8001bbe <HAL_FDCAN_RxFifo0Callback+0xba>
 8001b44:	f240 4266 	movw	r2, #1126	@ 0x466
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	f200 80b2 	bhi.w	8001cb2 <HAL_FDCAN_RxFifo0Callback+0x1ae>
 8001b4e:	f240 4261 	movw	r2, #1121	@ 0x461
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d004      	beq.n	8001b60 <HAL_FDCAN_RxFifo0Callback+0x5c>
 8001b56:	f240 4263 	movw	r2, #1123	@ 0x463
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d015      	beq.n	8001b8a <HAL_FDCAN_RxFifo0Callback+0x86>

				}
			}
		}
	}
}
 8001b5e:	e0a8      	b.n	8001cb2 <HAL_FDCAN_RxFifo0Callback+0x1ae>
					state = RxData_Inv[4] & 0xF;
 8001b60:	4b57      	ldr	r3, [pc, #348]	@ (8001cc0 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001b62:	791b      	ldrb	r3, [r3, #4]
 8001b64:	f003 030f 	and.w	r3, r3, #15
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	4b58      	ldr	r3, [pc, #352]	@ (8001ccc <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 8001b6c:	701a      	strb	r2, [r3, #0]
					if (state == 10 || state == 11)
 8001b6e:	4b57      	ldr	r3, [pc, #348]	@ (8001ccc <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	2b0a      	cmp	r3, #10
 8001b74:	d004      	beq.n	8001b80 <HAL_FDCAN_RxFifo0Callback+0x7c>
 8001b76:	4b55      	ldr	r3, [pc, #340]	@ (8001ccc <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b0b      	cmp	r3, #11
 8001b7c:	f040 8092 	bne.w	8001ca4 <HAL_FDCAN_RxFifo0Callback+0x1a0>
						error = RxData_Inv[2];
 8001b80:	4b4f      	ldr	r3, [pc, #316]	@ (8001cc0 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001b82:	789a      	ldrb	r2, [r3, #2]
 8001b84:	4b52      	ldr	r3, [pc, #328]	@ (8001cd0 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 8001b86:	701a      	strb	r2, [r3, #0]
					break;
 8001b88:	e08c      	b.n	8001ca4 <HAL_FDCAN_RxFifo0Callback+0x1a0>
					e_machine_rpm = (RxData_Inv[7] & 0x0F << 16) | RxData_Inv[8] << 8 | RxData_Inv[5];
 8001b8a:	4b4d      	ldr	r3, [pc, #308]	@ (8001cc0 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001b8c:	79db      	ldrb	r3, [r3, #7]
 8001b8e:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 8001b92:	4b4b      	ldr	r3, [pc, #300]	@ (8001cc0 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001b94:	7a1b      	ldrb	r3, [r3, #8]
 8001b96:	021b      	lsls	r3, r3, #8
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	4a49      	ldr	r2, [pc, #292]	@ (8001cc0 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001b9c:	7952      	ldrb	r2, [r2, #5]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	4a4c      	ldr	r2, [pc, #304]	@ (8001cd4 <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 8001ba2:	6013      	str	r3, [r2, #0]
					if (e_machine_rpm & 0x80000)
 8001ba4:	4b4b      	ldr	r3, [pc, #300]	@ (8001cd4 <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d07b      	beq.n	8001ca8 <HAL_FDCAN_RxFifo0Callback+0x1a4>
						e_machine_rpm |= 0xFFF0000;
 8001bb0:	4b48      	ldr	r3, [pc, #288]	@ (8001cd4 <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	4b48      	ldr	r3, [pc, #288]	@ (8001cd8 <HAL_FDCAN_RxFifo0Callback+0x1d4>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	4a46      	ldr	r2, [pc, #280]	@ (8001cd4 <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 8001bba:	6013      	str	r3, [r2, #0]
					break;
 8001bbc:	e074      	b.n	8001ca8 <HAL_FDCAN_RxFifo0Callback+0x1a4>
					if (RxHeader_Inv.DataLength == 6)
 8001bbe:	4b41      	ldr	r3, [pc, #260]	@ (8001cc4 <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	2b06      	cmp	r3, #6
 8001bc4:	d172      	bne.n	8001cac <HAL_FDCAN_RxFifo0Callback+0x1a8>
						if (config_inv_lectura_v == 0)
 8001bc6:	4b45      	ldr	r3, [pc, #276]	@ (8001cdc <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d102      	bne.n	8001bd4 <HAL_FDCAN_RxFifo0Callback+0xd0>
							config_inv_lectura_v = 1;
 8001bce:	4b43      	ldr	r3, [pc, #268]	@ (8001cdc <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	601a      	str	r2, [r3, #0]
						if (config_inv_lectura_v == 1)
 8001bd4:	4b41      	ldr	r3, [pc, #260]	@ (8001cdc <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d167      	bne.n	8001cac <HAL_FDCAN_RxFifo0Callback+0x1a8>
							inv_dc_bus_voltage = RxData_Inv[3] << 8 | RxData_Inv[2];
 8001bdc:	4b38      	ldr	r3, [pc, #224]	@ (8001cc0 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001bde:	78db      	ldrb	r3, [r3, #3]
 8001be0:	021b      	lsls	r3, r3, #8
 8001be2:	4a37      	ldr	r2, [pc, #220]	@ (8001cc0 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001be4:	7892      	ldrb	r2, [r2, #2]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	4a3d      	ldr	r2, [pc, #244]	@ (8001ce0 <HAL_FDCAN_RxFifo0Callback+0x1dc>)
 8001bea:	6013      	str	r3, [r2, #0]
					break;
 8001bec:	e05e      	b.n	8001cac <HAL_FDCAN_RxFifo0Callback+0x1a8>
		else if (hfdcan->Instance == FDCAN2)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a3c      	ldr	r2, [pc, #240]	@ (8001ce4 <HAL_FDCAN_RxFifo0Callback+0x1e0>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d126      	bne.n	8001c46 <HAL_FDCAN_RxFifo0Callback+0x142>
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_Acu,
 8001bf8:	4b3b      	ldr	r3, [pc, #236]	@ (8001ce8 <HAL_FDCAN_RxFifo0Callback+0x1e4>)
 8001bfa:	4a3c      	ldr	r2, [pc, #240]	@ (8001cec <HAL_FDCAN_RxFifo0Callback+0x1e8>)
 8001bfc:	2140      	movs	r1, #64	@ 0x40
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f007 f888 	bl	8008d14 <HAL_FDCAN_GetRxMessage>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d153      	bne.n	8001cb2 <HAL_FDCAN_RxFifo0Callback+0x1ae>
				switch (RxHeader_Acu.Identifier)
 8001c0a:	4b38      	ldr	r3, [pc, #224]	@ (8001cec <HAL_FDCAN_RxFifo0Callback+0x1e8>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2b20      	cmp	r3, #32
 8001c10:	d003      	beq.n	8001c1a <HAL_FDCAN_RxFifo0Callback+0x116>
 8001c12:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001c16:	d008      	beq.n	8001c2a <HAL_FDCAN_RxFifo0Callback+0x126>
}
 8001c18:	e04b      	b.n	8001cb2 <HAL_FDCAN_RxFifo0Callback+0x1ae>
					if (RxData_Acu[0] == 0)
 8001c1a:	4b33      	ldr	r3, [pc, #204]	@ (8001ce8 <HAL_FDCAN_RxFifo0Callback+0x1e4>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d146      	bne.n	8001cb0 <HAL_FDCAN_RxFifo0Callback+0x1ac>
						precarga_inv = 1;
 8001c22:	4b33      	ldr	r3, [pc, #204]	@ (8001cf0 <HAL_FDCAN_RxFifo0Callback+0x1ec>)
 8001c24:	2201      	movs	r2, #1
 8001c26:	601a      	str	r2, [r3, #0]
					break;
 8001c28:	e042      	b.n	8001cb0 <HAL_FDCAN_RxFifo0Callback+0x1ac>
					v_celda_min = (int)(RxData_Acu[0] << 8 | RxData_Acu[1]);
 8001c2a:	4b2f      	ldr	r3, [pc, #188]	@ (8001ce8 <HAL_FDCAN_RxFifo0Callback+0x1e4>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	021b      	lsls	r3, r3, #8
 8001c30:	4a2d      	ldr	r2, [pc, #180]	@ (8001ce8 <HAL_FDCAN_RxFifo0Callback+0x1e4>)
 8001c32:	7852      	ldrb	r2, [r2, #1]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	ee07 3a90 	vmov	s15, r3
 8001c3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c3e:	4b2d      	ldr	r3, [pc, #180]	@ (8001cf4 <HAL_FDCAN_RxFifo0Callback+0x1f0>)
 8001c40:	edc3 7a00 	vstr	s15, [r3]
					break;
 8001c44:	e035      	b.n	8001cb2 <HAL_FDCAN_RxFifo0Callback+0x1ae>
		else if (hfdcan->Instance == FDCAN3)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a2b      	ldr	r2, [pc, #172]	@ (8001cf8 <HAL_FDCAN_RxFifo0Callback+0x1f4>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d130      	bne.n	8001cb2 <HAL_FDCAN_RxFifo0Callback+0x1ae>
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_Dash,
 8001c50:	4b2a      	ldr	r3, [pc, #168]	@ (8001cfc <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 8001c52:	4a2b      	ldr	r2, [pc, #172]	@ (8001d00 <HAL_FDCAN_RxFifo0Callback+0x1fc>)
 8001c54:	2140      	movs	r1, #64	@ 0x40
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f007 f85c 	bl	8008d14 <HAL_FDCAN_GetRxMessage>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d127      	bne.n	8001cb2 <HAL_FDCAN_RxFifo0Callback+0x1ae>
				switch (RxHeader_Dash.Identifier)
 8001c62:	4b27      	ldr	r3, [pc, #156]	@ (8001d00 <HAL_FDCAN_RxFifo0Callback+0x1fc>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f240 1233 	movw	r2, #307	@ 0x133
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d121      	bne.n	8001cb2 <HAL_FDCAN_RxFifo0Callback+0x1ae>
					s1_aceleracion = ((uint16_t)RxData_Dash[0] << 8) | RxData_Dash[1];
 8001c6e:	4b23      	ldr	r3, [pc, #140]	@ (8001cfc <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	b21b      	sxth	r3, r3
 8001c74:	021b      	lsls	r3, r3, #8
 8001c76:	b21a      	sxth	r2, r3
 8001c78:	4b20      	ldr	r3, [pc, #128]	@ (8001cfc <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 8001c7a:	785b      	ldrb	r3, [r3, #1]
 8001c7c:	b21b      	sxth	r3, r3
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	b21b      	sxth	r3, r3
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	4b1f      	ldr	r3, [pc, #124]	@ (8001d04 <HAL_FDCAN_RxFifo0Callback+0x200>)
 8001c86:	801a      	strh	r2, [r3, #0]
					s2_aceleracion = ((uint16_t)RxData_Dash[2] << 8) | RxData_Dash[3];
 8001c88:	4b1c      	ldr	r3, [pc, #112]	@ (8001cfc <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 8001c8a:	789b      	ldrb	r3, [r3, #2]
 8001c8c:	b21b      	sxth	r3, r3
 8001c8e:	021b      	lsls	r3, r3, #8
 8001c90:	b21a      	sxth	r2, r3
 8001c92:	4b1a      	ldr	r3, [pc, #104]	@ (8001cfc <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 8001c94:	78db      	ldrb	r3, [r3, #3]
 8001c96:	b21b      	sxth	r3, r3
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	b21b      	sxth	r3, r3
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001d08 <HAL_FDCAN_RxFifo0Callback+0x204>)
 8001ca0:	801a      	strh	r2, [r3, #0]
}
 8001ca2:	e006      	b.n	8001cb2 <HAL_FDCAN_RxFifo0Callback+0x1ae>
					break;
 8001ca4:	bf00      	nop
 8001ca6:	e004      	b.n	8001cb2 <HAL_FDCAN_RxFifo0Callback+0x1ae>
					break;
 8001ca8:	bf00      	nop
 8001caa:	e002      	b.n	8001cb2 <HAL_FDCAN_RxFifo0Callback+0x1ae>
					break;
 8001cac:	bf00      	nop
 8001cae:	e000      	b.n	8001cb2 <HAL_FDCAN_RxFifo0Callback+0x1ae>
					break;
 8001cb0:	bf00      	nop
}
 8001cb2:	bf00      	nop
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	4000a000 	.word	0x4000a000
 8001cc0:	24000780 	.word	0x24000780
 8001cc4:	240006dc 	.word	0x240006dc
 8001cc8:	24000204 	.word	0x24000204
 8001ccc:	240007ca 	.word	0x240007ca
 8001cd0:	2400093a 	.word	0x2400093a
 8001cd4:	240007a8 	.word	0x240007a8
 8001cd8:	0fff0000 	.word	0x0fff0000
 8001cdc:	240000a4 	.word	0x240000a4
 8001ce0:	240007a4 	.word	0x240007a4
 8001ce4:	4000a400 	.word	0x4000a400
 8001ce8:	24000790 	.word	0x24000790
 8001cec:	24000728 	.word	0x24000728
 8001cf0:	240000a0 	.word	0x240000a0
 8001cf4:	24000010 	.word	0x24000010
 8001cf8:	4000d400 	.word	0x4000d400
 8001cfc:	24000798 	.word	0x24000798
 8001d00:	24000750 	.word	0x24000750
 8001d04:	240007b2 	.word	0x240007b2
 8001d08:	240007b4 	.word	0x240007b4

08001d0c <HAL_FDCAN_ErrorStatusCallback>:

void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs) {
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
	if (hfdcan == &hfdcan2) {
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a03      	ldr	r2, [pc, #12]	@ (8001d28 <HAL_FDCAN_ErrorStatusCallback+0x1c>)
 8001d1a:	4293      	cmp	r3, r2
		if ((ErrorStatusITs & FDCAN_IT_BUS_OFF) != RESET) {
			//CAN_bus_off_check_reset(hfdcan);
		}
	}
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	240002a4 	.word	0x240002a4
 8001d2c:	00000000 	.word	0x00000000

08001d30 <setTorque>:
	}
	return sum / N_LECTURAS;
}*/

uint16_t setTorque()
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
	print("Sensor freno: ");
	printValue(s_freno);
#endif

	// Calculamos % torque  en función de la posición de los sensores
	s1_aceleracion_aux = (s1_aceleracion - 2050) / (29.5 - 20.5);
 8001d36:	4b90      	ldr	r3, [pc, #576]	@ (8001f78 <setTorque+0x248>)
 8001d38:	881b      	ldrh	r3, [r3, #0]
 8001d3a:	f6a3 0302 	subw	r3, r3, #2050	@ 0x802
 8001d3e:	ee07 3a90 	vmov	s15, r3
 8001d42:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001d46:	eeb2 5b02 	vmov.f64	d5, #34	@ 0x41100000  9.0
 8001d4a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001d4e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d52:	ee17 3a90 	vmov	r3, s15
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	4b88      	ldr	r3, [pc, #544]	@ (8001f7c <setTorque+0x24c>)
 8001d5a:	801a      	strh	r2, [r3, #0]
	if (s1_aceleracion_aux < 0)
	{
		s1_aceleracion_aux = 0;
	}
	else if (s1_aceleracion_aux > 100)
 8001d5c:	4b87      	ldr	r3, [pc, #540]	@ (8001f7c <setTorque+0x24c>)
 8001d5e:	881b      	ldrh	r3, [r3, #0]
 8001d60:	2b64      	cmp	r3, #100	@ 0x64
 8001d62:	d902      	bls.n	8001d6a <setTorque+0x3a>
	{
		s1_aceleracion_aux = 100;
 8001d64:	4b85      	ldr	r3, [pc, #532]	@ (8001f7c <setTorque+0x24c>)
 8001d66:	2264      	movs	r2, #100	@ 0x64
 8001d68:	801a      	strh	r2, [r3, #0]
	}

	s2_aceleracion_aux = (s2_aceleracion - 1915) / (25.70 - 19.15);
 8001d6a:	4b85      	ldr	r3, [pc, #532]	@ (8001f80 <setTorque+0x250>)
 8001d6c:	881b      	ldrh	r3, [r3, #0]
 8001d6e:	f2a3 737b 	subw	r3, r3, #1915	@ 0x77b
 8001d72:	ee07 3a90 	vmov	s15, r3
 8001d76:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001d7a:	ed9f 5b75 	vldr	d5, [pc, #468]	@ 8001f50 <setTorque+0x220>
 8001d7e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001d82:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d86:	ee17 3a90 	vmov	r3, s15
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	4b7d      	ldr	r3, [pc, #500]	@ (8001f84 <setTorque+0x254>)
 8001d8e:	801a      	strh	r2, [r3, #0]
	if (s2_aceleracion_aux < 0)
	{
		s2_aceleracion_aux = 0;
	}
	else if (s2_aceleracion_aux > 100)
 8001d90:	4b7c      	ldr	r3, [pc, #496]	@ (8001f84 <setTorque+0x254>)
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	2b64      	cmp	r3, #100	@ 0x64
 8001d96:	d902      	bls.n	8001d9e <setTorque+0x6e>
	{
		s2_aceleracion_aux = 100;
 8001d98:	4b7a      	ldr	r3, [pc, #488]	@ (8001f84 <setTorque+0x254>)
 8001d9a:	2264      	movs	r2, #100	@ 0x64
 8001d9c:	801a      	strh	r2, [r3, #0]
	printValue(s2_aceleracion_aux);
	print("");
#endif

	// Torque enviado es la media de los dos sensores
	if (s1_aceleracion_aux > 8 && s2_aceleracion_aux > 8)
 8001d9e:	4b77      	ldr	r3, [pc, #476]	@ (8001f7c <setTorque+0x24c>)
 8001da0:	881b      	ldrh	r3, [r3, #0]
 8001da2:	2b08      	cmp	r3, #8
 8001da4:	d911      	bls.n	8001dca <setTorque+0x9a>
 8001da6:	4b77      	ldr	r3, [pc, #476]	@ (8001f84 <setTorque+0x254>)
 8001da8:	881b      	ldrh	r3, [r3, #0]
 8001daa:	2b08      	cmp	r3, #8
 8001dac:	d90d      	bls.n	8001dca <setTorque+0x9a>
	{
		torque_total = (s1_aceleracion_aux + s2_aceleracion_aux) / 2;
 8001dae:	4b73      	ldr	r3, [pc, #460]	@ (8001f7c <setTorque+0x24c>)
 8001db0:	881b      	ldrh	r3, [r3, #0]
 8001db2:	461a      	mov	r2, r3
 8001db4:	4b73      	ldr	r3, [pc, #460]	@ (8001f84 <setTorque+0x254>)
 8001db6:	881b      	ldrh	r3, [r3, #0]
 8001db8:	4413      	add	r3, r2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	da00      	bge.n	8001dc0 <setTorque+0x90>
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	105b      	asrs	r3, r3, #1
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	4b70      	ldr	r3, [pc, #448]	@ (8001f88 <setTorque+0x258>)
 8001dc6:	801a      	strh	r2, [r3, #0]
 8001dc8:	e002      	b.n	8001dd0 <setTorque+0xa0>
	}
	else
	{
		torque_total = 0;
 8001dca:	4b6f      	ldr	r3, [pc, #444]	@ (8001f88 <setTorque+0x258>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	801a      	strh	r2, [r3, #0]
	}

	// Por debajo de un 10% no acelera y por encima de un 90% esta a tope
	if (torque_total < 10)
 8001dd0:	4b6d      	ldr	r3, [pc, #436]	@ (8001f88 <setTorque+0x258>)
 8001dd2:	881b      	ldrh	r3, [r3, #0]
 8001dd4:	2b09      	cmp	r3, #9
 8001dd6:	d803      	bhi.n	8001de0 <setTorque+0xb0>
	{
		torque_total = 0;
 8001dd8:	4b6b      	ldr	r3, [pc, #428]	@ (8001f88 <setTorque+0x258>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	801a      	strh	r2, [r3, #0]
 8001dde:	e006      	b.n	8001dee <setTorque+0xbe>
	}
	else if (torque_total > 90)
 8001de0:	4b69      	ldr	r3, [pc, #420]	@ (8001f88 <setTorque+0x258>)
 8001de2:	881b      	ldrh	r3, [r3, #0]
 8001de4:	2b5a      	cmp	r3, #90	@ 0x5a
 8001de6:	d902      	bls.n	8001dee <setTorque+0xbe>
	{
		torque_total = 100;
 8001de8:	4b67      	ldr	r3, [pc, #412]	@ (8001f88 <setTorque+0x258>)
 8001dea:	2264      	movs	r2, #100	@ 0x64
 8001dec:	801a      	strh	r2, [r3, #0]
	}

	// Comprobamos EV 2.3 APPS/Brake Pedal Plausibility Check
	// En caso de que se esté pisando el freno y mas de un 25% del pedal para. Se resetea
	// solo si el acelerador vuelve por debajo del 5%
	if (s_freno > UMBRAL_FRENO_APPS && torque_total > 25)
 8001dee:	4b67      	ldr	r3, [pc, #412]	@ (8001f8c <setTorque+0x25c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001df6:	4293      	cmp	r3, r2
 8001df8:	dd0a      	ble.n	8001e10 <setTorque+0xe0>
 8001dfa:	4b63      	ldr	r3, [pc, #396]	@ (8001f88 <setTorque+0x258>)
 8001dfc:	881b      	ldrh	r3, [r3, #0]
 8001dfe:	2b19      	cmp	r3, #25
 8001e00:	d906      	bls.n	8001e10 <setTorque+0xe0>
	{
		print("EV_2_3");
 8001e02:	4863      	ldr	r0, [pc, #396]	@ (8001f90 <setTorque+0x260>)
 8001e04:	f7ff fe38 	bl	8001a78 <print>
		flag_EV_2_3 = 1;
 8001e08:	4b62      	ldr	r3, [pc, #392]	@ (8001f94 <setTorque+0x264>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	e00c      	b.n	8001e2a <setTorque+0xfa>
	}
	else if (s_freno < UMBRAL_FRENO_APPS && torque_total < 5)
 8001e10:	4b5e      	ldr	r3, [pc, #376]	@ (8001f8c <setTorque+0x25c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	dc06      	bgt.n	8001e2a <setTorque+0xfa>
 8001e1c:	4b5a      	ldr	r3, [pc, #360]	@ (8001f88 <setTorque+0x258>)
 8001e1e:	881b      	ldrh	r3, [r3, #0]
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d802      	bhi.n	8001e2a <setTorque+0xfa>
	{
		flag_EV_2_3 = 0;
 8001e24:	4b5b      	ldr	r3, [pc, #364]	@ (8001f94 <setTorque+0x264>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
	}
	// If an implausibility occurs between the values of the APPSs and persists for more than
	// 100ms The power to the motor(s) must be immediately shut down completely
	// T11.8.9 Implausibility is defined as a deviation of more than ten percentage points
	// pedal travel between any of the used APPSs
	if (abs(s1_aceleracion_aux - s2_aceleracion_aux) > 10)
 8001e2a:	4b54      	ldr	r3, [pc, #336]	@ (8001f7c <setTorque+0x24c>)
 8001e2c:	881b      	ldrh	r3, [r3, #0]
 8001e2e:	461a      	mov	r2, r3
 8001e30:	4b54      	ldr	r3, [pc, #336]	@ (8001f84 <setTorque+0x254>)
 8001e32:	881b      	ldrh	r3, [r3, #0]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	bfb8      	it	lt
 8001e3a:	425b      	neglt	r3, r3
 8001e3c:	2b0a      	cmp	r3, #10
 8001e3e:	dd06      	ble.n	8001e4e <setTorque+0x11e>
	{

		// if (HAL_GetTick() - last_time_t_11_8 > 100) {
		print("T11.8.9");
 8001e40:	4855      	ldr	r0, [pc, #340]	@ (8001f98 <setTorque+0x268>)
 8001e42:	f7ff fe19 	bl	8001a78 <print>
		flag_T11_8_9 = 1;
 8001e46:	4b55      	ldr	r3, [pc, #340]	@ (8001f9c <setTorque+0x26c>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	e007      	b.n	8001e5e <setTorque+0x12e>
		//}
	}
	else
	{
		last_time_t_11_8 = HAL_GetTick();
 8001e4e:	f001 fe69 	bl	8003b24 <HAL_GetTick>
 8001e52:	4603      	mov	r3, r0
 8001e54:	4a52      	ldr	r2, [pc, #328]	@ (8001fa0 <setTorque+0x270>)
 8001e56:	6013      	str	r3, [r2, #0]
		flag_T11_8_9 = 0;
 8001e58:	4b50      	ldr	r3, [pc, #320]	@ (8001f9c <setTorque+0x26c>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
	}

	if (flag_EV_2_3 || flag_T11_8_9)
 8001e5e:	4b4d      	ldr	r3, [pc, #308]	@ (8001f94 <setTorque+0x264>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d103      	bne.n	8001e6e <setTorque+0x13e>
 8001e66:	4b4d      	ldr	r3, [pc, #308]	@ (8001f9c <setTorque+0x26c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d002      	beq.n	8001e74 <setTorque+0x144>
	{
		torque_total = 0;
 8001e6e:	4b46      	ldr	r3, [pc, #280]	@ (8001f88 <setTorque+0x258>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	801a      	strh	r2, [r3, #0]
	print("Torque total solicitado: ");
	printValue(torque_total);
#endif

	// Limitación del torque en función de la carga
	if (v_celda_min < 3500)
 8001e74:	4b4b      	ldr	r3, [pc, #300]	@ (8001fa4 <setTorque+0x274>)
 8001e76:	edd3 7a00 	vldr	s15, [r3]
 8001e7a:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8001fa8 <setTorque+0x278>
 8001e7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e86:	d53a      	bpl.n	8001efe <setTorque+0x1ce>
	{
		if (v_celda_min > 2800)
 8001e88:	4b46      	ldr	r3, [pc, #280]	@ (8001fa4 <setTorque+0x274>)
 8001e8a:	edd3 7a00 	vldr	s15, [r3]
 8001e8e:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001fac <setTorque+0x27c>
 8001e92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e9a:	dd1f      	ble.n	8001edc <setTorque+0x1ac>
		{
			torque_limitado = torque_total * (1.357 * v_celda_min - 3750) / 1000;
 8001e9c:	4b3a      	ldr	r3, [pc, #232]	@ (8001f88 <setTorque+0x258>)
 8001e9e:	881b      	ldrh	r3, [r3, #0]
 8001ea0:	ee07 3a90 	vmov	s15, r3
 8001ea4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001ea8:	4b3e      	ldr	r3, [pc, #248]	@ (8001fa4 <setTorque+0x274>)
 8001eaa:	edd3 7a00 	vldr	s15, [r3]
 8001eae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001eb2:	ed9f 5b29 	vldr	d5, [pc, #164]	@ 8001f58 <setTorque+0x228>
 8001eb6:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001eba:	ed9f 5b29 	vldr	d5, [pc, #164]	@ 8001f60 <setTorque+0x230>
 8001ebe:	ee37 7b45 	vsub.f64	d7, d7, d5
 8001ec2:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001ec6:	ed9f 5b28 	vldr	d5, [pc, #160]	@ 8001f68 <setTorque+0x238>
 8001eca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001ece:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001ed2:	ee17 2a90 	vmov	r2, s15
 8001ed6:	4b36      	ldr	r3, [pc, #216]	@ (8001fb0 <setTorque+0x280>)
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	e015      	b.n	8001f08 <setTorque+0x1d8>
		}
		else
		{
			torque_limitado = torque_total * 0.05;
 8001edc:	4b2a      	ldr	r3, [pc, #168]	@ (8001f88 <setTorque+0x258>)
 8001ede:	881b      	ldrh	r3, [r3, #0]
 8001ee0:	ee07 3a90 	vmov	s15, r3
 8001ee4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001ee8:	ed9f 6b21 	vldr	d6, [pc, #132]	@ 8001f70 <setTorque+0x240>
 8001eec:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ef0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001ef4:	ee17 2a90 	vmov	r2, s15
 8001ef8:	4b2d      	ldr	r3, [pc, #180]	@ (8001fb0 <setTorque+0x280>)
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	e004      	b.n	8001f08 <setTorque+0x1d8>
		}
	}
	else
	{
		torque_limitado = torque_total;
 8001efe:	4b22      	ldr	r3, [pc, #136]	@ (8001f88 <setTorque+0x258>)
 8001f00:	881b      	ldrh	r3, [r3, #0]
 8001f02:	461a      	mov	r2, r3
 8001f04:	4b2a      	ldr	r3, [pc, #168]	@ (8001fb0 <setTorque+0x280>)
 8001f06:	601a      	str	r2, [r3, #0]
print("Torque limitado en: ");
printValue(torque_limitado);
#endif

	// torque_total = torque_total * 240 / 100;
	if (torque_total >= 10)
 8001f08:	4b1f      	ldr	r3, [pc, #124]	@ (8001f88 <setTorque+0x258>)
 8001f0a:	881b      	ldrh	r3, [r3, #0]
 8001f0c:	2b09      	cmp	r3, #9
 8001f0e:	d912      	bls.n	8001f36 <setTorque+0x206>
	{
		torque_total = (torque_total * 240 / 90 - 2400 / 90) * (100 / 100);
 8001f10:	4b1d      	ldr	r3, [pc, #116]	@ (8001f88 <setTorque+0x258>)
 8001f12:	881b      	ldrh	r3, [r3, #0]
 8001f14:	461a      	mov	r2, r3
 8001f16:	4613      	mov	r3, r2
 8001f18:	011b      	lsls	r3, r3, #4
 8001f1a:	1a9b      	subs	r3, r3, r2
 8001f1c:	011b      	lsls	r3, r3, #4
 8001f1e:	4a25      	ldr	r2, [pc, #148]	@ (8001fb4 <setTorque+0x284>)
 8001f20:	fb82 1203 	smull	r1, r2, r2, r3
 8001f24:	441a      	add	r2, r3
 8001f26:	1192      	asrs	r2, r2, #6
 8001f28:	17db      	asrs	r3, r3, #31
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	3b1a      	subs	r3, #26
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	4b15      	ldr	r3, [pc, #84]	@ (8001f88 <setTorque+0x258>)
 8001f34:	801a      	strh	r2, [r3, #0]
	/*if(torque_total < 0){
		torque_total = 0;
	}*/

	// Invertir todos los bits (complemento a uno)
	uint16_t complement_one = ~torque_total;
 8001f36:	4b14      	ldr	r3, [pc, #80]	@ (8001f88 <setTorque+0x258>)
 8001f38:	881b      	ldrh	r3, [r3, #0]
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	80fb      	strh	r3, [r7, #6]

	// Sumar 1 para obtener el complemento a dos
	uint16_t torque_real = complement_one + 1;
 8001f3e:	88fb      	ldrh	r3, [r7, #6]
 8001f40:	3301      	adds	r3, #1
 8001f42:	80bb      	strh	r3, [r7, #4]

#if 0
	print("Torque mandado al inversor: ");
	printHex(torque_real);
#endif
	return torque_real;
 8001f44:	88bb      	ldrh	r3, [r7, #4]
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	33333334 	.word	0x33333334
 8001f54:	401a3333 	.word	0x401a3333
 8001f58:	a1cac083 	.word	0xa1cac083
 8001f5c:	3ff5b645 	.word	0x3ff5b645
 8001f60:	00000000 	.word	0x00000000
 8001f64:	40ad4c00 	.word	0x40ad4c00
 8001f68:	00000000 	.word	0x00000000
 8001f6c:	408f4000 	.word	0x408f4000
 8001f70:	9999999a 	.word	0x9999999a
 8001f74:	3fa99999 	.word	0x3fa99999
 8001f78:	240007b2 	.word	0x240007b2
 8001f7c:	240007b6 	.word	0x240007b6
 8001f80:	240007b4 	.word	0x240007b4
 8001f84:	240007b8 	.word	0x240007b8
 8001f88:	240007c0 	.word	0x240007c0
 8001f8c:	240007bc 	.word	0x240007bc
 8001f90:	08014800 	.word	0x08014800
 8001f94:	240007d0 	.word	0x240007d0
 8001f98:	08014808 	.word	0x08014808
 8001f9c:	240007d4 	.word	0x240007d4
 8001fa0:	240007cc 	.word	0x240007cc
 8001fa4:	24000010 	.word	0x24000010
 8001fa8:	455ac000 	.word	0x455ac000
 8001fac:	452f0000 	.word	0x452f0000
 8001fb0:	240007c4 	.word	0x240007c4
 8001fb4:	b60b60b7 	.word	0xb60b60b7

08001fb8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]

	if (htim == &htim16)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4aa3      	ldr	r2, [pc, #652]	@ (8002250 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	f040 81f3 	bne.w	80023b0 <HAL_TIM_PeriodElapsedCallback+0x3f8>
	{
		// Reenvío DC_BUS_VOLTAGE al AMS por CAN_ACU
		TxHeader_Acu.Identifier = ID_dc_bus_voltage;
 8001fca:	4ba2      	ldr	r3, [pc, #648]	@ (8002254 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4aa2      	ldr	r2, [pc, #648]	@ (8002258 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001fd0:	6013      	str	r3, [r2, #0]
		TxHeader_Acu.DataLength = 2;
 8001fd2:	4ba1      	ldr	r3, [pc, #644]	@ (8002258 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	60da      	str	r2, [r3, #12]
		TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 8001fd8:	4b9f      	ldr	r3, [pc, #636]	@ (8002258 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001fda:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001fde:	605a      	str	r2, [r3, #4]
		TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 8001fe0:	4b9d      	ldr	r3, [pc, #628]	@ (8002258 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	619a      	str	r2, [r3, #24]
		TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 8001fe6:	4b9c      	ldr	r3, [pc, #624]	@ (8002258 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	609a      	str	r2, [r3, #8]

		/*		TxData_Acu[0] = byte0_voltage;
		 TxData_Acu[1] = byte1_voltage;*/
		TxData_Acu[0] = inv_dc_bus_voltage & 0xFF;
 8001fec:	4b9b      	ldr	r3, [pc, #620]	@ (800225c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	4b9b      	ldr	r3, [pc, #620]	@ (8002260 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001ff4:	701a      	strb	r2, [r3, #0]
		TxData_Acu[1] = (inv_dc_bus_voltage >> 8) & 0xFF;
 8001ff6:	4b99      	ldr	r3, [pc, #612]	@ (800225c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	121b      	asrs	r3, r3, #8
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	4b98      	ldr	r3, [pc, #608]	@ (8002260 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002000:	705a      	strb	r2, [r3, #1]
		//printValue(inv_dc_bus_voltage);
		/* --- Telemetry tick: 10ms base --- */
		    tel_irq_cnt++;                // <--- ADD
 8002002:	4b98      	ldr	r3, [pc, #608]	@ (8002264 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	3301      	adds	r3, #1
 8002008:	4a96      	ldr	r2, [pc, #600]	@ (8002264 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800200a:	6013      	str	r3, [r2, #0]
		    tel_tick += 10;
 800200c:	4b96      	ldr	r3, [pc, #600]	@ (8002268 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	330a      	adds	r3, #10
 8002012:	4a95      	ldr	r2, [pc, #596]	@ (8002268 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8002014:	6013      	str	r3, [r2, #0]

		    (void)HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu);
 8002016:	4a92      	ldr	r2, [pc, #584]	@ (8002260 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002018:	498f      	ldr	r1, [pc, #572]	@ (8002258 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800201a:	4894      	ldr	r0, [pc, #592]	@ (800226c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800201c:	f006 fe1f 	bl	8008c5e <HAL_FDCAN_AddMessageToTxFifoQ>

		    precharge_button = HAL_GPIO_ReadPin(START_BUTTON_GPIO_Port, START_BUTTON_Pin);
 8002020:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002024:	4892      	ldr	r0, [pc, #584]	@ (8002270 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002026:	f007 ff05 	bl	8009e34 <HAL_GPIO_ReadPin>
 800202a:	4603      	mov	r3, r0
 800202c:	461a      	mov	r2, r3
 800202e:	4b91      	ldr	r3, [pc, #580]	@ (8002274 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002030:	601a      	str	r2, [r3, #0]

		    TxHeader_Acu.Identifier = 0x600;
 8002032:	4b89      	ldr	r3, [pc, #548]	@ (8002258 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002034:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8002038:	601a      	str	r2, [r3, #0]
		    TxHeader_Acu.DataLength = 2;
 800203a:	4b87      	ldr	r3, [pc, #540]	@ (8002258 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800203c:	2202      	movs	r2, #2
 800203e:	60da      	str	r2, [r3, #12]
		    TxHeader_Acu.IdType     = FDCAN_EXTENDED_ID;
 8002040:	4b85      	ldr	r3, [pc, #532]	@ (8002258 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002042:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002046:	605a      	str	r2, [r3, #4]
		    TxHeader_Acu.FDFormat   = FDCAN_CLASSIC_CAN;
 8002048:	4b83      	ldr	r3, [pc, #524]	@ (8002258 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800204a:	2200      	movs	r2, #0
 800204c:	619a      	str	r2, [r3, #24]
		    TxHeader_Acu.TxFrameType= FDCAN_DATA_FRAME;
 800204e:	4b82      	ldr	r3, [pc, #520]	@ (8002258 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002050:	2200      	movs	r2, #0
 8002052:	609a      	str	r2, [r3, #8]
		    TxData_Acu[0] = precharge_button;
 8002054:	4b87      	ldr	r3, [pc, #540]	@ (8002274 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	b2da      	uxtb	r2, r3
 800205a:	4b81      	ldr	r3, [pc, #516]	@ (8002260 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800205c:	701a      	strb	r2, [r3, #0]

		    /* REMOVE noisy ISR print:
		       printValue(TxData_Acu[0]);  // <-- delete this (no UART in ISR) */

		    (void)HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu);
 800205e:	4a80      	ldr	r2, [pc, #512]	@ (8002260 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002060:	497d      	ldr	r1, [pc, #500]	@ (8002258 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002062:	4882      	ldr	r0, [pc, #520]	@ (800226c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002064:	f006 fdfb 	bl	8008c5e <HAL_FDCAN_AddMessageToTxFifoQ>

		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK)
 8002068:	4a7d      	ldr	r2, [pc, #500]	@ (8002260 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800206a:	497b      	ldr	r1, [pc, #492]	@ (8002258 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800206c:	487f      	ldr	r0, [pc, #508]	@ (800226c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800206e:	f006 fdf6 	bl	8008c5e <HAL_FDCAN_AddMessageToTxFifoQ>
#if DEBUG
			//print("CAN_ACU: DC_BUS_VOLTAGE enviado a AMS");
#endif
		}

		precharge_button = HAL_GPIO_ReadPin(START_BUTTON_GPIO_Port, START_BUTTON_Pin);
 8002072:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002076:	487e      	ldr	r0, [pc, #504]	@ (8002270 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002078:	f007 fedc 	bl	8009e34 <HAL_GPIO_ReadPin>
 800207c:	4603      	mov	r3, r0
 800207e:	461a      	mov	r2, r3
 8002080:	4b7c      	ldr	r3, [pc, #496]	@ (8002274 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002082:	601a      	str	r2, [r3, #0]

		TxHeader_Acu.Identifier = 0x600;
 8002084:	4b74      	ldr	r3, [pc, #464]	@ (8002258 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002086:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800208a:	601a      	str	r2, [r3, #0]
		TxHeader_Acu.DataLength = 2;
 800208c:	4b72      	ldr	r3, [pc, #456]	@ (8002258 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800208e:	2202      	movs	r2, #2
 8002090:	60da      	str	r2, [r3, #12]
		TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 8002092:	4b71      	ldr	r3, [pc, #452]	@ (8002258 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002094:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002098:	605a      	str	r2, [r3, #4]
		TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 800209a:	4b6f      	ldr	r3, [pc, #444]	@ (8002258 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800209c:	2200      	movs	r2, #0
 800209e:	619a      	str	r2, [r3, #24]
		TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 80020a0:	4b6d      	ldr	r3, [pc, #436]	@ (8002258 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	609a      	str	r2, [r3, #8]


		TxData_Acu[0] = precharge_button;
 80020a6:	4b73      	ldr	r3, [pc, #460]	@ (8002274 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	4b6c      	ldr	r3, [pc, #432]	@ (8002260 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80020ae:	701a      	strb	r2, [r3, #0]
		printValue(TxData_Acu[0]);
 80020b0:	4b6b      	ldr	r3, [pc, #428]	@ (8002260 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff fcfd 	bl	8001ab4 <printValue>

		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK)
 80020ba:	4a69      	ldr	r2, [pc, #420]	@ (8002260 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80020bc:	4966      	ldr	r1, [pc, #408]	@ (8002258 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80020be:	486b      	ldr	r0, [pc, #428]	@ (800226c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80020c0:	f006 fdcd 	bl	8008c5e <HAL_FDCAN_AddMessageToTxFifoQ>

		// ---------- CONTROL DEL INVERSOR ----------

		//printHex(state);
		// Estado TORQUE
		if ((state == 4 || state == 6) && flag_r2d == 1)
 80020c4:	4b6c      	ldr	r3, [pc, #432]	@ (8002278 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d003      	beq.n	80020d4 <HAL_TIM_PeriodElapsedCallback+0x11c>
 80020cc:	4b6a      	ldr	r3, [pc, #424]	@ (8002278 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	2b06      	cmp	r3, #6
 80020d2:	d11b      	bne.n	800210c <HAL_TIM_PeriodElapsedCallback+0x154>
 80020d4:	4b69      	ldr	r3, [pc, #420]	@ (800227c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d117      	bne.n	800210c <HAL_TIM_PeriodElapsedCallback+0x154>
		{ // Si no hay que reactivar el coche manda siempre torque

			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 80020dc:	4b68      	ldr	r3, [pc, #416]	@ (8002280 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a68      	ldr	r2, [pc, #416]	@ (8002284 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80020e2:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 80020e4:	4b67      	ldr	r3, [pc, #412]	@ (8002284 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80020e6:	2203      	movs	r2, #3
 80020e8:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 80020ea:	4b66      	ldr	r3, [pc, #408]	@ (8002284 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 80020f0:	4b65      	ldr	r3, [pc, #404]	@ (8002288 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 80020f6:	4b64      	ldr	r3, [pc, #400]	@ (8002288 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0x6;
 80020fc:	4b62      	ldr	r3, [pc, #392]	@ (8002288 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80020fe:	2206      	movs	r2, #6
 8002100:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8002102:	4a61      	ldr	r2, [pc, #388]	@ (8002288 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002104:	495f      	ldr	r1, [pc, #380]	@ (8002284 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002106:	4861      	ldr	r0, [pc, #388]	@ (800228c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002108:	f006 fda9 	bl	8008c5e <HAL_FDCAN_AddMessageToTxFifoQ>
		}

		if(flag_r2d == 1){
 800210c:	4b5b      	ldr	r3, [pc, #364]	@ (800227c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b01      	cmp	r3, #1
 8002112:	f040 814d 	bne.w	80023b0 <HAL_TIM_PeriodElapsedCallback+0x3f8>
			switch (state)
 8002116:	4b58      	ldr	r3, [pc, #352]	@ (8002278 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2b0d      	cmp	r3, #13
 800211c:	f200 8148 	bhi.w	80023b0 <HAL_TIM_PeriodElapsedCallback+0x3f8>
 8002120:	a201      	add	r2, pc, #4	@ (adr r2, 8002128 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8002122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002126:	bf00      	nop
 8002128:	08002161 	.word	0x08002161
 800212c:	080023b1 	.word	0x080023b1
 8002130:	080023b1 	.word	0x080023b1
 8002134:	08002191 	.word	0x08002191
 8002138:	080021c7 	.word	0x080021c7
 800213c:	080023b1 	.word	0x080023b1
 8002140:	0800229d 	.word	0x0800229d
 8002144:	080023b1 	.word	0x080023b1
 8002148:	080023b1 	.word	0x080023b1
 800214c:	080023b1 	.word	0x080023b1
 8002150:	080022fd 	.word	0x080022fd
 8002154:	0800233d 	.word	0x0800233d
 8002158:	080023b1 	.word	0x080023b1
 800215c:	08002379 	.word	0x08002379
			{
			case 0:
				TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8002160:	4b47      	ldr	r3, [pc, #284]	@ (8002280 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a47      	ldr	r2, [pc, #284]	@ (8002284 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002166:	6013      	str	r3, [r2, #0]
				TxHeader_Inv.DataLength = 3;
 8002168:	4b46      	ldr	r3, [pc, #280]	@ (8002284 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800216a:	2203      	movs	r2, #3
 800216c:	60da      	str	r2, [r3, #12]
				TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 800216e:	4b45      	ldr	r3, [pc, #276]	@ (8002284 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002170:	2200      	movs	r2, #0
 8002172:	605a      	str	r2, [r3, #4]

				TxData_Inv[0] = 0x0;
 8002174:	4b44      	ldr	r3, [pc, #272]	@ (8002288 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002176:	2200      	movs	r2, #0
 8002178:	701a      	strb	r2, [r3, #0]
				TxData_Inv[1] = 0x0;
 800217a:	4b43      	ldr	r3, [pc, #268]	@ (8002288 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800217c:	2200      	movs	r2, #0
 800217e:	705a      	strb	r2, [r3, #1]
				TxData_Inv[2] = 0x1;
 8002180:	4b41      	ldr	r3, [pc, #260]	@ (8002288 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002182:	2201      	movs	r2, #1
 8002184:	709a      	strb	r2, [r3, #2]
				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8002186:	4a40      	ldr	r2, [pc, #256]	@ (8002288 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002188:	493e      	ldr	r1, [pc, #248]	@ (8002284 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800218a:	4840      	ldr	r0, [pc, #256]	@ (800228c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800218c:	f006 fd67 	bl	8008c5e <HAL_FDCAN_AddMessageToTxFifoQ>

			case 3:
	#if DEBUG
				//print("state: standby");
	#endif
				flag_react = 0;
 8002190:	4b3f      	ldr	r3, [pc, #252]	@ (8002290 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002192:	2200      	movs	r2, #0
 8002194:	701a      	strb	r2, [r3, #0]
				// Estado READY inversor
				TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8002196:	4b3a      	ldr	r3, [pc, #232]	@ (8002280 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a3a      	ldr	r2, [pc, #232]	@ (8002284 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800219c:	6013      	str	r3, [r2, #0]
				TxHeader_Inv.DataLength = 3;
 800219e:	4b39      	ldr	r3, [pc, #228]	@ (8002284 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80021a0:	2203      	movs	r2, #3
 80021a2:	60da      	str	r2, [r3, #12]
				TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 80021a4:	4b37      	ldr	r3, [pc, #220]	@ (8002284 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	605a      	str	r2, [r3, #4]

				TxData_Inv[0] = 0x0;
 80021aa:	4b37      	ldr	r3, [pc, #220]	@ (8002288 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	701a      	strb	r2, [r3, #0]
				TxData_Inv[1] = 0x0;
 80021b0:	4b35      	ldr	r3, [pc, #212]	@ (8002288 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	705a      	strb	r2, [r3, #1]
				TxData_Inv[2] = 0x4;
 80021b6:	4b34      	ldr	r3, [pc, #208]	@ (8002288 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80021b8:	2204      	movs	r2, #4
 80021ba:	709a      	strb	r2, [r3, #2]
				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 80021bc:	4a32      	ldr	r2, [pc, #200]	@ (8002288 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80021be:	4931      	ldr	r1, [pc, #196]	@ (8002284 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80021c0:	4832      	ldr	r0, [pc, #200]	@ (800228c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80021c2:	f006 fd4c 	bl	8008c5e <HAL_FDCAN_AddMessageToTxFifoQ>
				//}

			case 4:

	#if DEBUG
				print("state: ready");
 80021c6:	4833      	ldr	r0, [pc, #204]	@ (8002294 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80021c8:	f7ff fc56 	bl	8001a78 <print>
	#endif
				if (flag_r2d == 1){
 80021cc:	4b2b      	ldr	r3, [pc, #172]	@ (800227c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d120      	bne.n	8002216 <HAL_TIM_PeriodElapsedCallback+0x25e>
					TxHeader_Inv.Identifier = 0x362;
 80021d4:	4b2b      	ldr	r3, [pc, #172]	@ (8002284 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80021d6:	f240 3262 	movw	r2, #866	@ 0x362
 80021da:	601a      	str	r2, [r3, #0]
					TxHeader_Inv.DataLength = 4;
 80021dc:	4b29      	ldr	r3, [pc, #164]	@ (8002284 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80021de:	2204      	movs	r2, #4
 80021e0:	60da      	str	r2, [r3, #12]

					real_torque = 0;
 80021e2:	4b2d      	ldr	r3, [pc, #180]	@ (8002298 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	801a      	strh	r2, [r3, #0]

					TxData_Inv[0] = 0x0;
 80021e8:	4b27      	ldr	r3, [pc, #156]	@ (8002288 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	701a      	strb	r2, [r3, #0]
					TxData_Inv[1] = 0x0;
 80021ee:	4b26      	ldr	r3, [pc, #152]	@ (8002288 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	705a      	strb	r2, [r3, #1]
					TxData_Inv[2] = real_torque;
 80021f4:	4b28      	ldr	r3, [pc, #160]	@ (8002298 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80021f6:	881b      	ldrh	r3, [r3, #0]
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	4b23      	ldr	r3, [pc, #140]	@ (8002288 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80021fc:	709a      	strb	r2, [r3, #2]
					TxData_Inv[3] = 0x0;
 80021fe:	4b22      	ldr	r3, [pc, #136]	@ (8002288 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002200:	2200      	movs	r2, #0
 8002202:	70da      	strb	r2, [r3, #3]
					HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8002204:	4a20      	ldr	r2, [pc, #128]	@ (8002288 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002206:	491f      	ldr	r1, [pc, #124]	@ (8002284 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002208:	4820      	ldr	r0, [pc, #128]	@ (800228c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800220a:	f006 fd28 	bl	8008c5e <HAL_FDCAN_AddMessageToTxFifoQ>
					flag_react = 0; // Reactivado
 800220e:	4b20      	ldr	r3, [pc, #128]	@ (8002290 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002210:	2200      	movs	r2, #0
 8002212:	701a      	strb	r2, [r3, #0]
					TxData_Inv[1] = 0x0;
					TxData_Inv[2] = 0x4;
					HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
				}

				break;
 8002214:	e0cc      	b.n	80023b0 <HAL_TIM_PeriodElapsedCallback+0x3f8>
					flag_react = 0;
 8002216:	4b1e      	ldr	r3, [pc, #120]	@ (8002290 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002218:	2200      	movs	r2, #0
 800221a:	701a      	strb	r2, [r3, #0]
					TxHeader_Inv.Identifier = RX_SETPOINT_1;
 800221c:	4b18      	ldr	r3, [pc, #96]	@ (8002280 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a18      	ldr	r2, [pc, #96]	@ (8002284 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002222:	6013      	str	r3, [r2, #0]
					TxHeader_Inv.DataLength = 3;
 8002224:	4b17      	ldr	r3, [pc, #92]	@ (8002284 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002226:	2203      	movs	r2, #3
 8002228:	60da      	str	r2, [r3, #12]
					TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 800222a:	4b16      	ldr	r3, [pc, #88]	@ (8002284 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800222c:	2200      	movs	r2, #0
 800222e:	605a      	str	r2, [r3, #4]
					TxData_Inv[0] = 0x0;
 8002230:	4b15      	ldr	r3, [pc, #84]	@ (8002288 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002232:	2200      	movs	r2, #0
 8002234:	701a      	strb	r2, [r3, #0]
					TxData_Inv[1] = 0x0;
 8002236:	4b14      	ldr	r3, [pc, #80]	@ (8002288 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002238:	2200      	movs	r2, #0
 800223a:	705a      	strb	r2, [r3, #1]
					TxData_Inv[2] = 0x4;
 800223c:	4b12      	ldr	r3, [pc, #72]	@ (8002288 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800223e:	2204      	movs	r2, #4
 8002240:	709a      	strb	r2, [r3, #2]
					HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8002242:	4a11      	ldr	r2, [pc, #68]	@ (8002288 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002244:	490f      	ldr	r1, [pc, #60]	@ (8002284 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002246:	4811      	ldr	r0, [pc, #68]	@ (800228c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002248:	f006 fd09 	bl	8008c5e <HAL_FDCAN_AddMessageToTxFifoQ>
				break;
 800224c:	e0b0      	b.n	80023b0 <HAL_TIM_PeriodElapsedCallback+0x3f8>
 800224e:	bf00      	nop
 8002250:	24000534 	.word	0x24000534
 8002254:	24000004 	.word	0x24000004
 8002258:	24000704 	.word	0x24000704
 800225c:	240007a4 	.word	0x240007a4
 8002260:	24000788 	.word	0x24000788
 8002264:	240006ac 	.word	0x240006ac
 8002268:	240006a8 	.word	0x240006a8
 800226c:	240002a4 	.word	0x240002a4
 8002270:	58021400 	.word	0x58021400
 8002274:	240007d8 	.word	0x240007d8
 8002278:	240007ca 	.word	0x240007ca
 800227c:	2400093c 	.word	0x2400093c
 8002280:	24000000 	.word	0x24000000
 8002284:	240006b8 	.word	0x240006b8
 8002288:	24000778 	.word	0x24000778
 800228c:	24000204 	.word	0x24000204
 8002290:	2400093b 	.word	0x2400093b
 8002294:	08014780 	.word	0x08014780
 8002298:	240007c8 	.word	0x240007c8
			case 6:
				print("state: torque");
 800229c:	4846      	ldr	r0, [pc, #280]	@ (80023b8 <HAL_TIM_PeriodElapsedCallback+0x400>)
 800229e:	f7ff fbeb 	bl	8001a78 <print>

				// Request TORQUE inversor

				// flag_react = 1;

				real_torque = setTorque();
 80022a2:	f7ff fd45 	bl	8001d30 <setTorque>
 80022a6:	4603      	mov	r3, r0
 80022a8:	461a      	mov	r2, r3
 80022aa:	4b44      	ldr	r3, [pc, #272]	@ (80023bc <HAL_TIM_PeriodElapsedCallback+0x404>)
 80022ac:	801a      	strh	r2, [r3, #0]

				TxHeader_Inv.Identifier = 0x362;
 80022ae:	4b44      	ldr	r3, [pc, #272]	@ (80023c0 <HAL_TIM_PeriodElapsedCallback+0x408>)
 80022b0:	f240 3262 	movw	r2, #866	@ 0x362
 80022b4:	601a      	str	r2, [r3, #0]
				TxHeader_Inv.DataLength = 4;
 80022b6:	4b42      	ldr	r3, [pc, #264]	@ (80023c0 <HAL_TIM_PeriodElapsedCallback+0x408>)
 80022b8:	2204      	movs	r2, #4
 80022ba:	60da      	str	r2, [r3, #12]

				// real_torque = 0;
				byte_torque_1 = real_torque & 0xFF;
 80022bc:	4b3f      	ldr	r3, [pc, #252]	@ (80023bc <HAL_TIM_PeriodElapsedCallback+0x404>)
 80022be:	881b      	ldrh	r3, [r3, #0]
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	4b40      	ldr	r3, [pc, #256]	@ (80023c4 <HAL_TIM_PeriodElapsedCallback+0x40c>)
 80022c4:	701a      	strb	r2, [r3, #0]
				byte_torque_2 = (real_torque >> 8) & 0xFF;
 80022c6:	4b3d      	ldr	r3, [pc, #244]	@ (80023bc <HAL_TIM_PeriodElapsedCallback+0x404>)
 80022c8:	881b      	ldrh	r3, [r3, #0]
 80022ca:	0a1b      	lsrs	r3, r3, #8
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	b2da      	uxtb	r2, r3
 80022d0:	4b3d      	ldr	r3, [pc, #244]	@ (80023c8 <HAL_TIM_PeriodElapsedCallback+0x410>)
 80022d2:	701a      	strb	r2, [r3, #0]
				TxData_Inv[0] = 0x00;
 80022d4:	4b3d      	ldr	r3, [pc, #244]	@ (80023cc <HAL_TIM_PeriodElapsedCallback+0x414>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	701a      	strb	r2, [r3, #0]
				TxData_Inv[1] = 0x00;
 80022da:	4b3c      	ldr	r3, [pc, #240]	@ (80023cc <HAL_TIM_PeriodElapsedCallback+0x414>)
 80022dc:	2200      	movs	r2, #0
 80022de:	705a      	strb	r2, [r3, #1]
					if(frena > 500){
						acelera = 1;
						frena = 0;
					}
				}*/
				TxData_Inv[2] = byte_torque_1;
 80022e0:	4b38      	ldr	r3, [pc, #224]	@ (80023c4 <HAL_TIM_PeriodElapsedCallback+0x40c>)
 80022e2:	781a      	ldrb	r2, [r3, #0]
 80022e4:	4b39      	ldr	r3, [pc, #228]	@ (80023cc <HAL_TIM_PeriodElapsedCallback+0x414>)
 80022e6:	709a      	strb	r2, [r3, #2]
				TxData_Inv[3] = byte_torque_2;
 80022e8:	4b37      	ldr	r3, [pc, #220]	@ (80023c8 <HAL_TIM_PeriodElapsedCallback+0x410>)
 80022ea:	781a      	ldrb	r2, [r3, #0]
 80022ec:	4b37      	ldr	r3, [pc, #220]	@ (80023cc <HAL_TIM_PeriodElapsedCallback+0x414>)
 80022ee:	70da      	strb	r2, [r3, #3]
				// TxData_Inv[2] = 0xFE;
				// TxData_Inv[3] = 0xFF;
				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 80022f0:	4a36      	ldr	r2, [pc, #216]	@ (80023cc <HAL_TIM_PeriodElapsedCallback+0x414>)
 80022f2:	4933      	ldr	r1, [pc, #204]	@ (80023c0 <HAL_TIM_PeriodElapsedCallback+0x408>)
 80022f4:	4836      	ldr	r0, [pc, #216]	@ (80023d0 <HAL_TIM_PeriodElapsedCallback+0x418>)
 80022f6:	f006 fcb2 	bl	8008c5e <HAL_FDCAN_AddMessageToTxFifoQ>
				//CAN_bus_off_check_reset(&hfdcan1);

				break;
 80022fa:	e059      	b.n	80023b0 <HAL_TIM_PeriodElapsedCallback+0x3f8>

			case 10:
				print("state: soft fault");
 80022fc:	4835      	ldr	r0, [pc, #212]	@ (80023d4 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 80022fe:	f7ff fbbb 	bl	8001a78 <print>
				printValue(error);
 8002302:	4b35      	ldr	r3, [pc, #212]	@ (80023d8 <HAL_TIM_PeriodElapsedCallback+0x420>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff fbd4 	bl	8001ab4 <printValue>

				// Estado READY inversor
				TxHeader_Inv.Identifier = RX_SETPOINT_1;
 800230c:	4b33      	ldr	r3, [pc, #204]	@ (80023dc <HAL_TIM_PeriodElapsedCallback+0x424>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a2b      	ldr	r2, [pc, #172]	@ (80023c0 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8002312:	6013      	str	r3, [r2, #0]
				TxHeader_Inv.DataLength = 3;
 8002314:	4b2a      	ldr	r3, [pc, #168]	@ (80023c0 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8002316:	2203      	movs	r2, #3
 8002318:	60da      	str	r2, [r3, #12]
				TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 800231a:	4b29      	ldr	r3, [pc, #164]	@ (80023c0 <HAL_TIM_PeriodElapsedCallback+0x408>)
 800231c:	2200      	movs	r2, #0
 800231e:	605a      	str	r2, [r3, #4]

				TxData_Inv[0] = 0x0;
 8002320:	4b2a      	ldr	r3, [pc, #168]	@ (80023cc <HAL_TIM_PeriodElapsedCallback+0x414>)
 8002322:	2200      	movs	r2, #0
 8002324:	701a      	strb	r2, [r3, #0]
				TxData_Inv[1] = 0x0;
 8002326:	4b29      	ldr	r3, [pc, #164]	@ (80023cc <HAL_TIM_PeriodElapsedCallback+0x414>)
 8002328:	2200      	movs	r2, #0
 800232a:	705a      	strb	r2, [r3, #1]
				TxData_Inv[2] = 0x13;
 800232c:	4b27      	ldr	r3, [pc, #156]	@ (80023cc <HAL_TIM_PeriodElapsedCallback+0x414>)
 800232e:	2213      	movs	r2, #19
 8002330:	709a      	strb	r2, [r3, #2]
				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8002332:	4a26      	ldr	r2, [pc, #152]	@ (80023cc <HAL_TIM_PeriodElapsedCallback+0x414>)
 8002334:	4922      	ldr	r1, [pc, #136]	@ (80023c0 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8002336:	4826      	ldr	r0, [pc, #152]	@ (80023d0 <HAL_TIM_PeriodElapsedCallback+0x418>)
 8002338:	f006 fc91 	bl	8008c5e <HAL_FDCAN_AddMessageToTxFifoQ>
						HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv,
													  TxData_Inv);
					}*/

			case 11:
				print("state: hard fault");
 800233c:	4828      	ldr	r0, [pc, #160]	@ (80023e0 <HAL_TIM_PeriodElapsedCallback+0x428>)
 800233e:	f7ff fb9b 	bl	8001a78 <print>
				flag_react = 1;
 8002342:	4b28      	ldr	r3, [pc, #160]	@ (80023e4 <HAL_TIM_PeriodElapsedCallback+0x42c>)
 8002344:	2201      	movs	r2, #1
 8002346:	701a      	strb	r2, [r3, #0]
				TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8002348:	4b24      	ldr	r3, [pc, #144]	@ (80023dc <HAL_TIM_PeriodElapsedCallback+0x424>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a1c      	ldr	r2, [pc, #112]	@ (80023c0 <HAL_TIM_PeriodElapsedCallback+0x408>)
 800234e:	6013      	str	r3, [r2, #0]
				TxHeader_Inv.DataLength = 3;
 8002350:	4b1b      	ldr	r3, [pc, #108]	@ (80023c0 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8002352:	2203      	movs	r2, #3
 8002354:	60da      	str	r2, [r3, #12]
				TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8002356:	4b1a      	ldr	r3, [pc, #104]	@ (80023c0 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8002358:	2200      	movs	r2, #0
 800235a:	605a      	str	r2, [r3, #4]

				TxData_Inv[0] = 0x0;
 800235c:	4b1b      	ldr	r3, [pc, #108]	@ (80023cc <HAL_TIM_PeriodElapsedCallback+0x414>)
 800235e:	2200      	movs	r2, #0
 8002360:	701a      	strb	r2, [r3, #0]
				TxData_Inv[1] = 0x0;
 8002362:	4b1a      	ldr	r3, [pc, #104]	@ (80023cc <HAL_TIM_PeriodElapsedCallback+0x414>)
 8002364:	2200      	movs	r2, #0
 8002366:	705a      	strb	r2, [r3, #1]
				TxData_Inv[2] = 13;
 8002368:	4b18      	ldr	r3, [pc, #96]	@ (80023cc <HAL_TIM_PeriodElapsedCallback+0x414>)
 800236a:	220d      	movs	r2, #13
 800236c:	709a      	strb	r2, [r3, #2]
				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 800236e:	4a17      	ldr	r2, [pc, #92]	@ (80023cc <HAL_TIM_PeriodElapsedCallback+0x414>)
 8002370:	4913      	ldr	r1, [pc, #76]	@ (80023c0 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8002372:	4817      	ldr	r0, [pc, #92]	@ (80023d0 <HAL_TIM_PeriodElapsedCallback+0x418>)
 8002374:	f006 fc73 	bl	8008c5e <HAL_FDCAN_AddMessageToTxFifoQ>

			case 13:
				print("state: shutdown");
 8002378:	481b      	ldr	r0, [pc, #108]	@ (80023e8 <HAL_TIM_PeriodElapsedCallback+0x430>)
 800237a:	f7ff fb7d 	bl	8001a78 <print>
				TxHeader_Inv.Identifier = RX_SETPOINT_1;
 800237e:	4b17      	ldr	r3, [pc, #92]	@ (80023dc <HAL_TIM_PeriodElapsedCallback+0x424>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a0f      	ldr	r2, [pc, #60]	@ (80023c0 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8002384:	6013      	str	r3, [r2, #0]
				TxHeader_Inv.DataLength = 3;
 8002386:	4b0e      	ldr	r3, [pc, #56]	@ (80023c0 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8002388:	2203      	movs	r2, #3
 800238a:	60da      	str	r2, [r3, #12]
				TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 800238c:	4b0c      	ldr	r3, [pc, #48]	@ (80023c0 <HAL_TIM_PeriodElapsedCallback+0x408>)
 800238e:	2200      	movs	r2, #0
 8002390:	605a      	str	r2, [r3, #4]

				TxData_Inv[0] = 0x0;
 8002392:	4b0e      	ldr	r3, [pc, #56]	@ (80023cc <HAL_TIM_PeriodElapsedCallback+0x414>)
 8002394:	2200      	movs	r2, #0
 8002396:	701a      	strb	r2, [r3, #0]
				TxData_Inv[1] = 0x0;
 8002398:	4b0c      	ldr	r3, [pc, #48]	@ (80023cc <HAL_TIM_PeriodElapsedCallback+0x414>)
 800239a:	2200      	movs	r2, #0
 800239c:	705a      	strb	r2, [r3, #1]
				TxData_Inv[2] = 0x1;
 800239e:	4b0b      	ldr	r3, [pc, #44]	@ (80023cc <HAL_TIM_PeriodElapsedCallback+0x414>)
 80023a0:	2201      	movs	r2, #1
 80023a2:	709a      	strb	r2, [r3, #2]
				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 80023a4:	4a09      	ldr	r2, [pc, #36]	@ (80023cc <HAL_TIM_PeriodElapsedCallback+0x414>)
 80023a6:	4906      	ldr	r1, [pc, #24]	@ (80023c0 <HAL_TIM_PeriodElapsedCallback+0x408>)
 80023a8:	4809      	ldr	r0, [pc, #36]	@ (80023d0 <HAL_TIM_PeriodElapsedCallback+0x418>)
 80023aa:	f006 fc58 	bl	8008c5e <HAL_FDCAN_AddMessageToTxFifoQ>


				break;
 80023ae:	bf00      	nop
			}
		}
#endif
	}
}
 80023b0:	bf00      	nop
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	08014810 	.word	0x08014810
 80023bc:	240007c8 	.word	0x240007c8
 80023c0:	240006b8 	.word	0x240006b8
 80023c4:	240007c2 	.word	0x240007c2
 80023c8:	240007c3 	.word	0x240007c3
 80023cc:	24000778 	.word	0x24000778
 80023d0:	24000204 	.word	0x24000204
 80023d4:	08014820 	.word	0x08014820
 80023d8:	2400093a 	.word	0x2400093a
 80023dc:	24000000 	.word	0x24000000
 80023e0:	08014834 	.word	0x08014834
 80023e4:	2400093b 	.word	0x2400093b
 80023e8:	08014848 	.word	0x08014848

080023ec <tel_build_packet>:

// Packs 8 floats (32 bytes). f[0] is the "frame ID".
static void tel_build_packet(float f[8]) {
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
    memset(f, 0, 8*sizeof(float));
 80023f4:	2220      	movs	r2, #32
 80023f6:	2100      	movs	r1, #0
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f011 fbf7 	bl	8013bec <memset>

#if TEL_USE_DUMMY
    static uint16_t ids[] = {0x610,0x600,0x630,0x640,0x650,0x670,0x660,0x680};
    static uint8_t idx = 0; if (++idx >= sizeof(ids)/sizeof(ids[0])) idx = 0;
 80023fe:	4b2f      	ldr	r3, [pc, #188]	@ (80024bc <tel_build_packet+0xd0>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	3301      	adds	r3, #1
 8002404:	b2da      	uxtb	r2, r3
 8002406:	4b2d      	ldr	r3, [pc, #180]	@ (80024bc <tel_build_packet+0xd0>)
 8002408:	701a      	strb	r2, [r3, #0]
 800240a:	4b2c      	ldr	r3, [pc, #176]	@ (80024bc <tel_build_packet+0xd0>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b07      	cmp	r3, #7
 8002410:	d902      	bls.n	8002418 <tel_build_packet+0x2c>
 8002412:	4b2a      	ldr	r3, [pc, #168]	@ (80024bc <tel_build_packet+0xd0>)
 8002414:	2200      	movs	r2, #0
 8002416:	701a      	strb	r2, [r3, #0]

    f[0] = (float)ids[idx];
 8002418:	4b28      	ldr	r3, [pc, #160]	@ (80024bc <tel_build_packet+0xd0>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	461a      	mov	r2, r3
 800241e:	4b28      	ldr	r3, [pc, #160]	@ (80024c0 <tel_build_packet+0xd4>)
 8002420:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002424:	ee07 3a90 	vmov	s15, r3
 8002428:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	edc3 7a00 	vstr	s15, [r3]
    f[1] = (float)inv_dc_bus_voltage;
 8002432:	4b24      	ldr	r3, [pc, #144]	@ (80024c4 <tel_build_packet+0xd8>)
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	3304      	adds	r3, #4
 800243a:	ee07 2a90 	vmov	s15, r2
 800243e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002442:	edc3 7a00 	vstr	s15, [r3]
    f[2] = (float)e_machine_rpm;
 8002446:	4b20      	ldr	r3, [pc, #128]	@ (80024c8 <tel_build_packet+0xdc>)
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	3308      	adds	r3, #8
 800244e:	ee07 2a90 	vmov	s15, r2
 8002452:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002456:	edc3 7a00 	vstr	s15, [r3]
    f[3] = (float)torque_total;
 800245a:	4b1c      	ldr	r3, [pc, #112]	@ (80024cc <tel_build_packet+0xe0>)
 800245c:	881a      	ldrh	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	330c      	adds	r3, #12
 8002462:	ee07 2a90 	vmov	s15, r2
 8002466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800246a:	edc3 7a00 	vstr	s15, [r3]
    f[4] = (float)v_celda_min;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	3310      	adds	r3, #16
 8002472:	4a17      	ldr	r2, [pc, #92]	@ (80024d0 <tel_build_packet+0xe4>)
 8002474:	6812      	ldr	r2, [r2, #0]
 8002476:	601a      	str	r2, [r3, #0]
    f[5] = (float)s1_aceleracion;
 8002478:	4b16      	ldr	r3, [pc, #88]	@ (80024d4 <tel_build_packet+0xe8>)
 800247a:	881a      	ldrh	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3314      	adds	r3, #20
 8002480:	ee07 2a90 	vmov	s15, r2
 8002484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002488:	edc3 7a00 	vstr	s15, [r3]
    f[6] = (float)s2_aceleracion;
 800248c:	4b12      	ldr	r3, [pc, #72]	@ (80024d8 <tel_build_packet+0xec>)
 800248e:	881a      	ldrh	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3318      	adds	r3, #24
 8002494:	ee07 2a90 	vmov	s15, r2
 8002498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800249c:	edc3 7a00 	vstr	s15, [r3]
    f[7] = (float)state;
 80024a0:	4b0e      	ldr	r3, [pc, #56]	@ (80024dc <tel_build_packet+0xf0>)
 80024a2:	781a      	ldrb	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	331c      	adds	r3, #28
 80024a8:	ee07 2a90 	vmov	s15, r2
 80024ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024b0:	edc3 7a00 	vstr	s15, [r3]
    f[4] = (float)torque_total;
    f[5] = (float)v_celda_min;
    f[6] = (float)s1_aceleracion;
    f[7] = (float)s2_aceleracion;
#endif
}
 80024b4:	bf00      	nop
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	2400094c 	.word	0x2400094c
 80024c0:	24000014 	.word	0x24000014
 80024c4:	240007a4 	.word	0x240007a4
 80024c8:	240007a8 	.word	0x240007a8
 80024cc:	240007c0 	.word	0x240007c0
 80024d0:	24000010 	.word	0x24000010
 80024d4:	240007b2 	.word	0x240007b2
 80024d8:	240007b4 	.word	0x240007b4
 80024dc:	240007ca 	.word	0x240007ca

080024e0 <tel_send_now>:

static void tel_send_now(void) {
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b0b6      	sub	sp, #216	@ 0xd8
 80024e4:	af02      	add	r7, sp, #8
    float pkt[8];
    tel_build_packet(pkt);
 80024e6:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff ff7e 	bl	80023ec <tel_build_packet>

    // debug: print exactly what we'll TX
    char msg[160];
    int ent, dec;
    snprintf(msg, sizeof(msg), "\r\n[TX] ID: 0x%X", (uint16_t)pkt[0]);
 80024f0:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 80024f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024f8:	ee17 3a90 	vmov	r3, s15
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	4638      	mov	r0, r7
 8002500:	4a5a      	ldr	r2, [pc, #360]	@ (800266c <tel_send_now+0x18c>)
 8002502:	21a0      	movs	r1, #160	@ 0xa0
 8002504:	f011 fb1a 	bl	8013b3c <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002508:	463b      	mov	r3, r7
 800250a:	4618      	mov	r0, r3
 800250c:	f7fd ff00 	bl	8000310 <strlen>
 8002510:	4603      	mov	r3, r0
 8002512:	b29a      	uxth	r2, r3
 8002514:	4639      	mov	r1, r7
 8002516:	f04f 33ff 	mov.w	r3, #4294967295
 800251a:	4855      	ldr	r0, [pc, #340]	@ (8002670 <tel_send_now+0x190>)
 800251c:	f00f f882 	bl	8011624 <HAL_UART_Transmit>
    for (int j=1; j<8; ++j) {
 8002520:	2301      	movs	r3, #1
 8002522:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002526:	e04e      	b.n	80025c6 <tel_send_now+0xe6>
        ent = (int)pkt[j];
 8002528:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	33d0      	adds	r3, #208	@ 0xd0
 8002530:	443b      	add	r3, r7
 8002532:	3b30      	subs	r3, #48	@ 0x30
 8002534:	edd3 7a00 	vldr	s15, [r3]
 8002538:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800253c:	ee17 3a90 	vmov	r3, s15
 8002540:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
        dec = (int)((pkt[j] - ent) * 100); if (dec < 0) dec = -dec;
 8002544:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	33d0      	adds	r3, #208	@ 0xd0
 800254c:	443b      	add	r3, r7
 800254e:	3b30      	subs	r3, #48	@ 0x30
 8002550:	ed93 7a00 	vldr	s14, [r3]
 8002554:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002558:	ee07 3a90 	vmov	s15, r3
 800255c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002560:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002564:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8002674 <tel_send_now+0x194>
 8002568:	ee67 7a87 	vmul.f32	s15, s15, s14
 800256c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002570:	ee17 3a90 	vmov	r3, s15
 8002574:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002578:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800257c:	2b00      	cmp	r3, #0
 800257e:	da04      	bge.n	800258a <tel_send_now+0xaa>
 8002580:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002584:	425b      	negs	r3, r3
 8002586:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        snprintf(msg, sizeof(msg), ", V%d:%d.%02d", j, ent, dec);
 800258a:	4638      	mov	r0, r7
 800258c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002590:	9301      	str	r3, [sp, #4]
 8002592:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800259c:	4a36      	ldr	r2, [pc, #216]	@ (8002678 <tel_send_now+0x198>)
 800259e:	21a0      	movs	r1, #160	@ 0xa0
 80025a0:	f011 facc 	bl	8013b3c <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80025a4:	463b      	mov	r3, r7
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7fd feb2 	bl	8000310 <strlen>
 80025ac:	4603      	mov	r3, r0
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	4639      	mov	r1, r7
 80025b2:	f04f 33ff 	mov.w	r3, #4294967295
 80025b6:	482e      	ldr	r0, [pc, #184]	@ (8002670 <tel_send_now+0x190>)
 80025b8:	f00f f834 	bl	8011624 <HAL_UART_Transmit>
    for (int j=1; j<8; ++j) {
 80025bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80025c0:	3301      	adds	r3, #1
 80025c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80025c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80025ca:	2b07      	cmp	r3, #7
 80025cc:	ddac      	ble.n	8002528 <tel_send_now+0x48>
    }
    HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 80025ce:	f04f 33ff 	mov.w	r3, #4294967295
 80025d2:	2202      	movs	r2, #2
 80025d4:	4929      	ldr	r1, [pc, #164]	@ (800267c <tel_send_now+0x19c>)
 80025d6:	4826      	ldr	r0, [pc, #152]	@ (8002670 <tel_send_now+0x190>)
 80025d8:	f00f f824 	bl	8011624 <HAL_UART_Transmit>

    // TX over nRF24 (32 bytes)
    uint8_t ok = NRF24_Transmit((uint8_t*)pkt);
 80025dc:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80025e0:	4618      	mov	r0, r3
 80025e2:	f000 fb81 	bl	8002ce8 <NRF24_Transmit>
 80025e6:	4603      	mov	r3, r0
 80025e8:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
    uint8_t st = nrf24_ReadReg(STATUS);
 80025ec:	2007      	movs	r0, #7
 80025ee:	f000 f8dd 	bl	80027ac <nrf24_ReadReg>
 80025f2:	4603      	mov	r3, r0
 80025f4:	f887 30c6 	strb.w	r3, [r7, #198]	@ 0xc6
    uint8_t ob = nrf24_ReadReg(OBSERVE_TX);
 80025f8:	2008      	movs	r0, #8
 80025fa:	f000 f8d7 	bl	80027ac <nrf24_ReadReg>
 80025fe:	4603      	mov	r3, r0
 8002600:	f887 30c5 	strb.w	r3, [r7, #197]	@ 0xc5

    snprintf(msg, sizeof(msg), ok ? "[TX] OK " : "[TX] FAIL ");
 8002604:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <tel_send_now+0x130>
 800260c:	4a1c      	ldr	r2, [pc, #112]	@ (8002680 <tel_send_now+0x1a0>)
 800260e:	e000      	b.n	8002612 <tel_send_now+0x132>
 8002610:	4a1c      	ldr	r2, [pc, #112]	@ (8002684 <tel_send_now+0x1a4>)
 8002612:	463b      	mov	r3, r7
 8002614:	21a0      	movs	r1, #160	@ 0xa0
 8002616:	4618      	mov	r0, r3
 8002618:	f011 fa90 	bl	8013b3c <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800261c:	463b      	mov	r3, r7
 800261e:	4618      	mov	r0, r3
 8002620:	f7fd fe76 	bl	8000310 <strlen>
 8002624:	4603      	mov	r3, r0
 8002626:	b29a      	uxth	r2, r3
 8002628:	4639      	mov	r1, r7
 800262a:	f04f 33ff 	mov.w	r3, #4294967295
 800262e:	4810      	ldr	r0, [pc, #64]	@ (8002670 <tel_send_now+0x190>)
 8002630:	f00e fff8 	bl	8011624 <HAL_UART_Transmit>
    snprintf(msg, sizeof(msg), "STATUS=%02X OBSERVE_TX=%02X\r\n", st, ob);
 8002634:	f897 20c6 	ldrb.w	r2, [r7, #198]	@ 0xc6
 8002638:	f897 30c5 	ldrb.w	r3, [r7, #197]	@ 0xc5
 800263c:	4638      	mov	r0, r7
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	4613      	mov	r3, r2
 8002642:	4a11      	ldr	r2, [pc, #68]	@ (8002688 <tel_send_now+0x1a8>)
 8002644:	21a0      	movs	r1, #160	@ 0xa0
 8002646:	f011 fa79 	bl	8013b3c <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800264a:	463b      	mov	r3, r7
 800264c:	4618      	mov	r0, r3
 800264e:	f7fd fe5f 	bl	8000310 <strlen>
 8002652:	4603      	mov	r3, r0
 8002654:	b29a      	uxth	r2, r3
 8002656:	4639      	mov	r1, r7
 8002658:	f04f 33ff 	mov.w	r3, #4294967295
 800265c:	4804      	ldr	r0, [pc, #16]	@ (8002670 <tel_send_now+0x190>)
 800265e:	f00e ffe1 	bl	8011624 <HAL_UART_Transmit>
}
 8002662:	bf00      	nop
 8002664:	37d0      	adds	r7, #208	@ 0xd0
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	08014858 	.word	0x08014858
 8002670:	24000614 	.word	0x24000614
 8002674:	42c80000 	.word	0x42c80000
 8002678:	08014868 	.word	0x08014868
 800267c:	08014878 	.word	0x08014878
 8002680:	0801487c 	.word	0x0801487c
 8002684:	08014888 	.word	0x08014888
 8002688:	08014894 	.word	0x08014894

0800268c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002690:	b672      	cpsid	i
}
 8002692:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002694:	bf00      	nop
 8002696:	e7fd      	b.n	8002694 <Error_Handler+0x8>

08002698 <CS_Select>:
#define NRF24_CE_PIN     GPIO_PIN_6
#define NRF24_CSN_PORT   GPIOG
#define NRF24_CSN_PIN    GPIO_PIN_3

/* ==== Local helpers ====================================================== */
static inline void CS_Select(void)   { HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET); }
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
 800269c:	2200      	movs	r2, #0
 800269e:	2108      	movs	r1, #8
 80026a0:	4802      	ldr	r0, [pc, #8]	@ (80026ac <CS_Select+0x14>)
 80026a2:	f007 fbdf 	bl	8009e64 <HAL_GPIO_WritePin>
 80026a6:	bf00      	nop
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	58021800 	.word	0x58021800

080026b0 <CS_UnSelect>:
static inline void CS_UnSelect(void) { HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);   }
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	2201      	movs	r2, #1
 80026b6:	2108      	movs	r1, #8
 80026b8:	4802      	ldr	r0, [pc, #8]	@ (80026c4 <CS_UnSelect+0x14>)
 80026ba:	f007 fbd3 	bl	8009e64 <HAL_GPIO_WritePin>
 80026be:	bf00      	nop
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	58021800 	.word	0x58021800

080026c8 <CE_Disable>:
static inline void CE_Enable(void)   { HAL_GPIO_WritePin(NRF24_CE_PORT,  NRF24_CE_PIN,  GPIO_PIN_SET);   }
static inline void CE_Disable(void)  { HAL_GPIO_WritePin(NRF24_CE_PORT,  NRF24_CE_PIN,  GPIO_PIN_RESET); }
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	2200      	movs	r2, #0
 80026ce:	2140      	movs	r1, #64	@ 0x40
 80026d0:	4802      	ldr	r0, [pc, #8]	@ (80026dc <CE_Disable+0x14>)
 80026d2:	f007 fbc7 	bl	8009e64 <HAL_GPIO_WritePin>
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	58020800 	.word	0x58020800

080026e0 <uputs>:

static void uputs(const char *s){ HAL_UART_Transmit(NRF24_UART, (uint8_t*)s, strlen(s), HAL_MAX_DELAY); }
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f7fd fe11 	bl	8000310 <strlen>
 80026ee:	4603      	mov	r3, r0
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	f04f 33ff 	mov.w	r3, #4294967295
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	4803      	ldr	r0, [pc, #12]	@ (8002708 <uputs+0x28>)
 80026fa:	f00e ff93 	bl	8011624 <HAL_UART_Transmit>
 80026fe:	bf00      	nop
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	24000614 	.word	0x24000614

0800270c <nrf24_WriteReg>:
#define T_SHORT   100U
#define T_LONG   1000U

/* ==== Low-level SPI access ============================================== */
void nrf24_WriteReg(uint8_t reg, uint8_t val)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	460a      	mov	r2, r1
 8002716:	71fb      	strb	r3, [r7, #7]
 8002718:	4613      	mov	r3, r2
 800271a:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];
    buf[0] = (uint8_t)(W_REGISTER | (reg & REGISTER_MASK));
 800271c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002720:	f003 031f 	and.w	r3, r3, #31
 8002724:	b25b      	sxtb	r3, r3
 8002726:	f043 0320 	orr.w	r3, r3, #32
 800272a:	b25b      	sxtb	r3, r3
 800272c:	b2db      	uxtb	r3, r3
 800272e:	733b      	strb	r3, [r7, #12]
    buf[1] = val;
 8002730:	79bb      	ldrb	r3, [r7, #6]
 8002732:	737b      	strb	r3, [r7, #13]
    CS_Select();
 8002734:	f7ff ffb0 	bl	8002698 <CS_Select>
    HAL_SPI_Transmit(NRF24_SPI, buf, 2, T_SHORT);
 8002738:	f107 010c 	add.w	r1, r7, #12
 800273c:	2364      	movs	r3, #100	@ 0x64
 800273e:	2202      	movs	r2, #2
 8002740:	4804      	ldr	r0, [pc, #16]	@ (8002754 <nrf24_WriteReg+0x48>)
 8002742:	f00c fcb7 	bl	800f0b4 <HAL_SPI_Transmit>
    CS_UnSelect();
 8002746:	f7ff ffb3 	bl	80026b0 <CS_UnSelect>
}
 800274a:	bf00      	nop
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	24000460 	.word	0x24000460

08002758 <nrf24_WriteRegMulti>:
void nrf24_WriteRegMulti(uint8_t reg, const uint8_t *data, int size)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
 8002764:	73fb      	strb	r3, [r7, #15]
    uint8_t cmd = (uint8_t)(W_REGISTER | (reg & REGISTER_MASK));
 8002766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800276a:	f003 031f 	and.w	r3, r3, #31
 800276e:	b25b      	sxtb	r3, r3
 8002770:	f043 0320 	orr.w	r3, r3, #32
 8002774:	b25b      	sxtb	r3, r3
 8002776:	b2db      	uxtb	r3, r3
 8002778:	75fb      	strb	r3, [r7, #23]
    CS_Select();
 800277a:	f7ff ff8d 	bl	8002698 <CS_Select>
    HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, T_SHORT);
 800277e:	f107 0117 	add.w	r1, r7, #23
 8002782:	2364      	movs	r3, #100	@ 0x64
 8002784:	2201      	movs	r2, #1
 8002786:	4808      	ldr	r0, [pc, #32]	@ (80027a8 <nrf24_WriteRegMulti+0x50>)
 8002788:	f00c fc94 	bl	800f0b4 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(NRF24_SPI, (uint8_t*)data, size, T_LONG);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	b29a      	uxth	r2, r3
 8002790:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002794:	68b9      	ldr	r1, [r7, #8]
 8002796:	4804      	ldr	r0, [pc, #16]	@ (80027a8 <nrf24_WriteRegMulti+0x50>)
 8002798:	f00c fc8c 	bl	800f0b4 <HAL_SPI_Transmit>
    CS_UnSelect();
 800279c:	f7ff ff88 	bl	80026b0 <CS_UnSelect>
}
 80027a0:	bf00      	nop
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	24000460 	.word	0x24000460

080027ac <nrf24_ReadReg>:

 uint8_t nrf24_ReadReg(uint8_t reg)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	71fb      	strb	r3, [r7, #7]
    uint8_t cmd = (uint8_t)(R_REGISTER | (reg & REGISTER_MASK));
 80027b6:	79fb      	ldrb	r3, [r7, #7]
 80027b8:	f003 031f 	and.w	r3, r3, #31
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	73fb      	strb	r3, [r7, #15]
    uint8_t val = 0;
 80027c0:	2300      	movs	r3, #0
 80027c2:	73bb      	strb	r3, [r7, #14]
    CS_Select();
 80027c4:	f7ff ff68 	bl	8002698 <CS_Select>
    HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, T_SHORT);
 80027c8:	f107 010f 	add.w	r1, r7, #15
 80027cc:	2364      	movs	r3, #100	@ 0x64
 80027ce:	2201      	movs	r2, #1
 80027d0:	4808      	ldr	r0, [pc, #32]	@ (80027f4 <nrf24_ReadReg+0x48>)
 80027d2:	f00c fc6f 	bl	800f0b4 <HAL_SPI_Transmit>
    HAL_SPI_Receive (NRF24_SPI, &val, 1, T_SHORT);
 80027d6:	f107 010e 	add.w	r1, r7, #14
 80027da:	2364      	movs	r3, #100	@ 0x64
 80027dc:	2201      	movs	r2, #1
 80027de:	4805      	ldr	r0, [pc, #20]	@ (80027f4 <nrf24_ReadReg+0x48>)
 80027e0:	f00c fe56 	bl	800f490 <HAL_SPI_Receive>
    CS_UnSelect();
 80027e4:	f7ff ff64 	bl	80026b0 <CS_UnSelect>
    return val;
 80027e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	24000460 	.word	0x24000460

080027f8 <nrf24_ReadRegMulti>:

static void nrf24_ReadRegMulti(uint8_t reg, uint8_t *data, int size)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	4603      	mov	r3, r0
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
 8002804:	73fb      	strb	r3, [r7, #15]
    uint8_t cmd = (uint8_t)(R_REGISTER | (reg & REGISTER_MASK));
 8002806:	7bfb      	ldrb	r3, [r7, #15]
 8002808:	f003 031f 	and.w	r3, r3, #31
 800280c:	b2db      	uxtb	r3, r3
 800280e:	75fb      	strb	r3, [r7, #23]
    CS_Select();
 8002810:	f7ff ff42 	bl	8002698 <CS_Select>
    HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, T_SHORT);
 8002814:	f107 0117 	add.w	r1, r7, #23
 8002818:	2364      	movs	r3, #100	@ 0x64
 800281a:	2201      	movs	r2, #1
 800281c:	4808      	ldr	r0, [pc, #32]	@ (8002840 <nrf24_ReadRegMulti+0x48>)
 800281e:	f00c fc49 	bl	800f0b4 <HAL_SPI_Transmit>
    HAL_SPI_Receive (NRF24_SPI, data, size, T_LONG);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	b29a      	uxth	r2, r3
 8002826:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800282a:	68b9      	ldr	r1, [r7, #8]
 800282c:	4804      	ldr	r0, [pc, #16]	@ (8002840 <nrf24_ReadRegMulti+0x48>)
 800282e:	f00c fe2f 	bl	800f490 <HAL_SPI_Receive>
    CS_UnSelect();
 8002832:	f7ff ff3d 	bl	80026b0 <CS_UnSelect>
}
 8002836:	bf00      	nop
 8002838:	3718      	adds	r7, #24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	24000460 	.word	0x24000460

08002844 <nrf24_reset>:
    CS_UnSelect();
}

/* ==== Soft reset (subset) =============================================== */
static void nrf24_reset(uint8_t reg)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	71fb      	strb	r3, [r7, #7]
    if (reg == STATUS) {
 800284e:	79fb      	ldrb	r3, [r7, #7]
 8002850:	2b07      	cmp	r3, #7
 8002852:	d104      	bne.n	800285e <nrf24_reset+0x1a>
        /* clear IRQs (RX_DR | TX_DS | MAX_RT) */
        nrf24_WriteReg(STATUS, 0x70);
 8002854:	2170      	movs	r1, #112	@ 0x70
 8002856:	2007      	movs	r0, #7
 8002858:	f7ff ff58 	bl	800270c <nrf24_WriteReg>
        nrf24_WriteReg(RX_PW_P2, 0);
        nrf24_WriteReg(RX_PW_P3, 0);
        nrf24_WriteReg(RX_PW_P4, 0);
        nrf24_WriteReg(RX_PW_P5, 0);
    }
}
 800285c:	e080      	b.n	8002960 <nrf24_reset+0x11c>
    else if (reg == FIFO_STATUS) {
 800285e:	79fb      	ldrb	r3, [r7, #7]
 8002860:	2b17      	cmp	r3, #23
 8002862:	d104      	bne.n	800286e <nrf24_reset+0x2a>
        nrf24_WriteReg(FIFO_STATUS, 0x11);
 8002864:	2111      	movs	r1, #17
 8002866:	2017      	movs	r0, #23
 8002868:	f7ff ff50 	bl	800270c <nrf24_WriteReg>
}
 800286c:	e078      	b.n	8002960 <nrf24_reset+0x11c>
        nrf24_WriteReg(CONFIG,      0x08);  /* CRC off, PWR_DOWN */
 800286e:	2108      	movs	r1, #8
 8002870:	2000      	movs	r0, #0
 8002872:	f7ff ff4b 	bl	800270c <nrf24_WriteReg>
        nrf24_WriteReg(EN_AA,       0x00);  /* no Auto-ACK */
 8002876:	2100      	movs	r1, #0
 8002878:	2001      	movs	r0, #1
 800287a:	f7ff ff47 	bl	800270c <nrf24_WriteReg>
        nrf24_WriteReg(EN_RXADDR,   0x03);  /* P0,P1 enabled */
 800287e:	2103      	movs	r1, #3
 8002880:	2002      	movs	r0, #2
 8002882:	f7ff ff43 	bl	800270c <nrf24_WriteReg>
        nrf24_WriteReg(SETUP_AW,    0x03);  /* 5-byte addr */
 8002886:	2103      	movs	r1, #3
 8002888:	2003      	movs	r0, #3
 800288a:	f7ff ff3f 	bl	800270c <nrf24_WriteReg>
        nrf24_WriteReg(SETUP_RETR,  0x00);  /* no retries */
 800288e:	2100      	movs	r1, #0
 8002890:	2004      	movs	r0, #4
 8002892:	f7ff ff3b 	bl	800270c <nrf24_WriteReg>
        nrf24_WriteReg(RF_CH,       76);    /* ch=76 */
 8002896:	214c      	movs	r1, #76	@ 0x4c
 8002898:	2005      	movs	r0, #5
 800289a:	f7ff ff37 	bl	800270c <nrf24_WriteReg>
        nrf24_WriteReg(RF_SETUP,    0x06);  /* 1 Mbps, 0 dBm */
 800289e:	2106      	movs	r1, #6
 80028a0:	2006      	movs	r0, #6
 80028a2:	f7ff ff33 	bl	800270c <nrf24_WriteReg>
        nrf24_WriteReg(FEATURE,     0x00);  /* no dyn payloads */
 80028a6:	2100      	movs	r1, #0
 80028a8:	201d      	movs	r0, #29
 80028aa:	f7ff ff2f 	bl	800270c <nrf24_WriteReg>
        nrf24_WriteReg(DYNPD,       0x00);
 80028ae:	2100      	movs	r1, #0
 80028b0:	201c      	movs	r0, #28
 80028b2:	f7ff ff2b 	bl	800270c <nrf24_WriteReg>
        nrf24_WriteReg(FIFO_STATUS, 0x11);
 80028b6:	2111      	movs	r1, #17
 80028b8:	2017      	movs	r0, #23
 80028ba:	f7ff ff27 	bl	800270c <nrf24_WriteReg>
        nrf24_WriteReg(STATUS,      0x70);  /* clear IRQs */
 80028be:	2170      	movs	r1, #112	@ 0x70
 80028c0:	2007      	movs	r0, #7
 80028c2:	f7ff ff23 	bl	800270c <nrf24_WriteReg>
        uint8_t def0[5] = {0xE7,0xE7,0xE7,0xE7,0xE7};
 80028c6:	4a28      	ldr	r2, [pc, #160]	@ (8002968 <nrf24_reset+0x124>)
 80028c8:	f107 0310 	add.w	r3, r7, #16
 80028cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80028d0:	6018      	str	r0, [r3, #0]
 80028d2:	3304      	adds	r3, #4
 80028d4:	7019      	strb	r1, [r3, #0]
        uint8_t def1[5] = {0xC2,0xC2,0xC2,0xC2,0xC2};
 80028d6:	4a25      	ldr	r2, [pc, #148]	@ (800296c <nrf24_reset+0x128>)
 80028d8:	f107 0308 	add.w	r3, r7, #8
 80028dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80028e0:	6018      	str	r0, [r3, #0]
 80028e2:	3304      	adds	r3, #4
 80028e4:	7019      	strb	r1, [r3, #0]
        nrf24_WriteRegMulti(RX_ADDR_P0, def0, 5);
 80028e6:	f107 0310 	add.w	r3, r7, #16
 80028ea:	2205      	movs	r2, #5
 80028ec:	4619      	mov	r1, r3
 80028ee:	200a      	movs	r0, #10
 80028f0:	f7ff ff32 	bl	8002758 <nrf24_WriteRegMulti>
        nrf24_WriteRegMulti(RX_ADDR_P1, def1, 5);
 80028f4:	f107 0308 	add.w	r3, r7, #8
 80028f8:	2205      	movs	r2, #5
 80028fa:	4619      	mov	r1, r3
 80028fc:	200b      	movs	r0, #11
 80028fe:	f7ff ff2b 	bl	8002758 <nrf24_WriteRegMulti>
        nrf24_WriteReg    (RX_ADDR_P2, 0xC3);
 8002902:	21c3      	movs	r1, #195	@ 0xc3
 8002904:	200c      	movs	r0, #12
 8002906:	f7ff ff01 	bl	800270c <nrf24_WriteReg>
        nrf24_WriteReg    (RX_ADDR_P3, 0xC4);
 800290a:	21c4      	movs	r1, #196	@ 0xc4
 800290c:	200d      	movs	r0, #13
 800290e:	f7ff fefd 	bl	800270c <nrf24_WriteReg>
        nrf24_WriteReg    (RX_ADDR_P4, 0xC5);
 8002912:	21c5      	movs	r1, #197	@ 0xc5
 8002914:	200e      	movs	r0, #14
 8002916:	f7ff fef9 	bl	800270c <nrf24_WriteReg>
        nrf24_WriteReg    (RX_ADDR_P5, 0xC6);
 800291a:	21c6      	movs	r1, #198	@ 0xc6
 800291c:	200f      	movs	r0, #15
 800291e:	f7ff fef5 	bl	800270c <nrf24_WriteReg>
        nrf24_WriteRegMulti(TX_ADDR,    def0, 5);
 8002922:	f107 0310 	add.w	r3, r7, #16
 8002926:	2205      	movs	r2, #5
 8002928:	4619      	mov	r1, r3
 800292a:	2010      	movs	r0, #16
 800292c:	f7ff ff14 	bl	8002758 <nrf24_WriteRegMulti>
        nrf24_WriteReg(RX_PW_P0, 0);
 8002930:	2100      	movs	r1, #0
 8002932:	2011      	movs	r0, #17
 8002934:	f7ff feea 	bl	800270c <nrf24_WriteReg>
        nrf24_WriteReg(RX_PW_P1, 0);
 8002938:	2100      	movs	r1, #0
 800293a:	2012      	movs	r0, #18
 800293c:	f7ff fee6 	bl	800270c <nrf24_WriteReg>
        nrf24_WriteReg(RX_PW_P2, 0);
 8002940:	2100      	movs	r1, #0
 8002942:	2013      	movs	r0, #19
 8002944:	f7ff fee2 	bl	800270c <nrf24_WriteReg>
        nrf24_WriteReg(RX_PW_P3, 0);
 8002948:	2100      	movs	r1, #0
 800294a:	2014      	movs	r0, #20
 800294c:	f7ff fede 	bl	800270c <nrf24_WriteReg>
        nrf24_WriteReg(RX_PW_P4, 0);
 8002950:	2100      	movs	r1, #0
 8002952:	2015      	movs	r0, #21
 8002954:	f7ff feda 	bl	800270c <nrf24_WriteReg>
        nrf24_WriteReg(RX_PW_P5, 0);
 8002958:	2100      	movs	r1, #0
 800295a:	2016      	movs	r0, #22
 800295c:	f7ff fed6 	bl	800270c <nrf24_WriteReg>
}
 8002960:	bf00      	nop
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	080148b4 	.word	0x080148b4
 800296c:	080148bc 	.word	0x080148bc

08002970 <NRF24_Init>:

/* ==== Public API ========================================================= */

void NRF24_Init(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
	CE_Disable();
 8002976:	f7ff fea7 	bl	80026c8 <CE_Disable>
	CS_UnSelect();
 800297a:	f7ff fe99 	bl	80026b0 <CS_UnSelect>
	HAL_Delay(1);
 800297e:	2001      	movs	r0, #1
 8002980:	f001 f8dc 	bl	8003b3c <HAL_Delay>

	// ACTIVATE 0x73 (needed by many BK24xx/nRF24 clones)
	uint8_t act[2] = { ACTIVATE, 0x73 };
 8002984:	f247 3350 	movw	r3, #29520	@ 0x7350
 8002988:	80bb      	strh	r3, [r7, #4]
	CS_Select(); HAL_SPI_Transmit(NRF24_SPI, act, 2, T_SHORT); CS_UnSelect();
 800298a:	f7ff fe85 	bl	8002698 <CS_Select>
 800298e:	1d39      	adds	r1, r7, #4
 8002990:	2364      	movs	r3, #100	@ 0x64
 8002992:	2202      	movs	r2, #2
 8002994:	481b      	ldr	r0, [pc, #108]	@ (8002a04 <NRF24_Init+0x94>)
 8002996:	f00c fb8d 	bl	800f0b4 <HAL_SPI_Transmit>
 800299a:	f7ff fe89 	bl	80026b0 <CS_UnSelect>
	HAL_Delay(1);
 800299e:	2001      	movs	r0, #1
 80029a0:	f001 f8cc 	bl	8003b3c <HAL_Delay>

    nrf24_reset(0);
 80029a4:	2000      	movs	r0, #0
 80029a6:	f7ff ff4d 	bl	8002844 <nrf24_reset>

    /* fixed settings for link bring-up */
    nrf24_WriteReg(EN_AA,        0x00);  /* NO ACK */
 80029aa:	2100      	movs	r1, #0
 80029ac:	2001      	movs	r0, #1
 80029ae:	f7ff fead 	bl	800270c <nrf24_WriteReg>
    nrf24_WriteReg(SETUP_RETR,   0x00);  /* NO retries */
 80029b2:	2100      	movs	r1, #0
 80029b4:	2004      	movs	r0, #4
 80029b6:	f7ff fea9 	bl	800270c <nrf24_WriteReg>
    nrf24_WriteReg(EN_RXADDR,    0x03);  /* P0,P1 */
 80029ba:	2103      	movs	r1, #3
 80029bc:	2002      	movs	r0, #2
 80029be:	f7ff fea5 	bl	800270c <nrf24_WriteReg>
    nrf24_WriteReg(SETUP_AW,     0x03);  /* 5-byte */
 80029c2:	2103      	movs	r1, #3
 80029c4:	2003      	movs	r0, #3
 80029c6:	f7ff fea1 	bl	800270c <nrf24_WriteReg>
    nrf24_WriteReg(RF_CH,        76);    /* channel 76 */
 80029ca:	214c      	movs	r1, #76	@ 0x4c
 80029cc:	2005      	movs	r0, #5
 80029ce:	f7ff fe9d 	bl	800270c <nrf24_WriteReg>
    nrf24_WriteReg(RF_SETUP,     0x06);  /* 1 Mbps, 0 dBm */
 80029d2:	2106      	movs	r1, #6
 80029d4:	2006      	movs	r0, #6
 80029d6:	f7ff fe99 	bl	800270c <nrf24_WriteReg>
    nrf24_WriteReg(FEATURE,      0x00);
 80029da:	2100      	movs	r1, #0
 80029dc:	201d      	movs	r0, #29
 80029de:	f7ff fe95 	bl	800270c <nrf24_WriteReg>
    nrf24_WriteReg(DYNPD,        0x00);
 80029e2:	2100      	movs	r1, #0
 80029e4:	201c      	movs	r0, #28
 80029e6:	f7ff fe91 	bl	800270c <nrf24_WriteReg>
    nrf24_WriteReg(FIFO_STATUS,  0x11);
 80029ea:	2111      	movs	r1, #17
 80029ec:	2017      	movs	r0, #23
 80029ee:	f7ff fe8d 	bl	800270c <nrf24_WriteReg>
    nrf24_WriteReg(STATUS,       0x70);  /* clear IRQs */
 80029f2:	2170      	movs	r1, #112	@ 0x70
 80029f4:	2007      	movs	r0, #7
 80029f6:	f7ff fe89 	bl	800270c <nrf24_WriteReg>

    //CE_Enable();    /* power state will be set in TxMode/RxMode */
}
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	24000460 	.word	0x24000460

08002a08 <NRF24_TxMode>:

void NRF24_TxMode(uint8_t *Address, uint8_t channel)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	460b      	mov	r3, r1
 8002a12:	70fb      	strb	r3, [r7, #3]
    CE_Disable();
 8002a14:	f7ff fe58 	bl	80026c8 <CE_Disable>

    nrf24_WriteReg(RF_CH, channel);
 8002a18:	78fb      	ldrb	r3, [r7, #3]
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	2005      	movs	r0, #5
 8002a1e:	f7ff fe75 	bl	800270c <nrf24_WriteReg>
    nrf24_WriteRegMulti(TX_ADDR,    Address, 5);
 8002a22:	2205      	movs	r2, #5
 8002a24:	6879      	ldr	r1, [r7, #4]
 8002a26:	2010      	movs	r0, #16
 8002a28:	f7ff fe96 	bl	8002758 <nrf24_WriteRegMulti>
    nrf24_WriteRegMulti(RX_ADDR_P0, Address, 5);  /* ACK return path if enabled later */
 8002a2c:	2205      	movs	r2, #5
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	200a      	movs	r0, #10
 8002a32:	f7ff fe91 	bl	8002758 <nrf24_WriteRegMulti>

    /* CONFIG: PWR_UP(1) | EN_CRC(1) | CRCO(1=16bit) | PRIM_RX(0) */
    uint8_t cfg = (1<<1) | (1<<3) | (1<<2);   /* 0x0E */
 8002a36:	230e      	movs	r3, #14
 8002a38:	73fb      	strb	r3, [r7, #15]
    nrf24_WriteReg(CONFIG, cfg);
 8002a3a:	7bfb      	ldrb	r3, [r7, #15]
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	2000      	movs	r0, #0
 8002a40:	f7ff fe64 	bl	800270c <nrf24_WriteReg>
    HAL_Delay(3);
 8002a44:	2003      	movs	r0, #3
 8002a46:	f001 f879 	bl	8003b3c <HAL_Delay>

    //CE_Enable();
}
 8002a4a:	bf00      	nop
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
	...

08002a54 <hex1>:

    for (int i = 29; i < 38; i++) data[i] = nrf24_ReadReg(i - 12);
}

/* ===== Simple UART dump ================================================== */
static void hex1(const char *name, uint8_t v){
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b08c      	sub	sp, #48	@ 0x30
 8002a58:	af02      	add	r7, sp, #8
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	70fb      	strb	r3, [r7, #3]
    char s[32];
    snprintf(s, sizeof(s), "%s=%02X ", name, v);
 8002a60:	78fb      	ldrb	r3, [r7, #3]
 8002a62:	f107 0008 	add.w	r0, r7, #8
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a06      	ldr	r2, [pc, #24]	@ (8002a84 <hex1+0x30>)
 8002a6c:	2120      	movs	r1, #32
 8002a6e:	f011 f865 	bl	8013b3c <sniprintf>
    uputs(s);
 8002a72:	f107 0308 	add.w	r3, r7, #8
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff fe32 	bl	80026e0 <uputs>
}
 8002a7c:	bf00      	nop
 8002a7e:	3728      	adds	r7, #40	@ 0x28
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	080148c4 	.word	0x080148c4

08002a88 <dump_hex5>:

static void dump_hex5(const char *name, const uint8_t *v){
 8002a88:	b5b0      	push	{r4, r5, r7, lr}
 8002a8a:	b098      	sub	sp, #96	@ 0x60
 8002a8c:	af06      	add	r7, sp, #24
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
    char s[64];
    snprintf(s, sizeof(s), "%s=%02X %02X %02X %02X %02X  ",
            name, v[0], v[1], v[2], v[3], v[4]);
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	781b      	ldrb	r3, [r3, #0]
    snprintf(s, sizeof(s), "%s=%02X %02X %02X %02X %02X  ",
 8002a96:	461a      	mov	r2, r3
            name, v[0], v[1], v[2], v[3], v[4]);
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	781b      	ldrb	r3, [r3, #0]
    snprintf(s, sizeof(s), "%s=%02X %02X %02X %02X %02X  ",
 8002a9e:	4619      	mov	r1, r3
            name, v[0], v[1], v[2], v[3], v[4]);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	3302      	adds	r3, #2
 8002aa4:	781b      	ldrb	r3, [r3, #0]
    snprintf(s, sizeof(s), "%s=%02X %02X %02X %02X %02X  ",
 8002aa6:	461c      	mov	r4, r3
            name, v[0], v[1], v[2], v[3], v[4]);
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	3303      	adds	r3, #3
 8002aac:	781b      	ldrb	r3, [r3, #0]
    snprintf(s, sizeof(s), "%s=%02X %02X %02X %02X %02X  ",
 8002aae:	461d      	mov	r5, r3
            name, v[0], v[1], v[2], v[3], v[4]);
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	3304      	adds	r3, #4
 8002ab4:	781b      	ldrb	r3, [r3, #0]
    snprintf(s, sizeof(s), "%s=%02X %02X %02X %02X %02X  ",
 8002ab6:	f107 0008 	add.w	r0, r7, #8
 8002aba:	9304      	str	r3, [sp, #16]
 8002abc:	9503      	str	r5, [sp, #12]
 8002abe:	9402      	str	r4, [sp, #8]
 8002ac0:	9101      	str	r1, [sp, #4]
 8002ac2:	9200      	str	r2, [sp, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a06      	ldr	r2, [pc, #24]	@ (8002ae0 <dump_hex5+0x58>)
 8002ac8:	2140      	movs	r1, #64	@ 0x40
 8002aca:	f011 f837 	bl	8013b3c <sniprintf>
    uputs(s);
 8002ace:	f107 0308 	add.w	r3, r7, #8
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff fe04 	bl	80026e0 <uputs>
}
 8002ad8:	bf00      	nop
 8002ada:	3748      	adds	r7, #72	@ 0x48
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bdb0      	pop	{r4, r5, r7, pc}
 8002ae0:	080148d0 	.word	0x080148d0

08002ae4 <NRF24_Dump>:

void NRF24_Dump(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
    uint8_t v, addr[5];
    v = nrf24_ReadReg(CONFIG);     hex1("CFG",   v);
 8002aea:	2000      	movs	r0, #0
 8002aec:	f7ff fe5e 	bl	80027ac <nrf24_ReadReg>
 8002af0:	4603      	mov	r3, r0
 8002af2:	71fb      	strb	r3, [r7, #7]
 8002af4:	79fb      	ldrb	r3, [r7, #7]
 8002af6:	4619      	mov	r1, r3
 8002af8:	4832      	ldr	r0, [pc, #200]	@ (8002bc4 <NRF24_Dump+0xe0>)
 8002afa:	f7ff ffab 	bl	8002a54 <hex1>
    v = nrf24_ReadReg(EN_AA);      hex1("EN_AA", v);
 8002afe:	2001      	movs	r0, #1
 8002b00:	f7ff fe54 	bl	80027ac <nrf24_ReadReg>
 8002b04:	4603      	mov	r3, r0
 8002b06:	71fb      	strb	r3, [r7, #7]
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	482e      	ldr	r0, [pc, #184]	@ (8002bc8 <NRF24_Dump+0xe4>)
 8002b0e:	f7ff ffa1 	bl	8002a54 <hex1>
    v = nrf24_ReadReg(SETUP_RETR); hex1("RETR",  v);
 8002b12:	2004      	movs	r0, #4
 8002b14:	f7ff fe4a 	bl	80027ac <nrf24_ReadReg>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	71fb      	strb	r3, [r7, #7]
 8002b1c:	79fb      	ldrb	r3, [r7, #7]
 8002b1e:	4619      	mov	r1, r3
 8002b20:	482a      	ldr	r0, [pc, #168]	@ (8002bcc <NRF24_Dump+0xe8>)
 8002b22:	f7ff ff97 	bl	8002a54 <hex1>
    v = nrf24_ReadReg(RF_CH);      hex1("CH",    v);
 8002b26:	2005      	movs	r0, #5
 8002b28:	f7ff fe40 	bl	80027ac <nrf24_ReadReg>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	71fb      	strb	r3, [r7, #7]
 8002b30:	79fb      	ldrb	r3, [r7, #7]
 8002b32:	4619      	mov	r1, r3
 8002b34:	4826      	ldr	r0, [pc, #152]	@ (8002bd0 <NRF24_Dump+0xec>)
 8002b36:	f7ff ff8d 	bl	8002a54 <hex1>
    v = nrf24_ReadReg(RF_SETUP);   hex1("RF",    v);
 8002b3a:	2006      	movs	r0, #6
 8002b3c:	f7ff fe36 	bl	80027ac <nrf24_ReadReg>
 8002b40:	4603      	mov	r3, r0
 8002b42:	71fb      	strb	r3, [r7, #7]
 8002b44:	79fb      	ldrb	r3, [r7, #7]
 8002b46:	4619      	mov	r1, r3
 8002b48:	4822      	ldr	r0, [pc, #136]	@ (8002bd4 <NRF24_Dump+0xf0>)
 8002b4a:	f7ff ff83 	bl	8002a54 <hex1>
    v = nrf24_ReadReg(FEATURE);    hex1("FEAT",  v);
 8002b4e:	201d      	movs	r0, #29
 8002b50:	f7ff fe2c 	bl	80027ac <nrf24_ReadReg>
 8002b54:	4603      	mov	r3, r0
 8002b56:	71fb      	strb	r3, [r7, #7]
 8002b58:	79fb      	ldrb	r3, [r7, #7]
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	481e      	ldr	r0, [pc, #120]	@ (8002bd8 <NRF24_Dump+0xf4>)
 8002b5e:	f7ff ff79 	bl	8002a54 <hex1>
    v = nrf24_ReadReg(DYNPD);      hex1("DYNPD", v);
 8002b62:	201c      	movs	r0, #28
 8002b64:	f7ff fe22 	bl	80027ac <nrf24_ReadReg>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	71fb      	strb	r3, [r7, #7]
 8002b6c:	79fb      	ldrb	r3, [r7, #7]
 8002b6e:	4619      	mov	r1, r3
 8002b70:	481a      	ldr	r0, [pc, #104]	@ (8002bdc <NRF24_Dump+0xf8>)
 8002b72:	f7ff ff6f 	bl	8002a54 <hex1>

    nrf24_ReadRegMulti(TX_ADDR,    addr, 5); dump_hex5("TX",  addr);
 8002b76:	463b      	mov	r3, r7
 8002b78:	2205      	movs	r2, #5
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	2010      	movs	r0, #16
 8002b7e:	f7ff fe3b 	bl	80027f8 <nrf24_ReadRegMulti>
 8002b82:	463b      	mov	r3, r7
 8002b84:	4619      	mov	r1, r3
 8002b86:	4816      	ldr	r0, [pc, #88]	@ (8002be0 <NRF24_Dump+0xfc>)
 8002b88:	f7ff ff7e 	bl	8002a88 <dump_hex5>
    nrf24_ReadRegMulti(RX_ADDR_P0, addr, 5); dump_hex5("RX0", addr);
 8002b8c:	463b      	mov	r3, r7
 8002b8e:	2205      	movs	r2, #5
 8002b90:	4619      	mov	r1, r3
 8002b92:	200a      	movs	r0, #10
 8002b94:	f7ff fe30 	bl	80027f8 <nrf24_ReadRegMulti>
 8002b98:	463b      	mov	r3, r7
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	4811      	ldr	r0, [pc, #68]	@ (8002be4 <NRF24_Dump+0x100>)
 8002b9e:	f7ff ff73 	bl	8002a88 <dump_hex5>

    v = nrf24_ReadReg(STATUS);     hex1("STAT",  v);
 8002ba2:	2007      	movs	r0, #7
 8002ba4:	f7ff fe02 	bl	80027ac <nrf24_ReadReg>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	71fb      	strb	r3, [r7, #7]
 8002bac:	79fb      	ldrb	r3, [r7, #7]
 8002bae:	4619      	mov	r1, r3
 8002bb0:	480d      	ldr	r0, [pc, #52]	@ (8002be8 <NRF24_Dump+0x104>)
 8002bb2:	f7ff ff4f 	bl	8002a54 <hex1>
    uputs("\r\n");
 8002bb6:	480d      	ldr	r0, [pc, #52]	@ (8002bec <NRF24_Dump+0x108>)
 8002bb8:	f7ff fd92 	bl	80026e0 <uputs>
}
 8002bbc:	bf00      	nop
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	080148f0 	.word	0x080148f0
 8002bc8:	080148f4 	.word	0x080148f4
 8002bcc:	080148fc 	.word	0x080148fc
 8002bd0:	08014904 	.word	0x08014904
 8002bd4:	08014908 	.word	0x08014908
 8002bd8:	0801490c 	.word	0x0801490c
 8002bdc:	08014914 	.word	0x08014914
 8002be0:	0801491c 	.word	0x0801491c
 8002be4:	08014920 	.word	0x08014920
 8002be8:	08014924 	.word	0x08014924
 8002bec:	0801492c 	.word	0x0801492c

08002bf0 <NRF24_StatusNOP>:
uint8_t NRF24_StatusNOP(void) {
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af02      	add	r7, sp, #8
    uint8_t cmd = NOP, st = 0x00;
 8002bf6:	23ff      	movs	r3, #255	@ 0xff
 8002bf8:	71fb      	strb	r3, [r7, #7]
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	71bb      	strb	r3, [r7, #6]
    CS_Select();
 8002bfe:	f7ff fd4b 	bl	8002698 <CS_Select>
    HAL_SPI_TransmitReceive(NRF24_SPI, &cmd, &st, 1, 100);
 8002c02:	1dba      	adds	r2, r7, #6
 8002c04:	1df9      	adds	r1, r7, #7
 8002c06:	2364      	movs	r3, #100	@ 0x64
 8002c08:	9300      	str	r3, [sp, #0]
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	4804      	ldr	r0, [pc, #16]	@ (8002c20 <NRF24_StatusNOP+0x30>)
 8002c0e:	f00c feb1 	bl	800f974 <HAL_SPI_TransmitReceive>
    CS_UnSelect();
 8002c12:	f7ff fd4d 	bl	80026b0 <CS_UnSelect>
    return st;
 8002c16:	79bb      	ldrb	r3, [r7, #6]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	24000460 	.word	0x24000460

08002c24 <csn_low>:

// nrf24.c (helpers; keep static if you already have similar)
static inline void csn_low(void){ HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET); }
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	2200      	movs	r2, #0
 8002c2a:	2108      	movs	r1, #8
 8002c2c:	4802      	ldr	r0, [pc, #8]	@ (8002c38 <csn_low+0x14>)
 8002c2e:	f007 f919 	bl	8009e64 <HAL_GPIO_WritePin>
 8002c32:	bf00      	nop
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	58021800 	.word	0x58021800

08002c3c <csn_high>:
static inline void csn_high(void){ HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET); }
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	2201      	movs	r2, #1
 8002c42:	2108      	movs	r1, #8
 8002c44:	4802      	ldr	r0, [pc, #8]	@ (8002c50 <csn_high+0x14>)
 8002c46:	f007 f90d 	bl	8009e64 <HAL_GPIO_WritePin>
 8002c4a:	bf00      	nop
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	58021800 	.word	0x58021800

08002c54 <ce_low>:
static inline void ce_low(void){ HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET); }
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	2200      	movs	r2, #0
 8002c5a:	2140      	movs	r1, #64	@ 0x40
 8002c5c:	4802      	ldr	r0, [pc, #8]	@ (8002c68 <ce_low+0x14>)
 8002c5e:	f007 f901 	bl	8009e64 <HAL_GPIO_WritePin>
 8002c62:	bf00      	nop
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	58020800 	.word	0x58020800

08002c6c <ce_high>:
static inline void ce_high(void){ HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET); }
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	2201      	movs	r2, #1
 8002c72:	2140      	movs	r1, #64	@ 0x40
 8002c74:	4802      	ldr	r0, [pc, #8]	@ (8002c80 <ce_high+0x14>)
 8002c76:	f007 f8f5 	bl	8009e64 <HAL_GPIO_WritePin>
 8002c7a:	bf00      	nop
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	58020800 	.word	0x58020800

08002c84 <NRF24_ClearIRQs>:

uint8_t NRF24_ClearIRQs(void){         // clear RX_DR/TX_DS/MAX_RT
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
    nrf24_WriteReg(STATUS, 0x70);
 8002c88:	2170      	movs	r1, #112	@ 0x70
 8002c8a:	2007      	movs	r0, #7
 8002c8c:	f7ff fd3e 	bl	800270c <nrf24_WriteReg>
    return nrf24_ReadReg(STATUS);
 8002c90:	2007      	movs	r0, #7
 8002c92:	f7ff fd8b 	bl	80027ac <nrf24_ReadReg>
 8002c96:	4603      	mov	r3, r0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <NRF24_FlushTX>:

void NRF24_FlushTX(void){
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
    uint8_t cmd = 0xE1; csn_low(); HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100); csn_high();
 8002ca2:	23e1      	movs	r3, #225	@ 0xe1
 8002ca4:	71fb      	strb	r3, [r7, #7]
 8002ca6:	f7ff ffbd 	bl	8002c24 <csn_low>
 8002caa:	1df9      	adds	r1, r7, #7
 8002cac:	2364      	movs	r3, #100	@ 0x64
 8002cae:	2201      	movs	r2, #1
 8002cb0:	4804      	ldr	r0, [pc, #16]	@ (8002cc4 <NRF24_FlushTX+0x28>)
 8002cb2:	f00c f9ff 	bl	800f0b4 <HAL_SPI_Transmit>
 8002cb6:	f7ff ffc1 	bl	8002c3c <csn_high>
}
 8002cba:	bf00      	nop
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	24000460 	.word	0x24000460

08002cc8 <NRF24_TxFIFOEmpty>:
void NRF24_FlushRX(void){
    uint8_t cmd = 0xE2; csn_low(); HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100); csn_high();
}

uint8_t NRF24_TxFIFOEmpty(void){
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
    return (nrf24_ReadReg(FIFO_STATUS) & 0x10) ? 1u : 0u; // TX_EMPTY bit
 8002ccc:	2017      	movs	r0, #23
 8002cce:	f7ff fd6d 	bl	80027ac <nrf24_ReadReg>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	f003 0310 	and.w	r3, r3, #16
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <NRF24_TxFIFOEmpty+0x18>
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e000      	b.n	8002ce2 <NRF24_TxFIFOEmpty+0x1a>
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	bd80      	pop	{r7, pc}
	...

08002ce8 <NRF24_Transmit>:
// Make sure your Init() does ACTIVATE (0x50 0x73) ONCE after power-up.
// You can fold this into NRF24_Init() if not already present.

// Robust TX that: clears flags, flushes if needed, loads payload, pulses CE, waits for TX_DS/MAX_RT
uint8_t NRF24_Transmit(const uint8_t *payload32)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
    // 1) Recover if TX_FULL or not empty (stale data)
    uint8_t st = nrf24_ReadReg(STATUS);
 8002cf0:	2007      	movs	r0, #7
 8002cf2:	f7ff fd5b 	bl	80027ac <nrf24_ReadReg>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	75fb      	strb	r3, [r7, #23]
    uint8_t fifo = nrf24_ReadReg(FIFO_STATUS);
 8002cfa:	2017      	movs	r0, #23
 8002cfc:	f7ff fd56 	bl	80027ac <nrf24_ReadReg>
 8002d00:	4603      	mov	r3, r0
 8002d02:	75bb      	strb	r3, [r7, #22]
    if ((st & 0x01) || !(fifo & 0x10)) {   // TX_FULL==1 or TX_EMPTY==0
 8002d04:	7dfb      	ldrb	r3, [r7, #23]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d104      	bne.n	8002d18 <NRF24_Transmit+0x30>
 8002d0e:	7dbb      	ldrb	r3, [r7, #22]
 8002d10:	f003 0310 	and.w	r3, r3, #16
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d103      	bne.n	8002d20 <NRF24_Transmit+0x38>
        NRF24_ClearIRQs();
 8002d18:	f7ff ffb4 	bl	8002c84 <NRF24_ClearIRQs>
        NRF24_FlushTX();
 8002d1c:	f7ff ffbe 	bl	8002c9c <NRF24_FlushTX>
    }

    // 2) Write payload (32 bytes expected by your app)
    uint8_t cmd = 0xA0; // W_TX_PAYLOAD
 8002d20:	23a0      	movs	r3, #160	@ 0xa0
 8002d22:	73fb      	strb	r3, [r7, #15]
    csn_low();
 8002d24:	f7ff ff7e 	bl	8002c24 <csn_low>
    HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 8002d28:	f107 010f 	add.w	r1, r7, #15
 8002d2c:	2364      	movs	r3, #100	@ 0x64
 8002d2e:	2201      	movs	r2, #1
 8002d30:	4828      	ldr	r0, [pc, #160]	@ (8002dd4 <NRF24_Transmit+0xec>)
 8002d32:	f00c f9bf 	bl	800f0b4 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(NRF24_SPI, (uint8_t*)payload32, 32, 100);
 8002d36:	2364      	movs	r3, #100	@ 0x64
 8002d38:	2220      	movs	r2, #32
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	4825      	ldr	r0, [pc, #148]	@ (8002dd4 <NRF24_Transmit+0xec>)
 8002d3e:	f00c f9b9 	bl	800f0b4 <HAL_SPI_Transmit>
    csn_high();
 8002d42:	f7ff ff7b 	bl	8002c3c <csn_high>

    // 3) CE pulse (>10us). Keep it tiny; no HAL_Delay here.
    ce_high();
 8002d46:	f7ff ff91 	bl	8002c6c <ce_high>
    // ~10–20us NOPs (H7 is fast: ~800 NOPs is plenty)
    for (volatile int i=0; i<20000; ++i) __NOP();
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60bb      	str	r3, [r7, #8]
 8002d4e:	e003      	b.n	8002d58 <NRF24_Transmit+0x70>
 8002d50:	bf00      	nop
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	3301      	adds	r3, #1
 8002d56:	60bb      	str	r3, [r7, #8]
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	ddf6      	ble.n	8002d50 <NRF24_Transmit+0x68>
    ce_low();
 8002d62:	f7ff ff77 	bl	8002c54 <ce_low>

    // 4) Wait a very short time for TX_DS or MAX_RT (fire-and-forget if EN_AA=0)
    uint32_t t0 = HAL_GetTick();
 8002d66:	f000 fedd 	bl	8003b24 <HAL_GetTick>
 8002d6a:	6138      	str	r0, [r7, #16]
    while ((HAL_GetTick() - t0) < 5) {     // small 5ms guard
 8002d6c:	e021      	b.n	8002db2 <NRF24_Transmit+0xca>
        st = nrf24_ReadReg(STATUS);
 8002d6e:	2007      	movs	r0, #7
 8002d70:	f7ff fd1c 	bl	80027ac <nrf24_ReadReg>
 8002d74:	4603      	mov	r3, r0
 8002d76:	75fb      	strb	r3, [r7, #23]
        if (st & (1u<<5)) {                // TX_DS
 8002d78:	7dfb      	ldrb	r3, [r7, #23]
 8002d7a:	f003 0320 	and.w	r3, r3, #32
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <NRF24_Transmit+0xa2>
            NRF24_ClearIRQs();
 8002d82:	f7ff ff7f 	bl	8002c84 <NRF24_ClearIRQs>
            return 1;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e01f      	b.n	8002dca <NRF24_Transmit+0xe2>
        }
        if (st & (1u<<4)) {                // MAX_RT
 8002d8a:	7dfb      	ldrb	r3, [r7, #23]
 8002d8c:	f003 0310 	and.w	r3, r3, #16
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d005      	beq.n	8002da0 <NRF24_Transmit+0xb8>
            NRF24_ClearIRQs();
 8002d94:	f7ff ff76 	bl	8002c84 <NRF24_ClearIRQs>
            NRF24_FlushTX();
 8002d98:	f7ff ff80 	bl	8002c9c <NRF24_FlushTX>
            return 0;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	e014      	b.n	8002dca <NRF24_Transmit+0xe2>
        }
        // If EN_AA is 0, TX_DS might not assert on some clones → still OK if FIFO empties
        if (NRF24_TxFIFOEmpty()) {
 8002da0:	f7ff ff92 	bl	8002cc8 <NRF24_TxFIFOEmpty>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <NRF24_Transmit+0xca>
            NRF24_ClearIRQs();
 8002daa:	f7ff ff6b 	bl	8002c84 <NRF24_ClearIRQs>
            return 1;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e00b      	b.n	8002dca <NRF24_Transmit+0xe2>
    while ((HAL_GetTick() - t0) < 5) {     // small 5ms guard
 8002db2:	f000 feb7 	bl	8003b24 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b04      	cmp	r3, #4
 8002dbe:	d9d6      	bls.n	8002d6e <NRF24_Transmit+0x86>
        }
    }

    // Timeout → treat as fail, clean up
    NRF24_ClearIRQs();
 8002dc0:	f7ff ff60 	bl	8002c84 <NRF24_ClearIRQs>
    NRF24_FlushTX();
 8002dc4:	f7ff ff6a 	bl	8002c9c <NRF24_FlushTX>
    return 0;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3718      	adds	r7, #24
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	24000460 	.word	0x24000460

08002dd8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dde:	4b0a      	ldr	r3, [pc, #40]	@ (8002e08 <HAL_MspInit+0x30>)
 8002de0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002de4:	4a08      	ldr	r2, [pc, #32]	@ (8002e08 <HAL_MspInit+0x30>)
 8002de6:	f043 0302 	orr.w	r3, r3, #2
 8002dea:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002dee:	4b06      	ldr	r3, [pc, #24]	@ (8002e08 <HAL_MspInit+0x30>)
 8002df0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	607b      	str	r3, [r7, #4]
 8002dfa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr
 8002e08:	58024400 	.word	0x58024400

08002e0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b090      	sub	sp, #64	@ 0x40
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	605a      	str	r2, [r3, #4]
 8002e1e:	609a      	str	r2, [r3, #8]
 8002e20:	60da      	str	r2, [r3, #12]
 8002e22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a90      	ldr	r2, [pc, #576]	@ (800306c <HAL_ADC_MspInit+0x260>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	f040 80a3 	bne.w	8002f76 <HAL_ADC_MspInit+0x16a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002e30:	4b8f      	ldr	r3, [pc, #572]	@ (8003070 <HAL_ADC_MspInit+0x264>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	3301      	adds	r3, #1
 8002e36:	4a8e      	ldr	r2, [pc, #568]	@ (8003070 <HAL_ADC_MspInit+0x264>)
 8002e38:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002e3a:	4b8d      	ldr	r3, [pc, #564]	@ (8003070 <HAL_ADC_MspInit+0x264>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d10e      	bne.n	8002e60 <HAL_ADC_MspInit+0x54>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002e42:	4b8c      	ldr	r3, [pc, #560]	@ (8003074 <HAL_ADC_MspInit+0x268>)
 8002e44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002e48:	4a8a      	ldr	r2, [pc, #552]	@ (8003074 <HAL_ADC_MspInit+0x268>)
 8002e4a:	f043 0320 	orr.w	r3, r3, #32
 8002e4e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002e52:	4b88      	ldr	r3, [pc, #544]	@ (8003074 <HAL_ADC_MspInit+0x268>)
 8002e54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002e58:	f003 0320 	and.w	r3, r3, #32
 8002e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e60:	4b84      	ldr	r3, [pc, #528]	@ (8003074 <HAL_ADC_MspInit+0x268>)
 8002e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e66:	4a83      	ldr	r2, [pc, #524]	@ (8003074 <HAL_ADC_MspInit+0x268>)
 8002e68:	f043 0304 	orr.w	r3, r3, #4
 8002e6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e70:	4b80      	ldr	r3, [pc, #512]	@ (8003074 <HAL_ADC_MspInit+0x268>)
 8002e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e76:	f003 0304 	and.w	r3, r3, #4
 8002e7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e7e:	4b7d      	ldr	r3, [pc, #500]	@ (8003074 <HAL_ADC_MspInit+0x268>)
 8002e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e84:	4a7b      	ldr	r2, [pc, #492]	@ (8003074 <HAL_ADC_MspInit+0x268>)
 8002e86:	f043 0302 	orr.w	r3, r3, #2
 8002e8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e8e:	4b79      	ldr	r3, [pc, #484]	@ (8003074 <HAL_ADC_MspInit+0x268>)
 8002e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	623b      	str	r3, [r7, #32]
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e9c:	4b75      	ldr	r3, [pc, #468]	@ (8003074 <HAL_ADC_MspInit+0x268>)
 8002e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ea2:	4a74      	ldr	r2, [pc, #464]	@ (8003074 <HAL_ADC_MspInit+0x268>)
 8002ea4:	f043 0320 	orr.w	r3, r3, #32
 8002ea8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002eac:	4b71      	ldr	r3, [pc, #452]	@ (8003074 <HAL_ADC_MspInit+0x268>)
 8002eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002eb2:	f003 0320 	and.w	r3, r3, #32
 8002eb6:	61fb      	str	r3, [r7, #28]
 8002eb8:	69fb      	ldr	r3, [r7, #28]
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = S_APPS_1_Pin|SUSPENSION_RL_Pin;
 8002eba:	2330      	movs	r3, #48	@ 0x30
 8002ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ec6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002eca:	4619      	mov	r1, r3
 8002ecc:	486a      	ldr	r0, [pc, #424]	@ (8003078 <HAL_ADC_MspInit+0x26c>)
 8002ece:	f006 fe09 	bl	8009ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SUSPENSION_RR_Pin|S_APPS_2_Pin;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eda:	2300      	movs	r3, #0
 8002edc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ede:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	4865      	ldr	r0, [pc, #404]	@ (800307c <HAL_ADC_MspInit+0x270>)
 8002ee6:	f006 fdfd 	bl	8009ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = S_FRENO_Pin;
 8002eea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(S_FRENO_GPIO_Port, &GPIO_InitStruct);
 8002ef8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002efc:	4619      	mov	r1, r3
 8002efe:	4860      	ldr	r0, [pc, #384]	@ (8003080 <HAL_ADC_MspInit+0x274>)
 8002f00:	f006 fdf0 	bl	8009ae4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8002f04:	4b5f      	ldr	r3, [pc, #380]	@ (8003084 <HAL_ADC_MspInit+0x278>)
 8002f06:	4a60      	ldr	r2, [pc, #384]	@ (8003088 <HAL_ADC_MspInit+0x27c>)
 8002f08:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002f0a:	4b5e      	ldr	r3, [pc, #376]	@ (8003084 <HAL_ADC_MspInit+0x278>)
 8002f0c:	2209      	movs	r2, #9
 8002f0e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f10:	4b5c      	ldr	r3, [pc, #368]	@ (8003084 <HAL_ADC_MspInit+0x278>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f16:	4b5b      	ldr	r3, [pc, #364]	@ (8003084 <HAL_ADC_MspInit+0x278>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002f1c:	4b59      	ldr	r3, [pc, #356]	@ (8003084 <HAL_ADC_MspInit+0x278>)
 8002f1e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f22:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f24:	4b57      	ldr	r3, [pc, #348]	@ (8003084 <HAL_ADC_MspInit+0x278>)
 8002f26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002f2a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f2c:	4b55      	ldr	r3, [pc, #340]	@ (8003084 <HAL_ADC_MspInit+0x278>)
 8002f2e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f32:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002f34:	4b53      	ldr	r3, [pc, #332]	@ (8003084 <HAL_ADC_MspInit+0x278>)
 8002f36:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f3a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002f3c:	4b51      	ldr	r3, [pc, #324]	@ (8003084 <HAL_ADC_MspInit+0x278>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f42:	4b50      	ldr	r3, [pc, #320]	@ (8003084 <HAL_ADC_MspInit+0x278>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002f48:	484e      	ldr	r0, [pc, #312]	@ (8003084 <HAL_ADC_MspInit+0x278>)
 8002f4a:	f003 fb35 	bl	80065b8 <HAL_DMA_Init>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <HAL_ADC_MspInit+0x14c>
    {
      Error_Handler();
 8002f54:	f7ff fb9a 	bl	800268c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a4a      	ldr	r2, [pc, #296]	@ (8003084 <HAL_ADC_MspInit+0x278>)
 8002f5c:	659a      	str	r2, [r3, #88]	@ 0x58
 8002f5e:	4a49      	ldr	r2, [pc, #292]	@ (8003084 <HAL_ADC_MspInit+0x278>)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002f64:	2200      	movs	r2, #0
 8002f66:	2100      	movs	r1, #0
 8002f68:	2012      	movs	r0, #18
 8002f6a:	f003 faf0 	bl	800654e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002f6e:	2012      	movs	r0, #18
 8002f70:	f003 fb07 	bl	8006582 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002f74:	e076      	b.n	8003064 <HAL_ADC_MspInit+0x258>
  else if(hadc->Instance==ADC2)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a44      	ldr	r2, [pc, #272]	@ (800308c <HAL_ADC_MspInit+0x280>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d171      	bne.n	8003064 <HAL_ADC_MspInit+0x258>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002f80:	4b3b      	ldr	r3, [pc, #236]	@ (8003070 <HAL_ADC_MspInit+0x264>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	3301      	adds	r3, #1
 8002f86:	4a3a      	ldr	r2, [pc, #232]	@ (8003070 <HAL_ADC_MspInit+0x264>)
 8002f88:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002f8a:	4b39      	ldr	r3, [pc, #228]	@ (8003070 <HAL_ADC_MspInit+0x264>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d10e      	bne.n	8002fb0 <HAL_ADC_MspInit+0x1a4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002f92:	4b38      	ldr	r3, [pc, #224]	@ (8003074 <HAL_ADC_MspInit+0x268>)
 8002f94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002f98:	4a36      	ldr	r2, [pc, #216]	@ (8003074 <HAL_ADC_MspInit+0x268>)
 8002f9a:	f043 0320 	orr.w	r3, r3, #32
 8002f9e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002fa2:	4b34      	ldr	r3, [pc, #208]	@ (8003074 <HAL_ADC_MspInit+0x268>)
 8002fa4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002fa8:	f003 0320 	and.w	r3, r3, #32
 8002fac:	61bb      	str	r3, [r7, #24]
 8002fae:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fb0:	4b30      	ldr	r3, [pc, #192]	@ (8003074 <HAL_ADC_MspInit+0x268>)
 8002fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002fb6:	4a2f      	ldr	r2, [pc, #188]	@ (8003074 <HAL_ADC_MspInit+0x268>)
 8002fb8:	f043 0304 	orr.w	r3, r3, #4
 8002fbc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002fc0:	4b2c      	ldr	r3, [pc, #176]	@ (8003074 <HAL_ADC_MspInit+0x268>)
 8002fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002fc6:	f003 0304 	and.w	r3, r3, #4
 8002fca:	617b      	str	r3, [r7, #20]
 8002fcc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fce:	4b29      	ldr	r3, [pc, #164]	@ (8003074 <HAL_ADC_MspInit+0x268>)
 8002fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002fd4:	4a27      	ldr	r2, [pc, #156]	@ (8003074 <HAL_ADC_MspInit+0x268>)
 8002fd6:	f043 0302 	orr.w	r3, r3, #2
 8002fda:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002fde:	4b25      	ldr	r3, [pc, #148]	@ (8003074 <HAL_ADC_MspInit+0x268>)
 8002fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	613b      	str	r3, [r7, #16]
 8002fea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002fec:	4b21      	ldr	r3, [pc, #132]	@ (8003074 <HAL_ADC_MspInit+0x268>)
 8002fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ff2:	4a20      	ldr	r2, [pc, #128]	@ (8003074 <HAL_ADC_MspInit+0x268>)
 8002ff4:	f043 0320 	orr.w	r3, r3, #32
 8002ff8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ffc:	4b1d      	ldr	r3, [pc, #116]	@ (8003074 <HAL_ADC_MspInit+0x268>)
 8002ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003002:	f003 0320 	and.w	r3, r3, #32
 8003006:	60fb      	str	r3, [r7, #12]
 8003008:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SUSPENSION_RL_Pin;
 800300a:	2320      	movs	r3, #32
 800300c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800300e:	2303      	movs	r3, #3
 8003010:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003012:	2300      	movs	r3, #0
 8003014:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SUSPENSION_RL_GPIO_Port, &GPIO_InitStruct);
 8003016:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800301a:	4619      	mov	r1, r3
 800301c:	4816      	ldr	r0, [pc, #88]	@ (8003078 <HAL_ADC_MspInit+0x26c>)
 800301e:	f006 fd61 	bl	8009ae4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SUSPENSION_RR_Pin;
 8003022:	2301      	movs	r3, #1
 8003024:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003026:	2303      	movs	r3, #3
 8003028:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302a:	2300      	movs	r3, #0
 800302c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SUSPENSION_RR_GPIO_Port, &GPIO_InitStruct);
 800302e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003032:	4619      	mov	r1, r3
 8003034:	4811      	ldr	r0, [pc, #68]	@ (800307c <HAL_ADC_MspInit+0x270>)
 8003036:	f006 fd55 	bl	8009ae4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SUSPENSION_FR_Pin;
 800303a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800303e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003040:	2303      	movs	r3, #3
 8003042:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003044:	2300      	movs	r3, #0
 8003046:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SUSPENSION_FR_GPIO_Port, &GPIO_InitStruct);
 8003048:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800304c:	4619      	mov	r1, r3
 800304e:	480c      	ldr	r0, [pc, #48]	@ (8003080 <HAL_ADC_MspInit+0x274>)
 8003050:	f006 fd48 	bl	8009ae4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003054:	2200      	movs	r2, #0
 8003056:	2100      	movs	r1, #0
 8003058:	2012      	movs	r0, #18
 800305a:	f003 fa78 	bl	800654e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800305e:	2012      	movs	r0, #18
 8003060:	f003 fa8f 	bl	8006582 <HAL_NVIC_EnableIRQ>
}
 8003064:	bf00      	nop
 8003066:	3740      	adds	r7, #64	@ 0x40
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	40022000 	.word	0x40022000
 8003070:	24000950 	.word	0x24000950
 8003074:	58024400 	.word	0x58024400
 8003078:	58020800 	.word	0x58020800
 800307c:	58020400 	.word	0x58020400
 8003080:	58021400 	.word	0x58021400
 8003084:	2400018c 	.word	0x2400018c
 8003088:	40020010 	.word	0x40020010
 800308c:	40022100 	.word	0x40022100

08003090 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b0bc      	sub	sp, #240	@ 0xf0
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003098:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	605a      	str	r2, [r3, #4]
 80030a2:	609a      	str	r2, [r3, #8]
 80030a4:	60da      	str	r2, [r3, #12]
 80030a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030a8:	f107 0320 	add.w	r3, r7, #32
 80030ac:	22b8      	movs	r2, #184	@ 0xb8
 80030ae:	2100      	movs	r1, #0
 80030b0:	4618      	mov	r0, r3
 80030b2:	f010 fd9b 	bl	8013bec <memset>
  if(hfdcan->Instance==FDCAN1)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a8d      	ldr	r2, [pc, #564]	@ (80032f0 <HAL_FDCAN_MspInit+0x260>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d157      	bne.n	8003170 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80030c0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80030c4:	f04f 0300 	mov.w	r3, #0
 80030c8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80030cc:	2300      	movs	r3, #0
 80030ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030d2:	f107 0320 	add.w	r3, r7, #32
 80030d6:	4618      	mov	r0, r3
 80030d8:	f007 fe7e 	bl	800add8 <HAL_RCCEx_PeriphCLKConfig>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 80030e2:	f7ff fad3 	bl	800268c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80030e6:	4b83      	ldr	r3, [pc, #524]	@ (80032f4 <HAL_FDCAN_MspInit+0x264>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	3301      	adds	r3, #1
 80030ec:	4a81      	ldr	r2, [pc, #516]	@ (80032f4 <HAL_FDCAN_MspInit+0x264>)
 80030ee:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80030f0:	4b80      	ldr	r3, [pc, #512]	@ (80032f4 <HAL_FDCAN_MspInit+0x264>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d10e      	bne.n	8003116 <HAL_FDCAN_MspInit+0x86>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80030f8:	4b7f      	ldr	r3, [pc, #508]	@ (80032f8 <HAL_FDCAN_MspInit+0x268>)
 80030fa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80030fe:	4a7e      	ldr	r2, [pc, #504]	@ (80032f8 <HAL_FDCAN_MspInit+0x268>)
 8003100:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003104:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8003108:	4b7b      	ldr	r3, [pc, #492]	@ (80032f8 <HAL_FDCAN_MspInit+0x268>)
 800310a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800310e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003112:	61fb      	str	r3, [r7, #28]
 8003114:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003116:	4b78      	ldr	r3, [pc, #480]	@ (80032f8 <HAL_FDCAN_MspInit+0x268>)
 8003118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800311c:	4a76      	ldr	r2, [pc, #472]	@ (80032f8 <HAL_FDCAN_MspInit+0x268>)
 800311e:	f043 0308 	orr.w	r3, r3, #8
 8003122:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003126:	4b74      	ldr	r3, [pc, #464]	@ (80032f8 <HAL_FDCAN_MspInit+0x268>)
 8003128:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800312c:	f003 0308 	and.w	r3, r3, #8
 8003130:	61bb      	str	r3, [r7, #24]
 8003132:	69bb      	ldr	r3, [r7, #24]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003134:	2303      	movs	r3, #3
 8003136:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800313a:	2302      	movs	r3, #2
 800313c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003140:	2300      	movs	r3, #0
 8003142:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003146:	2300      	movs	r3, #0
 8003148:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800314c:	2309      	movs	r3, #9
 800314e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003152:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003156:	4619      	mov	r1, r3
 8003158:	4868      	ldr	r0, [pc, #416]	@ (80032fc <HAL_FDCAN_MspInit+0x26c>)
 800315a:	f006 fcc3 	bl	8009ae4 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 1, 0);
 800315e:	2200      	movs	r2, #0
 8003160:	2101      	movs	r1, #1
 8003162:	2013      	movs	r0, #19
 8003164:	f003 f9f3 	bl	800654e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8003168:	2013      	movs	r0, #19
 800316a:	f003 fa0a 	bl	8006582 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 800316e:	e0ba      	b.n	80032e6 <HAL_FDCAN_MspInit+0x256>
  else if(hfdcan->Instance==FDCAN2)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a62      	ldr	r2, [pc, #392]	@ (8003300 <HAL_FDCAN_MspInit+0x270>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d158      	bne.n	800322c <HAL_FDCAN_MspInit+0x19c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800317a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800317e:	f04f 0300 	mov.w	r3, #0
 8003182:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8003186:	2300      	movs	r3, #0
 8003188:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800318c:	f107 0320 	add.w	r3, r7, #32
 8003190:	4618      	mov	r0, r3
 8003192:	f007 fe21 	bl	800add8 <HAL_RCCEx_PeriphCLKConfig>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <HAL_FDCAN_MspInit+0x110>
      Error_Handler();
 800319c:	f7ff fa76 	bl	800268c <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80031a0:	4b54      	ldr	r3, [pc, #336]	@ (80032f4 <HAL_FDCAN_MspInit+0x264>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	3301      	adds	r3, #1
 80031a6:	4a53      	ldr	r2, [pc, #332]	@ (80032f4 <HAL_FDCAN_MspInit+0x264>)
 80031a8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80031aa:	4b52      	ldr	r3, [pc, #328]	@ (80032f4 <HAL_FDCAN_MspInit+0x264>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d10e      	bne.n	80031d0 <HAL_FDCAN_MspInit+0x140>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80031b2:	4b51      	ldr	r3, [pc, #324]	@ (80032f8 <HAL_FDCAN_MspInit+0x268>)
 80031b4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80031b8:	4a4f      	ldr	r2, [pc, #316]	@ (80032f8 <HAL_FDCAN_MspInit+0x268>)
 80031ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031be:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80031c2:	4b4d      	ldr	r3, [pc, #308]	@ (80032f8 <HAL_FDCAN_MspInit+0x268>)
 80031c4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80031c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031cc:	617b      	str	r3, [r7, #20]
 80031ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031d0:	4b49      	ldr	r3, [pc, #292]	@ (80032f8 <HAL_FDCAN_MspInit+0x268>)
 80031d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031d6:	4a48      	ldr	r2, [pc, #288]	@ (80032f8 <HAL_FDCAN_MspInit+0x268>)
 80031d8:	f043 0302 	orr.w	r3, r3, #2
 80031dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80031e0:	4b45      	ldr	r3, [pc, #276]	@ (80032f8 <HAL_FDCAN_MspInit+0x268>)
 80031e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	613b      	str	r3, [r7, #16]
 80031ec:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80031ee:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80031f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f6:	2302      	movs	r3, #2
 80031f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fc:	2300      	movs	r3, #0
 80031fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003202:	2300      	movs	r3, #0
 8003204:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8003208:	2309      	movs	r3, #9
 800320a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800320e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003212:	4619      	mov	r1, r3
 8003214:	483b      	ldr	r0, [pc, #236]	@ (8003304 <HAL_FDCAN_MspInit+0x274>)
 8003216:	f006 fc65 	bl	8009ae4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 2, 0);
 800321a:	2200      	movs	r2, #0
 800321c:	2102      	movs	r1, #2
 800321e:	2014      	movs	r0, #20
 8003220:	f003 f995 	bl	800654e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8003224:	2014      	movs	r0, #20
 8003226:	f003 f9ac 	bl	8006582 <HAL_NVIC_EnableIRQ>
}
 800322a:	e05c      	b.n	80032e6 <HAL_FDCAN_MspInit+0x256>
  else if(hfdcan->Instance==FDCAN3)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a35      	ldr	r2, [pc, #212]	@ (8003308 <HAL_FDCAN_MspInit+0x278>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d157      	bne.n	80032e6 <HAL_FDCAN_MspInit+0x256>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003236:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800323a:	f04f 0300 	mov.w	r3, #0
 800323e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8003242:	2300      	movs	r3, #0
 8003244:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003248:	f107 0320 	add.w	r3, r7, #32
 800324c:	4618      	mov	r0, r3
 800324e:	f007 fdc3 	bl	800add8 <HAL_RCCEx_PeriphCLKConfig>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <HAL_FDCAN_MspInit+0x1cc>
      Error_Handler();
 8003258:	f7ff fa18 	bl	800268c <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800325c:	4b25      	ldr	r3, [pc, #148]	@ (80032f4 <HAL_FDCAN_MspInit+0x264>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	3301      	adds	r3, #1
 8003262:	4a24      	ldr	r2, [pc, #144]	@ (80032f4 <HAL_FDCAN_MspInit+0x264>)
 8003264:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8003266:	4b23      	ldr	r3, [pc, #140]	@ (80032f4 <HAL_FDCAN_MspInit+0x264>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d10e      	bne.n	800328c <HAL_FDCAN_MspInit+0x1fc>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800326e:	4b22      	ldr	r3, [pc, #136]	@ (80032f8 <HAL_FDCAN_MspInit+0x268>)
 8003270:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8003274:	4a20      	ldr	r2, [pc, #128]	@ (80032f8 <HAL_FDCAN_MspInit+0x268>)
 8003276:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800327a:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800327e:	4b1e      	ldr	r3, [pc, #120]	@ (80032f8 <HAL_FDCAN_MspInit+0x268>)
 8003280:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8003284:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003288:	60fb      	str	r3, [r7, #12]
 800328a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800328c:	4b1a      	ldr	r3, [pc, #104]	@ (80032f8 <HAL_FDCAN_MspInit+0x268>)
 800328e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003292:	4a19      	ldr	r2, [pc, #100]	@ (80032f8 <HAL_FDCAN_MspInit+0x268>)
 8003294:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003298:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800329c:	4b16      	ldr	r3, [pc, #88]	@ (80032f8 <HAL_FDCAN_MspInit+0x268>)
 800329e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032a6:	60bb      	str	r3, [r7, #8]
 80032a8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80032aa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80032ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b2:	2302      	movs	r3, #2
 80032b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b8:	2300      	movs	r3, #0
 80032ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032be:	2300      	movs	r3, #0
 80032c0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 80032c4:	2302      	movs	r3, #2
 80032c6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80032ca:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80032ce:	4619      	mov	r1, r3
 80032d0:	480e      	ldr	r0, [pc, #56]	@ (800330c <HAL_FDCAN_MspInit+0x27c>)
 80032d2:	f006 fc07 	bl	8009ae4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN3_IT0_IRQn, 0, 0);
 80032d6:	2200      	movs	r2, #0
 80032d8:	2100      	movs	r1, #0
 80032da:	209f      	movs	r0, #159	@ 0x9f
 80032dc:	f003 f937 	bl	800654e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT0_IRQn);
 80032e0:	209f      	movs	r0, #159	@ 0x9f
 80032e2:	f003 f94e 	bl	8006582 <HAL_NVIC_EnableIRQ>
}
 80032e6:	bf00      	nop
 80032e8:	37f0      	adds	r7, #240	@ 0xf0
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	4000a000 	.word	0x4000a000
 80032f4:	24000954 	.word	0x24000954
 80032f8:	58024400 	.word	0x58024400
 80032fc:	58020c00 	.word	0x58020c00
 8003300:	4000a400 	.word	0x4000a400
 8003304:	58020400 	.word	0x58020400
 8003308:	4000d400 	.word	0x4000d400
 800330c:	58021800 	.word	0x58021800

08003310 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b08c      	sub	sp, #48	@ 0x30
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003318:	f107 031c 	add.w	r3, r7, #28
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	605a      	str	r2, [r3, #4]
 8003322:	609a      	str	r2, [r3, #8]
 8003324:	60da      	str	r2, [r3, #12]
 8003326:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a3e      	ldr	r2, [pc, #248]	@ (8003428 <HAL_SD_MspInit+0x118>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d175      	bne.n	800341e <HAL_SD_MspInit+0x10e>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003332:	4b3e      	ldr	r3, [pc, #248]	@ (800342c <HAL_SD_MspInit+0x11c>)
 8003334:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003338:	4a3c      	ldr	r2, [pc, #240]	@ (800342c <HAL_SD_MspInit+0x11c>)
 800333a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800333e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8003342:	4b3a      	ldr	r3, [pc, #232]	@ (800342c <HAL_SD_MspInit+0x11c>)
 8003344:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003348:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800334c:	61bb      	str	r3, [r7, #24]
 800334e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003350:	4b36      	ldr	r3, [pc, #216]	@ (800342c <HAL_SD_MspInit+0x11c>)
 8003352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003356:	4a35      	ldr	r2, [pc, #212]	@ (800342c <HAL_SD_MspInit+0x11c>)
 8003358:	f043 0304 	orr.w	r3, r3, #4
 800335c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003360:	4b32      	ldr	r3, [pc, #200]	@ (800342c <HAL_SD_MspInit+0x11c>)
 8003362:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003366:	f003 0304 	and.w	r3, r3, #4
 800336a:	617b      	str	r3, [r7, #20]
 800336c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800336e:	4b2f      	ldr	r3, [pc, #188]	@ (800342c <HAL_SD_MspInit+0x11c>)
 8003370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003374:	4a2d      	ldr	r2, [pc, #180]	@ (800342c <HAL_SD_MspInit+0x11c>)
 8003376:	f043 0308 	orr.w	r3, r3, #8
 800337a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800337e:	4b2b      	ldr	r3, [pc, #172]	@ (800342c <HAL_SD_MspInit+0x11c>)
 8003380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003384:	f003 0308 	and.w	r3, r3, #8
 8003388:	613b      	str	r3, [r7, #16]
 800338a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800338c:	4b27      	ldr	r3, [pc, #156]	@ (800342c <HAL_SD_MspInit+0x11c>)
 800338e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003392:	4a26      	ldr	r2, [pc, #152]	@ (800342c <HAL_SD_MspInit+0x11c>)
 8003394:	f043 0302 	orr.w	r3, r3, #2
 8003398:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800339c:	4b23      	ldr	r3, [pc, #140]	@ (800342c <HAL_SD_MspInit+0x11c>)
 800339e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	60fb      	str	r3, [r7, #12]
 80033a8:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PB8     ------> SDMMC1_CKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80033aa:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80033ae:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b0:	2302      	movs	r3, #2
 80033b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b4:	2300      	movs	r3, #0
 80033b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033b8:	2303      	movs	r3, #3
 80033ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80033bc:	230c      	movs	r3, #12
 80033be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033c0:	f107 031c 	add.w	r3, r7, #28
 80033c4:	4619      	mov	r1, r3
 80033c6:	481a      	ldr	r0, [pc, #104]	@ (8003430 <HAL_SD_MspInit+0x120>)
 80033c8:	f006 fb8c 	bl	8009ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80033cc:	2304      	movs	r3, #4
 80033ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d0:	2302      	movs	r3, #2
 80033d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d4:	2300      	movs	r3, #0
 80033d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033d8:	2303      	movs	r3, #3
 80033da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80033dc:	230c      	movs	r3, #12
 80033de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033e0:	f107 031c 	add.w	r3, r7, #28
 80033e4:	4619      	mov	r1, r3
 80033e6:	4813      	ldr	r0, [pc, #76]	@ (8003434 <HAL_SD_MspInit+0x124>)
 80033e8:	f006 fb7c 	bl	8009ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80033ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80033f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f2:	2302      	movs	r3, #2
 80033f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f6:	2300      	movs	r3, #0
 80033f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033fa:	2303      	movs	r3, #3
 80033fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SDMMC1;
 80033fe:	2307      	movs	r3, #7
 8003400:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003402:	f107 031c 	add.w	r3, r7, #28
 8003406:	4619      	mov	r1, r3
 8003408:	480b      	ldr	r0, [pc, #44]	@ (8003438 <HAL_SD_MspInit+0x128>)
 800340a:	f006 fb6b 	bl	8009ae4 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800340e:	2200      	movs	r2, #0
 8003410:	2100      	movs	r1, #0
 8003412:	2031      	movs	r0, #49	@ 0x31
 8003414:	f003 f89b 	bl	800654e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8003418:	2031      	movs	r0, #49	@ 0x31
 800341a:	f003 f8b2 	bl	8006582 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 800341e:	bf00      	nop
 8003420:	3730      	adds	r7, #48	@ 0x30
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	52007000 	.word	0x52007000
 800342c:	58024400 	.word	0x58024400
 8003430:	58020800 	.word	0x58020800
 8003434:	58020c00 	.word	0x58020c00
 8003438:	58020400 	.word	0x58020400

0800343c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b0b8      	sub	sp, #224	@ 0xe0
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003444:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8003448:	2200      	movs	r2, #0
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	605a      	str	r2, [r3, #4]
 800344e:	609a      	str	r2, [r3, #8]
 8003450:	60da      	str	r2, [r3, #12]
 8003452:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003454:	f107 0310 	add.w	r3, r7, #16
 8003458:	22b8      	movs	r2, #184	@ 0xb8
 800345a:	2100      	movs	r1, #0
 800345c:	4618      	mov	r0, r3
 800345e:	f010 fbc5 	bl	8013bec <memset>
  if(hspi->Instance==SPI1)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a26      	ldr	r2, [pc, #152]	@ (8003500 <HAL_SPI_MspInit+0xc4>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d144      	bne.n	80034f6 <HAL_SPI_MspInit+0xba>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800346c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003470:	f04f 0300 	mov.w	r3, #0
 8003474:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003478:	2300      	movs	r3, #0
 800347a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800347c:	f107 0310 	add.w	r3, r7, #16
 8003480:	4618      	mov	r0, r3
 8003482:	f007 fca9 	bl	800add8 <HAL_RCCEx_PeriphCLKConfig>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 800348c:	f7ff f8fe 	bl	800268c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003490:	4b1c      	ldr	r3, [pc, #112]	@ (8003504 <HAL_SPI_MspInit+0xc8>)
 8003492:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003496:	4a1b      	ldr	r2, [pc, #108]	@ (8003504 <HAL_SPI_MspInit+0xc8>)
 8003498:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800349c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80034a0:	4b18      	ldr	r3, [pc, #96]	@ (8003504 <HAL_SPI_MspInit+0xc8>)
 80034a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034aa:	60fb      	str	r3, [r7, #12]
 80034ac:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ae:	4b15      	ldr	r3, [pc, #84]	@ (8003504 <HAL_SPI_MspInit+0xc8>)
 80034b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034b4:	4a13      	ldr	r2, [pc, #76]	@ (8003504 <HAL_SPI_MspInit+0xc8>)
 80034b6:	f043 0301 	orr.w	r3, r3, #1
 80034ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80034be:	4b11      	ldr	r3, [pc, #68]	@ (8003504 <HAL_SPI_MspInit+0xc8>)
 80034c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	60bb      	str	r3, [r7, #8]
 80034ca:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80034cc:	23e0      	movs	r3, #224	@ 0xe0
 80034ce:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d2:	2302      	movs	r3, #2
 80034d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d8:	2300      	movs	r3, #0
 80034da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034de:	2300      	movs	r3, #0
 80034e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80034e4:	2305      	movs	r3, #5
 80034e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034ea:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80034ee:	4619      	mov	r1, r3
 80034f0:	4805      	ldr	r0, [pc, #20]	@ (8003508 <HAL_SPI_MspInit+0xcc>)
 80034f2:	f006 faf7 	bl	8009ae4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80034f6:	bf00      	nop
 80034f8:	37e0      	adds	r7, #224	@ 0xe0
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	40013000 	.word	0x40013000
 8003504:	58024400 	.word	0x58024400
 8003508:	58020000 	.word	0x58020000

0800350c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a19      	ldr	r2, [pc, #100]	@ (8003580 <HAL_TIM_Base_MspInit+0x74>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d10f      	bne.n	800353e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800351e:	4b19      	ldr	r3, [pc, #100]	@ (8003584 <HAL_TIM_Base_MspInit+0x78>)
 8003520:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003524:	4a17      	ldr	r2, [pc, #92]	@ (8003584 <HAL_TIM_Base_MspInit+0x78>)
 8003526:	f043 0301 	orr.w	r3, r3, #1
 800352a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800352e:	4b15      	ldr	r3, [pc, #84]	@ (8003584 <HAL_TIM_Base_MspInit+0x78>)
 8003530:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	60fb      	str	r3, [r7, #12]
 800353a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800353c:	e01b      	b.n	8003576 <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM16)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a11      	ldr	r2, [pc, #68]	@ (8003588 <HAL_TIM_Base_MspInit+0x7c>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d116      	bne.n	8003576 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003548:	4b0e      	ldr	r3, [pc, #56]	@ (8003584 <HAL_TIM_Base_MspInit+0x78>)
 800354a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800354e:	4a0d      	ldr	r2, [pc, #52]	@ (8003584 <HAL_TIM_Base_MspInit+0x78>)
 8003550:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003554:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003558:	4b0a      	ldr	r3, [pc, #40]	@ (8003584 <HAL_TIM_Base_MspInit+0x78>)
 800355a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800355e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003562:	60bb      	str	r3, [r7, #8]
 8003564:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8003566:	2200      	movs	r2, #0
 8003568:	2100      	movs	r1, #0
 800356a:	2075      	movs	r0, #117	@ 0x75
 800356c:	f002 ffef 	bl	800654e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8003570:	2075      	movs	r0, #117	@ 0x75
 8003572:	f003 f806 	bl	8006582 <HAL_NVIC_EnableIRQ>
}
 8003576:	bf00      	nop
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	40010000 	.word	0x40010000
 8003584:	58024400 	.word	0x58024400
 8003588:	40014400 	.word	0x40014400

0800358c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b088      	sub	sp, #32
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003594:	f107 030c 	add.w	r3, r7, #12
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]
 800359c:	605a      	str	r2, [r3, #4]
 800359e:	609a      	str	r2, [r3, #8]
 80035a0:	60da      	str	r2, [r3, #12]
 80035a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a13      	ldr	r2, [pc, #76]	@ (80035f8 <HAL_TIM_MspPostInit+0x6c>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d11f      	bne.n	80035ee <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80035ae:	4b13      	ldr	r3, [pc, #76]	@ (80035fc <HAL_TIM_MspPostInit+0x70>)
 80035b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035b4:	4a11      	ldr	r2, [pc, #68]	@ (80035fc <HAL_TIM_MspPostInit+0x70>)
 80035b6:	f043 0310 	orr.w	r3, r3, #16
 80035ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80035be:	4b0f      	ldr	r3, [pc, #60]	@ (80035fc <HAL_TIM_MspPostInit+0x70>)
 80035c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035c4:	f003 0310 	and.w	r3, r3, #16
 80035c8:	60bb      	str	r3, [r7, #8]
 80035ca:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_FAN1_Pin|PWM_FAN2_Pin;
 80035cc:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80035d0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d2:	2302      	movs	r3, #2
 80035d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d6:	2300      	movs	r3, #0
 80035d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035da:	2300      	movs	r3, #0
 80035dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80035de:	2301      	movs	r3, #1
 80035e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035e2:	f107 030c 	add.w	r3, r7, #12
 80035e6:	4619      	mov	r1, r3
 80035e8:	4805      	ldr	r0, [pc, #20]	@ (8003600 <HAL_TIM_MspPostInit+0x74>)
 80035ea:	f006 fa7b 	bl	8009ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80035ee:	bf00      	nop
 80035f0:	3720      	adds	r7, #32
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	40010000 	.word	0x40010000
 80035fc:	58024400 	.word	0x58024400
 8003600:	58021000 	.word	0x58021000

08003604 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b0ba      	sub	sp, #232	@ 0xe8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800360c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	605a      	str	r2, [r3, #4]
 8003616:	609a      	str	r2, [r3, #8]
 8003618:	60da      	str	r2, [r3, #12]
 800361a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800361c:	f107 0318 	add.w	r3, r7, #24
 8003620:	22b8      	movs	r2, #184	@ 0xb8
 8003622:	2100      	movs	r1, #0
 8003624:	4618      	mov	r0, r3
 8003626:	f010 fae1 	bl	8013bec <memset>
  if(huart->Instance==USART1)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a4d      	ldr	r2, [pc, #308]	@ (8003764 <HAL_UART_MspInit+0x160>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d147      	bne.n	80036c4 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003634:	f04f 0201 	mov.w	r2, #1
 8003638:	f04f 0300 	mov.w	r3, #0
 800363c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003640:	2300      	movs	r3, #0
 8003642:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003646:	f107 0318 	add.w	r3, r7, #24
 800364a:	4618      	mov	r0, r3
 800364c:	f007 fbc4 	bl	800add8 <HAL_RCCEx_PeriphCLKConfig>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003656:	f7ff f819 	bl	800268c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800365a:	4b43      	ldr	r3, [pc, #268]	@ (8003768 <HAL_UART_MspInit+0x164>)
 800365c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003660:	4a41      	ldr	r2, [pc, #260]	@ (8003768 <HAL_UART_MspInit+0x164>)
 8003662:	f043 0310 	orr.w	r3, r3, #16
 8003666:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800366a:	4b3f      	ldr	r3, [pc, #252]	@ (8003768 <HAL_UART_MspInit+0x164>)
 800366c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003670:	f003 0310 	and.w	r3, r3, #16
 8003674:	617b      	str	r3, [r7, #20]
 8003676:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003678:	4b3b      	ldr	r3, [pc, #236]	@ (8003768 <HAL_UART_MspInit+0x164>)
 800367a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800367e:	4a3a      	ldr	r2, [pc, #232]	@ (8003768 <HAL_UART_MspInit+0x164>)
 8003680:	f043 0301 	orr.w	r3, r3, #1
 8003684:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003688:	4b37      	ldr	r3, [pc, #220]	@ (8003768 <HAL_UART_MspInit+0x164>)
 800368a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	613b      	str	r3, [r7, #16]
 8003694:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_GPS_Pin|USART1_RX_GPS_Pin;
 8003696:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800369a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800369e:	2302      	movs	r3, #2
 80036a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a4:	2300      	movs	r3, #0
 80036a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036aa:	2300      	movs	r3, #0
 80036ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80036b0:	2307      	movs	r3, #7
 80036b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036b6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80036ba:	4619      	mov	r1, r3
 80036bc:	482b      	ldr	r0, [pc, #172]	@ (800376c <HAL_UART_MspInit+0x168>)
 80036be:	f006 fa11 	bl	8009ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80036c2:	e04a      	b.n	800375a <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART2)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a29      	ldr	r2, [pc, #164]	@ (8003770 <HAL_UART_MspInit+0x16c>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d145      	bne.n	800375a <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80036ce:	f04f 0202 	mov.w	r2, #2
 80036d2:	f04f 0300 	mov.w	r3, #0
 80036d6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80036da:	2300      	movs	r3, #0
 80036dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036e0:	f107 0318 	add.w	r3, r7, #24
 80036e4:	4618      	mov	r0, r3
 80036e6:	f007 fb77 	bl	800add8 <HAL_RCCEx_PeriphCLKConfig>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d001      	beq.n	80036f4 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 80036f0:	f7fe ffcc 	bl	800268c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80036f4:	4b1c      	ldr	r3, [pc, #112]	@ (8003768 <HAL_UART_MspInit+0x164>)
 80036f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80036fa:	4a1b      	ldr	r2, [pc, #108]	@ (8003768 <HAL_UART_MspInit+0x164>)
 80036fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003700:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003704:	4b18      	ldr	r3, [pc, #96]	@ (8003768 <HAL_UART_MspInit+0x164>)
 8003706:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800370a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800370e:	60fb      	str	r3, [r7, #12]
 8003710:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003712:	4b15      	ldr	r3, [pc, #84]	@ (8003768 <HAL_UART_MspInit+0x164>)
 8003714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003718:	4a13      	ldr	r2, [pc, #76]	@ (8003768 <HAL_UART_MspInit+0x164>)
 800371a:	f043 0301 	orr.w	r3, r3, #1
 800371e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003722:	4b11      	ldr	r3, [pc, #68]	@ (8003768 <HAL_UART_MspInit+0x164>)
 8003724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	60bb      	str	r3, [r7, #8]
 800372e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003730:	230c      	movs	r3, #12
 8003732:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003736:	2302      	movs	r3, #2
 8003738:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800373c:	2300      	movs	r3, #0
 800373e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003742:	2300      	movs	r3, #0
 8003744:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003748:	2307      	movs	r3, #7
 800374a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800374e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003752:	4619      	mov	r1, r3
 8003754:	4805      	ldr	r0, [pc, #20]	@ (800376c <HAL_UART_MspInit+0x168>)
 8003756:	f006 f9c5 	bl	8009ae4 <HAL_GPIO_Init>
}
 800375a:	bf00      	nop
 800375c:	37e8      	adds	r7, #232	@ 0xe8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	40011000 	.word	0x40011000
 8003768:	58024400 	.word	0x58024400
 800376c:	58020000 	.word	0x58020000
 8003770:	40004400 	.word	0x40004400

08003774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003778:	bf00      	nop
 800377a:	e7fd      	b.n	8003778 <NMI_Handler+0x4>

0800377c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003780:	bf00      	nop
 8003782:	e7fd      	b.n	8003780 <HardFault_Handler+0x4>

08003784 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003788:	bf00      	nop
 800378a:	e7fd      	b.n	8003788 <MemManage_Handler+0x4>

0800378c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003790:	bf00      	nop
 8003792:	e7fd      	b.n	8003790 <BusFault_Handler+0x4>

08003794 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003798:	bf00      	nop
 800379a:	e7fd      	b.n	8003798 <UsageFault_Handler+0x4>

0800379c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80037a0:	bf00      	nop
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr

080037aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037aa:	b480      	push	{r7}
 80037ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037ae:	bf00      	nop
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037bc:	bf00      	nop
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr

080037c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037ca:	f000 f997 	bl	8003afc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037ce:	bf00      	nop
 80037d0:	bd80      	pop	{r7, pc}
	...

080037d4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80037d8:	4802      	ldr	r0, [pc, #8]	@ (80037e4 <DMA1_Stream0_IRQHandler+0x10>)
 80037da:	f003 fcaf 	bl	800713c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80037de:	bf00      	nop
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	2400018c 	.word	0x2400018c

080037e8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80037ec:	4803      	ldr	r0, [pc, #12]	@ (80037fc <ADC_IRQHandler+0x14>)
 80037ee:	f001 f9e9 	bl	8004bc4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80037f2:	4803      	ldr	r0, [pc, #12]	@ (8003800 <ADC_IRQHandler+0x18>)
 80037f4:	f001 f9e6 	bl	8004bc4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80037f8:	bf00      	nop
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	240000ac 	.word	0x240000ac
 8003800:	2400011c 	.word	0x2400011c

08003804 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8003808:	4802      	ldr	r0, [pc, #8]	@ (8003814 <FDCAN1_IT0_IRQHandler+0x10>)
 800380a:	f005 fc69 	bl	80090e0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800380e:	bf00      	nop
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	24000204 	.word	0x24000204

08003818 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 800381c:	4802      	ldr	r0, [pc, #8]	@ (8003828 <FDCAN2_IT0_IRQHandler+0x10>)
 800381e:	f005 fc5f 	bl	80090e0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8003822:	bf00      	nop
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	240002a4 	.word	0x240002a4

0800382c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8003830:	4802      	ldr	r0, [pc, #8]	@ (800383c <SDMMC1_IRQHandler+0x10>)
 8003832:	f00a f927 	bl	800da84 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8003836:	bf00      	nop
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	240003e4 	.word	0x240003e4

08003840 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003844:	4802      	ldr	r0, [pc, #8]	@ (8003850 <TIM16_IRQHandler+0x10>)
 8003846:	f00c fdf6 	bl	8010436 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800384a:	bf00      	nop
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	24000534 	.word	0x24000534

08003854 <FDCAN3_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 0.
  */
void FDCAN3_IT0_IRQHandler(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 0 */

  /* USER CODE END FDCAN3_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 8003858:	4802      	ldr	r0, [pc, #8]	@ (8003864 <FDCAN3_IT0_IRQHandler+0x10>)
 800385a:	f005 fc41 	bl	80090e0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 1 */

  /* USER CODE END FDCAN3_IT0_IRQn 1 */
}
 800385e:	bf00      	nop
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	24000344 	.word	0x24000344

08003868 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003870:	4a14      	ldr	r2, [pc, #80]	@ (80038c4 <_sbrk+0x5c>)
 8003872:	4b15      	ldr	r3, [pc, #84]	@ (80038c8 <_sbrk+0x60>)
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800387c:	4b13      	ldr	r3, [pc, #76]	@ (80038cc <_sbrk+0x64>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d102      	bne.n	800388a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003884:	4b11      	ldr	r3, [pc, #68]	@ (80038cc <_sbrk+0x64>)
 8003886:	4a12      	ldr	r2, [pc, #72]	@ (80038d0 <_sbrk+0x68>)
 8003888:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800388a:	4b10      	ldr	r3, [pc, #64]	@ (80038cc <_sbrk+0x64>)
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4413      	add	r3, r2
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	429a      	cmp	r2, r3
 8003896:	d207      	bcs.n	80038a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003898:	f010 f9b0 	bl	8013bfc <__errno>
 800389c:	4603      	mov	r3, r0
 800389e:	220c      	movs	r2, #12
 80038a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038a2:	f04f 33ff 	mov.w	r3, #4294967295
 80038a6:	e009      	b.n	80038bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038a8:	4b08      	ldr	r3, [pc, #32]	@ (80038cc <_sbrk+0x64>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038ae:	4b07      	ldr	r3, [pc, #28]	@ (80038cc <_sbrk+0x64>)
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4413      	add	r3, r2
 80038b6:	4a05      	ldr	r2, [pc, #20]	@ (80038cc <_sbrk+0x64>)
 80038b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80038ba:	68fb      	ldr	r3, [r7, #12]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3718      	adds	r7, #24
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	24050000 	.word	0x24050000
 80038c8:	00000400 	.word	0x00000400
 80038cc:	24000958 	.word	0x24000958
 80038d0:	24000ac8 	.word	0x24000ac8

080038d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80038d8:	4b32      	ldr	r3, [pc, #200]	@ (80039a4 <SystemInit+0xd0>)
 80038da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038de:	4a31      	ldr	r2, [pc, #196]	@ (80039a4 <SystemInit+0xd0>)
 80038e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80038e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80038e8:	4b2f      	ldr	r3, [pc, #188]	@ (80039a8 <SystemInit+0xd4>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 030f 	and.w	r3, r3, #15
 80038f0:	2b06      	cmp	r3, #6
 80038f2:	d807      	bhi.n	8003904 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80038f4:	4b2c      	ldr	r3, [pc, #176]	@ (80039a8 <SystemInit+0xd4>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f023 030f 	bic.w	r3, r3, #15
 80038fc:	4a2a      	ldr	r2, [pc, #168]	@ (80039a8 <SystemInit+0xd4>)
 80038fe:	f043 0307 	orr.w	r3, r3, #7
 8003902:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003904:	4b29      	ldr	r3, [pc, #164]	@ (80039ac <SystemInit+0xd8>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a28      	ldr	r2, [pc, #160]	@ (80039ac <SystemInit+0xd8>)
 800390a:	f043 0301 	orr.w	r3, r3, #1
 800390e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003910:	4b26      	ldr	r3, [pc, #152]	@ (80039ac <SystemInit+0xd8>)
 8003912:	2200      	movs	r2, #0
 8003914:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003916:	4b25      	ldr	r3, [pc, #148]	@ (80039ac <SystemInit+0xd8>)
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	4924      	ldr	r1, [pc, #144]	@ (80039ac <SystemInit+0xd8>)
 800391c:	4b24      	ldr	r3, [pc, #144]	@ (80039b0 <SystemInit+0xdc>)
 800391e:	4013      	ands	r3, r2
 8003920:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003922:	4b21      	ldr	r3, [pc, #132]	@ (80039a8 <SystemInit+0xd4>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0308 	and.w	r3, r3, #8
 800392a:	2b00      	cmp	r3, #0
 800392c:	d007      	beq.n	800393e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800392e:	4b1e      	ldr	r3, [pc, #120]	@ (80039a8 <SystemInit+0xd4>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f023 030f 	bic.w	r3, r3, #15
 8003936:	4a1c      	ldr	r2, [pc, #112]	@ (80039a8 <SystemInit+0xd4>)
 8003938:	f043 0307 	orr.w	r3, r3, #7
 800393c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800393e:	4b1b      	ldr	r3, [pc, #108]	@ (80039ac <SystemInit+0xd8>)
 8003940:	2200      	movs	r2, #0
 8003942:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003944:	4b19      	ldr	r3, [pc, #100]	@ (80039ac <SystemInit+0xd8>)
 8003946:	2200      	movs	r2, #0
 8003948:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800394a:	4b18      	ldr	r3, [pc, #96]	@ (80039ac <SystemInit+0xd8>)
 800394c:	2200      	movs	r2, #0
 800394e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003950:	4b16      	ldr	r3, [pc, #88]	@ (80039ac <SystemInit+0xd8>)
 8003952:	4a18      	ldr	r2, [pc, #96]	@ (80039b4 <SystemInit+0xe0>)
 8003954:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003956:	4b15      	ldr	r3, [pc, #84]	@ (80039ac <SystemInit+0xd8>)
 8003958:	4a17      	ldr	r2, [pc, #92]	@ (80039b8 <SystemInit+0xe4>)
 800395a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800395c:	4b13      	ldr	r3, [pc, #76]	@ (80039ac <SystemInit+0xd8>)
 800395e:	4a17      	ldr	r2, [pc, #92]	@ (80039bc <SystemInit+0xe8>)
 8003960:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003962:	4b12      	ldr	r3, [pc, #72]	@ (80039ac <SystemInit+0xd8>)
 8003964:	2200      	movs	r2, #0
 8003966:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003968:	4b10      	ldr	r3, [pc, #64]	@ (80039ac <SystemInit+0xd8>)
 800396a:	4a14      	ldr	r2, [pc, #80]	@ (80039bc <SystemInit+0xe8>)
 800396c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800396e:	4b0f      	ldr	r3, [pc, #60]	@ (80039ac <SystemInit+0xd8>)
 8003970:	2200      	movs	r2, #0
 8003972:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003974:	4b0d      	ldr	r3, [pc, #52]	@ (80039ac <SystemInit+0xd8>)
 8003976:	4a11      	ldr	r2, [pc, #68]	@ (80039bc <SystemInit+0xe8>)
 8003978:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800397a:	4b0c      	ldr	r3, [pc, #48]	@ (80039ac <SystemInit+0xd8>)
 800397c:	2200      	movs	r2, #0
 800397e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003980:	4b0a      	ldr	r3, [pc, #40]	@ (80039ac <SystemInit+0xd8>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a09      	ldr	r2, [pc, #36]	@ (80039ac <SystemInit+0xd8>)
 8003986:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800398a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800398c:	4b07      	ldr	r3, [pc, #28]	@ (80039ac <SystemInit+0xd8>)
 800398e:	2200      	movs	r2, #0
 8003990:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003992:	4b0b      	ldr	r3, [pc, #44]	@ (80039c0 <SystemInit+0xec>)
 8003994:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8003998:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800399a:	bf00      	nop
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr
 80039a4:	e000ed00 	.word	0xe000ed00
 80039a8:	52002000 	.word	0x52002000
 80039ac:	58024400 	.word	0x58024400
 80039b0:	eaf6ed7f 	.word	0xeaf6ed7f
 80039b4:	02020200 	.word	0x02020200
 80039b8:	01ff0000 	.word	0x01ff0000
 80039bc:	01010280 	.word	0x01010280
 80039c0:	52004000 	.word	0x52004000

080039c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80039c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80039fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80039c8:	f7ff ff84 	bl	80038d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80039cc:	480c      	ldr	r0, [pc, #48]	@ (8003a00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80039ce:	490d      	ldr	r1, [pc, #52]	@ (8003a04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80039d0:	4a0d      	ldr	r2, [pc, #52]	@ (8003a08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80039d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039d4:	e002      	b.n	80039dc <LoopCopyDataInit>

080039d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039da:	3304      	adds	r3, #4

080039dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039e0:	d3f9      	bcc.n	80039d6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039e2:	4a0a      	ldr	r2, [pc, #40]	@ (8003a0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80039e4:	4c0a      	ldr	r4, [pc, #40]	@ (8003a10 <LoopFillZerobss+0x22>)
  movs r3, #0
 80039e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039e8:	e001      	b.n	80039ee <LoopFillZerobss>

080039ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039ec:	3204      	adds	r2, #4

080039ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039f0:	d3fb      	bcc.n	80039ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80039f2:	f010 f909 	bl	8013c08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80039f6:	f7fc fe79 	bl	80006ec <main>
  bx  lr
 80039fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80039fc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003a00:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003a04:	24000084 	.word	0x24000084
  ldr r2, =_sidata
 8003a08:	08014a24 	.word	0x08014a24
  ldr r2, =_sbss
 8003a0c:	24000084 	.word	0x24000084
  ldr r4, =_ebss
 8003a10:	24000ac4 	.word	0x24000ac4

08003a14 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a14:	e7fe      	b.n	8003a14 <ADC3_IRQHandler>
	...

08003a18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a1e:	2003      	movs	r0, #3
 8003a20:	f002 fd8a 	bl	8006538 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003a24:	f007 f802 	bl	800aa2c <HAL_RCC_GetSysClockFreq>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	4b15      	ldr	r3, [pc, #84]	@ (8003a80 <HAL_Init+0x68>)
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	0a1b      	lsrs	r3, r3, #8
 8003a30:	f003 030f 	and.w	r3, r3, #15
 8003a34:	4913      	ldr	r1, [pc, #76]	@ (8003a84 <HAL_Init+0x6c>)
 8003a36:	5ccb      	ldrb	r3, [r1, r3]
 8003a38:	f003 031f 	and.w	r3, r3, #31
 8003a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a40:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a42:	4b0f      	ldr	r3, [pc, #60]	@ (8003a80 <HAL_Init+0x68>)
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	f003 030f 	and.w	r3, r3, #15
 8003a4a:	4a0e      	ldr	r2, [pc, #56]	@ (8003a84 <HAL_Init+0x6c>)
 8003a4c:	5cd3      	ldrb	r3, [r2, r3]
 8003a4e:	f003 031f 	and.w	r3, r3, #31
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	fa22 f303 	lsr.w	r3, r2, r3
 8003a58:	4a0b      	ldr	r2, [pc, #44]	@ (8003a88 <HAL_Init+0x70>)
 8003a5a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a5c:	4a0b      	ldr	r2, [pc, #44]	@ (8003a8c <HAL_Init+0x74>)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a62:	200f      	movs	r0, #15
 8003a64:	f000 f814 	bl	8003a90 <HAL_InitTick>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e002      	b.n	8003a78 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003a72:	f7ff f9b1 	bl	8002dd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3708      	adds	r7, #8
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	58024400 	.word	0x58024400
 8003a84:	0801497c 	.word	0x0801497c
 8003a88:	24000028 	.word	0x24000028
 8003a8c:	24000024 	.word	0x24000024

08003a90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003a98:	4b15      	ldr	r3, [pc, #84]	@ (8003af0 <HAL_InitTick+0x60>)
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d101      	bne.n	8003aa4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e021      	b.n	8003ae8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003aa4:	4b13      	ldr	r3, [pc, #76]	@ (8003af4 <HAL_InitTick+0x64>)
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	4b11      	ldr	r3, [pc, #68]	@ (8003af0 <HAL_InitTick+0x60>)
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	4619      	mov	r1, r3
 8003aae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ab2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aba:	4618      	mov	r0, r3
 8003abc:	f002 fd6f 	bl	800659e <HAL_SYSTICK_Config>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e00e      	b.n	8003ae8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b0f      	cmp	r3, #15
 8003ace:	d80a      	bhi.n	8003ae6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad8:	f002 fd39 	bl	800654e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003adc:	4a06      	ldr	r2, [pc, #24]	@ (8003af8 <HAL_InitTick+0x68>)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	e000      	b.n	8003ae8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3708      	adds	r7, #8
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	24000030 	.word	0x24000030
 8003af4:	24000024 	.word	0x24000024
 8003af8:	2400002c 	.word	0x2400002c

08003afc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003b00:	4b06      	ldr	r3, [pc, #24]	@ (8003b1c <HAL_IncTick+0x20>)
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	461a      	mov	r2, r3
 8003b06:	4b06      	ldr	r3, [pc, #24]	@ (8003b20 <HAL_IncTick+0x24>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	4a04      	ldr	r2, [pc, #16]	@ (8003b20 <HAL_IncTick+0x24>)
 8003b0e:	6013      	str	r3, [r2, #0]
}
 8003b10:	bf00      	nop
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	24000030 	.word	0x24000030
 8003b20:	2400095c 	.word	0x2400095c

08003b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0
  return uwTick;
 8003b28:	4b03      	ldr	r3, [pc, #12]	@ (8003b38 <HAL_GetTick+0x14>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	2400095c 	.word	0x2400095c

08003b3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b44:	f7ff ffee 	bl	8003b24 <HAL_GetTick>
 8003b48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b54:	d005      	beq.n	8003b62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b56:	4b0a      	ldr	r3, [pc, #40]	@ (8003b80 <HAL_Delay+0x44>)
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	4413      	add	r3, r2
 8003b60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b62:	bf00      	nop
 8003b64:	f7ff ffde 	bl	8003b24 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d8f7      	bhi.n	8003b64 <HAL_Delay+0x28>
  {
  }
}
 8003b74:	bf00      	nop
 8003b76:	bf00      	nop
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	24000030 	.word	0x24000030

08003b84 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	609a      	str	r2, [r3, #8]
}
 8003b9e:	bf00      	nop
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr

08003baa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003baa:	b480      	push	{r7}
 8003bac:	b083      	sub	sp, #12
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
 8003bb2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	609a      	str	r2, [r3, #8]
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b087      	sub	sp, #28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
 8003bf8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	3360      	adds	r3, #96	@ 0x60
 8003bfe:	461a      	mov	r2, r3
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4a10      	ldr	r2, [pc, #64]	@ (8003c4c <LL_ADC_SetOffset+0x60>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d10b      	bne.n	8003c28 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003c26:	e00b      	b.n	8003c40 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	430b      	orrs	r3, r1
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	601a      	str	r2, [r3, #0]
}
 8003c40:	bf00      	nop
 8003c42:	371c      	adds	r7, #28
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr
 8003c4c:	58026000 	.word	0x58026000

08003c50 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	3360      	adds	r3, #96	@ 0x60
 8003c5e:	461a      	mov	r2, r3
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4413      	add	r3, r2
 8003c66:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3714      	adds	r7, #20
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	f003 031f 	and.w	r3, r3, #31
 8003c96:	6879      	ldr	r1, [r7, #4]
 8003c98:	fa01 f303 	lsl.w	r3, r1, r3
 8003c9c:	431a      	orrs	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	611a      	str	r2, [r3, #16]
}
 8003ca2:	bf00      	nop
 8003ca4:	3714      	adds	r7, #20
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
	...

08003cb0 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b087      	sub	sp, #28
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	4a0c      	ldr	r2, [pc, #48]	@ (8003cf0 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d00e      	beq.n	8003ce2 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	3360      	adds	r3, #96	@ 0x60
 8003cc8:	461a      	mov	r2, r3
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	4413      	add	r3, r2
 8003cd0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	601a      	str	r2, [r3, #0]
  }
}
 8003ce2:	bf00      	nop
 8003ce4:	371c      	adds	r7, #28
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	58026000 	.word	0x58026000

08003cf4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b087      	sub	sp, #28
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	4a0c      	ldr	r2, [pc, #48]	@ (8003d34 <LL_ADC_SetOffsetSaturation+0x40>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d10e      	bne.n	8003d26 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	3360      	adds	r3, #96	@ 0x60
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	4413      	add	r3, r2
 8003d14:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	431a      	orrs	r2, r3
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003d26:	bf00      	nop
 8003d28:	371c      	adds	r7, #28
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	58026000 	.word	0x58026000

08003d38 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b087      	sub	sp, #28
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	4a0c      	ldr	r2, [pc, #48]	@ (8003d78 <LL_ADC_SetOffsetSign+0x40>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d10e      	bne.n	8003d6a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	3360      	adds	r3, #96	@ 0x60
 8003d50:	461a      	mov	r2, r3
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	4413      	add	r3, r2
 8003d58:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	431a      	orrs	r2, r3
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003d6a:	bf00      	nop
 8003d6c:	371c      	adds	r7, #28
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	58026000 	.word	0x58026000

08003d7c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b087      	sub	sp, #28
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	3360      	adds	r3, #96	@ 0x60
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	4413      	add	r3, r2
 8003d94:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	4a0c      	ldr	r2, [pc, #48]	@ (8003dcc <LL_ADC_SetOffsetState+0x50>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d108      	bne.n	8003db0 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	431a      	orrs	r2, r3
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003dae:	e007      	b.n	8003dc0 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	601a      	str	r2, [r3, #0]
}
 8003dc0:	bf00      	nop
 8003dc2:	371c      	adds	r7, #28
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	58026000 	.word	0x58026000

08003dd0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d101      	bne.n	8003de8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003de4:	2301      	movs	r3, #1
 8003de6:	e000      	b.n	8003dea <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003df6:	b480      	push	{r7}
 8003df8:	b087      	sub	sp, #28
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	60f8      	str	r0, [r7, #12]
 8003dfe:	60b9      	str	r1, [r7, #8]
 8003e00:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	3330      	adds	r3, #48	@ 0x30
 8003e06:	461a      	mov	r2, r3
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	0a1b      	lsrs	r3, r3, #8
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	f003 030c 	and.w	r3, r3, #12
 8003e12:	4413      	add	r3, r2
 8003e14:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	f003 031f 	and.w	r3, r3, #31
 8003e20:	211f      	movs	r1, #31
 8003e22:	fa01 f303 	lsl.w	r3, r1, r3
 8003e26:	43db      	mvns	r3, r3
 8003e28:	401a      	ands	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	0e9b      	lsrs	r3, r3, #26
 8003e2e:	f003 011f 	and.w	r1, r3, #31
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	f003 031f 	and.w	r3, r3, #31
 8003e38:	fa01 f303 	lsl.w	r3, r1, r3
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003e42:	bf00      	nop
 8003e44:	371c      	adds	r7, #28
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b083      	sub	sp, #12
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
 8003e56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	f023 0203 	bic.w	r2, r3, #3
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	431a      	orrs	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	60da      	str	r2, [r3, #12]
}
 8003e68:	bf00      	nop
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	f043 0201 	orr.w	r2, r3, #1
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	60da      	str	r2, [r3, #12]
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a08      	ldr	r2, [pc, #32]	@ (8003ec4 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d107      	bne.n	8003eb6 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	f023 0203 	bic.w	r2, r3, #3
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	431a      	orrs	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	60da      	str	r2, [r3, #12]
  }
}
 8003eb6:	bf00      	nop
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	58026000 	.word	0x58026000

08003ec8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ed4:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d101      	bne.n	8003ee0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003edc:	2301      	movs	r3, #1
 8003ede:	e000      	b.n	8003ee2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b087      	sub	sp, #28
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	60f8      	str	r0, [r7, #12]
 8003ef6:	60b9      	str	r1, [r7, #8]
 8003ef8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	3314      	adds	r3, #20
 8003efe:	461a      	mov	r2, r3
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	0e5b      	lsrs	r3, r3, #25
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	f003 0304 	and.w	r3, r3, #4
 8003f0a:	4413      	add	r3, r2
 8003f0c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	0d1b      	lsrs	r3, r3, #20
 8003f16:	f003 031f 	and.w	r3, r3, #31
 8003f1a:	2107      	movs	r1, #7
 8003f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f20:	43db      	mvns	r3, r3
 8003f22:	401a      	ands	r2, r3
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	0d1b      	lsrs	r3, r3, #20
 8003f28:	f003 031f 	and.w	r3, r3, #31
 8003f2c:	6879      	ldr	r1, [r7, #4]
 8003f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f32:	431a      	orrs	r2, r3
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003f38:	bf00      	nop
 8003f3a:	371c      	adds	r7, #28
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	4a1a      	ldr	r2, [pc, #104]	@ (8003fbc <LL_ADC_SetChannelSingleDiff+0x78>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d115      	bne.n	8003f84 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f64:	43db      	mvns	r3, r3
 8003f66:	401a      	ands	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f003 0318 	and.w	r3, r3, #24
 8003f6e:	4914      	ldr	r1, [pc, #80]	@ (8003fc0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003f70:	40d9      	lsrs	r1, r3
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	400b      	ands	r3, r1
 8003f76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003f82:	e014      	b.n	8003fae <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f90:	43db      	mvns	r3, r3
 8003f92:	401a      	ands	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f003 0318 	and.w	r3, r3, #24
 8003f9a:	4909      	ldr	r1, [pc, #36]	@ (8003fc0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003f9c:	40d9      	lsrs	r1, r3
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	400b      	ands	r3, r1
 8003fa2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8003fae:	bf00      	nop
 8003fb0:	3714      	adds	r7, #20
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	58026000 	.word	0x58026000
 8003fc0:	000fffff 	.word	0x000fffff

08003fc4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f003 031f 	and.w	r3, r3, #31
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	4b04      	ldr	r3, [pc, #16]	@ (800401c <LL_ADC_DisableDeepPowerDown+0x20>)
 800400a:	4013      	ands	r3, r2
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	6093      	str	r3, [r2, #8]
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr
 800401c:	5fffffc0 	.word	0x5fffffc0

08004020 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004030:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004034:	d101      	bne.n	800403a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004036:	2301      	movs	r3, #1
 8004038:	e000      	b.n	800403c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689a      	ldr	r2, [r3, #8]
 8004054:	4b05      	ldr	r3, [pc, #20]	@ (800406c <LL_ADC_EnableInternalRegulator+0x24>)
 8004056:	4013      	ands	r3, r2
 8004058:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr
 800406c:	6fffffc0 	.word	0x6fffffc0

08004070 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004080:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004084:	d101      	bne.n	800408a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004086:	2301      	movs	r3, #1
 8004088:	e000      	b.n	800408c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689a      	ldr	r2, [r3, #8]
 80040a4:	4b05      	ldr	r3, [pc, #20]	@ (80040bc <LL_ADC_Enable+0x24>)
 80040a6:	4013      	ands	r3, r2
 80040a8:	f043 0201 	orr.w	r2, r3, #1
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	7fffffc0 	.word	0x7fffffc0

080040c0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689a      	ldr	r2, [r3, #8]
 80040cc:	4b05      	ldr	r3, [pc, #20]	@ (80040e4 <LL_ADC_Disable+0x24>)
 80040ce:	4013      	ands	r3, r2
 80040d0:	f043 0202 	orr.w	r2, r3, #2
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr
 80040e4:	7fffffc0 	.word	0x7fffffc0

080040e8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d101      	bne.n	8004100 <LL_ADC_IsEnabled+0x18>
 80040fc:	2301      	movs	r3, #1
 80040fe:	e000      	b.n	8004102 <LL_ADC_IsEnabled+0x1a>
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800410e:	b480      	push	{r7}
 8004110:	b083      	sub	sp, #12
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b02      	cmp	r3, #2
 8004120:	d101      	bne.n	8004126 <LL_ADC_IsDisableOngoing+0x18>
 8004122:	2301      	movs	r3, #1
 8004124:	e000      	b.n	8004128 <LL_ADC_IsDisableOngoing+0x1a>
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689a      	ldr	r2, [r3, #8]
 8004140:	4b05      	ldr	r3, [pc, #20]	@ (8004158 <LL_ADC_REG_StartConversion+0x24>)
 8004142:	4013      	ands	r3, r2
 8004144:	f043 0204 	orr.w	r2, r3, #4
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr
 8004158:	7fffffc0 	.word	0x7fffffc0

0800415c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689a      	ldr	r2, [r3, #8]
 8004168:	4b05      	ldr	r3, [pc, #20]	@ (8004180 <LL_ADC_REG_StopConversion+0x24>)
 800416a:	4013      	ands	r3, r2
 800416c:	f043 0210 	orr.w	r2, r3, #16
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr
 8004180:	7fffffc0 	.word	0x7fffffc0

08004184 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	2b04      	cmp	r3, #4
 8004196:	d101      	bne.n	800419c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004198:	2301      	movs	r3, #1
 800419a:	e000      	b.n	800419e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
	...

080041ac <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689a      	ldr	r2, [r3, #8]
 80041b8:	4b05      	ldr	r3, [pc, #20]	@ (80041d0 <LL_ADC_INJ_StopConversion+0x24>)
 80041ba:	4013      	ands	r3, r2
 80041bc:	f043 0220 	orr.w	r2, r3, #32
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	7fffffc0 	.word	0x7fffffc0

080041d4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f003 0308 	and.w	r3, r3, #8
 80041e4:	2b08      	cmp	r3, #8
 80041e6:	d101      	bne.n	80041ec <LL_ADC_INJ_IsConversionOngoing+0x18>
 80041e8:	2301      	movs	r3, #1
 80041ea:	e000      	b.n	80041ee <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
	...

080041fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80041fc:	b590      	push	{r4, r7, lr}
 80041fe:	b089      	sub	sp, #36	@ 0x24
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004204:	2300      	movs	r3, #0
 8004206:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004208:	2300      	movs	r3, #0
 800420a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e1ee      	b.n	80045f4 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004220:	2b00      	cmp	r3, #0
 8004222:	d109      	bne.n	8004238 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f7fe fdf1 	bl	8002e0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4618      	mov	r0, r3
 800423e:	f7ff feef 	bl	8004020 <LL_ADC_IsDeepPowerDownEnabled>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d004      	beq.n	8004252 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4618      	mov	r0, r3
 800424e:	f7ff fed5 	bl	8003ffc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4618      	mov	r0, r3
 8004258:	f7ff ff0a 	bl	8004070 <LL_ADC_IsInternalRegulatorEnabled>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d114      	bne.n	800428c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4618      	mov	r0, r3
 8004268:	f7ff feee 	bl	8004048 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800426c:	4b8e      	ldr	r3, [pc, #568]	@ (80044a8 <HAL_ADC_Init+0x2ac>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	099b      	lsrs	r3, r3, #6
 8004272:	4a8e      	ldr	r2, [pc, #568]	@ (80044ac <HAL_ADC_Init+0x2b0>)
 8004274:	fba2 2303 	umull	r2, r3, r2, r3
 8004278:	099b      	lsrs	r3, r3, #6
 800427a:	3301      	adds	r3, #1
 800427c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800427e:	e002      	b.n	8004286 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	3b01      	subs	r3, #1
 8004284:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1f9      	bne.n	8004280 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4618      	mov	r0, r3
 8004292:	f7ff feed 	bl	8004070 <LL_ADC_IsInternalRegulatorEnabled>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d10d      	bne.n	80042b8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042a0:	f043 0210 	orr.w	r2, r3, #16
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042ac:	f043 0201 	orr.w	r2, r3, #1
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4618      	mov	r0, r3
 80042be:	f7ff ff61 	bl	8004184 <LL_ADC_REG_IsConversionOngoing>
 80042c2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042c8:	f003 0310 	and.w	r3, r3, #16
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f040 8188 	bne.w	80045e2 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f040 8184 	bne.w	80045e2 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042de:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80042e2:	f043 0202 	orr.w	r2, r3, #2
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7ff fefa 	bl	80040e8 <LL_ADC_IsEnabled>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d136      	bne.n	8004368 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a6c      	ldr	r2, [pc, #432]	@ (80044b0 <HAL_ADC_Init+0x2b4>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d004      	beq.n	800430e <HAL_ADC_Init+0x112>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a6a      	ldr	r2, [pc, #424]	@ (80044b4 <HAL_ADC_Init+0x2b8>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d10e      	bne.n	800432c <HAL_ADC_Init+0x130>
 800430e:	4868      	ldr	r0, [pc, #416]	@ (80044b0 <HAL_ADC_Init+0x2b4>)
 8004310:	f7ff feea 	bl	80040e8 <LL_ADC_IsEnabled>
 8004314:	4604      	mov	r4, r0
 8004316:	4867      	ldr	r0, [pc, #412]	@ (80044b4 <HAL_ADC_Init+0x2b8>)
 8004318:	f7ff fee6 	bl	80040e8 <LL_ADC_IsEnabled>
 800431c:	4603      	mov	r3, r0
 800431e:	4323      	orrs	r3, r4
 8004320:	2b00      	cmp	r3, #0
 8004322:	bf0c      	ite	eq
 8004324:	2301      	moveq	r3, #1
 8004326:	2300      	movne	r3, #0
 8004328:	b2db      	uxtb	r3, r3
 800432a:	e008      	b.n	800433e <HAL_ADC_Init+0x142>
 800432c:	4862      	ldr	r0, [pc, #392]	@ (80044b8 <HAL_ADC_Init+0x2bc>)
 800432e:	f7ff fedb 	bl	80040e8 <LL_ADC_IsEnabled>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	bf0c      	ite	eq
 8004338:	2301      	moveq	r3, #1
 800433a:	2300      	movne	r3, #0
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d012      	beq.n	8004368 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a5a      	ldr	r2, [pc, #360]	@ (80044b0 <HAL_ADC_Init+0x2b4>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d004      	beq.n	8004356 <HAL_ADC_Init+0x15a>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a58      	ldr	r2, [pc, #352]	@ (80044b4 <HAL_ADC_Init+0x2b8>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d101      	bne.n	800435a <HAL_ADC_Init+0x15e>
 8004356:	4a59      	ldr	r2, [pc, #356]	@ (80044bc <HAL_ADC_Init+0x2c0>)
 8004358:	e000      	b.n	800435c <HAL_ADC_Init+0x160>
 800435a:	4a59      	ldr	r2, [pc, #356]	@ (80044c0 <HAL_ADC_Init+0x2c4>)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	4619      	mov	r1, r3
 8004362:	4610      	mov	r0, r2
 8004364:	f7ff fc0e 	bl	8003b84 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a52      	ldr	r2, [pc, #328]	@ (80044b8 <HAL_ADC_Init+0x2bc>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d129      	bne.n	80043c6 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	7e5b      	ldrb	r3, [r3, #25]
 8004376:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800437c:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8004382:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	2b08      	cmp	r3, #8
 800438a:	d013      	beq.n	80043b4 <HAL_ADC_Init+0x1b8>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	2b0c      	cmp	r3, #12
 8004392:	d00d      	beq.n	80043b0 <HAL_ADC_Init+0x1b4>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	2b1c      	cmp	r3, #28
 800439a:	d007      	beq.n	80043ac <HAL_ADC_Init+0x1b0>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	2b18      	cmp	r3, #24
 80043a2:	d101      	bne.n	80043a8 <HAL_ADC_Init+0x1ac>
 80043a4:	2318      	movs	r3, #24
 80043a6:	e006      	b.n	80043b6 <HAL_ADC_Init+0x1ba>
 80043a8:	2300      	movs	r3, #0
 80043aa:	e004      	b.n	80043b6 <HAL_ADC_Init+0x1ba>
 80043ac:	2310      	movs	r3, #16
 80043ae:	e002      	b.n	80043b6 <HAL_ADC_Init+0x1ba>
 80043b0:	2308      	movs	r3, #8
 80043b2:	e000      	b.n	80043b6 <HAL_ADC_Init+0x1ba>
 80043b4:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80043b6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043be:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80043c0:	4313      	orrs	r3, r2
 80043c2:	61bb      	str	r3, [r7, #24]
 80043c4:	e00e      	b.n	80043e4 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	7e5b      	ldrb	r3, [r3, #25]
 80043ca:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80043d0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80043d6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043de:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80043e0:	4313      	orrs	r3, r2
 80043e2:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d106      	bne.n	80043fc <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f2:	3b01      	subs	r3, #1
 80043f4:	045b      	lsls	r3, r3, #17
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004400:	2b00      	cmp	r3, #0
 8004402:	d009      	beq.n	8004418 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004408:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004410:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004412:	69ba      	ldr	r2, [r7, #24]
 8004414:	4313      	orrs	r3, r2
 8004416:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a26      	ldr	r2, [pc, #152]	@ (80044b8 <HAL_ADC_Init+0x2bc>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d115      	bne.n	800444e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68da      	ldr	r2, [r3, #12]
 8004428:	4b26      	ldr	r3, [pc, #152]	@ (80044c4 <HAL_ADC_Init+0x2c8>)
 800442a:	4013      	ands	r3, r2
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	6812      	ldr	r2, [r2, #0]
 8004430:	69b9      	ldr	r1, [r7, #24]
 8004432:	430b      	orrs	r3, r1
 8004434:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	430a      	orrs	r2, r1
 800444a:	611a      	str	r2, [r3, #16]
 800444c:	e009      	b.n	8004462 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68da      	ldr	r2, [r3, #12]
 8004454:	4b1c      	ldr	r3, [pc, #112]	@ (80044c8 <HAL_ADC_Init+0x2cc>)
 8004456:	4013      	ands	r3, r2
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	6812      	ldr	r2, [r2, #0]
 800445c:	69b9      	ldr	r1, [r7, #24]
 800445e:	430b      	orrs	r3, r1
 8004460:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4618      	mov	r0, r3
 8004468:	f7ff fe8c 	bl	8004184 <LL_ADC_REG_IsConversionOngoing>
 800446c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4618      	mov	r0, r3
 8004474:	f7ff feae 	bl	80041d4 <LL_ADC_INJ_IsConversionOngoing>
 8004478:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	2b00      	cmp	r3, #0
 800447e:	f040 808e 	bne.w	800459e <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2b00      	cmp	r3, #0
 8004486:	f040 808a 	bne.w	800459e <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a0a      	ldr	r2, [pc, #40]	@ (80044b8 <HAL_ADC_Init+0x2bc>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d11b      	bne.n	80044cc <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	7e1b      	ldrb	r3, [r3, #24]
 8004498:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80044a0:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80044a2:	4313      	orrs	r3, r2
 80044a4:	61bb      	str	r3, [r7, #24]
 80044a6:	e018      	b.n	80044da <HAL_ADC_Init+0x2de>
 80044a8:	24000024 	.word	0x24000024
 80044ac:	053e2d63 	.word	0x053e2d63
 80044b0:	40022000 	.word	0x40022000
 80044b4:	40022100 	.word	0x40022100
 80044b8:	58026000 	.word	0x58026000
 80044bc:	40022300 	.word	0x40022300
 80044c0:	58026300 	.word	0x58026300
 80044c4:	fff04007 	.word	0xfff04007
 80044c8:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	7e1b      	ldrb	r3, [r3, #24]
 80044d0:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 80044d6:	4313      	orrs	r3, r2
 80044d8:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68da      	ldr	r2, [r3, #12]
 80044e0:	4b46      	ldr	r3, [pc, #280]	@ (80045fc <HAL_ADC_Init+0x400>)
 80044e2:	4013      	ands	r3, r2
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	6812      	ldr	r2, [r2, #0]
 80044e8:	69b9      	ldr	r1, [r7, #24]
 80044ea:	430b      	orrs	r3, r1
 80044ec:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d137      	bne.n	8004568 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044fc:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a3f      	ldr	r2, [pc, #252]	@ (8004600 <HAL_ADC_Init+0x404>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d116      	bne.n	8004536 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	691a      	ldr	r2, [r3, #16]
 800450e:	4b3d      	ldr	r3, [pc, #244]	@ (8004604 <HAL_ADC_Init+0x408>)
 8004510:	4013      	ands	r3, r2
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800451a:	4311      	orrs	r1, r2
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004520:	4311      	orrs	r1, r2
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004526:	430a      	orrs	r2, r1
 8004528:	431a      	orrs	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f042 0201 	orr.w	r2, r2, #1
 8004532:	611a      	str	r2, [r3, #16]
 8004534:	e020      	b.n	8004578 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	691a      	ldr	r2, [r3, #16]
 800453c:	4b32      	ldr	r3, [pc, #200]	@ (8004608 <HAL_ADC_Init+0x40c>)
 800453e:	4013      	ands	r3, r2
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004544:	3a01      	subs	r2, #1
 8004546:	0411      	lsls	r1, r2, #16
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800454c:	4311      	orrs	r1, r2
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004552:	4311      	orrs	r1, r2
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004558:	430a      	orrs	r2, r1
 800455a:	431a      	orrs	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f042 0201 	orr.w	r2, r2, #1
 8004564:	611a      	str	r2, [r3, #16]
 8004566:	e007      	b.n	8004578 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	691a      	ldr	r2, [r3, #16]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f022 0201 	bic.w	r2, r2, #1
 8004576:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	430a      	orrs	r2, r1
 800458c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a1b      	ldr	r2, [pc, #108]	@ (8004600 <HAL_ADC_Init+0x404>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d002      	beq.n	800459e <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f001 fcd5 	bl	8005f48 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d10c      	bne.n	80045c0 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ac:	f023 010f 	bic.w	r1, r3, #15
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	69db      	ldr	r3, [r3, #28]
 80045b4:	1e5a      	subs	r2, r3, #1
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	430a      	orrs	r2, r1
 80045bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80045be:	e007      	b.n	80045d0 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 020f 	bic.w	r2, r2, #15
 80045ce:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045d4:	f023 0303 	bic.w	r3, r3, #3
 80045d8:	f043 0201 	orr.w	r2, r3, #1
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	661a      	str	r2, [r3, #96]	@ 0x60
 80045e0:	e007      	b.n	80045f2 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045e6:	f043 0210 	orr.w	r2, r3, #16
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80045f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3724      	adds	r7, #36	@ 0x24
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd90      	pop	{r4, r7, pc}
 80045fc:	ffffbffc 	.word	0xffffbffc
 8004600:	58026000 	.word	0x58026000
 8004604:	fc00f81f 	.word	0xfc00f81f
 8004608:	fc00f81e 	.word	0xfc00f81e

0800460c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a5c      	ldr	r2, [pc, #368]	@ (800478c <HAL_ADC_Start+0x180>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d004      	beq.n	8004628 <HAL_ADC_Start+0x1c>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a5b      	ldr	r2, [pc, #364]	@ (8004790 <HAL_ADC_Start+0x184>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d101      	bne.n	800462c <HAL_ADC_Start+0x20>
 8004628:	4b5a      	ldr	r3, [pc, #360]	@ (8004794 <HAL_ADC_Start+0x188>)
 800462a:	e000      	b.n	800462e <HAL_ADC_Start+0x22>
 800462c:	4b5a      	ldr	r3, [pc, #360]	@ (8004798 <HAL_ADC_Start+0x18c>)
 800462e:	4618      	mov	r0, r3
 8004630:	f7ff fcc8 	bl	8003fc4 <LL_ADC_GetMultimode>
 8004634:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4618      	mov	r0, r3
 800463c:	f7ff fda2 	bl	8004184 <LL_ADC_REG_IsConversionOngoing>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	f040 809a 	bne.w	800477c <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800464e:	2b01      	cmp	r3, #1
 8004650:	d101      	bne.n	8004656 <HAL_ADC_Start+0x4a>
 8004652:	2302      	movs	r3, #2
 8004654:	e095      	b.n	8004782 <HAL_ADC_Start+0x176>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f001 faf4 	bl	8005c4c <ADC_Enable>
 8004664:	4603      	mov	r3, r0
 8004666:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004668:	7dfb      	ldrb	r3, [r7, #23]
 800466a:	2b00      	cmp	r3, #0
 800466c:	f040 8081 	bne.w	8004772 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004674:	4b49      	ldr	r3, [pc, #292]	@ (800479c <HAL_ADC_Start+0x190>)
 8004676:	4013      	ands	r3, r2
 8004678:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a42      	ldr	r2, [pc, #264]	@ (8004790 <HAL_ADC_Start+0x184>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d002      	beq.n	8004690 <HAL_ADC_Start+0x84>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	e000      	b.n	8004692 <HAL_ADC_Start+0x86>
 8004690:	4b3e      	ldr	r3, [pc, #248]	@ (800478c <HAL_ADC_Start+0x180>)
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	6812      	ldr	r2, [r2, #0]
 8004696:	4293      	cmp	r3, r2
 8004698:	d002      	beq.n	80046a0 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d105      	bne.n	80046ac <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046a4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046b8:	d106      	bne.n	80046c8 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046be:	f023 0206 	bic.w	r2, r3, #6
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	665a      	str	r2, [r3, #100]	@ 0x64
 80046c6:	e002      	b.n	80046ce <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	221c      	movs	r2, #28
 80046d4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a2b      	ldr	r2, [pc, #172]	@ (8004790 <HAL_ADC_Start+0x184>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d002      	beq.n	80046ee <HAL_ADC_Start+0xe2>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	e000      	b.n	80046f0 <HAL_ADC_Start+0xe4>
 80046ee:	4b27      	ldr	r3, [pc, #156]	@ (800478c <HAL_ADC_Start+0x180>)
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	6812      	ldr	r2, [r2, #0]
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d008      	beq.n	800470a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d005      	beq.n	800470a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	2b05      	cmp	r3, #5
 8004702:	d002      	beq.n	800470a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	2b09      	cmp	r3, #9
 8004708:	d114      	bne.n	8004734 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d007      	beq.n	8004728 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800471c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004720:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4618      	mov	r0, r3
 800472e:	f7ff fd01 	bl	8004134 <LL_ADC_REG_StartConversion>
 8004732:	e025      	b.n	8004780 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004738:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	661a      	str	r2, [r3, #96]	@ 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a12      	ldr	r2, [pc, #72]	@ (8004790 <HAL_ADC_Start+0x184>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d002      	beq.n	8004750 <HAL_ADC_Start+0x144>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	e000      	b.n	8004752 <HAL_ADC_Start+0x146>
 8004750:	4b0e      	ldr	r3, [pc, #56]	@ (800478c <HAL_ADC_Start+0x180>)
 8004752:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00f      	beq.n	8004780 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004764:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004768:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	661a      	str	r2, [r3, #96]	@ 0x60
 8004770:	e006      	b.n	8004780 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800477a:	e001      	b.n	8004780 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800477c:	2302      	movs	r3, #2
 800477e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004780:	7dfb      	ldrb	r3, [r7, #23]
}
 8004782:	4618      	mov	r0, r3
 8004784:	3718      	adds	r7, #24
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	40022000 	.word	0x40022000
 8004790:	40022100 	.word	0x40022100
 8004794:	40022300 	.word	0x40022300
 8004798:	58026300 	.word	0x58026300
 800479c:	fffff0fe 	.word	0xfffff0fe

080047a0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d101      	bne.n	80047b6 <HAL_ADC_Stop+0x16>
 80047b2:	2302      	movs	r3, #2
 80047b4:	e021      	b.n	80047fa <HAL_ADC_Stop+0x5a>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80047be:	2103      	movs	r1, #3
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f001 f987 	bl	8005ad4 <ADC_ConversionStop>
 80047c6:	4603      	mov	r3, r0
 80047c8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80047ca:	7bfb      	ldrb	r3, [r7, #15]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d10f      	bne.n	80047f0 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f001 fac5 	bl	8005d60 <ADC_Disable>
 80047d6:	4603      	mov	r3, r0
 80047d8:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80047da:	7bfb      	ldrb	r3, [r7, #15]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d107      	bne.n	80047f0 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80047e4:	4b07      	ldr	r3, [pc, #28]	@ (8004804 <HAL_ADC_Stop+0x64>)
 80047e6:	4013      	ands	r3, r2
 80047e8:	f043 0201 	orr.w	r2, r3, #1
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80047f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	ffffeefe 	.word	0xffffeefe

08004808 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b088      	sub	sp, #32
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a72      	ldr	r2, [pc, #456]	@ (80049e0 <HAL_ADC_PollForConversion+0x1d8>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d004      	beq.n	8004826 <HAL_ADC_PollForConversion+0x1e>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a70      	ldr	r2, [pc, #448]	@ (80049e4 <HAL_ADC_PollForConversion+0x1dc>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d101      	bne.n	800482a <HAL_ADC_PollForConversion+0x22>
 8004826:	4b70      	ldr	r3, [pc, #448]	@ (80049e8 <HAL_ADC_PollForConversion+0x1e0>)
 8004828:	e000      	b.n	800482c <HAL_ADC_PollForConversion+0x24>
 800482a:	4b70      	ldr	r3, [pc, #448]	@ (80049ec <HAL_ADC_PollForConversion+0x1e4>)
 800482c:	4618      	mov	r0, r3
 800482e:	f7ff fbc9 	bl	8003fc4 <LL_ADC_GetMultimode>
 8004832:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	2b08      	cmp	r3, #8
 800483a:	d102      	bne.n	8004842 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800483c:	2308      	movs	r3, #8
 800483e:	61fb      	str	r3, [r7, #28]
 8004840:	e037      	b.n	80048b2 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d005      	beq.n	8004854 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	2b05      	cmp	r3, #5
 800484c:	d002      	beq.n	8004854 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	2b09      	cmp	r3, #9
 8004852:	d111      	bne.n	8004878 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b00      	cmp	r3, #0
 8004860:	d007      	beq.n	8004872 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004866:	f043 0220 	orr.w	r2, r3, #32
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e0b1      	b.n	80049d6 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004872:	2304      	movs	r3, #4
 8004874:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8004876:	e01c      	b.n	80048b2 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a58      	ldr	r2, [pc, #352]	@ (80049e0 <HAL_ADC_PollForConversion+0x1d8>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d004      	beq.n	800488c <HAL_ADC_PollForConversion+0x84>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a57      	ldr	r2, [pc, #348]	@ (80049e4 <HAL_ADC_PollForConversion+0x1dc>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d101      	bne.n	8004890 <HAL_ADC_PollForConversion+0x88>
 800488c:	4b56      	ldr	r3, [pc, #344]	@ (80049e8 <HAL_ADC_PollForConversion+0x1e0>)
 800488e:	e000      	b.n	8004892 <HAL_ADC_PollForConversion+0x8a>
 8004890:	4b56      	ldr	r3, [pc, #344]	@ (80049ec <HAL_ADC_PollForConversion+0x1e4>)
 8004892:	4618      	mov	r0, r3
 8004894:	f7ff fba4 	bl	8003fe0 <LL_ADC_GetMultiDMATransfer>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d007      	beq.n	80048ae <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048a2:	f043 0220 	orr.w	r2, r3, #32
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e093      	b.n	80049d6 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80048ae:	2304      	movs	r3, #4
 80048b0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80048b2:	f7ff f937 	bl	8003b24 <HAL_GetTick>
 80048b6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80048b8:	e021      	b.n	80048fe <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c0:	d01d      	beq.n	80048fe <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80048c2:	f7ff f92f 	bl	8003b24 <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d302      	bcc.n	80048d8 <HAL_ADC_PollForConversion+0xd0>
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d112      	bne.n	80048fe <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	4013      	ands	r3, r2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10b      	bne.n	80048fe <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048ea:	f043 0204 	orr.w	r2, r3, #4
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

          return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e06b      	b.n	80049d6 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	4013      	ands	r3, r2
 8004908:	2b00      	cmp	r3, #0
 800490a:	d0d6      	beq.n	80048ba <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004910:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4618      	mov	r0, r3
 800491e:	f7ff fa57 	bl	8003dd0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d01c      	beq.n	8004962 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	7e5b      	ldrb	r3, [r3, #25]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d118      	bne.n	8004962 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0308 	and.w	r3, r3, #8
 800493a:	2b08      	cmp	r3, #8
 800493c:	d111      	bne.n	8004962 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004942:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	661a      	str	r2, [r3, #96]	@ 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800494e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d105      	bne.n	8004962 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800495a:	f043 0201 	orr.w	r2, r3, #1
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a1f      	ldr	r2, [pc, #124]	@ (80049e4 <HAL_ADC_PollForConversion+0x1dc>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d002      	beq.n	8004972 <HAL_ADC_PollForConversion+0x16a>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	e000      	b.n	8004974 <HAL_ADC_PollForConversion+0x16c>
 8004972:	4b1b      	ldr	r3, [pc, #108]	@ (80049e0 <HAL_ADC_PollForConversion+0x1d8>)
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	6812      	ldr	r2, [r2, #0]
 8004978:	4293      	cmp	r3, r2
 800497a:	d008      	beq.n	800498e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d005      	beq.n	800498e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	2b05      	cmp	r3, #5
 8004986:	d002      	beq.n	800498e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	2b09      	cmp	r3, #9
 800498c:	d104      	bne.n	8004998 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	61bb      	str	r3, [r7, #24]
 8004996:	e00c      	b.n	80049b2 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a11      	ldr	r2, [pc, #68]	@ (80049e4 <HAL_ADC_PollForConversion+0x1dc>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d002      	beq.n	80049a8 <HAL_ADC_PollForConversion+0x1a0>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	e000      	b.n	80049aa <HAL_ADC_PollForConversion+0x1a2>
 80049a8:	4b0d      	ldr	r3, [pc, #52]	@ (80049e0 <HAL_ADC_PollForConversion+0x1d8>)
 80049aa:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	2b08      	cmp	r3, #8
 80049b6:	d104      	bne.n	80049c2 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2208      	movs	r2, #8
 80049be:	601a      	str	r2, [r3, #0]
 80049c0:	e008      	b.n	80049d4 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d103      	bne.n	80049d4 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	220c      	movs	r2, #12
 80049d2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3720      	adds	r7, #32
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	40022000 	.word	0x40022000
 80049e4:	40022100 	.word	0x40022100
 80049e8:	40022300 	.word	0x40022300
 80049ec:	58026300 	.word	0x58026300

080049f0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b086      	sub	sp, #24
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a60      	ldr	r2, [pc, #384]	@ (8004b84 <HAL_ADC_Start_DMA+0x194>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d004      	beq.n	8004a10 <HAL_ADC_Start_DMA+0x20>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a5f      	ldr	r2, [pc, #380]	@ (8004b88 <HAL_ADC_Start_DMA+0x198>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d101      	bne.n	8004a14 <HAL_ADC_Start_DMA+0x24>
 8004a10:	4b5e      	ldr	r3, [pc, #376]	@ (8004b8c <HAL_ADC_Start_DMA+0x19c>)
 8004a12:	e000      	b.n	8004a16 <HAL_ADC_Start_DMA+0x26>
 8004a14:	4b5e      	ldr	r3, [pc, #376]	@ (8004b90 <HAL_ADC_Start_DMA+0x1a0>)
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7ff fad4 	bl	8003fc4 <LL_ADC_GetMultimode>
 8004a1c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7ff fbae 	bl	8004184 <LL_ADC_REG_IsConversionOngoing>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	f040 80a2 	bne.w	8004b74 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d101      	bne.n	8004a3e <HAL_ADC_Start_DMA+0x4e>
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	e09d      	b.n	8004b7a <HAL_ADC_Start_DMA+0x18a>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2201      	movs	r2, #1
 8004a42:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d006      	beq.n	8004a5a <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	2b05      	cmp	r3, #5
 8004a50:	d003      	beq.n	8004a5a <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	2b09      	cmp	r3, #9
 8004a56:	f040 8086 	bne.w	8004b66 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004a5a:	68f8      	ldr	r0, [r7, #12]
 8004a5c:	f001 f8f6 	bl	8005c4c <ADC_Enable>
 8004a60:	4603      	mov	r3, r0
 8004a62:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004a64:	7dfb      	ldrb	r3, [r7, #23]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d178      	bne.n	8004b5c <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004a6e:	4b49      	ldr	r3, [pc, #292]	@ (8004b94 <HAL_ADC_Start_DMA+0x1a4>)
 8004a70:	4013      	ands	r3, r2
 8004a72:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a42      	ldr	r2, [pc, #264]	@ (8004b88 <HAL_ADC_Start_DMA+0x198>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d002      	beq.n	8004a8a <HAL_ADC_Start_DMA+0x9a>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	e000      	b.n	8004a8c <HAL_ADC_Start_DMA+0x9c>
 8004a8a:	4b3e      	ldr	r3, [pc, #248]	@ (8004b84 <HAL_ADC_Start_DMA+0x194>)
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	6812      	ldr	r2, [r2, #0]
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d002      	beq.n	8004a9a <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d105      	bne.n	8004aa6 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a9e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aaa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d006      	beq.n	8004ac0 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ab6:	f023 0206 	bic.w	r2, r3, #6
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	665a      	str	r2, [r3, #100]	@ 0x64
 8004abe:	e002      	b.n	8004ac6 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aca:	4a33      	ldr	r2, [pc, #204]	@ (8004b98 <HAL_ADC_Start_DMA+0x1a8>)
 8004acc:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ad2:	4a32      	ldr	r2, [pc, #200]	@ (8004b9c <HAL_ADC_Start_DMA+0x1ac>)
 8004ad4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ada:	4a31      	ldr	r2, [pc, #196]	@ (8004ba0 <HAL_ADC_Start_DMA+0x1b0>)
 8004adc:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	221c      	movs	r2, #28
 8004ae4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f042 0210 	orr.w	r2, r2, #16
 8004afc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a28      	ldr	r2, [pc, #160]	@ (8004ba4 <HAL_ADC_Start_DMA+0x1b4>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d10f      	bne.n	8004b28 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004b12:	005b      	lsls	r3, r3, #1
 8004b14:	4619      	mov	r1, r3
 8004b16:	4610      	mov	r0, r2
 8004b18:	f7ff f9bc 	bl	8003e94 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7ff f9a7 	bl	8003e74 <LL_ADC_EnableDMAReq>
 8004b26:	e007      	b.n	8004b38 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b30:	4619      	mov	r1, r3
 8004b32:	4610      	mov	r0, r2
 8004b34:	f7ff f98b 	bl	8003e4e <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	3340      	adds	r3, #64	@ 0x40
 8004b42:	4619      	mov	r1, r3
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f002 f88e 	bl	8006c68 <HAL_DMA_Start_IT>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7ff faed 	bl	8004134 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004b5a:	e00d      	b.n	8004b78 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 8004b64:	e008      	b.n	8004b78 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8004b72:	e001      	b.n	8004b78 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004b74:	2302      	movs	r3, #2
 8004b76:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004b78:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3718      	adds	r7, #24
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	40022000 	.word	0x40022000
 8004b88:	40022100 	.word	0x40022100
 8004b8c:	40022300 	.word	0x40022300
 8004b90:	58026300 	.word	0x58026300
 8004b94:	fffff0fe 	.word	0xfffff0fe
 8004b98:	08005e1f 	.word	0x08005e1f
 8004b9c:	08005ef7 	.word	0x08005ef7
 8004ba0:	08005f13 	.word	0x08005f13
 8004ba4:	58026000 	.word	0x58026000

08004ba8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
	...

08004bc4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b08a      	sub	sp, #40	@ 0x28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004bcc:	2300      	movs	r3, #0
 8004bce:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a87      	ldr	r2, [pc, #540]	@ (8004e04 <HAL_ADC_IRQHandler+0x240>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d004      	beq.n	8004bf4 <HAL_ADC_IRQHandler+0x30>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a86      	ldr	r2, [pc, #536]	@ (8004e08 <HAL_ADC_IRQHandler+0x244>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d101      	bne.n	8004bf8 <HAL_ADC_IRQHandler+0x34>
 8004bf4:	4b85      	ldr	r3, [pc, #532]	@ (8004e0c <HAL_ADC_IRQHandler+0x248>)
 8004bf6:	e000      	b.n	8004bfa <HAL_ADC_IRQHandler+0x36>
 8004bf8:	4b85      	ldr	r3, [pc, #532]	@ (8004e10 <HAL_ADC_IRQHandler+0x24c>)
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7ff f9e2 	bl	8003fc4 <LL_ADC_GetMultimode>
 8004c00:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d017      	beq.n	8004c3c <HAL_ADC_IRQHandler+0x78>
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d012      	beq.n	8004c3c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c1a:	f003 0310 	and.w	r3, r3, #16
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d105      	bne.n	8004c2e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c26:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f001 fac6 	bl	80061c0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2202      	movs	r2, #2
 8004c3a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	f003 0304 	and.w	r3, r3, #4
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d004      	beq.n	8004c50 <HAL_ADC_IRQHandler+0x8c>
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	f003 0304 	and.w	r3, r3, #4
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d10a      	bne.n	8004c66 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f000 8083 	beq.w	8004d62 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	f003 0308 	and.w	r3, r3, #8
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d07d      	beq.n	8004d62 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c6a:	f003 0310 	and.w	r3, r3, #16
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d105      	bne.n	8004c7e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c76:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7ff f8a4 	bl	8003dd0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d062      	beq.n	8004d54 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a5d      	ldr	r2, [pc, #372]	@ (8004e08 <HAL_ADC_IRQHandler+0x244>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d002      	beq.n	8004c9e <HAL_ADC_IRQHandler+0xda>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	e000      	b.n	8004ca0 <HAL_ADC_IRQHandler+0xdc>
 8004c9e:	4b59      	ldr	r3, [pc, #356]	@ (8004e04 <HAL_ADC_IRQHandler+0x240>)
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	6812      	ldr	r2, [r2, #0]
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d008      	beq.n	8004cba <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d005      	beq.n	8004cba <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	2b05      	cmp	r3, #5
 8004cb2:	d002      	beq.n	8004cba <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	2b09      	cmp	r3, #9
 8004cb8:	d104      	bne.n	8004cc4 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	623b      	str	r3, [r7, #32]
 8004cc2:	e00c      	b.n	8004cde <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a4f      	ldr	r2, [pc, #316]	@ (8004e08 <HAL_ADC_IRQHandler+0x244>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d002      	beq.n	8004cd4 <HAL_ADC_IRQHandler+0x110>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	e000      	b.n	8004cd6 <HAL_ADC_IRQHandler+0x112>
 8004cd4:	4b4b      	ldr	r3, [pc, #300]	@ (8004e04 <HAL_ADC_IRQHandler+0x240>)
 8004cd6:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004cde:	6a3b      	ldr	r3, [r7, #32]
 8004ce0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d135      	bne.n	8004d54 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0308 	and.w	r3, r3, #8
 8004cf2:	2b08      	cmp	r3, #8
 8004cf4:	d12e      	bne.n	8004d54 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7ff fa42 	bl	8004184 <LL_ADC_REG_IsConversionOngoing>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d11a      	bne.n	8004d3c <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	685a      	ldr	r2, [r3, #4]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f022 020c 	bic.w	r2, r2, #12
 8004d14:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d1a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d112      	bne.n	8004d54 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d32:	f043 0201 	orr.w	r2, r3, #1
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	661a      	str	r2, [r3, #96]	@ 0x60
 8004d3a:	e00b      	b.n	8004d54 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d40:	f043 0210 	orr.w	r2, r3, #16
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d4c:	f043 0201 	orr.w	r2, r3, #1
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f7fc fecb 	bl	8001af0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	220c      	movs	r2, #12
 8004d60:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	f003 0320 	and.w	r3, r3, #32
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d004      	beq.n	8004d76 <HAL_ADC_IRQHandler+0x1b2>
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	f003 0320 	and.w	r3, r3, #32
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10b      	bne.n	8004d8e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f000 80a0 	beq.w	8004ec2 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f000 809a 	beq.w	8004ec2 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d92:	f003 0310 	and.w	r3, r3, #16
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d105      	bne.n	8004da6 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d9e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7ff f88c 	bl	8003ec8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004db0:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7ff f80a 	bl	8003dd0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004dbc:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a11      	ldr	r2, [pc, #68]	@ (8004e08 <HAL_ADC_IRQHandler+0x244>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d002      	beq.n	8004dce <HAL_ADC_IRQHandler+0x20a>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	e000      	b.n	8004dd0 <HAL_ADC_IRQHandler+0x20c>
 8004dce:	4b0d      	ldr	r3, [pc, #52]	@ (8004e04 <HAL_ADC_IRQHandler+0x240>)
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	6812      	ldr	r2, [r2, #0]
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d008      	beq.n	8004dea <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d005      	beq.n	8004dea <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	2b06      	cmp	r3, #6
 8004de2:	d002      	beq.n	8004dea <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	2b07      	cmp	r3, #7
 8004de8:	d104      	bne.n	8004df4 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	623b      	str	r3, [r7, #32]
 8004df2:	e014      	b.n	8004e1e <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a03      	ldr	r2, [pc, #12]	@ (8004e08 <HAL_ADC_IRQHandler+0x244>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d00a      	beq.n	8004e14 <HAL_ADC_IRQHandler+0x250>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	e008      	b.n	8004e16 <HAL_ADC_IRQHandler+0x252>
 8004e04:	40022000 	.word	0x40022000
 8004e08:	40022100 	.word	0x40022100
 8004e0c:	40022300 	.word	0x40022300
 8004e10:	58026300 	.word	0x58026300
 8004e14:	4b84      	ldr	r3, [pc, #528]	@ (8005028 <HAL_ADC_IRQHandler+0x464>)
 8004e16:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d047      	beq.n	8004eb4 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004e24:	6a3b      	ldr	r3, [r7, #32]
 8004e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d007      	beq.n	8004e3e <HAL_ADC_IRQHandler+0x27a>
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d03f      	beq.n	8004eb4 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004e34:	6a3b      	ldr	r3, [r7, #32]
 8004e36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d13a      	bne.n	8004eb4 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e48:	2b40      	cmp	r3, #64	@ 0x40
 8004e4a:	d133      	bne.n	8004eb4 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
 8004e4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d12e      	bne.n	8004eb4 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7ff f9ba 	bl	80041d4 <LL_ADC_INJ_IsConversionOngoing>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d11a      	bne.n	8004e9c <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	685a      	ldr	r2, [r3, #4]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004e74:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e7a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d112      	bne.n	8004eb4 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e92:	f043 0201 	orr.w	r2, r3, #1
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	661a      	str	r2, [r3, #96]	@ 0x60
 8004e9a:	e00b      	b.n	8004eb4 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ea0:	f043 0210 	orr.w	r2, r3, #16
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004eac:	f043 0201 	orr.w	r2, r3, #1
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f001 f95b 	bl	8006170 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2260      	movs	r2, #96	@ 0x60
 8004ec0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d011      	beq.n	8004ef0 <HAL_ADC_IRQHandler+0x32c>
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00c      	beq.n	8004ef0 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004eda:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 f8b2 	bl	800504c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2280      	movs	r2, #128	@ 0x80
 8004eee:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d012      	beq.n	8004f20 <HAL_ADC_IRQHandler+0x35c>
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00d      	beq.n	8004f20 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f08:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f001 f941 	bl	8006198 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004f1e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d012      	beq.n	8004f50 <HAL_ADC_IRQHandler+0x38c>
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00d      	beq.n	8004f50 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f38:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f001 f933 	bl	80061ac <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f4e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	f003 0310 	and.w	r3, r3, #16
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d043      	beq.n	8004fe2 <HAL_ADC_IRQHandler+0x41e>
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	f003 0310 	and.w	r3, r3, #16
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d03e      	beq.n	8004fe2 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d102      	bne.n	8004f72 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f70:	e021      	b.n	8004fb6 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d015      	beq.n	8004fa4 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a2a      	ldr	r2, [pc, #168]	@ (8005028 <HAL_ADC_IRQHandler+0x464>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d004      	beq.n	8004f8c <HAL_ADC_IRQHandler+0x3c8>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a29      	ldr	r2, [pc, #164]	@ (800502c <HAL_ADC_IRQHandler+0x468>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d101      	bne.n	8004f90 <HAL_ADC_IRQHandler+0x3cc>
 8004f8c:	4b28      	ldr	r3, [pc, #160]	@ (8005030 <HAL_ADC_IRQHandler+0x46c>)
 8004f8e:	e000      	b.n	8004f92 <HAL_ADC_IRQHandler+0x3ce>
 8004f90:	4b28      	ldr	r3, [pc, #160]	@ (8005034 <HAL_ADC_IRQHandler+0x470>)
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7ff f824 	bl	8003fe0 <LL_ADC_GetMultiDMATransfer>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00b      	beq.n	8004fb6 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fa2:	e008      	b.n	8004fb6 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	f003 0303 	and.w	r3, r3, #3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d001      	beq.n	8004fb6 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d10e      	bne.n	8004fda <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fc0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fcc:	f043 0202 	orr.w	r2, r3, #2
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 f843 	bl	8005060 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2210      	movs	r2, #16
 8004fe0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d018      	beq.n	800501e <HAL_ADC_IRQHandler+0x45a>
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d013      	beq.n	800501e <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ffa:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005006:	f043 0208 	orr.w	r2, r3, #8
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005016:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f001 f8b3 	bl	8006184 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800501e:	bf00      	nop
 8005020:	3728      	adds	r7, #40	@ 0x28
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	40022000 	.word	0x40022000
 800502c:	40022100 	.word	0x40022100
 8005030:	40022300 	.word	0x40022300
 8005034:	58026300 	.word	0x58026300

08005038 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005074:	b590      	push	{r4, r7, lr}
 8005076:	b0b9      	sub	sp, #228	@ 0xe4
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800507e:	2300      	movs	r3, #0
 8005080:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005084:	2300      	movs	r3, #0
 8005086:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800508e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	4aab      	ldr	r2, [pc, #684]	@ (8005344 <HAL_ADC_ConfigChannel+0x2d0>)
 8005096:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d102      	bne.n	80050a8 <HAL_ADC_ConfigChannel+0x34>
 80050a2:	2302      	movs	r3, #2
 80050a4:	f000 bcfe 	b.w	8005aa4 <HAL_ADC_ConfigChannel+0xa30>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7ff f865 	bl	8004184 <LL_ADC_REG_IsConversionOngoing>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f040 84e2 	bne.w	8005a86 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	db38      	blt.n	800513c <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a9e      	ldr	r2, [pc, #632]	@ (8005348 <HAL_ADC_ConfigChannel+0x2d4>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d033      	beq.n	800513c <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d108      	bne.n	80050f2 <HAL_ADC_ConfigChannel+0x7e>
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	0e9b      	lsrs	r3, r3, #26
 80050e6:	f003 031f 	and.w	r3, r3, #31
 80050ea:	2201      	movs	r2, #1
 80050ec:	fa02 f303 	lsl.w	r3, r2, r3
 80050f0:	e01d      	b.n	800512e <HAL_ADC_ConfigChannel+0xba>
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80050fe:	fa93 f3a3 	rbit	r3, r3
 8005102:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005106:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800510a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800510e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005112:	2b00      	cmp	r3, #0
 8005114:	d101      	bne.n	800511a <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8005116:	2320      	movs	r3, #32
 8005118:	e004      	b.n	8005124 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 800511a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800511e:	fab3 f383 	clz	r3, r3
 8005122:	b2db      	uxtb	r3, r3
 8005124:	f003 031f 	and.w	r3, r3, #31
 8005128:	2201      	movs	r2, #1
 800512a:	fa02 f303 	lsl.w	r3, r2, r3
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	6812      	ldr	r2, [r2, #0]
 8005132:	69d1      	ldr	r1, [r2, #28]
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	6812      	ldr	r2, [r2, #0]
 8005138:	430b      	orrs	r3, r1
 800513a:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6818      	ldr	r0, [r3, #0]
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	6859      	ldr	r1, [r3, #4]
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	461a      	mov	r2, r3
 800514a:	f7fe fe54 	bl	8003df6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4618      	mov	r0, r3
 8005154:	f7ff f816 	bl	8004184 <LL_ADC_REG_IsConversionOngoing>
 8005158:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4618      	mov	r0, r3
 8005162:	f7ff f837 	bl	80041d4 <LL_ADC_INJ_IsConversionOngoing>
 8005166:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800516a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800516e:	2b00      	cmp	r3, #0
 8005170:	f040 8270 	bne.w	8005654 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005174:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005178:	2b00      	cmp	r3, #0
 800517a:	f040 826b 	bne.w	8005654 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6818      	ldr	r0, [r3, #0]
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	6819      	ldr	r1, [r3, #0]
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	461a      	mov	r2, r3
 800518c:	f7fe feaf 	bl	8003eee <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a6c      	ldr	r2, [pc, #432]	@ (8005348 <HAL_ADC_ConfigChannel+0x2d4>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d10d      	bne.n	80051b6 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	695a      	ldr	r2, [r3, #20]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	08db      	lsrs	r3, r3, #3
 80051a6:	f003 0303 	and.w	r3, r3, #3
 80051aa:	005b      	lsls	r3, r3, #1
 80051ac:	fa02 f303 	lsl.w	r3, r2, r3
 80051b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80051b4:	e032      	b.n	800521c <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80051b6:	4b65      	ldr	r3, [pc, #404]	@ (800534c <HAL_ADC_ConfigChannel+0x2d8>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80051be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80051c2:	d10b      	bne.n	80051dc <HAL_ADC_ConfigChannel+0x168>
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	695a      	ldr	r2, [r3, #20]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	089b      	lsrs	r3, r3, #2
 80051d0:	f003 0307 	and.w	r3, r3, #7
 80051d4:	005b      	lsls	r3, r3, #1
 80051d6:	fa02 f303 	lsl.w	r3, r2, r3
 80051da:	e01d      	b.n	8005218 <HAL_ADC_ConfigChannel+0x1a4>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	f003 0310 	and.w	r3, r3, #16
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10b      	bne.n	8005202 <HAL_ADC_ConfigChannel+0x18e>
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	695a      	ldr	r2, [r3, #20]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	089b      	lsrs	r3, r3, #2
 80051f6:	f003 0307 	and.w	r3, r3, #7
 80051fa:	005b      	lsls	r3, r3, #1
 80051fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005200:	e00a      	b.n	8005218 <HAL_ADC_ConfigChannel+0x1a4>
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	695a      	ldr	r2, [r3, #20]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	089b      	lsrs	r3, r3, #2
 800520e:	f003 0304 	and.w	r3, r3, #4
 8005212:	005b      	lsls	r3, r3, #1
 8005214:	fa02 f303 	lsl.w	r3, r2, r3
 8005218:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	2b04      	cmp	r3, #4
 8005222:	d048      	beq.n	80052b6 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6818      	ldr	r0, [r3, #0]
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	6919      	ldr	r1, [r3, #16]
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005234:	f7fe fcda 	bl	8003bec <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a42      	ldr	r2, [pc, #264]	@ (8005348 <HAL_ADC_ConfigChannel+0x2d4>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d119      	bne.n	8005276 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6818      	ldr	r0, [r3, #0]
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	6919      	ldr	r1, [r3, #16]
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	69db      	ldr	r3, [r3, #28]
 800524e:	461a      	mov	r2, r3
 8005250:	f7fe fd72 	bl	8003d38 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6818      	ldr	r0, [r3, #0]
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	6919      	ldr	r1, [r3, #16]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005262:	2b01      	cmp	r3, #1
 8005264:	d102      	bne.n	800526c <HAL_ADC_ConfigChannel+0x1f8>
 8005266:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800526a:	e000      	b.n	800526e <HAL_ADC_ConfigChannel+0x1fa>
 800526c:	2300      	movs	r3, #0
 800526e:	461a      	mov	r2, r3
 8005270:	f7fe fd40 	bl	8003cf4 <LL_ADC_SetOffsetSaturation>
 8005274:	e1ee      	b.n	8005654 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6818      	ldr	r0, [r3, #0]
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	6919      	ldr	r1, [r3, #16]
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005284:	2b01      	cmp	r3, #1
 8005286:	d102      	bne.n	800528e <HAL_ADC_ConfigChannel+0x21a>
 8005288:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800528c:	e000      	b.n	8005290 <HAL_ADC_ConfigChannel+0x21c>
 800528e:	2300      	movs	r3, #0
 8005290:	461a      	mov	r2, r3
 8005292:	f7fe fd0d 	bl	8003cb0 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6818      	ldr	r0, [r3, #0]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	6919      	ldr	r1, [r3, #16]
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	7e1b      	ldrb	r3, [r3, #24]
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d102      	bne.n	80052ac <HAL_ADC_ConfigChannel+0x238>
 80052a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80052aa:	e000      	b.n	80052ae <HAL_ADC_ConfigChannel+0x23a>
 80052ac:	2300      	movs	r3, #0
 80052ae:	461a      	mov	r2, r3
 80052b0:	f7fe fce4 	bl	8003c7c <LL_ADC_SetDataRightShift>
 80052b4:	e1ce      	b.n	8005654 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a23      	ldr	r2, [pc, #140]	@ (8005348 <HAL_ADC_ConfigChannel+0x2d4>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	f040 8181 	bne.w	80055c4 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2100      	movs	r1, #0
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7fe fcc1 	bl	8003c50 <LL_ADC_GetOffsetChannel>
 80052ce:	4603      	mov	r3, r0
 80052d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d10a      	bne.n	80052ee <HAL_ADC_ConfigChannel+0x27a>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2100      	movs	r1, #0
 80052de:	4618      	mov	r0, r3
 80052e0:	f7fe fcb6 	bl	8003c50 <LL_ADC_GetOffsetChannel>
 80052e4:	4603      	mov	r3, r0
 80052e6:	0e9b      	lsrs	r3, r3, #26
 80052e8:	f003 021f 	and.w	r2, r3, #31
 80052ec:	e01e      	b.n	800532c <HAL_ADC_ConfigChannel+0x2b8>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2100      	movs	r1, #0
 80052f4:	4618      	mov	r0, r3
 80052f6:	f7fe fcab 	bl	8003c50 <LL_ADC_GetOffsetChannel>
 80052fa:	4603      	mov	r3, r0
 80052fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005300:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005304:	fa93 f3a3 	rbit	r3, r3
 8005308:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 800530c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005310:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  if (value == 0U)
 8005314:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005318:	2b00      	cmp	r3, #0
 800531a:	d101      	bne.n	8005320 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 800531c:	2320      	movs	r3, #32
 800531e:	e004      	b.n	800532a <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8005320:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005324:	fab3 f383 	clz	r3, r3
 8005328:	b2db      	uxtb	r3, r3
 800532a:	461a      	mov	r2, r3
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005334:	2b00      	cmp	r3, #0
 8005336:	d10b      	bne.n	8005350 <HAL_ADC_ConfigChannel+0x2dc>
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	0e9b      	lsrs	r3, r3, #26
 800533e:	f003 031f 	and.w	r3, r3, #31
 8005342:	e01e      	b.n	8005382 <HAL_ADC_ConfigChannel+0x30e>
 8005344:	47ff0000 	.word	0x47ff0000
 8005348:	58026000 	.word	0x58026000
 800534c:	5c001000 	.word	0x5c001000
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005358:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800535c:	fa93 f3a3 	rbit	r3, r3
 8005360:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8005364:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005368:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800536c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d101      	bne.n	8005378 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8005374:	2320      	movs	r3, #32
 8005376:	e004      	b.n	8005382 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8005378:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800537c:	fab3 f383 	clz	r3, r3
 8005380:	b2db      	uxtb	r3, r3
 8005382:	429a      	cmp	r2, r3
 8005384:	d106      	bne.n	8005394 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2200      	movs	r2, #0
 800538c:	2100      	movs	r1, #0
 800538e:	4618      	mov	r0, r3
 8005390:	f7fe fcf4 	bl	8003d7c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2101      	movs	r1, #1
 800539a:	4618      	mov	r0, r3
 800539c:	f7fe fc58 	bl	8003c50 <LL_ADC_GetOffsetChannel>
 80053a0:	4603      	mov	r3, r0
 80053a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10a      	bne.n	80053c0 <HAL_ADC_ConfigChannel+0x34c>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2101      	movs	r1, #1
 80053b0:	4618      	mov	r0, r3
 80053b2:	f7fe fc4d 	bl	8003c50 <LL_ADC_GetOffsetChannel>
 80053b6:	4603      	mov	r3, r0
 80053b8:	0e9b      	lsrs	r3, r3, #26
 80053ba:	f003 021f 	and.w	r2, r3, #31
 80053be:	e01e      	b.n	80053fe <HAL_ADC_ConfigChannel+0x38a>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2101      	movs	r1, #1
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7fe fc42 	bl	8003c50 <LL_ADC_GetOffsetChannel>
 80053cc:	4603      	mov	r3, r0
 80053ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80053d6:	fa93 f3a3 	rbit	r3, r3
 80053da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80053de:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80053e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80053e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 80053ee:	2320      	movs	r3, #32
 80053f0:	e004      	b.n	80053fc <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 80053f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80053f6:	fab3 f383 	clz	r3, r3
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	461a      	mov	r2, r3
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005406:	2b00      	cmp	r3, #0
 8005408:	d105      	bne.n	8005416 <HAL_ADC_ConfigChannel+0x3a2>
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	0e9b      	lsrs	r3, r3, #26
 8005410:	f003 031f 	and.w	r3, r3, #31
 8005414:	e018      	b.n	8005448 <HAL_ADC_ConfigChannel+0x3d4>
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800541e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005422:	fa93 f3a3 	rbit	r3, r3
 8005426:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800542a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800542e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8005432:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005436:	2b00      	cmp	r3, #0
 8005438:	d101      	bne.n	800543e <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 800543a:	2320      	movs	r3, #32
 800543c:	e004      	b.n	8005448 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 800543e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005442:	fab3 f383 	clz	r3, r3
 8005446:	b2db      	uxtb	r3, r3
 8005448:	429a      	cmp	r2, r3
 800544a:	d106      	bne.n	800545a <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2200      	movs	r2, #0
 8005452:	2101      	movs	r1, #1
 8005454:	4618      	mov	r0, r3
 8005456:	f7fe fc91 	bl	8003d7c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2102      	movs	r1, #2
 8005460:	4618      	mov	r0, r3
 8005462:	f7fe fbf5 	bl	8003c50 <LL_ADC_GetOffsetChannel>
 8005466:	4603      	mov	r3, r0
 8005468:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800546c:	2b00      	cmp	r3, #0
 800546e:	d10a      	bne.n	8005486 <HAL_ADC_ConfigChannel+0x412>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2102      	movs	r1, #2
 8005476:	4618      	mov	r0, r3
 8005478:	f7fe fbea 	bl	8003c50 <LL_ADC_GetOffsetChannel>
 800547c:	4603      	mov	r3, r0
 800547e:	0e9b      	lsrs	r3, r3, #26
 8005480:	f003 021f 	and.w	r2, r3, #31
 8005484:	e01e      	b.n	80054c4 <HAL_ADC_ConfigChannel+0x450>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2102      	movs	r1, #2
 800548c:	4618      	mov	r0, r3
 800548e:	f7fe fbdf 	bl	8003c50 <LL_ADC_GetOffsetChannel>
 8005492:	4603      	mov	r3, r0
 8005494:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005498:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800549c:	fa93 f3a3 	rbit	r3, r3
 80054a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80054a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80054a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80054ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d101      	bne.n	80054b8 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 80054b4:	2320      	movs	r3, #32
 80054b6:	e004      	b.n	80054c2 <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 80054b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054bc:	fab3 f383 	clz	r3, r3
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	461a      	mov	r2, r3
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d105      	bne.n	80054dc <HAL_ADC_ConfigChannel+0x468>
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	0e9b      	lsrs	r3, r3, #26
 80054d6:	f003 031f 	and.w	r3, r3, #31
 80054da:	e014      	b.n	8005506 <HAL_ADC_ConfigChannel+0x492>
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80054e4:	fa93 f3a3 	rbit	r3, r3
 80054e8:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80054ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80054ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80054f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d101      	bne.n	80054fc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80054f8:	2320      	movs	r3, #32
 80054fa:	e004      	b.n	8005506 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80054fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005500:	fab3 f383 	clz	r3, r3
 8005504:	b2db      	uxtb	r3, r3
 8005506:	429a      	cmp	r2, r3
 8005508:	d106      	bne.n	8005518 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2200      	movs	r2, #0
 8005510:	2102      	movs	r1, #2
 8005512:	4618      	mov	r0, r3
 8005514:	f7fe fc32 	bl	8003d7c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2103      	movs	r1, #3
 800551e:	4618      	mov	r0, r3
 8005520:	f7fe fb96 	bl	8003c50 <LL_ADC_GetOffsetChannel>
 8005524:	4603      	mov	r3, r0
 8005526:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800552a:	2b00      	cmp	r3, #0
 800552c:	d10a      	bne.n	8005544 <HAL_ADC_ConfigChannel+0x4d0>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2103      	movs	r1, #3
 8005534:	4618      	mov	r0, r3
 8005536:	f7fe fb8b 	bl	8003c50 <LL_ADC_GetOffsetChannel>
 800553a:	4603      	mov	r3, r0
 800553c:	0e9b      	lsrs	r3, r3, #26
 800553e:	f003 021f 	and.w	r2, r3, #31
 8005542:	e017      	b.n	8005574 <HAL_ADC_ConfigChannel+0x500>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2103      	movs	r1, #3
 800554a:	4618      	mov	r0, r3
 800554c:	f7fe fb80 	bl	8003c50 <LL_ADC_GetOffsetChannel>
 8005550:	4603      	mov	r3, r0
 8005552:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005554:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005556:	fa93 f3a3 	rbit	r3, r3
 800555a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800555c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800555e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8005560:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005562:	2b00      	cmp	r3, #0
 8005564:	d101      	bne.n	800556a <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8005566:	2320      	movs	r3, #32
 8005568:	e003      	b.n	8005572 <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 800556a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800556c:	fab3 f383 	clz	r3, r3
 8005570:	b2db      	uxtb	r3, r3
 8005572:	461a      	mov	r2, r3
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800557c:	2b00      	cmp	r3, #0
 800557e:	d105      	bne.n	800558c <HAL_ADC_ConfigChannel+0x518>
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	0e9b      	lsrs	r3, r3, #26
 8005586:	f003 031f 	and.w	r3, r3, #31
 800558a:	e011      	b.n	80055b0 <HAL_ADC_ConfigChannel+0x53c>
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005592:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005594:	fa93 f3a3 	rbit	r3, r3
 8005598:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800559a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800559c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800559e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d101      	bne.n	80055a8 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 80055a4:	2320      	movs	r3, #32
 80055a6:	e003      	b.n	80055b0 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 80055a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80055aa:	fab3 f383 	clz	r3, r3
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d14f      	bne.n	8005654 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2200      	movs	r2, #0
 80055ba:	2103      	movs	r1, #3
 80055bc:	4618      	mov	r0, r3
 80055be:	f7fe fbdd 	bl	8003d7c <LL_ADC_SetOffsetState>
 80055c2:	e047      	b.n	8005654 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	069b      	lsls	r3, r3, #26
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d107      	bne.n	80055e8 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80055e6:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	069b      	lsls	r3, r3, #26
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d107      	bne.n	800560c <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800560a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005612:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	069b      	lsls	r3, r3, #26
 800561c:	429a      	cmp	r2, r3
 800561e:	d107      	bne.n	8005630 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800562e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005636:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	069b      	lsls	r3, r3, #26
 8005640:	429a      	cmp	r2, r3
 8005642:	d107      	bne.n	8005654 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005652:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4618      	mov	r0, r3
 800565a:	f7fe fd45 	bl	80040e8 <LL_ADC_IsEnabled>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	f040 8219 	bne.w	8005a98 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6818      	ldr	r0, [r3, #0]
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	6819      	ldr	r1, [r3, #0]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	461a      	mov	r2, r3
 8005674:	f7fe fc66 	bl	8003f44 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	4aa1      	ldr	r2, [pc, #644]	@ (8005904 <HAL_ADC_ConfigChannel+0x890>)
 800567e:	4293      	cmp	r3, r2
 8005680:	f040 812e 	bne.w	80058e0 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005690:	2b00      	cmp	r3, #0
 8005692:	d10b      	bne.n	80056ac <HAL_ADC_ConfigChannel+0x638>
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	0e9b      	lsrs	r3, r3, #26
 800569a:	3301      	adds	r3, #1
 800569c:	f003 031f 	and.w	r3, r3, #31
 80056a0:	2b09      	cmp	r3, #9
 80056a2:	bf94      	ite	ls
 80056a4:	2301      	movls	r3, #1
 80056a6:	2300      	movhi	r3, #0
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	e019      	b.n	80056e0 <HAL_ADC_ConfigChannel+0x66c>
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80056b4:	fa93 f3a3 	rbit	r3, r3
 80056b8:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80056ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80056be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d101      	bne.n	80056c8 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80056c4:	2320      	movs	r3, #32
 80056c6:	e003      	b.n	80056d0 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80056c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056ca:	fab3 f383 	clz	r3, r3
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	3301      	adds	r3, #1
 80056d2:	f003 031f 	and.w	r3, r3, #31
 80056d6:	2b09      	cmp	r3, #9
 80056d8:	bf94      	ite	ls
 80056da:	2301      	movls	r3, #1
 80056dc:	2300      	movhi	r3, #0
 80056de:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d079      	beq.n	80057d8 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d107      	bne.n	8005700 <HAL_ADC_ConfigChannel+0x68c>
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	0e9b      	lsrs	r3, r3, #26
 80056f6:	3301      	adds	r3, #1
 80056f8:	069b      	lsls	r3, r3, #26
 80056fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80056fe:	e015      	b.n	800572c <HAL_ADC_ConfigChannel+0x6b8>
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005706:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005708:	fa93 f3a3 	rbit	r3, r3
 800570c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800570e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005710:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8005712:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005714:	2b00      	cmp	r3, #0
 8005716:	d101      	bne.n	800571c <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8005718:	2320      	movs	r3, #32
 800571a:	e003      	b.n	8005724 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 800571c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800571e:	fab3 f383 	clz	r3, r3
 8005722:	b2db      	uxtb	r3, r3
 8005724:	3301      	adds	r3, #1
 8005726:	069b      	lsls	r3, r3, #26
 8005728:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005734:	2b00      	cmp	r3, #0
 8005736:	d109      	bne.n	800574c <HAL_ADC_ConfigChannel+0x6d8>
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	0e9b      	lsrs	r3, r3, #26
 800573e:	3301      	adds	r3, #1
 8005740:	f003 031f 	and.w	r3, r3, #31
 8005744:	2101      	movs	r1, #1
 8005746:	fa01 f303 	lsl.w	r3, r1, r3
 800574a:	e017      	b.n	800577c <HAL_ADC_ConfigChannel+0x708>
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005752:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005754:	fa93 f3a3 	rbit	r3, r3
 8005758:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800575a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800575c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800575e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005760:	2b00      	cmp	r3, #0
 8005762:	d101      	bne.n	8005768 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8005764:	2320      	movs	r3, #32
 8005766:	e003      	b.n	8005770 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8005768:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800576a:	fab3 f383 	clz	r3, r3
 800576e:	b2db      	uxtb	r3, r3
 8005770:	3301      	adds	r3, #1
 8005772:	f003 031f 	and.w	r3, r3, #31
 8005776:	2101      	movs	r1, #1
 8005778:	fa01 f303 	lsl.w	r3, r1, r3
 800577c:	ea42 0103 	orr.w	r1, r2, r3
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005788:	2b00      	cmp	r3, #0
 800578a:	d10a      	bne.n	80057a2 <HAL_ADC_ConfigChannel+0x72e>
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	0e9b      	lsrs	r3, r3, #26
 8005792:	3301      	adds	r3, #1
 8005794:	f003 021f 	and.w	r2, r3, #31
 8005798:	4613      	mov	r3, r2
 800579a:	005b      	lsls	r3, r3, #1
 800579c:	4413      	add	r3, r2
 800579e:	051b      	lsls	r3, r3, #20
 80057a0:	e018      	b.n	80057d4 <HAL_ADC_ConfigChannel+0x760>
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057aa:	fa93 f3a3 	rbit	r3, r3
 80057ae:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80057b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80057b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d101      	bne.n	80057be <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 80057ba:	2320      	movs	r3, #32
 80057bc:	e003      	b.n	80057c6 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 80057be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057c0:	fab3 f383 	clz	r3, r3
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	3301      	adds	r3, #1
 80057c8:	f003 021f 	and.w	r2, r3, #31
 80057cc:	4613      	mov	r3, r2
 80057ce:	005b      	lsls	r3, r3, #1
 80057d0:	4413      	add	r3, r2
 80057d2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80057d4:	430b      	orrs	r3, r1
 80057d6:	e07e      	b.n	80058d6 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d107      	bne.n	80057f4 <HAL_ADC_ConfigChannel+0x780>
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	0e9b      	lsrs	r3, r3, #26
 80057ea:	3301      	adds	r3, #1
 80057ec:	069b      	lsls	r3, r3, #26
 80057ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80057f2:	e015      	b.n	8005820 <HAL_ADC_ConfigChannel+0x7ac>
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057fc:	fa93 f3a3 	rbit	r3, r3
 8005800:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8005802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005804:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8005806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005808:	2b00      	cmp	r3, #0
 800580a:	d101      	bne.n	8005810 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 800580c:	2320      	movs	r3, #32
 800580e:	e003      	b.n	8005818 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8005810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005812:	fab3 f383 	clz	r3, r3
 8005816:	b2db      	uxtb	r3, r3
 8005818:	3301      	adds	r3, #1
 800581a:	069b      	lsls	r3, r3, #26
 800581c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005828:	2b00      	cmp	r3, #0
 800582a:	d109      	bne.n	8005840 <HAL_ADC_ConfigChannel+0x7cc>
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	0e9b      	lsrs	r3, r3, #26
 8005832:	3301      	adds	r3, #1
 8005834:	f003 031f 	and.w	r3, r3, #31
 8005838:	2101      	movs	r1, #1
 800583a:	fa01 f303 	lsl.w	r3, r1, r3
 800583e:	e017      	b.n	8005870 <HAL_ADC_ConfigChannel+0x7fc>
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	fa93 f3a3 	rbit	r3, r3
 800584c:	61bb      	str	r3, [r7, #24]
  return result;
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005852:	6a3b      	ldr	r3, [r7, #32]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d101      	bne.n	800585c <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8005858:	2320      	movs	r3, #32
 800585a:	e003      	b.n	8005864 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 800585c:	6a3b      	ldr	r3, [r7, #32]
 800585e:	fab3 f383 	clz	r3, r3
 8005862:	b2db      	uxtb	r3, r3
 8005864:	3301      	adds	r3, #1
 8005866:	f003 031f 	and.w	r3, r3, #31
 800586a:	2101      	movs	r1, #1
 800586c:	fa01 f303 	lsl.w	r3, r1, r3
 8005870:	ea42 0103 	orr.w	r1, r2, r3
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800587c:	2b00      	cmp	r3, #0
 800587e:	d10d      	bne.n	800589c <HAL_ADC_ConfigChannel+0x828>
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	0e9b      	lsrs	r3, r3, #26
 8005886:	3301      	adds	r3, #1
 8005888:	f003 021f 	and.w	r2, r3, #31
 800588c:	4613      	mov	r3, r2
 800588e:	005b      	lsls	r3, r3, #1
 8005890:	4413      	add	r3, r2
 8005892:	3b1e      	subs	r3, #30
 8005894:	051b      	lsls	r3, r3, #20
 8005896:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800589a:	e01b      	b.n	80058d4 <HAL_ADC_ConfigChannel+0x860>
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	fa93 f3a3 	rbit	r3, r3
 80058a8:	60fb      	str	r3, [r7, #12]
  return result;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d101      	bne.n	80058b8 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 80058b4:	2320      	movs	r3, #32
 80058b6:	e003      	b.n	80058c0 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	fab3 f383 	clz	r3, r3
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	3301      	adds	r3, #1
 80058c2:	f003 021f 	and.w	r2, r3, #31
 80058c6:	4613      	mov	r3, r2
 80058c8:	005b      	lsls	r3, r3, #1
 80058ca:	4413      	add	r3, r2
 80058cc:	3b1e      	subs	r3, #30
 80058ce:	051b      	lsls	r3, r3, #20
 80058d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80058d4:	430b      	orrs	r3, r1
 80058d6:	683a      	ldr	r2, [r7, #0]
 80058d8:	6892      	ldr	r2, [r2, #8]
 80058da:	4619      	mov	r1, r3
 80058dc:	f7fe fb07 	bl	8003eee <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f280 80d7 	bge.w	8005a98 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a06      	ldr	r2, [pc, #24]	@ (8005908 <HAL_ADC_ConfigChannel+0x894>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d004      	beq.n	80058fe <HAL_ADC_ConfigChannel+0x88a>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a04      	ldr	r2, [pc, #16]	@ (800590c <HAL_ADC_ConfigChannel+0x898>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d10a      	bne.n	8005914 <HAL_ADC_ConfigChannel+0x8a0>
 80058fe:	4b04      	ldr	r3, [pc, #16]	@ (8005910 <HAL_ADC_ConfigChannel+0x89c>)
 8005900:	e009      	b.n	8005916 <HAL_ADC_ConfigChannel+0x8a2>
 8005902:	bf00      	nop
 8005904:	47ff0000 	.word	0x47ff0000
 8005908:	40022000 	.word	0x40022000
 800590c:	40022100 	.word	0x40022100
 8005910:	40022300 	.word	0x40022300
 8005914:	4b65      	ldr	r3, [pc, #404]	@ (8005aac <HAL_ADC_ConfigChannel+0xa38>)
 8005916:	4618      	mov	r0, r3
 8005918:	f7fe f95a 	bl	8003bd0 <LL_ADC_GetCommonPathInternalCh>
 800591c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a62      	ldr	r2, [pc, #392]	@ (8005ab0 <HAL_ADC_ConfigChannel+0xa3c>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d004      	beq.n	8005934 <HAL_ADC_ConfigChannel+0x8c0>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a61      	ldr	r2, [pc, #388]	@ (8005ab4 <HAL_ADC_ConfigChannel+0xa40>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d10e      	bne.n	8005952 <HAL_ADC_ConfigChannel+0x8de>
 8005934:	485e      	ldr	r0, [pc, #376]	@ (8005ab0 <HAL_ADC_ConfigChannel+0xa3c>)
 8005936:	f7fe fbd7 	bl	80040e8 <LL_ADC_IsEnabled>
 800593a:	4604      	mov	r4, r0
 800593c:	485d      	ldr	r0, [pc, #372]	@ (8005ab4 <HAL_ADC_ConfigChannel+0xa40>)
 800593e:	f7fe fbd3 	bl	80040e8 <LL_ADC_IsEnabled>
 8005942:	4603      	mov	r3, r0
 8005944:	4323      	orrs	r3, r4
 8005946:	2b00      	cmp	r3, #0
 8005948:	bf0c      	ite	eq
 800594a:	2301      	moveq	r3, #1
 800594c:	2300      	movne	r3, #0
 800594e:	b2db      	uxtb	r3, r3
 8005950:	e008      	b.n	8005964 <HAL_ADC_ConfigChannel+0x8f0>
 8005952:	4859      	ldr	r0, [pc, #356]	@ (8005ab8 <HAL_ADC_ConfigChannel+0xa44>)
 8005954:	f7fe fbc8 	bl	80040e8 <LL_ADC_IsEnabled>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	bf0c      	ite	eq
 800595e:	2301      	moveq	r3, #1
 8005960:	2300      	movne	r3, #0
 8005962:	b2db      	uxtb	r3, r3
 8005964:	2b00      	cmp	r3, #0
 8005966:	f000 8084 	beq.w	8005a72 <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a53      	ldr	r2, [pc, #332]	@ (8005abc <HAL_ADC_ConfigChannel+0xa48>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d132      	bne.n	80059da <HAL_ADC_ConfigChannel+0x966>
 8005974:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005978:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800597c:	2b00      	cmp	r3, #0
 800597e:	d12c      	bne.n	80059da <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a4c      	ldr	r2, [pc, #304]	@ (8005ab8 <HAL_ADC_ConfigChannel+0xa44>)
 8005986:	4293      	cmp	r3, r2
 8005988:	f040 8086 	bne.w	8005a98 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a47      	ldr	r2, [pc, #284]	@ (8005ab0 <HAL_ADC_ConfigChannel+0xa3c>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d004      	beq.n	80059a0 <HAL_ADC_ConfigChannel+0x92c>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a46      	ldr	r2, [pc, #280]	@ (8005ab4 <HAL_ADC_ConfigChannel+0xa40>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d101      	bne.n	80059a4 <HAL_ADC_ConfigChannel+0x930>
 80059a0:	4a47      	ldr	r2, [pc, #284]	@ (8005ac0 <HAL_ADC_ConfigChannel+0xa4c>)
 80059a2:	e000      	b.n	80059a6 <HAL_ADC_ConfigChannel+0x932>
 80059a4:	4a41      	ldr	r2, [pc, #260]	@ (8005aac <HAL_ADC_ConfigChannel+0xa38>)
 80059a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80059aa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80059ae:	4619      	mov	r1, r3
 80059b0:	4610      	mov	r0, r2
 80059b2:	f7fe f8fa 	bl	8003baa <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80059b6:	4b43      	ldr	r3, [pc, #268]	@ (8005ac4 <HAL_ADC_ConfigChannel+0xa50>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	099b      	lsrs	r3, r3, #6
 80059bc:	4a42      	ldr	r2, [pc, #264]	@ (8005ac8 <HAL_ADC_ConfigChannel+0xa54>)
 80059be:	fba2 2303 	umull	r2, r3, r2, r3
 80059c2:	099b      	lsrs	r3, r3, #6
 80059c4:	3301      	adds	r3, #1
 80059c6:	005b      	lsls	r3, r3, #1
 80059c8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80059ca:	e002      	b.n	80059d2 <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	3b01      	subs	r3, #1
 80059d0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1f9      	bne.n	80059cc <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80059d8:	e05e      	b.n	8005a98 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a3b      	ldr	r2, [pc, #236]	@ (8005acc <HAL_ADC_ConfigChannel+0xa58>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d120      	bne.n	8005a26 <HAL_ADC_ConfigChannel+0x9b2>
 80059e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80059e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d11a      	bne.n	8005a26 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a30      	ldr	r2, [pc, #192]	@ (8005ab8 <HAL_ADC_ConfigChannel+0xa44>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d14e      	bne.n	8005a98 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a2c      	ldr	r2, [pc, #176]	@ (8005ab0 <HAL_ADC_ConfigChannel+0xa3c>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d004      	beq.n	8005a0e <HAL_ADC_ConfigChannel+0x99a>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a2a      	ldr	r2, [pc, #168]	@ (8005ab4 <HAL_ADC_ConfigChannel+0xa40>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d101      	bne.n	8005a12 <HAL_ADC_ConfigChannel+0x99e>
 8005a0e:	4a2c      	ldr	r2, [pc, #176]	@ (8005ac0 <HAL_ADC_ConfigChannel+0xa4c>)
 8005a10:	e000      	b.n	8005a14 <HAL_ADC_ConfigChannel+0x9a0>
 8005a12:	4a26      	ldr	r2, [pc, #152]	@ (8005aac <HAL_ADC_ConfigChannel+0xa38>)
 8005a14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005a18:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	4610      	mov	r0, r2
 8005a20:	f7fe f8c3 	bl	8003baa <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005a24:	e038      	b.n	8005a98 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a29      	ldr	r2, [pc, #164]	@ (8005ad0 <HAL_ADC_ConfigChannel+0xa5c>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d133      	bne.n	8005a98 <HAL_ADC_ConfigChannel+0xa24>
 8005a30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005a34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d12d      	bne.n	8005a98 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a1d      	ldr	r2, [pc, #116]	@ (8005ab8 <HAL_ADC_ConfigChannel+0xa44>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d128      	bne.n	8005a98 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a19      	ldr	r2, [pc, #100]	@ (8005ab0 <HAL_ADC_ConfigChannel+0xa3c>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d004      	beq.n	8005a5a <HAL_ADC_ConfigChannel+0x9e6>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a17      	ldr	r2, [pc, #92]	@ (8005ab4 <HAL_ADC_ConfigChannel+0xa40>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d101      	bne.n	8005a5e <HAL_ADC_ConfigChannel+0x9ea>
 8005a5a:	4a19      	ldr	r2, [pc, #100]	@ (8005ac0 <HAL_ADC_ConfigChannel+0xa4c>)
 8005a5c:	e000      	b.n	8005a60 <HAL_ADC_ConfigChannel+0x9ec>
 8005a5e:	4a13      	ldr	r2, [pc, #76]	@ (8005aac <HAL_ADC_ConfigChannel+0xa38>)
 8005a60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005a64:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005a68:	4619      	mov	r1, r3
 8005a6a:	4610      	mov	r0, r2
 8005a6c:	f7fe f89d 	bl	8003baa <LL_ADC_SetCommonPathInternalCh>
 8005a70:	e012      	b.n	8005a98 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a76:	f043 0220 	orr.w	r2, r3, #32
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8005a84:	e008      	b.n	8005a98 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a8a:	f043 0220 	orr.w	r2, r3, #32
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005aa0:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	37e4      	adds	r7, #228	@ 0xe4
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd90      	pop	{r4, r7, pc}
 8005aac:	58026300 	.word	0x58026300
 8005ab0:	40022000 	.word	0x40022000
 8005ab4:	40022100 	.word	0x40022100
 8005ab8:	58026000 	.word	0x58026000
 8005abc:	c7520000 	.word	0xc7520000
 8005ac0:	40022300 	.word	0x40022300
 8005ac4:	24000024 	.word	0x24000024
 8005ac8:	053e2d63 	.word	0x053e2d63
 8005acc:	c3210000 	.word	0xc3210000
 8005ad0:	cb840000 	.word	0xcb840000

08005ad4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b088      	sub	sp, #32
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7fe fb4a 	bl	8004184 <LL_ADC_REG_IsConversionOngoing>
 8005af0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4618      	mov	r0, r3
 8005af8:	f7fe fb6c 	bl	80041d4 <LL_ADC_INJ_IsConversionOngoing>
 8005afc:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d103      	bne.n	8005b0c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f000 8098 	beq.w	8005c3c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d02a      	beq.n	8005b70 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	7e5b      	ldrb	r3, [r3, #25]
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d126      	bne.n	8005b70 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	7e1b      	ldrb	r3, [r3, #24]
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d122      	bne.n	8005b70 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005b2e:	e014      	b.n	8005b5a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	4a45      	ldr	r2, [pc, #276]	@ (8005c48 <ADC_ConversionStop+0x174>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d90d      	bls.n	8005b54 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b3c:	f043 0210 	orr.w	r2, r3, #16
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b48:	f043 0201 	orr.w	r2, r3, #1
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	e074      	b.n	8005c3e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	3301      	adds	r3, #1
 8005b58:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b64:	2b40      	cmp	r3, #64	@ 0x40
 8005b66:	d1e3      	bne.n	8005b30 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2240      	movs	r2, #64	@ 0x40
 8005b6e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d014      	beq.n	8005ba0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7fe fb02 	bl	8004184 <LL_ADC_REG_IsConversionOngoing>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00c      	beq.n	8005ba0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7fe fabf 	bl	800410e <LL_ADC_IsDisableOngoing>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d104      	bne.n	8005ba0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7fe fade 	bl	800415c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d014      	beq.n	8005bd0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7fe fb12 	bl	80041d4 <LL_ADC_INJ_IsConversionOngoing>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00c      	beq.n	8005bd0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7fe faa7 	bl	800410e <LL_ADC_IsDisableOngoing>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d104      	bne.n	8005bd0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f7fe faee 	bl	80041ac <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d005      	beq.n	8005be2 <ADC_ConversionStop+0x10e>
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	2b03      	cmp	r3, #3
 8005bda:	d105      	bne.n	8005be8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8005bdc:	230c      	movs	r3, #12
 8005bde:	617b      	str	r3, [r7, #20]
        break;
 8005be0:	e005      	b.n	8005bee <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8005be2:	2308      	movs	r3, #8
 8005be4:	617b      	str	r3, [r7, #20]
        break;
 8005be6:	e002      	b.n	8005bee <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005be8:	2304      	movs	r3, #4
 8005bea:	617b      	str	r3, [r7, #20]
        break;
 8005bec:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8005bee:	f7fd ff99 	bl	8003b24 <HAL_GetTick>
 8005bf2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005bf4:	e01b      	b.n	8005c2e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005bf6:	f7fd ff95 	bl	8003b24 <HAL_GetTick>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	2b05      	cmp	r3, #5
 8005c02:	d914      	bls.n	8005c2e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	689a      	ldr	r2, [r3, #8]
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d00d      	beq.n	8005c2e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c16:	f043 0210 	orr.w	r2, r3, #16
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c22:	f043 0201 	orr.w	r2, r3, #1
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e007      	b.n	8005c3e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	689a      	ldr	r2, [r3, #8]
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	4013      	ands	r3, r2
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1dc      	bne.n	8005bf6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3720      	adds	r7, #32
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	000cdbff 	.word	0x000cdbff

08005c4c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f7fe fa45 	bl	80040e8 <LL_ADC_IsEnabled>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d16e      	bne.n	8005d42 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	689a      	ldr	r2, [r3, #8]
 8005c6a:	4b38      	ldr	r3, [pc, #224]	@ (8005d4c <ADC_Enable+0x100>)
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00d      	beq.n	8005c8e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c76:	f043 0210 	orr.w	r2, r3, #16
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c82:	f043 0201 	orr.w	r2, r3, #1
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e05a      	b.n	8005d44 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7fe fa00 	bl	8004098 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005c98:	f7fd ff44 	bl	8003b24 <HAL_GetTick>
 8005c9c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a2b      	ldr	r2, [pc, #172]	@ (8005d50 <ADC_Enable+0x104>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d004      	beq.n	8005cb2 <ADC_Enable+0x66>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a29      	ldr	r2, [pc, #164]	@ (8005d54 <ADC_Enable+0x108>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d101      	bne.n	8005cb6 <ADC_Enable+0x6a>
 8005cb2:	4b29      	ldr	r3, [pc, #164]	@ (8005d58 <ADC_Enable+0x10c>)
 8005cb4:	e000      	b.n	8005cb8 <ADC_Enable+0x6c>
 8005cb6:	4b29      	ldr	r3, [pc, #164]	@ (8005d5c <ADC_Enable+0x110>)
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f7fe f983 	bl	8003fc4 <LL_ADC_GetMultimode>
 8005cbe:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a23      	ldr	r2, [pc, #140]	@ (8005d54 <ADC_Enable+0x108>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d002      	beq.n	8005cd0 <ADC_Enable+0x84>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	e000      	b.n	8005cd2 <ADC_Enable+0x86>
 8005cd0:	4b1f      	ldr	r3, [pc, #124]	@ (8005d50 <ADC_Enable+0x104>)
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	6812      	ldr	r2, [r2, #0]
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d02c      	beq.n	8005d34 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d130      	bne.n	8005d42 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005ce0:	e028      	b.n	8005d34 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7fe f9fe 	bl	80040e8 <LL_ADC_IsEnabled>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d104      	bne.n	8005cfc <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7fe f9ce 	bl	8004098 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005cfc:	f7fd ff12 	bl	8003b24 <HAL_GetTick>
 8005d00:	4602      	mov	r2, r0
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d914      	bls.n	8005d34 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0301 	and.w	r3, r3, #1
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d00d      	beq.n	8005d34 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d1c:	f043 0210 	orr.w	r2, r3, #16
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d28:	f043 0201 	orr.w	r2, r3, #1
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	e007      	b.n	8005d44 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d1cf      	bne.n	8005ce2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3710      	adds	r7, #16
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	8000003f 	.word	0x8000003f
 8005d50:	40022000 	.word	0x40022000
 8005d54:	40022100 	.word	0x40022100
 8005d58:	40022300 	.word	0x40022300
 8005d5c:	58026300 	.word	0x58026300

08005d60 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f7fe f9ce 	bl	800410e <LL_ADC_IsDisableOngoing>
 8005d72:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f7fe f9b5 	bl	80040e8 <LL_ADC_IsEnabled>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d047      	beq.n	8005e14 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d144      	bne.n	8005e14 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	f003 030d 	and.w	r3, r3, #13
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d10c      	bne.n	8005db2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f7fe f98f 	bl	80040c0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2203      	movs	r2, #3
 8005da8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005daa:	f7fd febb 	bl	8003b24 <HAL_GetTick>
 8005dae:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005db0:	e029      	b.n	8005e06 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005db6:	f043 0210 	orr.w	r2, r3, #16
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005dc2:	f043 0201 	orr.w	r2, r3, #1
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e023      	b.n	8005e16 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005dce:	f7fd fea9 	bl	8003b24 <HAL_GetTick>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d914      	bls.n	8005e06 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00d      	beq.n	8005e06 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dee:	f043 0210 	orr.w	r2, r3, #16
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005dfa:	f043 0201 	orr.w	r2, r3, #1
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e007      	b.n	8005e16 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f003 0301 	and.w	r3, r3, #1
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d1dc      	bne.n	8005dce <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3710      	adds	r7, #16
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}

08005e1e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005e1e:	b580      	push	{r7, lr}
 8005e20:	b084      	sub	sp, #16
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e2a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e30:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d14b      	bne.n	8005ed0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e3c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 0308 	and.w	r3, r3, #8
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d021      	beq.n	8005e96 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4618      	mov	r0, r3
 8005e58:	f7fd ffba 	bl	8003dd0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d032      	beq.n	8005ec8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d12b      	bne.n	8005ec8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e74:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d11f      	bne.n	8005ec8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e8c:	f043 0201 	orr.w	r2, r3, #1
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	661a      	str	r2, [r3, #96]	@ 0x60
 8005e94:	e018      	b.n	8005ec8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	f003 0303 	and.w	r3, r3, #3
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d111      	bne.n	8005ec8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ea8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005eb4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d105      	bne.n	8005ec8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ec0:	f043 0201 	orr.w	r2, r3, #1
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005ec8:	68f8      	ldr	r0, [r7, #12]
 8005eca:	f7fb fe11 	bl	8001af0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005ece:	e00e      	b.n	8005eee <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ed4:	f003 0310 	and.w	r3, r3, #16
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d003      	beq.n	8005ee4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005edc:	68f8      	ldr	r0, [r7, #12]
 8005ede:	f7ff f8bf 	bl	8005060 <HAL_ADC_ErrorCallback>
}
 8005ee2:	e004      	b.n	8005eee <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	4798      	blx	r3
}
 8005eee:	bf00      	nop
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	b084      	sub	sp, #16
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f02:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f7ff f897 	bl	8005038 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005f0a:	bf00      	nop
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b084      	sub	sp, #16
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f1e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f24:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f30:	f043 0204 	orr.w	r2, r3, #4
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f7ff f891 	bl	8005060 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005f3e:	bf00      	nop
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
	...

08005f48 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a6c      	ldr	r2, [pc, #432]	@ (8006108 <ADC_ConfigureBoostMode+0x1c0>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d004      	beq.n	8005f64 <ADC_ConfigureBoostMode+0x1c>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a6b      	ldr	r2, [pc, #428]	@ (800610c <ADC_ConfigureBoostMode+0x1c4>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d109      	bne.n	8005f78 <ADC_ConfigureBoostMode+0x30>
 8005f64:	4b6a      	ldr	r3, [pc, #424]	@ (8006110 <ADC_ConfigureBoostMode+0x1c8>)
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	bf14      	ite	ne
 8005f70:	2301      	movne	r3, #1
 8005f72:	2300      	moveq	r3, #0
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	e008      	b.n	8005f8a <ADC_ConfigureBoostMode+0x42>
 8005f78:	4b66      	ldr	r3, [pc, #408]	@ (8006114 <ADC_ConfigureBoostMode+0x1cc>)
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	bf14      	ite	ne
 8005f84:	2301      	movne	r3, #1
 8005f86:	2300      	moveq	r3, #0
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d01c      	beq.n	8005fc8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005f8e:	f004 fec7 	bl	800ad20 <HAL_RCC_GetHCLKFreq>
 8005f92:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f9c:	d010      	beq.n	8005fc0 <ADC_ConfigureBoostMode+0x78>
 8005f9e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005fa2:	d873      	bhi.n	800608c <ADC_ConfigureBoostMode+0x144>
 8005fa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fa8:	d002      	beq.n	8005fb0 <ADC_ConfigureBoostMode+0x68>
 8005faa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005fae:	d16d      	bne.n	800608c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	0c1b      	lsrs	r3, r3, #16
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fbc:	60fb      	str	r3, [r7, #12]
        break;
 8005fbe:	e068      	b.n	8006092 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	089b      	lsrs	r3, r3, #2
 8005fc4:	60fb      	str	r3, [r7, #12]
        break;
 8005fc6:	e064      	b.n	8006092 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005fc8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8005fcc:	f04f 0100 	mov.w	r1, #0
 8005fd0:	f006 f8a2 	bl	800c118 <HAL_RCCEx_GetPeriphCLKFreq>
 8005fd4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8005fde:	d051      	beq.n	8006084 <ADC_ConfigureBoostMode+0x13c>
 8005fe0:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8005fe4:	d854      	bhi.n	8006090 <ADC_ConfigureBoostMode+0x148>
 8005fe6:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8005fea:	d047      	beq.n	800607c <ADC_ConfigureBoostMode+0x134>
 8005fec:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8005ff0:	d84e      	bhi.n	8006090 <ADC_ConfigureBoostMode+0x148>
 8005ff2:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8005ff6:	d03d      	beq.n	8006074 <ADC_ConfigureBoostMode+0x12c>
 8005ff8:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8005ffc:	d848      	bhi.n	8006090 <ADC_ConfigureBoostMode+0x148>
 8005ffe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006002:	d033      	beq.n	800606c <ADC_ConfigureBoostMode+0x124>
 8006004:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006008:	d842      	bhi.n	8006090 <ADC_ConfigureBoostMode+0x148>
 800600a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800600e:	d029      	beq.n	8006064 <ADC_ConfigureBoostMode+0x11c>
 8006010:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8006014:	d83c      	bhi.n	8006090 <ADC_ConfigureBoostMode+0x148>
 8006016:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800601a:	d01a      	beq.n	8006052 <ADC_ConfigureBoostMode+0x10a>
 800601c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006020:	d836      	bhi.n	8006090 <ADC_ConfigureBoostMode+0x148>
 8006022:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8006026:	d014      	beq.n	8006052 <ADC_ConfigureBoostMode+0x10a>
 8006028:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800602c:	d830      	bhi.n	8006090 <ADC_ConfigureBoostMode+0x148>
 800602e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006032:	d00e      	beq.n	8006052 <ADC_ConfigureBoostMode+0x10a>
 8006034:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006038:	d82a      	bhi.n	8006090 <ADC_ConfigureBoostMode+0x148>
 800603a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800603e:	d008      	beq.n	8006052 <ADC_ConfigureBoostMode+0x10a>
 8006040:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006044:	d824      	bhi.n	8006090 <ADC_ConfigureBoostMode+0x148>
 8006046:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800604a:	d002      	beq.n	8006052 <ADC_ConfigureBoostMode+0x10a>
 800604c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006050:	d11e      	bne.n	8006090 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	0c9b      	lsrs	r3, r3, #18
 8006058:	005b      	lsls	r3, r3, #1
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006060:	60fb      	str	r3, [r7, #12]
        break;
 8006062:	e016      	b.n	8006092 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	091b      	lsrs	r3, r3, #4
 8006068:	60fb      	str	r3, [r7, #12]
        break;
 800606a:	e012      	b.n	8006092 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	095b      	lsrs	r3, r3, #5
 8006070:	60fb      	str	r3, [r7, #12]
        break;
 8006072:	e00e      	b.n	8006092 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	099b      	lsrs	r3, r3, #6
 8006078:	60fb      	str	r3, [r7, #12]
        break;
 800607a:	e00a      	b.n	8006092 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	09db      	lsrs	r3, r3, #7
 8006080:	60fb      	str	r3, [r7, #12]
        break;
 8006082:	e006      	b.n	8006092 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	0a1b      	lsrs	r3, r3, #8
 8006088:	60fb      	str	r3, [r7, #12]
        break;
 800608a:	e002      	b.n	8006092 <ADC_ConfigureBoostMode+0x14a>
        break;
 800608c:	bf00      	nop
 800608e:	e000      	b.n	8006092 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8006090:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	085b      	lsrs	r3, r3, #1
 8006096:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	4a1f      	ldr	r2, [pc, #124]	@ (8006118 <ADC_ConfigureBoostMode+0x1d0>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d808      	bhi.n	80060b2 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	689a      	ldr	r2, [r3, #8]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80060ae:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80060b0:	e025      	b.n	80060fe <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	4a19      	ldr	r2, [pc, #100]	@ (800611c <ADC_ConfigureBoostMode+0x1d4>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d80a      	bhi.n	80060d0 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80060cc:	609a      	str	r2, [r3, #8]
}
 80060ce:	e016      	b.n	80060fe <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	4a13      	ldr	r2, [pc, #76]	@ (8006120 <ADC_ConfigureBoostMode+0x1d8>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d80a      	bhi.n	80060ee <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060ea:	609a      	str	r2, [r3, #8]
}
 80060ec:	e007      	b.n	80060fe <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	689a      	ldr	r2, [r3, #8]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80060fc:	609a      	str	r2, [r3, #8]
}
 80060fe:	bf00      	nop
 8006100:	3710      	adds	r7, #16
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	40022000 	.word	0x40022000
 800610c:	40022100 	.word	0x40022100
 8006110:	40022300 	.word	0x40022300
 8006114:	58026300 	.word	0x58026300
 8006118:	005f5e10 	.word	0x005f5e10
 800611c:	00bebc20 	.word	0x00bebc20
 8006120:	017d7840 	.word	0x017d7840

08006124 <LL_ADC_IsEnabled>:
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	f003 0301 	and.w	r3, r3, #1
 8006134:	2b01      	cmp	r3, #1
 8006136:	d101      	bne.n	800613c <LL_ADC_IsEnabled+0x18>
 8006138:	2301      	movs	r3, #1
 800613a:	e000      	b.n	800613e <LL_ADC_IsEnabled+0x1a>
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	370c      	adds	r7, #12
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr

0800614a <LL_ADC_REG_IsConversionOngoing>:
{
 800614a:	b480      	push	{r7}
 800614c:	b083      	sub	sp, #12
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	f003 0304 	and.w	r3, r3, #4
 800615a:	2b04      	cmp	r3, #4
 800615c:	d101      	bne.n	8006162 <LL_ADC_REG_IsConversionOngoing+0x18>
 800615e:	2301      	movs	r3, #1
 8006160:	e000      	b.n	8006164 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006178:	bf00      	nop
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800618c:	bf00      	nop
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80061a0:	bf00      	nop
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80061b4:	bf00      	nop
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80061c8:	bf00      	nop
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80061d4:	b590      	push	{r4, r7, lr}
 80061d6:	b0a3      	sub	sp, #140	@ 0x8c
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80061de:	2300      	movs	r3, #0
 80061e0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d101      	bne.n	80061f2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80061ee:	2302      	movs	r3, #2
 80061f0:	e0c1      	b.n	8006376 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2201      	movs	r2, #1
 80061f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80061fa:	2300      	movs	r3, #0
 80061fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80061fe:	2300      	movs	r3, #0
 8006200:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a5e      	ldr	r2, [pc, #376]	@ (8006380 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d102      	bne.n	8006212 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800620c:	4b5d      	ldr	r3, [pc, #372]	@ (8006384 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800620e:	60fb      	str	r3, [r7, #12]
 8006210:	e001      	b.n	8006216 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006212:	2300      	movs	r3, #0
 8006214:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d10b      	bne.n	8006234 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006220:	f043 0220 	orr.w	r2, r3, #32
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e0a0      	b.n	8006376 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	4618      	mov	r0, r3
 8006238:	f7ff ff87 	bl	800614a <LL_ADC_REG_IsConversionOngoing>
 800623c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4618      	mov	r0, r3
 8006246:	f7ff ff80 	bl	800614a <LL_ADC_REG_IsConversionOngoing>
 800624a:	4603      	mov	r3, r0
 800624c:	2b00      	cmp	r3, #0
 800624e:	f040 8081 	bne.w	8006354 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006252:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006256:	2b00      	cmp	r3, #0
 8006258:	d17c      	bne.n	8006354 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a48      	ldr	r2, [pc, #288]	@ (8006380 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d004      	beq.n	800626e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a46      	ldr	r2, [pc, #280]	@ (8006384 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d101      	bne.n	8006272 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800626e:	4b46      	ldr	r3, [pc, #280]	@ (8006388 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006270:	e000      	b.n	8006274 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8006272:	4b46      	ldr	r3, [pc, #280]	@ (800638c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006274:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d039      	beq.n	80062f2 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800627e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	431a      	orrs	r2, r3
 800628c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800628e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a3a      	ldr	r2, [pc, #232]	@ (8006380 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d004      	beq.n	80062a4 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a39      	ldr	r2, [pc, #228]	@ (8006384 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d10e      	bne.n	80062c2 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80062a4:	4836      	ldr	r0, [pc, #216]	@ (8006380 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80062a6:	f7ff ff3d 	bl	8006124 <LL_ADC_IsEnabled>
 80062aa:	4604      	mov	r4, r0
 80062ac:	4835      	ldr	r0, [pc, #212]	@ (8006384 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80062ae:	f7ff ff39 	bl	8006124 <LL_ADC_IsEnabled>
 80062b2:	4603      	mov	r3, r0
 80062b4:	4323      	orrs	r3, r4
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	bf0c      	ite	eq
 80062ba:	2301      	moveq	r3, #1
 80062bc:	2300      	movne	r3, #0
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	e008      	b.n	80062d4 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80062c2:	4833      	ldr	r0, [pc, #204]	@ (8006390 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80062c4:	f7ff ff2e 	bl	8006124 <LL_ADC_IsEnabled>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	bf0c      	ite	eq
 80062ce:	2301      	moveq	r3, #1
 80062d0:	2300      	movne	r3, #0
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d047      	beq.n	8006368 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80062d8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80062da:	689a      	ldr	r2, [r3, #8]
 80062dc:	4b2d      	ldr	r3, [pc, #180]	@ (8006394 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80062de:	4013      	ands	r3, r2
 80062e0:	683a      	ldr	r2, [r7, #0]
 80062e2:	6811      	ldr	r1, [r2, #0]
 80062e4:	683a      	ldr	r2, [r7, #0]
 80062e6:	6892      	ldr	r2, [r2, #8]
 80062e8:	430a      	orrs	r2, r1
 80062ea:	431a      	orrs	r2, r3
 80062ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80062ee:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80062f0:	e03a      	b.n	8006368 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80062f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80062fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80062fc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a1f      	ldr	r2, [pc, #124]	@ (8006380 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d004      	beq.n	8006312 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a1d      	ldr	r2, [pc, #116]	@ (8006384 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d10e      	bne.n	8006330 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8006312:	481b      	ldr	r0, [pc, #108]	@ (8006380 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006314:	f7ff ff06 	bl	8006124 <LL_ADC_IsEnabled>
 8006318:	4604      	mov	r4, r0
 800631a:	481a      	ldr	r0, [pc, #104]	@ (8006384 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800631c:	f7ff ff02 	bl	8006124 <LL_ADC_IsEnabled>
 8006320:	4603      	mov	r3, r0
 8006322:	4323      	orrs	r3, r4
 8006324:	2b00      	cmp	r3, #0
 8006326:	bf0c      	ite	eq
 8006328:	2301      	moveq	r3, #1
 800632a:	2300      	movne	r3, #0
 800632c:	b2db      	uxtb	r3, r3
 800632e:	e008      	b.n	8006342 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8006330:	4817      	ldr	r0, [pc, #92]	@ (8006390 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8006332:	f7ff fef7 	bl	8006124 <LL_ADC_IsEnabled>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	bf0c      	ite	eq
 800633c:	2301      	moveq	r3, #1
 800633e:	2300      	movne	r3, #0
 8006340:	b2db      	uxtb	r3, r3
 8006342:	2b00      	cmp	r3, #0
 8006344:	d010      	beq.n	8006368 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006346:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006348:	689a      	ldr	r2, [r3, #8]
 800634a:	4b12      	ldr	r3, [pc, #72]	@ (8006394 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800634c:	4013      	ands	r3, r2
 800634e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006350:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006352:	e009      	b.n	8006368 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006358:	f043 0220 	orr.w	r2, r3, #32
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8006366:	e000      	b.n	800636a <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006368:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8006372:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8006376:	4618      	mov	r0, r3
 8006378:	378c      	adds	r7, #140	@ 0x8c
 800637a:	46bd      	mov	sp, r7
 800637c:	bd90      	pop	{r4, r7, pc}
 800637e:	bf00      	nop
 8006380:	40022000 	.word	0x40022000
 8006384:	40022100 	.word	0x40022100
 8006388:	40022300 	.word	0x40022300
 800638c:	58026300 	.word	0x58026300
 8006390:	58026000 	.word	0x58026000
 8006394:	fffff0e0 	.word	0xfffff0e0

08006398 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006398:	b480      	push	{r7}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f003 0307 	and.w	r3, r3, #7
 80063a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80063a8:	4b0b      	ldr	r3, [pc, #44]	@ (80063d8 <__NVIC_SetPriorityGrouping+0x40>)
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80063ae:	68ba      	ldr	r2, [r7, #8]
 80063b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80063b4:	4013      	ands	r3, r2
 80063b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80063c0:	4b06      	ldr	r3, [pc, #24]	@ (80063dc <__NVIC_SetPriorityGrouping+0x44>)
 80063c2:	4313      	orrs	r3, r2
 80063c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80063c6:	4a04      	ldr	r2, [pc, #16]	@ (80063d8 <__NVIC_SetPriorityGrouping+0x40>)
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	60d3      	str	r3, [r2, #12]
}
 80063cc:	bf00      	nop
 80063ce:	3714      	adds	r7, #20
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr
 80063d8:	e000ed00 	.word	0xe000ed00
 80063dc:	05fa0000 	.word	0x05fa0000

080063e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80063e0:	b480      	push	{r7}
 80063e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80063e4:	4b04      	ldr	r3, [pc, #16]	@ (80063f8 <__NVIC_GetPriorityGrouping+0x18>)
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	0a1b      	lsrs	r3, r3, #8
 80063ea:	f003 0307 	and.w	r3, r3, #7
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr
 80063f8:	e000ed00 	.word	0xe000ed00

080063fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	4603      	mov	r3, r0
 8006404:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006406:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800640a:	2b00      	cmp	r3, #0
 800640c:	db0b      	blt.n	8006426 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800640e:	88fb      	ldrh	r3, [r7, #6]
 8006410:	f003 021f 	and.w	r2, r3, #31
 8006414:	4907      	ldr	r1, [pc, #28]	@ (8006434 <__NVIC_EnableIRQ+0x38>)
 8006416:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800641a:	095b      	lsrs	r3, r3, #5
 800641c:	2001      	movs	r0, #1
 800641e:	fa00 f202 	lsl.w	r2, r0, r2
 8006422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006426:	bf00      	nop
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	e000e100 	.word	0xe000e100

08006438 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	4603      	mov	r3, r0
 8006440:	6039      	str	r1, [r7, #0]
 8006442:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006444:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006448:	2b00      	cmp	r3, #0
 800644a:	db0a      	blt.n	8006462 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	b2da      	uxtb	r2, r3
 8006450:	490c      	ldr	r1, [pc, #48]	@ (8006484 <__NVIC_SetPriority+0x4c>)
 8006452:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006456:	0112      	lsls	r2, r2, #4
 8006458:	b2d2      	uxtb	r2, r2
 800645a:	440b      	add	r3, r1
 800645c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006460:	e00a      	b.n	8006478 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	b2da      	uxtb	r2, r3
 8006466:	4908      	ldr	r1, [pc, #32]	@ (8006488 <__NVIC_SetPriority+0x50>)
 8006468:	88fb      	ldrh	r3, [r7, #6]
 800646a:	f003 030f 	and.w	r3, r3, #15
 800646e:	3b04      	subs	r3, #4
 8006470:	0112      	lsls	r2, r2, #4
 8006472:	b2d2      	uxtb	r2, r2
 8006474:	440b      	add	r3, r1
 8006476:	761a      	strb	r2, [r3, #24]
}
 8006478:	bf00      	nop
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr
 8006484:	e000e100 	.word	0xe000e100
 8006488:	e000ed00 	.word	0xe000ed00

0800648c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800648c:	b480      	push	{r7}
 800648e:	b089      	sub	sp, #36	@ 0x24
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f003 0307 	and.w	r3, r3, #7
 800649e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	f1c3 0307 	rsb	r3, r3, #7
 80064a6:	2b04      	cmp	r3, #4
 80064a8:	bf28      	it	cs
 80064aa:	2304      	movcs	r3, #4
 80064ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	3304      	adds	r3, #4
 80064b2:	2b06      	cmp	r3, #6
 80064b4:	d902      	bls.n	80064bc <NVIC_EncodePriority+0x30>
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	3b03      	subs	r3, #3
 80064ba:	e000      	b.n	80064be <NVIC_EncodePriority+0x32>
 80064bc:	2300      	movs	r3, #0
 80064be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064c0:	f04f 32ff 	mov.w	r2, #4294967295
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	fa02 f303 	lsl.w	r3, r2, r3
 80064ca:	43da      	mvns	r2, r3
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	401a      	ands	r2, r3
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80064d4:	f04f 31ff 	mov.w	r1, #4294967295
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	fa01 f303 	lsl.w	r3, r1, r3
 80064de:	43d9      	mvns	r1, r3
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064e4:	4313      	orrs	r3, r2
         );
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3724      	adds	r7, #36	@ 0x24
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
	...

080064f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	3b01      	subs	r3, #1
 8006500:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006504:	d301      	bcc.n	800650a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006506:	2301      	movs	r3, #1
 8006508:	e00f      	b.n	800652a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800650a:	4a0a      	ldr	r2, [pc, #40]	@ (8006534 <SysTick_Config+0x40>)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	3b01      	subs	r3, #1
 8006510:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006512:	210f      	movs	r1, #15
 8006514:	f04f 30ff 	mov.w	r0, #4294967295
 8006518:	f7ff ff8e 	bl	8006438 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800651c:	4b05      	ldr	r3, [pc, #20]	@ (8006534 <SysTick_Config+0x40>)
 800651e:	2200      	movs	r2, #0
 8006520:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006522:	4b04      	ldr	r3, [pc, #16]	@ (8006534 <SysTick_Config+0x40>)
 8006524:	2207      	movs	r2, #7
 8006526:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	3708      	adds	r7, #8
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	e000e010 	.word	0xe000e010

08006538 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f7ff ff29 	bl	8006398 <__NVIC_SetPriorityGrouping>
}
 8006546:	bf00      	nop
 8006548:	3708      	adds	r7, #8
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}

0800654e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800654e:	b580      	push	{r7, lr}
 8006550:	b086      	sub	sp, #24
 8006552:	af00      	add	r7, sp, #0
 8006554:	4603      	mov	r3, r0
 8006556:	60b9      	str	r1, [r7, #8]
 8006558:	607a      	str	r2, [r7, #4]
 800655a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800655c:	f7ff ff40 	bl	80063e0 <__NVIC_GetPriorityGrouping>
 8006560:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	68b9      	ldr	r1, [r7, #8]
 8006566:	6978      	ldr	r0, [r7, #20]
 8006568:	f7ff ff90 	bl	800648c <NVIC_EncodePriority>
 800656c:	4602      	mov	r2, r0
 800656e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006572:	4611      	mov	r1, r2
 8006574:	4618      	mov	r0, r3
 8006576:	f7ff ff5f 	bl	8006438 <__NVIC_SetPriority>
}
 800657a:	bf00      	nop
 800657c:	3718      	adds	r7, #24
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006582:	b580      	push	{r7, lr}
 8006584:	b082      	sub	sp, #8
 8006586:	af00      	add	r7, sp, #0
 8006588:	4603      	mov	r3, r0
 800658a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800658c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006590:	4618      	mov	r0, r3
 8006592:	f7ff ff33 	bl	80063fc <__NVIC_EnableIRQ>
}
 8006596:	bf00      	nop
 8006598:	3708      	adds	r7, #8
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}

0800659e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800659e:	b580      	push	{r7, lr}
 80065a0:	b082      	sub	sp, #8
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f7ff ffa4 	bl	80064f4 <SysTick_Config>
 80065ac:	4603      	mov	r3, r0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3708      	adds	r7, #8
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
	...

080065b8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b086      	sub	sp, #24
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80065c0:	f7fd fab0 	bl	8003b24 <HAL_GetTick>
 80065c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d101      	bne.n	80065d0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e312      	b.n	8006bf6 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a66      	ldr	r2, [pc, #408]	@ (8006770 <HAL_DMA_Init+0x1b8>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d04a      	beq.n	8006670 <HAL_DMA_Init+0xb8>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a65      	ldr	r2, [pc, #404]	@ (8006774 <HAL_DMA_Init+0x1bc>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d045      	beq.n	8006670 <HAL_DMA_Init+0xb8>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a63      	ldr	r2, [pc, #396]	@ (8006778 <HAL_DMA_Init+0x1c0>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d040      	beq.n	8006670 <HAL_DMA_Init+0xb8>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a62      	ldr	r2, [pc, #392]	@ (800677c <HAL_DMA_Init+0x1c4>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d03b      	beq.n	8006670 <HAL_DMA_Init+0xb8>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a60      	ldr	r2, [pc, #384]	@ (8006780 <HAL_DMA_Init+0x1c8>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d036      	beq.n	8006670 <HAL_DMA_Init+0xb8>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a5f      	ldr	r2, [pc, #380]	@ (8006784 <HAL_DMA_Init+0x1cc>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d031      	beq.n	8006670 <HAL_DMA_Init+0xb8>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a5d      	ldr	r2, [pc, #372]	@ (8006788 <HAL_DMA_Init+0x1d0>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d02c      	beq.n	8006670 <HAL_DMA_Init+0xb8>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a5c      	ldr	r2, [pc, #368]	@ (800678c <HAL_DMA_Init+0x1d4>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d027      	beq.n	8006670 <HAL_DMA_Init+0xb8>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a5a      	ldr	r2, [pc, #360]	@ (8006790 <HAL_DMA_Init+0x1d8>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d022      	beq.n	8006670 <HAL_DMA_Init+0xb8>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a59      	ldr	r2, [pc, #356]	@ (8006794 <HAL_DMA_Init+0x1dc>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d01d      	beq.n	8006670 <HAL_DMA_Init+0xb8>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a57      	ldr	r2, [pc, #348]	@ (8006798 <HAL_DMA_Init+0x1e0>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d018      	beq.n	8006670 <HAL_DMA_Init+0xb8>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a56      	ldr	r2, [pc, #344]	@ (800679c <HAL_DMA_Init+0x1e4>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d013      	beq.n	8006670 <HAL_DMA_Init+0xb8>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a54      	ldr	r2, [pc, #336]	@ (80067a0 <HAL_DMA_Init+0x1e8>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d00e      	beq.n	8006670 <HAL_DMA_Init+0xb8>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a53      	ldr	r2, [pc, #332]	@ (80067a4 <HAL_DMA_Init+0x1ec>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d009      	beq.n	8006670 <HAL_DMA_Init+0xb8>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a51      	ldr	r2, [pc, #324]	@ (80067a8 <HAL_DMA_Init+0x1f0>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d004      	beq.n	8006670 <HAL_DMA_Init+0xb8>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a50      	ldr	r2, [pc, #320]	@ (80067ac <HAL_DMA_Init+0x1f4>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d101      	bne.n	8006674 <HAL_DMA_Init+0xbc>
 8006670:	2301      	movs	r3, #1
 8006672:	e000      	b.n	8006676 <HAL_DMA_Init+0xbe>
 8006674:	2300      	movs	r3, #0
 8006676:	2b00      	cmp	r3, #0
 8006678:	f000 813c 	beq.w	80068f4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2202      	movs	r2, #2
 8006680:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a37      	ldr	r2, [pc, #220]	@ (8006770 <HAL_DMA_Init+0x1b8>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d04a      	beq.n	800672c <HAL_DMA_Init+0x174>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a36      	ldr	r2, [pc, #216]	@ (8006774 <HAL_DMA_Init+0x1bc>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d045      	beq.n	800672c <HAL_DMA_Init+0x174>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a34      	ldr	r2, [pc, #208]	@ (8006778 <HAL_DMA_Init+0x1c0>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d040      	beq.n	800672c <HAL_DMA_Init+0x174>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a33      	ldr	r2, [pc, #204]	@ (800677c <HAL_DMA_Init+0x1c4>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d03b      	beq.n	800672c <HAL_DMA_Init+0x174>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a31      	ldr	r2, [pc, #196]	@ (8006780 <HAL_DMA_Init+0x1c8>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d036      	beq.n	800672c <HAL_DMA_Init+0x174>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a30      	ldr	r2, [pc, #192]	@ (8006784 <HAL_DMA_Init+0x1cc>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d031      	beq.n	800672c <HAL_DMA_Init+0x174>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a2e      	ldr	r2, [pc, #184]	@ (8006788 <HAL_DMA_Init+0x1d0>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d02c      	beq.n	800672c <HAL_DMA_Init+0x174>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a2d      	ldr	r2, [pc, #180]	@ (800678c <HAL_DMA_Init+0x1d4>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d027      	beq.n	800672c <HAL_DMA_Init+0x174>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a2b      	ldr	r2, [pc, #172]	@ (8006790 <HAL_DMA_Init+0x1d8>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d022      	beq.n	800672c <HAL_DMA_Init+0x174>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a2a      	ldr	r2, [pc, #168]	@ (8006794 <HAL_DMA_Init+0x1dc>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d01d      	beq.n	800672c <HAL_DMA_Init+0x174>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a28      	ldr	r2, [pc, #160]	@ (8006798 <HAL_DMA_Init+0x1e0>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d018      	beq.n	800672c <HAL_DMA_Init+0x174>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a27      	ldr	r2, [pc, #156]	@ (800679c <HAL_DMA_Init+0x1e4>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d013      	beq.n	800672c <HAL_DMA_Init+0x174>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a25      	ldr	r2, [pc, #148]	@ (80067a0 <HAL_DMA_Init+0x1e8>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d00e      	beq.n	800672c <HAL_DMA_Init+0x174>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a24      	ldr	r2, [pc, #144]	@ (80067a4 <HAL_DMA_Init+0x1ec>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d009      	beq.n	800672c <HAL_DMA_Init+0x174>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a22      	ldr	r2, [pc, #136]	@ (80067a8 <HAL_DMA_Init+0x1f0>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d004      	beq.n	800672c <HAL_DMA_Init+0x174>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a21      	ldr	r2, [pc, #132]	@ (80067ac <HAL_DMA_Init+0x1f4>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d108      	bne.n	800673e <HAL_DMA_Init+0x186>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f022 0201 	bic.w	r2, r2, #1
 800673a:	601a      	str	r2, [r3, #0]
 800673c:	e007      	b.n	800674e <HAL_DMA_Init+0x196>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f022 0201 	bic.w	r2, r2, #1
 800674c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800674e:	e02f      	b.n	80067b0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006750:	f7fd f9e8 	bl	8003b24 <HAL_GetTick>
 8006754:	4602      	mov	r2, r0
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	2b05      	cmp	r3, #5
 800675c:	d928      	bls.n	80067b0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2220      	movs	r2, #32
 8006762:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2203      	movs	r2, #3
 8006768:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	e242      	b.n	8006bf6 <HAL_DMA_Init+0x63e>
 8006770:	40020010 	.word	0x40020010
 8006774:	40020028 	.word	0x40020028
 8006778:	40020040 	.word	0x40020040
 800677c:	40020058 	.word	0x40020058
 8006780:	40020070 	.word	0x40020070
 8006784:	40020088 	.word	0x40020088
 8006788:	400200a0 	.word	0x400200a0
 800678c:	400200b8 	.word	0x400200b8
 8006790:	40020410 	.word	0x40020410
 8006794:	40020428 	.word	0x40020428
 8006798:	40020440 	.word	0x40020440
 800679c:	40020458 	.word	0x40020458
 80067a0:	40020470 	.word	0x40020470
 80067a4:	40020488 	.word	0x40020488
 80067a8:	400204a0 	.word	0x400204a0
 80067ac:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 0301 	and.w	r3, r3, #1
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d1c8      	bne.n	8006750 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80067c6:	697a      	ldr	r2, [r7, #20]
 80067c8:	4b83      	ldr	r3, [pc, #524]	@ (80069d8 <HAL_DMA_Init+0x420>)
 80067ca:	4013      	ands	r3, r2
 80067cc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80067d6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80067e2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	699b      	ldr	r3, [r3, #24]
 80067e8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80067ee:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6a1b      	ldr	r3, [r3, #32]
 80067f4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80067f6:	697a      	ldr	r2, [r7, #20]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006800:	2b04      	cmp	r3, #4
 8006802:	d107      	bne.n	8006814 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800680c:	4313      	orrs	r3, r2
 800680e:	697a      	ldr	r2, [r7, #20]
 8006810:	4313      	orrs	r3, r2
 8006812:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	2b28      	cmp	r3, #40	@ 0x28
 800681a:	d903      	bls.n	8006824 <HAL_DMA_Init+0x26c>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	2b2e      	cmp	r3, #46	@ 0x2e
 8006822:	d91f      	bls.n	8006864 <HAL_DMA_Init+0x2ac>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	2b3e      	cmp	r3, #62	@ 0x3e
 800682a:	d903      	bls.n	8006834 <HAL_DMA_Init+0x27c>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	2b42      	cmp	r3, #66	@ 0x42
 8006832:	d917      	bls.n	8006864 <HAL_DMA_Init+0x2ac>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	2b46      	cmp	r3, #70	@ 0x46
 800683a:	d903      	bls.n	8006844 <HAL_DMA_Init+0x28c>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	2b48      	cmp	r3, #72	@ 0x48
 8006842:	d90f      	bls.n	8006864 <HAL_DMA_Init+0x2ac>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	2b4e      	cmp	r3, #78	@ 0x4e
 800684a:	d903      	bls.n	8006854 <HAL_DMA_Init+0x29c>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	2b52      	cmp	r3, #82	@ 0x52
 8006852:	d907      	bls.n	8006864 <HAL_DMA_Init+0x2ac>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	2b73      	cmp	r3, #115	@ 0x73
 800685a:	d905      	bls.n	8006868 <HAL_DMA_Init+0x2b0>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	2b77      	cmp	r3, #119	@ 0x77
 8006862:	d801      	bhi.n	8006868 <HAL_DMA_Init+0x2b0>
 8006864:	2301      	movs	r3, #1
 8006866:	e000      	b.n	800686a <HAL_DMA_Init+0x2b2>
 8006868:	2300      	movs	r3, #0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d003      	beq.n	8006876 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006874:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	697a      	ldr	r2, [r7, #20]
 800687c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	695b      	ldr	r3, [r3, #20]
 8006884:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	f023 0307 	bic.w	r3, r3, #7
 800688c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006892:	697a      	ldr	r2, [r7, #20]
 8006894:	4313      	orrs	r3, r2
 8006896:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800689c:	2b04      	cmp	r3, #4
 800689e:	d117      	bne.n	80068d0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068a4:	697a      	ldr	r2, [r7, #20]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00e      	beq.n	80068d0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f001 fdca 	bl	800844c <DMA_CheckFifoParam>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d008      	beq.n	80068d0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2240      	movs	r2, #64	@ 0x40
 80068c2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	e192      	b.n	8006bf6 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	697a      	ldr	r2, [r7, #20]
 80068d6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f001 fd05 	bl	80082e8 <DMA_CalcBaseAndBitshift>
 80068de:	4603      	mov	r3, r0
 80068e0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068e6:	f003 031f 	and.w	r3, r3, #31
 80068ea:	223f      	movs	r2, #63	@ 0x3f
 80068ec:	409a      	lsls	r2, r3
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	609a      	str	r2, [r3, #8]
 80068f2:	e0c8      	b.n	8006a86 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a38      	ldr	r2, [pc, #224]	@ (80069dc <HAL_DMA_Init+0x424>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d022      	beq.n	8006944 <HAL_DMA_Init+0x38c>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a37      	ldr	r2, [pc, #220]	@ (80069e0 <HAL_DMA_Init+0x428>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d01d      	beq.n	8006944 <HAL_DMA_Init+0x38c>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a35      	ldr	r2, [pc, #212]	@ (80069e4 <HAL_DMA_Init+0x42c>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d018      	beq.n	8006944 <HAL_DMA_Init+0x38c>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a34      	ldr	r2, [pc, #208]	@ (80069e8 <HAL_DMA_Init+0x430>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d013      	beq.n	8006944 <HAL_DMA_Init+0x38c>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a32      	ldr	r2, [pc, #200]	@ (80069ec <HAL_DMA_Init+0x434>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d00e      	beq.n	8006944 <HAL_DMA_Init+0x38c>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a31      	ldr	r2, [pc, #196]	@ (80069f0 <HAL_DMA_Init+0x438>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d009      	beq.n	8006944 <HAL_DMA_Init+0x38c>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a2f      	ldr	r2, [pc, #188]	@ (80069f4 <HAL_DMA_Init+0x43c>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d004      	beq.n	8006944 <HAL_DMA_Init+0x38c>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a2e      	ldr	r2, [pc, #184]	@ (80069f8 <HAL_DMA_Init+0x440>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d101      	bne.n	8006948 <HAL_DMA_Init+0x390>
 8006944:	2301      	movs	r3, #1
 8006946:	e000      	b.n	800694a <HAL_DMA_Init+0x392>
 8006948:	2300      	movs	r3, #0
 800694a:	2b00      	cmp	r3, #0
 800694c:	f000 8092 	beq.w	8006a74 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a21      	ldr	r2, [pc, #132]	@ (80069dc <HAL_DMA_Init+0x424>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d021      	beq.n	800699e <HAL_DMA_Init+0x3e6>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a20      	ldr	r2, [pc, #128]	@ (80069e0 <HAL_DMA_Init+0x428>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d01c      	beq.n	800699e <HAL_DMA_Init+0x3e6>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a1e      	ldr	r2, [pc, #120]	@ (80069e4 <HAL_DMA_Init+0x42c>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d017      	beq.n	800699e <HAL_DMA_Init+0x3e6>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a1d      	ldr	r2, [pc, #116]	@ (80069e8 <HAL_DMA_Init+0x430>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d012      	beq.n	800699e <HAL_DMA_Init+0x3e6>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a1b      	ldr	r2, [pc, #108]	@ (80069ec <HAL_DMA_Init+0x434>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d00d      	beq.n	800699e <HAL_DMA_Init+0x3e6>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a1a      	ldr	r2, [pc, #104]	@ (80069f0 <HAL_DMA_Init+0x438>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d008      	beq.n	800699e <HAL_DMA_Init+0x3e6>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a18      	ldr	r2, [pc, #96]	@ (80069f4 <HAL_DMA_Init+0x43c>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d003      	beq.n	800699e <HAL_DMA_Init+0x3e6>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a17      	ldr	r2, [pc, #92]	@ (80069f8 <HAL_DMA_Init+0x440>)
 800699c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2202      	movs	r2, #2
 80069a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80069b6:	697a      	ldr	r2, [r7, #20]
 80069b8:	4b10      	ldr	r3, [pc, #64]	@ (80069fc <HAL_DMA_Init+0x444>)
 80069ba:	4013      	ands	r3, r2
 80069bc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	2b40      	cmp	r3, #64	@ 0x40
 80069c4:	d01c      	beq.n	8006a00 <HAL_DMA_Init+0x448>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	2b80      	cmp	r3, #128	@ 0x80
 80069cc:	d102      	bne.n	80069d4 <HAL_DMA_Init+0x41c>
 80069ce:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80069d2:	e016      	b.n	8006a02 <HAL_DMA_Init+0x44a>
 80069d4:	2300      	movs	r3, #0
 80069d6:	e014      	b.n	8006a02 <HAL_DMA_Init+0x44a>
 80069d8:	fe10803f 	.word	0xfe10803f
 80069dc:	58025408 	.word	0x58025408
 80069e0:	5802541c 	.word	0x5802541c
 80069e4:	58025430 	.word	0x58025430
 80069e8:	58025444 	.word	0x58025444
 80069ec:	58025458 	.word	0x58025458
 80069f0:	5802546c 	.word	0x5802546c
 80069f4:	58025480 	.word	0x58025480
 80069f8:	58025494 	.word	0x58025494
 80069fc:	fffe000f 	.word	0xfffe000f
 8006a00:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	68d2      	ldr	r2, [r2, #12]
 8006a06:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006a08:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006a10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	695b      	ldr	r3, [r3, #20]
 8006a16:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006a18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	699b      	ldr	r3, [r3, #24]
 8006a1e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006a20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	69db      	ldr	r3, [r3, #28]
 8006a26:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006a28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006a30:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006a32:	697a      	ldr	r2, [r7, #20]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	697a      	ldr	r2, [r7, #20]
 8006a3e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	461a      	mov	r2, r3
 8006a46:	4b6e      	ldr	r3, [pc, #440]	@ (8006c00 <HAL_DMA_Init+0x648>)
 8006a48:	4413      	add	r3, r2
 8006a4a:	4a6e      	ldr	r2, [pc, #440]	@ (8006c04 <HAL_DMA_Init+0x64c>)
 8006a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a50:	091b      	lsrs	r3, r3, #4
 8006a52:	009a      	lsls	r2, r3, #2
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f001 fc45 	bl	80082e8 <DMA_CalcBaseAndBitshift>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a66:	f003 031f 	and.w	r3, r3, #31
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	409a      	lsls	r2, r3
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	605a      	str	r2, [r3, #4]
 8006a72:	e008      	b.n	8006a86 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2240      	movs	r2, #64	@ 0x40
 8006a78:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2203      	movs	r2, #3
 8006a7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e0b7      	b.n	8006bf6 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a5f      	ldr	r2, [pc, #380]	@ (8006c08 <HAL_DMA_Init+0x650>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d072      	beq.n	8006b76 <HAL_DMA_Init+0x5be>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a5d      	ldr	r2, [pc, #372]	@ (8006c0c <HAL_DMA_Init+0x654>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d06d      	beq.n	8006b76 <HAL_DMA_Init+0x5be>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a5c      	ldr	r2, [pc, #368]	@ (8006c10 <HAL_DMA_Init+0x658>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d068      	beq.n	8006b76 <HAL_DMA_Init+0x5be>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a5a      	ldr	r2, [pc, #360]	@ (8006c14 <HAL_DMA_Init+0x65c>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d063      	beq.n	8006b76 <HAL_DMA_Init+0x5be>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a59      	ldr	r2, [pc, #356]	@ (8006c18 <HAL_DMA_Init+0x660>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d05e      	beq.n	8006b76 <HAL_DMA_Init+0x5be>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a57      	ldr	r2, [pc, #348]	@ (8006c1c <HAL_DMA_Init+0x664>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d059      	beq.n	8006b76 <HAL_DMA_Init+0x5be>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a56      	ldr	r2, [pc, #344]	@ (8006c20 <HAL_DMA_Init+0x668>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d054      	beq.n	8006b76 <HAL_DMA_Init+0x5be>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a54      	ldr	r2, [pc, #336]	@ (8006c24 <HAL_DMA_Init+0x66c>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d04f      	beq.n	8006b76 <HAL_DMA_Init+0x5be>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a53      	ldr	r2, [pc, #332]	@ (8006c28 <HAL_DMA_Init+0x670>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d04a      	beq.n	8006b76 <HAL_DMA_Init+0x5be>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a51      	ldr	r2, [pc, #324]	@ (8006c2c <HAL_DMA_Init+0x674>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d045      	beq.n	8006b76 <HAL_DMA_Init+0x5be>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a50      	ldr	r2, [pc, #320]	@ (8006c30 <HAL_DMA_Init+0x678>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d040      	beq.n	8006b76 <HAL_DMA_Init+0x5be>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a4e      	ldr	r2, [pc, #312]	@ (8006c34 <HAL_DMA_Init+0x67c>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d03b      	beq.n	8006b76 <HAL_DMA_Init+0x5be>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a4d      	ldr	r2, [pc, #308]	@ (8006c38 <HAL_DMA_Init+0x680>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d036      	beq.n	8006b76 <HAL_DMA_Init+0x5be>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a4b      	ldr	r2, [pc, #300]	@ (8006c3c <HAL_DMA_Init+0x684>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d031      	beq.n	8006b76 <HAL_DMA_Init+0x5be>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a4a      	ldr	r2, [pc, #296]	@ (8006c40 <HAL_DMA_Init+0x688>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d02c      	beq.n	8006b76 <HAL_DMA_Init+0x5be>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a48      	ldr	r2, [pc, #288]	@ (8006c44 <HAL_DMA_Init+0x68c>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d027      	beq.n	8006b76 <HAL_DMA_Init+0x5be>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a47      	ldr	r2, [pc, #284]	@ (8006c48 <HAL_DMA_Init+0x690>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d022      	beq.n	8006b76 <HAL_DMA_Init+0x5be>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a45      	ldr	r2, [pc, #276]	@ (8006c4c <HAL_DMA_Init+0x694>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d01d      	beq.n	8006b76 <HAL_DMA_Init+0x5be>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a44      	ldr	r2, [pc, #272]	@ (8006c50 <HAL_DMA_Init+0x698>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d018      	beq.n	8006b76 <HAL_DMA_Init+0x5be>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a42      	ldr	r2, [pc, #264]	@ (8006c54 <HAL_DMA_Init+0x69c>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d013      	beq.n	8006b76 <HAL_DMA_Init+0x5be>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a41      	ldr	r2, [pc, #260]	@ (8006c58 <HAL_DMA_Init+0x6a0>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d00e      	beq.n	8006b76 <HAL_DMA_Init+0x5be>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a3f      	ldr	r2, [pc, #252]	@ (8006c5c <HAL_DMA_Init+0x6a4>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d009      	beq.n	8006b76 <HAL_DMA_Init+0x5be>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a3e      	ldr	r2, [pc, #248]	@ (8006c60 <HAL_DMA_Init+0x6a8>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d004      	beq.n	8006b76 <HAL_DMA_Init+0x5be>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a3c      	ldr	r2, [pc, #240]	@ (8006c64 <HAL_DMA_Init+0x6ac>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d101      	bne.n	8006b7a <HAL_DMA_Init+0x5c2>
 8006b76:	2301      	movs	r3, #1
 8006b78:	e000      	b.n	8006b7c <HAL_DMA_Init+0x5c4>
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d032      	beq.n	8006be6 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f001 fcdf 	bl	8008544 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	2b80      	cmp	r3, #128	@ 0x80
 8006b8c:	d102      	bne.n	8006b94 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	685a      	ldr	r2, [r3, #4]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b9c:	b2d2      	uxtb	r2, r2
 8006b9e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006ba8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d010      	beq.n	8006bd4 <HAL_DMA_Init+0x61c>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	2b08      	cmp	r3, #8
 8006bb8:	d80c      	bhi.n	8006bd4 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f001 fd5c 	bl	8008678 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006bd0:	605a      	str	r2, [r3, #4]
 8006bd2:	e008      	b.n	8006be6 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3718      	adds	r7, #24
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	a7fdabf8 	.word	0xa7fdabf8
 8006c04:	cccccccd 	.word	0xcccccccd
 8006c08:	40020010 	.word	0x40020010
 8006c0c:	40020028 	.word	0x40020028
 8006c10:	40020040 	.word	0x40020040
 8006c14:	40020058 	.word	0x40020058
 8006c18:	40020070 	.word	0x40020070
 8006c1c:	40020088 	.word	0x40020088
 8006c20:	400200a0 	.word	0x400200a0
 8006c24:	400200b8 	.word	0x400200b8
 8006c28:	40020410 	.word	0x40020410
 8006c2c:	40020428 	.word	0x40020428
 8006c30:	40020440 	.word	0x40020440
 8006c34:	40020458 	.word	0x40020458
 8006c38:	40020470 	.word	0x40020470
 8006c3c:	40020488 	.word	0x40020488
 8006c40:	400204a0 	.word	0x400204a0
 8006c44:	400204b8 	.word	0x400204b8
 8006c48:	58025408 	.word	0x58025408
 8006c4c:	5802541c 	.word	0x5802541c
 8006c50:	58025430 	.word	0x58025430
 8006c54:	58025444 	.word	0x58025444
 8006c58:	58025458 	.word	0x58025458
 8006c5c:	5802546c 	.word	0x5802546c
 8006c60:	58025480 	.word	0x58025480
 8006c64:	58025494 	.word	0x58025494

08006c68 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b086      	sub	sp, #24
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	607a      	str	r2, [r7, #4]
 8006c74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c76:	2300      	movs	r3, #0
 8006c78:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d101      	bne.n	8006c84 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	e226      	b.n	80070d2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d101      	bne.n	8006c92 <HAL_DMA_Start_IT+0x2a>
 8006c8e:	2302      	movs	r3, #2
 8006c90:	e21f      	b.n	80070d2 <HAL_DMA_Start_IT+0x46a>
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2201      	movs	r2, #1
 8006c96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	f040 820a 	bne.w	80070bc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2202      	movs	r2, #2
 8006cac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a68      	ldr	r2, [pc, #416]	@ (8006e5c <HAL_DMA_Start_IT+0x1f4>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d04a      	beq.n	8006d56 <HAL_DMA_Start_IT+0xee>
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a66      	ldr	r2, [pc, #408]	@ (8006e60 <HAL_DMA_Start_IT+0x1f8>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d045      	beq.n	8006d56 <HAL_DMA_Start_IT+0xee>
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a65      	ldr	r2, [pc, #404]	@ (8006e64 <HAL_DMA_Start_IT+0x1fc>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d040      	beq.n	8006d56 <HAL_DMA_Start_IT+0xee>
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a63      	ldr	r2, [pc, #396]	@ (8006e68 <HAL_DMA_Start_IT+0x200>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d03b      	beq.n	8006d56 <HAL_DMA_Start_IT+0xee>
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a62      	ldr	r2, [pc, #392]	@ (8006e6c <HAL_DMA_Start_IT+0x204>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d036      	beq.n	8006d56 <HAL_DMA_Start_IT+0xee>
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a60      	ldr	r2, [pc, #384]	@ (8006e70 <HAL_DMA_Start_IT+0x208>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d031      	beq.n	8006d56 <HAL_DMA_Start_IT+0xee>
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a5f      	ldr	r2, [pc, #380]	@ (8006e74 <HAL_DMA_Start_IT+0x20c>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d02c      	beq.n	8006d56 <HAL_DMA_Start_IT+0xee>
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a5d      	ldr	r2, [pc, #372]	@ (8006e78 <HAL_DMA_Start_IT+0x210>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d027      	beq.n	8006d56 <HAL_DMA_Start_IT+0xee>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a5c      	ldr	r2, [pc, #368]	@ (8006e7c <HAL_DMA_Start_IT+0x214>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d022      	beq.n	8006d56 <HAL_DMA_Start_IT+0xee>
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a5a      	ldr	r2, [pc, #360]	@ (8006e80 <HAL_DMA_Start_IT+0x218>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d01d      	beq.n	8006d56 <HAL_DMA_Start_IT+0xee>
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a59      	ldr	r2, [pc, #356]	@ (8006e84 <HAL_DMA_Start_IT+0x21c>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d018      	beq.n	8006d56 <HAL_DMA_Start_IT+0xee>
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a57      	ldr	r2, [pc, #348]	@ (8006e88 <HAL_DMA_Start_IT+0x220>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d013      	beq.n	8006d56 <HAL_DMA_Start_IT+0xee>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a56      	ldr	r2, [pc, #344]	@ (8006e8c <HAL_DMA_Start_IT+0x224>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d00e      	beq.n	8006d56 <HAL_DMA_Start_IT+0xee>
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a54      	ldr	r2, [pc, #336]	@ (8006e90 <HAL_DMA_Start_IT+0x228>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d009      	beq.n	8006d56 <HAL_DMA_Start_IT+0xee>
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a53      	ldr	r2, [pc, #332]	@ (8006e94 <HAL_DMA_Start_IT+0x22c>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d004      	beq.n	8006d56 <HAL_DMA_Start_IT+0xee>
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a51      	ldr	r2, [pc, #324]	@ (8006e98 <HAL_DMA_Start_IT+0x230>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d108      	bne.n	8006d68 <HAL_DMA_Start_IT+0x100>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f022 0201 	bic.w	r2, r2, #1
 8006d64:	601a      	str	r2, [r3, #0]
 8006d66:	e007      	b.n	8006d78 <HAL_DMA_Start_IT+0x110>
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f022 0201 	bic.w	r2, r2, #1
 8006d76:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	68b9      	ldr	r1, [r7, #8]
 8006d7e:	68f8      	ldr	r0, [r7, #12]
 8006d80:	f001 f906 	bl	8007f90 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a34      	ldr	r2, [pc, #208]	@ (8006e5c <HAL_DMA_Start_IT+0x1f4>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d04a      	beq.n	8006e24 <HAL_DMA_Start_IT+0x1bc>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a33      	ldr	r2, [pc, #204]	@ (8006e60 <HAL_DMA_Start_IT+0x1f8>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d045      	beq.n	8006e24 <HAL_DMA_Start_IT+0x1bc>
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a31      	ldr	r2, [pc, #196]	@ (8006e64 <HAL_DMA_Start_IT+0x1fc>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d040      	beq.n	8006e24 <HAL_DMA_Start_IT+0x1bc>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a30      	ldr	r2, [pc, #192]	@ (8006e68 <HAL_DMA_Start_IT+0x200>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d03b      	beq.n	8006e24 <HAL_DMA_Start_IT+0x1bc>
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a2e      	ldr	r2, [pc, #184]	@ (8006e6c <HAL_DMA_Start_IT+0x204>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d036      	beq.n	8006e24 <HAL_DMA_Start_IT+0x1bc>
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a2d      	ldr	r2, [pc, #180]	@ (8006e70 <HAL_DMA_Start_IT+0x208>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d031      	beq.n	8006e24 <HAL_DMA_Start_IT+0x1bc>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a2b      	ldr	r2, [pc, #172]	@ (8006e74 <HAL_DMA_Start_IT+0x20c>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d02c      	beq.n	8006e24 <HAL_DMA_Start_IT+0x1bc>
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a2a      	ldr	r2, [pc, #168]	@ (8006e78 <HAL_DMA_Start_IT+0x210>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d027      	beq.n	8006e24 <HAL_DMA_Start_IT+0x1bc>
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a28      	ldr	r2, [pc, #160]	@ (8006e7c <HAL_DMA_Start_IT+0x214>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d022      	beq.n	8006e24 <HAL_DMA_Start_IT+0x1bc>
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a27      	ldr	r2, [pc, #156]	@ (8006e80 <HAL_DMA_Start_IT+0x218>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d01d      	beq.n	8006e24 <HAL_DMA_Start_IT+0x1bc>
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a25      	ldr	r2, [pc, #148]	@ (8006e84 <HAL_DMA_Start_IT+0x21c>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d018      	beq.n	8006e24 <HAL_DMA_Start_IT+0x1bc>
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a24      	ldr	r2, [pc, #144]	@ (8006e88 <HAL_DMA_Start_IT+0x220>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d013      	beq.n	8006e24 <HAL_DMA_Start_IT+0x1bc>
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a22      	ldr	r2, [pc, #136]	@ (8006e8c <HAL_DMA_Start_IT+0x224>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d00e      	beq.n	8006e24 <HAL_DMA_Start_IT+0x1bc>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a21      	ldr	r2, [pc, #132]	@ (8006e90 <HAL_DMA_Start_IT+0x228>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d009      	beq.n	8006e24 <HAL_DMA_Start_IT+0x1bc>
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a1f      	ldr	r2, [pc, #124]	@ (8006e94 <HAL_DMA_Start_IT+0x22c>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d004      	beq.n	8006e24 <HAL_DMA_Start_IT+0x1bc>
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a1e      	ldr	r2, [pc, #120]	@ (8006e98 <HAL_DMA_Start_IT+0x230>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d101      	bne.n	8006e28 <HAL_DMA_Start_IT+0x1c0>
 8006e24:	2301      	movs	r3, #1
 8006e26:	e000      	b.n	8006e2a <HAL_DMA_Start_IT+0x1c2>
 8006e28:	2300      	movs	r3, #0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d036      	beq.n	8006e9c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f023 021e 	bic.w	r2, r3, #30
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f042 0216 	orr.w	r2, r2, #22
 8006e40:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d03e      	beq.n	8006ec8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f042 0208 	orr.w	r2, r2, #8
 8006e58:	601a      	str	r2, [r3, #0]
 8006e5a:	e035      	b.n	8006ec8 <HAL_DMA_Start_IT+0x260>
 8006e5c:	40020010 	.word	0x40020010
 8006e60:	40020028 	.word	0x40020028
 8006e64:	40020040 	.word	0x40020040
 8006e68:	40020058 	.word	0x40020058
 8006e6c:	40020070 	.word	0x40020070
 8006e70:	40020088 	.word	0x40020088
 8006e74:	400200a0 	.word	0x400200a0
 8006e78:	400200b8 	.word	0x400200b8
 8006e7c:	40020410 	.word	0x40020410
 8006e80:	40020428 	.word	0x40020428
 8006e84:	40020440 	.word	0x40020440
 8006e88:	40020458 	.word	0x40020458
 8006e8c:	40020470 	.word	0x40020470
 8006e90:	40020488 	.word	0x40020488
 8006e94:	400204a0 	.word	0x400204a0
 8006e98:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f023 020e 	bic.w	r2, r3, #14
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f042 020a 	orr.w	r2, r2, #10
 8006eae:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d007      	beq.n	8006ec8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f042 0204 	orr.w	r2, r2, #4
 8006ec6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a83      	ldr	r2, [pc, #524]	@ (80070dc <HAL_DMA_Start_IT+0x474>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d072      	beq.n	8006fb8 <HAL_DMA_Start_IT+0x350>
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a82      	ldr	r2, [pc, #520]	@ (80070e0 <HAL_DMA_Start_IT+0x478>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d06d      	beq.n	8006fb8 <HAL_DMA_Start_IT+0x350>
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a80      	ldr	r2, [pc, #512]	@ (80070e4 <HAL_DMA_Start_IT+0x47c>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d068      	beq.n	8006fb8 <HAL_DMA_Start_IT+0x350>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a7f      	ldr	r2, [pc, #508]	@ (80070e8 <HAL_DMA_Start_IT+0x480>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d063      	beq.n	8006fb8 <HAL_DMA_Start_IT+0x350>
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a7d      	ldr	r2, [pc, #500]	@ (80070ec <HAL_DMA_Start_IT+0x484>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d05e      	beq.n	8006fb8 <HAL_DMA_Start_IT+0x350>
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a7c      	ldr	r2, [pc, #496]	@ (80070f0 <HAL_DMA_Start_IT+0x488>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d059      	beq.n	8006fb8 <HAL_DMA_Start_IT+0x350>
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a7a      	ldr	r2, [pc, #488]	@ (80070f4 <HAL_DMA_Start_IT+0x48c>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d054      	beq.n	8006fb8 <HAL_DMA_Start_IT+0x350>
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a79      	ldr	r2, [pc, #484]	@ (80070f8 <HAL_DMA_Start_IT+0x490>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d04f      	beq.n	8006fb8 <HAL_DMA_Start_IT+0x350>
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a77      	ldr	r2, [pc, #476]	@ (80070fc <HAL_DMA_Start_IT+0x494>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d04a      	beq.n	8006fb8 <HAL_DMA_Start_IT+0x350>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a76      	ldr	r2, [pc, #472]	@ (8007100 <HAL_DMA_Start_IT+0x498>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d045      	beq.n	8006fb8 <HAL_DMA_Start_IT+0x350>
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a74      	ldr	r2, [pc, #464]	@ (8007104 <HAL_DMA_Start_IT+0x49c>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d040      	beq.n	8006fb8 <HAL_DMA_Start_IT+0x350>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a73      	ldr	r2, [pc, #460]	@ (8007108 <HAL_DMA_Start_IT+0x4a0>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d03b      	beq.n	8006fb8 <HAL_DMA_Start_IT+0x350>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a71      	ldr	r2, [pc, #452]	@ (800710c <HAL_DMA_Start_IT+0x4a4>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d036      	beq.n	8006fb8 <HAL_DMA_Start_IT+0x350>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a70      	ldr	r2, [pc, #448]	@ (8007110 <HAL_DMA_Start_IT+0x4a8>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d031      	beq.n	8006fb8 <HAL_DMA_Start_IT+0x350>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a6e      	ldr	r2, [pc, #440]	@ (8007114 <HAL_DMA_Start_IT+0x4ac>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d02c      	beq.n	8006fb8 <HAL_DMA_Start_IT+0x350>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a6d      	ldr	r2, [pc, #436]	@ (8007118 <HAL_DMA_Start_IT+0x4b0>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d027      	beq.n	8006fb8 <HAL_DMA_Start_IT+0x350>
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a6b      	ldr	r2, [pc, #428]	@ (800711c <HAL_DMA_Start_IT+0x4b4>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d022      	beq.n	8006fb8 <HAL_DMA_Start_IT+0x350>
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a6a      	ldr	r2, [pc, #424]	@ (8007120 <HAL_DMA_Start_IT+0x4b8>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d01d      	beq.n	8006fb8 <HAL_DMA_Start_IT+0x350>
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a68      	ldr	r2, [pc, #416]	@ (8007124 <HAL_DMA_Start_IT+0x4bc>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d018      	beq.n	8006fb8 <HAL_DMA_Start_IT+0x350>
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a67      	ldr	r2, [pc, #412]	@ (8007128 <HAL_DMA_Start_IT+0x4c0>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d013      	beq.n	8006fb8 <HAL_DMA_Start_IT+0x350>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a65      	ldr	r2, [pc, #404]	@ (800712c <HAL_DMA_Start_IT+0x4c4>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d00e      	beq.n	8006fb8 <HAL_DMA_Start_IT+0x350>
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a64      	ldr	r2, [pc, #400]	@ (8007130 <HAL_DMA_Start_IT+0x4c8>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d009      	beq.n	8006fb8 <HAL_DMA_Start_IT+0x350>
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a62      	ldr	r2, [pc, #392]	@ (8007134 <HAL_DMA_Start_IT+0x4cc>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d004      	beq.n	8006fb8 <HAL_DMA_Start_IT+0x350>
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a61      	ldr	r2, [pc, #388]	@ (8007138 <HAL_DMA_Start_IT+0x4d0>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d101      	bne.n	8006fbc <HAL_DMA_Start_IT+0x354>
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e000      	b.n	8006fbe <HAL_DMA_Start_IT+0x356>
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d01a      	beq.n	8006ff8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d007      	beq.n	8006fe0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fda:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006fde:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d007      	beq.n	8006ff8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ff2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006ff6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a37      	ldr	r2, [pc, #220]	@ (80070dc <HAL_DMA_Start_IT+0x474>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d04a      	beq.n	8007098 <HAL_DMA_Start_IT+0x430>
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a36      	ldr	r2, [pc, #216]	@ (80070e0 <HAL_DMA_Start_IT+0x478>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d045      	beq.n	8007098 <HAL_DMA_Start_IT+0x430>
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a34      	ldr	r2, [pc, #208]	@ (80070e4 <HAL_DMA_Start_IT+0x47c>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d040      	beq.n	8007098 <HAL_DMA_Start_IT+0x430>
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a33      	ldr	r2, [pc, #204]	@ (80070e8 <HAL_DMA_Start_IT+0x480>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d03b      	beq.n	8007098 <HAL_DMA_Start_IT+0x430>
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a31      	ldr	r2, [pc, #196]	@ (80070ec <HAL_DMA_Start_IT+0x484>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d036      	beq.n	8007098 <HAL_DMA_Start_IT+0x430>
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a30      	ldr	r2, [pc, #192]	@ (80070f0 <HAL_DMA_Start_IT+0x488>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d031      	beq.n	8007098 <HAL_DMA_Start_IT+0x430>
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a2e      	ldr	r2, [pc, #184]	@ (80070f4 <HAL_DMA_Start_IT+0x48c>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d02c      	beq.n	8007098 <HAL_DMA_Start_IT+0x430>
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a2d      	ldr	r2, [pc, #180]	@ (80070f8 <HAL_DMA_Start_IT+0x490>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d027      	beq.n	8007098 <HAL_DMA_Start_IT+0x430>
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a2b      	ldr	r2, [pc, #172]	@ (80070fc <HAL_DMA_Start_IT+0x494>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d022      	beq.n	8007098 <HAL_DMA_Start_IT+0x430>
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a2a      	ldr	r2, [pc, #168]	@ (8007100 <HAL_DMA_Start_IT+0x498>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d01d      	beq.n	8007098 <HAL_DMA_Start_IT+0x430>
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a28      	ldr	r2, [pc, #160]	@ (8007104 <HAL_DMA_Start_IT+0x49c>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d018      	beq.n	8007098 <HAL_DMA_Start_IT+0x430>
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a27      	ldr	r2, [pc, #156]	@ (8007108 <HAL_DMA_Start_IT+0x4a0>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d013      	beq.n	8007098 <HAL_DMA_Start_IT+0x430>
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a25      	ldr	r2, [pc, #148]	@ (800710c <HAL_DMA_Start_IT+0x4a4>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d00e      	beq.n	8007098 <HAL_DMA_Start_IT+0x430>
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a24      	ldr	r2, [pc, #144]	@ (8007110 <HAL_DMA_Start_IT+0x4a8>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d009      	beq.n	8007098 <HAL_DMA_Start_IT+0x430>
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a22      	ldr	r2, [pc, #136]	@ (8007114 <HAL_DMA_Start_IT+0x4ac>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d004      	beq.n	8007098 <HAL_DMA_Start_IT+0x430>
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a21      	ldr	r2, [pc, #132]	@ (8007118 <HAL_DMA_Start_IT+0x4b0>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d108      	bne.n	80070aa <HAL_DMA_Start_IT+0x442>
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f042 0201 	orr.w	r2, r2, #1
 80070a6:	601a      	str	r2, [r3, #0]
 80070a8:	e012      	b.n	80070d0 <HAL_DMA_Start_IT+0x468>
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f042 0201 	orr.w	r2, r2, #1
 80070b8:	601a      	str	r2, [r3, #0]
 80070ba:	e009      	b.n	80070d0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80070c2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80070d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3718      	adds	r7, #24
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	40020010 	.word	0x40020010
 80070e0:	40020028 	.word	0x40020028
 80070e4:	40020040 	.word	0x40020040
 80070e8:	40020058 	.word	0x40020058
 80070ec:	40020070 	.word	0x40020070
 80070f0:	40020088 	.word	0x40020088
 80070f4:	400200a0 	.word	0x400200a0
 80070f8:	400200b8 	.word	0x400200b8
 80070fc:	40020410 	.word	0x40020410
 8007100:	40020428 	.word	0x40020428
 8007104:	40020440 	.word	0x40020440
 8007108:	40020458 	.word	0x40020458
 800710c:	40020470 	.word	0x40020470
 8007110:	40020488 	.word	0x40020488
 8007114:	400204a0 	.word	0x400204a0
 8007118:	400204b8 	.word	0x400204b8
 800711c:	58025408 	.word	0x58025408
 8007120:	5802541c 	.word	0x5802541c
 8007124:	58025430 	.word	0x58025430
 8007128:	58025444 	.word	0x58025444
 800712c:	58025458 	.word	0x58025458
 8007130:	5802546c 	.word	0x5802546c
 8007134:	58025480 	.word	0x58025480
 8007138:	58025494 	.word	0x58025494

0800713c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b08a      	sub	sp, #40	@ 0x28
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007144:	2300      	movs	r3, #0
 8007146:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007148:	4b67      	ldr	r3, [pc, #412]	@ (80072e8 <HAL_DMA_IRQHandler+0x1ac>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a67      	ldr	r2, [pc, #412]	@ (80072ec <HAL_DMA_IRQHandler+0x1b0>)
 800714e:	fba2 2303 	umull	r2, r3, r2, r3
 8007152:	0a9b      	lsrs	r3, r3, #10
 8007154:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800715a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007160:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007162:	6a3b      	ldr	r3, [r7, #32]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a5f      	ldr	r2, [pc, #380]	@ (80072f0 <HAL_DMA_IRQHandler+0x1b4>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d04a      	beq.n	800720e <HAL_DMA_IRQHandler+0xd2>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a5d      	ldr	r2, [pc, #372]	@ (80072f4 <HAL_DMA_IRQHandler+0x1b8>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d045      	beq.n	800720e <HAL_DMA_IRQHandler+0xd2>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a5c      	ldr	r2, [pc, #368]	@ (80072f8 <HAL_DMA_IRQHandler+0x1bc>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d040      	beq.n	800720e <HAL_DMA_IRQHandler+0xd2>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a5a      	ldr	r2, [pc, #360]	@ (80072fc <HAL_DMA_IRQHandler+0x1c0>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d03b      	beq.n	800720e <HAL_DMA_IRQHandler+0xd2>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a59      	ldr	r2, [pc, #356]	@ (8007300 <HAL_DMA_IRQHandler+0x1c4>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d036      	beq.n	800720e <HAL_DMA_IRQHandler+0xd2>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a57      	ldr	r2, [pc, #348]	@ (8007304 <HAL_DMA_IRQHandler+0x1c8>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d031      	beq.n	800720e <HAL_DMA_IRQHandler+0xd2>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a56      	ldr	r2, [pc, #344]	@ (8007308 <HAL_DMA_IRQHandler+0x1cc>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d02c      	beq.n	800720e <HAL_DMA_IRQHandler+0xd2>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a54      	ldr	r2, [pc, #336]	@ (800730c <HAL_DMA_IRQHandler+0x1d0>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d027      	beq.n	800720e <HAL_DMA_IRQHandler+0xd2>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a53      	ldr	r2, [pc, #332]	@ (8007310 <HAL_DMA_IRQHandler+0x1d4>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d022      	beq.n	800720e <HAL_DMA_IRQHandler+0xd2>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a51      	ldr	r2, [pc, #324]	@ (8007314 <HAL_DMA_IRQHandler+0x1d8>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d01d      	beq.n	800720e <HAL_DMA_IRQHandler+0xd2>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a50      	ldr	r2, [pc, #320]	@ (8007318 <HAL_DMA_IRQHandler+0x1dc>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d018      	beq.n	800720e <HAL_DMA_IRQHandler+0xd2>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a4e      	ldr	r2, [pc, #312]	@ (800731c <HAL_DMA_IRQHandler+0x1e0>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d013      	beq.n	800720e <HAL_DMA_IRQHandler+0xd2>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a4d      	ldr	r2, [pc, #308]	@ (8007320 <HAL_DMA_IRQHandler+0x1e4>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d00e      	beq.n	800720e <HAL_DMA_IRQHandler+0xd2>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a4b      	ldr	r2, [pc, #300]	@ (8007324 <HAL_DMA_IRQHandler+0x1e8>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d009      	beq.n	800720e <HAL_DMA_IRQHandler+0xd2>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a4a      	ldr	r2, [pc, #296]	@ (8007328 <HAL_DMA_IRQHandler+0x1ec>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d004      	beq.n	800720e <HAL_DMA_IRQHandler+0xd2>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a48      	ldr	r2, [pc, #288]	@ (800732c <HAL_DMA_IRQHandler+0x1f0>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d101      	bne.n	8007212 <HAL_DMA_IRQHandler+0xd6>
 800720e:	2301      	movs	r3, #1
 8007210:	e000      	b.n	8007214 <HAL_DMA_IRQHandler+0xd8>
 8007212:	2300      	movs	r3, #0
 8007214:	2b00      	cmp	r3, #0
 8007216:	f000 842b 	beq.w	8007a70 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800721e:	f003 031f 	and.w	r3, r3, #31
 8007222:	2208      	movs	r2, #8
 8007224:	409a      	lsls	r2, r3
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	4013      	ands	r3, r2
 800722a:	2b00      	cmp	r3, #0
 800722c:	f000 80a2 	beq.w	8007374 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a2e      	ldr	r2, [pc, #184]	@ (80072f0 <HAL_DMA_IRQHandler+0x1b4>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d04a      	beq.n	80072d0 <HAL_DMA_IRQHandler+0x194>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a2d      	ldr	r2, [pc, #180]	@ (80072f4 <HAL_DMA_IRQHandler+0x1b8>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d045      	beq.n	80072d0 <HAL_DMA_IRQHandler+0x194>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a2b      	ldr	r2, [pc, #172]	@ (80072f8 <HAL_DMA_IRQHandler+0x1bc>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d040      	beq.n	80072d0 <HAL_DMA_IRQHandler+0x194>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a2a      	ldr	r2, [pc, #168]	@ (80072fc <HAL_DMA_IRQHandler+0x1c0>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d03b      	beq.n	80072d0 <HAL_DMA_IRQHandler+0x194>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a28      	ldr	r2, [pc, #160]	@ (8007300 <HAL_DMA_IRQHandler+0x1c4>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d036      	beq.n	80072d0 <HAL_DMA_IRQHandler+0x194>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a27      	ldr	r2, [pc, #156]	@ (8007304 <HAL_DMA_IRQHandler+0x1c8>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d031      	beq.n	80072d0 <HAL_DMA_IRQHandler+0x194>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a25      	ldr	r2, [pc, #148]	@ (8007308 <HAL_DMA_IRQHandler+0x1cc>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d02c      	beq.n	80072d0 <HAL_DMA_IRQHandler+0x194>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a24      	ldr	r2, [pc, #144]	@ (800730c <HAL_DMA_IRQHandler+0x1d0>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d027      	beq.n	80072d0 <HAL_DMA_IRQHandler+0x194>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a22      	ldr	r2, [pc, #136]	@ (8007310 <HAL_DMA_IRQHandler+0x1d4>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d022      	beq.n	80072d0 <HAL_DMA_IRQHandler+0x194>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a21      	ldr	r2, [pc, #132]	@ (8007314 <HAL_DMA_IRQHandler+0x1d8>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d01d      	beq.n	80072d0 <HAL_DMA_IRQHandler+0x194>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a1f      	ldr	r2, [pc, #124]	@ (8007318 <HAL_DMA_IRQHandler+0x1dc>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d018      	beq.n	80072d0 <HAL_DMA_IRQHandler+0x194>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a1e      	ldr	r2, [pc, #120]	@ (800731c <HAL_DMA_IRQHandler+0x1e0>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d013      	beq.n	80072d0 <HAL_DMA_IRQHandler+0x194>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a1c      	ldr	r2, [pc, #112]	@ (8007320 <HAL_DMA_IRQHandler+0x1e4>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d00e      	beq.n	80072d0 <HAL_DMA_IRQHandler+0x194>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a1b      	ldr	r2, [pc, #108]	@ (8007324 <HAL_DMA_IRQHandler+0x1e8>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d009      	beq.n	80072d0 <HAL_DMA_IRQHandler+0x194>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a19      	ldr	r2, [pc, #100]	@ (8007328 <HAL_DMA_IRQHandler+0x1ec>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d004      	beq.n	80072d0 <HAL_DMA_IRQHandler+0x194>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a18      	ldr	r2, [pc, #96]	@ (800732c <HAL_DMA_IRQHandler+0x1f0>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d12f      	bne.n	8007330 <HAL_DMA_IRQHandler+0x1f4>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f003 0304 	and.w	r3, r3, #4
 80072da:	2b00      	cmp	r3, #0
 80072dc:	bf14      	ite	ne
 80072de:	2301      	movne	r3, #1
 80072e0:	2300      	moveq	r3, #0
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	e02e      	b.n	8007344 <HAL_DMA_IRQHandler+0x208>
 80072e6:	bf00      	nop
 80072e8:	24000024 	.word	0x24000024
 80072ec:	1b4e81b5 	.word	0x1b4e81b5
 80072f0:	40020010 	.word	0x40020010
 80072f4:	40020028 	.word	0x40020028
 80072f8:	40020040 	.word	0x40020040
 80072fc:	40020058 	.word	0x40020058
 8007300:	40020070 	.word	0x40020070
 8007304:	40020088 	.word	0x40020088
 8007308:	400200a0 	.word	0x400200a0
 800730c:	400200b8 	.word	0x400200b8
 8007310:	40020410 	.word	0x40020410
 8007314:	40020428 	.word	0x40020428
 8007318:	40020440 	.word	0x40020440
 800731c:	40020458 	.word	0x40020458
 8007320:	40020470 	.word	0x40020470
 8007324:	40020488 	.word	0x40020488
 8007328:	400204a0 	.word	0x400204a0
 800732c:	400204b8 	.word	0x400204b8
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f003 0308 	and.w	r3, r3, #8
 800733a:	2b00      	cmp	r3, #0
 800733c:	bf14      	ite	ne
 800733e:	2301      	movne	r3, #1
 8007340:	2300      	moveq	r3, #0
 8007342:	b2db      	uxtb	r3, r3
 8007344:	2b00      	cmp	r3, #0
 8007346:	d015      	beq.n	8007374 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f022 0204 	bic.w	r2, r2, #4
 8007356:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800735c:	f003 031f 	and.w	r3, r3, #31
 8007360:	2208      	movs	r2, #8
 8007362:	409a      	lsls	r2, r3
 8007364:	6a3b      	ldr	r3, [r7, #32]
 8007366:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800736c:	f043 0201 	orr.w	r2, r3, #1
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007378:	f003 031f 	and.w	r3, r3, #31
 800737c:	69ba      	ldr	r2, [r7, #24]
 800737e:	fa22 f303 	lsr.w	r3, r2, r3
 8007382:	f003 0301 	and.w	r3, r3, #1
 8007386:	2b00      	cmp	r3, #0
 8007388:	d06e      	beq.n	8007468 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a69      	ldr	r2, [pc, #420]	@ (8007534 <HAL_DMA_IRQHandler+0x3f8>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d04a      	beq.n	800742a <HAL_DMA_IRQHandler+0x2ee>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a67      	ldr	r2, [pc, #412]	@ (8007538 <HAL_DMA_IRQHandler+0x3fc>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d045      	beq.n	800742a <HAL_DMA_IRQHandler+0x2ee>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a66      	ldr	r2, [pc, #408]	@ (800753c <HAL_DMA_IRQHandler+0x400>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d040      	beq.n	800742a <HAL_DMA_IRQHandler+0x2ee>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a64      	ldr	r2, [pc, #400]	@ (8007540 <HAL_DMA_IRQHandler+0x404>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d03b      	beq.n	800742a <HAL_DMA_IRQHandler+0x2ee>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a63      	ldr	r2, [pc, #396]	@ (8007544 <HAL_DMA_IRQHandler+0x408>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d036      	beq.n	800742a <HAL_DMA_IRQHandler+0x2ee>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a61      	ldr	r2, [pc, #388]	@ (8007548 <HAL_DMA_IRQHandler+0x40c>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d031      	beq.n	800742a <HAL_DMA_IRQHandler+0x2ee>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a60      	ldr	r2, [pc, #384]	@ (800754c <HAL_DMA_IRQHandler+0x410>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d02c      	beq.n	800742a <HAL_DMA_IRQHandler+0x2ee>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a5e      	ldr	r2, [pc, #376]	@ (8007550 <HAL_DMA_IRQHandler+0x414>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d027      	beq.n	800742a <HAL_DMA_IRQHandler+0x2ee>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a5d      	ldr	r2, [pc, #372]	@ (8007554 <HAL_DMA_IRQHandler+0x418>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d022      	beq.n	800742a <HAL_DMA_IRQHandler+0x2ee>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a5b      	ldr	r2, [pc, #364]	@ (8007558 <HAL_DMA_IRQHandler+0x41c>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d01d      	beq.n	800742a <HAL_DMA_IRQHandler+0x2ee>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a5a      	ldr	r2, [pc, #360]	@ (800755c <HAL_DMA_IRQHandler+0x420>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d018      	beq.n	800742a <HAL_DMA_IRQHandler+0x2ee>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a58      	ldr	r2, [pc, #352]	@ (8007560 <HAL_DMA_IRQHandler+0x424>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d013      	beq.n	800742a <HAL_DMA_IRQHandler+0x2ee>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a57      	ldr	r2, [pc, #348]	@ (8007564 <HAL_DMA_IRQHandler+0x428>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d00e      	beq.n	800742a <HAL_DMA_IRQHandler+0x2ee>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a55      	ldr	r2, [pc, #340]	@ (8007568 <HAL_DMA_IRQHandler+0x42c>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d009      	beq.n	800742a <HAL_DMA_IRQHandler+0x2ee>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a54      	ldr	r2, [pc, #336]	@ (800756c <HAL_DMA_IRQHandler+0x430>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d004      	beq.n	800742a <HAL_DMA_IRQHandler+0x2ee>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a52      	ldr	r2, [pc, #328]	@ (8007570 <HAL_DMA_IRQHandler+0x434>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d10a      	bne.n	8007440 <HAL_DMA_IRQHandler+0x304>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	695b      	ldr	r3, [r3, #20]
 8007430:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007434:	2b00      	cmp	r3, #0
 8007436:	bf14      	ite	ne
 8007438:	2301      	movne	r3, #1
 800743a:	2300      	moveq	r3, #0
 800743c:	b2db      	uxtb	r3, r3
 800743e:	e003      	b.n	8007448 <HAL_DMA_IRQHandler+0x30c>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	2300      	movs	r3, #0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d00d      	beq.n	8007468 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007450:	f003 031f 	and.w	r3, r3, #31
 8007454:	2201      	movs	r2, #1
 8007456:	409a      	lsls	r2, r3
 8007458:	6a3b      	ldr	r3, [r7, #32]
 800745a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007460:	f043 0202 	orr.w	r2, r3, #2
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800746c:	f003 031f 	and.w	r3, r3, #31
 8007470:	2204      	movs	r2, #4
 8007472:	409a      	lsls	r2, r3
 8007474:	69bb      	ldr	r3, [r7, #24]
 8007476:	4013      	ands	r3, r2
 8007478:	2b00      	cmp	r3, #0
 800747a:	f000 808f 	beq.w	800759c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a2c      	ldr	r2, [pc, #176]	@ (8007534 <HAL_DMA_IRQHandler+0x3f8>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d04a      	beq.n	800751e <HAL_DMA_IRQHandler+0x3e2>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a2a      	ldr	r2, [pc, #168]	@ (8007538 <HAL_DMA_IRQHandler+0x3fc>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d045      	beq.n	800751e <HAL_DMA_IRQHandler+0x3e2>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a29      	ldr	r2, [pc, #164]	@ (800753c <HAL_DMA_IRQHandler+0x400>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d040      	beq.n	800751e <HAL_DMA_IRQHandler+0x3e2>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a27      	ldr	r2, [pc, #156]	@ (8007540 <HAL_DMA_IRQHandler+0x404>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d03b      	beq.n	800751e <HAL_DMA_IRQHandler+0x3e2>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a26      	ldr	r2, [pc, #152]	@ (8007544 <HAL_DMA_IRQHandler+0x408>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d036      	beq.n	800751e <HAL_DMA_IRQHandler+0x3e2>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a24      	ldr	r2, [pc, #144]	@ (8007548 <HAL_DMA_IRQHandler+0x40c>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d031      	beq.n	800751e <HAL_DMA_IRQHandler+0x3e2>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a23      	ldr	r2, [pc, #140]	@ (800754c <HAL_DMA_IRQHandler+0x410>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d02c      	beq.n	800751e <HAL_DMA_IRQHandler+0x3e2>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a21      	ldr	r2, [pc, #132]	@ (8007550 <HAL_DMA_IRQHandler+0x414>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d027      	beq.n	800751e <HAL_DMA_IRQHandler+0x3e2>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a20      	ldr	r2, [pc, #128]	@ (8007554 <HAL_DMA_IRQHandler+0x418>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d022      	beq.n	800751e <HAL_DMA_IRQHandler+0x3e2>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a1e      	ldr	r2, [pc, #120]	@ (8007558 <HAL_DMA_IRQHandler+0x41c>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d01d      	beq.n	800751e <HAL_DMA_IRQHandler+0x3e2>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a1d      	ldr	r2, [pc, #116]	@ (800755c <HAL_DMA_IRQHandler+0x420>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d018      	beq.n	800751e <HAL_DMA_IRQHandler+0x3e2>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a1b      	ldr	r2, [pc, #108]	@ (8007560 <HAL_DMA_IRQHandler+0x424>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d013      	beq.n	800751e <HAL_DMA_IRQHandler+0x3e2>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a1a      	ldr	r2, [pc, #104]	@ (8007564 <HAL_DMA_IRQHandler+0x428>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d00e      	beq.n	800751e <HAL_DMA_IRQHandler+0x3e2>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a18      	ldr	r2, [pc, #96]	@ (8007568 <HAL_DMA_IRQHandler+0x42c>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d009      	beq.n	800751e <HAL_DMA_IRQHandler+0x3e2>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a17      	ldr	r2, [pc, #92]	@ (800756c <HAL_DMA_IRQHandler+0x430>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d004      	beq.n	800751e <HAL_DMA_IRQHandler+0x3e2>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a15      	ldr	r2, [pc, #84]	@ (8007570 <HAL_DMA_IRQHandler+0x434>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d12a      	bne.n	8007574 <HAL_DMA_IRQHandler+0x438>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 0302 	and.w	r3, r3, #2
 8007528:	2b00      	cmp	r3, #0
 800752a:	bf14      	ite	ne
 800752c:	2301      	movne	r3, #1
 800752e:	2300      	moveq	r3, #0
 8007530:	b2db      	uxtb	r3, r3
 8007532:	e023      	b.n	800757c <HAL_DMA_IRQHandler+0x440>
 8007534:	40020010 	.word	0x40020010
 8007538:	40020028 	.word	0x40020028
 800753c:	40020040 	.word	0x40020040
 8007540:	40020058 	.word	0x40020058
 8007544:	40020070 	.word	0x40020070
 8007548:	40020088 	.word	0x40020088
 800754c:	400200a0 	.word	0x400200a0
 8007550:	400200b8 	.word	0x400200b8
 8007554:	40020410 	.word	0x40020410
 8007558:	40020428 	.word	0x40020428
 800755c:	40020440 	.word	0x40020440
 8007560:	40020458 	.word	0x40020458
 8007564:	40020470 	.word	0x40020470
 8007568:	40020488 	.word	0x40020488
 800756c:	400204a0 	.word	0x400204a0
 8007570:	400204b8 	.word	0x400204b8
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2300      	movs	r3, #0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d00d      	beq.n	800759c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007584:	f003 031f 	and.w	r3, r3, #31
 8007588:	2204      	movs	r2, #4
 800758a:	409a      	lsls	r2, r3
 800758c:	6a3b      	ldr	r3, [r7, #32]
 800758e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007594:	f043 0204 	orr.w	r2, r3, #4
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075a0:	f003 031f 	and.w	r3, r3, #31
 80075a4:	2210      	movs	r2, #16
 80075a6:	409a      	lsls	r2, r3
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	4013      	ands	r3, r2
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	f000 80a6 	beq.w	80076fe <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a85      	ldr	r2, [pc, #532]	@ (80077cc <HAL_DMA_IRQHandler+0x690>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d04a      	beq.n	8007652 <HAL_DMA_IRQHandler+0x516>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a83      	ldr	r2, [pc, #524]	@ (80077d0 <HAL_DMA_IRQHandler+0x694>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d045      	beq.n	8007652 <HAL_DMA_IRQHandler+0x516>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a82      	ldr	r2, [pc, #520]	@ (80077d4 <HAL_DMA_IRQHandler+0x698>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d040      	beq.n	8007652 <HAL_DMA_IRQHandler+0x516>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a80      	ldr	r2, [pc, #512]	@ (80077d8 <HAL_DMA_IRQHandler+0x69c>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d03b      	beq.n	8007652 <HAL_DMA_IRQHandler+0x516>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a7f      	ldr	r2, [pc, #508]	@ (80077dc <HAL_DMA_IRQHandler+0x6a0>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d036      	beq.n	8007652 <HAL_DMA_IRQHandler+0x516>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a7d      	ldr	r2, [pc, #500]	@ (80077e0 <HAL_DMA_IRQHandler+0x6a4>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d031      	beq.n	8007652 <HAL_DMA_IRQHandler+0x516>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a7c      	ldr	r2, [pc, #496]	@ (80077e4 <HAL_DMA_IRQHandler+0x6a8>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d02c      	beq.n	8007652 <HAL_DMA_IRQHandler+0x516>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a7a      	ldr	r2, [pc, #488]	@ (80077e8 <HAL_DMA_IRQHandler+0x6ac>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d027      	beq.n	8007652 <HAL_DMA_IRQHandler+0x516>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a79      	ldr	r2, [pc, #484]	@ (80077ec <HAL_DMA_IRQHandler+0x6b0>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d022      	beq.n	8007652 <HAL_DMA_IRQHandler+0x516>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a77      	ldr	r2, [pc, #476]	@ (80077f0 <HAL_DMA_IRQHandler+0x6b4>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d01d      	beq.n	8007652 <HAL_DMA_IRQHandler+0x516>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a76      	ldr	r2, [pc, #472]	@ (80077f4 <HAL_DMA_IRQHandler+0x6b8>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d018      	beq.n	8007652 <HAL_DMA_IRQHandler+0x516>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a74      	ldr	r2, [pc, #464]	@ (80077f8 <HAL_DMA_IRQHandler+0x6bc>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d013      	beq.n	8007652 <HAL_DMA_IRQHandler+0x516>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a73      	ldr	r2, [pc, #460]	@ (80077fc <HAL_DMA_IRQHandler+0x6c0>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d00e      	beq.n	8007652 <HAL_DMA_IRQHandler+0x516>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a71      	ldr	r2, [pc, #452]	@ (8007800 <HAL_DMA_IRQHandler+0x6c4>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d009      	beq.n	8007652 <HAL_DMA_IRQHandler+0x516>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a70      	ldr	r2, [pc, #448]	@ (8007804 <HAL_DMA_IRQHandler+0x6c8>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d004      	beq.n	8007652 <HAL_DMA_IRQHandler+0x516>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a6e      	ldr	r2, [pc, #440]	@ (8007808 <HAL_DMA_IRQHandler+0x6cc>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d10a      	bne.n	8007668 <HAL_DMA_IRQHandler+0x52c>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 0308 	and.w	r3, r3, #8
 800765c:	2b00      	cmp	r3, #0
 800765e:	bf14      	ite	ne
 8007660:	2301      	movne	r3, #1
 8007662:	2300      	moveq	r3, #0
 8007664:	b2db      	uxtb	r3, r3
 8007666:	e009      	b.n	800767c <HAL_DMA_IRQHandler+0x540>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f003 0304 	and.w	r3, r3, #4
 8007672:	2b00      	cmp	r3, #0
 8007674:	bf14      	ite	ne
 8007676:	2301      	movne	r3, #1
 8007678:	2300      	moveq	r3, #0
 800767a:	b2db      	uxtb	r3, r3
 800767c:	2b00      	cmp	r3, #0
 800767e:	d03e      	beq.n	80076fe <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007684:	f003 031f 	and.w	r3, r3, #31
 8007688:	2210      	movs	r2, #16
 800768a:	409a      	lsls	r2, r3
 800768c:	6a3b      	ldr	r3, [r7, #32]
 800768e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800769a:	2b00      	cmp	r3, #0
 800769c:	d018      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d108      	bne.n	80076be <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d024      	beq.n	80076fe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	4798      	blx	r3
 80076bc:	e01f      	b.n	80076fe <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d01b      	beq.n	80076fe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	4798      	blx	r3
 80076ce:	e016      	b.n	80076fe <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d107      	bne.n	80076ee <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f022 0208 	bic.w	r2, r2, #8
 80076ec:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d003      	beq.n	80076fe <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007702:	f003 031f 	and.w	r3, r3, #31
 8007706:	2220      	movs	r2, #32
 8007708:	409a      	lsls	r2, r3
 800770a:	69bb      	ldr	r3, [r7, #24]
 800770c:	4013      	ands	r3, r2
 800770e:	2b00      	cmp	r3, #0
 8007710:	f000 8110 	beq.w	8007934 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a2c      	ldr	r2, [pc, #176]	@ (80077cc <HAL_DMA_IRQHandler+0x690>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d04a      	beq.n	80077b4 <HAL_DMA_IRQHandler+0x678>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a2b      	ldr	r2, [pc, #172]	@ (80077d0 <HAL_DMA_IRQHandler+0x694>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d045      	beq.n	80077b4 <HAL_DMA_IRQHandler+0x678>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a29      	ldr	r2, [pc, #164]	@ (80077d4 <HAL_DMA_IRQHandler+0x698>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d040      	beq.n	80077b4 <HAL_DMA_IRQHandler+0x678>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a28      	ldr	r2, [pc, #160]	@ (80077d8 <HAL_DMA_IRQHandler+0x69c>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d03b      	beq.n	80077b4 <HAL_DMA_IRQHandler+0x678>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a26      	ldr	r2, [pc, #152]	@ (80077dc <HAL_DMA_IRQHandler+0x6a0>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d036      	beq.n	80077b4 <HAL_DMA_IRQHandler+0x678>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a25      	ldr	r2, [pc, #148]	@ (80077e0 <HAL_DMA_IRQHandler+0x6a4>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d031      	beq.n	80077b4 <HAL_DMA_IRQHandler+0x678>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a23      	ldr	r2, [pc, #140]	@ (80077e4 <HAL_DMA_IRQHandler+0x6a8>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d02c      	beq.n	80077b4 <HAL_DMA_IRQHandler+0x678>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a22      	ldr	r2, [pc, #136]	@ (80077e8 <HAL_DMA_IRQHandler+0x6ac>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d027      	beq.n	80077b4 <HAL_DMA_IRQHandler+0x678>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a20      	ldr	r2, [pc, #128]	@ (80077ec <HAL_DMA_IRQHandler+0x6b0>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d022      	beq.n	80077b4 <HAL_DMA_IRQHandler+0x678>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a1f      	ldr	r2, [pc, #124]	@ (80077f0 <HAL_DMA_IRQHandler+0x6b4>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d01d      	beq.n	80077b4 <HAL_DMA_IRQHandler+0x678>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a1d      	ldr	r2, [pc, #116]	@ (80077f4 <HAL_DMA_IRQHandler+0x6b8>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d018      	beq.n	80077b4 <HAL_DMA_IRQHandler+0x678>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a1c      	ldr	r2, [pc, #112]	@ (80077f8 <HAL_DMA_IRQHandler+0x6bc>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d013      	beq.n	80077b4 <HAL_DMA_IRQHandler+0x678>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a1a      	ldr	r2, [pc, #104]	@ (80077fc <HAL_DMA_IRQHandler+0x6c0>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d00e      	beq.n	80077b4 <HAL_DMA_IRQHandler+0x678>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a19      	ldr	r2, [pc, #100]	@ (8007800 <HAL_DMA_IRQHandler+0x6c4>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d009      	beq.n	80077b4 <HAL_DMA_IRQHandler+0x678>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a17      	ldr	r2, [pc, #92]	@ (8007804 <HAL_DMA_IRQHandler+0x6c8>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d004      	beq.n	80077b4 <HAL_DMA_IRQHandler+0x678>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a16      	ldr	r2, [pc, #88]	@ (8007808 <HAL_DMA_IRQHandler+0x6cc>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d12b      	bne.n	800780c <HAL_DMA_IRQHandler+0x6d0>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f003 0310 	and.w	r3, r3, #16
 80077be:	2b00      	cmp	r3, #0
 80077c0:	bf14      	ite	ne
 80077c2:	2301      	movne	r3, #1
 80077c4:	2300      	moveq	r3, #0
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	e02a      	b.n	8007820 <HAL_DMA_IRQHandler+0x6e4>
 80077ca:	bf00      	nop
 80077cc:	40020010 	.word	0x40020010
 80077d0:	40020028 	.word	0x40020028
 80077d4:	40020040 	.word	0x40020040
 80077d8:	40020058 	.word	0x40020058
 80077dc:	40020070 	.word	0x40020070
 80077e0:	40020088 	.word	0x40020088
 80077e4:	400200a0 	.word	0x400200a0
 80077e8:	400200b8 	.word	0x400200b8
 80077ec:	40020410 	.word	0x40020410
 80077f0:	40020428 	.word	0x40020428
 80077f4:	40020440 	.word	0x40020440
 80077f8:	40020458 	.word	0x40020458
 80077fc:	40020470 	.word	0x40020470
 8007800:	40020488 	.word	0x40020488
 8007804:	400204a0 	.word	0x400204a0
 8007808:	400204b8 	.word	0x400204b8
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f003 0302 	and.w	r3, r3, #2
 8007816:	2b00      	cmp	r3, #0
 8007818:	bf14      	ite	ne
 800781a:	2301      	movne	r3, #1
 800781c:	2300      	moveq	r3, #0
 800781e:	b2db      	uxtb	r3, r3
 8007820:	2b00      	cmp	r3, #0
 8007822:	f000 8087 	beq.w	8007934 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800782a:	f003 031f 	and.w	r3, r3, #31
 800782e:	2220      	movs	r2, #32
 8007830:	409a      	lsls	r2, r3
 8007832:	6a3b      	ldr	r3, [r7, #32]
 8007834:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800783c:	b2db      	uxtb	r3, r3
 800783e:	2b04      	cmp	r3, #4
 8007840:	d139      	bne.n	80078b6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f022 0216 	bic.w	r2, r2, #22
 8007850:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	695a      	ldr	r2, [r3, #20]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007860:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007866:	2b00      	cmp	r3, #0
 8007868:	d103      	bne.n	8007872 <HAL_DMA_IRQHandler+0x736>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800786e:	2b00      	cmp	r3, #0
 8007870:	d007      	beq.n	8007882 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f022 0208 	bic.w	r2, r2, #8
 8007880:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007886:	f003 031f 	and.w	r3, r3, #31
 800788a:	223f      	movs	r2, #63	@ 0x3f
 800788c:	409a      	lsls	r2, r3
 800788e:	6a3b      	ldr	r3, [r7, #32]
 8007890:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2201      	movs	r2, #1
 8007896:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	f000 834a 	beq.w	8007f40 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	4798      	blx	r3
          }
          return;
 80078b4:	e344      	b.n	8007f40 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d018      	beq.n	80078f6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d108      	bne.n	80078e4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d02c      	beq.n	8007934 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	4798      	blx	r3
 80078e2:	e027      	b.n	8007934 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d023      	beq.n	8007934 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	4798      	blx	r3
 80078f4:	e01e      	b.n	8007934 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007900:	2b00      	cmp	r3, #0
 8007902:	d10f      	bne.n	8007924 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f022 0210 	bic.w	r2, r2, #16
 8007912:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2201      	movs	r2, #1
 8007918:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007928:	2b00      	cmp	r3, #0
 800792a:	d003      	beq.n	8007934 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007938:	2b00      	cmp	r3, #0
 800793a:	f000 8306 	beq.w	8007f4a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007942:	f003 0301 	and.w	r3, r3, #1
 8007946:	2b00      	cmp	r3, #0
 8007948:	f000 8088 	beq.w	8007a5c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2204      	movs	r2, #4
 8007950:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a7a      	ldr	r2, [pc, #488]	@ (8007b44 <HAL_DMA_IRQHandler+0xa08>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d04a      	beq.n	80079f4 <HAL_DMA_IRQHandler+0x8b8>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a79      	ldr	r2, [pc, #484]	@ (8007b48 <HAL_DMA_IRQHandler+0xa0c>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d045      	beq.n	80079f4 <HAL_DMA_IRQHandler+0x8b8>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a77      	ldr	r2, [pc, #476]	@ (8007b4c <HAL_DMA_IRQHandler+0xa10>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d040      	beq.n	80079f4 <HAL_DMA_IRQHandler+0x8b8>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a76      	ldr	r2, [pc, #472]	@ (8007b50 <HAL_DMA_IRQHandler+0xa14>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d03b      	beq.n	80079f4 <HAL_DMA_IRQHandler+0x8b8>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a74      	ldr	r2, [pc, #464]	@ (8007b54 <HAL_DMA_IRQHandler+0xa18>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d036      	beq.n	80079f4 <HAL_DMA_IRQHandler+0x8b8>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a73      	ldr	r2, [pc, #460]	@ (8007b58 <HAL_DMA_IRQHandler+0xa1c>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d031      	beq.n	80079f4 <HAL_DMA_IRQHandler+0x8b8>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a71      	ldr	r2, [pc, #452]	@ (8007b5c <HAL_DMA_IRQHandler+0xa20>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d02c      	beq.n	80079f4 <HAL_DMA_IRQHandler+0x8b8>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a70      	ldr	r2, [pc, #448]	@ (8007b60 <HAL_DMA_IRQHandler+0xa24>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d027      	beq.n	80079f4 <HAL_DMA_IRQHandler+0x8b8>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a6e      	ldr	r2, [pc, #440]	@ (8007b64 <HAL_DMA_IRQHandler+0xa28>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d022      	beq.n	80079f4 <HAL_DMA_IRQHandler+0x8b8>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a6d      	ldr	r2, [pc, #436]	@ (8007b68 <HAL_DMA_IRQHandler+0xa2c>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d01d      	beq.n	80079f4 <HAL_DMA_IRQHandler+0x8b8>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a6b      	ldr	r2, [pc, #428]	@ (8007b6c <HAL_DMA_IRQHandler+0xa30>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d018      	beq.n	80079f4 <HAL_DMA_IRQHandler+0x8b8>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a6a      	ldr	r2, [pc, #424]	@ (8007b70 <HAL_DMA_IRQHandler+0xa34>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d013      	beq.n	80079f4 <HAL_DMA_IRQHandler+0x8b8>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a68      	ldr	r2, [pc, #416]	@ (8007b74 <HAL_DMA_IRQHandler+0xa38>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d00e      	beq.n	80079f4 <HAL_DMA_IRQHandler+0x8b8>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a67      	ldr	r2, [pc, #412]	@ (8007b78 <HAL_DMA_IRQHandler+0xa3c>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d009      	beq.n	80079f4 <HAL_DMA_IRQHandler+0x8b8>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a65      	ldr	r2, [pc, #404]	@ (8007b7c <HAL_DMA_IRQHandler+0xa40>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d004      	beq.n	80079f4 <HAL_DMA_IRQHandler+0x8b8>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a64      	ldr	r2, [pc, #400]	@ (8007b80 <HAL_DMA_IRQHandler+0xa44>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d108      	bne.n	8007a06 <HAL_DMA_IRQHandler+0x8ca>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f022 0201 	bic.w	r2, r2, #1
 8007a02:	601a      	str	r2, [r3, #0]
 8007a04:	e007      	b.n	8007a16 <HAL_DMA_IRQHandler+0x8da>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f022 0201 	bic.w	r2, r2, #1
 8007a14:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	3301      	adds	r3, #1
 8007a1a:	60fb      	str	r3, [r7, #12]
 8007a1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d307      	bcc.n	8007a32 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f003 0301 	and.w	r3, r3, #1
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d1f2      	bne.n	8007a16 <HAL_DMA_IRQHandler+0x8da>
 8007a30:	e000      	b.n	8007a34 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007a32:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f003 0301 	and.w	r3, r3, #1
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d004      	beq.n	8007a4c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2203      	movs	r2, #3
 8007a46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8007a4a:	e003      	b.n	8007a54 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f000 8272 	beq.w	8007f4a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	4798      	blx	r3
 8007a6e:	e26c      	b.n	8007f4a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a43      	ldr	r2, [pc, #268]	@ (8007b84 <HAL_DMA_IRQHandler+0xa48>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d022      	beq.n	8007ac0 <HAL_DMA_IRQHandler+0x984>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a42      	ldr	r2, [pc, #264]	@ (8007b88 <HAL_DMA_IRQHandler+0xa4c>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d01d      	beq.n	8007ac0 <HAL_DMA_IRQHandler+0x984>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a40      	ldr	r2, [pc, #256]	@ (8007b8c <HAL_DMA_IRQHandler+0xa50>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d018      	beq.n	8007ac0 <HAL_DMA_IRQHandler+0x984>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a3f      	ldr	r2, [pc, #252]	@ (8007b90 <HAL_DMA_IRQHandler+0xa54>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d013      	beq.n	8007ac0 <HAL_DMA_IRQHandler+0x984>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a3d      	ldr	r2, [pc, #244]	@ (8007b94 <HAL_DMA_IRQHandler+0xa58>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d00e      	beq.n	8007ac0 <HAL_DMA_IRQHandler+0x984>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a3c      	ldr	r2, [pc, #240]	@ (8007b98 <HAL_DMA_IRQHandler+0xa5c>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d009      	beq.n	8007ac0 <HAL_DMA_IRQHandler+0x984>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a3a      	ldr	r2, [pc, #232]	@ (8007b9c <HAL_DMA_IRQHandler+0xa60>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d004      	beq.n	8007ac0 <HAL_DMA_IRQHandler+0x984>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a39      	ldr	r2, [pc, #228]	@ (8007ba0 <HAL_DMA_IRQHandler+0xa64>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d101      	bne.n	8007ac4 <HAL_DMA_IRQHandler+0x988>
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	e000      	b.n	8007ac6 <HAL_DMA_IRQHandler+0x98a>
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	f000 823f 	beq.w	8007f4a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ad8:	f003 031f 	and.w	r3, r3, #31
 8007adc:	2204      	movs	r2, #4
 8007ade:	409a      	lsls	r2, r3
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	4013      	ands	r3, r2
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	f000 80cd 	beq.w	8007c84 <HAL_DMA_IRQHandler+0xb48>
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	f003 0304 	and.w	r3, r3, #4
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	f000 80c7 	beq.w	8007c84 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007afa:	f003 031f 	and.w	r3, r3, #31
 8007afe:	2204      	movs	r2, #4
 8007b00:	409a      	lsls	r2, r3
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d049      	beq.n	8007ba4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d109      	bne.n	8007b2e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	f000 8210 	beq.w	8007f44 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b2c:	e20a      	b.n	8007f44 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	f000 8206 	beq.w	8007f44 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b40:	e200      	b.n	8007f44 <HAL_DMA_IRQHandler+0xe08>
 8007b42:	bf00      	nop
 8007b44:	40020010 	.word	0x40020010
 8007b48:	40020028 	.word	0x40020028
 8007b4c:	40020040 	.word	0x40020040
 8007b50:	40020058 	.word	0x40020058
 8007b54:	40020070 	.word	0x40020070
 8007b58:	40020088 	.word	0x40020088
 8007b5c:	400200a0 	.word	0x400200a0
 8007b60:	400200b8 	.word	0x400200b8
 8007b64:	40020410 	.word	0x40020410
 8007b68:	40020428 	.word	0x40020428
 8007b6c:	40020440 	.word	0x40020440
 8007b70:	40020458 	.word	0x40020458
 8007b74:	40020470 	.word	0x40020470
 8007b78:	40020488 	.word	0x40020488
 8007b7c:	400204a0 	.word	0x400204a0
 8007b80:	400204b8 	.word	0x400204b8
 8007b84:	58025408 	.word	0x58025408
 8007b88:	5802541c 	.word	0x5802541c
 8007b8c:	58025430 	.word	0x58025430
 8007b90:	58025444 	.word	0x58025444
 8007b94:	58025458 	.word	0x58025458
 8007b98:	5802546c 	.word	0x5802546c
 8007b9c:	58025480 	.word	0x58025480
 8007ba0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	f003 0320 	and.w	r3, r3, #32
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d160      	bne.n	8007c70 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a7f      	ldr	r2, [pc, #508]	@ (8007db0 <HAL_DMA_IRQHandler+0xc74>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d04a      	beq.n	8007c4e <HAL_DMA_IRQHandler+0xb12>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a7d      	ldr	r2, [pc, #500]	@ (8007db4 <HAL_DMA_IRQHandler+0xc78>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d045      	beq.n	8007c4e <HAL_DMA_IRQHandler+0xb12>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a7c      	ldr	r2, [pc, #496]	@ (8007db8 <HAL_DMA_IRQHandler+0xc7c>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d040      	beq.n	8007c4e <HAL_DMA_IRQHandler+0xb12>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a7a      	ldr	r2, [pc, #488]	@ (8007dbc <HAL_DMA_IRQHandler+0xc80>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d03b      	beq.n	8007c4e <HAL_DMA_IRQHandler+0xb12>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a79      	ldr	r2, [pc, #484]	@ (8007dc0 <HAL_DMA_IRQHandler+0xc84>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d036      	beq.n	8007c4e <HAL_DMA_IRQHandler+0xb12>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a77      	ldr	r2, [pc, #476]	@ (8007dc4 <HAL_DMA_IRQHandler+0xc88>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d031      	beq.n	8007c4e <HAL_DMA_IRQHandler+0xb12>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a76      	ldr	r2, [pc, #472]	@ (8007dc8 <HAL_DMA_IRQHandler+0xc8c>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d02c      	beq.n	8007c4e <HAL_DMA_IRQHandler+0xb12>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a74      	ldr	r2, [pc, #464]	@ (8007dcc <HAL_DMA_IRQHandler+0xc90>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d027      	beq.n	8007c4e <HAL_DMA_IRQHandler+0xb12>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a73      	ldr	r2, [pc, #460]	@ (8007dd0 <HAL_DMA_IRQHandler+0xc94>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d022      	beq.n	8007c4e <HAL_DMA_IRQHandler+0xb12>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a71      	ldr	r2, [pc, #452]	@ (8007dd4 <HAL_DMA_IRQHandler+0xc98>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d01d      	beq.n	8007c4e <HAL_DMA_IRQHandler+0xb12>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a70      	ldr	r2, [pc, #448]	@ (8007dd8 <HAL_DMA_IRQHandler+0xc9c>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d018      	beq.n	8007c4e <HAL_DMA_IRQHandler+0xb12>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a6e      	ldr	r2, [pc, #440]	@ (8007ddc <HAL_DMA_IRQHandler+0xca0>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d013      	beq.n	8007c4e <HAL_DMA_IRQHandler+0xb12>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a6d      	ldr	r2, [pc, #436]	@ (8007de0 <HAL_DMA_IRQHandler+0xca4>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d00e      	beq.n	8007c4e <HAL_DMA_IRQHandler+0xb12>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a6b      	ldr	r2, [pc, #428]	@ (8007de4 <HAL_DMA_IRQHandler+0xca8>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d009      	beq.n	8007c4e <HAL_DMA_IRQHandler+0xb12>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a6a      	ldr	r2, [pc, #424]	@ (8007de8 <HAL_DMA_IRQHandler+0xcac>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d004      	beq.n	8007c4e <HAL_DMA_IRQHandler+0xb12>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a68      	ldr	r2, [pc, #416]	@ (8007dec <HAL_DMA_IRQHandler+0xcb0>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d108      	bne.n	8007c60 <HAL_DMA_IRQHandler+0xb24>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f022 0208 	bic.w	r2, r2, #8
 8007c5c:	601a      	str	r2, [r3, #0]
 8007c5e:	e007      	b.n	8007c70 <HAL_DMA_IRQHandler+0xb34>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f022 0204 	bic.w	r2, r2, #4
 8007c6e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	f000 8165 	beq.w	8007f44 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c82:	e15f      	b.n	8007f44 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c88:	f003 031f 	and.w	r3, r3, #31
 8007c8c:	2202      	movs	r2, #2
 8007c8e:	409a      	lsls	r2, r3
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	4013      	ands	r3, r2
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	f000 80c5 	beq.w	8007e24 <HAL_DMA_IRQHandler+0xce8>
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	f003 0302 	and.w	r3, r3, #2
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	f000 80bf 	beq.w	8007e24 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007caa:	f003 031f 	and.w	r3, r3, #31
 8007cae:	2202      	movs	r2, #2
 8007cb0:	409a      	lsls	r2, r3
 8007cb2:	69fb      	ldr	r3, [r7, #28]
 8007cb4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d018      	beq.n	8007cf2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d109      	bne.n	8007cde <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	f000 813a 	beq.w	8007f48 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007cdc:	e134      	b.n	8007f48 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	f000 8130 	beq.w	8007f48 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007cf0:	e12a      	b.n	8007f48 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	f003 0320 	and.w	r3, r3, #32
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	f040 8089 	bne.w	8007e10 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a2b      	ldr	r2, [pc, #172]	@ (8007db0 <HAL_DMA_IRQHandler+0xc74>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d04a      	beq.n	8007d9e <HAL_DMA_IRQHandler+0xc62>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a29      	ldr	r2, [pc, #164]	@ (8007db4 <HAL_DMA_IRQHandler+0xc78>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d045      	beq.n	8007d9e <HAL_DMA_IRQHandler+0xc62>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a28      	ldr	r2, [pc, #160]	@ (8007db8 <HAL_DMA_IRQHandler+0xc7c>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d040      	beq.n	8007d9e <HAL_DMA_IRQHandler+0xc62>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a26      	ldr	r2, [pc, #152]	@ (8007dbc <HAL_DMA_IRQHandler+0xc80>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d03b      	beq.n	8007d9e <HAL_DMA_IRQHandler+0xc62>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a25      	ldr	r2, [pc, #148]	@ (8007dc0 <HAL_DMA_IRQHandler+0xc84>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d036      	beq.n	8007d9e <HAL_DMA_IRQHandler+0xc62>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a23      	ldr	r2, [pc, #140]	@ (8007dc4 <HAL_DMA_IRQHandler+0xc88>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d031      	beq.n	8007d9e <HAL_DMA_IRQHandler+0xc62>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a22      	ldr	r2, [pc, #136]	@ (8007dc8 <HAL_DMA_IRQHandler+0xc8c>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d02c      	beq.n	8007d9e <HAL_DMA_IRQHandler+0xc62>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a20      	ldr	r2, [pc, #128]	@ (8007dcc <HAL_DMA_IRQHandler+0xc90>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d027      	beq.n	8007d9e <HAL_DMA_IRQHandler+0xc62>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a1f      	ldr	r2, [pc, #124]	@ (8007dd0 <HAL_DMA_IRQHandler+0xc94>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d022      	beq.n	8007d9e <HAL_DMA_IRQHandler+0xc62>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a1d      	ldr	r2, [pc, #116]	@ (8007dd4 <HAL_DMA_IRQHandler+0xc98>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d01d      	beq.n	8007d9e <HAL_DMA_IRQHandler+0xc62>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a1c      	ldr	r2, [pc, #112]	@ (8007dd8 <HAL_DMA_IRQHandler+0xc9c>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d018      	beq.n	8007d9e <HAL_DMA_IRQHandler+0xc62>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a1a      	ldr	r2, [pc, #104]	@ (8007ddc <HAL_DMA_IRQHandler+0xca0>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d013      	beq.n	8007d9e <HAL_DMA_IRQHandler+0xc62>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a19      	ldr	r2, [pc, #100]	@ (8007de0 <HAL_DMA_IRQHandler+0xca4>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d00e      	beq.n	8007d9e <HAL_DMA_IRQHandler+0xc62>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a17      	ldr	r2, [pc, #92]	@ (8007de4 <HAL_DMA_IRQHandler+0xca8>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d009      	beq.n	8007d9e <HAL_DMA_IRQHandler+0xc62>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a16      	ldr	r2, [pc, #88]	@ (8007de8 <HAL_DMA_IRQHandler+0xcac>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d004      	beq.n	8007d9e <HAL_DMA_IRQHandler+0xc62>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a14      	ldr	r2, [pc, #80]	@ (8007dec <HAL_DMA_IRQHandler+0xcb0>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d128      	bne.n	8007df0 <HAL_DMA_IRQHandler+0xcb4>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f022 0214 	bic.w	r2, r2, #20
 8007dac:	601a      	str	r2, [r3, #0]
 8007dae:	e027      	b.n	8007e00 <HAL_DMA_IRQHandler+0xcc4>
 8007db0:	40020010 	.word	0x40020010
 8007db4:	40020028 	.word	0x40020028
 8007db8:	40020040 	.word	0x40020040
 8007dbc:	40020058 	.word	0x40020058
 8007dc0:	40020070 	.word	0x40020070
 8007dc4:	40020088 	.word	0x40020088
 8007dc8:	400200a0 	.word	0x400200a0
 8007dcc:	400200b8 	.word	0x400200b8
 8007dd0:	40020410 	.word	0x40020410
 8007dd4:	40020428 	.word	0x40020428
 8007dd8:	40020440 	.word	0x40020440
 8007ddc:	40020458 	.word	0x40020458
 8007de0:	40020470 	.word	0x40020470
 8007de4:	40020488 	.word	0x40020488
 8007de8:	400204a0 	.word	0x400204a0
 8007dec:	400204b8 	.word	0x400204b8
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f022 020a 	bic.w	r2, r2, #10
 8007dfe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	f000 8097 	beq.w	8007f48 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e22:	e091      	b.n	8007f48 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e28:	f003 031f 	and.w	r3, r3, #31
 8007e2c:	2208      	movs	r2, #8
 8007e2e:	409a      	lsls	r2, r3
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	4013      	ands	r3, r2
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	f000 8088 	beq.w	8007f4a <HAL_DMA_IRQHandler+0xe0e>
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	f003 0308 	and.w	r3, r3, #8
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	f000 8082 	beq.w	8007f4a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a41      	ldr	r2, [pc, #260]	@ (8007f50 <HAL_DMA_IRQHandler+0xe14>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d04a      	beq.n	8007ee6 <HAL_DMA_IRQHandler+0xdaa>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a3f      	ldr	r2, [pc, #252]	@ (8007f54 <HAL_DMA_IRQHandler+0xe18>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d045      	beq.n	8007ee6 <HAL_DMA_IRQHandler+0xdaa>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a3e      	ldr	r2, [pc, #248]	@ (8007f58 <HAL_DMA_IRQHandler+0xe1c>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d040      	beq.n	8007ee6 <HAL_DMA_IRQHandler+0xdaa>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a3c      	ldr	r2, [pc, #240]	@ (8007f5c <HAL_DMA_IRQHandler+0xe20>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d03b      	beq.n	8007ee6 <HAL_DMA_IRQHandler+0xdaa>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a3b      	ldr	r2, [pc, #236]	@ (8007f60 <HAL_DMA_IRQHandler+0xe24>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d036      	beq.n	8007ee6 <HAL_DMA_IRQHandler+0xdaa>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a39      	ldr	r2, [pc, #228]	@ (8007f64 <HAL_DMA_IRQHandler+0xe28>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d031      	beq.n	8007ee6 <HAL_DMA_IRQHandler+0xdaa>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a38      	ldr	r2, [pc, #224]	@ (8007f68 <HAL_DMA_IRQHandler+0xe2c>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d02c      	beq.n	8007ee6 <HAL_DMA_IRQHandler+0xdaa>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a36      	ldr	r2, [pc, #216]	@ (8007f6c <HAL_DMA_IRQHandler+0xe30>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d027      	beq.n	8007ee6 <HAL_DMA_IRQHandler+0xdaa>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a35      	ldr	r2, [pc, #212]	@ (8007f70 <HAL_DMA_IRQHandler+0xe34>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d022      	beq.n	8007ee6 <HAL_DMA_IRQHandler+0xdaa>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a33      	ldr	r2, [pc, #204]	@ (8007f74 <HAL_DMA_IRQHandler+0xe38>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d01d      	beq.n	8007ee6 <HAL_DMA_IRQHandler+0xdaa>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a32      	ldr	r2, [pc, #200]	@ (8007f78 <HAL_DMA_IRQHandler+0xe3c>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d018      	beq.n	8007ee6 <HAL_DMA_IRQHandler+0xdaa>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a30      	ldr	r2, [pc, #192]	@ (8007f7c <HAL_DMA_IRQHandler+0xe40>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d013      	beq.n	8007ee6 <HAL_DMA_IRQHandler+0xdaa>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a2f      	ldr	r2, [pc, #188]	@ (8007f80 <HAL_DMA_IRQHandler+0xe44>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d00e      	beq.n	8007ee6 <HAL_DMA_IRQHandler+0xdaa>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a2d      	ldr	r2, [pc, #180]	@ (8007f84 <HAL_DMA_IRQHandler+0xe48>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d009      	beq.n	8007ee6 <HAL_DMA_IRQHandler+0xdaa>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a2c      	ldr	r2, [pc, #176]	@ (8007f88 <HAL_DMA_IRQHandler+0xe4c>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d004      	beq.n	8007ee6 <HAL_DMA_IRQHandler+0xdaa>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a2a      	ldr	r2, [pc, #168]	@ (8007f8c <HAL_DMA_IRQHandler+0xe50>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d108      	bne.n	8007ef8 <HAL_DMA_IRQHandler+0xdbc>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f022 021c 	bic.w	r2, r2, #28
 8007ef4:	601a      	str	r2, [r3, #0]
 8007ef6:	e007      	b.n	8007f08 <HAL_DMA_IRQHandler+0xdcc>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f022 020e 	bic.w	r2, r2, #14
 8007f06:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f0c:	f003 031f 	and.w	r3, r3, #31
 8007f10:	2201      	movs	r2, #1
 8007f12:	409a      	lsls	r2, r3
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2201      	movs	r2, #1
 8007f22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d009      	beq.n	8007f4a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	4798      	blx	r3
 8007f3e:	e004      	b.n	8007f4a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007f40:	bf00      	nop
 8007f42:	e002      	b.n	8007f4a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f44:	bf00      	nop
 8007f46:	e000      	b.n	8007f4a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f48:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007f4a:	3728      	adds	r7, #40	@ 0x28
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}
 8007f50:	40020010 	.word	0x40020010
 8007f54:	40020028 	.word	0x40020028
 8007f58:	40020040 	.word	0x40020040
 8007f5c:	40020058 	.word	0x40020058
 8007f60:	40020070 	.word	0x40020070
 8007f64:	40020088 	.word	0x40020088
 8007f68:	400200a0 	.word	0x400200a0
 8007f6c:	400200b8 	.word	0x400200b8
 8007f70:	40020410 	.word	0x40020410
 8007f74:	40020428 	.word	0x40020428
 8007f78:	40020440 	.word	0x40020440
 8007f7c:	40020458 	.word	0x40020458
 8007f80:	40020470 	.word	0x40020470
 8007f84:	40020488 	.word	0x40020488
 8007f88:	400204a0 	.word	0x400204a0
 8007f8c:	400204b8 	.word	0x400204b8

08007f90 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b087      	sub	sp, #28
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	607a      	str	r2, [r7, #4]
 8007f9c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fa2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fa8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a7f      	ldr	r2, [pc, #508]	@ (80081ac <DMA_SetConfig+0x21c>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d072      	beq.n	800809a <DMA_SetConfig+0x10a>
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a7d      	ldr	r2, [pc, #500]	@ (80081b0 <DMA_SetConfig+0x220>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d06d      	beq.n	800809a <DMA_SetConfig+0x10a>
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a7c      	ldr	r2, [pc, #496]	@ (80081b4 <DMA_SetConfig+0x224>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d068      	beq.n	800809a <DMA_SetConfig+0x10a>
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a7a      	ldr	r2, [pc, #488]	@ (80081b8 <DMA_SetConfig+0x228>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d063      	beq.n	800809a <DMA_SetConfig+0x10a>
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a79      	ldr	r2, [pc, #484]	@ (80081bc <DMA_SetConfig+0x22c>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d05e      	beq.n	800809a <DMA_SetConfig+0x10a>
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a77      	ldr	r2, [pc, #476]	@ (80081c0 <DMA_SetConfig+0x230>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d059      	beq.n	800809a <DMA_SetConfig+0x10a>
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a76      	ldr	r2, [pc, #472]	@ (80081c4 <DMA_SetConfig+0x234>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d054      	beq.n	800809a <DMA_SetConfig+0x10a>
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a74      	ldr	r2, [pc, #464]	@ (80081c8 <DMA_SetConfig+0x238>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d04f      	beq.n	800809a <DMA_SetConfig+0x10a>
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a73      	ldr	r2, [pc, #460]	@ (80081cc <DMA_SetConfig+0x23c>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d04a      	beq.n	800809a <DMA_SetConfig+0x10a>
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a71      	ldr	r2, [pc, #452]	@ (80081d0 <DMA_SetConfig+0x240>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d045      	beq.n	800809a <DMA_SetConfig+0x10a>
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a70      	ldr	r2, [pc, #448]	@ (80081d4 <DMA_SetConfig+0x244>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d040      	beq.n	800809a <DMA_SetConfig+0x10a>
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a6e      	ldr	r2, [pc, #440]	@ (80081d8 <DMA_SetConfig+0x248>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d03b      	beq.n	800809a <DMA_SetConfig+0x10a>
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a6d      	ldr	r2, [pc, #436]	@ (80081dc <DMA_SetConfig+0x24c>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d036      	beq.n	800809a <DMA_SetConfig+0x10a>
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a6b      	ldr	r2, [pc, #428]	@ (80081e0 <DMA_SetConfig+0x250>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d031      	beq.n	800809a <DMA_SetConfig+0x10a>
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a6a      	ldr	r2, [pc, #424]	@ (80081e4 <DMA_SetConfig+0x254>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d02c      	beq.n	800809a <DMA_SetConfig+0x10a>
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a68      	ldr	r2, [pc, #416]	@ (80081e8 <DMA_SetConfig+0x258>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d027      	beq.n	800809a <DMA_SetConfig+0x10a>
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a67      	ldr	r2, [pc, #412]	@ (80081ec <DMA_SetConfig+0x25c>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d022      	beq.n	800809a <DMA_SetConfig+0x10a>
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a65      	ldr	r2, [pc, #404]	@ (80081f0 <DMA_SetConfig+0x260>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d01d      	beq.n	800809a <DMA_SetConfig+0x10a>
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a64      	ldr	r2, [pc, #400]	@ (80081f4 <DMA_SetConfig+0x264>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d018      	beq.n	800809a <DMA_SetConfig+0x10a>
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a62      	ldr	r2, [pc, #392]	@ (80081f8 <DMA_SetConfig+0x268>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d013      	beq.n	800809a <DMA_SetConfig+0x10a>
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a61      	ldr	r2, [pc, #388]	@ (80081fc <DMA_SetConfig+0x26c>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d00e      	beq.n	800809a <DMA_SetConfig+0x10a>
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a5f      	ldr	r2, [pc, #380]	@ (8008200 <DMA_SetConfig+0x270>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d009      	beq.n	800809a <DMA_SetConfig+0x10a>
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a5e      	ldr	r2, [pc, #376]	@ (8008204 <DMA_SetConfig+0x274>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d004      	beq.n	800809a <DMA_SetConfig+0x10a>
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a5c      	ldr	r2, [pc, #368]	@ (8008208 <DMA_SetConfig+0x278>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d101      	bne.n	800809e <DMA_SetConfig+0x10e>
 800809a:	2301      	movs	r3, #1
 800809c:	e000      	b.n	80080a0 <DMA_SetConfig+0x110>
 800809e:	2300      	movs	r3, #0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d00d      	beq.n	80080c0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080a8:	68fa      	ldr	r2, [r7, #12]
 80080aa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80080ac:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d004      	beq.n	80080c0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080ba:	68fa      	ldr	r2, [r7, #12]
 80080bc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80080be:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a39      	ldr	r2, [pc, #228]	@ (80081ac <DMA_SetConfig+0x21c>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d04a      	beq.n	8008160 <DMA_SetConfig+0x1d0>
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a38      	ldr	r2, [pc, #224]	@ (80081b0 <DMA_SetConfig+0x220>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d045      	beq.n	8008160 <DMA_SetConfig+0x1d0>
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a36      	ldr	r2, [pc, #216]	@ (80081b4 <DMA_SetConfig+0x224>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d040      	beq.n	8008160 <DMA_SetConfig+0x1d0>
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a35      	ldr	r2, [pc, #212]	@ (80081b8 <DMA_SetConfig+0x228>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d03b      	beq.n	8008160 <DMA_SetConfig+0x1d0>
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a33      	ldr	r2, [pc, #204]	@ (80081bc <DMA_SetConfig+0x22c>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d036      	beq.n	8008160 <DMA_SetConfig+0x1d0>
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a32      	ldr	r2, [pc, #200]	@ (80081c0 <DMA_SetConfig+0x230>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d031      	beq.n	8008160 <DMA_SetConfig+0x1d0>
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a30      	ldr	r2, [pc, #192]	@ (80081c4 <DMA_SetConfig+0x234>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d02c      	beq.n	8008160 <DMA_SetConfig+0x1d0>
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a2f      	ldr	r2, [pc, #188]	@ (80081c8 <DMA_SetConfig+0x238>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d027      	beq.n	8008160 <DMA_SetConfig+0x1d0>
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a2d      	ldr	r2, [pc, #180]	@ (80081cc <DMA_SetConfig+0x23c>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d022      	beq.n	8008160 <DMA_SetConfig+0x1d0>
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a2c      	ldr	r2, [pc, #176]	@ (80081d0 <DMA_SetConfig+0x240>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d01d      	beq.n	8008160 <DMA_SetConfig+0x1d0>
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a2a      	ldr	r2, [pc, #168]	@ (80081d4 <DMA_SetConfig+0x244>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d018      	beq.n	8008160 <DMA_SetConfig+0x1d0>
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a29      	ldr	r2, [pc, #164]	@ (80081d8 <DMA_SetConfig+0x248>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d013      	beq.n	8008160 <DMA_SetConfig+0x1d0>
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a27      	ldr	r2, [pc, #156]	@ (80081dc <DMA_SetConfig+0x24c>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d00e      	beq.n	8008160 <DMA_SetConfig+0x1d0>
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a26      	ldr	r2, [pc, #152]	@ (80081e0 <DMA_SetConfig+0x250>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d009      	beq.n	8008160 <DMA_SetConfig+0x1d0>
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a24      	ldr	r2, [pc, #144]	@ (80081e4 <DMA_SetConfig+0x254>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d004      	beq.n	8008160 <DMA_SetConfig+0x1d0>
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a23      	ldr	r2, [pc, #140]	@ (80081e8 <DMA_SetConfig+0x258>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d101      	bne.n	8008164 <DMA_SetConfig+0x1d4>
 8008160:	2301      	movs	r3, #1
 8008162:	e000      	b.n	8008166 <DMA_SetConfig+0x1d6>
 8008164:	2300      	movs	r3, #0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d059      	beq.n	800821e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800816e:	f003 031f 	and.w	r3, r3, #31
 8008172:	223f      	movs	r2, #63	@ 0x3f
 8008174:	409a      	lsls	r2, r3
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	681a      	ldr	r2, [r3, #0]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008188:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	683a      	ldr	r2, [r7, #0]
 8008190:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	2b40      	cmp	r3, #64	@ 0x40
 8008198:	d138      	bne.n	800820c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	68ba      	ldr	r2, [r7, #8]
 80081a8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80081aa:	e086      	b.n	80082ba <DMA_SetConfig+0x32a>
 80081ac:	40020010 	.word	0x40020010
 80081b0:	40020028 	.word	0x40020028
 80081b4:	40020040 	.word	0x40020040
 80081b8:	40020058 	.word	0x40020058
 80081bc:	40020070 	.word	0x40020070
 80081c0:	40020088 	.word	0x40020088
 80081c4:	400200a0 	.word	0x400200a0
 80081c8:	400200b8 	.word	0x400200b8
 80081cc:	40020410 	.word	0x40020410
 80081d0:	40020428 	.word	0x40020428
 80081d4:	40020440 	.word	0x40020440
 80081d8:	40020458 	.word	0x40020458
 80081dc:	40020470 	.word	0x40020470
 80081e0:	40020488 	.word	0x40020488
 80081e4:	400204a0 	.word	0x400204a0
 80081e8:	400204b8 	.word	0x400204b8
 80081ec:	58025408 	.word	0x58025408
 80081f0:	5802541c 	.word	0x5802541c
 80081f4:	58025430 	.word	0x58025430
 80081f8:	58025444 	.word	0x58025444
 80081fc:	58025458 	.word	0x58025458
 8008200:	5802546c 	.word	0x5802546c
 8008204:	58025480 	.word	0x58025480
 8008208:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	68ba      	ldr	r2, [r7, #8]
 8008212:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	60da      	str	r2, [r3, #12]
}
 800821c:	e04d      	b.n	80082ba <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a29      	ldr	r2, [pc, #164]	@ (80082c8 <DMA_SetConfig+0x338>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d022      	beq.n	800826e <DMA_SetConfig+0x2de>
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a27      	ldr	r2, [pc, #156]	@ (80082cc <DMA_SetConfig+0x33c>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d01d      	beq.n	800826e <DMA_SetConfig+0x2de>
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a26      	ldr	r2, [pc, #152]	@ (80082d0 <DMA_SetConfig+0x340>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d018      	beq.n	800826e <DMA_SetConfig+0x2de>
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a24      	ldr	r2, [pc, #144]	@ (80082d4 <DMA_SetConfig+0x344>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d013      	beq.n	800826e <DMA_SetConfig+0x2de>
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a23      	ldr	r2, [pc, #140]	@ (80082d8 <DMA_SetConfig+0x348>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d00e      	beq.n	800826e <DMA_SetConfig+0x2de>
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a21      	ldr	r2, [pc, #132]	@ (80082dc <DMA_SetConfig+0x34c>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d009      	beq.n	800826e <DMA_SetConfig+0x2de>
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a20      	ldr	r2, [pc, #128]	@ (80082e0 <DMA_SetConfig+0x350>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d004      	beq.n	800826e <DMA_SetConfig+0x2de>
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a1e      	ldr	r2, [pc, #120]	@ (80082e4 <DMA_SetConfig+0x354>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d101      	bne.n	8008272 <DMA_SetConfig+0x2e2>
 800826e:	2301      	movs	r3, #1
 8008270:	e000      	b.n	8008274 <DMA_SetConfig+0x2e4>
 8008272:	2300      	movs	r3, #0
 8008274:	2b00      	cmp	r3, #0
 8008276:	d020      	beq.n	80082ba <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800827c:	f003 031f 	and.w	r3, r3, #31
 8008280:	2201      	movs	r2, #1
 8008282:	409a      	lsls	r2, r3
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	683a      	ldr	r2, [r7, #0]
 800828e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	2b40      	cmp	r3, #64	@ 0x40
 8008296:	d108      	bne.n	80082aa <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	68ba      	ldr	r2, [r7, #8]
 80082a6:	60da      	str	r2, [r3, #12]
}
 80082a8:	e007      	b.n	80082ba <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	68ba      	ldr	r2, [r7, #8]
 80082b0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	60da      	str	r2, [r3, #12]
}
 80082ba:	bf00      	nop
 80082bc:	371c      	adds	r7, #28
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr
 80082c6:	bf00      	nop
 80082c8:	58025408 	.word	0x58025408
 80082cc:	5802541c 	.word	0x5802541c
 80082d0:	58025430 	.word	0x58025430
 80082d4:	58025444 	.word	0x58025444
 80082d8:	58025458 	.word	0x58025458
 80082dc:	5802546c 	.word	0x5802546c
 80082e0:	58025480 	.word	0x58025480
 80082e4:	58025494 	.word	0x58025494

080082e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b085      	sub	sp, #20
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a42      	ldr	r2, [pc, #264]	@ (8008400 <DMA_CalcBaseAndBitshift+0x118>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d04a      	beq.n	8008390 <DMA_CalcBaseAndBitshift+0xa8>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a41      	ldr	r2, [pc, #260]	@ (8008404 <DMA_CalcBaseAndBitshift+0x11c>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d045      	beq.n	8008390 <DMA_CalcBaseAndBitshift+0xa8>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a3f      	ldr	r2, [pc, #252]	@ (8008408 <DMA_CalcBaseAndBitshift+0x120>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d040      	beq.n	8008390 <DMA_CalcBaseAndBitshift+0xa8>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a3e      	ldr	r2, [pc, #248]	@ (800840c <DMA_CalcBaseAndBitshift+0x124>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d03b      	beq.n	8008390 <DMA_CalcBaseAndBitshift+0xa8>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a3c      	ldr	r2, [pc, #240]	@ (8008410 <DMA_CalcBaseAndBitshift+0x128>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d036      	beq.n	8008390 <DMA_CalcBaseAndBitshift+0xa8>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a3b      	ldr	r2, [pc, #236]	@ (8008414 <DMA_CalcBaseAndBitshift+0x12c>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d031      	beq.n	8008390 <DMA_CalcBaseAndBitshift+0xa8>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a39      	ldr	r2, [pc, #228]	@ (8008418 <DMA_CalcBaseAndBitshift+0x130>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d02c      	beq.n	8008390 <DMA_CalcBaseAndBitshift+0xa8>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a38      	ldr	r2, [pc, #224]	@ (800841c <DMA_CalcBaseAndBitshift+0x134>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d027      	beq.n	8008390 <DMA_CalcBaseAndBitshift+0xa8>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a36      	ldr	r2, [pc, #216]	@ (8008420 <DMA_CalcBaseAndBitshift+0x138>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d022      	beq.n	8008390 <DMA_CalcBaseAndBitshift+0xa8>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a35      	ldr	r2, [pc, #212]	@ (8008424 <DMA_CalcBaseAndBitshift+0x13c>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d01d      	beq.n	8008390 <DMA_CalcBaseAndBitshift+0xa8>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a33      	ldr	r2, [pc, #204]	@ (8008428 <DMA_CalcBaseAndBitshift+0x140>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d018      	beq.n	8008390 <DMA_CalcBaseAndBitshift+0xa8>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a32      	ldr	r2, [pc, #200]	@ (800842c <DMA_CalcBaseAndBitshift+0x144>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d013      	beq.n	8008390 <DMA_CalcBaseAndBitshift+0xa8>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a30      	ldr	r2, [pc, #192]	@ (8008430 <DMA_CalcBaseAndBitshift+0x148>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d00e      	beq.n	8008390 <DMA_CalcBaseAndBitshift+0xa8>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a2f      	ldr	r2, [pc, #188]	@ (8008434 <DMA_CalcBaseAndBitshift+0x14c>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d009      	beq.n	8008390 <DMA_CalcBaseAndBitshift+0xa8>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a2d      	ldr	r2, [pc, #180]	@ (8008438 <DMA_CalcBaseAndBitshift+0x150>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d004      	beq.n	8008390 <DMA_CalcBaseAndBitshift+0xa8>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a2c      	ldr	r2, [pc, #176]	@ (800843c <DMA_CalcBaseAndBitshift+0x154>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d101      	bne.n	8008394 <DMA_CalcBaseAndBitshift+0xac>
 8008390:	2301      	movs	r3, #1
 8008392:	e000      	b.n	8008396 <DMA_CalcBaseAndBitshift+0xae>
 8008394:	2300      	movs	r3, #0
 8008396:	2b00      	cmp	r3, #0
 8008398:	d024      	beq.n	80083e4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	3b10      	subs	r3, #16
 80083a2:	4a27      	ldr	r2, [pc, #156]	@ (8008440 <DMA_CalcBaseAndBitshift+0x158>)
 80083a4:	fba2 2303 	umull	r2, r3, r2, r3
 80083a8:	091b      	lsrs	r3, r3, #4
 80083aa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f003 0307 	and.w	r3, r3, #7
 80083b2:	4a24      	ldr	r2, [pc, #144]	@ (8008444 <DMA_CalcBaseAndBitshift+0x15c>)
 80083b4:	5cd3      	ldrb	r3, [r2, r3]
 80083b6:	461a      	mov	r2, r3
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2b03      	cmp	r3, #3
 80083c0:	d908      	bls.n	80083d4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	461a      	mov	r2, r3
 80083c8:	4b1f      	ldr	r3, [pc, #124]	@ (8008448 <DMA_CalcBaseAndBitshift+0x160>)
 80083ca:	4013      	ands	r3, r2
 80083cc:	1d1a      	adds	r2, r3, #4
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	659a      	str	r2, [r3, #88]	@ 0x58
 80083d2:	e00d      	b.n	80083f0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	461a      	mov	r2, r3
 80083da:	4b1b      	ldr	r3, [pc, #108]	@ (8008448 <DMA_CalcBaseAndBitshift+0x160>)
 80083dc:	4013      	ands	r3, r2
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80083e2:	e005      	b.n	80083f0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3714      	adds	r7, #20
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr
 8008400:	40020010 	.word	0x40020010
 8008404:	40020028 	.word	0x40020028
 8008408:	40020040 	.word	0x40020040
 800840c:	40020058 	.word	0x40020058
 8008410:	40020070 	.word	0x40020070
 8008414:	40020088 	.word	0x40020088
 8008418:	400200a0 	.word	0x400200a0
 800841c:	400200b8 	.word	0x400200b8
 8008420:	40020410 	.word	0x40020410
 8008424:	40020428 	.word	0x40020428
 8008428:	40020440 	.word	0x40020440
 800842c:	40020458 	.word	0x40020458
 8008430:	40020470 	.word	0x40020470
 8008434:	40020488 	.word	0x40020488
 8008438:	400204a0 	.word	0x400204a0
 800843c:	400204b8 	.word	0x400204b8
 8008440:	aaaaaaab 	.word	0xaaaaaaab
 8008444:	0801498c 	.word	0x0801498c
 8008448:	fffffc00 	.word	0xfffffc00

0800844c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800844c:	b480      	push	{r7}
 800844e:	b085      	sub	sp, #20
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008454:	2300      	movs	r3, #0
 8008456:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	699b      	ldr	r3, [r3, #24]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d120      	bne.n	80084a2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008464:	2b03      	cmp	r3, #3
 8008466:	d858      	bhi.n	800851a <DMA_CheckFifoParam+0xce>
 8008468:	a201      	add	r2, pc, #4	@ (adr r2, 8008470 <DMA_CheckFifoParam+0x24>)
 800846a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800846e:	bf00      	nop
 8008470:	08008481 	.word	0x08008481
 8008474:	08008493 	.word	0x08008493
 8008478:	08008481 	.word	0x08008481
 800847c:	0800851b 	.word	0x0800851b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008484:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008488:	2b00      	cmp	r3, #0
 800848a:	d048      	beq.n	800851e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800848c:	2301      	movs	r3, #1
 800848e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008490:	e045      	b.n	800851e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008496:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800849a:	d142      	bne.n	8008522 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80084a0:	e03f      	b.n	8008522 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	699b      	ldr	r3, [r3, #24]
 80084a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084aa:	d123      	bne.n	80084f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084b0:	2b03      	cmp	r3, #3
 80084b2:	d838      	bhi.n	8008526 <DMA_CheckFifoParam+0xda>
 80084b4:	a201      	add	r2, pc, #4	@ (adr r2, 80084bc <DMA_CheckFifoParam+0x70>)
 80084b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ba:	bf00      	nop
 80084bc:	080084cd 	.word	0x080084cd
 80084c0:	080084d3 	.word	0x080084d3
 80084c4:	080084cd 	.word	0x080084cd
 80084c8:	080084e5 	.word	0x080084e5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80084cc:	2301      	movs	r3, #1
 80084ce:	73fb      	strb	r3, [r7, #15]
        break;
 80084d0:	e030      	b.n	8008534 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d025      	beq.n	800852a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80084de:	2301      	movs	r3, #1
 80084e0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80084e2:	e022      	b.n	800852a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084e8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80084ec:	d11f      	bne.n	800852e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80084ee:	2301      	movs	r3, #1
 80084f0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80084f2:	e01c      	b.n	800852e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084f8:	2b02      	cmp	r3, #2
 80084fa:	d902      	bls.n	8008502 <DMA_CheckFifoParam+0xb6>
 80084fc:	2b03      	cmp	r3, #3
 80084fe:	d003      	beq.n	8008508 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008500:	e018      	b.n	8008534 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008502:	2301      	movs	r3, #1
 8008504:	73fb      	strb	r3, [r7, #15]
        break;
 8008506:	e015      	b.n	8008534 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800850c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008510:	2b00      	cmp	r3, #0
 8008512:	d00e      	beq.n	8008532 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	73fb      	strb	r3, [r7, #15]
    break;
 8008518:	e00b      	b.n	8008532 <DMA_CheckFifoParam+0xe6>
        break;
 800851a:	bf00      	nop
 800851c:	e00a      	b.n	8008534 <DMA_CheckFifoParam+0xe8>
        break;
 800851e:	bf00      	nop
 8008520:	e008      	b.n	8008534 <DMA_CheckFifoParam+0xe8>
        break;
 8008522:	bf00      	nop
 8008524:	e006      	b.n	8008534 <DMA_CheckFifoParam+0xe8>
        break;
 8008526:	bf00      	nop
 8008528:	e004      	b.n	8008534 <DMA_CheckFifoParam+0xe8>
        break;
 800852a:	bf00      	nop
 800852c:	e002      	b.n	8008534 <DMA_CheckFifoParam+0xe8>
        break;
 800852e:	bf00      	nop
 8008530:	e000      	b.n	8008534 <DMA_CheckFifoParam+0xe8>
    break;
 8008532:	bf00      	nop
    }
  }

  return status;
 8008534:	7bfb      	ldrb	r3, [r7, #15]
}
 8008536:	4618      	mov	r0, r3
 8008538:	3714      	adds	r7, #20
 800853a:	46bd      	mov	sp, r7
 800853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008540:	4770      	bx	lr
 8008542:	bf00      	nop

08008544 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008544:	b480      	push	{r7}
 8008546:	b085      	sub	sp, #20
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a38      	ldr	r2, [pc, #224]	@ (8008638 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d022      	beq.n	80085a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a36      	ldr	r2, [pc, #216]	@ (800863c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d01d      	beq.n	80085a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a35      	ldr	r2, [pc, #212]	@ (8008640 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d018      	beq.n	80085a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a33      	ldr	r2, [pc, #204]	@ (8008644 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d013      	beq.n	80085a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a32      	ldr	r2, [pc, #200]	@ (8008648 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d00e      	beq.n	80085a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a30      	ldr	r2, [pc, #192]	@ (800864c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d009      	beq.n	80085a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a2f      	ldr	r2, [pc, #188]	@ (8008650 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d004      	beq.n	80085a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a2d      	ldr	r2, [pc, #180]	@ (8008654 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d101      	bne.n	80085a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80085a2:	2301      	movs	r3, #1
 80085a4:	e000      	b.n	80085a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80085a6:	2300      	movs	r3, #0
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d01a      	beq.n	80085e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	3b08      	subs	r3, #8
 80085b4:	4a28      	ldr	r2, [pc, #160]	@ (8008658 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80085b6:	fba2 2303 	umull	r2, r3, r2, r3
 80085ba:	091b      	lsrs	r3, r3, #4
 80085bc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80085be:	68fa      	ldr	r2, [r7, #12]
 80085c0:	4b26      	ldr	r3, [pc, #152]	@ (800865c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80085c2:	4413      	add	r3, r2
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	461a      	mov	r2, r3
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	4a24      	ldr	r2, [pc, #144]	@ (8008660 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80085d0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f003 031f 	and.w	r3, r3, #31
 80085d8:	2201      	movs	r2, #1
 80085da:	409a      	lsls	r2, r3
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80085e0:	e024      	b.n	800862c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	3b10      	subs	r3, #16
 80085ea:	4a1e      	ldr	r2, [pc, #120]	@ (8008664 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80085ec:	fba2 2303 	umull	r2, r3, r2, r3
 80085f0:	091b      	lsrs	r3, r3, #4
 80085f2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	4a1c      	ldr	r2, [pc, #112]	@ (8008668 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d806      	bhi.n	800860a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	4a1b      	ldr	r2, [pc, #108]	@ (800866c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d902      	bls.n	800860a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	3308      	adds	r3, #8
 8008608:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800860a:	68fa      	ldr	r2, [r7, #12]
 800860c:	4b18      	ldr	r3, [pc, #96]	@ (8008670 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800860e:	4413      	add	r3, r2
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	461a      	mov	r2, r3
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	4a16      	ldr	r2, [pc, #88]	@ (8008674 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800861c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f003 031f 	and.w	r3, r3, #31
 8008624:	2201      	movs	r2, #1
 8008626:	409a      	lsls	r2, r3
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800862c:	bf00      	nop
 800862e:	3714      	adds	r7, #20
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr
 8008638:	58025408 	.word	0x58025408
 800863c:	5802541c 	.word	0x5802541c
 8008640:	58025430 	.word	0x58025430
 8008644:	58025444 	.word	0x58025444
 8008648:	58025458 	.word	0x58025458
 800864c:	5802546c 	.word	0x5802546c
 8008650:	58025480 	.word	0x58025480
 8008654:	58025494 	.word	0x58025494
 8008658:	cccccccd 	.word	0xcccccccd
 800865c:	16009600 	.word	0x16009600
 8008660:	58025880 	.word	0x58025880
 8008664:	aaaaaaab 	.word	0xaaaaaaab
 8008668:	400204b8 	.word	0x400204b8
 800866c:	4002040f 	.word	0x4002040f
 8008670:	10008200 	.word	0x10008200
 8008674:	40020880 	.word	0x40020880

08008678 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008678:	b480      	push	{r7}
 800867a:	b085      	sub	sp, #20
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	b2db      	uxtb	r3, r3
 8008686:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d04a      	beq.n	8008724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2b08      	cmp	r3, #8
 8008692:	d847      	bhi.n	8008724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a25      	ldr	r2, [pc, #148]	@ (8008730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d022      	beq.n	80086e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a24      	ldr	r2, [pc, #144]	@ (8008734 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d01d      	beq.n	80086e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a22      	ldr	r2, [pc, #136]	@ (8008738 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d018      	beq.n	80086e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a21      	ldr	r2, [pc, #132]	@ (800873c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d013      	beq.n	80086e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a1f      	ldr	r2, [pc, #124]	@ (8008740 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d00e      	beq.n	80086e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a1e      	ldr	r2, [pc, #120]	@ (8008744 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d009      	beq.n	80086e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a1c      	ldr	r2, [pc, #112]	@ (8008748 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d004      	beq.n	80086e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a1b      	ldr	r2, [pc, #108]	@ (800874c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d101      	bne.n	80086e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80086e4:	2301      	movs	r3, #1
 80086e6:	e000      	b.n	80086ea <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80086e8:	2300      	movs	r3, #0
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d00a      	beq.n	8008704 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80086ee:	68fa      	ldr	r2, [r7, #12]
 80086f0:	4b17      	ldr	r3, [pc, #92]	@ (8008750 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80086f2:	4413      	add	r3, r2
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	461a      	mov	r2, r3
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	4a15      	ldr	r2, [pc, #84]	@ (8008754 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008700:	671a      	str	r2, [r3, #112]	@ 0x70
 8008702:	e009      	b.n	8008718 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008704:	68fa      	ldr	r2, [r7, #12]
 8008706:	4b14      	ldr	r3, [pc, #80]	@ (8008758 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008708:	4413      	add	r3, r2
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	461a      	mov	r2, r3
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4a11      	ldr	r2, [pc, #68]	@ (800875c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008716:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	3b01      	subs	r3, #1
 800871c:	2201      	movs	r2, #1
 800871e:	409a      	lsls	r2, r3
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8008724:	bf00      	nop
 8008726:	3714      	adds	r7, #20
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr
 8008730:	58025408 	.word	0x58025408
 8008734:	5802541c 	.word	0x5802541c
 8008738:	58025430 	.word	0x58025430
 800873c:	58025444 	.word	0x58025444
 8008740:	58025458 	.word	0x58025458
 8008744:	5802546c 	.word	0x5802546c
 8008748:	58025480 	.word	0x58025480
 800874c:	58025494 	.word	0x58025494
 8008750:	1600963f 	.word	0x1600963f
 8008754:	58025940 	.word	0x58025940
 8008758:	1000823f 	.word	0x1000823f
 800875c:	40020940 	.word	0x40020940

08008760 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b098      	sub	sp, #96	@ 0x60
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8008768:	4a84      	ldr	r2, [pc, #528]	@ (800897c <HAL_FDCAN_Init+0x21c>)
 800876a:	f107 030c 	add.w	r3, r7, #12
 800876e:	4611      	mov	r1, r2
 8008770:	224c      	movs	r2, #76	@ 0x4c
 8008772:	4618      	mov	r0, r3
 8008774:	f00b fa6e 	bl	8013c54 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d101      	bne.n	8008782 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800877e:	2301      	movs	r3, #1
 8008780:	e1c6      	b.n	8008b10 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a7e      	ldr	r2, [pc, #504]	@ (8008980 <HAL_FDCAN_Init+0x220>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d106      	bne.n	800879a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8008794:	461a      	mov	r2, r3
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d106      	bne.n	80087b4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f7fa fc6e 	bl	8003090 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	699a      	ldr	r2, [r3, #24]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f022 0210 	bic.w	r2, r2, #16
 80087c2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80087c4:	f7fb f9ae 	bl	8003b24 <HAL_GetTick>
 80087c8:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80087ca:	e014      	b.n	80087f6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80087cc:	f7fb f9aa 	bl	8003b24 <HAL_GetTick>
 80087d0:	4602      	mov	r2, r0
 80087d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80087d4:	1ad3      	subs	r3, r2, r3
 80087d6:	2b0a      	cmp	r3, #10
 80087d8:	d90d      	bls.n	80087f6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80087e0:	f043 0201 	orr.w	r2, r3, #1
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2203      	movs	r2, #3
 80087ee:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80087f2:	2301      	movs	r3, #1
 80087f4:	e18c      	b.n	8008b10 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	699b      	ldr	r3, [r3, #24]
 80087fc:	f003 0308 	and.w	r3, r3, #8
 8008800:	2b08      	cmp	r3, #8
 8008802:	d0e3      	beq.n	80087cc <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	699a      	ldr	r2, [r3, #24]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f042 0201 	orr.w	r2, r2, #1
 8008812:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008814:	f7fb f986 	bl	8003b24 <HAL_GetTick>
 8008818:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800881a:	e014      	b.n	8008846 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800881c:	f7fb f982 	bl	8003b24 <HAL_GetTick>
 8008820:	4602      	mov	r2, r0
 8008822:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008824:	1ad3      	subs	r3, r2, r3
 8008826:	2b0a      	cmp	r3, #10
 8008828:	d90d      	bls.n	8008846 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008830:	f043 0201 	orr.w	r2, r3, #1
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2203      	movs	r2, #3
 800883e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8008842:	2301      	movs	r3, #1
 8008844:	e164      	b.n	8008b10 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	699b      	ldr	r3, [r3, #24]
 800884c:	f003 0301 	and.w	r3, r3, #1
 8008850:	2b00      	cmp	r3, #0
 8008852:	d0e3      	beq.n	800881c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	699a      	ldr	r2, [r3, #24]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f042 0202 	orr.w	r2, r2, #2
 8008862:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	7c1b      	ldrb	r3, [r3, #16]
 8008868:	2b01      	cmp	r3, #1
 800886a:	d108      	bne.n	800887e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	699a      	ldr	r2, [r3, #24]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800887a:	619a      	str	r2, [r3, #24]
 800887c:	e007      	b.n	800888e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	699a      	ldr	r2, [r3, #24]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800888c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	7c5b      	ldrb	r3, [r3, #17]
 8008892:	2b01      	cmp	r3, #1
 8008894:	d108      	bne.n	80088a8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	699a      	ldr	r2, [r3, #24]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80088a4:	619a      	str	r2, [r3, #24]
 80088a6:	e007      	b.n	80088b8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	699a      	ldr	r2, [r3, #24]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80088b6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	7c9b      	ldrb	r3, [r3, #18]
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d108      	bne.n	80088d2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	699a      	ldr	r2, [r3, #24]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80088ce:	619a      	str	r2, [r3, #24]
 80088d0:	e007      	b.n	80088e2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	699a      	ldr	r2, [r3, #24]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80088e0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	699b      	ldr	r3, [r3, #24]
 80088e8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	689a      	ldr	r2, [r3, #8]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	430a      	orrs	r2, r1
 80088f6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	699a      	ldr	r2, [r3, #24]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8008906:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	691a      	ldr	r2, [r3, #16]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f022 0210 	bic.w	r2, r2, #16
 8008916:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	2b01      	cmp	r3, #1
 800891e:	d108      	bne.n	8008932 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	699a      	ldr	r2, [r3, #24]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f042 0204 	orr.w	r2, r2, #4
 800892e:	619a      	str	r2, [r3, #24]
 8008930:	e030      	b.n	8008994 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	68db      	ldr	r3, [r3, #12]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d02c      	beq.n	8008994 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	68db      	ldr	r3, [r3, #12]
 800893e:	2b02      	cmp	r3, #2
 8008940:	d020      	beq.n	8008984 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	699a      	ldr	r2, [r3, #24]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008950:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	691a      	ldr	r2, [r3, #16]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f042 0210 	orr.w	r2, r2, #16
 8008960:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	68db      	ldr	r3, [r3, #12]
 8008966:	2b03      	cmp	r3, #3
 8008968:	d114      	bne.n	8008994 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	699a      	ldr	r2, [r3, #24]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f042 0220 	orr.w	r2, r2, #32
 8008978:	619a      	str	r2, [r3, #24]
 800897a:	e00b      	b.n	8008994 <HAL_FDCAN_Init+0x234>
 800897c:	08014930 	.word	0x08014930
 8008980:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	699a      	ldr	r2, [r3, #24]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f042 0220 	orr.w	r2, r2, #32
 8008992:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	699b      	ldr	r3, [r3, #24]
 8008998:	3b01      	subs	r3, #1
 800899a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	69db      	ldr	r3, [r3, #28]
 80089a0:	3b01      	subs	r3, #1
 80089a2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80089a4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6a1b      	ldr	r3, [r3, #32]
 80089aa:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80089ac:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	695b      	ldr	r3, [r3, #20]
 80089b4:	3b01      	subs	r3, #1
 80089b6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80089bc:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80089be:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80089c8:	d115      	bne.n	80089f6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089ce:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089d4:	3b01      	subs	r3, #1
 80089d6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80089d8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089de:	3b01      	subs	r3, #1
 80089e0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80089e2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089ea:	3b01      	subs	r3, #1
 80089ec:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80089f2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80089f4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d00a      	beq.n	8008a14 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	430a      	orrs	r2, r1
 8008a10:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a1c:	4413      	add	r3, r2
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d011      	beq.n	8008a46 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8008a2a:	f023 0107 	bic.w	r1, r3, #7
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	3360      	adds	r3, #96	@ 0x60
 8008a36:	443b      	add	r3, r7
 8008a38:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	430a      	orrs	r2, r1
 8008a42:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d011      	beq.n	8008a72 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008a56:	f023 0107 	bic.w	r1, r3, #7
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a5e:	009b      	lsls	r3, r3, #2
 8008a60:	3360      	adds	r3, #96	@ 0x60
 8008a62:	443b      	add	r3, r7
 8008a64:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	430a      	orrs	r2, r1
 8008a6e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d012      	beq.n	8008aa0 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008a82:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	3360      	adds	r3, #96	@ 0x60
 8008a8e:	443b      	add	r3, r7
 8008a90:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8008a94:	011a      	lsls	r2, r3, #4
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	430a      	orrs	r2, r1
 8008a9c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d012      	beq.n	8008ace <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008ab0:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	3360      	adds	r3, #96	@ 0x60
 8008abc:	443b      	add	r3, r7
 8008abe:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8008ac2:	021a      	lsls	r2, r3, #8
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	430a      	orrs	r2, r1
 8008aca:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a11      	ldr	r2, [pc, #68]	@ (8008b18 <HAL_FDCAN_Init+0x3b8>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d107      	bne.n	8008ae8 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	689a      	ldr	r2, [r3, #8]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	f022 0203 	bic.w	r2, r2, #3
 8008ae6:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2200      	movs	r2, #0
 8008aec:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2200      	movs	r2, #0
 8008af4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2201      	movs	r2, #1
 8008afc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 fdeb 	bl	80096dc <FDCAN_CalcultateRamBlockAddresses>
 8008b06:	4603      	mov	r3, r0
 8008b08:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8008b0c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3760      	adds	r7, #96	@ 0x60
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}
 8008b18:	4000a000 	.word	0x4000a000

08008b1c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b087      	sub	sp, #28
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008b2c:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8008b2e:	7bfb      	ldrb	r3, [r7, #15]
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d002      	beq.n	8008b3a <HAL_FDCAN_ConfigFilter+0x1e>
 8008b34:	7bfb      	ldrb	r3, [r7, #15]
 8008b36:	2b02      	cmp	r3, #2
 8008b38:	d157      	bne.n	8008bea <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d12b      	bne.n	8008b9a <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	68db      	ldr	r3, [r3, #12]
 8008b46:	2b07      	cmp	r3, #7
 8008b48:	d10d      	bne.n	8008b66 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	691b      	ldr	r3, [r3, #16]
 8008b4e:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	69db      	ldr	r3, [r3, #28]
 8008b54:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8008b56:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8008b5c:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8008b5e:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 8008b62:	617b      	str	r3, [r7, #20]
 8008b64:	e00e      	b.n	8008b84 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	689b      	ldr	r3, [r3, #8]
 8008b6a:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	68db      	ldr	r3, [r3, #12]
 8008b70:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8008b72:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	691b      	ldr	r3, [r3, #16]
 8008b78:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8008b7a:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8008b80:	4313      	orrs	r3, r2
 8008b82:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	009b      	lsls	r3, r3, #2
 8008b8e:	4413      	add	r3, r2
 8008b90:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	697a      	ldr	r2, [r7, #20]
 8008b96:	601a      	str	r2, [r3, #0]
 8008b98:	e025      	b.n	8008be6 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	68db      	ldr	r3, [r3, #12]
 8008b9e:	075a      	lsls	r2, r3, #29
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	691b      	ldr	r3, [r3, #16]
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	68db      	ldr	r3, [r3, #12]
 8008bac:	2b07      	cmp	r3, #7
 8008bae:	d103      	bne.n	8008bb8 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	699b      	ldr	r3, [r3, #24]
 8008bb4:	613b      	str	r3, [r7, #16]
 8008bb6:	e006      	b.n	8008bc6 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	079a      	lsls	r2, r3, #30
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	695b      	ldr	r3, [r3, #20]
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	00db      	lsls	r3, r3, #3
 8008bd0:	4413      	add	r3, r2
 8008bd2:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	697a      	ldr	r2, [r7, #20]
 8008bd8:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	3304      	adds	r3, #4
 8008bde:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	693a      	ldr	r2, [r7, #16]
 8008be4:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8008be6:	2300      	movs	r3, #0
 8008be8:	e008      	b.n	8008bfc <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008bf0:	f043 0202 	orr.w	r2, r3, #2
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8008bfa:	2301      	movs	r3, #1
  }
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	371c      	adds	r7, #28
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr

08008c08 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b083      	sub	sp, #12
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d111      	bne.n	8008c40 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2202      	movs	r2, #2
 8008c20:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	699a      	ldr	r2, [r3, #24]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f022 0201 	bic.w	r2, r2, #1
 8008c32:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2200      	movs	r2, #0
 8008c38:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	e008      	b.n	8008c52 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008c46:	f043 0204 	orr.w	r2, r3, #4
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8008c50:	2301      	movs	r3, #1
  }
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	370c      	adds	r7, #12
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr

08008c5e <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b086      	sub	sp, #24
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	60f8      	str	r0, [r7, #12]
 8008c66:	60b9      	str	r1, [r7, #8]
 8008c68:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	2b02      	cmp	r3, #2
 8008c74:	d141      	bne.n	8008cfa <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008c7e:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d109      	bne.n	8008c9a <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008c8c:	f043 0220 	orr.w	r2, r3, #32
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8008c96:	2301      	movs	r3, #1
 8008c98:	e038      	b.n	8008d0c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008ca2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d009      	beq.n	8008cbe <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008cb0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	e026      	b.n	8008d0c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008cc6:	0c1b      	lsrs	r3, r3, #16
 8008cc8:	f003 031f 	and.w	r3, r3, #31
 8008ccc:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	68b9      	ldr	r1, [r7, #8]
 8008cd4:	68f8      	ldr	r0, [r7, #12]
 8008cd6:	f000 fe87 	bl	80099e8 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	2101      	movs	r1, #1
 8008ce0:	697a      	ldr	r2, [r7, #20]
 8008ce2:	fa01 f202 	lsl.w	r2, r1, r2
 8008ce6:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8008cea:	2201      	movs	r2, #1
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	409a      	lsls	r2, r3
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	e008      	b.n	8008d0c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008d00:	f043 0208 	orr.w	r2, r3, #8
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8008d0a:	2301      	movs	r3, #1
  }
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3718      	adds	r7, #24
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b08b      	sub	sp, #44	@ 0x2c
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	60f8      	str	r0, [r7, #12]
 8008d1c:	60b9      	str	r1, [r7, #8]
 8008d1e:	607a      	str	r2, [r7, #4]
 8008d20:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8008d22:	2300      	movs	r3, #0
 8008d24:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008d2c:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8008d2e:	7efb      	ldrb	r3, [r7, #27]
 8008d30:	2b02      	cmp	r3, #2
 8008d32:	f040 8149 	bne.w	8008fc8 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	2b40      	cmp	r3, #64	@ 0x40
 8008d3a:	d14c      	bne.n	8008dd6 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008d44:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d109      	bne.n	8008d60 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008d52:	f043 0220 	orr.w	r2, r3, #32
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	e13c      	b.n	8008fda <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008d68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d109      	bne.n	8008d84 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008d76:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8008d80:	2301      	movs	r3, #1
 8008d82:	e12a      	b.n	8008fda <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008d8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008d90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008d94:	d10a      	bne.n	8008dac <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008d9e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008da2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008da6:	d101      	bne.n	8008dac <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8008da8:	2301      	movs	r3, #1
 8008daa:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008db4:	0a1b      	lsrs	r3, r3, #8
 8008db6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008dba:	69fa      	ldr	r2, [r7, #28]
 8008dbc:	4413      	add	r3, r2
 8008dbe:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dc8:	69f9      	ldr	r1, [r7, #28]
 8008dca:	fb01 f303 	mul.w	r3, r1, r3
 8008dce:	009b      	lsls	r3, r3, #2
 8008dd0:	4413      	add	r3, r2
 8008dd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8008dd4:	e068      	b.n	8008ea8 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	2b41      	cmp	r3, #65	@ 0x41
 8008dda:	d14c      	bne.n	8008e76 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008de4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d109      	bne.n	8008e00 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008df2:	f043 0220 	orr.w	r2, r3, #32
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	e0ec      	b.n	8008fda <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008e08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d109      	bne.n	8008e24 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008e16:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8008e20:	2301      	movs	r3, #1
 8008e22:	e0da      	b.n	8008fda <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008e2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008e30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008e34:	d10a      	bne.n	8008e4c <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008e3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008e42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e46:	d101      	bne.n	8008e4c <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008e54:	0a1b      	lsrs	r3, r3, #8
 8008e56:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008e5a:	69fa      	ldr	r2, [r7, #28]
 8008e5c:	4413      	add	r3, r2
 8008e5e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e68:	69f9      	ldr	r1, [r7, #28]
 8008e6a:	fb01 f303 	mul.w	r3, r1, r3
 8008e6e:	009b      	lsls	r3, r3, #2
 8008e70:	4413      	add	r3, r2
 8008e72:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e74:	e018      	b.n	8008ea8 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e7a:	68ba      	ldr	r2, [r7, #8]
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d309      	bcc.n	8008e94 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008e86:	f043 0220 	orr.w	r2, r3, #32
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8008e90:	2301      	movs	r3, #1
 8008e92:	e0a2      	b.n	8008fda <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e9c:	68b9      	ldr	r1, [r7, #8]
 8008e9e:	fb01 f303 	mul.w	r3, r1, r3
 8008ea2:	009b      	lsls	r3, r3, #2
 8008ea4:	4413      	add	r3, r2
 8008ea6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8008ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d107      	bne.n	8008ecc <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8008ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	0c9b      	lsrs	r3, r3, #18
 8008ec2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	601a      	str	r2, [r3, #0]
 8008eca:	e005      	b.n	8008ed8 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8008ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8008ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8008ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8008ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ef2:	3304      	adds	r3, #4
 8008ef4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8008ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	b29a      	uxth	r2, r3
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8008f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	0c1b      	lsrs	r3, r3, #16
 8008f06:	f003 020f 	and.w	r2, r3, #15
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8008f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8008f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8008f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	0e1b      	lsrs	r3, r3, #24
 8008f2c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8008f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	0fda      	lsrs	r2, r3, #31
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8008f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f40:	3304      	adds	r3, #4
 8008f42:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8008f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f46:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8008f48:	2300      	movs	r3, #0
 8008f4a:	623b      	str	r3, [r7, #32]
 8008f4c:	e00a      	b.n	8008f64 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8008f4e:	697a      	ldr	r2, [r7, #20]
 8008f50:	6a3b      	ldr	r3, [r7, #32]
 8008f52:	441a      	add	r2, r3
 8008f54:	6839      	ldr	r1, [r7, #0]
 8008f56:	6a3b      	ldr	r3, [r7, #32]
 8008f58:	440b      	add	r3, r1
 8008f5a:	7812      	ldrb	r2, [r2, #0]
 8008f5c:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8008f5e:	6a3b      	ldr	r3, [r7, #32]
 8008f60:	3301      	adds	r3, #1
 8008f62:	623b      	str	r3, [r7, #32]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	68db      	ldr	r3, [r3, #12]
 8008f68:	4a1f      	ldr	r2, [pc, #124]	@ (8008fe8 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8008f6a:	5cd3      	ldrb	r3, [r2, r3]
 8008f6c:	461a      	mov	r2, r3
 8008f6e:	6a3b      	ldr	r3, [r7, #32]
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d3ec      	bcc.n	8008f4e <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	2b40      	cmp	r3, #64	@ 0x40
 8008f78:	d105      	bne.n	8008f86 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	69fa      	ldr	r2, [r7, #28]
 8008f80:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8008f84:	e01e      	b.n	8008fc4 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	2b41      	cmp	r3, #65	@ 0x41
 8008f8a:	d105      	bne.n	8008f98 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	69fa      	ldr	r2, [r7, #28]
 8008f92:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8008f96:	e015      	b.n	8008fc4 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	2b1f      	cmp	r3, #31
 8008f9c:	d808      	bhi.n	8008fb0 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	2101      	movs	r1, #1
 8008fa4:	68ba      	ldr	r2, [r7, #8]
 8008fa6:	fa01 f202 	lsl.w	r2, r1, r2
 8008faa:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8008fae:	e009      	b.n	8008fc4 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	f003 021f 	and.w	r2, r3, #31
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	2101      	movs	r1, #1
 8008fbc:	fa01 f202 	lsl.w	r2, r1, r2
 8008fc0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	e008      	b.n	8008fda <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008fce:	f043 0208 	orr.w	r2, r3, #8
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8008fd8:	2301      	movs	r3, #1
  }
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	372c      	adds	r7, #44	@ 0x2c
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe4:	4770      	bx	lr
 8008fe6:	bf00      	nop
 8008fe8:	08014994 	.word	0x08014994

08008fec <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b087      	sub	sp, #28
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	60b9      	str	r1, [r7, #8]
 8008ff6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008ffe:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8009000:	7dfb      	ldrb	r3, [r7, #23]
 8009002:	2b01      	cmp	r3, #1
 8009004:	d002      	beq.n	800900c <HAL_FDCAN_ActivateNotification+0x20>
 8009006:	7dfb      	ldrb	r3, [r7, #23]
 8009008:	2b02      	cmp	r3, #2
 800900a:	d155      	bne.n	80090b8 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	4013      	ands	r3, r2
 8009016:	2b00      	cmp	r3, #0
 8009018:	d108      	bne.n	800902c <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f042 0201 	orr.w	r2, r2, #1
 8009028:	65da      	str	r2, [r3, #92]	@ 0x5c
 800902a:	e014      	b.n	8009056 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	4013      	ands	r3, r2
 8009036:	68ba      	ldr	r2, [r7, #8]
 8009038:	429a      	cmp	r2, r3
 800903a:	d108      	bne.n	800904e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f042 0202 	orr.w	r2, r2, #2
 800904a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800904c:	e003      	b.n	8009056 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	2203      	movs	r2, #3
 8009054:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800905c:	2b00      	cmp	r3, #0
 800905e:	d009      	beq.n	8009074 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	430a      	orrs	r2, r1
 8009070:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800907a:	2b00      	cmp	r3, #0
 800907c:	d009      	beq.n	8009092 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	430a      	orrs	r2, r1
 800908e:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009098:	68ba      	ldr	r2, [r7, #8]
 800909a:	4b0f      	ldr	r3, [pc, #60]	@ (80090d8 <HAL_FDCAN_ActivateNotification+0xec>)
 800909c:	4013      	ands	r3, r2
 800909e:	68fa      	ldr	r2, [r7, #12]
 80090a0:	6812      	ldr	r2, [r2, #0]
 80090a2:	430b      	orrs	r3, r1
 80090a4:	6553      	str	r3, [r2, #84]	@ 0x54
 80090a6:	4b0d      	ldr	r3, [pc, #52]	@ (80090dc <HAL_FDCAN_ActivateNotification+0xf0>)
 80090a8:	695a      	ldr	r2, [r3, #20]
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	0f9b      	lsrs	r3, r3, #30
 80090ae:	490b      	ldr	r1, [pc, #44]	@ (80090dc <HAL_FDCAN_ActivateNotification+0xf0>)
 80090b0:	4313      	orrs	r3, r2
 80090b2:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80090b4:	2300      	movs	r3, #0
 80090b6:	e008      	b.n	80090ca <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80090be:	f043 0202 	orr.w	r2, r3, #2
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80090c8:	2301      	movs	r3, #1
  }
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	371c      	adds	r7, #28
 80090ce:	46bd      	mov	sp, r7
 80090d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d4:	4770      	bx	lr
 80090d6:	bf00      	nop
 80090d8:	3fcfffff 	.word	0x3fcfffff
 80090dc:	4000a800 	.word	0x4000a800

080090e0 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b096      	sub	sp, #88	@ 0x58
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80090e8:	4b9a      	ldr	r3, [pc, #616]	@ (8009354 <HAL_FDCAN_IRQHandler+0x274>)
 80090ea:	691b      	ldr	r3, [r3, #16]
 80090ec:	079b      	lsls	r3, r3, #30
 80090ee:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80090f0:	4b98      	ldr	r3, [pc, #608]	@ (8009354 <HAL_FDCAN_IRQHandler+0x274>)
 80090f2:	695b      	ldr	r3, [r3, #20]
 80090f4:	079b      	lsls	r3, r3, #30
 80090f6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80090f8:	4013      	ands	r3, r2
 80090fa:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009102:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8009106:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800910e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009110:	4013      	ands	r3, r2
 8009112:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800911a:	f003 030f 	and.w	r3, r3, #15
 800911e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009126:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009128:	4013      	ands	r3, r2
 800912a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009132:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009136:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800913e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009140:	4013      	ands	r3, r2
 8009142:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800914a:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 800914e:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009156:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009158:	4013      	ands	r3, r2
 800915a:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009162:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8009166:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800916e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009170:	4013      	ands	r3, r2
 8009172:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800917a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009182:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8009184:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009186:	0a1b      	lsrs	r3, r3, #8
 8009188:	f003 0301 	and.w	r3, r3, #1
 800918c:	2b00      	cmp	r3, #0
 800918e:	d010      	beq.n	80091b2 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8009190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009192:	0a1b      	lsrs	r3, r3, #8
 8009194:	f003 0301 	and.w	r3, r3, #1
 8009198:	2b00      	cmp	r3, #0
 800919a:	d00a      	beq.n	80091b2 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80091a4:	651a      	str	r2, [r3, #80]	@ 0x50
 80091a6:	4b6b      	ldr	r3, [pc, #428]	@ (8009354 <HAL_FDCAN_IRQHandler+0x274>)
 80091a8:	2200      	movs	r2, #0
 80091aa:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 fa54 	bl	800965a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80091b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091b4:	0a9b      	lsrs	r3, r3, #10
 80091b6:	f003 0301 	and.w	r3, r3, #1
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d01d      	beq.n	80091fa <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80091be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091c0:	0a9b      	lsrs	r3, r3, #10
 80091c2:	f003 0301 	and.w	r3, r3, #1
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d017      	beq.n	80091fa <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80091d2:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80091dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80091de:	4013      	ands	r3, r2
 80091e0:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80091ea:	651a      	str	r2, [r3, #80]	@ 0x50
 80091ec:	4b59      	ldr	r3, [pc, #356]	@ (8009354 <HAL_FDCAN_IRQHandler+0x274>)
 80091ee:	2200      	movs	r2, #0
 80091f0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80091f2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 fa07 	bl	8009608 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80091fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d00d      	beq.n	800921c <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681a      	ldr	r2, [r3, #0]
 8009204:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009206:	4b54      	ldr	r3, [pc, #336]	@ (8009358 <HAL_FDCAN_IRQHandler+0x278>)
 8009208:	400b      	ands	r3, r1
 800920a:	6513      	str	r3, [r2, #80]	@ 0x50
 800920c:	4a51      	ldr	r2, [pc, #324]	@ (8009354 <HAL_FDCAN_IRQHandler+0x274>)
 800920e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009210:	0f9b      	lsrs	r3, r3, #30
 8009212:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8009214:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 f9c0 	bl	800959c <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800921c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800921e:	2b00      	cmp	r3, #0
 8009220:	d00d      	beq.n	800923e <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681a      	ldr	r2, [r3, #0]
 8009226:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009228:	4b4b      	ldr	r3, [pc, #300]	@ (8009358 <HAL_FDCAN_IRQHandler+0x278>)
 800922a:	400b      	ands	r3, r1
 800922c:	6513      	str	r3, [r2, #80]	@ 0x50
 800922e:	4a49      	ldr	r2, [pc, #292]	@ (8009354 <HAL_FDCAN_IRQHandler+0x274>)
 8009230:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009232:	0f9b      	lsrs	r3, r3, #30
 8009234:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8009236:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 f9ba 	bl	80095b2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800923e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009240:	2b00      	cmp	r3, #0
 8009242:	d00d      	beq.n	8009260 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681a      	ldr	r2, [r3, #0]
 8009248:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800924a:	4b43      	ldr	r3, [pc, #268]	@ (8009358 <HAL_FDCAN_IRQHandler+0x278>)
 800924c:	400b      	ands	r3, r1
 800924e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009250:	4a40      	ldr	r2, [pc, #256]	@ (8009354 <HAL_FDCAN_IRQHandler+0x274>)
 8009252:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009254:	0f9b      	lsrs	r3, r3, #30
 8009256:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8009258:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f7f8 fc52 	bl	8001b04 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8009260:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009262:	2b00      	cmp	r3, #0
 8009264:	d00d      	beq.n	8009282 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681a      	ldr	r2, [r3, #0]
 800926a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800926c:	4b3a      	ldr	r3, [pc, #232]	@ (8009358 <HAL_FDCAN_IRQHandler+0x278>)
 800926e:	400b      	ands	r3, r1
 8009270:	6513      	str	r3, [r2, #80]	@ 0x50
 8009272:	4a38      	ldr	r2, [pc, #224]	@ (8009354 <HAL_FDCAN_IRQHandler+0x274>)
 8009274:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009276:	0f9b      	lsrs	r3, r3, #30
 8009278:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800927a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f000 f9a3 	bl	80095c8 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8009282:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009284:	0adb      	lsrs	r3, r3, #11
 8009286:	f003 0301 	and.w	r3, r3, #1
 800928a:	2b00      	cmp	r3, #0
 800928c:	d010      	beq.n	80092b0 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800928e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009290:	0adb      	lsrs	r3, r3, #11
 8009292:	f003 0301 	and.w	r3, r3, #1
 8009296:	2b00      	cmp	r3, #0
 8009298:	d00a      	beq.n	80092b0 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80092a2:	651a      	str	r2, [r3, #80]	@ 0x50
 80092a4:	4b2b      	ldr	r3, [pc, #172]	@ (8009354 <HAL_FDCAN_IRQHandler+0x274>)
 80092a6:	2200      	movs	r2, #0
 80092a8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 f997 	bl	80095de <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 80092b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092b2:	0a5b      	lsrs	r3, r3, #9
 80092b4:	f003 0301 	and.w	r3, r3, #1
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d01d      	beq.n	80092f8 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80092bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092be:	0a5b      	lsrs	r3, r3, #9
 80092c0:	f003 0301 	and.w	r3, r3, #1
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d017      	beq.n	80092f8 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80092d0:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80092da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092dc:	4013      	ands	r3, r2
 80092de:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80092e8:	651a      	str	r2, [r3, #80]	@ 0x50
 80092ea:	4b1a      	ldr	r3, [pc, #104]	@ (8009354 <HAL_FDCAN_IRQHandler+0x274>)
 80092ec:	2200      	movs	r2, #0
 80092ee:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80092f0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 f97d 	bl	80095f2 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 80092f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092fa:	0cdb      	lsrs	r3, r3, #19
 80092fc:	f003 0301 	and.w	r3, r3, #1
 8009300:	2b00      	cmp	r3, #0
 8009302:	d010      	beq.n	8009326 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8009304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009306:	0cdb      	lsrs	r3, r3, #19
 8009308:	f003 0301 	and.w	r3, r3, #1
 800930c:	2b00      	cmp	r3, #0
 800930e:	d00a      	beq.n	8009326 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8009318:	651a      	str	r2, [r3, #80]	@ 0x50
 800931a:	4b0e      	ldr	r3, [pc, #56]	@ (8009354 <HAL_FDCAN_IRQHandler+0x274>)
 800931c:	2200      	movs	r2, #0
 800931e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 f97c 	bl	800961e <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8009326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009328:	0c1b      	lsrs	r3, r3, #16
 800932a:	f003 0301 	and.w	r3, r3, #1
 800932e:	2b00      	cmp	r3, #0
 8009330:	d016      	beq.n	8009360 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8009332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009334:	0c1b      	lsrs	r3, r3, #16
 8009336:	f003 0301 	and.w	r3, r3, #1
 800933a:	2b00      	cmp	r3, #0
 800933c:	d010      	beq.n	8009360 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8009346:	651a      	str	r2, [r3, #80]	@ 0x50
 8009348:	4b02      	ldr	r3, [pc, #8]	@ (8009354 <HAL_FDCAN_IRQHandler+0x274>)
 800934a:	2200      	movs	r2, #0
 800934c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	e004      	b.n	800935c <HAL_FDCAN_IRQHandler+0x27c>
 8009352:	bf00      	nop
 8009354:	4000a800 	.word	0x4000a800
 8009358:	3fcfffff 	.word	0x3fcfffff
 800935c:	f000 f969 	bl	8009632 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8009360:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009362:	0c9b      	lsrs	r3, r3, #18
 8009364:	f003 0301 	and.w	r3, r3, #1
 8009368:	2b00      	cmp	r3, #0
 800936a:	d010      	beq.n	800938e <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800936c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800936e:	0c9b      	lsrs	r3, r3, #18
 8009370:	f003 0301 	and.w	r3, r3, #1
 8009374:	2b00      	cmp	r3, #0
 8009376:	d00a      	beq.n	800938e <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8009380:	651a      	str	r2, [r3, #80]	@ 0x50
 8009382:	4b83      	ldr	r3, [pc, #524]	@ (8009590 <HAL_FDCAN_IRQHandler+0x4b0>)
 8009384:	2200      	movs	r2, #0
 8009386:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 f95c 	bl	8009646 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800938e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009390:	0c5b      	lsrs	r3, r3, #17
 8009392:	f003 0301 	and.w	r3, r3, #1
 8009396:	2b00      	cmp	r3, #0
 8009398:	d015      	beq.n	80093c6 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800939a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800939c:	0c5b      	lsrs	r3, r3, #17
 800939e:	f003 0301 	and.w	r3, r3, #1
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d00f      	beq.n	80093c6 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80093ae:	651a      	str	r2, [r3, #80]	@ 0x50
 80093b0:	4b77      	ldr	r3, [pc, #476]	@ (8009590 <HAL_FDCAN_IRQHandler+0x4b0>)
 80093b2:	2200      	movs	r2, #0
 80093b4:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80093bc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80093c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d00d      	beq.n	80093e8 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681a      	ldr	r2, [r3, #0]
 80093d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80093d2:	4b70      	ldr	r3, [pc, #448]	@ (8009594 <HAL_FDCAN_IRQHandler+0x4b4>)
 80093d4:	400b      	ands	r3, r1
 80093d6:	6513      	str	r3, [r2, #80]	@ 0x50
 80093d8:	4a6d      	ldr	r2, [pc, #436]	@ (8009590 <HAL_FDCAN_IRQHandler+0x4b0>)
 80093da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80093dc:	0f9b      	lsrs	r3, r3, #30
 80093de:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80093e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f7f8 fc92 	bl	8001d0c <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80093e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d011      	beq.n	8009412 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80093f4:	4b67      	ldr	r3, [pc, #412]	@ (8009594 <HAL_FDCAN_IRQHandler+0x4b4>)
 80093f6:	400b      	ands	r3, r1
 80093f8:	6513      	str	r3, [r2, #80]	@ 0x50
 80093fa:	4a65      	ldr	r2, [pc, #404]	@ (8009590 <HAL_FDCAN_IRQHandler+0x4b0>)
 80093fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80093fe:	0f9b      	lsrs	r3, r3, #30
 8009400:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8009408:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800940a:	431a      	orrs	r2, r3
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4a60      	ldr	r2, [pc, #384]	@ (8009598 <HAL_FDCAN_IRQHandler+0x4b8>)
 8009418:	4293      	cmp	r3, r2
 800941a:	f040 80ac 	bne.w	8009576 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	f003 0303 	and.w	r3, r3, #3
 8009428:	2b00      	cmp	r3, #0
 800942a:	f000 80a4 	beq.w	8009576 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	685b      	ldr	r3, [r3, #4]
 8009432:	6a1b      	ldr	r3, [r3, #32]
 8009434:	f003 030f 	and.w	r3, r3, #15
 8009438:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	685b      	ldr	r3, [r3, #4]
 800943e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009440:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009442:	4013      	ands	r3, r2
 8009444:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	685b      	ldr	r3, [r3, #4]
 800944a:	6a1b      	ldr	r3, [r3, #32]
 800944c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009450:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009458:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800945a:	4013      	ands	r3, r2
 800945c:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	685b      	ldr	r3, [r3, #4]
 8009462:	6a1b      	ldr	r3, [r3, #32]
 8009464:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8009468:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009470:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009472:	4013      	ands	r3, r2
 8009474:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	6a1b      	ldr	r3, [r3, #32]
 800947c:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8009480:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	685b      	ldr	r3, [r3, #4]
 8009486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009488:	6a3a      	ldr	r2, [r7, #32]
 800948a:	4013      	ands	r3, r2
 800948c:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	685b      	ldr	r3, [r3, #4]
 8009492:	6a1b      	ldr	r3, [r3, #32]
 8009494:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8009498:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094a0:	69fa      	ldr	r2, [r7, #28]
 80094a2:	4013      	ands	r3, r2
 80094a4:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094ac:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	6a1b      	ldr	r3, [r3, #32]
 80094b4:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80094b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d007      	beq.n	80094cc <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	685b      	ldr	r3, [r3, #4]
 80094c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80094c2:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80094c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f000 f8db 	bl	8009682 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80094cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d007      	beq.n	80094e2 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80094d8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80094da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f000 f8db 	bl	8009698 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 80094e2:	69bb      	ldr	r3, [r7, #24]
 80094e4:	099b      	lsrs	r3, r3, #6
 80094e6:	f003 0301 	and.w	r3, r3, #1
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d01a      	beq.n	8009524 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	099b      	lsrs	r3, r3, #6
 80094f2:	f003 0301 	and.w	r3, r3, #1
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d014      	beq.n	8009524 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009500:	0c1b      	lsrs	r3, r3, #16
 8009502:	b29b      	uxth	r3, r3
 8009504:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800950c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009510:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	2240      	movs	r2, #64	@ 0x40
 8009518:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 800951a:	68fa      	ldr	r2, [r7, #12]
 800951c:	6939      	ldr	r1, [r7, #16]
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 f8c5 	bl	80096ae <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8009524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009526:	2b00      	cmp	r3, #0
 8009528:	d007      	beq.n	800953a <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009530:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8009532:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f000 f8c6 	bl	80096c6 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 800953a:	6a3b      	ldr	r3, [r7, #32]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d00b      	beq.n	8009558 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	6a3a      	ldr	r2, [r7, #32]
 8009546:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800954e:	6a3b      	ldr	r3, [r7, #32]
 8009550:	431a      	orrs	r2, r3
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8009558:	69fb      	ldr	r3, [r7, #28]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d00b      	beq.n	8009576 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	685b      	ldr	r3, [r3, #4]
 8009562:	69fa      	ldr	r2, [r7, #28]
 8009564:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800956c:	69fb      	ldr	r3, [r7, #28]
 800956e:	431a      	orrs	r2, r3
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800957c:	2b00      	cmp	r3, #0
 800957e:	d002      	beq.n	8009586 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 f874 	bl	800966e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8009586:	bf00      	nop
 8009588:	3758      	adds	r7, #88	@ 0x58
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	4000a800 	.word	0x4000a800
 8009594:	3fcfffff 	.word	0x3fcfffff
 8009598:	4000a000 	.word	0x4000a000

0800959c <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80095a6:	bf00      	nop
 80095a8:	370c      	adds	r7, #12
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr

080095b2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80095b2:	b480      	push	{r7}
 80095b4:	b083      	sub	sp, #12
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
 80095ba:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80095bc:	bf00      	nop
 80095be:	370c      	adds	r7, #12
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	4770      	bx	lr

080095c8 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b083      	sub	sp, #12
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80095d2:	bf00      	nop
 80095d4:	370c      	adds	r7, #12
 80095d6:	46bd      	mov	sp, r7
 80095d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095dc:	4770      	bx	lr

080095de <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80095de:	b480      	push	{r7}
 80095e0:	b083      	sub	sp, #12
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80095e6:	bf00      	nop
 80095e8:	370c      	adds	r7, #12
 80095ea:	46bd      	mov	sp, r7
 80095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f0:	4770      	bx	lr

080095f2 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80095f2:	b480      	push	{r7}
 80095f4:	b083      	sub	sp, #12
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]
 80095fa:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80095fc:	bf00      	nop
 80095fe:	370c      	adds	r7, #12
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr

08009608 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8009608:	b480      	push	{r7}
 800960a:	b083      	sub	sp, #12
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8009612:	bf00      	nop
 8009614:	370c      	adds	r7, #12
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr

0800961e <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800961e:	b480      	push	{r7}
 8009620:	b083      	sub	sp, #12
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8009626:	bf00      	nop
 8009628:	370c      	adds	r7, #12
 800962a:	46bd      	mov	sp, r7
 800962c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009630:	4770      	bx	lr

08009632 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8009632:	b480      	push	{r7}
 8009634:	b083      	sub	sp, #12
 8009636:	af00      	add	r7, sp, #0
 8009638:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800963a:	bf00      	nop
 800963c:	370c      	adds	r7, #12
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr

08009646 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8009646:	b480      	push	{r7}
 8009648:	b083      	sub	sp, #12
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800964e:	bf00      	nop
 8009650:	370c      	adds	r7, #12
 8009652:	46bd      	mov	sp, r7
 8009654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009658:	4770      	bx	lr

0800965a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800965a:	b480      	push	{r7}
 800965c:	b083      	sub	sp, #12
 800965e:	af00      	add	r7, sp, #0
 8009660:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8009662:	bf00      	nop
 8009664:	370c      	adds	r7, #12
 8009666:	46bd      	mov	sp, r7
 8009668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966c:	4770      	bx	lr

0800966e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800966e:	b480      	push	{r7}
 8009670:	b083      	sub	sp, #12
 8009672:	af00      	add	r7, sp, #0
 8009674:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8009676:	bf00      	nop
 8009678:	370c      	adds	r7, #12
 800967a:	46bd      	mov	sp, r7
 800967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009680:	4770      	bx	lr

08009682 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8009682:	b480      	push	{r7}
 8009684:	b083      	sub	sp, #12
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
 800968a:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800968c:	bf00      	nop
 800968e:	370c      	adds	r7, #12
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr

08009698 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8009698:	b480      	push	{r7}
 800969a:	b083      	sub	sp, #12
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80096a2:	bf00      	nop
 80096a4:	370c      	adds	r7, #12
 80096a6:	46bd      	mov	sp, r7
 80096a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ac:	4770      	bx	lr

080096ae <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80096ae:	b480      	push	{r7}
 80096b0:	b085      	sub	sp, #20
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	60f8      	str	r0, [r7, #12]
 80096b6:	60b9      	str	r1, [r7, #8]
 80096b8:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80096ba:	bf00      	nop
 80096bc:	3714      	adds	r7, #20
 80096be:	46bd      	mov	sp, r7
 80096c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c4:	4770      	bx	lr

080096c6 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80096c6:	b480      	push	{r7}
 80096c8:	b083      	sub	sp, #12
 80096ca:	af00      	add	r7, sp, #0
 80096cc:	6078      	str	r0, [r7, #4]
 80096ce:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80096d0:	bf00      	nop
 80096d2:	370c      	adds	r7, #12
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr

080096dc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80096dc:	b480      	push	{r7}
 80096de:	b085      	sub	sp, #20
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096e8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80096f2:	4ba7      	ldr	r3, [pc, #668]	@ (8009990 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80096f4:	4013      	ands	r3, r2
 80096f6:	68ba      	ldr	r2, [r7, #8]
 80096f8:	0091      	lsls	r1, r2, #2
 80096fa:	687a      	ldr	r2, [r7, #4]
 80096fc:	6812      	ldr	r2, [r2, #0]
 80096fe:	430b      	orrs	r3, r1
 8009700:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800970c:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009714:	041a      	lsls	r2, r3, #16
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	430a      	orrs	r2, r1
 800971c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009724:	68ba      	ldr	r2, [r7, #8]
 8009726:	4413      	add	r3, r2
 8009728:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8009732:	4b97      	ldr	r3, [pc, #604]	@ (8009990 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009734:	4013      	ands	r3, r2
 8009736:	68ba      	ldr	r2, [r7, #8]
 8009738:	0091      	lsls	r1, r2, #2
 800973a:	687a      	ldr	r2, [r7, #4]
 800973c:	6812      	ldr	r2, [r2, #0]
 800973e:	430b      	orrs	r3, r1
 8009740:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800974c:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009754:	041a      	lsls	r2, r3, #16
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	430a      	orrs	r2, r1
 800975c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009764:	005b      	lsls	r3, r3, #1
 8009766:	68ba      	ldr	r2, [r7, #8]
 8009768:	4413      	add	r3, r2
 800976a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8009774:	4b86      	ldr	r3, [pc, #536]	@ (8009990 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009776:	4013      	ands	r3, r2
 8009778:	68ba      	ldr	r2, [r7, #8]
 800977a:	0091      	lsls	r1, r2, #2
 800977c:	687a      	ldr	r2, [r7, #4]
 800977e:	6812      	ldr	r2, [r2, #0]
 8009780:	430b      	orrs	r3, r1
 8009782:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800978e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009796:	041a      	lsls	r2, r3, #16
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	430a      	orrs	r2, r1
 800979e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097a6:	687a      	ldr	r2, [r7, #4]
 80097a8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80097aa:	fb02 f303 	mul.w	r3, r2, r3
 80097ae:	68ba      	ldr	r2, [r7, #8]
 80097b0:	4413      	add	r3, r2
 80097b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80097bc:	4b74      	ldr	r3, [pc, #464]	@ (8009990 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80097be:	4013      	ands	r3, r2
 80097c0:	68ba      	ldr	r2, [r7, #8]
 80097c2:	0091      	lsls	r1, r2, #2
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	6812      	ldr	r2, [r2, #0]
 80097c8:	430b      	orrs	r3, r1
 80097ca:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80097d6:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097de:	041a      	lsls	r2, r3, #16
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	430a      	orrs	r2, r1
 80097e6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097ee:	687a      	ldr	r2, [r7, #4]
 80097f0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80097f2:	fb02 f303 	mul.w	r3, r2, r3
 80097f6:	68ba      	ldr	r2, [r7, #8]
 80097f8:	4413      	add	r3, r2
 80097fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8009804:	4b62      	ldr	r3, [pc, #392]	@ (8009990 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009806:	4013      	ands	r3, r2
 8009808:	68ba      	ldr	r2, [r7, #8]
 800980a:	0091      	lsls	r1, r2, #2
 800980c:	687a      	ldr	r2, [r7, #4]
 800980e:	6812      	ldr	r2, [r2, #0]
 8009810:	430b      	orrs	r3, r1
 8009812:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800981a:	687a      	ldr	r2, [r7, #4]
 800981c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800981e:	fb02 f303 	mul.w	r3, r2, r3
 8009822:	68ba      	ldr	r2, [r7, #8]
 8009824:	4413      	add	r3, r2
 8009826:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8009830:	4b57      	ldr	r3, [pc, #348]	@ (8009990 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009832:	4013      	ands	r3, r2
 8009834:	68ba      	ldr	r2, [r7, #8]
 8009836:	0091      	lsls	r1, r2, #2
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	6812      	ldr	r2, [r2, #0]
 800983c:	430b      	orrs	r3, r1
 800983e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800984a:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009852:	041a      	lsls	r2, r3, #16
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	430a      	orrs	r2, r1
 800985a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009862:	005b      	lsls	r3, r3, #1
 8009864:	68ba      	ldr	r2, [r7, #8]
 8009866:	4413      	add	r3, r2
 8009868:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8009872:	4b47      	ldr	r3, [pc, #284]	@ (8009990 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009874:	4013      	ands	r3, r2
 8009876:	68ba      	ldr	r2, [r7, #8]
 8009878:	0091      	lsls	r1, r2, #2
 800987a:	687a      	ldr	r2, [r7, #4]
 800987c:	6812      	ldr	r2, [r2, #0]
 800987e:	430b      	orrs	r3, r1
 8009880:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800988c:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009894:	041a      	lsls	r2, r3, #16
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	430a      	orrs	r2, r1
 800989c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80098a8:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80098b0:	061a      	lsls	r2, r3, #24
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	430a      	orrs	r2, r1
 80098b8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80098c0:	4b34      	ldr	r3, [pc, #208]	@ (8009994 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80098c2:	4413      	add	r3, r2
 80098c4:	009a      	lsls	r2, r3, #2
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098d2:	009b      	lsls	r3, r3, #2
 80098d4:	441a      	add	r2, r3
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098e2:	00db      	lsls	r3, r3, #3
 80098e4:	441a      	add	r2, r3
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098f2:	6879      	ldr	r1, [r7, #4]
 80098f4:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 80098f6:	fb01 f303 	mul.w	r3, r1, r3
 80098fa:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80098fc:	441a      	add	r2, r3
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800990a:	6879      	ldr	r1, [r7, #4]
 800990c:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 800990e:	fb01 f303 	mul.w	r3, r1, r3
 8009912:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8009914:	441a      	add	r2, r3
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009922:	6879      	ldr	r1, [r7, #4]
 8009924:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8009926:	fb01 f303 	mul.w	r3, r1, r3
 800992a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800992c:	441a      	add	r2, r3
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800993e:	00db      	lsls	r3, r3, #3
 8009940:	441a      	add	r2, r3
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009952:	6879      	ldr	r1, [r7, #4]
 8009954:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8009956:	fb01 f303 	mul.w	r3, r1, r3
 800995a:	009b      	lsls	r3, r3, #2
 800995c:	441a      	add	r2, r3
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800996e:	6879      	ldr	r1, [r7, #4]
 8009970:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8009972:	fb01 f303 	mul.w	r3, r1, r3
 8009976:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8009978:	441a      	add	r2, r3
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009986:	4a04      	ldr	r2, [pc, #16]	@ (8009998 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d915      	bls.n	80099b8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800998c:	e006      	b.n	800999c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800998e:	bf00      	nop
 8009990:	ffff0003 	.word	0xffff0003
 8009994:	10002b00 	.word	0x10002b00
 8009998:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80099a2:	f043 0220 	orr.w	r2, r3, #32
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2203      	movs	r2, #3
 80099b0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 80099b4:	2301      	movs	r3, #1
 80099b6:	e010      	b.n	80099da <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099bc:	60fb      	str	r3, [r7, #12]
 80099be:	e005      	b.n	80099cc <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2200      	movs	r2, #0
 80099c4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	3304      	adds	r3, #4
 80099ca:	60fb      	str	r3, [r7, #12]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099d2:	68fa      	ldr	r2, [r7, #12]
 80099d4:	429a      	cmp	r2, r3
 80099d6:	d3f3      	bcc.n	80099c0 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80099d8:	2300      	movs	r3, #0
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3714      	adds	r7, #20
 80099de:	46bd      	mov	sp, r7
 80099e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e4:	4770      	bx	lr
 80099e6:	bf00      	nop

080099e8 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b089      	sub	sp, #36	@ 0x24
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	60f8      	str	r0, [r7, #12]
 80099f0:	60b9      	str	r1, [r7, #8]
 80099f2:	607a      	str	r2, [r7, #4]
 80099f4:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d10a      	bne.n	8009a14 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8009a06:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	61fb      	str	r3, [r7, #28]
 8009a12:	e00a      	b.n	8009a2a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8009a1c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8009a22:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8009a24:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009a28:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	6a1b      	ldr	r3, [r3, #32]
 8009a2e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8009a34:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8009a3a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8009a40:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	68db      	ldr	r3, [r3, #12]
 8009a46:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8009a48:	4313      	orrs	r3, r2
 8009a4a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a56:	6839      	ldr	r1, [r7, #0]
 8009a58:	fb01 f303 	mul.w	r3, r1, r3
 8009a5c:	009b      	lsls	r3, r3, #2
 8009a5e:	4413      	add	r3, r2
 8009a60:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8009a62:	69bb      	ldr	r3, [r7, #24]
 8009a64:	69fa      	ldr	r2, [r7, #28]
 8009a66:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8009a68:	69bb      	ldr	r3, [r7, #24]
 8009a6a:	3304      	adds	r3, #4
 8009a6c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8009a6e:	69bb      	ldr	r3, [r7, #24]
 8009a70:	693a      	ldr	r2, [r7, #16]
 8009a72:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8009a74:	69bb      	ldr	r3, [r7, #24]
 8009a76:	3304      	adds	r3, #4
 8009a78:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	617b      	str	r3, [r7, #20]
 8009a7e:	e020      	b.n	8009ac2 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	3303      	adds	r3, #3
 8009a84:	687a      	ldr	r2, [r7, #4]
 8009a86:	4413      	add	r3, r2
 8009a88:	781b      	ldrb	r3, [r3, #0]
 8009a8a:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	3302      	adds	r3, #2
 8009a90:	6879      	ldr	r1, [r7, #4]
 8009a92:	440b      	add	r3, r1
 8009a94:	781b      	ldrb	r3, [r3, #0]
 8009a96:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8009a98:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	3301      	adds	r3, #1
 8009a9e:	6879      	ldr	r1, [r7, #4]
 8009aa0:	440b      	add	r3, r1
 8009aa2:	781b      	ldrb	r3, [r3, #0]
 8009aa4:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8009aa6:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8009aa8:	6879      	ldr	r1, [r7, #4]
 8009aaa:	697a      	ldr	r2, [r7, #20]
 8009aac:	440a      	add	r2, r1
 8009aae:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8009ab0:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8009ab2:	69bb      	ldr	r3, [r7, #24]
 8009ab4:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8009ab6:	69bb      	ldr	r3, [r7, #24]
 8009ab8:	3304      	adds	r3, #4
 8009aba:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	3304      	adds	r3, #4
 8009ac0:	617b      	str	r3, [r7, #20]
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	68db      	ldr	r3, [r3, #12]
 8009ac6:	4a06      	ldr	r2, [pc, #24]	@ (8009ae0 <FDCAN_CopyMessageToRAM+0xf8>)
 8009ac8:	5cd3      	ldrb	r3, [r2, r3]
 8009aca:	461a      	mov	r2, r3
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d3d6      	bcc.n	8009a80 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8009ad2:	bf00      	nop
 8009ad4:	bf00      	nop
 8009ad6:	3724      	adds	r7, #36	@ 0x24
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr
 8009ae0:	08014994 	.word	0x08014994

08009ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b089      	sub	sp, #36	@ 0x24
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009aee:	2300      	movs	r3, #0
 8009af0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009af2:	4b86      	ldr	r3, [pc, #536]	@ (8009d0c <HAL_GPIO_Init+0x228>)
 8009af4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009af6:	e18c      	b.n	8009e12 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	681a      	ldr	r2, [r3, #0]
 8009afc:	2101      	movs	r1, #1
 8009afe:	69fb      	ldr	r3, [r7, #28]
 8009b00:	fa01 f303 	lsl.w	r3, r1, r3
 8009b04:	4013      	ands	r3, r2
 8009b06:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	f000 817e 	beq.w	8009e0c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	f003 0303 	and.w	r3, r3, #3
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	d005      	beq.n	8009b28 <HAL_GPIO_Init+0x44>
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	f003 0303 	and.w	r3, r3, #3
 8009b24:	2b02      	cmp	r3, #2
 8009b26:	d130      	bne.n	8009b8a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	689b      	ldr	r3, [r3, #8]
 8009b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009b2e:	69fb      	ldr	r3, [r7, #28]
 8009b30:	005b      	lsls	r3, r3, #1
 8009b32:	2203      	movs	r2, #3
 8009b34:	fa02 f303 	lsl.w	r3, r2, r3
 8009b38:	43db      	mvns	r3, r3
 8009b3a:	69ba      	ldr	r2, [r7, #24]
 8009b3c:	4013      	ands	r3, r2
 8009b3e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	68da      	ldr	r2, [r3, #12]
 8009b44:	69fb      	ldr	r3, [r7, #28]
 8009b46:	005b      	lsls	r3, r3, #1
 8009b48:	fa02 f303 	lsl.w	r3, r2, r3
 8009b4c:	69ba      	ldr	r2, [r7, #24]
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	69ba      	ldr	r2, [r7, #24]
 8009b56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009b5e:	2201      	movs	r2, #1
 8009b60:	69fb      	ldr	r3, [r7, #28]
 8009b62:	fa02 f303 	lsl.w	r3, r2, r3
 8009b66:	43db      	mvns	r3, r3
 8009b68:	69ba      	ldr	r2, [r7, #24]
 8009b6a:	4013      	ands	r3, r2
 8009b6c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	091b      	lsrs	r3, r3, #4
 8009b74:	f003 0201 	and.w	r2, r3, #1
 8009b78:	69fb      	ldr	r3, [r7, #28]
 8009b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8009b7e:	69ba      	ldr	r2, [r7, #24]
 8009b80:	4313      	orrs	r3, r2
 8009b82:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	69ba      	ldr	r2, [r7, #24]
 8009b88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	f003 0303 	and.w	r3, r3, #3
 8009b92:	2b03      	cmp	r3, #3
 8009b94:	d017      	beq.n	8009bc6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	68db      	ldr	r3, [r3, #12]
 8009b9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009b9c:	69fb      	ldr	r3, [r7, #28]
 8009b9e:	005b      	lsls	r3, r3, #1
 8009ba0:	2203      	movs	r2, #3
 8009ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ba6:	43db      	mvns	r3, r3
 8009ba8:	69ba      	ldr	r2, [r7, #24]
 8009baa:	4013      	ands	r3, r2
 8009bac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	689a      	ldr	r2, [r3, #8]
 8009bb2:	69fb      	ldr	r3, [r7, #28]
 8009bb4:	005b      	lsls	r3, r3, #1
 8009bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8009bba:	69ba      	ldr	r2, [r7, #24]
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	69ba      	ldr	r2, [r7, #24]
 8009bc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	685b      	ldr	r3, [r3, #4]
 8009bca:	f003 0303 	and.w	r3, r3, #3
 8009bce:	2b02      	cmp	r3, #2
 8009bd0:	d123      	bne.n	8009c1a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009bd2:	69fb      	ldr	r3, [r7, #28]
 8009bd4:	08da      	lsrs	r2, r3, #3
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	3208      	adds	r2, #8
 8009bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009be0:	69fb      	ldr	r3, [r7, #28]
 8009be2:	f003 0307 	and.w	r3, r3, #7
 8009be6:	009b      	lsls	r3, r3, #2
 8009be8:	220f      	movs	r2, #15
 8009bea:	fa02 f303 	lsl.w	r3, r2, r3
 8009bee:	43db      	mvns	r3, r3
 8009bf0:	69ba      	ldr	r2, [r7, #24]
 8009bf2:	4013      	ands	r3, r2
 8009bf4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	691a      	ldr	r2, [r3, #16]
 8009bfa:	69fb      	ldr	r3, [r7, #28]
 8009bfc:	f003 0307 	and.w	r3, r3, #7
 8009c00:	009b      	lsls	r3, r3, #2
 8009c02:	fa02 f303 	lsl.w	r3, r2, r3
 8009c06:	69ba      	ldr	r2, [r7, #24]
 8009c08:	4313      	orrs	r3, r2
 8009c0a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009c0c:	69fb      	ldr	r3, [r7, #28]
 8009c0e:	08da      	lsrs	r2, r3, #3
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	3208      	adds	r2, #8
 8009c14:	69b9      	ldr	r1, [r7, #24]
 8009c16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009c20:	69fb      	ldr	r3, [r7, #28]
 8009c22:	005b      	lsls	r3, r3, #1
 8009c24:	2203      	movs	r2, #3
 8009c26:	fa02 f303 	lsl.w	r3, r2, r3
 8009c2a:	43db      	mvns	r3, r3
 8009c2c:	69ba      	ldr	r2, [r7, #24]
 8009c2e:	4013      	ands	r3, r2
 8009c30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	685b      	ldr	r3, [r3, #4]
 8009c36:	f003 0203 	and.w	r2, r3, #3
 8009c3a:	69fb      	ldr	r3, [r7, #28]
 8009c3c:	005b      	lsls	r3, r3, #1
 8009c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c42:	69ba      	ldr	r2, [r7, #24]
 8009c44:	4313      	orrs	r3, r2
 8009c46:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	69ba      	ldr	r2, [r7, #24]
 8009c4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	f000 80d8 	beq.w	8009e0c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009c5c:	4b2c      	ldr	r3, [pc, #176]	@ (8009d10 <HAL_GPIO_Init+0x22c>)
 8009c5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009c62:	4a2b      	ldr	r2, [pc, #172]	@ (8009d10 <HAL_GPIO_Init+0x22c>)
 8009c64:	f043 0302 	orr.w	r3, r3, #2
 8009c68:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8009c6c:	4b28      	ldr	r3, [pc, #160]	@ (8009d10 <HAL_GPIO_Init+0x22c>)
 8009c6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009c72:	f003 0302 	and.w	r3, r3, #2
 8009c76:	60fb      	str	r3, [r7, #12]
 8009c78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009c7a:	4a26      	ldr	r2, [pc, #152]	@ (8009d14 <HAL_GPIO_Init+0x230>)
 8009c7c:	69fb      	ldr	r3, [r7, #28]
 8009c7e:	089b      	lsrs	r3, r3, #2
 8009c80:	3302      	adds	r3, #2
 8009c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009c88:	69fb      	ldr	r3, [r7, #28]
 8009c8a:	f003 0303 	and.w	r3, r3, #3
 8009c8e:	009b      	lsls	r3, r3, #2
 8009c90:	220f      	movs	r2, #15
 8009c92:	fa02 f303 	lsl.w	r3, r2, r3
 8009c96:	43db      	mvns	r3, r3
 8009c98:	69ba      	ldr	r2, [r7, #24]
 8009c9a:	4013      	ands	r3, r2
 8009c9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	4a1d      	ldr	r2, [pc, #116]	@ (8009d18 <HAL_GPIO_Init+0x234>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d04a      	beq.n	8009d3c <HAL_GPIO_Init+0x258>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	4a1c      	ldr	r2, [pc, #112]	@ (8009d1c <HAL_GPIO_Init+0x238>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d02b      	beq.n	8009d06 <HAL_GPIO_Init+0x222>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	4a1b      	ldr	r2, [pc, #108]	@ (8009d20 <HAL_GPIO_Init+0x23c>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d025      	beq.n	8009d02 <HAL_GPIO_Init+0x21e>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	4a1a      	ldr	r2, [pc, #104]	@ (8009d24 <HAL_GPIO_Init+0x240>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d01f      	beq.n	8009cfe <HAL_GPIO_Init+0x21a>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	4a19      	ldr	r2, [pc, #100]	@ (8009d28 <HAL_GPIO_Init+0x244>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d019      	beq.n	8009cfa <HAL_GPIO_Init+0x216>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	4a18      	ldr	r2, [pc, #96]	@ (8009d2c <HAL_GPIO_Init+0x248>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d013      	beq.n	8009cf6 <HAL_GPIO_Init+0x212>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	4a17      	ldr	r2, [pc, #92]	@ (8009d30 <HAL_GPIO_Init+0x24c>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d00d      	beq.n	8009cf2 <HAL_GPIO_Init+0x20e>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	4a16      	ldr	r2, [pc, #88]	@ (8009d34 <HAL_GPIO_Init+0x250>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d007      	beq.n	8009cee <HAL_GPIO_Init+0x20a>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	4a15      	ldr	r2, [pc, #84]	@ (8009d38 <HAL_GPIO_Init+0x254>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d101      	bne.n	8009cea <HAL_GPIO_Init+0x206>
 8009ce6:	2309      	movs	r3, #9
 8009ce8:	e029      	b.n	8009d3e <HAL_GPIO_Init+0x25a>
 8009cea:	230a      	movs	r3, #10
 8009cec:	e027      	b.n	8009d3e <HAL_GPIO_Init+0x25a>
 8009cee:	2307      	movs	r3, #7
 8009cf0:	e025      	b.n	8009d3e <HAL_GPIO_Init+0x25a>
 8009cf2:	2306      	movs	r3, #6
 8009cf4:	e023      	b.n	8009d3e <HAL_GPIO_Init+0x25a>
 8009cf6:	2305      	movs	r3, #5
 8009cf8:	e021      	b.n	8009d3e <HAL_GPIO_Init+0x25a>
 8009cfa:	2304      	movs	r3, #4
 8009cfc:	e01f      	b.n	8009d3e <HAL_GPIO_Init+0x25a>
 8009cfe:	2303      	movs	r3, #3
 8009d00:	e01d      	b.n	8009d3e <HAL_GPIO_Init+0x25a>
 8009d02:	2302      	movs	r3, #2
 8009d04:	e01b      	b.n	8009d3e <HAL_GPIO_Init+0x25a>
 8009d06:	2301      	movs	r3, #1
 8009d08:	e019      	b.n	8009d3e <HAL_GPIO_Init+0x25a>
 8009d0a:	bf00      	nop
 8009d0c:	58000080 	.word	0x58000080
 8009d10:	58024400 	.word	0x58024400
 8009d14:	58000400 	.word	0x58000400
 8009d18:	58020000 	.word	0x58020000
 8009d1c:	58020400 	.word	0x58020400
 8009d20:	58020800 	.word	0x58020800
 8009d24:	58020c00 	.word	0x58020c00
 8009d28:	58021000 	.word	0x58021000
 8009d2c:	58021400 	.word	0x58021400
 8009d30:	58021800 	.word	0x58021800
 8009d34:	58021c00 	.word	0x58021c00
 8009d38:	58022400 	.word	0x58022400
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	69fa      	ldr	r2, [r7, #28]
 8009d40:	f002 0203 	and.w	r2, r2, #3
 8009d44:	0092      	lsls	r2, r2, #2
 8009d46:	4093      	lsls	r3, r2
 8009d48:	69ba      	ldr	r2, [r7, #24]
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009d4e:	4938      	ldr	r1, [pc, #224]	@ (8009e30 <HAL_GPIO_Init+0x34c>)
 8009d50:	69fb      	ldr	r3, [r7, #28]
 8009d52:	089b      	lsrs	r3, r3, #2
 8009d54:	3302      	adds	r3, #2
 8009d56:	69ba      	ldr	r2, [r7, #24]
 8009d58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009d5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	43db      	mvns	r3, r3
 8009d68:	69ba      	ldr	r2, [r7, #24]
 8009d6a:	4013      	ands	r3, r2
 8009d6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d003      	beq.n	8009d82 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8009d7a:	69ba      	ldr	r2, [r7, #24]
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8009d82:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009d86:	69bb      	ldr	r3, [r7, #24]
 8009d88:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009d8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	43db      	mvns	r3, r3
 8009d96:	69ba      	ldr	r2, [r7, #24]
 8009d98:	4013      	ands	r3, r2
 8009d9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d003      	beq.n	8009db0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8009da8:	69ba      	ldr	r2, [r7, #24]
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	4313      	orrs	r3, r2
 8009dae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009db0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009db4:	69bb      	ldr	r3, [r7, #24]
 8009db6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	43db      	mvns	r3, r3
 8009dc2:	69ba      	ldr	r2, [r7, #24]
 8009dc4:	4013      	ands	r3, r2
 8009dc6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d003      	beq.n	8009ddc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8009dd4:	69ba      	ldr	r2, [r7, #24]
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	4313      	orrs	r3, r2
 8009dda:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	69ba      	ldr	r2, [r7, #24]
 8009de0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	43db      	mvns	r3, r3
 8009dec:	69ba      	ldr	r2, [r7, #24]
 8009dee:	4013      	ands	r3, r2
 8009df0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	685b      	ldr	r3, [r3, #4]
 8009df6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d003      	beq.n	8009e06 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8009dfe:	69ba      	ldr	r2, [r7, #24]
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	4313      	orrs	r3, r2
 8009e04:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	69ba      	ldr	r2, [r7, #24]
 8009e0a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009e0c:	69fb      	ldr	r3, [r7, #28]
 8009e0e:	3301      	adds	r3, #1
 8009e10:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	681a      	ldr	r2, [r3, #0]
 8009e16:	69fb      	ldr	r3, [r7, #28]
 8009e18:	fa22 f303 	lsr.w	r3, r2, r3
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	f47f ae6b 	bne.w	8009af8 <HAL_GPIO_Init+0x14>
  }
}
 8009e22:	bf00      	nop
 8009e24:	bf00      	nop
 8009e26:	3724      	adds	r7, #36	@ 0x24
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr
 8009e30:	58000400 	.word	0x58000400

08009e34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b085      	sub	sp, #20
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	691a      	ldr	r2, [r3, #16]
 8009e44:	887b      	ldrh	r3, [r7, #2]
 8009e46:	4013      	ands	r3, r2
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d002      	beq.n	8009e52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	73fb      	strb	r3, [r7, #15]
 8009e50:	e001      	b.n	8009e56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009e52:	2300      	movs	r3, #0
 8009e54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3714      	adds	r7, #20
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr

08009e64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b083      	sub	sp, #12
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	460b      	mov	r3, r1
 8009e6e:	807b      	strh	r3, [r7, #2]
 8009e70:	4613      	mov	r3, r2
 8009e72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009e74:	787b      	ldrb	r3, [r7, #1]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d003      	beq.n	8009e82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009e7a:	887a      	ldrh	r2, [r7, #2]
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009e80:	e003      	b.n	8009e8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009e82:	887b      	ldrh	r3, [r7, #2]
 8009e84:	041a      	lsls	r2, r3, #16
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	619a      	str	r2, [r3, #24]
}
 8009e8a:	bf00      	nop
 8009e8c:	370c      	adds	r7, #12
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e94:	4770      	bx	lr
	...

08009e98 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009ea0:	4b19      	ldr	r3, [pc, #100]	@ (8009f08 <HAL_PWREx_ConfigSupply+0x70>)
 8009ea2:	68db      	ldr	r3, [r3, #12]
 8009ea4:	f003 0304 	and.w	r3, r3, #4
 8009ea8:	2b04      	cmp	r3, #4
 8009eaa:	d00a      	beq.n	8009ec2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009eac:	4b16      	ldr	r3, [pc, #88]	@ (8009f08 <HAL_PWREx_ConfigSupply+0x70>)
 8009eae:	68db      	ldr	r3, [r3, #12]
 8009eb0:	f003 0307 	and.w	r3, r3, #7
 8009eb4:	687a      	ldr	r2, [r7, #4]
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	d001      	beq.n	8009ebe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009eba:	2301      	movs	r3, #1
 8009ebc:	e01f      	b.n	8009efe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	e01d      	b.n	8009efe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009ec2:	4b11      	ldr	r3, [pc, #68]	@ (8009f08 <HAL_PWREx_ConfigSupply+0x70>)
 8009ec4:	68db      	ldr	r3, [r3, #12]
 8009ec6:	f023 0207 	bic.w	r2, r3, #7
 8009eca:	490f      	ldr	r1, [pc, #60]	@ (8009f08 <HAL_PWREx_ConfigSupply+0x70>)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009ed2:	f7f9 fe27 	bl	8003b24 <HAL_GetTick>
 8009ed6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009ed8:	e009      	b.n	8009eee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009eda:	f7f9 fe23 	bl	8003b24 <HAL_GetTick>
 8009ede:	4602      	mov	r2, r0
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	1ad3      	subs	r3, r2, r3
 8009ee4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009ee8:	d901      	bls.n	8009eee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009eea:	2301      	movs	r3, #1
 8009eec:	e007      	b.n	8009efe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009eee:	4b06      	ldr	r3, [pc, #24]	@ (8009f08 <HAL_PWREx_ConfigSupply+0x70>)
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009ef6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009efa:	d1ee      	bne.n	8009eda <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009efc:	2300      	movs	r3, #0
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3710      	adds	r7, #16
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}
 8009f06:	bf00      	nop
 8009f08:	58024800 	.word	0x58024800

08009f0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b08c      	sub	sp, #48	@ 0x30
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d101      	bne.n	8009f1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	e3c8      	b.n	800a6b0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f003 0301 	and.w	r3, r3, #1
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	f000 8087 	beq.w	800a03a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009f2c:	4b88      	ldr	r3, [pc, #544]	@ (800a150 <HAL_RCC_OscConfig+0x244>)
 8009f2e:	691b      	ldr	r3, [r3, #16]
 8009f30:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009f36:	4b86      	ldr	r3, [pc, #536]	@ (800a150 <HAL_RCC_OscConfig+0x244>)
 8009f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f3e:	2b10      	cmp	r3, #16
 8009f40:	d007      	beq.n	8009f52 <HAL_RCC_OscConfig+0x46>
 8009f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f44:	2b18      	cmp	r3, #24
 8009f46:	d110      	bne.n	8009f6a <HAL_RCC_OscConfig+0x5e>
 8009f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f4a:	f003 0303 	and.w	r3, r3, #3
 8009f4e:	2b02      	cmp	r3, #2
 8009f50:	d10b      	bne.n	8009f6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009f52:	4b7f      	ldr	r3, [pc, #508]	@ (800a150 <HAL_RCC_OscConfig+0x244>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d06c      	beq.n	800a038 <HAL_RCC_OscConfig+0x12c>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d168      	bne.n	800a038 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009f66:	2301      	movs	r3, #1
 8009f68:	e3a2      	b.n	800a6b0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f72:	d106      	bne.n	8009f82 <HAL_RCC_OscConfig+0x76>
 8009f74:	4b76      	ldr	r3, [pc, #472]	@ (800a150 <HAL_RCC_OscConfig+0x244>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	4a75      	ldr	r2, [pc, #468]	@ (800a150 <HAL_RCC_OscConfig+0x244>)
 8009f7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009f7e:	6013      	str	r3, [r2, #0]
 8009f80:	e02e      	b.n	8009fe0 <HAL_RCC_OscConfig+0xd4>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d10c      	bne.n	8009fa4 <HAL_RCC_OscConfig+0x98>
 8009f8a:	4b71      	ldr	r3, [pc, #452]	@ (800a150 <HAL_RCC_OscConfig+0x244>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4a70      	ldr	r2, [pc, #448]	@ (800a150 <HAL_RCC_OscConfig+0x244>)
 8009f90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009f94:	6013      	str	r3, [r2, #0]
 8009f96:	4b6e      	ldr	r3, [pc, #440]	@ (800a150 <HAL_RCC_OscConfig+0x244>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4a6d      	ldr	r2, [pc, #436]	@ (800a150 <HAL_RCC_OscConfig+0x244>)
 8009f9c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009fa0:	6013      	str	r3, [r2, #0]
 8009fa2:	e01d      	b.n	8009fe0 <HAL_RCC_OscConfig+0xd4>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009fac:	d10c      	bne.n	8009fc8 <HAL_RCC_OscConfig+0xbc>
 8009fae:	4b68      	ldr	r3, [pc, #416]	@ (800a150 <HAL_RCC_OscConfig+0x244>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	4a67      	ldr	r2, [pc, #412]	@ (800a150 <HAL_RCC_OscConfig+0x244>)
 8009fb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009fb8:	6013      	str	r3, [r2, #0]
 8009fba:	4b65      	ldr	r3, [pc, #404]	@ (800a150 <HAL_RCC_OscConfig+0x244>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	4a64      	ldr	r2, [pc, #400]	@ (800a150 <HAL_RCC_OscConfig+0x244>)
 8009fc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009fc4:	6013      	str	r3, [r2, #0]
 8009fc6:	e00b      	b.n	8009fe0 <HAL_RCC_OscConfig+0xd4>
 8009fc8:	4b61      	ldr	r3, [pc, #388]	@ (800a150 <HAL_RCC_OscConfig+0x244>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	4a60      	ldr	r2, [pc, #384]	@ (800a150 <HAL_RCC_OscConfig+0x244>)
 8009fce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009fd2:	6013      	str	r3, [r2, #0]
 8009fd4:	4b5e      	ldr	r3, [pc, #376]	@ (800a150 <HAL_RCC_OscConfig+0x244>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4a5d      	ldr	r2, [pc, #372]	@ (800a150 <HAL_RCC_OscConfig+0x244>)
 8009fda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009fde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d013      	beq.n	800a010 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fe8:	f7f9 fd9c 	bl	8003b24 <HAL_GetTick>
 8009fec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009fee:	e008      	b.n	800a002 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009ff0:	f7f9 fd98 	bl	8003b24 <HAL_GetTick>
 8009ff4:	4602      	mov	r2, r0
 8009ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ff8:	1ad3      	subs	r3, r2, r3
 8009ffa:	2b64      	cmp	r3, #100	@ 0x64
 8009ffc:	d901      	bls.n	800a002 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009ffe:	2303      	movs	r3, #3
 800a000:	e356      	b.n	800a6b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a002:	4b53      	ldr	r3, [pc, #332]	@ (800a150 <HAL_RCC_OscConfig+0x244>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d0f0      	beq.n	8009ff0 <HAL_RCC_OscConfig+0xe4>
 800a00e:	e014      	b.n	800a03a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a010:	f7f9 fd88 	bl	8003b24 <HAL_GetTick>
 800a014:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a016:	e008      	b.n	800a02a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a018:	f7f9 fd84 	bl	8003b24 <HAL_GetTick>
 800a01c:	4602      	mov	r2, r0
 800a01e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a020:	1ad3      	subs	r3, r2, r3
 800a022:	2b64      	cmp	r3, #100	@ 0x64
 800a024:	d901      	bls.n	800a02a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a026:	2303      	movs	r3, #3
 800a028:	e342      	b.n	800a6b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a02a:	4b49      	ldr	r3, [pc, #292]	@ (800a150 <HAL_RCC_OscConfig+0x244>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a032:	2b00      	cmp	r3, #0
 800a034:	d1f0      	bne.n	800a018 <HAL_RCC_OscConfig+0x10c>
 800a036:	e000      	b.n	800a03a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a038:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f003 0302 	and.w	r3, r3, #2
 800a042:	2b00      	cmp	r3, #0
 800a044:	f000 808c 	beq.w	800a160 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a048:	4b41      	ldr	r3, [pc, #260]	@ (800a150 <HAL_RCC_OscConfig+0x244>)
 800a04a:	691b      	ldr	r3, [r3, #16]
 800a04c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a050:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a052:	4b3f      	ldr	r3, [pc, #252]	@ (800a150 <HAL_RCC_OscConfig+0x244>)
 800a054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a056:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a058:	6a3b      	ldr	r3, [r7, #32]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d007      	beq.n	800a06e <HAL_RCC_OscConfig+0x162>
 800a05e:	6a3b      	ldr	r3, [r7, #32]
 800a060:	2b18      	cmp	r3, #24
 800a062:	d137      	bne.n	800a0d4 <HAL_RCC_OscConfig+0x1c8>
 800a064:	69fb      	ldr	r3, [r7, #28]
 800a066:	f003 0303 	and.w	r3, r3, #3
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d132      	bne.n	800a0d4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a06e:	4b38      	ldr	r3, [pc, #224]	@ (800a150 <HAL_RCC_OscConfig+0x244>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f003 0304 	and.w	r3, r3, #4
 800a076:	2b00      	cmp	r3, #0
 800a078:	d005      	beq.n	800a086 <HAL_RCC_OscConfig+0x17a>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	68db      	ldr	r3, [r3, #12]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d101      	bne.n	800a086 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a082:	2301      	movs	r3, #1
 800a084:	e314      	b.n	800a6b0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a086:	4b32      	ldr	r3, [pc, #200]	@ (800a150 <HAL_RCC_OscConfig+0x244>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f023 0219 	bic.w	r2, r3, #25
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	68db      	ldr	r3, [r3, #12]
 800a092:	492f      	ldr	r1, [pc, #188]	@ (800a150 <HAL_RCC_OscConfig+0x244>)
 800a094:	4313      	orrs	r3, r2
 800a096:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a098:	f7f9 fd44 	bl	8003b24 <HAL_GetTick>
 800a09c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a09e:	e008      	b.n	800a0b2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a0a0:	f7f9 fd40 	bl	8003b24 <HAL_GetTick>
 800a0a4:	4602      	mov	r2, r0
 800a0a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0a8:	1ad3      	subs	r3, r2, r3
 800a0aa:	2b02      	cmp	r3, #2
 800a0ac:	d901      	bls.n	800a0b2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800a0ae:	2303      	movs	r3, #3
 800a0b0:	e2fe      	b.n	800a6b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a0b2:	4b27      	ldr	r3, [pc, #156]	@ (800a150 <HAL_RCC_OscConfig+0x244>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f003 0304 	and.w	r3, r3, #4
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d0f0      	beq.n	800a0a0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a0be:	4b24      	ldr	r3, [pc, #144]	@ (800a150 <HAL_RCC_OscConfig+0x244>)
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	691b      	ldr	r3, [r3, #16]
 800a0ca:	061b      	lsls	r3, r3, #24
 800a0cc:	4920      	ldr	r1, [pc, #128]	@ (800a150 <HAL_RCC_OscConfig+0x244>)
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a0d2:	e045      	b.n	800a160 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	68db      	ldr	r3, [r3, #12]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d026      	beq.n	800a12a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a0dc:	4b1c      	ldr	r3, [pc, #112]	@ (800a150 <HAL_RCC_OscConfig+0x244>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f023 0219 	bic.w	r2, r3, #25
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	68db      	ldr	r3, [r3, #12]
 800a0e8:	4919      	ldr	r1, [pc, #100]	@ (800a150 <HAL_RCC_OscConfig+0x244>)
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0ee:	f7f9 fd19 	bl	8003b24 <HAL_GetTick>
 800a0f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a0f4:	e008      	b.n	800a108 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a0f6:	f7f9 fd15 	bl	8003b24 <HAL_GetTick>
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0fe:	1ad3      	subs	r3, r2, r3
 800a100:	2b02      	cmp	r3, #2
 800a102:	d901      	bls.n	800a108 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800a104:	2303      	movs	r3, #3
 800a106:	e2d3      	b.n	800a6b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a108:	4b11      	ldr	r3, [pc, #68]	@ (800a150 <HAL_RCC_OscConfig+0x244>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f003 0304 	and.w	r3, r3, #4
 800a110:	2b00      	cmp	r3, #0
 800a112:	d0f0      	beq.n	800a0f6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a114:	4b0e      	ldr	r3, [pc, #56]	@ (800a150 <HAL_RCC_OscConfig+0x244>)
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	691b      	ldr	r3, [r3, #16]
 800a120:	061b      	lsls	r3, r3, #24
 800a122:	490b      	ldr	r1, [pc, #44]	@ (800a150 <HAL_RCC_OscConfig+0x244>)
 800a124:	4313      	orrs	r3, r2
 800a126:	604b      	str	r3, [r1, #4]
 800a128:	e01a      	b.n	800a160 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a12a:	4b09      	ldr	r3, [pc, #36]	@ (800a150 <HAL_RCC_OscConfig+0x244>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	4a08      	ldr	r2, [pc, #32]	@ (800a150 <HAL_RCC_OscConfig+0x244>)
 800a130:	f023 0301 	bic.w	r3, r3, #1
 800a134:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a136:	f7f9 fcf5 	bl	8003b24 <HAL_GetTick>
 800a13a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a13c:	e00a      	b.n	800a154 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a13e:	f7f9 fcf1 	bl	8003b24 <HAL_GetTick>
 800a142:	4602      	mov	r2, r0
 800a144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a146:	1ad3      	subs	r3, r2, r3
 800a148:	2b02      	cmp	r3, #2
 800a14a:	d903      	bls.n	800a154 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800a14c:	2303      	movs	r3, #3
 800a14e:	e2af      	b.n	800a6b0 <HAL_RCC_OscConfig+0x7a4>
 800a150:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a154:	4b96      	ldr	r3, [pc, #600]	@ (800a3b0 <HAL_RCC_OscConfig+0x4a4>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f003 0304 	and.w	r3, r3, #4
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d1ee      	bne.n	800a13e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f003 0310 	and.w	r3, r3, #16
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d06a      	beq.n	800a242 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a16c:	4b90      	ldr	r3, [pc, #576]	@ (800a3b0 <HAL_RCC_OscConfig+0x4a4>)
 800a16e:	691b      	ldr	r3, [r3, #16]
 800a170:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a174:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a176:	4b8e      	ldr	r3, [pc, #568]	@ (800a3b0 <HAL_RCC_OscConfig+0x4a4>)
 800a178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a17a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a17c:	69bb      	ldr	r3, [r7, #24]
 800a17e:	2b08      	cmp	r3, #8
 800a180:	d007      	beq.n	800a192 <HAL_RCC_OscConfig+0x286>
 800a182:	69bb      	ldr	r3, [r7, #24]
 800a184:	2b18      	cmp	r3, #24
 800a186:	d11b      	bne.n	800a1c0 <HAL_RCC_OscConfig+0x2b4>
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	f003 0303 	and.w	r3, r3, #3
 800a18e:	2b01      	cmp	r3, #1
 800a190:	d116      	bne.n	800a1c0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a192:	4b87      	ldr	r3, [pc, #540]	@ (800a3b0 <HAL_RCC_OscConfig+0x4a4>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d005      	beq.n	800a1aa <HAL_RCC_OscConfig+0x29e>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	69db      	ldr	r3, [r3, #28]
 800a1a2:	2b80      	cmp	r3, #128	@ 0x80
 800a1a4:	d001      	beq.n	800a1aa <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	e282      	b.n	800a6b0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a1aa:	4b81      	ldr	r3, [pc, #516]	@ (800a3b0 <HAL_RCC_OscConfig+0x4a4>)
 800a1ac:	68db      	ldr	r3, [r3, #12]
 800a1ae:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6a1b      	ldr	r3, [r3, #32]
 800a1b6:	061b      	lsls	r3, r3, #24
 800a1b8:	497d      	ldr	r1, [pc, #500]	@ (800a3b0 <HAL_RCC_OscConfig+0x4a4>)
 800a1ba:	4313      	orrs	r3, r2
 800a1bc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a1be:	e040      	b.n	800a242 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	69db      	ldr	r3, [r3, #28]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d023      	beq.n	800a210 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a1c8:	4b79      	ldr	r3, [pc, #484]	@ (800a3b0 <HAL_RCC_OscConfig+0x4a4>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	4a78      	ldr	r2, [pc, #480]	@ (800a3b0 <HAL_RCC_OscConfig+0x4a4>)
 800a1ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1d4:	f7f9 fca6 	bl	8003b24 <HAL_GetTick>
 800a1d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a1da:	e008      	b.n	800a1ee <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a1dc:	f7f9 fca2 	bl	8003b24 <HAL_GetTick>
 800a1e0:	4602      	mov	r2, r0
 800a1e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1e4:	1ad3      	subs	r3, r2, r3
 800a1e6:	2b02      	cmp	r3, #2
 800a1e8:	d901      	bls.n	800a1ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800a1ea:	2303      	movs	r3, #3
 800a1ec:	e260      	b.n	800a6b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a1ee:	4b70      	ldr	r3, [pc, #448]	@ (800a3b0 <HAL_RCC_OscConfig+0x4a4>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d0f0      	beq.n	800a1dc <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a1fa:	4b6d      	ldr	r3, [pc, #436]	@ (800a3b0 <HAL_RCC_OscConfig+0x4a4>)
 800a1fc:	68db      	ldr	r3, [r3, #12]
 800a1fe:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6a1b      	ldr	r3, [r3, #32]
 800a206:	061b      	lsls	r3, r3, #24
 800a208:	4969      	ldr	r1, [pc, #420]	@ (800a3b0 <HAL_RCC_OscConfig+0x4a4>)
 800a20a:	4313      	orrs	r3, r2
 800a20c:	60cb      	str	r3, [r1, #12]
 800a20e:	e018      	b.n	800a242 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a210:	4b67      	ldr	r3, [pc, #412]	@ (800a3b0 <HAL_RCC_OscConfig+0x4a4>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4a66      	ldr	r2, [pc, #408]	@ (800a3b0 <HAL_RCC_OscConfig+0x4a4>)
 800a216:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a21a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a21c:	f7f9 fc82 	bl	8003b24 <HAL_GetTick>
 800a220:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a222:	e008      	b.n	800a236 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a224:	f7f9 fc7e 	bl	8003b24 <HAL_GetTick>
 800a228:	4602      	mov	r2, r0
 800a22a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a22c:	1ad3      	subs	r3, r2, r3
 800a22e:	2b02      	cmp	r3, #2
 800a230:	d901      	bls.n	800a236 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800a232:	2303      	movs	r3, #3
 800a234:	e23c      	b.n	800a6b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a236:	4b5e      	ldr	r3, [pc, #376]	@ (800a3b0 <HAL_RCC_OscConfig+0x4a4>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d1f0      	bne.n	800a224 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f003 0308 	and.w	r3, r3, #8
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d036      	beq.n	800a2bc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	695b      	ldr	r3, [r3, #20]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d019      	beq.n	800a28a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a256:	4b56      	ldr	r3, [pc, #344]	@ (800a3b0 <HAL_RCC_OscConfig+0x4a4>)
 800a258:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a25a:	4a55      	ldr	r2, [pc, #340]	@ (800a3b0 <HAL_RCC_OscConfig+0x4a4>)
 800a25c:	f043 0301 	orr.w	r3, r3, #1
 800a260:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a262:	f7f9 fc5f 	bl	8003b24 <HAL_GetTick>
 800a266:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a268:	e008      	b.n	800a27c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a26a:	f7f9 fc5b 	bl	8003b24 <HAL_GetTick>
 800a26e:	4602      	mov	r2, r0
 800a270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a272:	1ad3      	subs	r3, r2, r3
 800a274:	2b02      	cmp	r3, #2
 800a276:	d901      	bls.n	800a27c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800a278:	2303      	movs	r3, #3
 800a27a:	e219      	b.n	800a6b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a27c:	4b4c      	ldr	r3, [pc, #304]	@ (800a3b0 <HAL_RCC_OscConfig+0x4a4>)
 800a27e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a280:	f003 0302 	and.w	r3, r3, #2
 800a284:	2b00      	cmp	r3, #0
 800a286:	d0f0      	beq.n	800a26a <HAL_RCC_OscConfig+0x35e>
 800a288:	e018      	b.n	800a2bc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a28a:	4b49      	ldr	r3, [pc, #292]	@ (800a3b0 <HAL_RCC_OscConfig+0x4a4>)
 800a28c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a28e:	4a48      	ldr	r2, [pc, #288]	@ (800a3b0 <HAL_RCC_OscConfig+0x4a4>)
 800a290:	f023 0301 	bic.w	r3, r3, #1
 800a294:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a296:	f7f9 fc45 	bl	8003b24 <HAL_GetTick>
 800a29a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a29c:	e008      	b.n	800a2b0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a29e:	f7f9 fc41 	bl	8003b24 <HAL_GetTick>
 800a2a2:	4602      	mov	r2, r0
 800a2a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2a6:	1ad3      	subs	r3, r2, r3
 800a2a8:	2b02      	cmp	r3, #2
 800a2aa:	d901      	bls.n	800a2b0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800a2ac:	2303      	movs	r3, #3
 800a2ae:	e1ff      	b.n	800a6b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a2b0:	4b3f      	ldr	r3, [pc, #252]	@ (800a3b0 <HAL_RCC_OscConfig+0x4a4>)
 800a2b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2b4:	f003 0302 	and.w	r3, r3, #2
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d1f0      	bne.n	800a29e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f003 0320 	and.w	r3, r3, #32
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d036      	beq.n	800a336 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	699b      	ldr	r3, [r3, #24]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d019      	beq.n	800a304 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a2d0:	4b37      	ldr	r3, [pc, #220]	@ (800a3b0 <HAL_RCC_OscConfig+0x4a4>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	4a36      	ldr	r2, [pc, #216]	@ (800a3b0 <HAL_RCC_OscConfig+0x4a4>)
 800a2d6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a2da:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a2dc:	f7f9 fc22 	bl	8003b24 <HAL_GetTick>
 800a2e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a2e2:	e008      	b.n	800a2f6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a2e4:	f7f9 fc1e 	bl	8003b24 <HAL_GetTick>
 800a2e8:	4602      	mov	r2, r0
 800a2ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ec:	1ad3      	subs	r3, r2, r3
 800a2ee:	2b02      	cmp	r3, #2
 800a2f0:	d901      	bls.n	800a2f6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800a2f2:	2303      	movs	r3, #3
 800a2f4:	e1dc      	b.n	800a6b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a2f6:	4b2e      	ldr	r3, [pc, #184]	@ (800a3b0 <HAL_RCC_OscConfig+0x4a4>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d0f0      	beq.n	800a2e4 <HAL_RCC_OscConfig+0x3d8>
 800a302:	e018      	b.n	800a336 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a304:	4b2a      	ldr	r3, [pc, #168]	@ (800a3b0 <HAL_RCC_OscConfig+0x4a4>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	4a29      	ldr	r2, [pc, #164]	@ (800a3b0 <HAL_RCC_OscConfig+0x4a4>)
 800a30a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a30e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a310:	f7f9 fc08 	bl	8003b24 <HAL_GetTick>
 800a314:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a316:	e008      	b.n	800a32a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a318:	f7f9 fc04 	bl	8003b24 <HAL_GetTick>
 800a31c:	4602      	mov	r2, r0
 800a31e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a320:	1ad3      	subs	r3, r2, r3
 800a322:	2b02      	cmp	r3, #2
 800a324:	d901      	bls.n	800a32a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800a326:	2303      	movs	r3, #3
 800a328:	e1c2      	b.n	800a6b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a32a:	4b21      	ldr	r3, [pc, #132]	@ (800a3b0 <HAL_RCC_OscConfig+0x4a4>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a332:	2b00      	cmp	r3, #0
 800a334:	d1f0      	bne.n	800a318 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f003 0304 	and.w	r3, r3, #4
 800a33e:	2b00      	cmp	r3, #0
 800a340:	f000 8086 	beq.w	800a450 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a344:	4b1b      	ldr	r3, [pc, #108]	@ (800a3b4 <HAL_RCC_OscConfig+0x4a8>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4a1a      	ldr	r2, [pc, #104]	@ (800a3b4 <HAL_RCC_OscConfig+0x4a8>)
 800a34a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a34e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a350:	f7f9 fbe8 	bl	8003b24 <HAL_GetTick>
 800a354:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a356:	e008      	b.n	800a36a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a358:	f7f9 fbe4 	bl	8003b24 <HAL_GetTick>
 800a35c:	4602      	mov	r2, r0
 800a35e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a360:	1ad3      	subs	r3, r2, r3
 800a362:	2b64      	cmp	r3, #100	@ 0x64
 800a364:	d901      	bls.n	800a36a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800a366:	2303      	movs	r3, #3
 800a368:	e1a2      	b.n	800a6b0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a36a:	4b12      	ldr	r3, [pc, #72]	@ (800a3b4 <HAL_RCC_OscConfig+0x4a8>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a372:	2b00      	cmp	r3, #0
 800a374:	d0f0      	beq.n	800a358 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	689b      	ldr	r3, [r3, #8]
 800a37a:	2b01      	cmp	r3, #1
 800a37c:	d106      	bne.n	800a38c <HAL_RCC_OscConfig+0x480>
 800a37e:	4b0c      	ldr	r3, [pc, #48]	@ (800a3b0 <HAL_RCC_OscConfig+0x4a4>)
 800a380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a382:	4a0b      	ldr	r2, [pc, #44]	@ (800a3b0 <HAL_RCC_OscConfig+0x4a4>)
 800a384:	f043 0301 	orr.w	r3, r3, #1
 800a388:	6713      	str	r3, [r2, #112]	@ 0x70
 800a38a:	e032      	b.n	800a3f2 <HAL_RCC_OscConfig+0x4e6>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	689b      	ldr	r3, [r3, #8]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d111      	bne.n	800a3b8 <HAL_RCC_OscConfig+0x4ac>
 800a394:	4b06      	ldr	r3, [pc, #24]	@ (800a3b0 <HAL_RCC_OscConfig+0x4a4>)
 800a396:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a398:	4a05      	ldr	r2, [pc, #20]	@ (800a3b0 <HAL_RCC_OscConfig+0x4a4>)
 800a39a:	f023 0301 	bic.w	r3, r3, #1
 800a39e:	6713      	str	r3, [r2, #112]	@ 0x70
 800a3a0:	4b03      	ldr	r3, [pc, #12]	@ (800a3b0 <HAL_RCC_OscConfig+0x4a4>)
 800a3a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3a4:	4a02      	ldr	r2, [pc, #8]	@ (800a3b0 <HAL_RCC_OscConfig+0x4a4>)
 800a3a6:	f023 0304 	bic.w	r3, r3, #4
 800a3aa:	6713      	str	r3, [r2, #112]	@ 0x70
 800a3ac:	e021      	b.n	800a3f2 <HAL_RCC_OscConfig+0x4e6>
 800a3ae:	bf00      	nop
 800a3b0:	58024400 	.word	0x58024400
 800a3b4:	58024800 	.word	0x58024800
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	689b      	ldr	r3, [r3, #8]
 800a3bc:	2b05      	cmp	r3, #5
 800a3be:	d10c      	bne.n	800a3da <HAL_RCC_OscConfig+0x4ce>
 800a3c0:	4b83      	ldr	r3, [pc, #524]	@ (800a5d0 <HAL_RCC_OscConfig+0x6c4>)
 800a3c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3c4:	4a82      	ldr	r2, [pc, #520]	@ (800a5d0 <HAL_RCC_OscConfig+0x6c4>)
 800a3c6:	f043 0304 	orr.w	r3, r3, #4
 800a3ca:	6713      	str	r3, [r2, #112]	@ 0x70
 800a3cc:	4b80      	ldr	r3, [pc, #512]	@ (800a5d0 <HAL_RCC_OscConfig+0x6c4>)
 800a3ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3d0:	4a7f      	ldr	r2, [pc, #508]	@ (800a5d0 <HAL_RCC_OscConfig+0x6c4>)
 800a3d2:	f043 0301 	orr.w	r3, r3, #1
 800a3d6:	6713      	str	r3, [r2, #112]	@ 0x70
 800a3d8:	e00b      	b.n	800a3f2 <HAL_RCC_OscConfig+0x4e6>
 800a3da:	4b7d      	ldr	r3, [pc, #500]	@ (800a5d0 <HAL_RCC_OscConfig+0x6c4>)
 800a3dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3de:	4a7c      	ldr	r2, [pc, #496]	@ (800a5d0 <HAL_RCC_OscConfig+0x6c4>)
 800a3e0:	f023 0301 	bic.w	r3, r3, #1
 800a3e4:	6713      	str	r3, [r2, #112]	@ 0x70
 800a3e6:	4b7a      	ldr	r3, [pc, #488]	@ (800a5d0 <HAL_RCC_OscConfig+0x6c4>)
 800a3e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3ea:	4a79      	ldr	r2, [pc, #484]	@ (800a5d0 <HAL_RCC_OscConfig+0x6c4>)
 800a3ec:	f023 0304 	bic.w	r3, r3, #4
 800a3f0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	689b      	ldr	r3, [r3, #8]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d015      	beq.n	800a426 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3fa:	f7f9 fb93 	bl	8003b24 <HAL_GetTick>
 800a3fe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a400:	e00a      	b.n	800a418 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a402:	f7f9 fb8f 	bl	8003b24 <HAL_GetTick>
 800a406:	4602      	mov	r2, r0
 800a408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a40a:	1ad3      	subs	r3, r2, r3
 800a40c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a410:	4293      	cmp	r3, r2
 800a412:	d901      	bls.n	800a418 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800a414:	2303      	movs	r3, #3
 800a416:	e14b      	b.n	800a6b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a418:	4b6d      	ldr	r3, [pc, #436]	@ (800a5d0 <HAL_RCC_OscConfig+0x6c4>)
 800a41a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a41c:	f003 0302 	and.w	r3, r3, #2
 800a420:	2b00      	cmp	r3, #0
 800a422:	d0ee      	beq.n	800a402 <HAL_RCC_OscConfig+0x4f6>
 800a424:	e014      	b.n	800a450 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a426:	f7f9 fb7d 	bl	8003b24 <HAL_GetTick>
 800a42a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a42c:	e00a      	b.n	800a444 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a42e:	f7f9 fb79 	bl	8003b24 <HAL_GetTick>
 800a432:	4602      	mov	r2, r0
 800a434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a436:	1ad3      	subs	r3, r2, r3
 800a438:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a43c:	4293      	cmp	r3, r2
 800a43e:	d901      	bls.n	800a444 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800a440:	2303      	movs	r3, #3
 800a442:	e135      	b.n	800a6b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a444:	4b62      	ldr	r3, [pc, #392]	@ (800a5d0 <HAL_RCC_OscConfig+0x6c4>)
 800a446:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a448:	f003 0302 	and.w	r3, r3, #2
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d1ee      	bne.n	800a42e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a454:	2b00      	cmp	r3, #0
 800a456:	f000 812a 	beq.w	800a6ae <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a45a:	4b5d      	ldr	r3, [pc, #372]	@ (800a5d0 <HAL_RCC_OscConfig+0x6c4>)
 800a45c:	691b      	ldr	r3, [r3, #16]
 800a45e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a462:	2b18      	cmp	r3, #24
 800a464:	f000 80ba 	beq.w	800a5dc <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a46c:	2b02      	cmp	r3, #2
 800a46e:	f040 8095 	bne.w	800a59c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a472:	4b57      	ldr	r3, [pc, #348]	@ (800a5d0 <HAL_RCC_OscConfig+0x6c4>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	4a56      	ldr	r2, [pc, #344]	@ (800a5d0 <HAL_RCC_OscConfig+0x6c4>)
 800a478:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a47c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a47e:	f7f9 fb51 	bl	8003b24 <HAL_GetTick>
 800a482:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a484:	e008      	b.n	800a498 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a486:	f7f9 fb4d 	bl	8003b24 <HAL_GetTick>
 800a48a:	4602      	mov	r2, r0
 800a48c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a48e:	1ad3      	subs	r3, r2, r3
 800a490:	2b02      	cmp	r3, #2
 800a492:	d901      	bls.n	800a498 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800a494:	2303      	movs	r3, #3
 800a496:	e10b      	b.n	800a6b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a498:	4b4d      	ldr	r3, [pc, #308]	@ (800a5d0 <HAL_RCC_OscConfig+0x6c4>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d1f0      	bne.n	800a486 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a4a4:	4b4a      	ldr	r3, [pc, #296]	@ (800a5d0 <HAL_RCC_OscConfig+0x6c4>)
 800a4a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a4a8:	4b4a      	ldr	r3, [pc, #296]	@ (800a5d4 <HAL_RCC_OscConfig+0x6c8>)
 800a4aa:	4013      	ands	r3, r2
 800a4ac:	687a      	ldr	r2, [r7, #4]
 800a4ae:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800a4b0:	687a      	ldr	r2, [r7, #4]
 800a4b2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800a4b4:	0112      	lsls	r2, r2, #4
 800a4b6:	430a      	orrs	r2, r1
 800a4b8:	4945      	ldr	r1, [pc, #276]	@ (800a5d0 <HAL_RCC_OscConfig+0x6c4>)
 800a4ba:	4313      	orrs	r3, r2
 800a4bc:	628b      	str	r3, [r1, #40]	@ 0x28
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4c2:	3b01      	subs	r3, #1
 800a4c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4cc:	3b01      	subs	r3, #1
 800a4ce:	025b      	lsls	r3, r3, #9
 800a4d0:	b29b      	uxth	r3, r3
 800a4d2:	431a      	orrs	r2, r3
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4d8:	3b01      	subs	r3, #1
 800a4da:	041b      	lsls	r3, r3, #16
 800a4dc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a4e0:	431a      	orrs	r2, r3
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4e6:	3b01      	subs	r3, #1
 800a4e8:	061b      	lsls	r3, r3, #24
 800a4ea:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a4ee:	4938      	ldr	r1, [pc, #224]	@ (800a5d0 <HAL_RCC_OscConfig+0x6c4>)
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a4f4:	4b36      	ldr	r3, [pc, #216]	@ (800a5d0 <HAL_RCC_OscConfig+0x6c4>)
 800a4f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4f8:	4a35      	ldr	r2, [pc, #212]	@ (800a5d0 <HAL_RCC_OscConfig+0x6c4>)
 800a4fa:	f023 0301 	bic.w	r3, r3, #1
 800a4fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a500:	4b33      	ldr	r3, [pc, #204]	@ (800a5d0 <HAL_RCC_OscConfig+0x6c4>)
 800a502:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a504:	4b34      	ldr	r3, [pc, #208]	@ (800a5d8 <HAL_RCC_OscConfig+0x6cc>)
 800a506:	4013      	ands	r3, r2
 800a508:	687a      	ldr	r2, [r7, #4]
 800a50a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a50c:	00d2      	lsls	r2, r2, #3
 800a50e:	4930      	ldr	r1, [pc, #192]	@ (800a5d0 <HAL_RCC_OscConfig+0x6c4>)
 800a510:	4313      	orrs	r3, r2
 800a512:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a514:	4b2e      	ldr	r3, [pc, #184]	@ (800a5d0 <HAL_RCC_OscConfig+0x6c4>)
 800a516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a518:	f023 020c 	bic.w	r2, r3, #12
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a520:	492b      	ldr	r1, [pc, #172]	@ (800a5d0 <HAL_RCC_OscConfig+0x6c4>)
 800a522:	4313      	orrs	r3, r2
 800a524:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a526:	4b2a      	ldr	r3, [pc, #168]	@ (800a5d0 <HAL_RCC_OscConfig+0x6c4>)
 800a528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a52a:	f023 0202 	bic.w	r2, r3, #2
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a532:	4927      	ldr	r1, [pc, #156]	@ (800a5d0 <HAL_RCC_OscConfig+0x6c4>)
 800a534:	4313      	orrs	r3, r2
 800a536:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a538:	4b25      	ldr	r3, [pc, #148]	@ (800a5d0 <HAL_RCC_OscConfig+0x6c4>)
 800a53a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a53c:	4a24      	ldr	r2, [pc, #144]	@ (800a5d0 <HAL_RCC_OscConfig+0x6c4>)
 800a53e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a542:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a544:	4b22      	ldr	r3, [pc, #136]	@ (800a5d0 <HAL_RCC_OscConfig+0x6c4>)
 800a546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a548:	4a21      	ldr	r2, [pc, #132]	@ (800a5d0 <HAL_RCC_OscConfig+0x6c4>)
 800a54a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a54e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a550:	4b1f      	ldr	r3, [pc, #124]	@ (800a5d0 <HAL_RCC_OscConfig+0x6c4>)
 800a552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a554:	4a1e      	ldr	r2, [pc, #120]	@ (800a5d0 <HAL_RCC_OscConfig+0x6c4>)
 800a556:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a55a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a55c:	4b1c      	ldr	r3, [pc, #112]	@ (800a5d0 <HAL_RCC_OscConfig+0x6c4>)
 800a55e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a560:	4a1b      	ldr	r2, [pc, #108]	@ (800a5d0 <HAL_RCC_OscConfig+0x6c4>)
 800a562:	f043 0301 	orr.w	r3, r3, #1
 800a566:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a568:	4b19      	ldr	r3, [pc, #100]	@ (800a5d0 <HAL_RCC_OscConfig+0x6c4>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	4a18      	ldr	r2, [pc, #96]	@ (800a5d0 <HAL_RCC_OscConfig+0x6c4>)
 800a56e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a572:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a574:	f7f9 fad6 	bl	8003b24 <HAL_GetTick>
 800a578:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a57a:	e008      	b.n	800a58e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a57c:	f7f9 fad2 	bl	8003b24 <HAL_GetTick>
 800a580:	4602      	mov	r2, r0
 800a582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a584:	1ad3      	subs	r3, r2, r3
 800a586:	2b02      	cmp	r3, #2
 800a588:	d901      	bls.n	800a58e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800a58a:	2303      	movs	r3, #3
 800a58c:	e090      	b.n	800a6b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a58e:	4b10      	ldr	r3, [pc, #64]	@ (800a5d0 <HAL_RCC_OscConfig+0x6c4>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a596:	2b00      	cmp	r3, #0
 800a598:	d0f0      	beq.n	800a57c <HAL_RCC_OscConfig+0x670>
 800a59a:	e088      	b.n	800a6ae <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a59c:	4b0c      	ldr	r3, [pc, #48]	@ (800a5d0 <HAL_RCC_OscConfig+0x6c4>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a0b      	ldr	r2, [pc, #44]	@ (800a5d0 <HAL_RCC_OscConfig+0x6c4>)
 800a5a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a5a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5a8:	f7f9 fabc 	bl	8003b24 <HAL_GetTick>
 800a5ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a5ae:	e008      	b.n	800a5c2 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a5b0:	f7f9 fab8 	bl	8003b24 <HAL_GetTick>
 800a5b4:	4602      	mov	r2, r0
 800a5b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5b8:	1ad3      	subs	r3, r2, r3
 800a5ba:	2b02      	cmp	r3, #2
 800a5bc:	d901      	bls.n	800a5c2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800a5be:	2303      	movs	r3, #3
 800a5c0:	e076      	b.n	800a6b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a5c2:	4b03      	ldr	r3, [pc, #12]	@ (800a5d0 <HAL_RCC_OscConfig+0x6c4>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d1f0      	bne.n	800a5b0 <HAL_RCC_OscConfig+0x6a4>
 800a5ce:	e06e      	b.n	800a6ae <HAL_RCC_OscConfig+0x7a2>
 800a5d0:	58024400 	.word	0x58024400
 800a5d4:	fffffc0c 	.word	0xfffffc0c
 800a5d8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a5dc:	4b36      	ldr	r3, [pc, #216]	@ (800a6b8 <HAL_RCC_OscConfig+0x7ac>)
 800a5de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5e0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a5e2:	4b35      	ldr	r3, [pc, #212]	@ (800a6b8 <HAL_RCC_OscConfig+0x7ac>)
 800a5e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5e6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d031      	beq.n	800a654 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	f003 0203 	and.w	r2, r3, #3
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d12a      	bne.n	800a654 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	091b      	lsrs	r3, r3, #4
 800a602:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a60a:	429a      	cmp	r2, r3
 800a60c:	d122      	bne.n	800a654 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a618:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a61a:	429a      	cmp	r2, r3
 800a61c:	d11a      	bne.n	800a654 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	0a5b      	lsrs	r3, r3, #9
 800a622:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a62a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a62c:	429a      	cmp	r2, r3
 800a62e:	d111      	bne.n	800a654 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	0c1b      	lsrs	r3, r3, #16
 800a634:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a63c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a63e:	429a      	cmp	r2, r3
 800a640:	d108      	bne.n	800a654 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	0e1b      	lsrs	r3, r3, #24
 800a646:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a64e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a650:	429a      	cmp	r2, r3
 800a652:	d001      	beq.n	800a658 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800a654:	2301      	movs	r3, #1
 800a656:	e02b      	b.n	800a6b0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a658:	4b17      	ldr	r3, [pc, #92]	@ (800a6b8 <HAL_RCC_OscConfig+0x7ac>)
 800a65a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a65c:	08db      	lsrs	r3, r3, #3
 800a65e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a662:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a668:	693a      	ldr	r2, [r7, #16]
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d01f      	beq.n	800a6ae <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a66e:	4b12      	ldr	r3, [pc, #72]	@ (800a6b8 <HAL_RCC_OscConfig+0x7ac>)
 800a670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a672:	4a11      	ldr	r2, [pc, #68]	@ (800a6b8 <HAL_RCC_OscConfig+0x7ac>)
 800a674:	f023 0301 	bic.w	r3, r3, #1
 800a678:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a67a:	f7f9 fa53 	bl	8003b24 <HAL_GetTick>
 800a67e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a680:	bf00      	nop
 800a682:	f7f9 fa4f 	bl	8003b24 <HAL_GetTick>
 800a686:	4602      	mov	r2, r0
 800a688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d0f9      	beq.n	800a682 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a68e:	4b0a      	ldr	r3, [pc, #40]	@ (800a6b8 <HAL_RCC_OscConfig+0x7ac>)
 800a690:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a692:	4b0a      	ldr	r3, [pc, #40]	@ (800a6bc <HAL_RCC_OscConfig+0x7b0>)
 800a694:	4013      	ands	r3, r2
 800a696:	687a      	ldr	r2, [r7, #4]
 800a698:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a69a:	00d2      	lsls	r2, r2, #3
 800a69c:	4906      	ldr	r1, [pc, #24]	@ (800a6b8 <HAL_RCC_OscConfig+0x7ac>)
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a6a2:	4b05      	ldr	r3, [pc, #20]	@ (800a6b8 <HAL_RCC_OscConfig+0x7ac>)
 800a6a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6a6:	4a04      	ldr	r2, [pc, #16]	@ (800a6b8 <HAL_RCC_OscConfig+0x7ac>)
 800a6a8:	f043 0301 	orr.w	r3, r3, #1
 800a6ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a6ae:	2300      	movs	r3, #0
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3730      	adds	r7, #48	@ 0x30
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}
 800a6b8:	58024400 	.word	0x58024400
 800a6bc:	ffff0007 	.word	0xffff0007

0800a6c0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b086      	sub	sp, #24
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d101      	bne.n	800a6d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	e19c      	b.n	800aa0e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a6d4:	4b8a      	ldr	r3, [pc, #552]	@ (800a900 <HAL_RCC_ClockConfig+0x240>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f003 030f 	and.w	r3, r3, #15
 800a6dc:	683a      	ldr	r2, [r7, #0]
 800a6de:	429a      	cmp	r2, r3
 800a6e0:	d910      	bls.n	800a704 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a6e2:	4b87      	ldr	r3, [pc, #540]	@ (800a900 <HAL_RCC_ClockConfig+0x240>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f023 020f 	bic.w	r2, r3, #15
 800a6ea:	4985      	ldr	r1, [pc, #532]	@ (800a900 <HAL_RCC_ClockConfig+0x240>)
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a6f2:	4b83      	ldr	r3, [pc, #524]	@ (800a900 <HAL_RCC_ClockConfig+0x240>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f003 030f 	and.w	r3, r3, #15
 800a6fa:	683a      	ldr	r2, [r7, #0]
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	d001      	beq.n	800a704 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a700:	2301      	movs	r3, #1
 800a702:	e184      	b.n	800aa0e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f003 0304 	and.w	r3, r3, #4
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d010      	beq.n	800a732 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	691a      	ldr	r2, [r3, #16]
 800a714:	4b7b      	ldr	r3, [pc, #492]	@ (800a904 <HAL_RCC_ClockConfig+0x244>)
 800a716:	699b      	ldr	r3, [r3, #24]
 800a718:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a71c:	429a      	cmp	r2, r3
 800a71e:	d908      	bls.n	800a732 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a720:	4b78      	ldr	r3, [pc, #480]	@ (800a904 <HAL_RCC_ClockConfig+0x244>)
 800a722:	699b      	ldr	r3, [r3, #24]
 800a724:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	691b      	ldr	r3, [r3, #16]
 800a72c:	4975      	ldr	r1, [pc, #468]	@ (800a904 <HAL_RCC_ClockConfig+0x244>)
 800a72e:	4313      	orrs	r3, r2
 800a730:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f003 0308 	and.w	r3, r3, #8
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d010      	beq.n	800a760 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	695a      	ldr	r2, [r3, #20]
 800a742:	4b70      	ldr	r3, [pc, #448]	@ (800a904 <HAL_RCC_ClockConfig+0x244>)
 800a744:	69db      	ldr	r3, [r3, #28]
 800a746:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a74a:	429a      	cmp	r2, r3
 800a74c:	d908      	bls.n	800a760 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a74e:	4b6d      	ldr	r3, [pc, #436]	@ (800a904 <HAL_RCC_ClockConfig+0x244>)
 800a750:	69db      	ldr	r3, [r3, #28]
 800a752:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	695b      	ldr	r3, [r3, #20]
 800a75a:	496a      	ldr	r1, [pc, #424]	@ (800a904 <HAL_RCC_ClockConfig+0x244>)
 800a75c:	4313      	orrs	r3, r2
 800a75e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f003 0310 	and.w	r3, r3, #16
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d010      	beq.n	800a78e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	699a      	ldr	r2, [r3, #24]
 800a770:	4b64      	ldr	r3, [pc, #400]	@ (800a904 <HAL_RCC_ClockConfig+0x244>)
 800a772:	69db      	ldr	r3, [r3, #28]
 800a774:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a778:	429a      	cmp	r2, r3
 800a77a:	d908      	bls.n	800a78e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a77c:	4b61      	ldr	r3, [pc, #388]	@ (800a904 <HAL_RCC_ClockConfig+0x244>)
 800a77e:	69db      	ldr	r3, [r3, #28]
 800a780:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	699b      	ldr	r3, [r3, #24]
 800a788:	495e      	ldr	r1, [pc, #376]	@ (800a904 <HAL_RCC_ClockConfig+0x244>)
 800a78a:	4313      	orrs	r3, r2
 800a78c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f003 0320 	and.w	r3, r3, #32
 800a796:	2b00      	cmp	r3, #0
 800a798:	d010      	beq.n	800a7bc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	69da      	ldr	r2, [r3, #28]
 800a79e:	4b59      	ldr	r3, [pc, #356]	@ (800a904 <HAL_RCC_ClockConfig+0x244>)
 800a7a0:	6a1b      	ldr	r3, [r3, #32]
 800a7a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a7a6:	429a      	cmp	r2, r3
 800a7a8:	d908      	bls.n	800a7bc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a7aa:	4b56      	ldr	r3, [pc, #344]	@ (800a904 <HAL_RCC_ClockConfig+0x244>)
 800a7ac:	6a1b      	ldr	r3, [r3, #32]
 800a7ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	69db      	ldr	r3, [r3, #28]
 800a7b6:	4953      	ldr	r1, [pc, #332]	@ (800a904 <HAL_RCC_ClockConfig+0x244>)
 800a7b8:	4313      	orrs	r3, r2
 800a7ba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f003 0302 	and.w	r3, r3, #2
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d010      	beq.n	800a7ea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	68da      	ldr	r2, [r3, #12]
 800a7cc:	4b4d      	ldr	r3, [pc, #308]	@ (800a904 <HAL_RCC_ClockConfig+0x244>)
 800a7ce:	699b      	ldr	r3, [r3, #24]
 800a7d0:	f003 030f 	and.w	r3, r3, #15
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	d908      	bls.n	800a7ea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a7d8:	4b4a      	ldr	r3, [pc, #296]	@ (800a904 <HAL_RCC_ClockConfig+0x244>)
 800a7da:	699b      	ldr	r3, [r3, #24]
 800a7dc:	f023 020f 	bic.w	r2, r3, #15
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	68db      	ldr	r3, [r3, #12]
 800a7e4:	4947      	ldr	r1, [pc, #284]	@ (800a904 <HAL_RCC_ClockConfig+0x244>)
 800a7e6:	4313      	orrs	r3, r2
 800a7e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f003 0301 	and.w	r3, r3, #1
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d055      	beq.n	800a8a2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a7f6:	4b43      	ldr	r3, [pc, #268]	@ (800a904 <HAL_RCC_ClockConfig+0x244>)
 800a7f8:	699b      	ldr	r3, [r3, #24]
 800a7fa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	689b      	ldr	r3, [r3, #8]
 800a802:	4940      	ldr	r1, [pc, #256]	@ (800a904 <HAL_RCC_ClockConfig+0x244>)
 800a804:	4313      	orrs	r3, r2
 800a806:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	685b      	ldr	r3, [r3, #4]
 800a80c:	2b02      	cmp	r3, #2
 800a80e:	d107      	bne.n	800a820 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a810:	4b3c      	ldr	r3, [pc, #240]	@ (800a904 <HAL_RCC_ClockConfig+0x244>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d121      	bne.n	800a860 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a81c:	2301      	movs	r3, #1
 800a81e:	e0f6      	b.n	800aa0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	2b03      	cmp	r3, #3
 800a826:	d107      	bne.n	800a838 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a828:	4b36      	ldr	r3, [pc, #216]	@ (800a904 <HAL_RCC_ClockConfig+0x244>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a830:	2b00      	cmp	r3, #0
 800a832:	d115      	bne.n	800a860 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a834:	2301      	movs	r3, #1
 800a836:	e0ea      	b.n	800aa0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	685b      	ldr	r3, [r3, #4]
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	d107      	bne.n	800a850 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a840:	4b30      	ldr	r3, [pc, #192]	@ (800a904 <HAL_RCC_ClockConfig+0x244>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d109      	bne.n	800a860 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a84c:	2301      	movs	r3, #1
 800a84e:	e0de      	b.n	800aa0e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a850:	4b2c      	ldr	r3, [pc, #176]	@ (800a904 <HAL_RCC_ClockConfig+0x244>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f003 0304 	and.w	r3, r3, #4
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d101      	bne.n	800a860 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a85c:	2301      	movs	r3, #1
 800a85e:	e0d6      	b.n	800aa0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a860:	4b28      	ldr	r3, [pc, #160]	@ (800a904 <HAL_RCC_ClockConfig+0x244>)
 800a862:	691b      	ldr	r3, [r3, #16]
 800a864:	f023 0207 	bic.w	r2, r3, #7
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	685b      	ldr	r3, [r3, #4]
 800a86c:	4925      	ldr	r1, [pc, #148]	@ (800a904 <HAL_RCC_ClockConfig+0x244>)
 800a86e:	4313      	orrs	r3, r2
 800a870:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a872:	f7f9 f957 	bl	8003b24 <HAL_GetTick>
 800a876:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a878:	e00a      	b.n	800a890 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a87a:	f7f9 f953 	bl	8003b24 <HAL_GetTick>
 800a87e:	4602      	mov	r2, r0
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	1ad3      	subs	r3, r2, r3
 800a884:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a888:	4293      	cmp	r3, r2
 800a88a:	d901      	bls.n	800a890 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a88c:	2303      	movs	r3, #3
 800a88e:	e0be      	b.n	800aa0e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a890:	4b1c      	ldr	r3, [pc, #112]	@ (800a904 <HAL_RCC_ClockConfig+0x244>)
 800a892:	691b      	ldr	r3, [r3, #16]
 800a894:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	685b      	ldr	r3, [r3, #4]
 800a89c:	00db      	lsls	r3, r3, #3
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	d1eb      	bne.n	800a87a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f003 0302 	and.w	r3, r3, #2
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d010      	beq.n	800a8d0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	68da      	ldr	r2, [r3, #12]
 800a8b2:	4b14      	ldr	r3, [pc, #80]	@ (800a904 <HAL_RCC_ClockConfig+0x244>)
 800a8b4:	699b      	ldr	r3, [r3, #24]
 800a8b6:	f003 030f 	and.w	r3, r3, #15
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	d208      	bcs.n	800a8d0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a8be:	4b11      	ldr	r3, [pc, #68]	@ (800a904 <HAL_RCC_ClockConfig+0x244>)
 800a8c0:	699b      	ldr	r3, [r3, #24]
 800a8c2:	f023 020f 	bic.w	r2, r3, #15
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	68db      	ldr	r3, [r3, #12]
 800a8ca:	490e      	ldr	r1, [pc, #56]	@ (800a904 <HAL_RCC_ClockConfig+0x244>)
 800a8cc:	4313      	orrs	r3, r2
 800a8ce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a8d0:	4b0b      	ldr	r3, [pc, #44]	@ (800a900 <HAL_RCC_ClockConfig+0x240>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f003 030f 	and.w	r3, r3, #15
 800a8d8:	683a      	ldr	r2, [r7, #0]
 800a8da:	429a      	cmp	r2, r3
 800a8dc:	d214      	bcs.n	800a908 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a8de:	4b08      	ldr	r3, [pc, #32]	@ (800a900 <HAL_RCC_ClockConfig+0x240>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f023 020f 	bic.w	r2, r3, #15
 800a8e6:	4906      	ldr	r1, [pc, #24]	@ (800a900 <HAL_RCC_ClockConfig+0x240>)
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a8ee:	4b04      	ldr	r3, [pc, #16]	@ (800a900 <HAL_RCC_ClockConfig+0x240>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f003 030f 	and.w	r3, r3, #15
 800a8f6:	683a      	ldr	r2, [r7, #0]
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d005      	beq.n	800a908 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	e086      	b.n	800aa0e <HAL_RCC_ClockConfig+0x34e>
 800a900:	52002000 	.word	0x52002000
 800a904:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f003 0304 	and.w	r3, r3, #4
 800a910:	2b00      	cmp	r3, #0
 800a912:	d010      	beq.n	800a936 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	691a      	ldr	r2, [r3, #16]
 800a918:	4b3f      	ldr	r3, [pc, #252]	@ (800aa18 <HAL_RCC_ClockConfig+0x358>)
 800a91a:	699b      	ldr	r3, [r3, #24]
 800a91c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a920:	429a      	cmp	r2, r3
 800a922:	d208      	bcs.n	800a936 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a924:	4b3c      	ldr	r3, [pc, #240]	@ (800aa18 <HAL_RCC_ClockConfig+0x358>)
 800a926:	699b      	ldr	r3, [r3, #24]
 800a928:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	691b      	ldr	r3, [r3, #16]
 800a930:	4939      	ldr	r1, [pc, #228]	@ (800aa18 <HAL_RCC_ClockConfig+0x358>)
 800a932:	4313      	orrs	r3, r2
 800a934:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f003 0308 	and.w	r3, r3, #8
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d010      	beq.n	800a964 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	695a      	ldr	r2, [r3, #20]
 800a946:	4b34      	ldr	r3, [pc, #208]	@ (800aa18 <HAL_RCC_ClockConfig+0x358>)
 800a948:	69db      	ldr	r3, [r3, #28]
 800a94a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a94e:	429a      	cmp	r2, r3
 800a950:	d208      	bcs.n	800a964 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a952:	4b31      	ldr	r3, [pc, #196]	@ (800aa18 <HAL_RCC_ClockConfig+0x358>)
 800a954:	69db      	ldr	r3, [r3, #28]
 800a956:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	695b      	ldr	r3, [r3, #20]
 800a95e:	492e      	ldr	r1, [pc, #184]	@ (800aa18 <HAL_RCC_ClockConfig+0x358>)
 800a960:	4313      	orrs	r3, r2
 800a962:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f003 0310 	and.w	r3, r3, #16
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d010      	beq.n	800a992 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	699a      	ldr	r2, [r3, #24]
 800a974:	4b28      	ldr	r3, [pc, #160]	@ (800aa18 <HAL_RCC_ClockConfig+0x358>)
 800a976:	69db      	ldr	r3, [r3, #28]
 800a978:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a97c:	429a      	cmp	r2, r3
 800a97e:	d208      	bcs.n	800a992 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a980:	4b25      	ldr	r3, [pc, #148]	@ (800aa18 <HAL_RCC_ClockConfig+0x358>)
 800a982:	69db      	ldr	r3, [r3, #28]
 800a984:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	699b      	ldr	r3, [r3, #24]
 800a98c:	4922      	ldr	r1, [pc, #136]	@ (800aa18 <HAL_RCC_ClockConfig+0x358>)
 800a98e:	4313      	orrs	r3, r2
 800a990:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f003 0320 	and.w	r3, r3, #32
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d010      	beq.n	800a9c0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	69da      	ldr	r2, [r3, #28]
 800a9a2:	4b1d      	ldr	r3, [pc, #116]	@ (800aa18 <HAL_RCC_ClockConfig+0x358>)
 800a9a4:	6a1b      	ldr	r3, [r3, #32]
 800a9a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	d208      	bcs.n	800a9c0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a9ae:	4b1a      	ldr	r3, [pc, #104]	@ (800aa18 <HAL_RCC_ClockConfig+0x358>)
 800a9b0:	6a1b      	ldr	r3, [r3, #32]
 800a9b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	69db      	ldr	r3, [r3, #28]
 800a9ba:	4917      	ldr	r1, [pc, #92]	@ (800aa18 <HAL_RCC_ClockConfig+0x358>)
 800a9bc:	4313      	orrs	r3, r2
 800a9be:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a9c0:	f000 f834 	bl	800aa2c <HAL_RCC_GetSysClockFreq>
 800a9c4:	4602      	mov	r2, r0
 800a9c6:	4b14      	ldr	r3, [pc, #80]	@ (800aa18 <HAL_RCC_ClockConfig+0x358>)
 800a9c8:	699b      	ldr	r3, [r3, #24]
 800a9ca:	0a1b      	lsrs	r3, r3, #8
 800a9cc:	f003 030f 	and.w	r3, r3, #15
 800a9d0:	4912      	ldr	r1, [pc, #72]	@ (800aa1c <HAL_RCC_ClockConfig+0x35c>)
 800a9d2:	5ccb      	ldrb	r3, [r1, r3]
 800a9d4:	f003 031f 	and.w	r3, r3, #31
 800a9d8:	fa22 f303 	lsr.w	r3, r2, r3
 800a9dc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a9de:	4b0e      	ldr	r3, [pc, #56]	@ (800aa18 <HAL_RCC_ClockConfig+0x358>)
 800a9e0:	699b      	ldr	r3, [r3, #24]
 800a9e2:	f003 030f 	and.w	r3, r3, #15
 800a9e6:	4a0d      	ldr	r2, [pc, #52]	@ (800aa1c <HAL_RCC_ClockConfig+0x35c>)
 800a9e8:	5cd3      	ldrb	r3, [r2, r3]
 800a9ea:	f003 031f 	and.w	r3, r3, #31
 800a9ee:	693a      	ldr	r2, [r7, #16]
 800a9f0:	fa22 f303 	lsr.w	r3, r2, r3
 800a9f4:	4a0a      	ldr	r2, [pc, #40]	@ (800aa20 <HAL_RCC_ClockConfig+0x360>)
 800a9f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a9f8:	4a0a      	ldr	r2, [pc, #40]	@ (800aa24 <HAL_RCC_ClockConfig+0x364>)
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a9fe:	4b0a      	ldr	r3, [pc, #40]	@ (800aa28 <HAL_RCC_ClockConfig+0x368>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	4618      	mov	r0, r3
 800aa04:	f7f9 f844 	bl	8003a90 <HAL_InitTick>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800aa0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3718      	adds	r7, #24
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}
 800aa16:	bf00      	nop
 800aa18:	58024400 	.word	0x58024400
 800aa1c:	0801497c 	.word	0x0801497c
 800aa20:	24000028 	.word	0x24000028
 800aa24:	24000024 	.word	0x24000024
 800aa28:	2400002c 	.word	0x2400002c

0800aa2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b089      	sub	sp, #36	@ 0x24
 800aa30:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800aa32:	4bb3      	ldr	r3, [pc, #716]	@ (800ad00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa34:	691b      	ldr	r3, [r3, #16]
 800aa36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aa3a:	2b18      	cmp	r3, #24
 800aa3c:	f200 8155 	bhi.w	800acea <HAL_RCC_GetSysClockFreq+0x2be>
 800aa40:	a201      	add	r2, pc, #4	@ (adr r2, 800aa48 <HAL_RCC_GetSysClockFreq+0x1c>)
 800aa42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa46:	bf00      	nop
 800aa48:	0800aaad 	.word	0x0800aaad
 800aa4c:	0800aceb 	.word	0x0800aceb
 800aa50:	0800aceb 	.word	0x0800aceb
 800aa54:	0800aceb 	.word	0x0800aceb
 800aa58:	0800aceb 	.word	0x0800aceb
 800aa5c:	0800aceb 	.word	0x0800aceb
 800aa60:	0800aceb 	.word	0x0800aceb
 800aa64:	0800aceb 	.word	0x0800aceb
 800aa68:	0800aad3 	.word	0x0800aad3
 800aa6c:	0800aceb 	.word	0x0800aceb
 800aa70:	0800aceb 	.word	0x0800aceb
 800aa74:	0800aceb 	.word	0x0800aceb
 800aa78:	0800aceb 	.word	0x0800aceb
 800aa7c:	0800aceb 	.word	0x0800aceb
 800aa80:	0800aceb 	.word	0x0800aceb
 800aa84:	0800aceb 	.word	0x0800aceb
 800aa88:	0800aad9 	.word	0x0800aad9
 800aa8c:	0800aceb 	.word	0x0800aceb
 800aa90:	0800aceb 	.word	0x0800aceb
 800aa94:	0800aceb 	.word	0x0800aceb
 800aa98:	0800aceb 	.word	0x0800aceb
 800aa9c:	0800aceb 	.word	0x0800aceb
 800aaa0:	0800aceb 	.word	0x0800aceb
 800aaa4:	0800aceb 	.word	0x0800aceb
 800aaa8:	0800aadf 	.word	0x0800aadf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aaac:	4b94      	ldr	r3, [pc, #592]	@ (800ad00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f003 0320 	and.w	r3, r3, #32
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d009      	beq.n	800aacc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aab8:	4b91      	ldr	r3, [pc, #580]	@ (800ad00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	08db      	lsrs	r3, r3, #3
 800aabe:	f003 0303 	and.w	r3, r3, #3
 800aac2:	4a90      	ldr	r2, [pc, #576]	@ (800ad04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aac4:	fa22 f303 	lsr.w	r3, r2, r3
 800aac8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800aaca:	e111      	b.n	800acf0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800aacc:	4b8d      	ldr	r3, [pc, #564]	@ (800ad04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aace:	61bb      	str	r3, [r7, #24]
      break;
 800aad0:	e10e      	b.n	800acf0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800aad2:	4b8d      	ldr	r3, [pc, #564]	@ (800ad08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800aad4:	61bb      	str	r3, [r7, #24]
      break;
 800aad6:	e10b      	b.n	800acf0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800aad8:	4b8c      	ldr	r3, [pc, #560]	@ (800ad0c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800aada:	61bb      	str	r3, [r7, #24]
      break;
 800aadc:	e108      	b.n	800acf0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aade:	4b88      	ldr	r3, [pc, #544]	@ (800ad00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aae2:	f003 0303 	and.w	r3, r3, #3
 800aae6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800aae8:	4b85      	ldr	r3, [pc, #532]	@ (800ad00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aaea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaec:	091b      	lsrs	r3, r3, #4
 800aaee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aaf2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800aaf4:	4b82      	ldr	r3, [pc, #520]	@ (800ad00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aaf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaf8:	f003 0301 	and.w	r3, r3, #1
 800aafc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800aafe:	4b80      	ldr	r3, [pc, #512]	@ (800ad00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab02:	08db      	lsrs	r3, r3, #3
 800ab04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab08:	68fa      	ldr	r2, [r7, #12]
 800ab0a:	fb02 f303 	mul.w	r3, r2, r3
 800ab0e:	ee07 3a90 	vmov	s15, r3
 800ab12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab16:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	f000 80e1 	beq.w	800ace4 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	2b02      	cmp	r3, #2
 800ab26:	f000 8083 	beq.w	800ac30 <HAL_RCC_GetSysClockFreq+0x204>
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	2b02      	cmp	r3, #2
 800ab2e:	f200 80a1 	bhi.w	800ac74 <HAL_RCC_GetSysClockFreq+0x248>
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d003      	beq.n	800ab40 <HAL_RCC_GetSysClockFreq+0x114>
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	2b01      	cmp	r3, #1
 800ab3c:	d056      	beq.n	800abec <HAL_RCC_GetSysClockFreq+0x1c0>
 800ab3e:	e099      	b.n	800ac74 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab40:	4b6f      	ldr	r3, [pc, #444]	@ (800ad00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f003 0320 	and.w	r3, r3, #32
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d02d      	beq.n	800aba8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab4c:	4b6c      	ldr	r3, [pc, #432]	@ (800ad00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	08db      	lsrs	r3, r3, #3
 800ab52:	f003 0303 	and.w	r3, r3, #3
 800ab56:	4a6b      	ldr	r2, [pc, #428]	@ (800ad04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ab58:	fa22 f303 	lsr.w	r3, r2, r3
 800ab5c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	ee07 3a90 	vmov	s15, r3
 800ab64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	ee07 3a90 	vmov	s15, r3
 800ab6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab76:	4b62      	ldr	r3, [pc, #392]	@ (800ad00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab7e:	ee07 3a90 	vmov	s15, r3
 800ab82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab86:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab8a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800ad10 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ab8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aba2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800aba6:	e087      	b.n	800acb8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	ee07 3a90 	vmov	s15, r3
 800abae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abb2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800ad14 <HAL_RCC_GetSysClockFreq+0x2e8>
 800abb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abba:	4b51      	ldr	r3, [pc, #324]	@ (800ad00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abc2:	ee07 3a90 	vmov	s15, r3
 800abc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abca:	ed97 6a02 	vldr	s12, [r7, #8]
 800abce:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800ad10 <HAL_RCC_GetSysClockFreq+0x2e4>
 800abd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800abde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abe6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800abea:	e065      	b.n	800acb8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	ee07 3a90 	vmov	s15, r3
 800abf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abf6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800ad18 <HAL_RCC_GetSysClockFreq+0x2ec>
 800abfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abfe:	4b40      	ldr	r3, [pc, #256]	@ (800ad00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac06:	ee07 3a90 	vmov	s15, r3
 800ac0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac0e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac12:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800ad10 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ac16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ac2e:	e043      	b.n	800acb8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	ee07 3a90 	vmov	s15, r3
 800ac36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac3a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800ad1c <HAL_RCC_GetSysClockFreq+0x2f0>
 800ac3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac42:	4b2f      	ldr	r3, [pc, #188]	@ (800ad00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac4a:	ee07 3a90 	vmov	s15, r3
 800ac4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac52:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac56:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800ad10 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ac5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ac72:	e021      	b.n	800acb8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	ee07 3a90 	vmov	s15, r3
 800ac7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac7e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800ad18 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ac82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac86:	4b1e      	ldr	r3, [pc, #120]	@ (800ad00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac8e:	ee07 3a90 	vmov	s15, r3
 800ac92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac96:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac9a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800ad10 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ac9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aca6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800acaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800acb6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800acb8:	4b11      	ldr	r3, [pc, #68]	@ (800ad00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800acba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acbc:	0a5b      	lsrs	r3, r3, #9
 800acbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800acc2:	3301      	adds	r3, #1
 800acc4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	ee07 3a90 	vmov	s15, r3
 800accc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800acd0:	edd7 6a07 	vldr	s13, [r7, #28]
 800acd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800acd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800acdc:	ee17 3a90 	vmov	r3, s15
 800ace0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800ace2:	e005      	b.n	800acf0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800ace4:	2300      	movs	r3, #0
 800ace6:	61bb      	str	r3, [r7, #24]
      break;
 800ace8:	e002      	b.n	800acf0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800acea:	4b07      	ldr	r3, [pc, #28]	@ (800ad08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800acec:	61bb      	str	r3, [r7, #24]
      break;
 800acee:	bf00      	nop
  }

  return sysclockfreq;
 800acf0:	69bb      	ldr	r3, [r7, #24]
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	3724      	adds	r7, #36	@ 0x24
 800acf6:	46bd      	mov	sp, r7
 800acf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfc:	4770      	bx	lr
 800acfe:	bf00      	nop
 800ad00:	58024400 	.word	0x58024400
 800ad04:	03d09000 	.word	0x03d09000
 800ad08:	003d0900 	.word	0x003d0900
 800ad0c:	016e3600 	.word	0x016e3600
 800ad10:	46000000 	.word	0x46000000
 800ad14:	4c742400 	.word	0x4c742400
 800ad18:	4a742400 	.word	0x4a742400
 800ad1c:	4bb71b00 	.word	0x4bb71b00

0800ad20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b082      	sub	sp, #8
 800ad24:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ad26:	f7ff fe81 	bl	800aa2c <HAL_RCC_GetSysClockFreq>
 800ad2a:	4602      	mov	r2, r0
 800ad2c:	4b10      	ldr	r3, [pc, #64]	@ (800ad70 <HAL_RCC_GetHCLKFreq+0x50>)
 800ad2e:	699b      	ldr	r3, [r3, #24]
 800ad30:	0a1b      	lsrs	r3, r3, #8
 800ad32:	f003 030f 	and.w	r3, r3, #15
 800ad36:	490f      	ldr	r1, [pc, #60]	@ (800ad74 <HAL_RCC_GetHCLKFreq+0x54>)
 800ad38:	5ccb      	ldrb	r3, [r1, r3]
 800ad3a:	f003 031f 	and.w	r3, r3, #31
 800ad3e:	fa22 f303 	lsr.w	r3, r2, r3
 800ad42:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ad44:	4b0a      	ldr	r3, [pc, #40]	@ (800ad70 <HAL_RCC_GetHCLKFreq+0x50>)
 800ad46:	699b      	ldr	r3, [r3, #24]
 800ad48:	f003 030f 	and.w	r3, r3, #15
 800ad4c:	4a09      	ldr	r2, [pc, #36]	@ (800ad74 <HAL_RCC_GetHCLKFreq+0x54>)
 800ad4e:	5cd3      	ldrb	r3, [r2, r3]
 800ad50:	f003 031f 	and.w	r3, r3, #31
 800ad54:	687a      	ldr	r2, [r7, #4]
 800ad56:	fa22 f303 	lsr.w	r3, r2, r3
 800ad5a:	4a07      	ldr	r2, [pc, #28]	@ (800ad78 <HAL_RCC_GetHCLKFreq+0x58>)
 800ad5c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ad5e:	4a07      	ldr	r2, [pc, #28]	@ (800ad7c <HAL_RCC_GetHCLKFreq+0x5c>)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800ad64:	4b04      	ldr	r3, [pc, #16]	@ (800ad78 <HAL_RCC_GetHCLKFreq+0x58>)
 800ad66:	681b      	ldr	r3, [r3, #0]
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3708      	adds	r7, #8
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}
 800ad70:	58024400 	.word	0x58024400
 800ad74:	0801497c 	.word	0x0801497c
 800ad78:	24000028 	.word	0x24000028
 800ad7c:	24000024 	.word	0x24000024

0800ad80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ad84:	f7ff ffcc 	bl	800ad20 <HAL_RCC_GetHCLKFreq>
 800ad88:	4602      	mov	r2, r0
 800ad8a:	4b06      	ldr	r3, [pc, #24]	@ (800ada4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ad8c:	69db      	ldr	r3, [r3, #28]
 800ad8e:	091b      	lsrs	r3, r3, #4
 800ad90:	f003 0307 	and.w	r3, r3, #7
 800ad94:	4904      	ldr	r1, [pc, #16]	@ (800ada8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ad96:	5ccb      	ldrb	r3, [r1, r3]
 800ad98:	f003 031f 	and.w	r3, r3, #31
 800ad9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	bd80      	pop	{r7, pc}
 800ada4:	58024400 	.word	0x58024400
 800ada8:	0801497c 	.word	0x0801497c

0800adac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800adb0:	f7ff ffb6 	bl	800ad20 <HAL_RCC_GetHCLKFreq>
 800adb4:	4602      	mov	r2, r0
 800adb6:	4b06      	ldr	r3, [pc, #24]	@ (800add0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800adb8:	69db      	ldr	r3, [r3, #28]
 800adba:	0a1b      	lsrs	r3, r3, #8
 800adbc:	f003 0307 	and.w	r3, r3, #7
 800adc0:	4904      	ldr	r1, [pc, #16]	@ (800add4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800adc2:	5ccb      	ldrb	r3, [r1, r3]
 800adc4:	f003 031f 	and.w	r3, r3, #31
 800adc8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800adcc:	4618      	mov	r0, r3
 800adce:	bd80      	pop	{r7, pc}
 800add0:	58024400 	.word	0x58024400
 800add4:	0801497c 	.word	0x0801497c

0800add8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800add8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800addc:	b0c6      	sub	sp, #280	@ 0x118
 800adde:	af00      	add	r7, sp, #0
 800ade0:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ade4:	2300      	movs	r3, #0
 800ade6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800adea:	2300      	movs	r3, #0
 800adec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800adf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800adfc:	2500      	movs	r5, #0
 800adfe:	ea54 0305 	orrs.w	r3, r4, r5
 800ae02:	d049      	beq.n	800ae98 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800ae04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae0a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ae0e:	d02f      	beq.n	800ae70 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800ae10:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ae14:	d828      	bhi.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ae16:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ae1a:	d01a      	beq.n	800ae52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800ae1c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ae20:	d822      	bhi.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d003      	beq.n	800ae2e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800ae26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ae2a:	d007      	beq.n	800ae3c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ae2c:	e01c      	b.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae2e:	4bab      	ldr	r3, [pc, #684]	@ (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ae30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae32:	4aaa      	ldr	r2, [pc, #680]	@ (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ae34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ae38:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ae3a:	e01a      	b.n	800ae72 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ae3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae40:	3308      	adds	r3, #8
 800ae42:	2102      	movs	r1, #2
 800ae44:	4618      	mov	r0, r3
 800ae46:	f002 fa49 	bl	800d2dc <RCCEx_PLL2_Config>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ae50:	e00f      	b.n	800ae72 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ae52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae56:	3328      	adds	r3, #40	@ 0x28
 800ae58:	2102      	movs	r1, #2
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f002 faf0 	bl	800d440 <RCCEx_PLL3_Config>
 800ae60:	4603      	mov	r3, r0
 800ae62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ae66:	e004      	b.n	800ae72 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae68:	2301      	movs	r3, #1
 800ae6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ae6e:	e000      	b.n	800ae72 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800ae70:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae72:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d10a      	bne.n	800ae90 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ae7a:	4b98      	ldr	r3, [pc, #608]	@ (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ae7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae7e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800ae82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae88:	4a94      	ldr	r2, [pc, #592]	@ (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ae8a:	430b      	orrs	r3, r1
 800ae8c:	6513      	str	r3, [r2, #80]	@ 0x50
 800ae8e:	e003      	b.n	800ae98 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ae94:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ae98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800aea4:	f04f 0900 	mov.w	r9, #0
 800aea8:	ea58 0309 	orrs.w	r3, r8, r9
 800aeac:	d047      	beq.n	800af3e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800aeae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aeb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aeb4:	2b04      	cmp	r3, #4
 800aeb6:	d82a      	bhi.n	800af0e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800aeb8:	a201      	add	r2, pc, #4	@ (adr r2, 800aec0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800aeba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aebe:	bf00      	nop
 800aec0:	0800aed5 	.word	0x0800aed5
 800aec4:	0800aee3 	.word	0x0800aee3
 800aec8:	0800aef9 	.word	0x0800aef9
 800aecc:	0800af17 	.word	0x0800af17
 800aed0:	0800af17 	.word	0x0800af17
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aed4:	4b81      	ldr	r3, [pc, #516]	@ (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aed8:	4a80      	ldr	r2, [pc, #512]	@ (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aeda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aede:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aee0:	e01a      	b.n	800af18 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aee6:	3308      	adds	r3, #8
 800aee8:	2100      	movs	r1, #0
 800aeea:	4618      	mov	r0, r3
 800aeec:	f002 f9f6 	bl	800d2dc <RCCEx_PLL2_Config>
 800aef0:	4603      	mov	r3, r0
 800aef2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aef6:	e00f      	b.n	800af18 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aefc:	3328      	adds	r3, #40	@ 0x28
 800aefe:	2100      	movs	r1, #0
 800af00:	4618      	mov	r0, r3
 800af02:	f002 fa9d 	bl	800d440 <RCCEx_PLL3_Config>
 800af06:	4603      	mov	r3, r0
 800af08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800af0c:	e004      	b.n	800af18 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af0e:	2301      	movs	r3, #1
 800af10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800af14:	e000      	b.n	800af18 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800af16:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d10a      	bne.n	800af36 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800af20:	4b6e      	ldr	r3, [pc, #440]	@ (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800af22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af24:	f023 0107 	bic.w	r1, r3, #7
 800af28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af2e:	4a6b      	ldr	r2, [pc, #428]	@ (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800af30:	430b      	orrs	r3, r1
 800af32:	6513      	str	r3, [r2, #80]	@ 0x50
 800af34:	e003      	b.n	800af3e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800af3a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800af3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af46:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800af4a:	f04f 0b00 	mov.w	fp, #0
 800af4e:	ea5a 030b 	orrs.w	r3, sl, fp
 800af52:	d05b      	beq.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800af54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800af5c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800af60:	d03b      	beq.n	800afda <HAL_RCCEx_PeriphCLKConfig+0x202>
 800af62:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800af66:	d834      	bhi.n	800afd2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800af68:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800af6c:	d037      	beq.n	800afde <HAL_RCCEx_PeriphCLKConfig+0x206>
 800af6e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800af72:	d82e      	bhi.n	800afd2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800af74:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800af78:	d033      	beq.n	800afe2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800af7a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800af7e:	d828      	bhi.n	800afd2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800af80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800af84:	d01a      	beq.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800af86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800af8a:	d822      	bhi.n	800afd2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d003      	beq.n	800af98 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800af90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800af94:	d007      	beq.n	800afa6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800af96:	e01c      	b.n	800afd2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af98:	4b50      	ldr	r3, [pc, #320]	@ (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800af9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af9c:	4a4f      	ldr	r2, [pc, #316]	@ (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800af9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800afa2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800afa4:	e01e      	b.n	800afe4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800afa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afaa:	3308      	adds	r3, #8
 800afac:	2100      	movs	r1, #0
 800afae:	4618      	mov	r0, r3
 800afb0:	f002 f994 	bl	800d2dc <RCCEx_PLL2_Config>
 800afb4:	4603      	mov	r3, r0
 800afb6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800afba:	e013      	b.n	800afe4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800afbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afc0:	3328      	adds	r3, #40	@ 0x28
 800afc2:	2100      	movs	r1, #0
 800afc4:	4618      	mov	r0, r3
 800afc6:	f002 fa3b 	bl	800d440 <RCCEx_PLL3_Config>
 800afca:	4603      	mov	r3, r0
 800afcc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800afd0:	e008      	b.n	800afe4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800afd2:	2301      	movs	r3, #1
 800afd4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800afd8:	e004      	b.n	800afe4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800afda:	bf00      	nop
 800afdc:	e002      	b.n	800afe4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800afde:	bf00      	nop
 800afe0:	e000      	b.n	800afe4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800afe2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800afe4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d10b      	bne.n	800b004 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800afec:	4b3b      	ldr	r3, [pc, #236]	@ (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800afee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aff0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800aff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aff8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800affc:	4a37      	ldr	r2, [pc, #220]	@ (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800affe:	430b      	orrs	r3, r1
 800b000:	6593      	str	r3, [r2, #88]	@ 0x58
 800b002:	e003      	b.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b004:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b008:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b00c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b014:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800b018:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b01c:	2300      	movs	r3, #0
 800b01e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b022:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800b026:	460b      	mov	r3, r1
 800b028:	4313      	orrs	r3, r2
 800b02a:	d05d      	beq.n	800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b02c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b030:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b034:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800b038:	d03b      	beq.n	800b0b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800b03a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800b03e:	d834      	bhi.n	800b0aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b040:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b044:	d037      	beq.n	800b0b6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800b046:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b04a:	d82e      	bhi.n	800b0aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b04c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b050:	d033      	beq.n	800b0ba <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800b052:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b056:	d828      	bhi.n	800b0aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b058:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b05c:	d01a      	beq.n	800b094 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800b05e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b062:	d822      	bhi.n	800b0aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b064:	2b00      	cmp	r3, #0
 800b066:	d003      	beq.n	800b070 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800b068:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b06c:	d007      	beq.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800b06e:	e01c      	b.n	800b0aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b070:	4b1a      	ldr	r3, [pc, #104]	@ (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b074:	4a19      	ldr	r2, [pc, #100]	@ (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b076:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b07a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b07c:	e01e      	b.n	800b0bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b07e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b082:	3308      	adds	r3, #8
 800b084:	2100      	movs	r1, #0
 800b086:	4618      	mov	r0, r3
 800b088:	f002 f928 	bl	800d2dc <RCCEx_PLL2_Config>
 800b08c:	4603      	mov	r3, r0
 800b08e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b092:	e013      	b.n	800b0bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b094:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b098:	3328      	adds	r3, #40	@ 0x28
 800b09a:	2100      	movs	r1, #0
 800b09c:	4618      	mov	r0, r3
 800b09e:	f002 f9cf 	bl	800d440 <RCCEx_PLL3_Config>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b0a8:	e008      	b.n	800b0bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b0b0:	e004      	b.n	800b0bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b0b2:	bf00      	nop
 800b0b4:	e002      	b.n	800b0bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b0b6:	bf00      	nop
 800b0b8:	e000      	b.n	800b0bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b0ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d10d      	bne.n	800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b0c4:	4b05      	ldr	r3, [pc, #20]	@ (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b0c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b0c8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800b0cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b0d4:	4a01      	ldr	r2, [pc, #4]	@ (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b0d6:	430b      	orrs	r3, r1
 800b0d8:	6593      	str	r3, [r2, #88]	@ 0x58
 800b0da:	e005      	b.n	800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800b0dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b0e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b0e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800b0f4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b0fe:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800b102:	460b      	mov	r3, r1
 800b104:	4313      	orrs	r3, r2
 800b106:	d03a      	beq.n	800b17e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800b108:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b10c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b10e:	2b30      	cmp	r3, #48	@ 0x30
 800b110:	d01f      	beq.n	800b152 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800b112:	2b30      	cmp	r3, #48	@ 0x30
 800b114:	d819      	bhi.n	800b14a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800b116:	2b20      	cmp	r3, #32
 800b118:	d00c      	beq.n	800b134 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800b11a:	2b20      	cmp	r3, #32
 800b11c:	d815      	bhi.n	800b14a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d019      	beq.n	800b156 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b122:	2b10      	cmp	r3, #16
 800b124:	d111      	bne.n	800b14a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b126:	4baa      	ldr	r3, [pc, #680]	@ (800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b12a:	4aa9      	ldr	r2, [pc, #676]	@ (800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b12c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b130:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b132:	e011      	b.n	800b158 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b134:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b138:	3308      	adds	r3, #8
 800b13a:	2102      	movs	r1, #2
 800b13c:	4618      	mov	r0, r3
 800b13e:	f002 f8cd 	bl	800d2dc <RCCEx_PLL2_Config>
 800b142:	4603      	mov	r3, r0
 800b144:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b148:	e006      	b.n	800b158 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b14a:	2301      	movs	r3, #1
 800b14c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b150:	e002      	b.n	800b158 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800b152:	bf00      	nop
 800b154:	e000      	b.n	800b158 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800b156:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b158:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d10a      	bne.n	800b176 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b160:	4b9b      	ldr	r3, [pc, #620]	@ (800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b162:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b164:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800b168:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b16c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b16e:	4a98      	ldr	r2, [pc, #608]	@ (800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b170:	430b      	orrs	r3, r1
 800b172:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b174:	e003      	b.n	800b17e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b176:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b17a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b17e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b186:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800b18a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b18e:	2300      	movs	r3, #0
 800b190:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b194:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800b198:	460b      	mov	r3, r1
 800b19a:	4313      	orrs	r3, r2
 800b19c:	d051      	beq.n	800b242 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b19e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b1a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b1a8:	d035      	beq.n	800b216 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800b1aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b1ae:	d82e      	bhi.n	800b20e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b1b0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b1b4:	d031      	beq.n	800b21a <HAL_RCCEx_PeriphCLKConfig+0x442>
 800b1b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b1ba:	d828      	bhi.n	800b20e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b1bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b1c0:	d01a      	beq.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800b1c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b1c6:	d822      	bhi.n	800b20e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d003      	beq.n	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800b1cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b1d0:	d007      	beq.n	800b1e2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800b1d2:	e01c      	b.n	800b20e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1d4:	4b7e      	ldr	r3, [pc, #504]	@ (800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b1d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1d8:	4a7d      	ldr	r2, [pc, #500]	@ (800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b1da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b1de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b1e0:	e01c      	b.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b1e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1e6:	3308      	adds	r3, #8
 800b1e8:	2100      	movs	r1, #0
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f002 f876 	bl	800d2dc <RCCEx_PLL2_Config>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b1f6:	e011      	b.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b1f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1fc:	3328      	adds	r3, #40	@ 0x28
 800b1fe:	2100      	movs	r1, #0
 800b200:	4618      	mov	r0, r3
 800b202:	f002 f91d 	bl	800d440 <RCCEx_PLL3_Config>
 800b206:	4603      	mov	r3, r0
 800b208:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b20c:	e006      	b.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b20e:	2301      	movs	r3, #1
 800b210:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b214:	e002      	b.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800b216:	bf00      	nop
 800b218:	e000      	b.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800b21a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b21c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b220:	2b00      	cmp	r3, #0
 800b222:	d10a      	bne.n	800b23a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b224:	4b6a      	ldr	r3, [pc, #424]	@ (800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b226:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b228:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800b22c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b230:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b232:	4a67      	ldr	r2, [pc, #412]	@ (800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b234:	430b      	orrs	r3, r1
 800b236:	6513      	str	r3, [r2, #80]	@ 0x50
 800b238:	e003      	b.n	800b242 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b23a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b23e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b242:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b24a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800b24e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b252:	2300      	movs	r3, #0
 800b254:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b258:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800b25c:	460b      	mov	r3, r1
 800b25e:	4313      	orrs	r3, r2
 800b260:	d053      	beq.n	800b30a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b262:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b266:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b268:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b26c:	d033      	beq.n	800b2d6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800b26e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b272:	d82c      	bhi.n	800b2ce <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b274:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b278:	d02f      	beq.n	800b2da <HAL_RCCEx_PeriphCLKConfig+0x502>
 800b27a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b27e:	d826      	bhi.n	800b2ce <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b280:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b284:	d02b      	beq.n	800b2de <HAL_RCCEx_PeriphCLKConfig+0x506>
 800b286:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b28a:	d820      	bhi.n	800b2ce <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b28c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b290:	d012      	beq.n	800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800b292:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b296:	d81a      	bhi.n	800b2ce <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d022      	beq.n	800b2e2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800b29c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b2a0:	d115      	bne.n	800b2ce <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b2a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2a6:	3308      	adds	r3, #8
 800b2a8:	2101      	movs	r1, #1
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	f002 f816 	bl	800d2dc <RCCEx_PLL2_Config>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b2b6:	e015      	b.n	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b2b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2bc:	3328      	adds	r3, #40	@ 0x28
 800b2be:	2101      	movs	r1, #1
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f002 f8bd 	bl	800d440 <RCCEx_PLL3_Config>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b2cc:	e00a      	b.n	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b2d4:	e006      	b.n	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b2d6:	bf00      	nop
 800b2d8:	e004      	b.n	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b2da:	bf00      	nop
 800b2dc:	e002      	b.n	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b2de:	bf00      	nop
 800b2e0:	e000      	b.n	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b2e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d10a      	bne.n	800b302 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b2ec:	4b38      	ldr	r3, [pc, #224]	@ (800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b2ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b2f0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800b2f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b2fa:	4a35      	ldr	r2, [pc, #212]	@ (800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b2fc:	430b      	orrs	r3, r1
 800b2fe:	6513      	str	r3, [r2, #80]	@ 0x50
 800b300:	e003      	b.n	800b30a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b302:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b306:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b30a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b312:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800b316:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b31a:	2300      	movs	r3, #0
 800b31c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b320:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b324:	460b      	mov	r3, r1
 800b326:	4313      	orrs	r3, r2
 800b328:	d058      	beq.n	800b3dc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b32a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b32e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b332:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b336:	d033      	beq.n	800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800b338:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b33c:	d82c      	bhi.n	800b398 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b33e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b342:	d02f      	beq.n	800b3a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800b344:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b348:	d826      	bhi.n	800b398 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b34a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b34e:	d02b      	beq.n	800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800b350:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b354:	d820      	bhi.n	800b398 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b356:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b35a:	d012      	beq.n	800b382 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800b35c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b360:	d81a      	bhi.n	800b398 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b362:	2b00      	cmp	r3, #0
 800b364:	d022      	beq.n	800b3ac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b366:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b36a:	d115      	bne.n	800b398 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b36c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b370:	3308      	adds	r3, #8
 800b372:	2101      	movs	r1, #1
 800b374:	4618      	mov	r0, r3
 800b376:	f001 ffb1 	bl	800d2dc <RCCEx_PLL2_Config>
 800b37a:	4603      	mov	r3, r0
 800b37c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b380:	e015      	b.n	800b3ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b382:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b386:	3328      	adds	r3, #40	@ 0x28
 800b388:	2101      	movs	r1, #1
 800b38a:	4618      	mov	r0, r3
 800b38c:	f002 f858 	bl	800d440 <RCCEx_PLL3_Config>
 800b390:	4603      	mov	r3, r0
 800b392:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b396:	e00a      	b.n	800b3ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b398:	2301      	movs	r3, #1
 800b39a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b39e:	e006      	b.n	800b3ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b3a0:	bf00      	nop
 800b3a2:	e004      	b.n	800b3ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b3a4:	bf00      	nop
 800b3a6:	e002      	b.n	800b3ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b3a8:	bf00      	nop
 800b3aa:	e000      	b.n	800b3ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b3ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d10e      	bne.n	800b3d4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b3b6:	4b06      	ldr	r3, [pc, #24]	@ (800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b3b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b3ba:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800b3be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b3c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b3c6:	4a02      	ldr	r2, [pc, #8]	@ (800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b3c8:	430b      	orrs	r3, r1
 800b3ca:	6593      	str	r3, [r2, #88]	@ 0x58
 800b3cc:	e006      	b.n	800b3dc <HAL_RCCEx_PeriphCLKConfig+0x604>
 800b3ce:	bf00      	nop
 800b3d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b3d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b3dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800b3e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b3f2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800b3f6:	460b      	mov	r3, r1
 800b3f8:	4313      	orrs	r3, r2
 800b3fa:	d037      	beq.n	800b46c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b3fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b400:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b402:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b406:	d00e      	beq.n	800b426 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800b408:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b40c:	d816      	bhi.n	800b43c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d018      	beq.n	800b444 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800b412:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b416:	d111      	bne.n	800b43c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b418:	4bc4      	ldr	r3, [pc, #784]	@ (800b72c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b41a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b41c:	4ac3      	ldr	r2, [pc, #780]	@ (800b72c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b41e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b422:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b424:	e00f      	b.n	800b446 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b426:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b42a:	3308      	adds	r3, #8
 800b42c:	2101      	movs	r1, #1
 800b42e:	4618      	mov	r0, r3
 800b430:	f001 ff54 	bl	800d2dc <RCCEx_PLL2_Config>
 800b434:	4603      	mov	r3, r0
 800b436:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b43a:	e004      	b.n	800b446 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b43c:	2301      	movs	r3, #1
 800b43e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b442:	e000      	b.n	800b446 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800b444:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b446:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d10a      	bne.n	800b464 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b44e:	4bb7      	ldr	r3, [pc, #732]	@ (800b72c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b450:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b452:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800b456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b45a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b45c:	4ab3      	ldr	r2, [pc, #716]	@ (800b72c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b45e:	430b      	orrs	r3, r1
 800b460:	6513      	str	r3, [r2, #80]	@ 0x50
 800b462:	e003      	b.n	800b46c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b464:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b468:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b46c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b474:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800b478:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b47c:	2300      	movs	r3, #0
 800b47e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b482:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800b486:	460b      	mov	r3, r1
 800b488:	4313      	orrs	r3, r2
 800b48a:	d039      	beq.n	800b500 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b48c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b490:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b492:	2b03      	cmp	r3, #3
 800b494:	d81c      	bhi.n	800b4d0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800b496:	a201      	add	r2, pc, #4	@ (adr r2, 800b49c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800b498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b49c:	0800b4d9 	.word	0x0800b4d9
 800b4a0:	0800b4ad 	.word	0x0800b4ad
 800b4a4:	0800b4bb 	.word	0x0800b4bb
 800b4a8:	0800b4d9 	.word	0x0800b4d9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b4ac:	4b9f      	ldr	r3, [pc, #636]	@ (800b72c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b4ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4b0:	4a9e      	ldr	r2, [pc, #632]	@ (800b72c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b4b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b4b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b4b8:	e00f      	b.n	800b4da <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b4ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4be:	3308      	adds	r3, #8
 800b4c0:	2102      	movs	r1, #2
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	f001 ff0a 	bl	800d2dc <RCCEx_PLL2_Config>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b4ce:	e004      	b.n	800b4da <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b4d6:	e000      	b.n	800b4da <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800b4d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d10a      	bne.n	800b4f8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b4e2:	4b92      	ldr	r3, [pc, #584]	@ (800b72c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b4e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b4e6:	f023 0103 	bic.w	r1, r3, #3
 800b4ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b4f0:	4a8e      	ldr	r2, [pc, #568]	@ (800b72c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b4f2:	430b      	orrs	r3, r1
 800b4f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b4f6:	e003      	b.n	800b500 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b4fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b500:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b508:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800b50c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b510:	2300      	movs	r3, #0
 800b512:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b516:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b51a:	460b      	mov	r3, r1
 800b51c:	4313      	orrs	r3, r2
 800b51e:	f000 8099 	beq.w	800b654 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b522:	4b83      	ldr	r3, [pc, #524]	@ (800b730 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	4a82      	ldr	r2, [pc, #520]	@ (800b730 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b528:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b52c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b52e:	f7f8 faf9 	bl	8003b24 <HAL_GetTick>
 800b532:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b536:	e00b      	b.n	800b550 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b538:	f7f8 faf4 	bl	8003b24 <HAL_GetTick>
 800b53c:	4602      	mov	r2, r0
 800b53e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800b542:	1ad3      	subs	r3, r2, r3
 800b544:	2b64      	cmp	r3, #100	@ 0x64
 800b546:	d903      	bls.n	800b550 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800b548:	2303      	movs	r3, #3
 800b54a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b54e:	e005      	b.n	800b55c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b550:	4b77      	ldr	r3, [pc, #476]	@ (800b730 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d0ed      	beq.n	800b538 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800b55c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b560:	2b00      	cmp	r3, #0
 800b562:	d173      	bne.n	800b64c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b564:	4b71      	ldr	r3, [pc, #452]	@ (800b72c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b566:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800b568:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b56c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b570:	4053      	eors	r3, r2
 800b572:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b576:	2b00      	cmp	r3, #0
 800b578:	d015      	beq.n	800b5a6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b57a:	4b6c      	ldr	r3, [pc, #432]	@ (800b72c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b57c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b57e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b582:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b586:	4b69      	ldr	r3, [pc, #420]	@ (800b72c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b58a:	4a68      	ldr	r2, [pc, #416]	@ (800b72c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b58c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b590:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b592:	4b66      	ldr	r3, [pc, #408]	@ (800b72c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b596:	4a65      	ldr	r2, [pc, #404]	@ (800b72c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b598:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b59c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b59e:	4a63      	ldr	r2, [pc, #396]	@ (800b72c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b5a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5a4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b5a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b5ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b5b2:	d118      	bne.n	800b5e6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5b4:	f7f8 fab6 	bl	8003b24 <HAL_GetTick>
 800b5b8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b5bc:	e00d      	b.n	800b5da <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b5be:	f7f8 fab1 	bl	8003b24 <HAL_GetTick>
 800b5c2:	4602      	mov	r2, r0
 800b5c4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800b5c8:	1ad2      	subs	r2, r2, r3
 800b5ca:	f241 3388 	movw	r3, #5000	@ 0x1388
 800b5ce:	429a      	cmp	r2, r3
 800b5d0:	d903      	bls.n	800b5da <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800b5d2:	2303      	movs	r3, #3
 800b5d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800b5d8:	e005      	b.n	800b5e6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b5da:	4b54      	ldr	r3, [pc, #336]	@ (800b72c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b5dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b5de:	f003 0302 	and.w	r3, r3, #2
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d0eb      	beq.n	800b5be <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800b5e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d129      	bne.n	800b642 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b5ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b5f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b5fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b5fe:	d10e      	bne.n	800b61e <HAL_RCCEx_PeriphCLKConfig+0x846>
 800b600:	4b4a      	ldr	r3, [pc, #296]	@ (800b72c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b602:	691b      	ldr	r3, [r3, #16]
 800b604:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800b608:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b60c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b610:	091a      	lsrs	r2, r3, #4
 800b612:	4b48      	ldr	r3, [pc, #288]	@ (800b734 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800b614:	4013      	ands	r3, r2
 800b616:	4a45      	ldr	r2, [pc, #276]	@ (800b72c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b618:	430b      	orrs	r3, r1
 800b61a:	6113      	str	r3, [r2, #16]
 800b61c:	e005      	b.n	800b62a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800b61e:	4b43      	ldr	r3, [pc, #268]	@ (800b72c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b620:	691b      	ldr	r3, [r3, #16]
 800b622:	4a42      	ldr	r2, [pc, #264]	@ (800b72c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b624:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b628:	6113      	str	r3, [r2, #16]
 800b62a:	4b40      	ldr	r3, [pc, #256]	@ (800b72c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b62c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800b62e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b632:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b636:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b63a:	4a3c      	ldr	r2, [pc, #240]	@ (800b72c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b63c:	430b      	orrs	r3, r1
 800b63e:	6713      	str	r3, [r2, #112]	@ 0x70
 800b640:	e008      	b.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b642:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b646:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800b64a:	e003      	b.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b64c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b650:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b654:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b65c:	f002 0301 	and.w	r3, r2, #1
 800b660:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b664:	2300      	movs	r3, #0
 800b666:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b66a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800b66e:	460b      	mov	r3, r1
 800b670:	4313      	orrs	r3, r2
 800b672:	f000 808f 	beq.w	800b794 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b676:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b67a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b67c:	2b28      	cmp	r3, #40	@ 0x28
 800b67e:	d871      	bhi.n	800b764 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800b680:	a201      	add	r2, pc, #4	@ (adr r2, 800b688 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800b682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b686:	bf00      	nop
 800b688:	0800b76d 	.word	0x0800b76d
 800b68c:	0800b765 	.word	0x0800b765
 800b690:	0800b765 	.word	0x0800b765
 800b694:	0800b765 	.word	0x0800b765
 800b698:	0800b765 	.word	0x0800b765
 800b69c:	0800b765 	.word	0x0800b765
 800b6a0:	0800b765 	.word	0x0800b765
 800b6a4:	0800b765 	.word	0x0800b765
 800b6a8:	0800b739 	.word	0x0800b739
 800b6ac:	0800b765 	.word	0x0800b765
 800b6b0:	0800b765 	.word	0x0800b765
 800b6b4:	0800b765 	.word	0x0800b765
 800b6b8:	0800b765 	.word	0x0800b765
 800b6bc:	0800b765 	.word	0x0800b765
 800b6c0:	0800b765 	.word	0x0800b765
 800b6c4:	0800b765 	.word	0x0800b765
 800b6c8:	0800b74f 	.word	0x0800b74f
 800b6cc:	0800b765 	.word	0x0800b765
 800b6d0:	0800b765 	.word	0x0800b765
 800b6d4:	0800b765 	.word	0x0800b765
 800b6d8:	0800b765 	.word	0x0800b765
 800b6dc:	0800b765 	.word	0x0800b765
 800b6e0:	0800b765 	.word	0x0800b765
 800b6e4:	0800b765 	.word	0x0800b765
 800b6e8:	0800b76d 	.word	0x0800b76d
 800b6ec:	0800b765 	.word	0x0800b765
 800b6f0:	0800b765 	.word	0x0800b765
 800b6f4:	0800b765 	.word	0x0800b765
 800b6f8:	0800b765 	.word	0x0800b765
 800b6fc:	0800b765 	.word	0x0800b765
 800b700:	0800b765 	.word	0x0800b765
 800b704:	0800b765 	.word	0x0800b765
 800b708:	0800b76d 	.word	0x0800b76d
 800b70c:	0800b765 	.word	0x0800b765
 800b710:	0800b765 	.word	0x0800b765
 800b714:	0800b765 	.word	0x0800b765
 800b718:	0800b765 	.word	0x0800b765
 800b71c:	0800b765 	.word	0x0800b765
 800b720:	0800b765 	.word	0x0800b765
 800b724:	0800b765 	.word	0x0800b765
 800b728:	0800b76d 	.word	0x0800b76d
 800b72c:	58024400 	.word	0x58024400
 800b730:	58024800 	.word	0x58024800
 800b734:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b73c:	3308      	adds	r3, #8
 800b73e:	2101      	movs	r1, #1
 800b740:	4618      	mov	r0, r3
 800b742:	f001 fdcb 	bl	800d2dc <RCCEx_PLL2_Config>
 800b746:	4603      	mov	r3, r0
 800b748:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b74c:	e00f      	b.n	800b76e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b74e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b752:	3328      	adds	r3, #40	@ 0x28
 800b754:	2101      	movs	r1, #1
 800b756:	4618      	mov	r0, r3
 800b758:	f001 fe72 	bl	800d440 <RCCEx_PLL3_Config>
 800b75c:	4603      	mov	r3, r0
 800b75e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b762:	e004      	b.n	800b76e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b764:	2301      	movs	r3, #1
 800b766:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b76a:	e000      	b.n	800b76e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800b76c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b76e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b772:	2b00      	cmp	r3, #0
 800b774:	d10a      	bne.n	800b78c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b776:	4bbf      	ldr	r3, [pc, #764]	@ (800ba74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b778:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b77a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800b77e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b782:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b784:	4abb      	ldr	r2, [pc, #748]	@ (800ba74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b786:	430b      	orrs	r3, r1
 800b788:	6553      	str	r3, [r2, #84]	@ 0x54
 800b78a:	e003      	b.n	800b794 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b78c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b790:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b79c:	f002 0302 	and.w	r3, r2, #2
 800b7a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b7aa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800b7ae:	460b      	mov	r3, r1
 800b7b0:	4313      	orrs	r3, r2
 800b7b2:	d041      	beq.n	800b838 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b7b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b7ba:	2b05      	cmp	r3, #5
 800b7bc:	d824      	bhi.n	800b808 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800b7be:	a201      	add	r2, pc, #4	@ (adr r2, 800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800b7c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7c4:	0800b811 	.word	0x0800b811
 800b7c8:	0800b7dd 	.word	0x0800b7dd
 800b7cc:	0800b7f3 	.word	0x0800b7f3
 800b7d0:	0800b811 	.word	0x0800b811
 800b7d4:	0800b811 	.word	0x0800b811
 800b7d8:	0800b811 	.word	0x0800b811
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b7dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7e0:	3308      	adds	r3, #8
 800b7e2:	2101      	movs	r1, #1
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f001 fd79 	bl	800d2dc <RCCEx_PLL2_Config>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b7f0:	e00f      	b.n	800b812 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b7f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7f6:	3328      	adds	r3, #40	@ 0x28
 800b7f8:	2101      	movs	r1, #1
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f001 fe20 	bl	800d440 <RCCEx_PLL3_Config>
 800b800:	4603      	mov	r3, r0
 800b802:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b806:	e004      	b.n	800b812 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b808:	2301      	movs	r3, #1
 800b80a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b80e:	e000      	b.n	800b812 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800b810:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b812:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b816:	2b00      	cmp	r3, #0
 800b818:	d10a      	bne.n	800b830 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b81a:	4b96      	ldr	r3, [pc, #600]	@ (800ba74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b81c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b81e:	f023 0107 	bic.w	r1, r3, #7
 800b822:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b826:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b828:	4a92      	ldr	r2, [pc, #584]	@ (800ba74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b82a:	430b      	orrs	r3, r1
 800b82c:	6553      	str	r3, [r2, #84]	@ 0x54
 800b82e:	e003      	b.n	800b838 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b830:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b834:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b838:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b840:	f002 0304 	and.w	r3, r2, #4
 800b844:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b848:	2300      	movs	r3, #0
 800b84a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b84e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b852:	460b      	mov	r3, r1
 800b854:	4313      	orrs	r3, r2
 800b856:	d044      	beq.n	800b8e2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b858:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b85c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b860:	2b05      	cmp	r3, #5
 800b862:	d825      	bhi.n	800b8b0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800b864:	a201      	add	r2, pc, #4	@ (adr r2, 800b86c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800b866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b86a:	bf00      	nop
 800b86c:	0800b8b9 	.word	0x0800b8b9
 800b870:	0800b885 	.word	0x0800b885
 800b874:	0800b89b 	.word	0x0800b89b
 800b878:	0800b8b9 	.word	0x0800b8b9
 800b87c:	0800b8b9 	.word	0x0800b8b9
 800b880:	0800b8b9 	.word	0x0800b8b9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b884:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b888:	3308      	adds	r3, #8
 800b88a:	2101      	movs	r1, #1
 800b88c:	4618      	mov	r0, r3
 800b88e:	f001 fd25 	bl	800d2dc <RCCEx_PLL2_Config>
 800b892:	4603      	mov	r3, r0
 800b894:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b898:	e00f      	b.n	800b8ba <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b89a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b89e:	3328      	adds	r3, #40	@ 0x28
 800b8a0:	2101      	movs	r1, #1
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f001 fdcc 	bl	800d440 <RCCEx_PLL3_Config>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b8ae:	e004      	b.n	800b8ba <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8b0:	2301      	movs	r3, #1
 800b8b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b8b6:	e000      	b.n	800b8ba <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800b8b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d10b      	bne.n	800b8da <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b8c2:	4b6c      	ldr	r3, [pc, #432]	@ (800ba74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b8c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b8c6:	f023 0107 	bic.w	r1, r3, #7
 800b8ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8d2:	4a68      	ldr	r2, [pc, #416]	@ (800ba74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b8d4:	430b      	orrs	r3, r1
 800b8d6:	6593      	str	r3, [r2, #88]	@ 0x58
 800b8d8:	e003      	b.n	800b8e2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b8de:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b8e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ea:	f002 0320 	and.w	r3, r2, #32
 800b8ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b8f8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800b8fc:	460b      	mov	r3, r1
 800b8fe:	4313      	orrs	r3, r2
 800b900:	d055      	beq.n	800b9ae <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b902:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b906:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b90a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b90e:	d033      	beq.n	800b978 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800b910:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b914:	d82c      	bhi.n	800b970 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b916:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b91a:	d02f      	beq.n	800b97c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800b91c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b920:	d826      	bhi.n	800b970 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b922:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b926:	d02b      	beq.n	800b980 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800b928:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b92c:	d820      	bhi.n	800b970 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b92e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b932:	d012      	beq.n	800b95a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800b934:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b938:	d81a      	bhi.n	800b970 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d022      	beq.n	800b984 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800b93e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b942:	d115      	bne.n	800b970 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b944:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b948:	3308      	adds	r3, #8
 800b94a:	2100      	movs	r1, #0
 800b94c:	4618      	mov	r0, r3
 800b94e:	f001 fcc5 	bl	800d2dc <RCCEx_PLL2_Config>
 800b952:	4603      	mov	r3, r0
 800b954:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b958:	e015      	b.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b95a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b95e:	3328      	adds	r3, #40	@ 0x28
 800b960:	2102      	movs	r1, #2
 800b962:	4618      	mov	r0, r3
 800b964:	f001 fd6c 	bl	800d440 <RCCEx_PLL3_Config>
 800b968:	4603      	mov	r3, r0
 800b96a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b96e:	e00a      	b.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b970:	2301      	movs	r3, #1
 800b972:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b976:	e006      	b.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b978:	bf00      	nop
 800b97a:	e004      	b.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b97c:	bf00      	nop
 800b97e:	e002      	b.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b980:	bf00      	nop
 800b982:	e000      	b.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b984:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b986:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d10b      	bne.n	800b9a6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b98e:	4b39      	ldr	r3, [pc, #228]	@ (800ba74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b992:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800b996:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b99a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b99e:	4a35      	ldr	r2, [pc, #212]	@ (800ba74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b9a0:	430b      	orrs	r3, r1
 800b9a2:	6553      	str	r3, [r2, #84]	@ 0x54
 800b9a4:	e003      	b.n	800b9ae <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b9aa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b9ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800b9ba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b9be:	2300      	movs	r3, #0
 800b9c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b9c4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800b9c8:	460b      	mov	r3, r1
 800b9ca:	4313      	orrs	r3, r2
 800b9cc:	d058      	beq.n	800ba80 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b9ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b9d6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800b9da:	d033      	beq.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800b9dc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800b9e0:	d82c      	bhi.n	800ba3c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b9e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b9e6:	d02f      	beq.n	800ba48 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b9e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b9ec:	d826      	bhi.n	800ba3c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b9ee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b9f2:	d02b      	beq.n	800ba4c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b9f4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b9f8:	d820      	bhi.n	800ba3c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b9fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b9fe:	d012      	beq.n	800ba26 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800ba00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ba04:	d81a      	bhi.n	800ba3c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d022      	beq.n	800ba50 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800ba0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ba0e:	d115      	bne.n	800ba3c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ba10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba14:	3308      	adds	r3, #8
 800ba16:	2100      	movs	r1, #0
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f001 fc5f 	bl	800d2dc <RCCEx_PLL2_Config>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ba24:	e015      	b.n	800ba52 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ba26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba2a:	3328      	adds	r3, #40	@ 0x28
 800ba2c:	2102      	movs	r1, #2
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f001 fd06 	bl	800d440 <RCCEx_PLL3_Config>
 800ba34:	4603      	mov	r3, r0
 800ba36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ba3a:	e00a      	b.n	800ba52 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ba42:	e006      	b.n	800ba52 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ba44:	bf00      	nop
 800ba46:	e004      	b.n	800ba52 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ba48:	bf00      	nop
 800ba4a:	e002      	b.n	800ba52 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ba4c:	bf00      	nop
 800ba4e:	e000      	b.n	800ba52 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ba50:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba52:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d10e      	bne.n	800ba78 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ba5a:	4b06      	ldr	r3, [pc, #24]	@ (800ba74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ba5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba5e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800ba62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba66:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ba6a:	4a02      	ldr	r2, [pc, #8]	@ (800ba74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ba6c:	430b      	orrs	r3, r1
 800ba6e:	6593      	str	r3, [r2, #88]	@ 0x58
 800ba70:	e006      	b.n	800ba80 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800ba72:	bf00      	nop
 800ba74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ba7c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ba80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba88:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800ba8c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ba90:	2300      	movs	r3, #0
 800ba92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ba96:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800ba9a:	460b      	mov	r3, r1
 800ba9c:	4313      	orrs	r3, r2
 800ba9e:	d055      	beq.n	800bb4c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800baa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800baa4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800baa8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800baac:	d033      	beq.n	800bb16 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800baae:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800bab2:	d82c      	bhi.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800bab4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bab8:	d02f      	beq.n	800bb1a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800baba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800babe:	d826      	bhi.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800bac0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800bac4:	d02b      	beq.n	800bb1e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800bac6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800baca:	d820      	bhi.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800bacc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bad0:	d012      	beq.n	800baf8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800bad2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bad6:	d81a      	bhi.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d022      	beq.n	800bb22 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800badc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bae0:	d115      	bne.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bae6:	3308      	adds	r3, #8
 800bae8:	2100      	movs	r1, #0
 800baea:	4618      	mov	r0, r3
 800baec:	f001 fbf6 	bl	800d2dc <RCCEx_PLL2_Config>
 800baf0:	4603      	mov	r3, r0
 800baf2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800baf6:	e015      	b.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800baf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bafc:	3328      	adds	r3, #40	@ 0x28
 800bafe:	2102      	movs	r1, #2
 800bb00:	4618      	mov	r0, r3
 800bb02:	f001 fc9d 	bl	800d440 <RCCEx_PLL3_Config>
 800bb06:	4603      	mov	r3, r0
 800bb08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bb0c:	e00a      	b.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb0e:	2301      	movs	r3, #1
 800bb10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bb14:	e006      	b.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800bb16:	bf00      	nop
 800bb18:	e004      	b.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800bb1a:	bf00      	nop
 800bb1c:	e002      	b.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800bb1e:	bf00      	nop
 800bb20:	e000      	b.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800bb22:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d10b      	bne.n	800bb44 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800bb2c:	4ba0      	ldr	r3, [pc, #640]	@ (800bdb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bb2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb30:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800bb34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb38:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bb3c:	4a9c      	ldr	r2, [pc, #624]	@ (800bdb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bb3e:	430b      	orrs	r3, r1
 800bb40:	6593      	str	r3, [r2, #88]	@ 0x58
 800bb42:	e003      	b.n	800bb4c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bb48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800bb4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb54:	f002 0308 	and.w	r3, r2, #8
 800bb58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800bb62:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800bb66:	460b      	mov	r3, r1
 800bb68:	4313      	orrs	r3, r2
 800bb6a:	d01e      	beq.n	800bbaa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800bb6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bb78:	d10c      	bne.n	800bb94 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bb7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb7e:	3328      	adds	r3, #40	@ 0x28
 800bb80:	2102      	movs	r1, #2
 800bb82:	4618      	mov	r0, r3
 800bb84:	f001 fc5c 	bl	800d440 <RCCEx_PLL3_Config>
 800bb88:	4603      	mov	r3, r0
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d002      	beq.n	800bb94 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800bb8e:	2301      	movs	r3, #1
 800bb90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800bb94:	4b86      	ldr	r3, [pc, #536]	@ (800bdb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bb96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb98:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800bb9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bba0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bba4:	4a82      	ldr	r2, [pc, #520]	@ (800bdb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bba6:	430b      	orrs	r3, r1
 800bba8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bbaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb2:	f002 0310 	and.w	r3, r2, #16
 800bbb6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bbba:	2300      	movs	r3, #0
 800bbbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bbc0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800bbc4:	460b      	mov	r3, r1
 800bbc6:	4313      	orrs	r3, r2
 800bbc8:	d01e      	beq.n	800bc08 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800bbca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bbd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bbd6:	d10c      	bne.n	800bbf2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bbd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbdc:	3328      	adds	r3, #40	@ 0x28
 800bbde:	2102      	movs	r1, #2
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f001 fc2d 	bl	800d440 <RCCEx_PLL3_Config>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d002      	beq.n	800bbf2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800bbec:	2301      	movs	r3, #1
 800bbee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bbf2:	4b6f      	ldr	r3, [pc, #444]	@ (800bdb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bbf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bbf6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800bbfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bc02:	4a6b      	ldr	r2, [pc, #428]	@ (800bdb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bc04:	430b      	orrs	r3, r1
 800bc06:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bc08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc10:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800bc14:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bc16:	2300      	movs	r3, #0
 800bc18:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800bc1a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800bc1e:	460b      	mov	r3, r1
 800bc20:	4313      	orrs	r3, r2
 800bc22:	d03e      	beq.n	800bca2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800bc24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bc2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bc30:	d022      	beq.n	800bc78 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800bc32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bc36:	d81b      	bhi.n	800bc70 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d003      	beq.n	800bc44 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800bc3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bc40:	d00b      	beq.n	800bc5a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800bc42:	e015      	b.n	800bc70 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bc44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc48:	3308      	adds	r3, #8
 800bc4a:	2100      	movs	r1, #0
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	f001 fb45 	bl	800d2dc <RCCEx_PLL2_Config>
 800bc52:	4603      	mov	r3, r0
 800bc54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bc58:	e00f      	b.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bc5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc5e:	3328      	adds	r3, #40	@ 0x28
 800bc60:	2102      	movs	r1, #2
 800bc62:	4618      	mov	r0, r3
 800bc64:	f001 fbec 	bl	800d440 <RCCEx_PLL3_Config>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bc6e:	e004      	b.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc70:	2301      	movs	r3, #1
 800bc72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bc76:	e000      	b.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800bc78:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d10b      	bne.n	800bc9a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bc82:	4b4b      	ldr	r3, [pc, #300]	@ (800bdb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bc84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc86:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800bc8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bc92:	4a47      	ldr	r2, [pc, #284]	@ (800bdb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bc94:	430b      	orrs	r3, r1
 800bc96:	6593      	str	r3, [r2, #88]	@ 0x58
 800bc98:	e003      	b.n	800bca2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc9a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bc9e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcaa:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800bcae:	673b      	str	r3, [r7, #112]	@ 0x70
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	677b      	str	r3, [r7, #116]	@ 0x74
 800bcb4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800bcb8:	460b      	mov	r3, r1
 800bcba:	4313      	orrs	r3, r2
 800bcbc:	d03b      	beq.n	800bd36 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800bcbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bcc6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800bcca:	d01f      	beq.n	800bd0c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800bccc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800bcd0:	d818      	bhi.n	800bd04 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800bcd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bcd6:	d003      	beq.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800bcd8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bcdc:	d007      	beq.n	800bcee <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800bcde:	e011      	b.n	800bd04 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bce0:	4b33      	ldr	r3, [pc, #204]	@ (800bdb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bce4:	4a32      	ldr	r2, [pc, #200]	@ (800bdb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bce6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bcea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800bcec:	e00f      	b.n	800bd0e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bcee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcf2:	3328      	adds	r3, #40	@ 0x28
 800bcf4:	2101      	movs	r1, #1
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f001 fba2 	bl	800d440 <RCCEx_PLL3_Config>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800bd02:	e004      	b.n	800bd0e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd04:	2301      	movs	r3, #1
 800bd06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bd0a:	e000      	b.n	800bd0e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800bd0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd0e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d10b      	bne.n	800bd2e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bd16:	4b26      	ldr	r3, [pc, #152]	@ (800bdb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bd18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd1a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800bd1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bd26:	4a22      	ldr	r2, [pc, #136]	@ (800bdb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bd28:	430b      	orrs	r3, r1
 800bd2a:	6553      	str	r3, [r2, #84]	@ 0x54
 800bd2c:	e003      	b.n	800bd36 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd2e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bd32:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bd36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd3e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800bd42:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bd44:	2300      	movs	r3, #0
 800bd46:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bd48:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800bd4c:	460b      	mov	r3, r1
 800bd4e:	4313      	orrs	r3, r2
 800bd50:	d034      	beq.n	800bdbc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800bd52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d003      	beq.n	800bd64 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800bd5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd60:	d007      	beq.n	800bd72 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800bd62:	e011      	b.n	800bd88 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd64:	4b12      	ldr	r3, [pc, #72]	@ (800bdb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bd66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd68:	4a11      	ldr	r2, [pc, #68]	@ (800bdb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bd6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bd6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bd70:	e00e      	b.n	800bd90 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bd72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd76:	3308      	adds	r3, #8
 800bd78:	2102      	movs	r1, #2
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f001 faae 	bl	800d2dc <RCCEx_PLL2_Config>
 800bd80:	4603      	mov	r3, r0
 800bd82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bd86:	e003      	b.n	800bd90 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800bd88:	2301      	movs	r3, #1
 800bd8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bd8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d10d      	bne.n	800bdb4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800bd98:	4b05      	ldr	r3, [pc, #20]	@ (800bdb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bd9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd9c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bda0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bda4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bda6:	4a02      	ldr	r2, [pc, #8]	@ (800bdb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bda8:	430b      	orrs	r3, r1
 800bdaa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800bdac:	e006      	b.n	800bdbc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800bdae:	bf00      	nop
 800bdb0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bdb8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bdbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800bdc8:	663b      	str	r3, [r7, #96]	@ 0x60
 800bdca:	2300      	movs	r3, #0
 800bdcc:	667b      	str	r3, [r7, #100]	@ 0x64
 800bdce:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800bdd2:	460b      	mov	r3, r1
 800bdd4:	4313      	orrs	r3, r2
 800bdd6:	d00c      	beq.n	800bdf2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bdd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bddc:	3328      	adds	r3, #40	@ 0x28
 800bdde:	2102      	movs	r1, #2
 800bde0:	4618      	mov	r0, r3
 800bde2:	f001 fb2d 	bl	800d440 <RCCEx_PLL3_Config>
 800bde6:	4603      	mov	r3, r0
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d002      	beq.n	800bdf2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800bdec:	2301      	movs	r3, #1
 800bdee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bdf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdfa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800bdfe:	65bb      	str	r3, [r7, #88]	@ 0x58
 800be00:	2300      	movs	r3, #0
 800be02:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800be04:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800be08:	460b      	mov	r3, r1
 800be0a:	4313      	orrs	r3, r2
 800be0c:	d036      	beq.n	800be7c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800be0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800be14:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800be18:	d018      	beq.n	800be4c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800be1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800be1e:	d811      	bhi.n	800be44 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800be20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be24:	d014      	beq.n	800be50 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800be26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be2a:	d80b      	bhi.n	800be44 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d011      	beq.n	800be54 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800be30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800be34:	d106      	bne.n	800be44 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be36:	4bb7      	ldr	r3, [pc, #732]	@ (800c114 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800be38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be3a:	4ab6      	ldr	r2, [pc, #728]	@ (800c114 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800be3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800be40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800be42:	e008      	b.n	800be56 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be44:	2301      	movs	r3, #1
 800be46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800be4a:	e004      	b.n	800be56 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800be4c:	bf00      	nop
 800be4e:	e002      	b.n	800be56 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800be50:	bf00      	nop
 800be52:	e000      	b.n	800be56 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800be54:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d10a      	bne.n	800be74 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800be5e:	4bad      	ldr	r3, [pc, #692]	@ (800c114 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800be60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be62:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800be66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be6a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800be6c:	4aa9      	ldr	r2, [pc, #676]	@ (800c114 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800be6e:	430b      	orrs	r3, r1
 800be70:	6553      	str	r3, [r2, #84]	@ 0x54
 800be72:	e003      	b.n	800be7c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800be78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800be7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be84:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800be88:	653b      	str	r3, [r7, #80]	@ 0x50
 800be8a:	2300      	movs	r3, #0
 800be8c:	657b      	str	r3, [r7, #84]	@ 0x54
 800be8e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800be92:	460b      	mov	r3, r1
 800be94:	4313      	orrs	r3, r2
 800be96:	d009      	beq.n	800beac <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800be98:	4b9e      	ldr	r3, [pc, #632]	@ (800c114 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800be9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be9c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bea6:	4a9b      	ldr	r2, [pc, #620]	@ (800c114 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bea8:	430b      	orrs	r3, r1
 800beaa:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800beac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800beb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800beb8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800beba:	2300      	movs	r3, #0
 800bebc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bebe:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800bec2:	460b      	mov	r3, r1
 800bec4:	4313      	orrs	r3, r2
 800bec6:	d009      	beq.n	800bedc <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bec8:	4b92      	ldr	r3, [pc, #584]	@ (800c114 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800beca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800becc:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800bed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bed4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bed6:	4a8f      	ldr	r2, [pc, #572]	@ (800c114 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bed8:	430b      	orrs	r3, r1
 800beda:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bedc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800bee8:	643b      	str	r3, [r7, #64]	@ 0x40
 800beea:	2300      	movs	r3, #0
 800beec:	647b      	str	r3, [r7, #68]	@ 0x44
 800beee:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800bef2:	460b      	mov	r3, r1
 800bef4:	4313      	orrs	r3, r2
 800bef6:	d00e      	beq.n	800bf16 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bef8:	4b86      	ldr	r3, [pc, #536]	@ (800c114 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800befa:	691b      	ldr	r3, [r3, #16]
 800befc:	4a85      	ldr	r2, [pc, #532]	@ (800c114 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800befe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bf02:	6113      	str	r3, [r2, #16]
 800bf04:	4b83      	ldr	r3, [pc, #524]	@ (800c114 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bf06:	6919      	ldr	r1, [r3, #16]
 800bf08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800bf10:	4a80      	ldr	r2, [pc, #512]	@ (800c114 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bf12:	430b      	orrs	r3, r1
 800bf14:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bf16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf1e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800bf22:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bf24:	2300      	movs	r3, #0
 800bf26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bf28:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800bf2c:	460b      	mov	r3, r1
 800bf2e:	4313      	orrs	r3, r2
 800bf30:	d009      	beq.n	800bf46 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bf32:	4b78      	ldr	r3, [pc, #480]	@ (800c114 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bf34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bf36:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800bf3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf40:	4a74      	ldr	r2, [pc, #464]	@ (800c114 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bf42:	430b      	orrs	r3, r1
 800bf44:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bf46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf4e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800bf52:	633b      	str	r3, [r7, #48]	@ 0x30
 800bf54:	2300      	movs	r3, #0
 800bf56:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf58:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800bf5c:	460b      	mov	r3, r1
 800bf5e:	4313      	orrs	r3, r2
 800bf60:	d00a      	beq.n	800bf78 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bf62:	4b6c      	ldr	r3, [pc, #432]	@ (800c114 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bf64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf66:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800bf6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf72:	4a68      	ldr	r2, [pc, #416]	@ (800c114 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bf74:	430b      	orrs	r3, r1
 800bf76:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800bf78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf80:	2100      	movs	r1, #0
 800bf82:	62b9      	str	r1, [r7, #40]	@ 0x28
 800bf84:	f003 0301 	and.w	r3, r3, #1
 800bf88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bf8a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800bf8e:	460b      	mov	r3, r1
 800bf90:	4313      	orrs	r3, r2
 800bf92:	d011      	beq.n	800bfb8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bf94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf98:	3308      	adds	r3, #8
 800bf9a:	2100      	movs	r1, #0
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	f001 f99d 	bl	800d2dc <RCCEx_PLL2_Config>
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800bfa8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d003      	beq.n	800bfb8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfb0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bfb4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800bfb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc0:	2100      	movs	r1, #0
 800bfc2:	6239      	str	r1, [r7, #32]
 800bfc4:	f003 0302 	and.w	r3, r3, #2
 800bfc8:	627b      	str	r3, [r7, #36]	@ 0x24
 800bfca:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800bfce:	460b      	mov	r3, r1
 800bfd0:	4313      	orrs	r3, r2
 800bfd2:	d011      	beq.n	800bff8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bfd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfd8:	3308      	adds	r3, #8
 800bfda:	2101      	movs	r1, #1
 800bfdc:	4618      	mov	r0, r3
 800bfde:	f001 f97d 	bl	800d2dc <RCCEx_PLL2_Config>
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800bfe8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d003      	beq.n	800bff8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bff0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bff4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800bff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c000:	2100      	movs	r1, #0
 800c002:	61b9      	str	r1, [r7, #24]
 800c004:	f003 0304 	and.w	r3, r3, #4
 800c008:	61fb      	str	r3, [r7, #28]
 800c00a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c00e:	460b      	mov	r3, r1
 800c010:	4313      	orrs	r3, r2
 800c012:	d011      	beq.n	800c038 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c014:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c018:	3308      	adds	r3, #8
 800c01a:	2102      	movs	r1, #2
 800c01c:	4618      	mov	r0, r3
 800c01e:	f001 f95d 	bl	800d2dc <RCCEx_PLL2_Config>
 800c022:	4603      	mov	r3, r0
 800c024:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800c028:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d003      	beq.n	800c038 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c030:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c034:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c038:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c040:	2100      	movs	r1, #0
 800c042:	6139      	str	r1, [r7, #16]
 800c044:	f003 0308 	and.w	r3, r3, #8
 800c048:	617b      	str	r3, [r7, #20]
 800c04a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c04e:	460b      	mov	r3, r1
 800c050:	4313      	orrs	r3, r2
 800c052:	d011      	beq.n	800c078 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c054:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c058:	3328      	adds	r3, #40	@ 0x28
 800c05a:	2100      	movs	r1, #0
 800c05c:	4618      	mov	r0, r3
 800c05e:	f001 f9ef 	bl	800d440 <RCCEx_PLL3_Config>
 800c062:	4603      	mov	r3, r0
 800c064:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800c068:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d003      	beq.n	800c078 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c070:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c074:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c080:	2100      	movs	r1, #0
 800c082:	60b9      	str	r1, [r7, #8]
 800c084:	f003 0310 	and.w	r3, r3, #16
 800c088:	60fb      	str	r3, [r7, #12]
 800c08a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c08e:	460b      	mov	r3, r1
 800c090:	4313      	orrs	r3, r2
 800c092:	d011      	beq.n	800c0b8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c094:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c098:	3328      	adds	r3, #40	@ 0x28
 800c09a:	2101      	movs	r1, #1
 800c09c:	4618      	mov	r0, r3
 800c09e:	f001 f9cf 	bl	800d440 <RCCEx_PLL3_Config>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800c0a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d003      	beq.n	800c0b8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c0b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c0b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c0:	2100      	movs	r1, #0
 800c0c2:	6039      	str	r1, [r7, #0]
 800c0c4:	f003 0320 	and.w	r3, r3, #32
 800c0c8:	607b      	str	r3, [r7, #4]
 800c0ca:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c0ce:	460b      	mov	r3, r1
 800c0d0:	4313      	orrs	r3, r2
 800c0d2:	d011      	beq.n	800c0f8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c0d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0d8:	3328      	adds	r3, #40	@ 0x28
 800c0da:	2102      	movs	r1, #2
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f001 f9af 	bl	800d440 <RCCEx_PLL3_Config>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800c0e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d003      	beq.n	800c0f8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c0f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800c0f8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d101      	bne.n	800c104 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800c100:	2300      	movs	r3, #0
 800c102:	e000      	b.n	800c106 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800c104:	2301      	movs	r3, #1
}
 800c106:	4618      	mov	r0, r3
 800c108:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800c10c:	46bd      	mov	sp, r7
 800c10e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c112:	bf00      	nop
 800c114:	58024400 	.word	0x58024400

0800c118 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b090      	sub	sp, #64	@ 0x40
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c122:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c126:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800c12a:	430b      	orrs	r3, r1
 800c12c:	f040 8094 	bne.w	800c258 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c130:	4b9b      	ldr	r3, [pc, #620]	@ (800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c132:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c134:	f003 0307 	and.w	r3, r3, #7
 800c138:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800c13a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c13c:	2b04      	cmp	r3, #4
 800c13e:	f200 8087 	bhi.w	800c250 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c142:	a201      	add	r2, pc, #4	@ (adr r2, 800c148 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c148:	0800c15d 	.word	0x0800c15d
 800c14c:	0800c185 	.word	0x0800c185
 800c150:	0800c1ad 	.word	0x0800c1ad
 800c154:	0800c249 	.word	0x0800c249
 800c158:	0800c1d5 	.word	0x0800c1d5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c15c:	4b90      	ldr	r3, [pc, #576]	@ (800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c164:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c168:	d108      	bne.n	800c17c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c16a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c16e:	4618      	mov	r0, r3
 800c170:	f000 ff62 	bl	800d038 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c176:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c178:	f000 bc93 	b.w	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c17c:	2300      	movs	r3, #0
 800c17e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c180:	f000 bc8f 	b.w	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c184:	4b86      	ldr	r3, [pc, #536]	@ (800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c18c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c190:	d108      	bne.n	800c1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c192:	f107 0318 	add.w	r3, r7, #24
 800c196:	4618      	mov	r0, r3
 800c198:	f000 fca6 	bl	800cae8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c19c:	69bb      	ldr	r3, [r7, #24]
 800c19e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1a0:	f000 bc7f 	b.w	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c1a8:	f000 bc7b 	b.w	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c1ac:	4b7c      	ldr	r3, [pc, #496]	@ (800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c1b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c1b8:	d108      	bne.n	800c1cc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c1ba:	f107 030c 	add.w	r3, r7, #12
 800c1be:	4618      	mov	r0, r3
 800c1c0:	f000 fde6 	bl	800cd90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1c8:	f000 bc6b 	b.w	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c1d0:	f000 bc67 	b.w	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c1d4:	4b72      	ldr	r3, [pc, #456]	@ (800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c1d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c1d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c1dc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c1de:	4b70      	ldr	r3, [pc, #448]	@ (800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	f003 0304 	and.w	r3, r3, #4
 800c1e6:	2b04      	cmp	r3, #4
 800c1e8:	d10c      	bne.n	800c204 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c1ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d109      	bne.n	800c204 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c1f0:	4b6b      	ldr	r3, [pc, #428]	@ (800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	08db      	lsrs	r3, r3, #3
 800c1f6:	f003 0303 	and.w	r3, r3, #3
 800c1fa:	4a6a      	ldr	r2, [pc, #424]	@ (800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800c1fc:	fa22 f303 	lsr.w	r3, r2, r3
 800c200:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c202:	e01f      	b.n	800c244 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c204:	4b66      	ldr	r3, [pc, #408]	@ (800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c20c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c210:	d106      	bne.n	800c220 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c214:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c218:	d102      	bne.n	800c220 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c21a:	4b63      	ldr	r3, [pc, #396]	@ (800c3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800c21c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c21e:	e011      	b.n	800c244 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c220:	4b5f      	ldr	r3, [pc, #380]	@ (800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c228:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c22c:	d106      	bne.n	800c23c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c22e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c230:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c234:	d102      	bne.n	800c23c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c236:	4b5d      	ldr	r3, [pc, #372]	@ (800c3ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c238:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c23a:	e003      	b.n	800c244 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c23c:	2300      	movs	r3, #0
 800c23e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c240:	f000 bc2f 	b.w	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c244:	f000 bc2d 	b.w	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c248:	4b59      	ldr	r3, [pc, #356]	@ (800c3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c24a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c24c:	f000 bc29 	b.w	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c250:	2300      	movs	r3, #0
 800c252:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c254:	f000 bc25 	b.w	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c258:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c25c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800c260:	430b      	orrs	r3, r1
 800c262:	f040 80a7 	bne.w	800c3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c266:	4b4e      	ldr	r3, [pc, #312]	@ (800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c26a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800c26e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800c270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c272:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c276:	d054      	beq.n	800c322 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800c278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c27a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c27e:	f200 808b 	bhi.w	800c398 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c284:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c288:	f000 8083 	beq.w	800c392 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800c28c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c28e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c292:	f200 8081 	bhi.w	800c398 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c298:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c29c:	d02f      	beq.n	800c2fe <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c29e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c2a4:	d878      	bhi.n	800c398 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c2a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d004      	beq.n	800c2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800c2ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c2b2:	d012      	beq.n	800c2da <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800c2b4:	e070      	b.n	800c398 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c2b6:	4b3a      	ldr	r3, [pc, #232]	@ (800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c2be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c2c2:	d107      	bne.n	800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c2c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f000 feb5 	bl	800d038 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c2ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2d2:	e3e6      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c2d8:	e3e3      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c2da:	4b31      	ldr	r3, [pc, #196]	@ (800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c2e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c2e6:	d107      	bne.n	800c2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2e8:	f107 0318 	add.w	r3, r7, #24
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	f000 fbfb 	bl	800cae8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c2f2:	69bb      	ldr	r3, [r7, #24]
 800c2f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2f6:	e3d4      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c2fc:	e3d1      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c2fe:	4b28      	ldr	r3, [pc, #160]	@ (800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c306:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c30a:	d107      	bne.n	800c31c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c30c:	f107 030c 	add.w	r3, r7, #12
 800c310:	4618      	mov	r0, r3
 800c312:	f000 fd3d 	bl	800cd90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c31a:	e3c2      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c31c:	2300      	movs	r3, #0
 800c31e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c320:	e3bf      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c322:	4b1f      	ldr	r3, [pc, #124]	@ (800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c326:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c32a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c32c:	4b1c      	ldr	r3, [pc, #112]	@ (800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	f003 0304 	and.w	r3, r3, #4
 800c334:	2b04      	cmp	r3, #4
 800c336:	d10c      	bne.n	800c352 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800c338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d109      	bne.n	800c352 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c33e:	4b18      	ldr	r3, [pc, #96]	@ (800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	08db      	lsrs	r3, r3, #3
 800c344:	f003 0303 	and.w	r3, r3, #3
 800c348:	4a16      	ldr	r2, [pc, #88]	@ (800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800c34a:	fa22 f303 	lsr.w	r3, r2, r3
 800c34e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c350:	e01e      	b.n	800c390 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c352:	4b13      	ldr	r3, [pc, #76]	@ (800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c35a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c35e:	d106      	bne.n	800c36e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800c360:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c362:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c366:	d102      	bne.n	800c36e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c368:	4b0f      	ldr	r3, [pc, #60]	@ (800c3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800c36a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c36c:	e010      	b.n	800c390 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c36e:	4b0c      	ldr	r3, [pc, #48]	@ (800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c376:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c37a:	d106      	bne.n	800c38a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800c37c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c37e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c382:	d102      	bne.n	800c38a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c384:	4b09      	ldr	r3, [pc, #36]	@ (800c3ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c386:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c388:	e002      	b.n	800c390 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c38a:	2300      	movs	r3, #0
 800c38c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c38e:	e388      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c390:	e387      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c392:	4b07      	ldr	r3, [pc, #28]	@ (800c3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c394:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c396:	e384      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c398:	2300      	movs	r3, #0
 800c39a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c39c:	e381      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c39e:	bf00      	nop
 800c3a0:	58024400 	.word	0x58024400
 800c3a4:	03d09000 	.word	0x03d09000
 800c3a8:	003d0900 	.word	0x003d0900
 800c3ac:	016e3600 	.word	0x016e3600
 800c3b0:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c3b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3b8:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800c3bc:	430b      	orrs	r3, r1
 800c3be:	f040 809c 	bne.w	800c4fa <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c3c2:	4b9e      	ldr	r3, [pc, #632]	@ (800c63c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c3c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c3c6:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800c3ca:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800c3cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3ce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c3d2:	d054      	beq.n	800c47e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800c3d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3d6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c3da:	f200 808b 	bhi.w	800c4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c3de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3e0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c3e4:	f000 8083 	beq.w	800c4ee <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800c3e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3ea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c3ee:	f200 8081 	bhi.w	800c4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c3f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c3f8:	d02f      	beq.n	800c45a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800c3fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c400:	d878      	bhi.n	800c4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c404:	2b00      	cmp	r3, #0
 800c406:	d004      	beq.n	800c412 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800c408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c40a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c40e:	d012      	beq.n	800c436 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800c410:	e070      	b.n	800c4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c412:	4b8a      	ldr	r3, [pc, #552]	@ (800c63c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c41a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c41e:	d107      	bne.n	800c430 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c420:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c424:	4618      	mov	r0, r3
 800c426:	f000 fe07 	bl	800d038 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c42a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c42c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c42e:	e338      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c430:	2300      	movs	r3, #0
 800c432:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c434:	e335      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c436:	4b81      	ldr	r3, [pc, #516]	@ (800c63c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c43e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c442:	d107      	bne.n	800c454 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c444:	f107 0318 	add.w	r3, r7, #24
 800c448:	4618      	mov	r0, r3
 800c44a:	f000 fb4d 	bl	800cae8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c44e:	69bb      	ldr	r3, [r7, #24]
 800c450:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c452:	e326      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c454:	2300      	movs	r3, #0
 800c456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c458:	e323      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c45a:	4b78      	ldr	r3, [pc, #480]	@ (800c63c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c462:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c466:	d107      	bne.n	800c478 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c468:	f107 030c 	add.w	r3, r7, #12
 800c46c:	4618      	mov	r0, r3
 800c46e:	f000 fc8f 	bl	800cd90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c476:	e314      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c478:	2300      	movs	r3, #0
 800c47a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c47c:	e311      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c47e:	4b6f      	ldr	r3, [pc, #444]	@ (800c63c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c482:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c486:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c488:	4b6c      	ldr	r3, [pc, #432]	@ (800c63c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	f003 0304 	and.w	r3, r3, #4
 800c490:	2b04      	cmp	r3, #4
 800c492:	d10c      	bne.n	800c4ae <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800c494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c496:	2b00      	cmp	r3, #0
 800c498:	d109      	bne.n	800c4ae <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c49a:	4b68      	ldr	r3, [pc, #416]	@ (800c63c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	08db      	lsrs	r3, r3, #3
 800c4a0:	f003 0303 	and.w	r3, r3, #3
 800c4a4:	4a66      	ldr	r2, [pc, #408]	@ (800c640 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800c4a6:	fa22 f303 	lsr.w	r3, r2, r3
 800c4aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c4ac:	e01e      	b.n	800c4ec <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c4ae:	4b63      	ldr	r3, [pc, #396]	@ (800c63c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c4b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c4ba:	d106      	bne.n	800c4ca <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800c4bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c4c2:	d102      	bne.n	800c4ca <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c4c4:	4b5f      	ldr	r3, [pc, #380]	@ (800c644 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800c4c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c4c8:	e010      	b.n	800c4ec <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c4ca:	4b5c      	ldr	r3, [pc, #368]	@ (800c63c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c4d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c4d6:	d106      	bne.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800c4d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c4de:	d102      	bne.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c4e0:	4b59      	ldr	r3, [pc, #356]	@ (800c648 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c4e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c4e4:	e002      	b.n	800c4ec <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c4ea:	e2da      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c4ec:	e2d9      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c4ee:	4b57      	ldr	r3, [pc, #348]	@ (800c64c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c4f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c4f2:	e2d6      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c4f8:	e2d3      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c4fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4fe:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800c502:	430b      	orrs	r3, r1
 800c504:	f040 80a7 	bne.w	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c508:	4b4c      	ldr	r3, [pc, #304]	@ (800c63c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c50a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c50c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800c510:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c514:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c518:	d055      	beq.n	800c5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800c51a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c51c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c520:	f200 8096 	bhi.w	800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c526:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c52a:	f000 8084 	beq.w	800c636 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800c52e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c530:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c534:	f200 808c 	bhi.w	800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c53a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c53e:	d030      	beq.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800c540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c542:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c546:	f200 8083 	bhi.w	800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c54a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d004      	beq.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800c550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c552:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c556:	d012      	beq.n	800c57e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800c558:	e07a      	b.n	800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c55a:	4b38      	ldr	r3, [pc, #224]	@ (800c63c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c562:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c566:	d107      	bne.n	800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c568:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c56c:	4618      	mov	r0, r3
 800c56e:	f000 fd63 	bl	800d038 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c574:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c576:	e294      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c578:	2300      	movs	r3, #0
 800c57a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c57c:	e291      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c57e:	4b2f      	ldr	r3, [pc, #188]	@ (800c63c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c586:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c58a:	d107      	bne.n	800c59c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c58c:	f107 0318 	add.w	r3, r7, #24
 800c590:	4618      	mov	r0, r3
 800c592:	f000 faa9 	bl	800cae8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c596:	69bb      	ldr	r3, [r7, #24]
 800c598:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c59a:	e282      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c59c:	2300      	movs	r3, #0
 800c59e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c5a0:	e27f      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c5a2:	4b26      	ldr	r3, [pc, #152]	@ (800c63c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c5aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c5ae:	d107      	bne.n	800c5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5b0:	f107 030c 	add.w	r3, r7, #12
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	f000 fbeb 	bl	800cd90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5be:	e270      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c5c4:	e26d      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c5c6:	4b1d      	ldr	r3, [pc, #116]	@ (800c63c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c5c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c5ca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c5ce:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c5d0:	4b1a      	ldr	r3, [pc, #104]	@ (800c63c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	f003 0304 	and.w	r3, r3, #4
 800c5d8:	2b04      	cmp	r3, #4
 800c5da:	d10c      	bne.n	800c5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800c5dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d109      	bne.n	800c5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c5e2:	4b16      	ldr	r3, [pc, #88]	@ (800c63c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	08db      	lsrs	r3, r3, #3
 800c5e8:	f003 0303 	and.w	r3, r3, #3
 800c5ec:	4a14      	ldr	r2, [pc, #80]	@ (800c640 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800c5ee:	fa22 f303 	lsr.w	r3, r2, r3
 800c5f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c5f4:	e01e      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c5f6:	4b11      	ldr	r3, [pc, #68]	@ (800c63c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c5fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c602:	d106      	bne.n	800c612 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800c604:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c606:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c60a:	d102      	bne.n	800c612 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c60c:	4b0d      	ldr	r3, [pc, #52]	@ (800c644 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800c60e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c610:	e010      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c612:	4b0a      	ldr	r3, [pc, #40]	@ (800c63c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c61a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c61e:	d106      	bne.n	800c62e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800c620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c622:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c626:	d102      	bne.n	800c62e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c628:	4b07      	ldr	r3, [pc, #28]	@ (800c648 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c62a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c62c:	e002      	b.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c62e:	2300      	movs	r3, #0
 800c630:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c632:	e236      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c634:	e235      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c636:	4b05      	ldr	r3, [pc, #20]	@ (800c64c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c638:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c63a:	e232      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c63c:	58024400 	.word	0x58024400
 800c640:	03d09000 	.word	0x03d09000
 800c644:	003d0900 	.word	0x003d0900
 800c648:	016e3600 	.word	0x016e3600
 800c64c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800c650:	2300      	movs	r3, #0
 800c652:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c654:	e225      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c656:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c65a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800c65e:	430b      	orrs	r3, r1
 800c660:	f040 8085 	bne.w	800c76e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c664:	4b9c      	ldr	r3, [pc, #624]	@ (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c666:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c668:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800c66c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800c66e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c670:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c674:	d06b      	beq.n	800c74e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800c676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c678:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c67c:	d874      	bhi.n	800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c67e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c680:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c684:	d056      	beq.n	800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800c686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c688:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c68c:	d86c      	bhi.n	800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c68e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c690:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c694:	d03b      	beq.n	800c70e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800c696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c698:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c69c:	d864      	bhi.n	800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c69e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c6a4:	d021      	beq.n	800c6ea <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800c6a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c6ac:	d85c      	bhi.n	800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c6ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d004      	beq.n	800c6be <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800c6b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c6ba:	d004      	beq.n	800c6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800c6bc:	e054      	b.n	800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c6be:	f7fe fb5f 	bl	800ad80 <HAL_RCC_GetPCLK1Freq>
 800c6c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c6c4:	e1ed      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c6c6:	4b84      	ldr	r3, [pc, #528]	@ (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c6ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c6d2:	d107      	bne.n	800c6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6d4:	f107 0318 	add.w	r3, r7, #24
 800c6d8:	4618      	mov	r0, r3
 800c6da:	f000 fa05 	bl	800cae8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c6de:	69fb      	ldr	r3, [r7, #28]
 800c6e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6e2:	e1de      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c6e8:	e1db      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c6ea:	4b7b      	ldr	r3, [pc, #492]	@ (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c6f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c6f6:	d107      	bne.n	800c708 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6f8:	f107 030c 	add.w	r3, r7, #12
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	f000 fb47 	bl	800cd90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c702:	693b      	ldr	r3, [r7, #16]
 800c704:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c706:	e1cc      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c708:	2300      	movs	r3, #0
 800c70a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c70c:	e1c9      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c70e:	4b72      	ldr	r3, [pc, #456]	@ (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	f003 0304 	and.w	r3, r3, #4
 800c716:	2b04      	cmp	r3, #4
 800c718:	d109      	bne.n	800c72e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c71a:	4b6f      	ldr	r3, [pc, #444]	@ (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	08db      	lsrs	r3, r3, #3
 800c720:	f003 0303 	and.w	r3, r3, #3
 800c724:	4a6d      	ldr	r2, [pc, #436]	@ (800c8dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c726:	fa22 f303 	lsr.w	r3, r2, r3
 800c72a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c72c:	e1b9      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c72e:	2300      	movs	r3, #0
 800c730:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c732:	e1b6      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c734:	4b68      	ldr	r3, [pc, #416]	@ (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c73c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c740:	d102      	bne.n	800c748 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800c742:	4b67      	ldr	r3, [pc, #412]	@ (800c8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c744:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c746:	e1ac      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c748:	2300      	movs	r3, #0
 800c74a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c74c:	e1a9      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c74e:	4b62      	ldr	r3, [pc, #392]	@ (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c756:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c75a:	d102      	bne.n	800c762 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800c75c:	4b61      	ldr	r3, [pc, #388]	@ (800c8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c75e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c760:	e19f      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c762:	2300      	movs	r3, #0
 800c764:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c766:	e19c      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c768:	2300      	movs	r3, #0
 800c76a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c76c:	e199      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c76e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c772:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800c776:	430b      	orrs	r3, r1
 800c778:	d173      	bne.n	800c862 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c77a:	4b57      	ldr	r3, [pc, #348]	@ (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c77c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c77e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c782:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c786:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c78a:	d02f      	beq.n	800c7ec <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800c78c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c78e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c792:	d863      	bhi.n	800c85c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800c794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c796:	2b00      	cmp	r3, #0
 800c798:	d004      	beq.n	800c7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800c79a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c79c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c7a0:	d012      	beq.n	800c7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800c7a2:	e05b      	b.n	800c85c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c7a4:	4b4c      	ldr	r3, [pc, #304]	@ (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c7ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c7b0:	d107      	bne.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7b2:	f107 0318 	add.w	r3, r7, #24
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	f000 f996 	bl	800cae8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c7bc:	69bb      	ldr	r3, [r7, #24]
 800c7be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7c0:	e16f      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c7c6:	e16c      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c7c8:	4b43      	ldr	r3, [pc, #268]	@ (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c7d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c7d4:	d107      	bne.n	800c7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c7d6:	f107 030c 	add.w	r3, r7, #12
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f000 fad8 	bl	800cd90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c7e0:	697b      	ldr	r3, [r7, #20]
 800c7e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7e4:	e15d      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c7ea:	e15a      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c7ec:	4b3a      	ldr	r3, [pc, #232]	@ (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c7ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c7f0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c7f4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c7f6:	4b38      	ldr	r3, [pc, #224]	@ (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	f003 0304 	and.w	r3, r3, #4
 800c7fe:	2b04      	cmp	r3, #4
 800c800:	d10c      	bne.n	800c81c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800c802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c804:	2b00      	cmp	r3, #0
 800c806:	d109      	bne.n	800c81c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c808:	4b33      	ldr	r3, [pc, #204]	@ (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	08db      	lsrs	r3, r3, #3
 800c80e:	f003 0303 	and.w	r3, r3, #3
 800c812:	4a32      	ldr	r2, [pc, #200]	@ (800c8dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c814:	fa22 f303 	lsr.w	r3, r2, r3
 800c818:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c81a:	e01e      	b.n	800c85a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c81c:	4b2e      	ldr	r3, [pc, #184]	@ (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c824:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c828:	d106      	bne.n	800c838 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800c82a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c82c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c830:	d102      	bne.n	800c838 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c832:	4b2b      	ldr	r3, [pc, #172]	@ (800c8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c834:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c836:	e010      	b.n	800c85a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c838:	4b27      	ldr	r3, [pc, #156]	@ (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c840:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c844:	d106      	bne.n	800c854 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800c846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c848:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c84c:	d102      	bne.n	800c854 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c84e:	4b25      	ldr	r3, [pc, #148]	@ (800c8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c850:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c852:	e002      	b.n	800c85a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c854:	2300      	movs	r3, #0
 800c856:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c858:	e123      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c85a:	e122      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c85c:	2300      	movs	r3, #0
 800c85e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c860:	e11f      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c862:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c866:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800c86a:	430b      	orrs	r3, r1
 800c86c:	d13c      	bne.n	800c8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c86e:	4b1a      	ldr	r3, [pc, #104]	@ (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c872:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c876:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d004      	beq.n	800c888 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800c87e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c880:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c884:	d012      	beq.n	800c8ac <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800c886:	e023      	b.n	800c8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c888:	4b13      	ldr	r3, [pc, #76]	@ (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c890:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c894:	d107      	bne.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c896:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c89a:	4618      	mov	r0, r3
 800c89c:	f000 fbcc 	bl	800d038 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c8a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8a4:	e0fd      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c8aa:	e0fa      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c8ac:	4b0a      	ldr	r3, [pc, #40]	@ (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c8b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c8b8:	d107      	bne.n	800c8ca <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c8ba:	f107 0318 	add.w	r3, r7, #24
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f000 f912 	bl	800cae8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c8c4:	6a3b      	ldr	r3, [r7, #32]
 800c8c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8c8:	e0eb      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c8ce:	e0e8      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c8d4:	e0e5      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c8d6:	bf00      	nop
 800c8d8:	58024400 	.word	0x58024400
 800c8dc:	03d09000 	.word	0x03d09000
 800c8e0:	003d0900 	.word	0x003d0900
 800c8e4:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c8e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8ec:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800c8f0:	430b      	orrs	r3, r1
 800c8f2:	f040 8085 	bne.w	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c8f6:	4b6d      	ldr	r3, [pc, #436]	@ (800caac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c8f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c8fa:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800c8fe:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c902:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c906:	d06b      	beq.n	800c9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800c908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c90a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c90e:	d874      	bhi.n	800c9fa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c912:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c916:	d056      	beq.n	800c9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800c918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c91a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c91e:	d86c      	bhi.n	800c9fa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c922:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c926:	d03b      	beq.n	800c9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800c928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c92a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c92e:	d864      	bhi.n	800c9fa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c932:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c936:	d021      	beq.n	800c97c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800c938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c93a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c93e:	d85c      	bhi.n	800c9fa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c942:	2b00      	cmp	r3, #0
 800c944:	d004      	beq.n	800c950 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800c946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c948:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c94c:	d004      	beq.n	800c958 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800c94e:	e054      	b.n	800c9fa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c950:	f000 f8b4 	bl	800cabc <HAL_RCCEx_GetD3PCLK1Freq>
 800c954:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c956:	e0a4      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c958:	4b54      	ldr	r3, [pc, #336]	@ (800caac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c960:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c964:	d107      	bne.n	800c976 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c966:	f107 0318 	add.w	r3, r7, #24
 800c96a:	4618      	mov	r0, r3
 800c96c:	f000 f8bc 	bl	800cae8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c970:	69fb      	ldr	r3, [r7, #28]
 800c972:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c974:	e095      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c976:	2300      	movs	r3, #0
 800c978:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c97a:	e092      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c97c:	4b4b      	ldr	r3, [pc, #300]	@ (800caac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c984:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c988:	d107      	bne.n	800c99a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c98a:	f107 030c 	add.w	r3, r7, #12
 800c98e:	4618      	mov	r0, r3
 800c990:	f000 f9fe 	bl	800cd90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c994:	693b      	ldr	r3, [r7, #16]
 800c996:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c998:	e083      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c99a:	2300      	movs	r3, #0
 800c99c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c99e:	e080      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c9a0:	4b42      	ldr	r3, [pc, #264]	@ (800caac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	f003 0304 	and.w	r3, r3, #4
 800c9a8:	2b04      	cmp	r3, #4
 800c9aa:	d109      	bne.n	800c9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c9ac:	4b3f      	ldr	r3, [pc, #252]	@ (800caac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	08db      	lsrs	r3, r3, #3
 800c9b2:	f003 0303 	and.w	r3, r3, #3
 800c9b6:	4a3e      	ldr	r2, [pc, #248]	@ (800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800c9b8:	fa22 f303 	lsr.w	r3, r2, r3
 800c9bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9be:	e070      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9c4:	e06d      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c9c6:	4b39      	ldr	r3, [pc, #228]	@ (800caac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c9ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c9d2:	d102      	bne.n	800c9da <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800c9d4:	4b37      	ldr	r3, [pc, #220]	@ (800cab4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c9d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9d8:	e063      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c9da:	2300      	movs	r3, #0
 800c9dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9de:	e060      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c9e0:	4b32      	ldr	r3, [pc, #200]	@ (800caac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c9e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c9ec:	d102      	bne.n	800c9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800c9ee:	4b32      	ldr	r3, [pc, #200]	@ (800cab8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c9f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9f2:	e056      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9f8:	e053      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9fe:	e050      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ca00:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca04:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800ca08:	430b      	orrs	r3, r1
 800ca0a:	d148      	bne.n	800ca9e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ca0c:	4b27      	ldr	r3, [pc, #156]	@ (800caac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ca0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca10:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ca14:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ca16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ca1c:	d02a      	beq.n	800ca74 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800ca1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ca24:	d838      	bhi.n	800ca98 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800ca26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d004      	beq.n	800ca36 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800ca2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ca32:	d00d      	beq.n	800ca50 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800ca34:	e030      	b.n	800ca98 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ca36:	4b1d      	ldr	r3, [pc, #116]	@ (800caac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ca3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ca42:	d102      	bne.n	800ca4a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800ca44:	4b1c      	ldr	r3, [pc, #112]	@ (800cab8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800ca46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca48:	e02b      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca4e:	e028      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ca50:	4b16      	ldr	r3, [pc, #88]	@ (800caac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ca58:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ca5c:	d107      	bne.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ca5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ca62:	4618      	mov	r0, r3
 800ca64:	f000 fae8 	bl	800d038 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ca68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca6c:	e019      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ca6e:	2300      	movs	r3, #0
 800ca70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca72:	e016      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ca74:	4b0d      	ldr	r3, [pc, #52]	@ (800caac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ca7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ca80:	d107      	bne.n	800ca92 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca82:	f107 0318 	add.w	r3, r7, #24
 800ca86:	4618      	mov	r0, r3
 800ca88:	f000 f82e 	bl	800cae8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ca8c:	69fb      	ldr	r3, [r7, #28]
 800ca8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca90:	e007      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ca92:	2300      	movs	r3, #0
 800ca94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca96:	e004      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800ca98:	2300      	movs	r3, #0
 800ca9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca9c:	e001      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800ca9e:	2300      	movs	r3, #0
 800caa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800caa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800caa4:	4618      	mov	r0, r3
 800caa6:	3740      	adds	r7, #64	@ 0x40
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd80      	pop	{r7, pc}
 800caac:	58024400 	.word	0x58024400
 800cab0:	03d09000 	.word	0x03d09000
 800cab4:	003d0900 	.word	0x003d0900
 800cab8:	016e3600 	.word	0x016e3600

0800cabc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800cac0:	f7fe f92e 	bl	800ad20 <HAL_RCC_GetHCLKFreq>
 800cac4:	4602      	mov	r2, r0
 800cac6:	4b06      	ldr	r3, [pc, #24]	@ (800cae0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800cac8:	6a1b      	ldr	r3, [r3, #32]
 800caca:	091b      	lsrs	r3, r3, #4
 800cacc:	f003 0307 	and.w	r3, r3, #7
 800cad0:	4904      	ldr	r1, [pc, #16]	@ (800cae4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800cad2:	5ccb      	ldrb	r3, [r1, r3]
 800cad4:	f003 031f 	and.w	r3, r3, #31
 800cad8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800cadc:	4618      	mov	r0, r3
 800cade:	bd80      	pop	{r7, pc}
 800cae0:	58024400 	.word	0x58024400
 800cae4:	0801497c 	.word	0x0801497c

0800cae8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800cae8:	b480      	push	{r7}
 800caea:	b089      	sub	sp, #36	@ 0x24
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800caf0:	4ba1      	ldr	r3, [pc, #644]	@ (800cd78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800caf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800caf4:	f003 0303 	and.w	r3, r3, #3
 800caf8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800cafa:	4b9f      	ldr	r3, [pc, #636]	@ (800cd78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cafc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cafe:	0b1b      	lsrs	r3, r3, #12
 800cb00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cb04:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800cb06:	4b9c      	ldr	r3, [pc, #624]	@ (800cd78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb0a:	091b      	lsrs	r3, r3, #4
 800cb0c:	f003 0301 	and.w	r3, r3, #1
 800cb10:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800cb12:	4b99      	ldr	r3, [pc, #612]	@ (800cd78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb16:	08db      	lsrs	r3, r3, #3
 800cb18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cb1c:	693a      	ldr	r2, [r7, #16]
 800cb1e:	fb02 f303 	mul.w	r3, r2, r3
 800cb22:	ee07 3a90 	vmov	s15, r3
 800cb26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb2a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800cb2e:	697b      	ldr	r3, [r7, #20]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	f000 8111 	beq.w	800cd58 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800cb36:	69bb      	ldr	r3, [r7, #24]
 800cb38:	2b02      	cmp	r3, #2
 800cb3a:	f000 8083 	beq.w	800cc44 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800cb3e:	69bb      	ldr	r3, [r7, #24]
 800cb40:	2b02      	cmp	r3, #2
 800cb42:	f200 80a1 	bhi.w	800cc88 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800cb46:	69bb      	ldr	r3, [r7, #24]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d003      	beq.n	800cb54 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800cb4c:	69bb      	ldr	r3, [r7, #24]
 800cb4e:	2b01      	cmp	r3, #1
 800cb50:	d056      	beq.n	800cc00 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800cb52:	e099      	b.n	800cc88 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cb54:	4b88      	ldr	r3, [pc, #544]	@ (800cd78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	f003 0320 	and.w	r3, r3, #32
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d02d      	beq.n	800cbbc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb60:	4b85      	ldr	r3, [pc, #532]	@ (800cd78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	08db      	lsrs	r3, r3, #3
 800cb66:	f003 0303 	and.w	r3, r3, #3
 800cb6a:	4a84      	ldr	r2, [pc, #528]	@ (800cd7c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800cb6c:	fa22 f303 	lsr.w	r3, r2, r3
 800cb70:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cb72:	68bb      	ldr	r3, [r7, #8]
 800cb74:	ee07 3a90 	vmov	s15, r3
 800cb78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb7c:	697b      	ldr	r3, [r7, #20]
 800cb7e:	ee07 3a90 	vmov	s15, r3
 800cb82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb8a:	4b7b      	ldr	r3, [pc, #492]	@ (800cd78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb92:	ee07 3a90 	vmov	s15, r3
 800cb96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb9a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb9e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800cd80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cbae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbb6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cbba:	e087      	b.n	800cccc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cbbc:	697b      	ldr	r3, [r7, #20]
 800cbbe:	ee07 3a90 	vmov	s15, r3
 800cbc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbc6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800cd84 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800cbca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbce:	4b6a      	ldr	r3, [pc, #424]	@ (800cd78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cbd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbd6:	ee07 3a90 	vmov	s15, r3
 800cbda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbde:	ed97 6a03 	vldr	s12, [r7, #12]
 800cbe2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800cd80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cbe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cbf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cbfe:	e065      	b.n	800cccc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cc00:	697b      	ldr	r3, [r7, #20]
 800cc02:	ee07 3a90 	vmov	s15, r3
 800cc06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc0a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800cd88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cc0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc12:	4b59      	ldr	r3, [pc, #356]	@ (800cd78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc1a:	ee07 3a90 	vmov	s15, r3
 800cc1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc22:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc26:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800cd80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cc2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cc36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc42:	e043      	b.n	800cccc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cc44:	697b      	ldr	r3, [r7, #20]
 800cc46:	ee07 3a90 	vmov	s15, r3
 800cc4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc4e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800cd8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800cc52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc56:	4b48      	ldr	r3, [pc, #288]	@ (800cd78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc5e:	ee07 3a90 	vmov	s15, r3
 800cc62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc66:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc6a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800cd80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cc6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cc7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc86:	e021      	b.n	800cccc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cc88:	697b      	ldr	r3, [r7, #20]
 800cc8a:	ee07 3a90 	vmov	s15, r3
 800cc8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc92:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800cd88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cc96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc9a:	4b37      	ldr	r3, [pc, #220]	@ (800cd78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cca2:	ee07 3a90 	vmov	s15, r3
 800cca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccaa:	ed97 6a03 	vldr	s12, [r7, #12]
 800ccae:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800cd80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ccb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ccb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ccba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ccbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ccc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ccca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800cccc:	4b2a      	ldr	r3, [pc, #168]	@ (800cd78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ccce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccd0:	0a5b      	lsrs	r3, r3, #9
 800ccd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ccd6:	ee07 3a90 	vmov	s15, r3
 800ccda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccde:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cce2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cce6:	edd7 6a07 	vldr	s13, [r7, #28]
 800ccea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ccee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccf2:	ee17 2a90 	vmov	r2, s15
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ccfa:	4b1f      	ldr	r3, [pc, #124]	@ (800cd78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ccfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccfe:	0c1b      	lsrs	r3, r3, #16
 800cd00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cd04:	ee07 3a90 	vmov	s15, r3
 800cd08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd0c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cd10:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd14:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd20:	ee17 2a90 	vmov	r2, s15
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800cd28:	4b13      	ldr	r3, [pc, #76]	@ (800cd78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd2c:	0e1b      	lsrs	r3, r3, #24
 800cd2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cd32:	ee07 3a90 	vmov	s15, r3
 800cd36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cd3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd42:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd4e:	ee17 2a90 	vmov	r2, s15
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cd56:	e008      	b.n	800cd6a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	2200      	movs	r2, #0
 800cd62:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2200      	movs	r2, #0
 800cd68:	609a      	str	r2, [r3, #8]
}
 800cd6a:	bf00      	nop
 800cd6c:	3724      	adds	r7, #36	@ 0x24
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd74:	4770      	bx	lr
 800cd76:	bf00      	nop
 800cd78:	58024400 	.word	0x58024400
 800cd7c:	03d09000 	.word	0x03d09000
 800cd80:	46000000 	.word	0x46000000
 800cd84:	4c742400 	.word	0x4c742400
 800cd88:	4a742400 	.word	0x4a742400
 800cd8c:	4bb71b00 	.word	0x4bb71b00

0800cd90 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800cd90:	b480      	push	{r7}
 800cd92:	b089      	sub	sp, #36	@ 0x24
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cd98:	4ba1      	ldr	r3, [pc, #644]	@ (800d020 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd9c:	f003 0303 	and.w	r3, r3, #3
 800cda0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800cda2:	4b9f      	ldr	r3, [pc, #636]	@ (800d020 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cda4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cda6:	0d1b      	lsrs	r3, r3, #20
 800cda8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cdac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cdae:	4b9c      	ldr	r3, [pc, #624]	@ (800d020 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cdb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdb2:	0a1b      	lsrs	r3, r3, #8
 800cdb4:	f003 0301 	and.w	r3, r3, #1
 800cdb8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800cdba:	4b99      	ldr	r3, [pc, #612]	@ (800d020 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cdbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cdbe:	08db      	lsrs	r3, r3, #3
 800cdc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cdc4:	693a      	ldr	r2, [r7, #16]
 800cdc6:	fb02 f303 	mul.w	r3, r2, r3
 800cdca:	ee07 3a90 	vmov	s15, r3
 800cdce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdd2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800cdd6:	697b      	ldr	r3, [r7, #20]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	f000 8111 	beq.w	800d000 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800cdde:	69bb      	ldr	r3, [r7, #24]
 800cde0:	2b02      	cmp	r3, #2
 800cde2:	f000 8083 	beq.w	800ceec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800cde6:	69bb      	ldr	r3, [r7, #24]
 800cde8:	2b02      	cmp	r3, #2
 800cdea:	f200 80a1 	bhi.w	800cf30 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800cdee:	69bb      	ldr	r3, [r7, #24]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d003      	beq.n	800cdfc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800cdf4:	69bb      	ldr	r3, [r7, #24]
 800cdf6:	2b01      	cmp	r3, #1
 800cdf8:	d056      	beq.n	800cea8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800cdfa:	e099      	b.n	800cf30 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cdfc:	4b88      	ldr	r3, [pc, #544]	@ (800d020 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	f003 0320 	and.w	r3, r3, #32
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d02d      	beq.n	800ce64 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ce08:	4b85      	ldr	r3, [pc, #532]	@ (800d020 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	08db      	lsrs	r3, r3, #3
 800ce0e:	f003 0303 	and.w	r3, r3, #3
 800ce12:	4a84      	ldr	r2, [pc, #528]	@ (800d024 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ce14:	fa22 f303 	lsr.w	r3, r2, r3
 800ce18:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ce1a:	68bb      	ldr	r3, [r7, #8]
 800ce1c:	ee07 3a90 	vmov	s15, r3
 800ce20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce24:	697b      	ldr	r3, [r7, #20]
 800ce26:	ee07 3a90 	vmov	s15, r3
 800ce2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce32:	4b7b      	ldr	r3, [pc, #492]	@ (800d020 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce3a:	ee07 3a90 	vmov	s15, r3
 800ce3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce42:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce46:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800d028 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ce4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ce56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce5e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ce62:	e087      	b.n	800cf74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ce64:	697b      	ldr	r3, [r7, #20]
 800ce66:	ee07 3a90 	vmov	s15, r3
 800ce6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce6e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800d02c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ce72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce76:	4b6a      	ldr	r3, [pc, #424]	@ (800d020 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce7e:	ee07 3a90 	vmov	s15, r3
 800ce82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce86:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce8a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800d028 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ce8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ce9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cea2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cea6:	e065      	b.n	800cf74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cea8:	697b      	ldr	r3, [r7, #20]
 800ceaa:	ee07 3a90 	vmov	s15, r3
 800ceae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ceb2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800d030 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ceb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ceba:	4b59      	ldr	r3, [pc, #356]	@ (800d020 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cec2:	ee07 3a90 	vmov	s15, r3
 800cec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ceca:	ed97 6a03 	vldr	s12, [r7, #12]
 800cece:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800d028 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ced2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ced6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ceda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cee6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ceea:	e043      	b.n	800cf74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ceec:	697b      	ldr	r3, [r7, #20]
 800ceee:	ee07 3a90 	vmov	s15, r3
 800cef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cef6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800d034 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800cefa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cefe:	4b48      	ldr	r3, [pc, #288]	@ (800d020 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf06:	ee07 3a90 	vmov	s15, r3
 800cf0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf12:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800d028 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cf16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cf22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf2e:	e021      	b.n	800cf74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cf30:	697b      	ldr	r3, [r7, #20]
 800cf32:	ee07 3a90 	vmov	s15, r3
 800cf36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf3a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800d030 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cf3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf42:	4b37      	ldr	r3, [pc, #220]	@ (800d020 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf4a:	ee07 3a90 	vmov	s15, r3
 800cf4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf52:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf56:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800d028 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cf5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cf66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf72:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800cf74:	4b2a      	ldr	r3, [pc, #168]	@ (800d020 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf78:	0a5b      	lsrs	r3, r3, #9
 800cf7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cf7e:	ee07 3a90 	vmov	s15, r3
 800cf82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cf8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cf8e:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf9a:	ee17 2a90 	vmov	r2, s15
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800cfa2:	4b1f      	ldr	r3, [pc, #124]	@ (800d020 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cfa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cfa6:	0c1b      	lsrs	r3, r3, #16
 800cfa8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cfac:	ee07 3a90 	vmov	s15, r3
 800cfb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfb4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cfb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cfbc:	edd7 6a07 	vldr	s13, [r7, #28]
 800cfc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cfc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cfc8:	ee17 2a90 	vmov	r2, s15
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800cfd0:	4b13      	ldr	r3, [pc, #76]	@ (800d020 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cfd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cfd4:	0e1b      	lsrs	r3, r3, #24
 800cfd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cfda:	ee07 3a90 	vmov	s15, r3
 800cfde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfe2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cfe6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cfea:	edd7 6a07 	vldr	s13, [r7, #28]
 800cfee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cff2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cff6:	ee17 2a90 	vmov	r2, s15
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cffe:	e008      	b.n	800d012 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2200      	movs	r2, #0
 800d004:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	2200      	movs	r2, #0
 800d00a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2200      	movs	r2, #0
 800d010:	609a      	str	r2, [r3, #8]
}
 800d012:	bf00      	nop
 800d014:	3724      	adds	r7, #36	@ 0x24
 800d016:	46bd      	mov	sp, r7
 800d018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01c:	4770      	bx	lr
 800d01e:	bf00      	nop
 800d020:	58024400 	.word	0x58024400
 800d024:	03d09000 	.word	0x03d09000
 800d028:	46000000 	.word	0x46000000
 800d02c:	4c742400 	.word	0x4c742400
 800d030:	4a742400 	.word	0x4a742400
 800d034:	4bb71b00 	.word	0x4bb71b00

0800d038 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d038:	b480      	push	{r7}
 800d03a:	b089      	sub	sp, #36	@ 0x24
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d040:	4ba0      	ldr	r3, [pc, #640]	@ (800d2c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d044:	f003 0303 	and.w	r3, r3, #3
 800d048:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d04a:	4b9e      	ldr	r3, [pc, #632]	@ (800d2c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d04c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d04e:	091b      	lsrs	r3, r3, #4
 800d050:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d054:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d056:	4b9b      	ldr	r3, [pc, #620]	@ (800d2c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d05a:	f003 0301 	and.w	r3, r3, #1
 800d05e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d060:	4b98      	ldr	r3, [pc, #608]	@ (800d2c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d062:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d064:	08db      	lsrs	r3, r3, #3
 800d066:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d06a:	693a      	ldr	r2, [r7, #16]
 800d06c:	fb02 f303 	mul.w	r3, r2, r3
 800d070:	ee07 3a90 	vmov	s15, r3
 800d074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d078:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d07c:	697b      	ldr	r3, [r7, #20]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	f000 8111 	beq.w	800d2a6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d084:	69bb      	ldr	r3, [r7, #24]
 800d086:	2b02      	cmp	r3, #2
 800d088:	f000 8083 	beq.w	800d192 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d08c:	69bb      	ldr	r3, [r7, #24]
 800d08e:	2b02      	cmp	r3, #2
 800d090:	f200 80a1 	bhi.w	800d1d6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d094:	69bb      	ldr	r3, [r7, #24]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d003      	beq.n	800d0a2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d09a:	69bb      	ldr	r3, [r7, #24]
 800d09c:	2b01      	cmp	r3, #1
 800d09e:	d056      	beq.n	800d14e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d0a0:	e099      	b.n	800d1d6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d0a2:	4b88      	ldr	r3, [pc, #544]	@ (800d2c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	f003 0320 	and.w	r3, r3, #32
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d02d      	beq.n	800d10a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d0ae:	4b85      	ldr	r3, [pc, #532]	@ (800d2c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	08db      	lsrs	r3, r3, #3
 800d0b4:	f003 0303 	and.w	r3, r3, #3
 800d0b8:	4a83      	ldr	r2, [pc, #524]	@ (800d2c8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d0ba:	fa22 f303 	lsr.w	r3, r2, r3
 800d0be:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d0c0:	68bb      	ldr	r3, [r7, #8]
 800d0c2:	ee07 3a90 	vmov	s15, r3
 800d0c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0ca:	697b      	ldr	r3, [r7, #20]
 800d0cc:	ee07 3a90 	vmov	s15, r3
 800d0d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0d8:	4b7a      	ldr	r3, [pc, #488]	@ (800d2c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d0da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d0dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0e0:	ee07 3a90 	vmov	s15, r3
 800d0e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0e8:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0ec:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800d2cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d0f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d0fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d100:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d104:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d108:	e087      	b.n	800d21a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d10a:	697b      	ldr	r3, [r7, #20]
 800d10c:	ee07 3a90 	vmov	s15, r3
 800d110:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d114:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800d2d0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d118:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d11c:	4b69      	ldr	r3, [pc, #420]	@ (800d2c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d11e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d120:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d124:	ee07 3a90 	vmov	s15, r3
 800d128:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d12c:	ed97 6a03 	vldr	s12, [r7, #12]
 800d130:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800d2cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d134:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d138:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d13c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d140:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d144:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d148:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d14c:	e065      	b.n	800d21a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d14e:	697b      	ldr	r3, [r7, #20]
 800d150:	ee07 3a90 	vmov	s15, r3
 800d154:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d158:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800d2d4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d15c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d160:	4b58      	ldr	r3, [pc, #352]	@ (800d2c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d168:	ee07 3a90 	vmov	s15, r3
 800d16c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d170:	ed97 6a03 	vldr	s12, [r7, #12]
 800d174:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800d2cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d178:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d17c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d180:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d184:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d188:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d18c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d190:	e043      	b.n	800d21a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d192:	697b      	ldr	r3, [r7, #20]
 800d194:	ee07 3a90 	vmov	s15, r3
 800d198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d19c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800d2d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d1a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1a4:	4b47      	ldr	r3, [pc, #284]	@ (800d2c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d1a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1ac:	ee07 3a90 	vmov	s15, r3
 800d1b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1b4:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1b8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800d2cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d1bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d1c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d1d4:	e021      	b.n	800d21a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d1d6:	697b      	ldr	r3, [r7, #20]
 800d1d8:	ee07 3a90 	vmov	s15, r3
 800d1dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1e0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800d2d0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d1e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1e8:	4b36      	ldr	r3, [pc, #216]	@ (800d2c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d1ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1f0:	ee07 3a90 	vmov	s15, r3
 800d1f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1f8:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1fc:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800d2cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d200:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d204:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d208:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d20c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d210:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d214:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d218:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d21a:	4b2a      	ldr	r3, [pc, #168]	@ (800d2c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d21c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d21e:	0a5b      	lsrs	r3, r3, #9
 800d220:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d224:	ee07 3a90 	vmov	s15, r3
 800d228:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d22c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d230:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d234:	edd7 6a07 	vldr	s13, [r7, #28]
 800d238:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d23c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d240:	ee17 2a90 	vmov	r2, s15
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d248:	4b1e      	ldr	r3, [pc, #120]	@ (800d2c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d24a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d24c:	0c1b      	lsrs	r3, r3, #16
 800d24e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d252:	ee07 3a90 	vmov	s15, r3
 800d256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d25a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d25e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d262:	edd7 6a07 	vldr	s13, [r7, #28]
 800d266:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d26a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d26e:	ee17 2a90 	vmov	r2, s15
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d276:	4b13      	ldr	r3, [pc, #76]	@ (800d2c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d27a:	0e1b      	lsrs	r3, r3, #24
 800d27c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d280:	ee07 3a90 	vmov	s15, r3
 800d284:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d288:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d28c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d290:	edd7 6a07 	vldr	s13, [r7, #28]
 800d294:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d298:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d29c:	ee17 2a90 	vmov	r2, s15
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d2a4:	e008      	b.n	800d2b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	609a      	str	r2, [r3, #8]
}
 800d2b8:	bf00      	nop
 800d2ba:	3724      	adds	r7, #36	@ 0x24
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c2:	4770      	bx	lr
 800d2c4:	58024400 	.word	0x58024400
 800d2c8:	03d09000 	.word	0x03d09000
 800d2cc:	46000000 	.word	0x46000000
 800d2d0:	4c742400 	.word	0x4c742400
 800d2d4:	4a742400 	.word	0x4a742400
 800d2d8:	4bb71b00 	.word	0x4bb71b00

0800d2dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b084      	sub	sp, #16
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
 800d2e4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d2ea:	4b53      	ldr	r3, [pc, #332]	@ (800d438 <RCCEx_PLL2_Config+0x15c>)
 800d2ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2ee:	f003 0303 	and.w	r3, r3, #3
 800d2f2:	2b03      	cmp	r3, #3
 800d2f4:	d101      	bne.n	800d2fa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d2f6:	2301      	movs	r3, #1
 800d2f8:	e099      	b.n	800d42e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d2fa:	4b4f      	ldr	r3, [pc, #316]	@ (800d438 <RCCEx_PLL2_Config+0x15c>)
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	4a4e      	ldr	r2, [pc, #312]	@ (800d438 <RCCEx_PLL2_Config+0x15c>)
 800d300:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d304:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d306:	f7f6 fc0d 	bl	8003b24 <HAL_GetTick>
 800d30a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d30c:	e008      	b.n	800d320 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d30e:	f7f6 fc09 	bl	8003b24 <HAL_GetTick>
 800d312:	4602      	mov	r2, r0
 800d314:	68bb      	ldr	r3, [r7, #8]
 800d316:	1ad3      	subs	r3, r2, r3
 800d318:	2b02      	cmp	r3, #2
 800d31a:	d901      	bls.n	800d320 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d31c:	2303      	movs	r3, #3
 800d31e:	e086      	b.n	800d42e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d320:	4b45      	ldr	r3, [pc, #276]	@ (800d438 <RCCEx_PLL2_Config+0x15c>)
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d1f0      	bne.n	800d30e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d32c:	4b42      	ldr	r3, [pc, #264]	@ (800d438 <RCCEx_PLL2_Config+0x15c>)
 800d32e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d330:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	031b      	lsls	r3, r3, #12
 800d33a:	493f      	ldr	r1, [pc, #252]	@ (800d438 <RCCEx_PLL2_Config+0x15c>)
 800d33c:	4313      	orrs	r3, r2
 800d33e:	628b      	str	r3, [r1, #40]	@ 0x28
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	685b      	ldr	r3, [r3, #4]
 800d344:	3b01      	subs	r3, #1
 800d346:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	689b      	ldr	r3, [r3, #8]
 800d34e:	3b01      	subs	r3, #1
 800d350:	025b      	lsls	r3, r3, #9
 800d352:	b29b      	uxth	r3, r3
 800d354:	431a      	orrs	r2, r3
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	68db      	ldr	r3, [r3, #12]
 800d35a:	3b01      	subs	r3, #1
 800d35c:	041b      	lsls	r3, r3, #16
 800d35e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d362:	431a      	orrs	r2, r3
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	691b      	ldr	r3, [r3, #16]
 800d368:	3b01      	subs	r3, #1
 800d36a:	061b      	lsls	r3, r3, #24
 800d36c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d370:	4931      	ldr	r1, [pc, #196]	@ (800d438 <RCCEx_PLL2_Config+0x15c>)
 800d372:	4313      	orrs	r3, r2
 800d374:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d376:	4b30      	ldr	r3, [pc, #192]	@ (800d438 <RCCEx_PLL2_Config+0x15c>)
 800d378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d37a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	695b      	ldr	r3, [r3, #20]
 800d382:	492d      	ldr	r1, [pc, #180]	@ (800d438 <RCCEx_PLL2_Config+0x15c>)
 800d384:	4313      	orrs	r3, r2
 800d386:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d388:	4b2b      	ldr	r3, [pc, #172]	@ (800d438 <RCCEx_PLL2_Config+0x15c>)
 800d38a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d38c:	f023 0220 	bic.w	r2, r3, #32
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	699b      	ldr	r3, [r3, #24]
 800d394:	4928      	ldr	r1, [pc, #160]	@ (800d438 <RCCEx_PLL2_Config+0x15c>)
 800d396:	4313      	orrs	r3, r2
 800d398:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d39a:	4b27      	ldr	r3, [pc, #156]	@ (800d438 <RCCEx_PLL2_Config+0x15c>)
 800d39c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d39e:	4a26      	ldr	r2, [pc, #152]	@ (800d438 <RCCEx_PLL2_Config+0x15c>)
 800d3a0:	f023 0310 	bic.w	r3, r3, #16
 800d3a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d3a6:	4b24      	ldr	r3, [pc, #144]	@ (800d438 <RCCEx_PLL2_Config+0x15c>)
 800d3a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d3aa:	4b24      	ldr	r3, [pc, #144]	@ (800d43c <RCCEx_PLL2_Config+0x160>)
 800d3ac:	4013      	ands	r3, r2
 800d3ae:	687a      	ldr	r2, [r7, #4]
 800d3b0:	69d2      	ldr	r2, [r2, #28]
 800d3b2:	00d2      	lsls	r2, r2, #3
 800d3b4:	4920      	ldr	r1, [pc, #128]	@ (800d438 <RCCEx_PLL2_Config+0x15c>)
 800d3b6:	4313      	orrs	r3, r2
 800d3b8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d3ba:	4b1f      	ldr	r3, [pc, #124]	@ (800d438 <RCCEx_PLL2_Config+0x15c>)
 800d3bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3be:	4a1e      	ldr	r2, [pc, #120]	@ (800d438 <RCCEx_PLL2_Config+0x15c>)
 800d3c0:	f043 0310 	orr.w	r3, r3, #16
 800d3c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d106      	bne.n	800d3da <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d3cc:	4b1a      	ldr	r3, [pc, #104]	@ (800d438 <RCCEx_PLL2_Config+0x15c>)
 800d3ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3d0:	4a19      	ldr	r2, [pc, #100]	@ (800d438 <RCCEx_PLL2_Config+0x15c>)
 800d3d2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d3d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d3d8:	e00f      	b.n	800d3fa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d3da:	683b      	ldr	r3, [r7, #0]
 800d3dc:	2b01      	cmp	r3, #1
 800d3de:	d106      	bne.n	800d3ee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d3e0:	4b15      	ldr	r3, [pc, #84]	@ (800d438 <RCCEx_PLL2_Config+0x15c>)
 800d3e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3e4:	4a14      	ldr	r2, [pc, #80]	@ (800d438 <RCCEx_PLL2_Config+0x15c>)
 800d3e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d3ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d3ec:	e005      	b.n	800d3fa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d3ee:	4b12      	ldr	r3, [pc, #72]	@ (800d438 <RCCEx_PLL2_Config+0x15c>)
 800d3f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3f2:	4a11      	ldr	r2, [pc, #68]	@ (800d438 <RCCEx_PLL2_Config+0x15c>)
 800d3f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d3f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d3fa:	4b0f      	ldr	r3, [pc, #60]	@ (800d438 <RCCEx_PLL2_Config+0x15c>)
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	4a0e      	ldr	r2, [pc, #56]	@ (800d438 <RCCEx_PLL2_Config+0x15c>)
 800d400:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d404:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d406:	f7f6 fb8d 	bl	8003b24 <HAL_GetTick>
 800d40a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d40c:	e008      	b.n	800d420 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d40e:	f7f6 fb89 	bl	8003b24 <HAL_GetTick>
 800d412:	4602      	mov	r2, r0
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	1ad3      	subs	r3, r2, r3
 800d418:	2b02      	cmp	r3, #2
 800d41a:	d901      	bls.n	800d420 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d41c:	2303      	movs	r3, #3
 800d41e:	e006      	b.n	800d42e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d420:	4b05      	ldr	r3, [pc, #20]	@ (800d438 <RCCEx_PLL2_Config+0x15c>)
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d0f0      	beq.n	800d40e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d42c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d42e:	4618      	mov	r0, r3
 800d430:	3710      	adds	r7, #16
 800d432:	46bd      	mov	sp, r7
 800d434:	bd80      	pop	{r7, pc}
 800d436:	bf00      	nop
 800d438:	58024400 	.word	0x58024400
 800d43c:	ffff0007 	.word	0xffff0007

0800d440 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b084      	sub	sp, #16
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
 800d448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d44a:	2300      	movs	r3, #0
 800d44c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d44e:	4b53      	ldr	r3, [pc, #332]	@ (800d59c <RCCEx_PLL3_Config+0x15c>)
 800d450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d452:	f003 0303 	and.w	r3, r3, #3
 800d456:	2b03      	cmp	r3, #3
 800d458:	d101      	bne.n	800d45e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d45a:	2301      	movs	r3, #1
 800d45c:	e099      	b.n	800d592 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d45e:	4b4f      	ldr	r3, [pc, #316]	@ (800d59c <RCCEx_PLL3_Config+0x15c>)
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	4a4e      	ldr	r2, [pc, #312]	@ (800d59c <RCCEx_PLL3_Config+0x15c>)
 800d464:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d468:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d46a:	f7f6 fb5b 	bl	8003b24 <HAL_GetTick>
 800d46e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d470:	e008      	b.n	800d484 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d472:	f7f6 fb57 	bl	8003b24 <HAL_GetTick>
 800d476:	4602      	mov	r2, r0
 800d478:	68bb      	ldr	r3, [r7, #8]
 800d47a:	1ad3      	subs	r3, r2, r3
 800d47c:	2b02      	cmp	r3, #2
 800d47e:	d901      	bls.n	800d484 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d480:	2303      	movs	r3, #3
 800d482:	e086      	b.n	800d592 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d484:	4b45      	ldr	r3, [pc, #276]	@ (800d59c <RCCEx_PLL3_Config+0x15c>)
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d1f0      	bne.n	800d472 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d490:	4b42      	ldr	r3, [pc, #264]	@ (800d59c <RCCEx_PLL3_Config+0x15c>)
 800d492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d494:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	051b      	lsls	r3, r3, #20
 800d49e:	493f      	ldr	r1, [pc, #252]	@ (800d59c <RCCEx_PLL3_Config+0x15c>)
 800d4a0:	4313      	orrs	r3, r2
 800d4a2:	628b      	str	r3, [r1, #40]	@ 0x28
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	685b      	ldr	r3, [r3, #4]
 800d4a8:	3b01      	subs	r3, #1
 800d4aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	689b      	ldr	r3, [r3, #8]
 800d4b2:	3b01      	subs	r3, #1
 800d4b4:	025b      	lsls	r3, r3, #9
 800d4b6:	b29b      	uxth	r3, r3
 800d4b8:	431a      	orrs	r2, r3
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	68db      	ldr	r3, [r3, #12]
 800d4be:	3b01      	subs	r3, #1
 800d4c0:	041b      	lsls	r3, r3, #16
 800d4c2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d4c6:	431a      	orrs	r2, r3
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	691b      	ldr	r3, [r3, #16]
 800d4cc:	3b01      	subs	r3, #1
 800d4ce:	061b      	lsls	r3, r3, #24
 800d4d0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d4d4:	4931      	ldr	r1, [pc, #196]	@ (800d59c <RCCEx_PLL3_Config+0x15c>)
 800d4d6:	4313      	orrs	r3, r2
 800d4d8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d4da:	4b30      	ldr	r3, [pc, #192]	@ (800d59c <RCCEx_PLL3_Config+0x15c>)
 800d4dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4de:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	695b      	ldr	r3, [r3, #20]
 800d4e6:	492d      	ldr	r1, [pc, #180]	@ (800d59c <RCCEx_PLL3_Config+0x15c>)
 800d4e8:	4313      	orrs	r3, r2
 800d4ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d4ec:	4b2b      	ldr	r3, [pc, #172]	@ (800d59c <RCCEx_PLL3_Config+0x15c>)
 800d4ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4f0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	699b      	ldr	r3, [r3, #24]
 800d4f8:	4928      	ldr	r1, [pc, #160]	@ (800d59c <RCCEx_PLL3_Config+0x15c>)
 800d4fa:	4313      	orrs	r3, r2
 800d4fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d4fe:	4b27      	ldr	r3, [pc, #156]	@ (800d59c <RCCEx_PLL3_Config+0x15c>)
 800d500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d502:	4a26      	ldr	r2, [pc, #152]	@ (800d59c <RCCEx_PLL3_Config+0x15c>)
 800d504:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d508:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d50a:	4b24      	ldr	r3, [pc, #144]	@ (800d59c <RCCEx_PLL3_Config+0x15c>)
 800d50c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d50e:	4b24      	ldr	r3, [pc, #144]	@ (800d5a0 <RCCEx_PLL3_Config+0x160>)
 800d510:	4013      	ands	r3, r2
 800d512:	687a      	ldr	r2, [r7, #4]
 800d514:	69d2      	ldr	r2, [r2, #28]
 800d516:	00d2      	lsls	r2, r2, #3
 800d518:	4920      	ldr	r1, [pc, #128]	@ (800d59c <RCCEx_PLL3_Config+0x15c>)
 800d51a:	4313      	orrs	r3, r2
 800d51c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d51e:	4b1f      	ldr	r3, [pc, #124]	@ (800d59c <RCCEx_PLL3_Config+0x15c>)
 800d520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d522:	4a1e      	ldr	r2, [pc, #120]	@ (800d59c <RCCEx_PLL3_Config+0x15c>)
 800d524:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d528:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d106      	bne.n	800d53e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d530:	4b1a      	ldr	r3, [pc, #104]	@ (800d59c <RCCEx_PLL3_Config+0x15c>)
 800d532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d534:	4a19      	ldr	r2, [pc, #100]	@ (800d59c <RCCEx_PLL3_Config+0x15c>)
 800d536:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800d53a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d53c:	e00f      	b.n	800d55e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	2b01      	cmp	r3, #1
 800d542:	d106      	bne.n	800d552 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d544:	4b15      	ldr	r3, [pc, #84]	@ (800d59c <RCCEx_PLL3_Config+0x15c>)
 800d546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d548:	4a14      	ldr	r2, [pc, #80]	@ (800d59c <RCCEx_PLL3_Config+0x15c>)
 800d54a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800d54e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d550:	e005      	b.n	800d55e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d552:	4b12      	ldr	r3, [pc, #72]	@ (800d59c <RCCEx_PLL3_Config+0x15c>)
 800d554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d556:	4a11      	ldr	r2, [pc, #68]	@ (800d59c <RCCEx_PLL3_Config+0x15c>)
 800d558:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d55c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d55e:	4b0f      	ldr	r3, [pc, #60]	@ (800d59c <RCCEx_PLL3_Config+0x15c>)
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	4a0e      	ldr	r2, [pc, #56]	@ (800d59c <RCCEx_PLL3_Config+0x15c>)
 800d564:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d568:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d56a:	f7f6 fadb 	bl	8003b24 <HAL_GetTick>
 800d56e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d570:	e008      	b.n	800d584 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d572:	f7f6 fad7 	bl	8003b24 <HAL_GetTick>
 800d576:	4602      	mov	r2, r0
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	1ad3      	subs	r3, r2, r3
 800d57c:	2b02      	cmp	r3, #2
 800d57e:	d901      	bls.n	800d584 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d580:	2303      	movs	r3, #3
 800d582:	e006      	b.n	800d592 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d584:	4b05      	ldr	r3, [pc, #20]	@ (800d59c <RCCEx_PLL3_Config+0x15c>)
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d0f0      	beq.n	800d572 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d590:	7bfb      	ldrb	r3, [r7, #15]
}
 800d592:	4618      	mov	r0, r3
 800d594:	3710      	adds	r7, #16
 800d596:	46bd      	mov	sp, r7
 800d598:	bd80      	pop	{r7, pc}
 800d59a:	bf00      	nop
 800d59c:	58024400 	.word	0x58024400
 800d5a0:	ffff0007 	.word	0xffff0007

0800d5a4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b08a      	sub	sp, #40	@ 0x28
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d101      	bne.n	800d5b6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d5b2:	2301      	movs	r3, #1
 800d5b4:	e075      	b.n	800d6a2 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d5bc:	b2db      	uxtb	r3, r3
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d105      	bne.n	800d5ce <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f7f5 fea1 	bl	8003310 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	2204      	movs	r2, #4
 800d5d2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d5d6:	6878      	ldr	r0, [r7, #4]
 800d5d8:	f000 f868 	bl	800d6ac <HAL_SD_InitCard>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d001      	beq.n	800d5e6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d5e2:	2301      	movs	r3, #1
 800d5e4:	e05d      	b.n	800d6a2 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800d5e6:	f107 0308 	add.w	r3, r7, #8
 800d5ea:	4619      	mov	r1, r3
 800d5ec:	6878      	ldr	r0, [r7, #4]
 800d5ee:	f000 fdaf 	bl	800e150 <HAL_SD_GetCardStatus>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d001      	beq.n	800d5fc <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800d5f8:	2301      	movs	r3, #1
 800d5fa:	e052      	b.n	800d6a2 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800d5fc:	7e3b      	ldrb	r3, [r7, #24]
 800d5fe:	b2db      	uxtb	r3, r3
 800d600:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800d602:	7e7b      	ldrb	r3, [r7, #25]
 800d604:	b2db      	uxtb	r3, r3
 800d606:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d60c:	2b01      	cmp	r3, #1
 800d60e:	d10a      	bne.n	800d626 <HAL_SD_Init+0x82>
 800d610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d612:	2b00      	cmp	r3, #0
 800d614:	d102      	bne.n	800d61c <HAL_SD_Init+0x78>
 800d616:	6a3b      	ldr	r3, [r7, #32]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d004      	beq.n	800d626 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d622:	659a      	str	r2, [r3, #88]	@ 0x58
 800d624:	e00b      	b.n	800d63e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d62a:	2b01      	cmp	r3, #1
 800d62c:	d104      	bne.n	800d638 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d634:	659a      	str	r2, [r3, #88]	@ 0x58
 800d636:	e002      	b.n	800d63e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	2200      	movs	r2, #0
 800d63c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	68db      	ldr	r3, [r3, #12]
 800d642:	4619      	mov	r1, r3
 800d644:	6878      	ldr	r0, [r7, #4]
 800d646:	f000 fe6d 	bl	800e324 <HAL_SD_ConfigWideBusOperation>
 800d64a:	4603      	mov	r3, r0
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d001      	beq.n	800d654 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800d650:	2301      	movs	r3, #1
 800d652:	e026      	b.n	800d6a2 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800d654:	f7f6 fa66 	bl	8003b24 <HAL_GetTick>
 800d658:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d65a:	e011      	b.n	800d680 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d65c:	f7f6 fa62 	bl	8003b24 <HAL_GetTick>
 800d660:	4602      	mov	r2, r0
 800d662:	69fb      	ldr	r3, [r7, #28]
 800d664:	1ad3      	subs	r3, r2, r3
 800d666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d66a:	d109      	bne.n	800d680 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d672:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2201      	movs	r2, #1
 800d678:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800d67c:	2303      	movs	r3, #3
 800d67e:	e010      	b.n	800d6a2 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d680:	6878      	ldr	r0, [r7, #4]
 800d682:	f000 ff61 	bl	800e548 <HAL_SD_GetCardState>
 800d686:	4603      	mov	r3, r0
 800d688:	2b04      	cmp	r3, #4
 800d68a:	d1e7      	bne.n	800d65c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	2200      	movs	r2, #0
 800d690:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	2200      	movs	r2, #0
 800d696:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2201      	movs	r2, #1
 800d69c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800d6a0:	2300      	movs	r3, #0
}
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	3728      	adds	r7, #40	@ 0x28
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bd80      	pop	{r7, pc}
	...

0800d6ac <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d6ac:	b590      	push	{r4, r7, lr}
 800d6ae:	b08d      	sub	sp, #52	@ 0x34
 800d6b0:	af02      	add	r7, sp, #8
 800d6b2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800d6bc:	2300      	movs	r3, #0
 800d6be:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d6c4:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800d6c8:	f04f 0100 	mov.w	r1, #0
 800d6cc:	f7fe fd24 	bl	800c118 <HAL_RCCEx_GetPeriphCLKFreq>
 800d6d0:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800d6d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d109      	bne.n	800d6ec <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2201      	movs	r2, #1
 800d6dc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800d6e6:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800d6e8:	2301      	movs	r3, #1
 800d6ea:	e070      	b.n	800d7ce <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800d6ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6ee:	0a1b      	lsrs	r3, r3, #8
 800d6f0:	4a39      	ldr	r2, [pc, #228]	@ (800d7d8 <HAL_SD_InitCard+0x12c>)
 800d6f2:	fba2 2303 	umull	r2, r3, r2, r3
 800d6f6:	091b      	lsrs	r3, r3, #4
 800d6f8:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681c      	ldr	r4, [r3, #0]
 800d6fe:	466a      	mov	r2, sp
 800d700:	f107 0318 	add.w	r3, r7, #24
 800d704:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d708:	e882 0003 	stmia.w	r2, {r0, r1}
 800d70c:	f107 030c 	add.w	r3, r7, #12
 800d710:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d712:	4620      	mov	r0, r4
 800d714:	f005 f9a4 	bl	8012a60 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	4618      	mov	r0, r3
 800d71e:	f005 f9e7 	bl	8012af0 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800d722:	69fb      	ldr	r3, [r7, #28]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d005      	beq.n	800d734 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800d728:	69fb      	ldr	r3, [r7, #28]
 800d72a:	005b      	lsls	r3, r3, #1
 800d72c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d72e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d732:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800d734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d736:	2b00      	cmp	r3, #0
 800d738:	d007      	beq.n	800d74a <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800d73a:	4a28      	ldr	r2, [pc, #160]	@ (800d7dc <HAL_SD_InitCard+0x130>)
 800d73c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d73e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d742:	3301      	adds	r3, #1
 800d744:	4618      	mov	r0, r3
 800d746:	f7f6 f9f9 	bl	8003b3c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d74a:	6878      	ldr	r0, [r7, #4]
 800d74c:	f000 ffea 	bl	800e724 <SD_PowerON>
 800d750:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d752:	6a3b      	ldr	r3, [r7, #32]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d00b      	beq.n	800d770 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	2201      	movs	r2, #1
 800d75c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d764:	6a3b      	ldr	r3, [r7, #32]
 800d766:	431a      	orrs	r2, r3
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800d76c:	2301      	movs	r3, #1
 800d76e:	e02e      	b.n	800d7ce <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d770:	6878      	ldr	r0, [r7, #4]
 800d772:	f000 ff09 	bl	800e588 <SD_InitCard>
 800d776:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d778:	6a3b      	ldr	r3, [r7, #32]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d00b      	beq.n	800d796 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	2201      	movs	r2, #1
 800d782:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d78a:	6a3b      	ldr	r3, [r7, #32]
 800d78c:	431a      	orrs	r2, r3
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800d792:	2301      	movs	r3, #1
 800d794:	e01b      	b.n	800d7ce <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f005 fa3c 	bl	8012c1c <SDMMC_CmdBlockLength>
 800d7a4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d7a6:	6a3b      	ldr	r3, [r7, #32]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d00f      	beq.n	800d7cc <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	4a0b      	ldr	r2, [pc, #44]	@ (800d7e0 <HAL_SD_InitCard+0x134>)
 800d7b2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d7b8:	6a3b      	ldr	r3, [r7, #32]
 800d7ba:	431a      	orrs	r2, r3
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	2201      	movs	r2, #1
 800d7c4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800d7c8:	2301      	movs	r3, #1
 800d7ca:	e000      	b.n	800d7ce <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800d7cc:	2300      	movs	r3, #0
}
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	372c      	adds	r7, #44	@ 0x2c
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd90      	pop	{r4, r7, pc}
 800d7d6:	bf00      	nop
 800d7d8:	014f8b59 	.word	0x014f8b59
 800d7dc:	00012110 	.word	0x00012110
 800d7e0:	1fe00fff 	.word	0x1fe00fff

0800d7e4 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b08c      	sub	sp, #48	@ 0x30
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	60f8      	str	r0, [r7, #12]
 800d7ec:	60b9      	str	r1, [r7, #8]
 800d7ee:	607a      	str	r2, [r7, #4]
 800d7f0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800d7f6:	68bb      	ldr	r3, [r7, #8]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d107      	bne.n	800d80c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d800:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800d808:	2301      	movs	r3, #1
 800d80a:	e08d      	b.n	800d928 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d812:	b2db      	uxtb	r3, r3
 800d814:	2b01      	cmp	r3, #1
 800d816:	f040 8086 	bne.w	800d926 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	2200      	movs	r2, #0
 800d81e:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d820:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d822:	683b      	ldr	r3, [r7, #0]
 800d824:	441a      	add	r2, r3
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d82a:	429a      	cmp	r2, r3
 800d82c:	d907      	bls.n	800d83e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d832:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800d83a:	2301      	movs	r3, #1
 800d83c:	e074      	b.n	800d928 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	2203      	movs	r2, #3
 800d842:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	2200      	movs	r2, #0
 800d84c:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	68ba      	ldr	r2, [r7, #8]
 800d852:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d854:	683b      	ldr	r3, [r7, #0]
 800d856:	025a      	lsls	r2, r3, #9
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d860:	2b01      	cmp	r3, #1
 800d862:	d002      	beq.n	800d86a <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800d864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d866:	025b      	lsls	r3, r3, #9
 800d868:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d86a:	f04f 33ff 	mov.w	r3, #4294967295
 800d86e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d870:	683b      	ldr	r3, [r7, #0]
 800d872:	025b      	lsls	r3, r3, #9
 800d874:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d876:	2390      	movs	r3, #144	@ 0x90
 800d878:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d87a:	2302      	movs	r3, #2
 800d87c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d87e:	2300      	movs	r3, #0
 800d880:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d882:	2300      	movs	r3, #0
 800d884:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	f107 0210 	add.w	r2, r7, #16
 800d88e:	4611      	mov	r1, r2
 800d890:	4618      	mov	r0, r3
 800d892:	f005 f997 	bl	8012bc4 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	68da      	ldr	r2, [r3, #12]
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d8a4:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	68ba      	ldr	r2, [r7, #8]
 800d8ac:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	2201      	movs	r2, #1
 800d8b4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800d8b6:	683b      	ldr	r3, [r7, #0]
 800d8b8:	2b01      	cmp	r3, #1
 800d8ba:	d90a      	bls.n	800d8d2 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	2282      	movs	r2, #130	@ 0x82
 800d8c0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	f005 f9ed 	bl	8012ca8 <SDMMC_CmdReadMultiBlock>
 800d8ce:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800d8d0:	e009      	b.n	800d8e6 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	2281      	movs	r2, #129	@ 0x81
 800d8d6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d8de:	4618      	mov	r0, r3
 800d8e0:	f005 f9bf 	bl	8012c62 <SDMMC_CmdReadSingleBlock>
 800d8e4:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d8e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d012      	beq.n	800d912 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	4a0f      	ldr	r2, [pc, #60]	@ (800d930 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800d8f2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d8f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8fa:	431a      	orrs	r2, r3
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	2201      	movs	r2, #1
 800d904:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	2200      	movs	r2, #0
 800d90c:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800d90e:	2301      	movs	r3, #1
 800d910:	e00a      	b.n	800d928 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800d920:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 800d922:	2300      	movs	r3, #0
 800d924:	e000      	b.n	800d928 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d926:	2302      	movs	r3, #2
  }
}
 800d928:	4618      	mov	r0, r3
 800d92a:	3730      	adds	r7, #48	@ 0x30
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bd80      	pop	{r7, pc}
 800d930:	1fe00fff 	.word	0x1fe00fff

0800d934 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b08c      	sub	sp, #48	@ 0x30
 800d938:	af00      	add	r7, sp, #0
 800d93a:	60f8      	str	r0, [r7, #12]
 800d93c:	60b9      	str	r1, [r7, #8]
 800d93e:	607a      	str	r2, [r7, #4]
 800d940:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800d946:	68bb      	ldr	r3, [r7, #8]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d107      	bne.n	800d95c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d950:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800d958:	2301      	movs	r3, #1
 800d95a:	e08d      	b.n	800da78 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d962:	b2db      	uxtb	r3, r3
 800d964:	2b01      	cmp	r3, #1
 800d966:	f040 8086 	bne.w	800da76 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	2200      	movs	r2, #0
 800d96e:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d970:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	441a      	add	r2, r3
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d97a:	429a      	cmp	r2, r3
 800d97c:	d907      	bls.n	800d98e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d982:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800d98a:	2301      	movs	r3, #1
 800d98c:	e074      	b.n	800da78 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	2203      	movs	r2, #3
 800d992:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	2200      	movs	r2, #0
 800d99c:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	68ba      	ldr	r2, [r7, #8]
 800d9a2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	025a      	lsls	r2, r3, #9
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9b0:	2b01      	cmp	r3, #1
 800d9b2:	d002      	beq.n	800d9ba <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800d9b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9b6:	025b      	lsls	r3, r3, #9
 800d9b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d9ba:	f04f 33ff 	mov.w	r3, #4294967295
 800d9be:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d9c0:	683b      	ldr	r3, [r7, #0]
 800d9c2:	025b      	lsls	r3, r3, #9
 800d9c4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d9c6:	2390      	movs	r3, #144	@ 0x90
 800d9c8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	f107 0210 	add.w	r2, r7, #16
 800d9de:	4611      	mov	r1, r2
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	f005 f8ef 	bl	8012bc4 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	68da      	ldr	r2, [r3, #12]
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d9f4:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	68ba      	ldr	r2, [r7, #8]
 800d9fc:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	2201      	movs	r2, #1
 800da04:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	2b01      	cmp	r3, #1
 800da0a:	d90a      	bls.n	800da22 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	22a0      	movs	r2, #160	@ 0xa0
 800da10:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800da18:	4618      	mov	r0, r3
 800da1a:	f005 f98b 	bl	8012d34 <SDMMC_CmdWriteMultiBlock>
 800da1e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800da20:	e009      	b.n	800da36 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	2290      	movs	r2, #144	@ 0x90
 800da26:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800da2e:	4618      	mov	r0, r3
 800da30:	f005 f95d 	bl	8012cee <SDMMC_CmdWriteSingleBlock>
 800da34:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800da36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d012      	beq.n	800da62 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	4a0f      	ldr	r2, [pc, #60]	@ (800da80 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800da42:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800da48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da4a:	431a      	orrs	r2, r3
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	2201      	movs	r2, #1
 800da54:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	2200      	movs	r2, #0
 800da5c:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800da5e:	2301      	movs	r3, #1
 800da60:	e00a      	b.n	800da78 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 800da70:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800da72:	2300      	movs	r3, #0
 800da74:	e000      	b.n	800da78 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800da76:	2302      	movs	r3, #2
  }
}
 800da78:	4618      	mov	r0, r3
 800da7a:	3730      	adds	r7, #48	@ 0x30
 800da7c:	46bd      	mov	sp, r7
 800da7e:	bd80      	pop	{r7, pc}
 800da80:	1fe00fff 	.word	0x1fe00fff

0800da84 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b084      	sub	sp, #16
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da90:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d008      	beq.n	800dab2 <HAL_SD_IRQHandler+0x2e>
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	f003 0308 	and.w	r3, r3, #8
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d003      	beq.n	800dab2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800daaa:	6878      	ldr	r0, [r7, #4]
 800daac:	f001 f926 	bl	800ecfc <SD_Read_IT>
 800dab0:	e19a      	b.n	800dde8 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	f000 80ac 	beq.w	800dc1a <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800daca:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681a      	ldr	r2, [r3, #0]
 800dad6:	4b59      	ldr	r3, [pc, #356]	@ (800dc3c <HAL_SD_IRQHandler+0x1b8>)
 800dad8:	400b      	ands	r3, r1
 800dada:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800daea:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	68da      	ldr	r2, [r3, #12]
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800dafa:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	f003 0308 	and.w	r3, r3, #8
 800db02:	2b00      	cmp	r3, #0
 800db04:	d038      	beq.n	800db78 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	f003 0302 	and.w	r3, r3, #2
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d104      	bne.n	800db1a <HAL_SD_IRQHandler+0x96>
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	f003 0320 	and.w	r3, r3, #32
 800db16:	2b00      	cmp	r3, #0
 800db18:	d011      	beq.n	800db3e <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	4618      	mov	r0, r3
 800db20:	f005 f92c 	bl	8012d7c <SDMMC_CmdStopTransfer>
 800db24:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800db26:	68bb      	ldr	r3, [r7, #8]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d008      	beq.n	800db3e <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800db30:	68bb      	ldr	r3, [r7, #8]
 800db32:	431a      	orrs	r2, r3
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800db38:	6878      	ldr	r0, [r7, #4]
 800db3a:	f000 f95b 	bl	800ddf4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	4a3f      	ldr	r2, [pc, #252]	@ (800dc40 <HAL_SD_IRQHandler+0x1bc>)
 800db44:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	2201      	movs	r2, #1
 800db4a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	2200      	movs	r2, #0
 800db52:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	f003 0301 	and.w	r3, r3, #1
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d104      	bne.n	800db68 <HAL_SD_IRQHandler+0xe4>
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	f003 0302 	and.w	r3, r3, #2
 800db64:	2b00      	cmp	r3, #0
 800db66:	d003      	beq.n	800db70 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	f005 fdd7 	bl	801371c <HAL_SD_RxCpltCallback>
 800db6e:	e13b      	b.n	800dde8 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800db70:	6878      	ldr	r0, [r7, #4]
 800db72:	f005 fdc9 	bl	8013708 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800db76:	e137      	b.n	800dde8 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800db7e:	2b00      	cmp	r3, #0
 800db80:	f000 8132 	beq.w	800dde8 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	2200      	movs	r2, #0
 800db8a:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	2200      	movs	r2, #0
 800db92:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	2200      	movs	r2, #0
 800db9a:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	f003 0302 	and.w	r3, r3, #2
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d104      	bne.n	800dbb0 <HAL_SD_IRQHandler+0x12c>
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	f003 0320 	and.w	r3, r3, #32
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d011      	beq.n	800dbd4 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	f005 f8e1 	bl	8012d7c <SDMMC_CmdStopTransfer>
 800dbba:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800dbbc:	68bb      	ldr	r3, [r7, #8]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d008      	beq.n	800dbd4 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dbc6:	68bb      	ldr	r3, [r7, #8]
 800dbc8:	431a      	orrs	r2, r3
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f000 f910 	bl	800ddf4 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	2201      	movs	r2, #1
 800dbd8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	2200      	movs	r2, #0
 800dbe0:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	f003 0310 	and.w	r3, r3, #16
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d104      	bne.n	800dbf6 <HAL_SD_IRQHandler+0x172>
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	f003 0320 	and.w	r3, r3, #32
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d002      	beq.n	800dbfc <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800dbf6:	6878      	ldr	r0, [r7, #4]
 800dbf8:	f005 fd86 	bl	8013708 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	f003 0301 	and.w	r3, r3, #1
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d105      	bne.n	800dc12 <HAL_SD_IRQHandler+0x18e>
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	f003 0302 	and.w	r3, r3, #2
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	f000 80eb 	beq.w	800dde8 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f005 fd82 	bl	801371c <HAL_SD_RxCpltCallback>
}
 800dc18:	e0e6      	b.n	800dde8 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d00d      	beq.n	800dc44 <HAL_SD_IRQHandler+0x1c0>
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	f003 0308 	and.w	r3, r3, #8
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d008      	beq.n	800dc44 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800dc32:	6878      	ldr	r0, [r7, #4]
 800dc34:	f001 f8a8 	bl	800ed88 <SD_Write_IT>
 800dc38:	e0d6      	b.n	800dde8 <HAL_SD_IRQHandler+0x364>
 800dc3a:	bf00      	nop
 800dc3c:	ffff3ec5 	.word	0xffff3ec5
 800dc40:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc4a:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	f000 809d 	beq.w	800dd8e <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc5a:	f003 0302 	and.w	r3, r3, #2
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d005      	beq.n	800dc6e <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc66:	f043 0202 	orr.w	r2, r3, #2
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc74:	f003 0308 	and.w	r3, r3, #8
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d005      	beq.n	800dc88 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc80:	f043 0208 	orr.w	r2, r3, #8
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc8e:	f003 0320 	and.w	r3, r3, #32
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d005      	beq.n	800dca2 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc9a:	f043 0220 	orr.w	r2, r3, #32
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dca8:	f003 0310 	and.w	r3, r3, #16
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d005      	beq.n	800dcbc <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dcb4:	f043 0210 	orr.w	r2, r3, #16
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	4a4b      	ldr	r2, [pc, #300]	@ (800ddf0 <HAL_SD_IRQHandler+0x36c>)
 800dcc2:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800dcd2:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	68da      	ldr	r2, [r3, #12]
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800dce2:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800dcf2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	68da      	ldr	r2, [r3, #12]
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800dd02:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	4618      	mov	r0, r3
 800dd0a:	f005 f837 	bl	8012d7c <SDMMC_CmdStopTransfer>
 800dd0e:	4602      	mov	r2, r0
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd14:	431a      	orrs	r2, r3
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	68da      	ldr	r2, [r3, #12]
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800dd28:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800dd32:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	f003 0308 	and.w	r3, r3, #8
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d00a      	beq.n	800dd54 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	2201      	movs	r2, #1
 800dd42:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	2200      	movs	r2, #0
 800dd4a:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 800dd4c:	6878      	ldr	r0, [r7, #4]
 800dd4e:	f000 f851 	bl	800ddf4 <HAL_SD_ErrorCallback>
}
 800dd52:	e049      	b.n	800dde8 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d044      	beq.n	800dde8 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d040      	beq.n	800dde8 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800dd74:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	2201      	movs	r2, #1
 800dd82:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	f000 f834 	bl	800ddf4 <HAL_SD_ErrorCallback>
}
 800dd8c:	e02c      	b.n	800dde8 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d025      	beq.n	800dde8 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dda4:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ddac:	f003 0304 	and.w	r3, r3, #4
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d10c      	bne.n	800ddce <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	f003 0320 	and.w	r3, r3, #32
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d003      	beq.n	800ddc6 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800ddbe:	6878      	ldr	r0, [r7, #4]
 800ddc0:	f001 f84a 	bl	800ee58 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800ddc4:	e010      	b.n	800dde8 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800ddc6:	6878      	ldr	r0, [r7, #4]
 800ddc8:	f001 f832 	bl	800ee30 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800ddcc:	e00c      	b.n	800dde8 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	f003 0320 	and.w	r3, r3, #32
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d003      	beq.n	800dde0 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800ddd8:	6878      	ldr	r0, [r7, #4]
 800ddda:	f001 f833 	bl	800ee44 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800ddde:	e003      	b.n	800dde8 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	f001 f81b 	bl	800ee1c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800dde6:	e7ff      	b.n	800dde8 <HAL_SD_IRQHandler+0x364>
 800dde8:	bf00      	nop
 800ddea:	3710      	adds	r7, #16
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd80      	pop	{r7, pc}
 800ddf0:	18000f3a 	.word	0x18000f3a

0800ddf4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800ddf4:	b480      	push	{r7}
 800ddf6:	b083      	sub	sp, #12
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800ddfc:	bf00      	nop
 800ddfe:	370c      	adds	r7, #12
 800de00:	46bd      	mov	sp, r7
 800de02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de06:	4770      	bx	lr

0800de08 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800de08:	b480      	push	{r7}
 800de0a:	b083      	sub	sp, #12
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
 800de10:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800de16:	0f9b      	lsrs	r3, r3, #30
 800de18:	b2da      	uxtb	r2, r3
 800de1a:	683b      	ldr	r3, [r7, #0]
 800de1c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800de22:	0e9b      	lsrs	r3, r3, #26
 800de24:	b2db      	uxtb	r3, r3
 800de26:	f003 030f 	and.w	r3, r3, #15
 800de2a:	b2da      	uxtb	r2, r3
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800de34:	0e1b      	lsrs	r3, r3, #24
 800de36:	b2db      	uxtb	r3, r3
 800de38:	f003 0303 	and.w	r3, r3, #3
 800de3c:	b2da      	uxtb	r2, r3
 800de3e:	683b      	ldr	r3, [r7, #0]
 800de40:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800de46:	0c1b      	lsrs	r3, r3, #16
 800de48:	b2da      	uxtb	r2, r3
 800de4a:	683b      	ldr	r3, [r7, #0]
 800de4c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800de52:	0a1b      	lsrs	r3, r3, #8
 800de54:	b2da      	uxtb	r2, r3
 800de56:	683b      	ldr	r3, [r7, #0]
 800de58:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800de5e:	b2da      	uxtb	r2, r3
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800de68:	0d1b      	lsrs	r3, r3, #20
 800de6a:	b29a      	uxth	r2, r3
 800de6c:	683b      	ldr	r3, [r7, #0]
 800de6e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800de74:	0c1b      	lsrs	r3, r3, #16
 800de76:	b2db      	uxtb	r3, r3
 800de78:	f003 030f 	and.w	r3, r3, #15
 800de7c:	b2da      	uxtb	r2, r3
 800de7e:	683b      	ldr	r3, [r7, #0]
 800de80:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800de86:	0bdb      	lsrs	r3, r3, #15
 800de88:	b2db      	uxtb	r3, r3
 800de8a:	f003 0301 	and.w	r3, r3, #1
 800de8e:	b2da      	uxtb	r2, r3
 800de90:	683b      	ldr	r3, [r7, #0]
 800de92:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800de98:	0b9b      	lsrs	r3, r3, #14
 800de9a:	b2db      	uxtb	r3, r3
 800de9c:	f003 0301 	and.w	r3, r3, #1
 800dea0:	b2da      	uxtb	r2, r3
 800dea2:	683b      	ldr	r3, [r7, #0]
 800dea4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800deaa:	0b5b      	lsrs	r3, r3, #13
 800deac:	b2db      	uxtb	r3, r3
 800deae:	f003 0301 	and.w	r3, r3, #1
 800deb2:	b2da      	uxtb	r2, r3
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800debc:	0b1b      	lsrs	r3, r3, #12
 800debe:	b2db      	uxtb	r3, r3
 800dec0:	f003 0301 	and.w	r3, r3, #1
 800dec4:	b2da      	uxtb	r2, r3
 800dec6:	683b      	ldr	r3, [r7, #0]
 800dec8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	2200      	movs	r2, #0
 800dece:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d163      	bne.n	800dfa0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dedc:	009a      	lsls	r2, r3, #2
 800dede:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800dee2:	4013      	ands	r3, r2
 800dee4:	687a      	ldr	r2, [r7, #4]
 800dee6:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800dee8:	0f92      	lsrs	r2, r2, #30
 800deea:	431a      	orrs	r2, r3
 800deec:	683b      	ldr	r3, [r7, #0]
 800deee:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800def4:	0edb      	lsrs	r3, r3, #27
 800def6:	b2db      	uxtb	r3, r3
 800def8:	f003 0307 	and.w	r3, r3, #7
 800defc:	b2da      	uxtb	r2, r3
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800df06:	0e1b      	lsrs	r3, r3, #24
 800df08:	b2db      	uxtb	r3, r3
 800df0a:	f003 0307 	and.w	r3, r3, #7
 800df0e:	b2da      	uxtb	r2, r3
 800df10:	683b      	ldr	r3, [r7, #0]
 800df12:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800df18:	0d5b      	lsrs	r3, r3, #21
 800df1a:	b2db      	uxtb	r3, r3
 800df1c:	f003 0307 	and.w	r3, r3, #7
 800df20:	b2da      	uxtb	r2, r3
 800df22:	683b      	ldr	r3, [r7, #0]
 800df24:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800df2a:	0c9b      	lsrs	r3, r3, #18
 800df2c:	b2db      	uxtb	r3, r3
 800df2e:	f003 0307 	and.w	r3, r3, #7
 800df32:	b2da      	uxtb	r2, r3
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800df3c:	0bdb      	lsrs	r3, r3, #15
 800df3e:	b2db      	uxtb	r3, r3
 800df40:	f003 0307 	and.w	r3, r3, #7
 800df44:	b2da      	uxtb	r2, r3
 800df46:	683b      	ldr	r3, [r7, #0]
 800df48:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800df4a:	683b      	ldr	r3, [r7, #0]
 800df4c:	691b      	ldr	r3, [r3, #16]
 800df4e:	1c5a      	adds	r2, r3, #1
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800df54:	683b      	ldr	r3, [r7, #0]
 800df56:	7e1b      	ldrb	r3, [r3, #24]
 800df58:	b2db      	uxtb	r3, r3
 800df5a:	f003 0307 	and.w	r3, r3, #7
 800df5e:	3302      	adds	r3, #2
 800df60:	2201      	movs	r2, #1
 800df62:	fa02 f303 	lsl.w	r3, r2, r3
 800df66:	687a      	ldr	r2, [r7, #4]
 800df68:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800df6a:	fb03 f202 	mul.w	r2, r3, r2
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800df72:	683b      	ldr	r3, [r7, #0]
 800df74:	7a1b      	ldrb	r3, [r3, #8]
 800df76:	b2db      	uxtb	r3, r3
 800df78:	f003 030f 	and.w	r3, r3, #15
 800df7c:	2201      	movs	r2, #1
 800df7e:	409a      	lsls	r2, r3
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800df88:	687a      	ldr	r2, [r7, #4]
 800df8a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800df8c:	0a52      	lsrs	r2, r2, #9
 800df8e:	fb03 f202 	mul.w	r2, r3, r2
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800df9c:	655a      	str	r2, [r3, #84]	@ 0x54
 800df9e:	e031      	b.n	800e004 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dfa4:	2b01      	cmp	r3, #1
 800dfa6:	d11d      	bne.n	800dfe4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dfac:	041b      	lsls	r3, r3, #16
 800dfae:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dfb6:	0c1b      	lsrs	r3, r3, #16
 800dfb8:	431a      	orrs	r2, r3
 800dfba:	683b      	ldr	r3, [r7, #0]
 800dfbc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	691b      	ldr	r3, [r3, #16]
 800dfc2:	3301      	adds	r3, #1
 800dfc4:	029a      	lsls	r2, r3, #10
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dfd8:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	655a      	str	r2, [r3, #84]	@ 0x54
 800dfe2:	e00f      	b.n	800e004 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	4a58      	ldr	r2, [pc, #352]	@ (800e14c <HAL_SD_GetCardCSD+0x344>)
 800dfea:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dff0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	2201      	movs	r2, #1
 800dffc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800e000:	2301      	movs	r3, #1
 800e002:	e09d      	b.n	800e140 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e008:	0b9b      	lsrs	r3, r3, #14
 800e00a:	b2db      	uxtb	r3, r3
 800e00c:	f003 0301 	and.w	r3, r3, #1
 800e010:	b2da      	uxtb	r2, r3
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e01a:	09db      	lsrs	r3, r3, #7
 800e01c:	b2db      	uxtb	r3, r3
 800e01e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e022:	b2da      	uxtb	r2, r3
 800e024:	683b      	ldr	r3, [r7, #0]
 800e026:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e02c:	b2db      	uxtb	r3, r3
 800e02e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e032:	b2da      	uxtb	r2, r3
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e03c:	0fdb      	lsrs	r3, r3, #31
 800e03e:	b2da      	uxtb	r2, r3
 800e040:	683b      	ldr	r3, [r7, #0]
 800e042:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e048:	0f5b      	lsrs	r3, r3, #29
 800e04a:	b2db      	uxtb	r3, r3
 800e04c:	f003 0303 	and.w	r3, r3, #3
 800e050:	b2da      	uxtb	r2, r3
 800e052:	683b      	ldr	r3, [r7, #0]
 800e054:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e05a:	0e9b      	lsrs	r3, r3, #26
 800e05c:	b2db      	uxtb	r3, r3
 800e05e:	f003 0307 	and.w	r3, r3, #7
 800e062:	b2da      	uxtb	r2, r3
 800e064:	683b      	ldr	r3, [r7, #0]
 800e066:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e06c:	0d9b      	lsrs	r3, r3, #22
 800e06e:	b2db      	uxtb	r3, r3
 800e070:	f003 030f 	and.w	r3, r3, #15
 800e074:	b2da      	uxtb	r2, r3
 800e076:	683b      	ldr	r3, [r7, #0]
 800e078:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e07e:	0d5b      	lsrs	r3, r3, #21
 800e080:	b2db      	uxtb	r3, r3
 800e082:	f003 0301 	and.w	r3, r3, #1
 800e086:	b2da      	uxtb	r2, r3
 800e088:	683b      	ldr	r3, [r7, #0]
 800e08a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800e08e:	683b      	ldr	r3, [r7, #0]
 800e090:	2200      	movs	r2, #0
 800e092:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e09a:	0c1b      	lsrs	r3, r3, #16
 800e09c:	b2db      	uxtb	r3, r3
 800e09e:	f003 0301 	and.w	r3, r3, #1
 800e0a2:	b2da      	uxtb	r2, r3
 800e0a4:	683b      	ldr	r3, [r7, #0]
 800e0a6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e0ae:	0bdb      	lsrs	r3, r3, #15
 800e0b0:	b2db      	uxtb	r3, r3
 800e0b2:	f003 0301 	and.w	r3, r3, #1
 800e0b6:	b2da      	uxtb	r2, r3
 800e0b8:	683b      	ldr	r3, [r7, #0]
 800e0ba:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e0c2:	0b9b      	lsrs	r3, r3, #14
 800e0c4:	b2db      	uxtb	r3, r3
 800e0c6:	f003 0301 	and.w	r3, r3, #1
 800e0ca:	b2da      	uxtb	r2, r3
 800e0cc:	683b      	ldr	r3, [r7, #0]
 800e0ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e0d6:	0b5b      	lsrs	r3, r3, #13
 800e0d8:	b2db      	uxtb	r3, r3
 800e0da:	f003 0301 	and.w	r3, r3, #1
 800e0de:	b2da      	uxtb	r2, r3
 800e0e0:	683b      	ldr	r3, [r7, #0]
 800e0e2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e0ea:	0b1b      	lsrs	r3, r3, #12
 800e0ec:	b2db      	uxtb	r3, r3
 800e0ee:	f003 0301 	and.w	r3, r3, #1
 800e0f2:	b2da      	uxtb	r2, r3
 800e0f4:	683b      	ldr	r3, [r7, #0]
 800e0f6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e0fe:	0a9b      	lsrs	r3, r3, #10
 800e100:	b2db      	uxtb	r3, r3
 800e102:	f003 0303 	and.w	r3, r3, #3
 800e106:	b2da      	uxtb	r2, r3
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e112:	0a1b      	lsrs	r3, r3, #8
 800e114:	b2db      	uxtb	r3, r3
 800e116:	f003 0303 	and.w	r3, r3, #3
 800e11a:	b2da      	uxtb	r2, r3
 800e11c:	683b      	ldr	r3, [r7, #0]
 800e11e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e126:	085b      	lsrs	r3, r3, #1
 800e128:	b2db      	uxtb	r3, r3
 800e12a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e12e:	b2da      	uxtb	r2, r3
 800e130:	683b      	ldr	r3, [r7, #0]
 800e132:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800e136:	683b      	ldr	r3, [r7, #0]
 800e138:	2201      	movs	r2, #1
 800e13a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800e13e:	2300      	movs	r3, #0
}
 800e140:	4618      	mov	r0, r3
 800e142:	370c      	adds	r7, #12
 800e144:	46bd      	mov	sp, r7
 800e146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14a:	4770      	bx	lr
 800e14c:	1fe00fff 	.word	0x1fe00fff

0800e150 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b094      	sub	sp, #80	@ 0x50
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
 800e158:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800e15a:	2300      	movs	r3, #0
 800e15c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e166:	b2db      	uxtb	r3, r3
 800e168:	2b03      	cmp	r3, #3
 800e16a:	d101      	bne.n	800e170 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800e16c:	2301      	movs	r3, #1
 800e16e:	e0a7      	b.n	800e2c0 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800e170:	f107 0308 	add.w	r3, r7, #8
 800e174:	4619      	mov	r1, r3
 800e176:	6878      	ldr	r0, [r7, #4]
 800e178:	f000 fb62 	bl	800e840 <SD_SendSDStatus>
 800e17c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800e17e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e180:	2b00      	cmp	r3, #0
 800e182:	d011      	beq.n	800e1a8 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	4a4f      	ldr	r2, [pc, #316]	@ (800e2c8 <HAL_SD_GetCardStatus+0x178>)
 800e18a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e190:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e192:	431a      	orrs	r2, r3
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	2201      	movs	r2, #1
 800e19c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800e1a0:	2301      	movs	r3, #1
 800e1a2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800e1a6:	e070      	b.n	800e28a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800e1a8:	68bb      	ldr	r3, [r7, #8]
 800e1aa:	099b      	lsrs	r3, r3, #6
 800e1ac:	b2db      	uxtb	r3, r3
 800e1ae:	f003 0303 	and.w	r3, r3, #3
 800e1b2:	b2da      	uxtb	r2, r3
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800e1b8:	68bb      	ldr	r3, [r7, #8]
 800e1ba:	095b      	lsrs	r3, r3, #5
 800e1bc:	b2db      	uxtb	r3, r3
 800e1be:	f003 0301 	and.w	r3, r3, #1
 800e1c2:	b2da      	uxtb	r2, r3
 800e1c4:	683b      	ldr	r3, [r7, #0]
 800e1c6:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800e1c8:	68bb      	ldr	r3, [r7, #8]
 800e1ca:	0a1b      	lsrs	r3, r3, #8
 800e1cc:	b29b      	uxth	r3, r3
 800e1ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800e1d2:	b29a      	uxth	r2, r3
 800e1d4:	68bb      	ldr	r3, [r7, #8]
 800e1d6:	0e1b      	lsrs	r3, r3, #24
 800e1d8:	b29b      	uxth	r3, r3
 800e1da:	4313      	orrs	r3, r2
 800e1dc:	b29a      	uxth	r2, r3
 800e1de:	683b      	ldr	r3, [r7, #0]
 800e1e0:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	061a      	lsls	r2, r3, #24
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	021b      	lsls	r3, r3, #8
 800e1ea:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e1ee:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	0a1b      	lsrs	r3, r3, #8
 800e1f4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e1f8:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	0e1b      	lsrs	r3, r3, #24
 800e1fe:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e200:	683b      	ldr	r3, [r7, #0]
 800e202:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800e204:	693b      	ldr	r3, [r7, #16]
 800e206:	b2da      	uxtb	r2, r3
 800e208:	683b      	ldr	r3, [r7, #0]
 800e20a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800e20c:	693b      	ldr	r3, [r7, #16]
 800e20e:	0a1b      	lsrs	r3, r3, #8
 800e210:	b2da      	uxtb	r2, r3
 800e212:	683b      	ldr	r3, [r7, #0]
 800e214:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800e216:	693b      	ldr	r3, [r7, #16]
 800e218:	0d1b      	lsrs	r3, r3, #20
 800e21a:	b2db      	uxtb	r3, r3
 800e21c:	f003 030f 	and.w	r3, r3, #15
 800e220:	b2da      	uxtb	r2, r3
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800e226:	693b      	ldr	r3, [r7, #16]
 800e228:	0c1b      	lsrs	r3, r3, #16
 800e22a:	b29b      	uxth	r3, r3
 800e22c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800e230:	b29a      	uxth	r2, r3
 800e232:	697b      	ldr	r3, [r7, #20]
 800e234:	b29b      	uxth	r3, r3
 800e236:	b2db      	uxtb	r3, r3
 800e238:	b29b      	uxth	r3, r3
 800e23a:	4313      	orrs	r3, r2
 800e23c:	b29a      	uxth	r2, r3
 800e23e:	683b      	ldr	r3, [r7, #0]
 800e240:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800e242:	697b      	ldr	r3, [r7, #20]
 800e244:	0a9b      	lsrs	r3, r3, #10
 800e246:	b2db      	uxtb	r3, r3
 800e248:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e24c:	b2da      	uxtb	r2, r3
 800e24e:	683b      	ldr	r3, [r7, #0]
 800e250:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800e252:	697b      	ldr	r3, [r7, #20]
 800e254:	0a1b      	lsrs	r3, r3, #8
 800e256:	b2db      	uxtb	r3, r3
 800e258:	f003 0303 	and.w	r3, r3, #3
 800e25c:	b2da      	uxtb	r2, r3
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800e262:	697b      	ldr	r3, [r7, #20]
 800e264:	091b      	lsrs	r3, r3, #4
 800e266:	b2db      	uxtb	r3, r3
 800e268:	f003 030f 	and.w	r3, r3, #15
 800e26c:	b2da      	uxtb	r2, r3
 800e26e:	683b      	ldr	r3, [r7, #0]
 800e270:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800e272:	697b      	ldr	r3, [r7, #20]
 800e274:	b2db      	uxtb	r3, r3
 800e276:	f003 030f 	and.w	r3, r3, #15
 800e27a:	b2da      	uxtb	r2, r3
 800e27c:	683b      	ldr	r3, [r7, #0]
 800e27e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800e280:	69bb      	ldr	r3, [r7, #24]
 800e282:	0e1b      	lsrs	r3, r3, #24
 800e284:	b2da      	uxtb	r2, r3
 800e286:	683b      	ldr	r3, [r7, #0]
 800e288:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e292:	4618      	mov	r0, r3
 800e294:	f004 fcc2 	bl	8012c1c <SDMMC_CmdBlockLength>
 800e298:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800e29a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d00d      	beq.n	800e2bc <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	4a08      	ldr	r2, [pc, #32]	@ (800e2c8 <HAL_SD_GetCardStatus+0x178>)
 800e2a6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e2ac:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	2201      	movs	r2, #1
 800e2b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800e2b6:	2301      	movs	r3, #1
 800e2b8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 800e2bc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	3750      	adds	r7, #80	@ 0x50
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	bd80      	pop	{r7, pc}
 800e2c8:	1fe00fff 	.word	0x1fe00fff

0800e2cc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800e2cc:	b480      	push	{r7}
 800e2ce:	b083      	sub	sp, #12
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
 800e2d4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e2e2:	683b      	ldr	r3, [r7, #0]
 800e2e4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e2ea:	683b      	ldr	r3, [r7, #0]
 800e2ec:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e2f2:	683b      	ldr	r3, [r7, #0]
 800e2f4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e302:	683b      	ldr	r3, [r7, #0]
 800e304:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e30a:	683b      	ldr	r3, [r7, #0]
 800e30c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e312:	683b      	ldr	r3, [r7, #0]
 800e314:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800e316:	2300      	movs	r3, #0
}
 800e318:	4618      	mov	r0, r3
 800e31a:	370c      	adds	r7, #12
 800e31c:	46bd      	mov	sp, r7
 800e31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e322:	4770      	bx	lr

0800e324 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800e324:	b590      	push	{r4, r7, lr}
 800e326:	b08d      	sub	sp, #52	@ 0x34
 800e328:	af02      	add	r7, sp, #8
 800e32a:	6078      	str	r0, [r7, #4]
 800e32c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800e32e:	2300      	movs	r3, #0
 800e330:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2203      	movs	r2, #3
 800e338:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e340:	2b03      	cmp	r3, #3
 800e342:	d02e      	beq.n	800e3a2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e34a:	d106      	bne.n	800e35a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e350:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	635a      	str	r2, [r3, #52]	@ 0x34
 800e358:	e029      	b.n	800e3ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800e35a:	683b      	ldr	r3, [r7, #0]
 800e35c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e360:	d10a      	bne.n	800e378 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800e362:	6878      	ldr	r0, [r7, #4]
 800e364:	f000 fb64 	bl	800ea30 <SD_WideBus_Enable>
 800e368:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e36e:	6a3b      	ldr	r3, [r7, #32]
 800e370:	431a      	orrs	r2, r3
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	635a      	str	r2, [r3, #52]	@ 0x34
 800e376:	e01a      	b.n	800e3ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800e378:	683b      	ldr	r3, [r7, #0]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d10a      	bne.n	800e394 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800e37e:	6878      	ldr	r0, [r7, #4]
 800e380:	f000 fba1 	bl	800eac6 <SD_WideBus_Disable>
 800e384:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e38a:	6a3b      	ldr	r3, [r7, #32]
 800e38c:	431a      	orrs	r2, r3
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	635a      	str	r2, [r3, #52]	@ 0x34
 800e392:	e00c      	b.n	800e3ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e398:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	635a      	str	r2, [r3, #52]	@ 0x34
 800e3a0:	e005      	b.n	800e3ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e3a6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d007      	beq.n	800e3c6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	4a5f      	ldr	r2, [pc, #380]	@ (800e538 <HAL_SD_ConfigWideBusOperation+0x214>)
 800e3bc:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800e3be:	2301      	movs	r3, #1
 800e3c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e3c4:	e096      	b.n	800e4f4 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800e3c6:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800e3ca:	f04f 0100 	mov.w	r1, #0
 800e3ce:	f7fd fea3 	bl	800c118 <HAL_RCCEx_GetPeriphCLKFreq>
 800e3d2:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800e3d4:	69fb      	ldr	r3, [r7, #28]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	f000 8083 	beq.w	800e4e2 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	685b      	ldr	r3, [r3, #4]
 800e3e0:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	689b      	ldr	r3, [r3, #8]
 800e3e6:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800e3e8:	683b      	ldr	r3, [r7, #0]
 800e3ea:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	691b      	ldr	r3, [r3, #16]
 800e3f0:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	695a      	ldr	r2, [r3, #20]
 800e3f6:	69fb      	ldr	r3, [r7, #28]
 800e3f8:	4950      	ldr	r1, [pc, #320]	@ (800e53c <HAL_SD_ConfigWideBusOperation+0x218>)
 800e3fa:	fba1 1303 	umull	r1, r3, r1, r3
 800e3fe:	0e1b      	lsrs	r3, r3, #24
 800e400:	429a      	cmp	r2, r3
 800e402:	d303      	bcc.n	800e40c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	695b      	ldr	r3, [r3, #20]
 800e408:	61bb      	str	r3, [r7, #24]
 800e40a:	e05a      	b.n	800e4c2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e410:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e414:	d103      	bne.n	800e41e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	695b      	ldr	r3, [r3, #20]
 800e41a:	61bb      	str	r3, [r7, #24]
 800e41c:	e051      	b.n	800e4c2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e422:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e426:	d126      	bne.n	800e476 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	695b      	ldr	r3, [r3, #20]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d10e      	bne.n	800e44e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800e430:	69fb      	ldr	r3, [r7, #28]
 800e432:	4a43      	ldr	r2, [pc, #268]	@ (800e540 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e434:	4293      	cmp	r3, r2
 800e436:	d906      	bls.n	800e446 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e438:	69fb      	ldr	r3, [r7, #28]
 800e43a:	4a40      	ldr	r2, [pc, #256]	@ (800e53c <HAL_SD_ConfigWideBusOperation+0x218>)
 800e43c:	fba2 2303 	umull	r2, r3, r2, r3
 800e440:	0e5b      	lsrs	r3, r3, #25
 800e442:	61bb      	str	r3, [r7, #24]
 800e444:	e03d      	b.n	800e4c2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	695b      	ldr	r3, [r3, #20]
 800e44a:	61bb      	str	r3, [r7, #24]
 800e44c:	e039      	b.n	800e4c2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	695b      	ldr	r3, [r3, #20]
 800e452:	005b      	lsls	r3, r3, #1
 800e454:	69fa      	ldr	r2, [r7, #28]
 800e456:	fbb2 f3f3 	udiv	r3, r2, r3
 800e45a:	4a39      	ldr	r2, [pc, #228]	@ (800e540 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e45c:	4293      	cmp	r3, r2
 800e45e:	d906      	bls.n	800e46e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e460:	69fb      	ldr	r3, [r7, #28]
 800e462:	4a36      	ldr	r2, [pc, #216]	@ (800e53c <HAL_SD_ConfigWideBusOperation+0x218>)
 800e464:	fba2 2303 	umull	r2, r3, r2, r3
 800e468:	0e5b      	lsrs	r3, r3, #25
 800e46a:	61bb      	str	r3, [r7, #24]
 800e46c:	e029      	b.n	800e4c2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	695b      	ldr	r3, [r3, #20]
 800e472:	61bb      	str	r3, [r7, #24]
 800e474:	e025      	b.n	800e4c2 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	695b      	ldr	r3, [r3, #20]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d10e      	bne.n	800e49c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800e47e:	69fb      	ldr	r3, [r7, #28]
 800e480:	4a30      	ldr	r2, [pc, #192]	@ (800e544 <HAL_SD_ConfigWideBusOperation+0x220>)
 800e482:	4293      	cmp	r3, r2
 800e484:	d906      	bls.n	800e494 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e486:	69fb      	ldr	r3, [r7, #28]
 800e488:	4a2c      	ldr	r2, [pc, #176]	@ (800e53c <HAL_SD_ConfigWideBusOperation+0x218>)
 800e48a:	fba2 2303 	umull	r2, r3, r2, r3
 800e48e:	0e1b      	lsrs	r3, r3, #24
 800e490:	61bb      	str	r3, [r7, #24]
 800e492:	e016      	b.n	800e4c2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	695b      	ldr	r3, [r3, #20]
 800e498:	61bb      	str	r3, [r7, #24]
 800e49a:	e012      	b.n	800e4c2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	695b      	ldr	r3, [r3, #20]
 800e4a0:	005b      	lsls	r3, r3, #1
 800e4a2:	69fa      	ldr	r2, [r7, #28]
 800e4a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4a8:	4a26      	ldr	r2, [pc, #152]	@ (800e544 <HAL_SD_ConfigWideBusOperation+0x220>)
 800e4aa:	4293      	cmp	r3, r2
 800e4ac:	d906      	bls.n	800e4bc <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e4ae:	69fb      	ldr	r3, [r7, #28]
 800e4b0:	4a22      	ldr	r2, [pc, #136]	@ (800e53c <HAL_SD_ConfigWideBusOperation+0x218>)
 800e4b2:	fba2 2303 	umull	r2, r3, r2, r3
 800e4b6:	0e1b      	lsrs	r3, r3, #24
 800e4b8:	61bb      	str	r3, [r7, #24]
 800e4ba:	e002      	b.n	800e4c2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	695b      	ldr	r3, [r3, #20]
 800e4c0:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	681c      	ldr	r4, [r3, #0]
 800e4c6:	466a      	mov	r2, sp
 800e4c8:	f107 0314 	add.w	r3, r7, #20
 800e4cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e4d0:	e882 0003 	stmia.w	r2, {r0, r1}
 800e4d4:	f107 0308 	add.w	r3, r7, #8
 800e4d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e4da:	4620      	mov	r0, r4
 800e4dc:	f004 fac0 	bl	8012a60 <SDMMC_Init>
 800e4e0:	e008      	b.n	800e4f4 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e4e6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800e4ee:	2301      	movs	r3, #1
 800e4f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f004 fb8d 	bl	8012c1c <SDMMC_CmdBlockLength>
 800e502:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e504:	6a3b      	ldr	r3, [r7, #32]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d00c      	beq.n	800e524 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	4a0a      	ldr	r2, [pc, #40]	@ (800e538 <HAL_SD_ConfigWideBusOperation+0x214>)
 800e510:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e516:	6a3b      	ldr	r3, [r7, #32]
 800e518:	431a      	orrs	r2, r3
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800e51e:	2301      	movs	r3, #1
 800e520:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	2201      	movs	r2, #1
 800e528:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800e52c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800e530:	4618      	mov	r0, r3
 800e532:	372c      	adds	r7, #44	@ 0x2c
 800e534:	46bd      	mov	sp, r7
 800e536:	bd90      	pop	{r4, r7, pc}
 800e538:	1fe00fff 	.word	0x1fe00fff
 800e53c:	55e63b89 	.word	0x55e63b89
 800e540:	02faf080 	.word	0x02faf080
 800e544:	017d7840 	.word	0x017d7840

0800e548 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	b086      	sub	sp, #24
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800e550:	2300      	movs	r3, #0
 800e552:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800e554:	f107 030c 	add.w	r3, r7, #12
 800e558:	4619      	mov	r1, r3
 800e55a:	6878      	ldr	r0, [r7, #4]
 800e55c:	f000 fa40 	bl	800e9e0 <SD_SendStatus>
 800e560:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e562:	697b      	ldr	r3, [r7, #20]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d005      	beq.n	800e574 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e56c:	697b      	ldr	r3, [r7, #20]
 800e56e:	431a      	orrs	r2, r3
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	0a5b      	lsrs	r3, r3, #9
 800e578:	f003 030f 	and.w	r3, r3, #15
 800e57c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800e57e:	693b      	ldr	r3, [r7, #16]
}
 800e580:	4618      	mov	r0, r3
 800e582:	3718      	adds	r7, #24
 800e584:	46bd      	mov	sp, r7
 800e586:	bd80      	pop	{r7, pc}

0800e588 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b090      	sub	sp, #64	@ 0x40
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800e590:	2300      	movs	r3, #0
 800e592:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800e594:	f7f5 fac6 	bl	8003b24 <HAL_GetTick>
 800e598:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	4618      	mov	r0, r3
 800e5a0:	f004 fab7 	bl	8012b12 <SDMMC_GetPowerState>
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d102      	bne.n	800e5b0 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e5aa:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800e5ae:	e0b5      	b.n	800e71c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e5b4:	2b03      	cmp	r3, #3
 800e5b6:	d02e      	beq.n	800e616 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	4618      	mov	r0, r3
 800e5be:	f004 fd02 	bl	8012fc6 <SDMMC_CmdSendCID>
 800e5c2:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e5c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d001      	beq.n	800e5ce <SD_InitCard+0x46>
    {
      return errorstate;
 800e5ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5cc:	e0a6      	b.n	800e71c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	2100      	movs	r1, #0
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	f004 fae2 	bl	8012b9e <SDMMC_GetResponse>
 800e5da:	4602      	mov	r2, r0
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	2104      	movs	r1, #4
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	f004 fad9 	bl	8012b9e <SDMMC_GetResponse>
 800e5ec:	4602      	mov	r2, r0
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	2108      	movs	r1, #8
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	f004 fad0 	bl	8012b9e <SDMMC_GetResponse>
 800e5fe:	4602      	mov	r2, r0
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	210c      	movs	r1, #12
 800e60a:	4618      	mov	r0, r3
 800e60c:	f004 fac7 	bl	8012b9e <SDMMC_GetResponse>
 800e610:	4602      	mov	r2, r0
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e61a:	2b03      	cmp	r3, #3
 800e61c:	d01d      	beq.n	800e65a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800e61e:	e019      	b.n	800e654 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	f107 020a 	add.w	r2, r7, #10
 800e628:	4611      	mov	r1, r2
 800e62a:	4618      	mov	r0, r3
 800e62c:	f004 fd0a 	bl	8013044 <SDMMC_CmdSetRelAdd>
 800e630:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800e632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e634:	2b00      	cmp	r3, #0
 800e636:	d001      	beq.n	800e63c <SD_InitCard+0xb4>
      {
        return errorstate;
 800e638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e63a:	e06f      	b.n	800e71c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800e63c:	f7f5 fa72 	bl	8003b24 <HAL_GetTick>
 800e640:	4602      	mov	r2, r0
 800e642:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e644:	1ad3      	subs	r3, r2, r3
 800e646:	f241 3287 	movw	r2, #4999	@ 0x1387
 800e64a:	4293      	cmp	r3, r2
 800e64c:	d902      	bls.n	800e654 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800e64e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e652:	e063      	b.n	800e71c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800e654:	897b      	ldrh	r3, [r7, #10]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d0e2      	beq.n	800e620 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e65e:	2b03      	cmp	r3, #3
 800e660:	d036      	beq.n	800e6d0 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e662:	897b      	ldrh	r3, [r7, #10]
 800e664:	461a      	mov	r2, r3
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	681a      	ldr	r2, [r3, #0]
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e672:	041b      	lsls	r3, r3, #16
 800e674:	4619      	mov	r1, r3
 800e676:	4610      	mov	r0, r2
 800e678:	f004 fcc4 	bl	8013004 <SDMMC_CmdSendCSD>
 800e67c:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e67e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e680:	2b00      	cmp	r3, #0
 800e682:	d001      	beq.n	800e688 <SD_InitCard+0x100>
    {
      return errorstate;
 800e684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e686:	e049      	b.n	800e71c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	2100      	movs	r1, #0
 800e68e:	4618      	mov	r0, r3
 800e690:	f004 fa85 	bl	8012b9e <SDMMC_GetResponse>
 800e694:	4602      	mov	r2, r0
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	2104      	movs	r1, #4
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	f004 fa7c 	bl	8012b9e <SDMMC_GetResponse>
 800e6a6:	4602      	mov	r2, r0
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	2108      	movs	r1, #8
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	f004 fa73 	bl	8012b9e <SDMMC_GetResponse>
 800e6b8:	4602      	mov	r2, r0
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	210c      	movs	r1, #12
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	f004 fa6a 	bl	8012b9e <SDMMC_GetResponse>
 800e6ca:	4602      	mov	r2, r0
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	2104      	movs	r1, #4
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	f004 fa61 	bl	8012b9e <SDMMC_GetResponse>
 800e6dc:	4603      	mov	r3, r0
 800e6de:	0d1a      	lsrs	r2, r3, #20
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e6e4:	f107 030c 	add.w	r3, r7, #12
 800e6e8:	4619      	mov	r1, r3
 800e6ea:	6878      	ldr	r0, [r7, #4]
 800e6ec:	f7ff fb8c 	bl	800de08 <HAL_SD_GetCardCSD>
 800e6f0:	4603      	mov	r3, r0
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d002      	beq.n	800e6fc <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e6f6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800e6fa:	e00f      	b.n	800e71c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681a      	ldr	r2, [r3, #0]
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e704:	041b      	lsls	r3, r3, #16
 800e706:	4619      	mov	r1, r3
 800e708:	4610      	mov	r0, r2
 800e70a:	f004 fb73 	bl	8012df4 <SDMMC_CmdSelDesel>
 800e70e:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800e710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e712:	2b00      	cmp	r3, #0
 800e714:	d001      	beq.n	800e71a <SD_InitCard+0x192>
  {
    return errorstate;
 800e716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e718:	e000      	b.n	800e71c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e71a:	2300      	movs	r3, #0
}
 800e71c:	4618      	mov	r0, r3
 800e71e:	3740      	adds	r7, #64	@ 0x40
 800e720:	46bd      	mov	sp, r7
 800e722:	bd80      	pop	{r7, pc}

0800e724 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e724:	b580      	push	{r7, lr}
 800e726:	b086      	sub	sp, #24
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e72c:	2300      	movs	r3, #0
 800e72e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800e730:	2300      	movs	r3, #0
 800e732:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800e734:	2300      	movs	r3, #0
 800e736:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	4618      	mov	r0, r3
 800e73e:	f004 fb7c 	bl	8012e3a <SDMMC_CmdGoIdleState>
 800e742:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d001      	beq.n	800e74e <SD_PowerON+0x2a>
  {
    return errorstate;
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	e072      	b.n	800e834 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	4618      	mov	r0, r3
 800e754:	f004 fb8f 	bl	8012e76 <SDMMC_CmdOperCond>
 800e758:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e760:	d10d      	bne.n	800e77e <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	2200      	movs	r2, #0
 800e766:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	4618      	mov	r0, r3
 800e76e:	f004 fb64 	bl	8012e3a <SDMMC_CmdGoIdleState>
 800e772:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d004      	beq.n	800e784 <SD_PowerON+0x60>
    {
      return errorstate;
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	e05a      	b.n	800e834 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	2201      	movs	r2, #1
 800e782:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e788:	2b01      	cmp	r3, #1
 800e78a:	d137      	bne.n	800e7fc <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	2100      	movs	r1, #0
 800e792:	4618      	mov	r0, r3
 800e794:	f004 fb8f 	bl	8012eb6 <SDMMC_CmdAppCommand>
 800e798:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d02d      	beq.n	800e7fc <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e7a0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800e7a4:	e046      	b.n	800e834 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	2100      	movs	r1, #0
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	f004 fb82 	bl	8012eb6 <SDMMC_CmdAppCommand>
 800e7b2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d001      	beq.n	800e7be <SD_PowerON+0x9a>
    {
      return errorstate;
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	e03a      	b.n	800e834 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	491e      	ldr	r1, [pc, #120]	@ (800e83c <SD_PowerON+0x118>)
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	f004 fb99 	bl	8012efc <SDMMC_CmdAppOperCommand>
 800e7ca:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d002      	beq.n	800e7d8 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e7d2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800e7d6:	e02d      	b.n	800e834 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	2100      	movs	r1, #0
 800e7de:	4618      	mov	r0, r3
 800e7e0:	f004 f9dd 	bl	8012b9e <SDMMC_GetResponse>
 800e7e4:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e7e6:	697b      	ldr	r3, [r7, #20]
 800e7e8:	0fdb      	lsrs	r3, r3, #31
 800e7ea:	2b01      	cmp	r3, #1
 800e7ec:	d101      	bne.n	800e7f2 <SD_PowerON+0xce>
 800e7ee:	2301      	movs	r3, #1
 800e7f0:	e000      	b.n	800e7f4 <SD_PowerON+0xd0>
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	613b      	str	r3, [r7, #16]

    count++;
 800e7f6:	68bb      	ldr	r3, [r7, #8]
 800e7f8:	3301      	adds	r3, #1
 800e7fa:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e7fc:	68bb      	ldr	r3, [r7, #8]
 800e7fe:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800e802:	4293      	cmp	r3, r2
 800e804:	d802      	bhi.n	800e80c <SD_PowerON+0xe8>
 800e806:	693b      	ldr	r3, [r7, #16]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d0cc      	beq.n	800e7a6 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800e80c:	68bb      	ldr	r3, [r7, #8]
 800e80e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800e812:	4293      	cmp	r3, r2
 800e814:	d902      	bls.n	800e81c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e816:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e81a:	e00b      	b.n	800e834 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	2200      	movs	r2, #0
 800e820:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800e822:	697b      	ldr	r3, [r7, #20]
 800e824:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d002      	beq.n	800e832 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	2201      	movs	r2, #1
 800e830:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800e832:	2300      	movs	r3, #0
}
 800e834:	4618      	mov	r0, r3
 800e836:	3718      	adds	r7, #24
 800e838:	46bd      	mov	sp, r7
 800e83a:	bd80      	pop	{r7, pc}
 800e83c:	c1100000 	.word	0xc1100000

0800e840 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b08c      	sub	sp, #48	@ 0x30
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
 800e848:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e84a:	f7f5 f96b 	bl	8003b24 <HAL_GetTick>
 800e84e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800e850:	683b      	ldr	r3, [r7, #0]
 800e852:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	2100      	movs	r1, #0
 800e85a:	4618      	mov	r0, r3
 800e85c:	f004 f99f 	bl	8012b9e <SDMMC_GetResponse>
 800e860:	4603      	mov	r3, r0
 800e862:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e866:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e86a:	d102      	bne.n	800e872 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e86c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e870:	e0b0      	b.n	800e9d4 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	2140      	movs	r1, #64	@ 0x40
 800e878:	4618      	mov	r0, r3
 800e87a:	f004 f9cf 	bl	8012c1c <SDMMC_CmdBlockLength>
 800e87e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e880:	6a3b      	ldr	r3, [r7, #32]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d005      	beq.n	800e892 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800e88e:	6a3b      	ldr	r3, [r7, #32]
 800e890:	e0a0      	b.n	800e9d4 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	681a      	ldr	r2, [r3, #0]
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e89a:	041b      	lsls	r3, r3, #16
 800e89c:	4619      	mov	r1, r3
 800e89e:	4610      	mov	r0, r2
 800e8a0:	f004 fb09 	bl	8012eb6 <SDMMC_CmdAppCommand>
 800e8a4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e8a6:	6a3b      	ldr	r3, [r7, #32]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d005      	beq.n	800e8b8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800e8b4:	6a3b      	ldr	r3, [r7, #32]
 800e8b6:	e08d      	b.n	800e9d4 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e8b8:	f04f 33ff 	mov.w	r3, #4294967295
 800e8bc:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800e8be:	2340      	movs	r3, #64	@ 0x40
 800e8c0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800e8c2:	2360      	movs	r3, #96	@ 0x60
 800e8c4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e8c6:	2302      	movs	r3, #2
 800e8c8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e8ce:	2301      	movs	r3, #1
 800e8d0:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	f107 0208 	add.w	r2, r7, #8
 800e8da:	4611      	mov	r1, r2
 800e8dc:	4618      	mov	r0, r3
 800e8de:	f004 f971 	bl	8012bc4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	f004 fbf1 	bl	80130ce <SDMMC_CmdStatusRegister>
 800e8ec:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e8ee:	6a3b      	ldr	r3, [r7, #32]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d02b      	beq.n	800e94c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800e8fc:	6a3b      	ldr	r3, [r7, #32]
 800e8fe:	e069      	b.n	800e9d4 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e906:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d013      	beq.n	800e936 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800e90e:	2300      	movs	r3, #0
 800e910:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e912:	e00d      	b.n	800e930 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	4618      	mov	r0, r3
 800e91a:	f004 f8cb 	bl	8012ab4 <SDMMC_ReadFIFO>
 800e91e:	4602      	mov	r2, r0
 800e920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e922:	601a      	str	r2, [r3, #0]
        pData++;
 800e924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e926:	3304      	adds	r3, #4
 800e928:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800e92a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e92c:	3301      	adds	r3, #1
 800e92e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e932:	2b07      	cmp	r3, #7
 800e934:	d9ee      	bls.n	800e914 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e936:	f7f5 f8f5 	bl	8003b24 <HAL_GetTick>
 800e93a:	4602      	mov	r2, r0
 800e93c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e93e:	1ad3      	subs	r3, r2, r3
 800e940:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e944:	d102      	bne.n	800e94c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e946:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e94a:	e043      	b.n	800e9d4 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e952:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800e956:	2b00      	cmp	r3, #0
 800e958:	d0d2      	beq.n	800e900 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e960:	f003 0308 	and.w	r3, r3, #8
 800e964:	2b00      	cmp	r3, #0
 800e966:	d001      	beq.n	800e96c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e968:	2308      	movs	r3, #8
 800e96a:	e033      	b.n	800e9d4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e972:	f003 0302 	and.w	r3, r3, #2
 800e976:	2b00      	cmp	r3, #0
 800e978:	d001      	beq.n	800e97e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e97a:	2302      	movs	r3, #2
 800e97c:	e02a      	b.n	800e9d4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e984:	f003 0320 	and.w	r3, r3, #32
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d017      	beq.n	800e9bc <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800e98c:	2320      	movs	r3, #32
 800e98e:	e021      	b.n	800e9d4 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	4618      	mov	r0, r3
 800e996:	f004 f88d 	bl	8012ab4 <SDMMC_ReadFIFO>
 800e99a:	4602      	mov	r2, r0
 800e99c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e99e:	601a      	str	r2, [r3, #0]
    pData++;
 800e9a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9a2:	3304      	adds	r3, #4
 800e9a4:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e9a6:	f7f5 f8bd 	bl	8003b24 <HAL_GetTick>
 800e9aa:	4602      	mov	r2, r0
 800e9ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9ae:	1ad3      	subs	r3, r2, r3
 800e9b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9b4:	d102      	bne.n	800e9bc <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e9b6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e9ba:	e00b      	b.n	800e9d4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e9c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d1e2      	bne.n	800e990 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	4a03      	ldr	r2, [pc, #12]	@ (800e9dc <SD_SendSDStatus+0x19c>)
 800e9d0:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800e9d2:	2300      	movs	r3, #0
}
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	3730      	adds	r7, #48	@ 0x30
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	bd80      	pop	{r7, pc}
 800e9dc:	18000f3a 	.word	0x18000f3a

0800e9e0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b084      	sub	sp, #16
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
 800e9e8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800e9ea:	683b      	ldr	r3, [r7, #0]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d102      	bne.n	800e9f6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e9f0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e9f4:	e018      	b.n	800ea28 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	681a      	ldr	r2, [r3, #0]
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e9fe:	041b      	lsls	r3, r3, #16
 800ea00:	4619      	mov	r1, r3
 800ea02:	4610      	mov	r0, r2
 800ea04:	f004 fb40 	bl	8013088 <SDMMC_CmdSendStatus>
 800ea08:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d001      	beq.n	800ea14 <SD_SendStatus+0x34>
  {
    return errorstate;
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	e009      	b.n	800ea28 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	2100      	movs	r1, #0
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	f004 f8bf 	bl	8012b9e <SDMMC_GetResponse>
 800ea20:	4602      	mov	r2, r0
 800ea22:	683b      	ldr	r3, [r7, #0]
 800ea24:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ea26:	2300      	movs	r3, #0
}
 800ea28:	4618      	mov	r0, r3
 800ea2a:	3710      	adds	r7, #16
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	bd80      	pop	{r7, pc}

0800ea30 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b086      	sub	sp, #24
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ea38:	2300      	movs	r3, #0
 800ea3a:	60fb      	str	r3, [r7, #12]
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	2100      	movs	r1, #0
 800ea46:	4618      	mov	r0, r3
 800ea48:	f004 f8a9 	bl	8012b9e <SDMMC_GetResponse>
 800ea4c:	4603      	mov	r3, r0
 800ea4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ea52:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ea56:	d102      	bne.n	800ea5e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ea58:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ea5c:	e02f      	b.n	800eabe <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ea5e:	f107 030c 	add.w	r3, r7, #12
 800ea62:	4619      	mov	r1, r3
 800ea64:	6878      	ldr	r0, [r7, #4]
 800ea66:	f000 f879 	bl	800eb5c <SD_FindSCR>
 800ea6a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ea6c:	697b      	ldr	r3, [r7, #20]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d001      	beq.n	800ea76 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800ea72:	697b      	ldr	r3, [r7, #20]
 800ea74:	e023      	b.n	800eabe <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ea76:	693b      	ldr	r3, [r7, #16]
 800ea78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d01c      	beq.n	800eaba <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681a      	ldr	r2, [r3, #0]
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ea88:	041b      	lsls	r3, r3, #16
 800ea8a:	4619      	mov	r1, r3
 800ea8c:	4610      	mov	r0, r2
 800ea8e:	f004 fa12 	bl	8012eb6 <SDMMC_CmdAppCommand>
 800ea92:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ea94:	697b      	ldr	r3, [r7, #20]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d001      	beq.n	800ea9e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800ea9a:	697b      	ldr	r3, [r7, #20]
 800ea9c:	e00f      	b.n	800eabe <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	2102      	movs	r1, #2
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	f004 fa49 	bl	8012f3c <SDMMC_CmdBusWidth>
 800eaaa:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800eaac:	697b      	ldr	r3, [r7, #20]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d001      	beq.n	800eab6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800eab2:	697b      	ldr	r3, [r7, #20]
 800eab4:	e003      	b.n	800eabe <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800eab6:	2300      	movs	r3, #0
 800eab8:	e001      	b.n	800eabe <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800eaba:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800eabe:	4618      	mov	r0, r3
 800eac0:	3718      	adds	r7, #24
 800eac2:	46bd      	mov	sp, r7
 800eac4:	bd80      	pop	{r7, pc}

0800eac6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800eac6:	b580      	push	{r7, lr}
 800eac8:	b086      	sub	sp, #24
 800eaca:	af00      	add	r7, sp, #0
 800eacc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800eace:	2300      	movs	r3, #0
 800ead0:	60fb      	str	r3, [r7, #12]
 800ead2:	2300      	movs	r3, #0
 800ead4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	2100      	movs	r1, #0
 800eadc:	4618      	mov	r0, r3
 800eade:	f004 f85e 	bl	8012b9e <SDMMC_GetResponse>
 800eae2:	4603      	mov	r3, r0
 800eae4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800eae8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800eaec:	d102      	bne.n	800eaf4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800eaee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800eaf2:	e02f      	b.n	800eb54 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800eaf4:	f107 030c 	add.w	r3, r7, #12
 800eaf8:	4619      	mov	r1, r3
 800eafa:	6878      	ldr	r0, [r7, #4]
 800eafc:	f000 f82e 	bl	800eb5c <SD_FindSCR>
 800eb00:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800eb02:	697b      	ldr	r3, [r7, #20]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d001      	beq.n	800eb0c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800eb08:	697b      	ldr	r3, [r7, #20]
 800eb0a:	e023      	b.n	800eb54 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800eb0c:	693b      	ldr	r3, [r7, #16]
 800eb0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d01c      	beq.n	800eb50 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	681a      	ldr	r2, [r3, #0]
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eb1e:	041b      	lsls	r3, r3, #16
 800eb20:	4619      	mov	r1, r3
 800eb22:	4610      	mov	r0, r2
 800eb24:	f004 f9c7 	bl	8012eb6 <SDMMC_CmdAppCommand>
 800eb28:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800eb2a:	697b      	ldr	r3, [r7, #20]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d001      	beq.n	800eb34 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800eb30:	697b      	ldr	r3, [r7, #20]
 800eb32:	e00f      	b.n	800eb54 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	2100      	movs	r1, #0
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	f004 f9fe 	bl	8012f3c <SDMMC_CmdBusWidth>
 800eb40:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800eb42:	697b      	ldr	r3, [r7, #20]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d001      	beq.n	800eb4c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800eb48:	697b      	ldr	r3, [r7, #20]
 800eb4a:	e003      	b.n	800eb54 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	e001      	b.n	800eb54 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800eb50:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800eb54:	4618      	mov	r0, r3
 800eb56:	3718      	adds	r7, #24
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	bd80      	pop	{r7, pc}

0800eb5c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b08e      	sub	sp, #56	@ 0x38
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
 800eb64:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800eb66:	f7f4 ffdd 	bl	8003b24 <HAL_GetTick>
 800eb6a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800eb70:	2300      	movs	r3, #0
 800eb72:	60bb      	str	r3, [r7, #8]
 800eb74:	2300      	movs	r3, #0
 800eb76:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800eb78:	683b      	ldr	r3, [r7, #0]
 800eb7a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	2108      	movs	r1, #8
 800eb82:	4618      	mov	r0, r3
 800eb84:	f004 f84a 	bl	8012c1c <SDMMC_CmdBlockLength>
 800eb88:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800eb8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d001      	beq.n	800eb94 <SD_FindSCR+0x38>
  {
    return errorstate;
 800eb90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb92:	e0ad      	b.n	800ecf0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	681a      	ldr	r2, [r3, #0]
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eb9c:	041b      	lsls	r3, r3, #16
 800eb9e:	4619      	mov	r1, r3
 800eba0:	4610      	mov	r0, r2
 800eba2:	f004 f988 	bl	8012eb6 <SDMMC_CmdAppCommand>
 800eba6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800eba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d001      	beq.n	800ebb2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800ebae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebb0:	e09e      	b.n	800ecf0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ebb2:	f04f 33ff 	mov.w	r3, #4294967295
 800ebb6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800ebb8:	2308      	movs	r3, #8
 800ebba:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800ebbc:	2330      	movs	r3, #48	@ 0x30
 800ebbe:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ebc0:	2302      	movs	r3, #2
 800ebc2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ebc8:	2301      	movs	r3, #1
 800ebca:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	f107 0210 	add.w	r2, r7, #16
 800ebd4:	4611      	mov	r1, r2
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	f003 fff4 	bl	8012bc4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	f004 f9ce 	bl	8012f82 <SDMMC_CmdSendSCR>
 800ebe6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ebe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d027      	beq.n	800ec3e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800ebee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebf0:	e07e      	b.n	800ecf0 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ebf8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d113      	bne.n	800ec28 <SD_FindSCR+0xcc>
 800ec00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d110      	bne.n	800ec28 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	f003 ff52 	bl	8012ab4 <SDMMC_ReadFIFO>
 800ec10:	4603      	mov	r3, r0
 800ec12:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	4618      	mov	r0, r3
 800ec1a:	f003 ff4b 	bl	8012ab4 <SDMMC_ReadFIFO>
 800ec1e:	4603      	mov	r3, r0
 800ec20:	60fb      	str	r3, [r7, #12]
      index++;
 800ec22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec24:	3301      	adds	r3, #1
 800ec26:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ec28:	f7f4 ff7c 	bl	8003b24 <HAL_GetTick>
 800ec2c:	4602      	mov	r2, r0
 800ec2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec30:	1ad3      	subs	r3, r2, r3
 800ec32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec36:	d102      	bne.n	800ec3e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ec38:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ec3c:	e058      	b.n	800ecf0 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ec44:	f240 532a 	movw	r3, #1322	@ 0x52a
 800ec48:	4013      	ands	r3, r2
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d0d1      	beq.n	800ebf2 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec54:	f003 0308 	and.w	r3, r3, #8
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d005      	beq.n	800ec68 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	2208      	movs	r2, #8
 800ec62:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ec64:	2308      	movs	r3, #8
 800ec66:	e043      	b.n	800ecf0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec6e:	f003 0302 	and.w	r3, r3, #2
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d005      	beq.n	800ec82 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	2202      	movs	r2, #2
 800ec7c:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ec7e:	2302      	movs	r3, #2
 800ec80:	e036      	b.n	800ecf0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec88:	f003 0320 	and.w	r3, r3, #32
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d005      	beq.n	800ec9c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	2220      	movs	r2, #32
 800ec96:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800ec98:	2320      	movs	r3, #32
 800ec9a:	e029      	b.n	800ecf0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	4a15      	ldr	r2, [pc, #84]	@ (800ecf8 <SD_FindSCR+0x19c>)
 800eca2:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	061a      	lsls	r2, r3, #24
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	021b      	lsls	r3, r3, #8
 800ecac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ecb0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	0a1b      	lsrs	r3, r3, #8
 800ecb6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ecba:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	0e1b      	lsrs	r3, r3, #24
 800ecc0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ecc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecc4:	601a      	str	r2, [r3, #0]
    scr++;
 800ecc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecc8:	3304      	adds	r3, #4
 800ecca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800eccc:	68bb      	ldr	r3, [r7, #8]
 800ecce:	061a      	lsls	r2, r3, #24
 800ecd0:	68bb      	ldr	r3, [r7, #8]
 800ecd2:	021b      	lsls	r3, r3, #8
 800ecd4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ecd8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ecda:	68bb      	ldr	r3, [r7, #8]
 800ecdc:	0a1b      	lsrs	r3, r3, #8
 800ecde:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ece2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ece4:	68bb      	ldr	r3, [r7, #8]
 800ece6:	0e1b      	lsrs	r3, r3, #24
 800ece8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ecea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecec:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800ecee:	2300      	movs	r3, #0
}
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	3738      	adds	r7, #56	@ 0x38
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	bd80      	pop	{r7, pc}
 800ecf8:	18000f3a 	.word	0x18000f3a

0800ecfc <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b086      	sub	sp, #24
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed08:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed0e:	2b1f      	cmp	r3, #31
 800ed10:	d936      	bls.n	800ed80 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800ed12:	2300      	movs	r3, #0
 800ed14:	617b      	str	r3, [r7, #20]
 800ed16:	e027      	b.n	800ed68 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	f003 fec9 	bl	8012ab4 <SDMMC_ReadFIFO>
 800ed22:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	b2da      	uxtb	r2, r3
 800ed28:	693b      	ldr	r3, [r7, #16]
 800ed2a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ed2c:	693b      	ldr	r3, [r7, #16]
 800ed2e:	3301      	adds	r3, #1
 800ed30:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	0a1b      	lsrs	r3, r3, #8
 800ed36:	b2da      	uxtb	r2, r3
 800ed38:	693b      	ldr	r3, [r7, #16]
 800ed3a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ed3c:	693b      	ldr	r3, [r7, #16]
 800ed3e:	3301      	adds	r3, #1
 800ed40:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	0c1b      	lsrs	r3, r3, #16
 800ed46:	b2da      	uxtb	r2, r3
 800ed48:	693b      	ldr	r3, [r7, #16]
 800ed4a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ed4c:	693b      	ldr	r3, [r7, #16]
 800ed4e:	3301      	adds	r3, #1
 800ed50:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	0e1b      	lsrs	r3, r3, #24
 800ed56:	b2da      	uxtb	r2, r3
 800ed58:	693b      	ldr	r3, [r7, #16]
 800ed5a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ed5c:	693b      	ldr	r3, [r7, #16]
 800ed5e:	3301      	adds	r3, #1
 800ed60:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800ed62:	697b      	ldr	r3, [r7, #20]
 800ed64:	3301      	adds	r3, #1
 800ed66:	617b      	str	r3, [r7, #20]
 800ed68:	697b      	ldr	r3, [r7, #20]
 800ed6a:	2b07      	cmp	r3, #7
 800ed6c:	d9d4      	bls.n	800ed18 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	693a      	ldr	r2, [r7, #16]
 800ed72:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed78:	f1a3 0220 	sub.w	r2, r3, #32
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800ed80:	bf00      	nop
 800ed82:	3718      	adds	r7, #24
 800ed84:	46bd      	mov	sp, r7
 800ed86:	bd80      	pop	{r7, pc}

0800ed88 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b086      	sub	sp, #24
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	69db      	ldr	r3, [r3, #28]
 800ed94:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	6a1b      	ldr	r3, [r3, #32]
 800ed9a:	2b1f      	cmp	r3, #31
 800ed9c:	d93a      	bls.n	800ee14 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800ed9e:	2300      	movs	r3, #0
 800eda0:	617b      	str	r3, [r7, #20]
 800eda2:	e02b      	b.n	800edfc <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800eda4:	693b      	ldr	r3, [r7, #16]
 800eda6:	781b      	ldrb	r3, [r3, #0]
 800eda8:	60fb      	str	r3, [r7, #12]
      tmp++;
 800edaa:	693b      	ldr	r3, [r7, #16]
 800edac:	3301      	adds	r3, #1
 800edae:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800edb0:	693b      	ldr	r3, [r7, #16]
 800edb2:	781b      	ldrb	r3, [r3, #0]
 800edb4:	021a      	lsls	r2, r3, #8
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	4313      	orrs	r3, r2
 800edba:	60fb      	str	r3, [r7, #12]
      tmp++;
 800edbc:	693b      	ldr	r3, [r7, #16]
 800edbe:	3301      	adds	r3, #1
 800edc0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800edc2:	693b      	ldr	r3, [r7, #16]
 800edc4:	781b      	ldrb	r3, [r3, #0]
 800edc6:	041a      	lsls	r2, r3, #16
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	4313      	orrs	r3, r2
 800edcc:	60fb      	str	r3, [r7, #12]
      tmp++;
 800edce:	693b      	ldr	r3, [r7, #16]
 800edd0:	3301      	adds	r3, #1
 800edd2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800edd4:	693b      	ldr	r3, [r7, #16]
 800edd6:	781b      	ldrb	r3, [r3, #0]
 800edd8:	061a      	lsls	r2, r3, #24
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	4313      	orrs	r3, r2
 800edde:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ede0:	693b      	ldr	r3, [r7, #16]
 800ede2:	3301      	adds	r3, #1
 800ede4:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	f107 020c 	add.w	r2, r7, #12
 800edee:	4611      	mov	r1, r2
 800edf0:	4618      	mov	r0, r3
 800edf2:	f003 fe6c 	bl	8012ace <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800edf6:	697b      	ldr	r3, [r7, #20]
 800edf8:	3301      	adds	r3, #1
 800edfa:	617b      	str	r3, [r7, #20]
 800edfc:	697b      	ldr	r3, [r7, #20]
 800edfe:	2b07      	cmp	r3, #7
 800ee00:	d9d0      	bls.n	800eda4 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	693a      	ldr	r2, [r7, #16]
 800ee06:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	6a1b      	ldr	r3, [r3, #32]
 800ee0c:	f1a3 0220 	sub.w	r2, r3, #32
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	621a      	str	r2, [r3, #32]
  }
}
 800ee14:	bf00      	nop
 800ee16:	3718      	adds	r7, #24
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	bd80      	pop	{r7, pc}

0800ee1c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800ee1c:	b480      	push	{r7}
 800ee1e:	b083      	sub	sp, #12
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800ee24:	bf00      	nop
 800ee26:	370c      	adds	r7, #12
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2e:	4770      	bx	lr

0800ee30 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800ee30:	b480      	push	{r7}
 800ee32:	b083      	sub	sp, #12
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800ee38:	bf00      	nop
 800ee3a:	370c      	adds	r7, #12
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee42:	4770      	bx	lr

0800ee44 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800ee44:	b480      	push	{r7}
 800ee46:	b083      	sub	sp, #12
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800ee4c:	bf00      	nop
 800ee4e:	370c      	adds	r7, #12
 800ee50:	46bd      	mov	sp, r7
 800ee52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee56:	4770      	bx	lr

0800ee58 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800ee58:	b480      	push	{r7}
 800ee5a:	b083      	sub	sp, #12
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800ee60:	bf00      	nop
 800ee62:	370c      	adds	r7, #12
 800ee64:	46bd      	mov	sp, r7
 800ee66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6a:	4770      	bx	lr

0800ee6c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ee6c:	b580      	push	{r7, lr}
 800ee6e:	b084      	sub	sp, #16
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d101      	bne.n	800ee7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ee7a:	2301      	movs	r3, #1
 800ee7c:	e10f      	b.n	800f09e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	2200      	movs	r2, #0
 800ee82:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	4a87      	ldr	r2, [pc, #540]	@ (800f0a8 <HAL_SPI_Init+0x23c>)
 800ee8a:	4293      	cmp	r3, r2
 800ee8c:	d00f      	beq.n	800eeae <HAL_SPI_Init+0x42>
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	4a86      	ldr	r2, [pc, #536]	@ (800f0ac <HAL_SPI_Init+0x240>)
 800ee94:	4293      	cmp	r3, r2
 800ee96:	d00a      	beq.n	800eeae <HAL_SPI_Init+0x42>
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	4a84      	ldr	r2, [pc, #528]	@ (800f0b0 <HAL_SPI_Init+0x244>)
 800ee9e:	4293      	cmp	r3, r2
 800eea0:	d005      	beq.n	800eeae <HAL_SPI_Init+0x42>
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	68db      	ldr	r3, [r3, #12]
 800eea6:	2b0f      	cmp	r3, #15
 800eea8:	d901      	bls.n	800eeae <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800eeaa:	2301      	movs	r3, #1
 800eeac:	e0f7      	b.n	800f09e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800eeae:	6878      	ldr	r0, [r7, #4]
 800eeb0:	f001 f968 	bl	8010184 <SPI_GetPacketSize>
 800eeb4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	4a7b      	ldr	r2, [pc, #492]	@ (800f0a8 <HAL_SPI_Init+0x23c>)
 800eebc:	4293      	cmp	r3, r2
 800eebe:	d00c      	beq.n	800eeda <HAL_SPI_Init+0x6e>
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	4a79      	ldr	r2, [pc, #484]	@ (800f0ac <HAL_SPI_Init+0x240>)
 800eec6:	4293      	cmp	r3, r2
 800eec8:	d007      	beq.n	800eeda <HAL_SPI_Init+0x6e>
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	4a78      	ldr	r2, [pc, #480]	@ (800f0b0 <HAL_SPI_Init+0x244>)
 800eed0:	4293      	cmp	r3, r2
 800eed2:	d002      	beq.n	800eeda <HAL_SPI_Init+0x6e>
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	2b08      	cmp	r3, #8
 800eed8:	d811      	bhi.n	800eefe <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800eede:	4a72      	ldr	r2, [pc, #456]	@ (800f0a8 <HAL_SPI_Init+0x23c>)
 800eee0:	4293      	cmp	r3, r2
 800eee2:	d009      	beq.n	800eef8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	4a70      	ldr	r2, [pc, #448]	@ (800f0ac <HAL_SPI_Init+0x240>)
 800eeea:	4293      	cmp	r3, r2
 800eeec:	d004      	beq.n	800eef8 <HAL_SPI_Init+0x8c>
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	4a6f      	ldr	r2, [pc, #444]	@ (800f0b0 <HAL_SPI_Init+0x244>)
 800eef4:	4293      	cmp	r3, r2
 800eef6:	d104      	bne.n	800ef02 <HAL_SPI_Init+0x96>
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	2b10      	cmp	r3, #16
 800eefc:	d901      	bls.n	800ef02 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800eefe:	2301      	movs	r3, #1
 800ef00:	e0cd      	b.n	800f09e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ef08:	b2db      	uxtb	r3, r3
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d106      	bne.n	800ef1c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	2200      	movs	r2, #0
 800ef12:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ef16:	6878      	ldr	r0, [r7, #4]
 800ef18:	f7f4 fa90 	bl	800343c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	2202      	movs	r2, #2
 800ef20:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	681a      	ldr	r2, [r3, #0]
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	f022 0201 	bic.w	r2, r2, #1
 800ef32:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	689b      	ldr	r3, [r3, #8]
 800ef3a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800ef3e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	699b      	ldr	r3, [r3, #24]
 800ef44:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ef48:	d119      	bne.n	800ef7e <HAL_SPI_Init+0x112>
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	685b      	ldr	r3, [r3, #4]
 800ef4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ef52:	d103      	bne.n	800ef5c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d008      	beq.n	800ef6e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d10c      	bne.n	800ef7e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ef68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ef6c:	d107      	bne.n	800ef7e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	681a      	ldr	r2, [r3, #0]
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ef7c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	685b      	ldr	r3, [r3, #4]
 800ef82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d00f      	beq.n	800efaa <HAL_SPI_Init+0x13e>
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	68db      	ldr	r3, [r3, #12]
 800ef8e:	2b06      	cmp	r3, #6
 800ef90:	d90b      	bls.n	800efaa <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	430a      	orrs	r2, r1
 800efa6:	601a      	str	r2, [r3, #0]
 800efa8:	e007      	b.n	800efba <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	681a      	ldr	r2, [r3, #0]
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800efb8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	69da      	ldr	r2, [r3, #28]
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800efc2:	431a      	orrs	r2, r3
 800efc4:	68bb      	ldr	r3, [r7, #8]
 800efc6:	431a      	orrs	r2, r3
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800efcc:	ea42 0103 	orr.w	r1, r2, r3
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	68da      	ldr	r2, [r3, #12]
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	430a      	orrs	r2, r1
 800efda:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efe4:	431a      	orrs	r2, r3
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800efea:	431a      	orrs	r2, r3
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	699b      	ldr	r3, [r3, #24]
 800eff0:	431a      	orrs	r2, r3
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	691b      	ldr	r3, [r3, #16]
 800eff6:	431a      	orrs	r2, r3
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	695b      	ldr	r3, [r3, #20]
 800effc:	431a      	orrs	r2, r3
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	6a1b      	ldr	r3, [r3, #32]
 800f002:	431a      	orrs	r2, r3
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	685b      	ldr	r3, [r3, #4]
 800f008:	431a      	orrs	r2, r3
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f00e:	431a      	orrs	r2, r3
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	689b      	ldr	r3, [r3, #8]
 800f014:	431a      	orrs	r2, r3
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f01a:	ea42 0103 	orr.w	r1, r2, r3
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	430a      	orrs	r2, r1
 800f028:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	685b      	ldr	r3, [r3, #4]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d113      	bne.n	800f05a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	689b      	ldr	r3, [r3, #8]
 800f038:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f044:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	689b      	ldr	r3, [r3, #8]
 800f04c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800f058:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	f022 0201 	bic.w	r2, r2, #1
 800f068:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	685b      	ldr	r3, [r3, #4]
 800f06e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f072:	2b00      	cmp	r3, #0
 800f074:	d00a      	beq.n	800f08c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	68db      	ldr	r3, [r3, #12]
 800f07c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	430a      	orrs	r2, r1
 800f08a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	2200      	movs	r2, #0
 800f090:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2201      	movs	r2, #1
 800f098:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800f09c:	2300      	movs	r3, #0
}
 800f09e:	4618      	mov	r0, r3
 800f0a0:	3710      	adds	r7, #16
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	bd80      	pop	{r7, pc}
 800f0a6:	bf00      	nop
 800f0a8:	40013000 	.word	0x40013000
 800f0ac:	40003800 	.word	0x40003800
 800f0b0:	40003c00 	.word	0x40003c00

0800f0b4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b088      	sub	sp, #32
 800f0b8:	af02      	add	r7, sp, #8
 800f0ba:	60f8      	str	r0, [r7, #12]
 800f0bc:	60b9      	str	r1, [r7, #8]
 800f0be:	603b      	str	r3, [r7, #0]
 800f0c0:	4613      	mov	r3, r2
 800f0c2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	3320      	adds	r3, #32
 800f0ca:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f0cc:	f7f4 fd2a 	bl	8003b24 <HAL_GetTick>
 800f0d0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800f0d8:	b2db      	uxtb	r3, r3
 800f0da:	2b01      	cmp	r3, #1
 800f0dc:	d001      	beq.n	800f0e2 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800f0de:	2302      	movs	r3, #2
 800f0e0:	e1d1      	b.n	800f486 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f0e2:	68bb      	ldr	r3, [r7, #8]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d002      	beq.n	800f0ee <HAL_SPI_Transmit+0x3a>
 800f0e8:	88fb      	ldrh	r3, [r7, #6]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d101      	bne.n	800f0f2 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800f0ee:	2301      	movs	r3, #1
 800f0f0:	e1c9      	b.n	800f486 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800f0f8:	2b01      	cmp	r3, #1
 800f0fa:	d101      	bne.n	800f100 <HAL_SPI_Transmit+0x4c>
 800f0fc:	2302      	movs	r3, #2
 800f0fe:	e1c2      	b.n	800f486 <HAL_SPI_Transmit+0x3d2>
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	2201      	movs	r2, #1
 800f104:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	2203      	movs	r2, #3
 800f10c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	2200      	movs	r2, #0
 800f114:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	68ba      	ldr	r2, [r7, #8]
 800f11c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	88fa      	ldrh	r2, [r7, #6]
 800f122:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	88fa      	ldrh	r2, [r7, #6]
 800f12a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	2200      	movs	r2, #0
 800f132:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	2200      	movs	r2, #0
 800f138:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	2200      	movs	r2, #0
 800f140:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	2200      	movs	r2, #0
 800f148:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	2200      	movs	r2, #0
 800f14e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	689b      	ldr	r3, [r3, #8]
 800f154:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800f158:	d108      	bne.n	800f16c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	681a      	ldr	r2, [r3, #0]
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f168:	601a      	str	r2, [r3, #0]
 800f16a:	e009      	b.n	800f180 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	68db      	ldr	r3, [r3, #12]
 800f172:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800f17e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	685a      	ldr	r2, [r3, #4]
 800f186:	4b96      	ldr	r3, [pc, #600]	@ (800f3e0 <HAL_SPI_Transmit+0x32c>)
 800f188:	4013      	ands	r3, r2
 800f18a:	88f9      	ldrh	r1, [r7, #6]
 800f18c:	68fa      	ldr	r2, [r7, #12]
 800f18e:	6812      	ldr	r2, [r2, #0]
 800f190:	430b      	orrs	r3, r1
 800f192:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	681a      	ldr	r2, [r3, #0]
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	f042 0201 	orr.w	r2, r2, #1
 800f1a2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	685b      	ldr	r3, [r3, #4]
 800f1a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f1ac:	d107      	bne.n	800f1be <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	681a      	ldr	r2, [r3, #0]
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f1bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	68db      	ldr	r3, [r3, #12]
 800f1c2:	2b0f      	cmp	r3, #15
 800f1c4:	d947      	bls.n	800f256 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f1c6:	e03f      	b.n	800f248 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	695b      	ldr	r3, [r3, #20]
 800f1ce:	f003 0302 	and.w	r3, r3, #2
 800f1d2:	2b02      	cmp	r3, #2
 800f1d4:	d114      	bne.n	800f200 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	6812      	ldr	r2, [r2, #0]
 800f1e0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f1e6:	1d1a      	adds	r2, r3, #4
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f1f2:	b29b      	uxth	r3, r3
 800f1f4:	3b01      	subs	r3, #1
 800f1f6:	b29a      	uxth	r2, r3
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800f1fe:	e023      	b.n	800f248 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f200:	f7f4 fc90 	bl	8003b24 <HAL_GetTick>
 800f204:	4602      	mov	r2, r0
 800f206:	693b      	ldr	r3, [r7, #16]
 800f208:	1ad3      	subs	r3, r2, r3
 800f20a:	683a      	ldr	r2, [r7, #0]
 800f20c:	429a      	cmp	r2, r3
 800f20e:	d803      	bhi.n	800f218 <HAL_SPI_Transmit+0x164>
 800f210:	683b      	ldr	r3, [r7, #0]
 800f212:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f216:	d102      	bne.n	800f21e <HAL_SPI_Transmit+0x16a>
 800f218:	683b      	ldr	r3, [r7, #0]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d114      	bne.n	800f248 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f21e:	68f8      	ldr	r0, [r7, #12]
 800f220:	f000 fee2 	bl	800ffe8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f22a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	2201      	movs	r2, #1
 800f238:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	2200      	movs	r2, #0
 800f240:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800f244:	2303      	movs	r3, #3
 800f246:	e11e      	b.n	800f486 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f24e:	b29b      	uxth	r3, r3
 800f250:	2b00      	cmp	r3, #0
 800f252:	d1b9      	bne.n	800f1c8 <HAL_SPI_Transmit+0x114>
 800f254:	e0f1      	b.n	800f43a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	68db      	ldr	r3, [r3, #12]
 800f25a:	2b07      	cmp	r3, #7
 800f25c:	f240 80e6 	bls.w	800f42c <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f260:	e05d      	b.n	800f31e <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	695b      	ldr	r3, [r3, #20]
 800f268:	f003 0302 	and.w	r3, r3, #2
 800f26c:	2b02      	cmp	r3, #2
 800f26e:	d132      	bne.n	800f2d6 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f276:	b29b      	uxth	r3, r3
 800f278:	2b01      	cmp	r3, #1
 800f27a:	d918      	bls.n	800f2ae <HAL_SPI_Transmit+0x1fa>
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f280:	2b00      	cmp	r3, #0
 800f282:	d014      	beq.n	800f2ae <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	6812      	ldr	r2, [r2, #0]
 800f28e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f294:	1d1a      	adds	r2, r3, #4
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f2a0:	b29b      	uxth	r3, r3
 800f2a2:	3b02      	subs	r3, #2
 800f2a4:	b29a      	uxth	r2, r3
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800f2ac:	e037      	b.n	800f31e <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f2b2:	881a      	ldrh	r2, [r3, #0]
 800f2b4:	697b      	ldr	r3, [r7, #20]
 800f2b6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f2bc:	1c9a      	adds	r2, r3, #2
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f2c8:	b29b      	uxth	r3, r3
 800f2ca:	3b01      	subs	r3, #1
 800f2cc:	b29a      	uxth	r2, r3
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800f2d4:	e023      	b.n	800f31e <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f2d6:	f7f4 fc25 	bl	8003b24 <HAL_GetTick>
 800f2da:	4602      	mov	r2, r0
 800f2dc:	693b      	ldr	r3, [r7, #16]
 800f2de:	1ad3      	subs	r3, r2, r3
 800f2e0:	683a      	ldr	r2, [r7, #0]
 800f2e2:	429a      	cmp	r2, r3
 800f2e4:	d803      	bhi.n	800f2ee <HAL_SPI_Transmit+0x23a>
 800f2e6:	683b      	ldr	r3, [r7, #0]
 800f2e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2ec:	d102      	bne.n	800f2f4 <HAL_SPI_Transmit+0x240>
 800f2ee:	683b      	ldr	r3, [r7, #0]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d114      	bne.n	800f31e <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f2f4:	68f8      	ldr	r0, [r7, #12]
 800f2f6:	f000 fe77 	bl	800ffe8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f300:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	2201      	movs	r2, #1
 800f30e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	2200      	movs	r2, #0
 800f316:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800f31a:	2303      	movs	r3, #3
 800f31c:	e0b3      	b.n	800f486 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f324:	b29b      	uxth	r3, r3
 800f326:	2b00      	cmp	r3, #0
 800f328:	d19b      	bne.n	800f262 <HAL_SPI_Transmit+0x1ae>
 800f32a:	e086      	b.n	800f43a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	695b      	ldr	r3, [r3, #20]
 800f332:	f003 0302 	and.w	r3, r3, #2
 800f336:	2b02      	cmp	r3, #2
 800f338:	d154      	bne.n	800f3e4 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f340:	b29b      	uxth	r3, r3
 800f342:	2b03      	cmp	r3, #3
 800f344:	d918      	bls.n	800f378 <HAL_SPI_Transmit+0x2c4>
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f34a:	2b40      	cmp	r3, #64	@ 0x40
 800f34c:	d914      	bls.n	800f378 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	6812      	ldr	r2, [r2, #0]
 800f358:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f35e:	1d1a      	adds	r2, r3, #4
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f36a:	b29b      	uxth	r3, r3
 800f36c:	3b04      	subs	r3, #4
 800f36e:	b29a      	uxth	r2, r3
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800f376:	e059      	b.n	800f42c <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f37e:	b29b      	uxth	r3, r3
 800f380:	2b01      	cmp	r3, #1
 800f382:	d917      	bls.n	800f3b4 <HAL_SPI_Transmit+0x300>
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d013      	beq.n	800f3b4 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f390:	881a      	ldrh	r2, [r3, #0]
 800f392:	697b      	ldr	r3, [r7, #20]
 800f394:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f39a:	1c9a      	adds	r2, r3, #2
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f3a6:	b29b      	uxth	r3, r3
 800f3a8:	3b02      	subs	r3, #2
 800f3aa:	b29a      	uxth	r2, r3
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800f3b2:	e03b      	b.n	800f42c <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	3320      	adds	r3, #32
 800f3be:	7812      	ldrb	r2, [r2, #0]
 800f3c0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f3c6:	1c5a      	adds	r2, r3, #1
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f3d2:	b29b      	uxth	r3, r3
 800f3d4:	3b01      	subs	r3, #1
 800f3d6:	b29a      	uxth	r2, r3
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800f3de:	e025      	b.n	800f42c <HAL_SPI_Transmit+0x378>
 800f3e0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f3e4:	f7f4 fb9e 	bl	8003b24 <HAL_GetTick>
 800f3e8:	4602      	mov	r2, r0
 800f3ea:	693b      	ldr	r3, [r7, #16]
 800f3ec:	1ad3      	subs	r3, r2, r3
 800f3ee:	683a      	ldr	r2, [r7, #0]
 800f3f0:	429a      	cmp	r2, r3
 800f3f2:	d803      	bhi.n	800f3fc <HAL_SPI_Transmit+0x348>
 800f3f4:	683b      	ldr	r3, [r7, #0]
 800f3f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3fa:	d102      	bne.n	800f402 <HAL_SPI_Transmit+0x34e>
 800f3fc:	683b      	ldr	r3, [r7, #0]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d114      	bne.n	800f42c <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f402:	68f8      	ldr	r0, [r7, #12]
 800f404:	f000 fdf0 	bl	800ffe8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f40e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	2201      	movs	r2, #1
 800f41c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	2200      	movs	r2, #0
 800f424:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800f428:	2303      	movs	r3, #3
 800f42a:	e02c      	b.n	800f486 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f432:	b29b      	uxth	r3, r3
 800f434:	2b00      	cmp	r3, #0
 800f436:	f47f af79 	bne.w	800f32c <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800f43a:	693b      	ldr	r3, [r7, #16]
 800f43c:	9300      	str	r3, [sp, #0]
 800f43e:	683b      	ldr	r3, [r7, #0]
 800f440:	2200      	movs	r2, #0
 800f442:	2108      	movs	r1, #8
 800f444:	68f8      	ldr	r0, [r7, #12]
 800f446:	f000 fe6f 	bl	8010128 <SPI_WaitOnFlagUntilTimeout>
 800f44a:	4603      	mov	r3, r0
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d007      	beq.n	800f460 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f456:	f043 0220 	orr.w	r2, r3, #32
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f460:	68f8      	ldr	r0, [r7, #12]
 800f462:	f000 fdc1 	bl	800ffe8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	2201      	movs	r2, #1
 800f46a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	2200      	movs	r2, #0
 800f472:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d001      	beq.n	800f484 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800f480:	2301      	movs	r3, #1
 800f482:	e000      	b.n	800f486 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800f484:	2300      	movs	r3, #0
  }
}
 800f486:	4618      	mov	r0, r3
 800f488:	3718      	adds	r7, #24
 800f48a:	46bd      	mov	sp, r7
 800f48c:	bd80      	pop	{r7, pc}
 800f48e:	bf00      	nop

0800f490 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f490:	b580      	push	{r7, lr}
 800f492:	b088      	sub	sp, #32
 800f494:	af00      	add	r7, sp, #0
 800f496:	60f8      	str	r0, [r7, #12]
 800f498:	60b9      	str	r1, [r7, #8]
 800f49a:	603b      	str	r3, [r7, #0]
 800f49c:	4613      	mov	r3, r2
 800f49e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f4a4:	095b      	lsrs	r3, r3, #5
 800f4a6:	b29b      	uxth	r3, r3
 800f4a8:	3301      	adds	r3, #1
 800f4aa:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	3330      	adds	r3, #48	@ 0x30
 800f4b2:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f4b4:	f7f4 fb36 	bl	8003b24 <HAL_GetTick>
 800f4b8:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800f4c0:	b2db      	uxtb	r3, r3
 800f4c2:	2b01      	cmp	r3, #1
 800f4c4:	d001      	beq.n	800f4ca <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800f4c6:	2302      	movs	r3, #2
 800f4c8:	e250      	b.n	800f96c <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f4ca:	68bb      	ldr	r3, [r7, #8]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d002      	beq.n	800f4d6 <HAL_SPI_Receive+0x46>
 800f4d0:	88fb      	ldrh	r3, [r7, #6]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d101      	bne.n	800f4da <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800f4d6:	2301      	movs	r3, #1
 800f4d8:	e248      	b.n	800f96c <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800f4e0:	2b01      	cmp	r3, #1
 800f4e2:	d101      	bne.n	800f4e8 <HAL_SPI_Receive+0x58>
 800f4e4:	2302      	movs	r3, #2
 800f4e6:	e241      	b.n	800f96c <HAL_SPI_Receive+0x4dc>
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	2201      	movs	r2, #1
 800f4ec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	2204      	movs	r2, #4
 800f4f4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	68ba      	ldr	r2, [r7, #8]
 800f504:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	88fa      	ldrh	r2, [r7, #6]
 800f50a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	88fa      	ldrh	r2, [r7, #6]
 800f512:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	2200      	movs	r2, #0
 800f51a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	2200      	movs	r2, #0
 800f520:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	2200      	movs	r2, #0
 800f528:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	2200      	movs	r2, #0
 800f530:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	2200      	movs	r2, #0
 800f536:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	689b      	ldr	r3, [r3, #8]
 800f53c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800f540:	d108      	bne.n	800f554 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	681a      	ldr	r2, [r3, #0]
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800f550:	601a      	str	r2, [r3, #0]
 800f552:	e009      	b.n	800f568 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	68db      	ldr	r3, [r3, #12]
 800f55a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800f566:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	685a      	ldr	r2, [r3, #4]
 800f56e:	4b95      	ldr	r3, [pc, #596]	@ (800f7c4 <HAL_SPI_Receive+0x334>)
 800f570:	4013      	ands	r3, r2
 800f572:	88f9      	ldrh	r1, [r7, #6]
 800f574:	68fa      	ldr	r2, [r7, #12]
 800f576:	6812      	ldr	r2, [r2, #0]
 800f578:	430b      	orrs	r3, r1
 800f57a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	681a      	ldr	r2, [r3, #0]
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	f042 0201 	orr.w	r2, r2, #1
 800f58a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	685b      	ldr	r3, [r3, #4]
 800f590:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f594:	d107      	bne.n	800f5a6 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	681a      	ldr	r2, [r3, #0]
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f5a4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	68db      	ldr	r3, [r3, #12]
 800f5aa:	2b0f      	cmp	r3, #15
 800f5ac:	d96c      	bls.n	800f688 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f5ae:	e064      	b.n	800f67a <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	695b      	ldr	r3, [r3, #20]
 800f5b6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	695b      	ldr	r3, [r3, #20]
 800f5be:	f003 0301 	and.w	r3, r3, #1
 800f5c2:	2b01      	cmp	r3, #1
 800f5c4:	d114      	bne.n	800f5f0 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	681a      	ldr	r2, [r3, #0]
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f5ce:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800f5d0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f5d6:	1d1a      	adds	r2, r3, #4
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f5e2:	b29b      	uxth	r3, r3
 800f5e4:	3b01      	subs	r3, #1
 800f5e6:	b29a      	uxth	r2, r3
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f5ee:	e044      	b.n	800f67a <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f5f6:	b29b      	uxth	r3, r3
 800f5f8:	8bfa      	ldrh	r2, [r7, #30]
 800f5fa:	429a      	cmp	r2, r3
 800f5fc:	d919      	bls.n	800f632 <HAL_SPI_Receive+0x1a2>
 800f5fe:	693b      	ldr	r3, [r7, #16]
 800f600:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f604:	2b00      	cmp	r3, #0
 800f606:	d014      	beq.n	800f632 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	681a      	ldr	r2, [r3, #0]
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f610:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800f612:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f618:	1d1a      	adds	r2, r3, #4
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f624:	b29b      	uxth	r3, r3
 800f626:	3b01      	subs	r3, #1
 800f628:	b29a      	uxth	r2, r3
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f630:	e023      	b.n	800f67a <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f632:	f7f4 fa77 	bl	8003b24 <HAL_GetTick>
 800f636:	4602      	mov	r2, r0
 800f638:	697b      	ldr	r3, [r7, #20]
 800f63a:	1ad3      	subs	r3, r2, r3
 800f63c:	683a      	ldr	r2, [r7, #0]
 800f63e:	429a      	cmp	r2, r3
 800f640:	d803      	bhi.n	800f64a <HAL_SPI_Receive+0x1ba>
 800f642:	683b      	ldr	r3, [r7, #0]
 800f644:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f648:	d102      	bne.n	800f650 <HAL_SPI_Receive+0x1c0>
 800f64a:	683b      	ldr	r3, [r7, #0]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d114      	bne.n	800f67a <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f650:	68f8      	ldr	r0, [r7, #12]
 800f652:	f000 fcc9 	bl	800ffe8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f65c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	2201      	movs	r2, #1
 800f66a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	2200      	movs	r2, #0
 800f672:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800f676:	2303      	movs	r3, #3
 800f678:	e178      	b.n	800f96c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f680:	b29b      	uxth	r3, r3
 800f682:	2b00      	cmp	r3, #0
 800f684:	d194      	bne.n	800f5b0 <HAL_SPI_Receive+0x120>
 800f686:	e15e      	b.n	800f946 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	68db      	ldr	r3, [r3, #12]
 800f68c:	2b07      	cmp	r3, #7
 800f68e:	f240 8153 	bls.w	800f938 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f692:	e08f      	b.n	800f7b4 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	695b      	ldr	r3, [r3, #20]
 800f69a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	695b      	ldr	r3, [r3, #20]
 800f6a2:	f003 0301 	and.w	r3, r3, #1
 800f6a6:	2b01      	cmp	r3, #1
 800f6a8:	d114      	bne.n	800f6d4 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f6ae:	69ba      	ldr	r2, [r7, #24]
 800f6b0:	8812      	ldrh	r2, [r2, #0]
 800f6b2:	b292      	uxth	r2, r2
 800f6b4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f6ba:	1c9a      	adds	r2, r3, #2
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f6c6:	b29b      	uxth	r3, r3
 800f6c8:	3b01      	subs	r3, #1
 800f6ca:	b29a      	uxth	r2, r3
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f6d2:	e06f      	b.n	800f7b4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f6da:	b29b      	uxth	r3, r3
 800f6dc:	8bfa      	ldrh	r2, [r7, #30]
 800f6de:	429a      	cmp	r2, r3
 800f6e0:	d924      	bls.n	800f72c <HAL_SPI_Receive+0x29c>
 800f6e2:	693b      	ldr	r3, [r7, #16]
 800f6e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d01f      	beq.n	800f72c <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f6f0:	69ba      	ldr	r2, [r7, #24]
 800f6f2:	8812      	ldrh	r2, [r2, #0]
 800f6f4:	b292      	uxth	r2, r2
 800f6f6:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f6fc:	1c9a      	adds	r2, r3, #2
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f706:	69ba      	ldr	r2, [r7, #24]
 800f708:	8812      	ldrh	r2, [r2, #0]
 800f70a:	b292      	uxth	r2, r2
 800f70c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f712:	1c9a      	adds	r2, r3, #2
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f71e:	b29b      	uxth	r3, r3
 800f720:	3b02      	subs	r3, #2
 800f722:	b29a      	uxth	r2, r3
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f72a:	e043      	b.n	800f7b4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f732:	b29b      	uxth	r3, r3
 800f734:	2b01      	cmp	r3, #1
 800f736:	d119      	bne.n	800f76c <HAL_SPI_Receive+0x2dc>
 800f738:	693b      	ldr	r3, [r7, #16]
 800f73a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d014      	beq.n	800f76c <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f746:	69ba      	ldr	r2, [r7, #24]
 800f748:	8812      	ldrh	r2, [r2, #0]
 800f74a:	b292      	uxth	r2, r2
 800f74c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f752:	1c9a      	adds	r2, r3, #2
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f75e:	b29b      	uxth	r3, r3
 800f760:	3b01      	subs	r3, #1
 800f762:	b29a      	uxth	r2, r3
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f76a:	e023      	b.n	800f7b4 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f76c:	f7f4 f9da 	bl	8003b24 <HAL_GetTick>
 800f770:	4602      	mov	r2, r0
 800f772:	697b      	ldr	r3, [r7, #20]
 800f774:	1ad3      	subs	r3, r2, r3
 800f776:	683a      	ldr	r2, [r7, #0]
 800f778:	429a      	cmp	r2, r3
 800f77a:	d803      	bhi.n	800f784 <HAL_SPI_Receive+0x2f4>
 800f77c:	683b      	ldr	r3, [r7, #0]
 800f77e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f782:	d102      	bne.n	800f78a <HAL_SPI_Receive+0x2fa>
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d114      	bne.n	800f7b4 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f78a:	68f8      	ldr	r0, [r7, #12]
 800f78c:	f000 fc2c 	bl	800ffe8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f796:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	2201      	movs	r2, #1
 800f7a4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	2200      	movs	r2, #0
 800f7ac:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800f7b0:	2303      	movs	r3, #3
 800f7b2:	e0db      	b.n	800f96c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f7ba:	b29b      	uxth	r3, r3
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	f47f af69 	bne.w	800f694 <HAL_SPI_Receive+0x204>
 800f7c2:	e0c0      	b.n	800f946 <HAL_SPI_Receive+0x4b6>
 800f7c4:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	695b      	ldr	r3, [r3, #20]
 800f7ce:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	695b      	ldr	r3, [r3, #20]
 800f7d6:	f003 0301 	and.w	r3, r3, #1
 800f7da:	2b01      	cmp	r3, #1
 800f7dc:	d117      	bne.n	800f80e <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f7ea:	7812      	ldrb	r2, [r2, #0]
 800f7ec:	b2d2      	uxtb	r2, r2
 800f7ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f7f4:	1c5a      	adds	r2, r3, #1
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f800:	b29b      	uxth	r3, r3
 800f802:	3b01      	subs	r3, #1
 800f804:	b29a      	uxth	r2, r3
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f80c:	e094      	b.n	800f938 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f814:	b29b      	uxth	r3, r3
 800f816:	8bfa      	ldrh	r2, [r7, #30]
 800f818:	429a      	cmp	r2, r3
 800f81a:	d946      	bls.n	800f8aa <HAL_SPI_Receive+0x41a>
 800f81c:	693b      	ldr	r3, [r7, #16]
 800f81e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f822:	2b00      	cmp	r3, #0
 800f824:	d041      	beq.n	800f8aa <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f832:	7812      	ldrb	r2, [r2, #0]
 800f834:	b2d2      	uxtb	r2, r2
 800f836:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f83c:	1c5a      	adds	r2, r3, #1
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f84e:	7812      	ldrb	r2, [r2, #0]
 800f850:	b2d2      	uxtb	r2, r2
 800f852:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f858:	1c5a      	adds	r2, r3, #1
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f86a:	7812      	ldrb	r2, [r2, #0]
 800f86c:	b2d2      	uxtb	r2, r2
 800f86e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f874:	1c5a      	adds	r2, r3, #1
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f886:	7812      	ldrb	r2, [r2, #0]
 800f888:	b2d2      	uxtb	r2, r2
 800f88a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f890:	1c5a      	adds	r2, r3, #1
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f89c:	b29b      	uxth	r3, r3
 800f89e:	3b04      	subs	r3, #4
 800f8a0:	b29a      	uxth	r2, r3
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f8a8:	e046      	b.n	800f938 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f8b0:	b29b      	uxth	r3, r3
 800f8b2:	2b03      	cmp	r3, #3
 800f8b4:	d81c      	bhi.n	800f8f0 <HAL_SPI_Receive+0x460>
 800f8b6:	693b      	ldr	r3, [r7, #16]
 800f8b8:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d017      	beq.n	800f8f0 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f8cc:	7812      	ldrb	r2, [r2, #0]
 800f8ce:	b2d2      	uxtb	r2, r2
 800f8d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f8d6:	1c5a      	adds	r2, r3, #1
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f8e2:	b29b      	uxth	r3, r3
 800f8e4:	3b01      	subs	r3, #1
 800f8e6:	b29a      	uxth	r2, r3
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f8ee:	e023      	b.n	800f938 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f8f0:	f7f4 f918 	bl	8003b24 <HAL_GetTick>
 800f8f4:	4602      	mov	r2, r0
 800f8f6:	697b      	ldr	r3, [r7, #20]
 800f8f8:	1ad3      	subs	r3, r2, r3
 800f8fa:	683a      	ldr	r2, [r7, #0]
 800f8fc:	429a      	cmp	r2, r3
 800f8fe:	d803      	bhi.n	800f908 <HAL_SPI_Receive+0x478>
 800f900:	683b      	ldr	r3, [r7, #0]
 800f902:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f906:	d102      	bne.n	800f90e <HAL_SPI_Receive+0x47e>
 800f908:	683b      	ldr	r3, [r7, #0]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d114      	bne.n	800f938 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f90e:	68f8      	ldr	r0, [r7, #12]
 800f910:	f000 fb6a 	bl	800ffe8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f91a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	2201      	movs	r2, #1
 800f928:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	2200      	movs	r2, #0
 800f930:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800f934:	2303      	movs	r3, #3
 800f936:	e019      	b.n	800f96c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f93e:	b29b      	uxth	r3, r3
 800f940:	2b00      	cmp	r3, #0
 800f942:	f47f af41 	bne.w	800f7c8 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f946:	68f8      	ldr	r0, [r7, #12]
 800f948:	f000 fb4e 	bl	800ffe8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	2201      	movs	r2, #1
 800f950:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	2200      	movs	r2, #0
 800f958:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f962:	2b00      	cmp	r3, #0
 800f964:	d001      	beq.n	800f96a <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800f966:	2301      	movs	r3, #1
 800f968:	e000      	b.n	800f96c <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800f96a:	2300      	movs	r3, #0
  }
}
 800f96c:	4618      	mov	r0, r3
 800f96e:	3720      	adds	r7, #32
 800f970:	46bd      	mov	sp, r7
 800f972:	bd80      	pop	{r7, pc}

0800f974 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800f974:	b580      	push	{r7, lr}
 800f976:	b08e      	sub	sp, #56	@ 0x38
 800f978:	af02      	add	r7, sp, #8
 800f97a:	60f8      	str	r0, [r7, #12]
 800f97c:	60b9      	str	r1, [r7, #8]
 800f97e:	607a      	str	r2, [r7, #4]
 800f980:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	3320      	adds	r3, #32
 800f988:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	3330      	adds	r3, #48	@ 0x30
 800f990:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f996:	095b      	lsrs	r3, r3, #5
 800f998:	b29b      	uxth	r3, r3
 800f99a:	3301      	adds	r3, #1
 800f99c:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f99e:	f7f4 f8c1 	bl	8003b24 <HAL_GetTick>
 800f9a2:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800f9a4:	887b      	ldrh	r3, [r7, #2]
 800f9a6:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800f9a8:	887b      	ldrh	r3, [r7, #2]
 800f9aa:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800f9b2:	b2db      	uxtb	r3, r3
 800f9b4:	2b01      	cmp	r3, #1
 800f9b6:	d001      	beq.n	800f9bc <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800f9b8:	2302      	movs	r3, #2
 800f9ba:	e310      	b.n	800ffde <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800f9bc:	68bb      	ldr	r3, [r7, #8]
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d005      	beq.n	800f9ce <HAL_SPI_TransmitReceive+0x5a>
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d002      	beq.n	800f9ce <HAL_SPI_TransmitReceive+0x5a>
 800f9c8:	887b      	ldrh	r3, [r7, #2]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d101      	bne.n	800f9d2 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800f9ce:	2301      	movs	r3, #1
 800f9d0:	e305      	b.n	800ffde <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800f9d8:	2b01      	cmp	r3, #1
 800f9da:	d101      	bne.n	800f9e0 <HAL_SPI_TransmitReceive+0x6c>
 800f9dc:	2302      	movs	r3, #2
 800f9de:	e2fe      	b.n	800ffde <HAL_SPI_TransmitReceive+0x66a>
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	2201      	movs	r2, #1
 800f9e4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	2205      	movs	r2, #5
 800f9ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	2200      	movs	r2, #0
 800f9f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	687a      	ldr	r2, [r7, #4]
 800f9fc:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	887a      	ldrh	r2, [r7, #2]
 800fa02:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	887a      	ldrh	r2, [r7, #2]
 800fa0a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	68ba      	ldr	r2, [r7, #8]
 800fa12:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	887a      	ldrh	r2, [r7, #2]
 800fa18:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	887a      	ldrh	r2, [r7, #2]
 800fa20:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	2200      	movs	r2, #0
 800fa28:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	2200      	movs	r2, #0
 800fa2e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	68da      	ldr	r2, [r3, #12]
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800fa3e:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	4a70      	ldr	r2, [pc, #448]	@ (800fc08 <HAL_SPI_TransmitReceive+0x294>)
 800fa46:	4293      	cmp	r3, r2
 800fa48:	d009      	beq.n	800fa5e <HAL_SPI_TransmitReceive+0xea>
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	4a6f      	ldr	r2, [pc, #444]	@ (800fc0c <HAL_SPI_TransmitReceive+0x298>)
 800fa50:	4293      	cmp	r3, r2
 800fa52:	d004      	beq.n	800fa5e <HAL_SPI_TransmitReceive+0xea>
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	4a6d      	ldr	r2, [pc, #436]	@ (800fc10 <HAL_SPI_TransmitReceive+0x29c>)
 800fa5a:	4293      	cmp	r3, r2
 800fa5c:	d102      	bne.n	800fa64 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800fa5e:	2310      	movs	r3, #16
 800fa60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fa62:	e001      	b.n	800fa68 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800fa64:	2308      	movs	r3, #8
 800fa66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	685a      	ldr	r2, [r3, #4]
 800fa6e:	4b69      	ldr	r3, [pc, #420]	@ (800fc14 <HAL_SPI_TransmitReceive+0x2a0>)
 800fa70:	4013      	ands	r3, r2
 800fa72:	8879      	ldrh	r1, [r7, #2]
 800fa74:	68fa      	ldr	r2, [r7, #12]
 800fa76:	6812      	ldr	r2, [r2, #0]
 800fa78:	430b      	orrs	r3, r1
 800fa7a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	681a      	ldr	r2, [r3, #0]
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	f042 0201 	orr.w	r2, r2, #1
 800fa8a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	685b      	ldr	r3, [r3, #4]
 800fa90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800fa94:	d107      	bne.n	800faa6 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	681a      	ldr	r2, [r3, #0]
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800faa4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	68db      	ldr	r3, [r3, #12]
 800faaa:	2b0f      	cmp	r3, #15
 800faac:	f240 80a2 	bls.w	800fbf4 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800fab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fab2:	089b      	lsrs	r3, r3, #2
 800fab4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800fab6:	e094      	b.n	800fbe2 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	695b      	ldr	r3, [r3, #20]
 800fabe:	f003 0302 	and.w	r3, r3, #2
 800fac2:	2b02      	cmp	r3, #2
 800fac4:	d120      	bne.n	800fb08 <HAL_SPI_TransmitReceive+0x194>
 800fac6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d01d      	beq.n	800fb08 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800facc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800face:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800fad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fad2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800fad4:	429a      	cmp	r2, r3
 800fad6:	d217      	bcs.n	800fb08 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	6812      	ldr	r2, [r2, #0]
 800fae2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fae8:	1d1a      	adds	r2, r3, #4
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800faf4:	b29b      	uxth	r3, r3
 800faf6:	3b01      	subs	r3, #1
 800faf8:	b29a      	uxth	r2, r3
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800fb06:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	695b      	ldr	r3, [r3, #20]
 800fb0e:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800fb10:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d065      	beq.n	800fbe2 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	695b      	ldr	r3, [r3, #20]
 800fb1c:	f003 0301 	and.w	r3, r3, #1
 800fb20:	2b01      	cmp	r3, #1
 800fb22:	d118      	bne.n	800fb56 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	681a      	ldr	r2, [r3, #0]
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fb2c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800fb2e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fb34:	1d1a      	adds	r2, r3, #4
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fb40:	b29b      	uxth	r3, r3
 800fb42:	3b01      	subs	r3, #1
 800fb44:	b29a      	uxth	r2, r3
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fb52:	853b      	strh	r3, [r7, #40]	@ 0x28
 800fb54:	e045      	b.n	800fbe2 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800fb56:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800fb58:	8bfb      	ldrh	r3, [r7, #30]
 800fb5a:	429a      	cmp	r2, r3
 800fb5c:	d21d      	bcs.n	800fb9a <HAL_SPI_TransmitReceive+0x226>
 800fb5e:	697b      	ldr	r3, [r7, #20]
 800fb60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d018      	beq.n	800fb9a <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	681a      	ldr	r2, [r3, #0]
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fb70:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800fb72:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fb78:	1d1a      	adds	r2, r3, #4
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fb84:	b29b      	uxth	r3, r3
 800fb86:	3b01      	subs	r3, #1
 800fb88:	b29a      	uxth	r2, r3
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fb96:	853b      	strh	r3, [r7, #40]	@ 0x28
 800fb98:	e023      	b.n	800fbe2 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fb9a:	f7f3 ffc3 	bl	8003b24 <HAL_GetTick>
 800fb9e:	4602      	mov	r2, r0
 800fba0:	69bb      	ldr	r3, [r7, #24]
 800fba2:	1ad3      	subs	r3, r2, r3
 800fba4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fba6:	429a      	cmp	r2, r3
 800fba8:	d803      	bhi.n	800fbb2 <HAL_SPI_TransmitReceive+0x23e>
 800fbaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbb0:	d102      	bne.n	800fbb8 <HAL_SPI_TransmitReceive+0x244>
 800fbb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d114      	bne.n	800fbe2 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800fbb8:	68f8      	ldr	r0, [r7, #12]
 800fbba:	f000 fa15 	bl	800ffe8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fbc4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	2201      	movs	r2, #1
 800fbd2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	2200      	movs	r2, #0
 800fbda:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800fbde:	2303      	movs	r3, #3
 800fbe0:	e1fd      	b.n	800ffde <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800fbe2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	f47f af67 	bne.w	800fab8 <HAL_SPI_TransmitReceive+0x144>
 800fbea:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	f47f af63 	bne.w	800fab8 <HAL_SPI_TransmitReceive+0x144>
 800fbf2:	e1ce      	b.n	800ff92 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	68db      	ldr	r3, [r3, #12]
 800fbf8:	2b07      	cmp	r3, #7
 800fbfa:	f240 81c2 	bls.w	800ff82 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800fbfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc00:	085b      	lsrs	r3, r3, #1
 800fc02:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800fc04:	e0c9      	b.n	800fd9a <HAL_SPI_TransmitReceive+0x426>
 800fc06:	bf00      	nop
 800fc08:	40013000 	.word	0x40013000
 800fc0c:	40003800 	.word	0x40003800
 800fc10:	40003c00 	.word	0x40003c00
 800fc14:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	695b      	ldr	r3, [r3, #20]
 800fc1e:	f003 0302 	and.w	r3, r3, #2
 800fc22:	2b02      	cmp	r3, #2
 800fc24:	d11f      	bne.n	800fc66 <HAL_SPI_TransmitReceive+0x2f2>
 800fc26:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d01c      	beq.n	800fc66 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800fc2c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800fc2e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800fc30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc32:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800fc34:	429a      	cmp	r2, r3
 800fc36:	d216      	bcs.n	800fc66 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fc3c:	881a      	ldrh	r2, [r3, #0]
 800fc3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc40:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fc46:	1c9a      	adds	r2, r3, #2
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800fc52:	b29b      	uxth	r3, r3
 800fc54:	3b01      	subs	r3, #1
 800fc56:	b29a      	uxth	r2, r3
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800fc64:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	695b      	ldr	r3, [r3, #20]
 800fc6c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800fc6e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	f000 8092 	beq.w	800fd9a <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	695b      	ldr	r3, [r3, #20]
 800fc7c:	f003 0301 	and.w	r3, r3, #1
 800fc80:	2b01      	cmp	r3, #1
 800fc82:	d118      	bne.n	800fcb6 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fc88:	6a3a      	ldr	r2, [r7, #32]
 800fc8a:	8812      	ldrh	r2, [r2, #0]
 800fc8c:	b292      	uxth	r2, r2
 800fc8e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fc94:	1c9a      	adds	r2, r3, #2
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fca0:	b29b      	uxth	r3, r3
 800fca2:	3b01      	subs	r3, #1
 800fca4:	b29a      	uxth	r2, r3
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fcb2:	853b      	strh	r3, [r7, #40]	@ 0x28
 800fcb4:	e071      	b.n	800fd9a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800fcb6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800fcb8:	8bfb      	ldrh	r3, [r7, #30]
 800fcba:	429a      	cmp	r2, r3
 800fcbc:	d228      	bcs.n	800fd10 <HAL_SPI_TransmitReceive+0x39c>
 800fcbe:	697b      	ldr	r3, [r7, #20]
 800fcc0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d023      	beq.n	800fd10 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fccc:	6a3a      	ldr	r2, [r7, #32]
 800fcce:	8812      	ldrh	r2, [r2, #0]
 800fcd0:	b292      	uxth	r2, r2
 800fcd2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fcd8:	1c9a      	adds	r2, r3, #2
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fce2:	6a3a      	ldr	r2, [r7, #32]
 800fce4:	8812      	ldrh	r2, [r2, #0]
 800fce6:	b292      	uxth	r2, r2
 800fce8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fcee:	1c9a      	adds	r2, r3, #2
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fcfa:	b29b      	uxth	r3, r3
 800fcfc:	3b02      	subs	r3, #2
 800fcfe:	b29a      	uxth	r2, r3
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fd0c:	853b      	strh	r3, [r7, #40]	@ 0x28
 800fd0e:	e044      	b.n	800fd9a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800fd10:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fd12:	2b01      	cmp	r3, #1
 800fd14:	d11d      	bne.n	800fd52 <HAL_SPI_TransmitReceive+0x3de>
 800fd16:	697b      	ldr	r3, [r7, #20]
 800fd18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d018      	beq.n	800fd52 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fd24:	6a3a      	ldr	r2, [r7, #32]
 800fd26:	8812      	ldrh	r2, [r2, #0]
 800fd28:	b292      	uxth	r2, r2
 800fd2a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fd30:	1c9a      	adds	r2, r3, #2
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fd3c:	b29b      	uxth	r3, r3
 800fd3e:	3b01      	subs	r3, #1
 800fd40:	b29a      	uxth	r2, r3
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fd4e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800fd50:	e023      	b.n	800fd9a <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fd52:	f7f3 fee7 	bl	8003b24 <HAL_GetTick>
 800fd56:	4602      	mov	r2, r0
 800fd58:	69bb      	ldr	r3, [r7, #24]
 800fd5a:	1ad3      	subs	r3, r2, r3
 800fd5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fd5e:	429a      	cmp	r2, r3
 800fd60:	d803      	bhi.n	800fd6a <HAL_SPI_TransmitReceive+0x3f6>
 800fd62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd68:	d102      	bne.n	800fd70 <HAL_SPI_TransmitReceive+0x3fc>
 800fd6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d114      	bne.n	800fd9a <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800fd70:	68f8      	ldr	r0, [r7, #12]
 800fd72:	f000 f939 	bl	800ffe8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fd7c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	2201      	movs	r2, #1
 800fd8a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	2200      	movs	r2, #0
 800fd92:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800fd96:	2303      	movs	r3, #3
 800fd98:	e121      	b.n	800ffde <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800fd9a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	f47f af3b 	bne.w	800fc18 <HAL_SPI_TransmitReceive+0x2a4>
 800fda2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	f47f af37 	bne.w	800fc18 <HAL_SPI_TransmitReceive+0x2a4>
 800fdaa:	e0f2      	b.n	800ff92 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	695b      	ldr	r3, [r3, #20]
 800fdb2:	f003 0302 	and.w	r3, r3, #2
 800fdb6:	2b02      	cmp	r3, #2
 800fdb8:	d121      	bne.n	800fdfe <HAL_SPI_TransmitReceive+0x48a>
 800fdba:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d01e      	beq.n	800fdfe <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800fdc0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800fdc2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800fdc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdc6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800fdc8:	429a      	cmp	r2, r3
 800fdca:	d218      	bcs.n	800fdfe <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	3320      	adds	r3, #32
 800fdd6:	7812      	ldrb	r2, [r2, #0]
 800fdd8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fdde:	1c5a      	adds	r2, r3, #1
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800fdea:	b29b      	uxth	r3, r3
 800fdec:	3b01      	subs	r3, #1
 800fdee:	b29a      	uxth	r2, r3
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800fdfc:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	695b      	ldr	r3, [r3, #20]
 800fe04:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800fe06:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	f000 80ba 	beq.w	800ff82 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	695b      	ldr	r3, [r3, #20]
 800fe14:	f003 0301 	and.w	r3, r3, #1
 800fe18:	2b01      	cmp	r3, #1
 800fe1a:	d11b      	bne.n	800fe54 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fe28:	7812      	ldrb	r2, [r2, #0]
 800fe2a:	b2d2      	uxtb	r2, r2
 800fe2c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fe32:	1c5a      	adds	r2, r3, #1
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fe3e:	b29b      	uxth	r3, r3
 800fe40:	3b01      	subs	r3, #1
 800fe42:	b29a      	uxth	r2, r3
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fe50:	853b      	strh	r3, [r7, #40]	@ 0x28
 800fe52:	e096      	b.n	800ff82 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800fe54:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800fe56:	8bfb      	ldrh	r3, [r7, #30]
 800fe58:	429a      	cmp	r2, r3
 800fe5a:	d24a      	bcs.n	800fef2 <HAL_SPI_TransmitReceive+0x57e>
 800fe5c:	697b      	ldr	r3, [r7, #20]
 800fe5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d045      	beq.n	800fef2 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fe72:	7812      	ldrb	r2, [r2, #0]
 800fe74:	b2d2      	uxtb	r2, r2
 800fe76:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fe7c:	1c5a      	adds	r2, r3, #1
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fe8e:	7812      	ldrb	r2, [r2, #0]
 800fe90:	b2d2      	uxtb	r2, r2
 800fe92:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fe98:	1c5a      	adds	r2, r3, #1
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800feaa:	7812      	ldrb	r2, [r2, #0]
 800feac:	b2d2      	uxtb	r2, r2
 800feae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800feb4:	1c5a      	adds	r2, r3, #1
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fec6:	7812      	ldrb	r2, [r2, #0]
 800fec8:	b2d2      	uxtb	r2, r2
 800feca:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fed0:	1c5a      	adds	r2, r3, #1
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fedc:	b29b      	uxth	r3, r3
 800fede:	3b04      	subs	r3, #4
 800fee0:	b29a      	uxth	r2, r3
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800feee:	853b      	strh	r3, [r7, #40]	@ 0x28
 800fef0:	e047      	b.n	800ff82 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800fef2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fef4:	2b03      	cmp	r3, #3
 800fef6:	d820      	bhi.n	800ff3a <HAL_SPI_TransmitReceive+0x5c6>
 800fef8:	697b      	ldr	r3, [r7, #20]
 800fefa:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d01b      	beq.n	800ff3a <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ff0e:	7812      	ldrb	r2, [r2, #0]
 800ff10:	b2d2      	uxtb	r2, r2
 800ff12:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ff18:	1c5a      	adds	r2, r3, #1
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ff24:	b29b      	uxth	r3, r3
 800ff26:	3b01      	subs	r3, #1
 800ff28:	b29a      	uxth	r2, r3
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ff36:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ff38:	e023      	b.n	800ff82 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ff3a:	f7f3 fdf3 	bl	8003b24 <HAL_GetTick>
 800ff3e:	4602      	mov	r2, r0
 800ff40:	69bb      	ldr	r3, [r7, #24]
 800ff42:	1ad3      	subs	r3, r2, r3
 800ff44:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ff46:	429a      	cmp	r2, r3
 800ff48:	d803      	bhi.n	800ff52 <HAL_SPI_TransmitReceive+0x5de>
 800ff4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff50:	d102      	bne.n	800ff58 <HAL_SPI_TransmitReceive+0x5e4>
 800ff52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d114      	bne.n	800ff82 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800ff58:	68f8      	ldr	r0, [r7, #12]
 800ff5a:	f000 f845 	bl	800ffe8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ff64:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	2201      	movs	r2, #1
 800ff72:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	2200      	movs	r2, #0
 800ff7a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800ff7e:	2303      	movs	r3, #3
 800ff80:	e02d      	b.n	800ffde <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ff82:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	f47f af11 	bne.w	800fdac <HAL_SPI_TransmitReceive+0x438>
 800ff8a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	f47f af0d 	bne.w	800fdac <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800ff92:	69bb      	ldr	r3, [r7, #24]
 800ff94:	9300      	str	r3, [sp, #0]
 800ff96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff98:	2200      	movs	r2, #0
 800ff9a:	2108      	movs	r1, #8
 800ff9c:	68f8      	ldr	r0, [r7, #12]
 800ff9e:	f000 f8c3 	bl	8010128 <SPI_WaitOnFlagUntilTimeout>
 800ffa2:	4603      	mov	r3, r0
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d007      	beq.n	800ffb8 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ffae:	f043 0220 	orr.w	r2, r3, #32
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ffb8:	68f8      	ldr	r0, [r7, #12]
 800ffba:	f000 f815 	bl	800ffe8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	2201      	movs	r2, #1
 800ffc2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	2200      	movs	r2, #0
 800ffca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d001      	beq.n	800ffdc <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800ffd8:	2301      	movs	r3, #1
 800ffda:	e000      	b.n	800ffde <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800ffdc:	2300      	movs	r3, #0
  }
}
 800ffde:	4618      	mov	r0, r3
 800ffe0:	3730      	adds	r7, #48	@ 0x30
 800ffe2:	46bd      	mov	sp, r7
 800ffe4:	bd80      	pop	{r7, pc}
 800ffe6:	bf00      	nop

0800ffe8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800ffe8:	b480      	push	{r7}
 800ffea:	b085      	sub	sp, #20
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	695b      	ldr	r3, [r3, #20]
 800fff6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	699a      	ldr	r2, [r3, #24]
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	f042 0208 	orr.w	r2, r2, #8
 8010006:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	699a      	ldr	r2, [r3, #24]
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	f042 0210 	orr.w	r2, r2, #16
 8010016:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	681a      	ldr	r2, [r3, #0]
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	f022 0201 	bic.w	r2, r2, #1
 8010026:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	6919      	ldr	r1, [r3, #16]
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	681a      	ldr	r2, [r3, #0]
 8010032:	4b3c      	ldr	r3, [pc, #240]	@ (8010124 <SPI_CloseTransfer+0x13c>)
 8010034:	400b      	ands	r3, r1
 8010036:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	689a      	ldr	r2, [r3, #8]
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8010046:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801004e:	b2db      	uxtb	r3, r3
 8010050:	2b04      	cmp	r3, #4
 8010052:	d014      	beq.n	801007e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	f003 0320 	and.w	r3, r3, #32
 801005a:	2b00      	cmp	r3, #0
 801005c:	d00f      	beq.n	801007e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010064:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	699a      	ldr	r2, [r3, #24]
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	f042 0220 	orr.w	r2, r2, #32
 801007c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010084:	b2db      	uxtb	r3, r3
 8010086:	2b03      	cmp	r3, #3
 8010088:	d014      	beq.n	80100b4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010090:	2b00      	cmp	r3, #0
 8010092:	d00f      	beq.n	80100b4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801009a:	f043 0204 	orr.w	r2, r3, #4
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	699a      	ldr	r2, [r3, #24]
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80100b2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d00f      	beq.n	80100de <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80100c4:	f043 0201 	orr.w	r2, r3, #1
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	699a      	ldr	r2, [r3, #24]
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80100dc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d00f      	beq.n	8010108 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80100ee:	f043 0208 	orr.w	r2, r3, #8
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	699a      	ldr	r2, [r3, #24]
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8010106:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	2200      	movs	r2, #0
 801010c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	2200      	movs	r2, #0
 8010114:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8010118:	bf00      	nop
 801011a:	3714      	adds	r7, #20
 801011c:	46bd      	mov	sp, r7
 801011e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010122:	4770      	bx	lr
 8010124:	fffffc90 	.word	0xfffffc90

08010128 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8010128:	b580      	push	{r7, lr}
 801012a:	b084      	sub	sp, #16
 801012c:	af00      	add	r7, sp, #0
 801012e:	60f8      	str	r0, [r7, #12]
 8010130:	60b9      	str	r1, [r7, #8]
 8010132:	603b      	str	r3, [r7, #0]
 8010134:	4613      	mov	r3, r2
 8010136:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8010138:	e010      	b.n	801015c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801013a:	f7f3 fcf3 	bl	8003b24 <HAL_GetTick>
 801013e:	4602      	mov	r2, r0
 8010140:	69bb      	ldr	r3, [r7, #24]
 8010142:	1ad3      	subs	r3, r2, r3
 8010144:	683a      	ldr	r2, [r7, #0]
 8010146:	429a      	cmp	r2, r3
 8010148:	d803      	bhi.n	8010152 <SPI_WaitOnFlagUntilTimeout+0x2a>
 801014a:	683b      	ldr	r3, [r7, #0]
 801014c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010150:	d102      	bne.n	8010158 <SPI_WaitOnFlagUntilTimeout+0x30>
 8010152:	683b      	ldr	r3, [r7, #0]
 8010154:	2b00      	cmp	r3, #0
 8010156:	d101      	bne.n	801015c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8010158:	2303      	movs	r3, #3
 801015a:	e00f      	b.n	801017c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	695a      	ldr	r2, [r3, #20]
 8010162:	68bb      	ldr	r3, [r7, #8]
 8010164:	4013      	ands	r3, r2
 8010166:	68ba      	ldr	r2, [r7, #8]
 8010168:	429a      	cmp	r2, r3
 801016a:	bf0c      	ite	eq
 801016c:	2301      	moveq	r3, #1
 801016e:	2300      	movne	r3, #0
 8010170:	b2db      	uxtb	r3, r3
 8010172:	461a      	mov	r2, r3
 8010174:	79fb      	ldrb	r3, [r7, #7]
 8010176:	429a      	cmp	r2, r3
 8010178:	d0df      	beq.n	801013a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 801017a:	2300      	movs	r3, #0
}
 801017c:	4618      	mov	r0, r3
 801017e:	3710      	adds	r7, #16
 8010180:	46bd      	mov	sp, r7
 8010182:	bd80      	pop	{r7, pc}

08010184 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8010184:	b480      	push	{r7}
 8010186:	b085      	sub	sp, #20
 8010188:	af00      	add	r7, sp, #0
 801018a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010190:	095b      	lsrs	r3, r3, #5
 8010192:	3301      	adds	r3, #1
 8010194:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	68db      	ldr	r3, [r3, #12]
 801019a:	3301      	adds	r3, #1
 801019c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801019e:	68bb      	ldr	r3, [r7, #8]
 80101a0:	3307      	adds	r3, #7
 80101a2:	08db      	lsrs	r3, r3, #3
 80101a4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80101a6:	68bb      	ldr	r3, [r7, #8]
 80101a8:	68fa      	ldr	r2, [r7, #12]
 80101aa:	fb02 f303 	mul.w	r3, r2, r3
}
 80101ae:	4618      	mov	r0, r3
 80101b0:	3714      	adds	r7, #20
 80101b2:	46bd      	mov	sp, r7
 80101b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b8:	4770      	bx	lr

080101ba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80101ba:	b580      	push	{r7, lr}
 80101bc:	b082      	sub	sp, #8
 80101be:	af00      	add	r7, sp, #0
 80101c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d101      	bne.n	80101cc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80101c8:	2301      	movs	r3, #1
 80101ca:	e049      	b.n	8010260 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80101d2:	b2db      	uxtb	r3, r3
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d106      	bne.n	80101e6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	2200      	movs	r2, #0
 80101dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80101e0:	6878      	ldr	r0, [r7, #4]
 80101e2:	f7f3 f993 	bl	800350c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	2202      	movs	r2, #2
 80101ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	681a      	ldr	r2, [r3, #0]
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	3304      	adds	r3, #4
 80101f6:	4619      	mov	r1, r3
 80101f8:	4610      	mov	r0, r2
 80101fa:	f000 fc57 	bl	8010aac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	2201      	movs	r2, #1
 8010202:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	2201      	movs	r2, #1
 801020a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	2201      	movs	r2, #1
 8010212:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	2201      	movs	r2, #1
 801021a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	2201      	movs	r2, #1
 8010222:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	2201      	movs	r2, #1
 801022a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	2201      	movs	r2, #1
 8010232:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	2201      	movs	r2, #1
 801023a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	2201      	movs	r2, #1
 8010242:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	2201      	movs	r2, #1
 801024a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	2201      	movs	r2, #1
 8010252:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	2201      	movs	r2, #1
 801025a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801025e:	2300      	movs	r3, #0
}
 8010260:	4618      	mov	r0, r3
 8010262:	3708      	adds	r7, #8
 8010264:	46bd      	mov	sp, r7
 8010266:	bd80      	pop	{r7, pc}

08010268 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010268:	b480      	push	{r7}
 801026a:	b085      	sub	sp, #20
 801026c:	af00      	add	r7, sp, #0
 801026e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010276:	b2db      	uxtb	r3, r3
 8010278:	2b01      	cmp	r3, #1
 801027a:	d001      	beq.n	8010280 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801027c:	2301      	movs	r3, #1
 801027e:	e05e      	b.n	801033e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	2202      	movs	r2, #2
 8010284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	68da      	ldr	r2, [r3, #12]
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	f042 0201 	orr.w	r2, r2, #1
 8010296:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	4a2b      	ldr	r2, [pc, #172]	@ (801034c <HAL_TIM_Base_Start_IT+0xe4>)
 801029e:	4293      	cmp	r3, r2
 80102a0:	d02c      	beq.n	80102fc <HAL_TIM_Base_Start_IT+0x94>
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80102aa:	d027      	beq.n	80102fc <HAL_TIM_Base_Start_IT+0x94>
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	4a27      	ldr	r2, [pc, #156]	@ (8010350 <HAL_TIM_Base_Start_IT+0xe8>)
 80102b2:	4293      	cmp	r3, r2
 80102b4:	d022      	beq.n	80102fc <HAL_TIM_Base_Start_IT+0x94>
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	4a26      	ldr	r2, [pc, #152]	@ (8010354 <HAL_TIM_Base_Start_IT+0xec>)
 80102bc:	4293      	cmp	r3, r2
 80102be:	d01d      	beq.n	80102fc <HAL_TIM_Base_Start_IT+0x94>
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	4a24      	ldr	r2, [pc, #144]	@ (8010358 <HAL_TIM_Base_Start_IT+0xf0>)
 80102c6:	4293      	cmp	r3, r2
 80102c8:	d018      	beq.n	80102fc <HAL_TIM_Base_Start_IT+0x94>
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	4a23      	ldr	r2, [pc, #140]	@ (801035c <HAL_TIM_Base_Start_IT+0xf4>)
 80102d0:	4293      	cmp	r3, r2
 80102d2:	d013      	beq.n	80102fc <HAL_TIM_Base_Start_IT+0x94>
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	4a21      	ldr	r2, [pc, #132]	@ (8010360 <HAL_TIM_Base_Start_IT+0xf8>)
 80102da:	4293      	cmp	r3, r2
 80102dc:	d00e      	beq.n	80102fc <HAL_TIM_Base_Start_IT+0x94>
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	4a20      	ldr	r2, [pc, #128]	@ (8010364 <HAL_TIM_Base_Start_IT+0xfc>)
 80102e4:	4293      	cmp	r3, r2
 80102e6:	d009      	beq.n	80102fc <HAL_TIM_Base_Start_IT+0x94>
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	4a1e      	ldr	r2, [pc, #120]	@ (8010368 <HAL_TIM_Base_Start_IT+0x100>)
 80102ee:	4293      	cmp	r3, r2
 80102f0:	d004      	beq.n	80102fc <HAL_TIM_Base_Start_IT+0x94>
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	4a1d      	ldr	r2, [pc, #116]	@ (801036c <HAL_TIM_Base_Start_IT+0x104>)
 80102f8:	4293      	cmp	r3, r2
 80102fa:	d115      	bne.n	8010328 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	689a      	ldr	r2, [r3, #8]
 8010302:	4b1b      	ldr	r3, [pc, #108]	@ (8010370 <HAL_TIM_Base_Start_IT+0x108>)
 8010304:	4013      	ands	r3, r2
 8010306:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	2b06      	cmp	r3, #6
 801030c:	d015      	beq.n	801033a <HAL_TIM_Base_Start_IT+0xd2>
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010314:	d011      	beq.n	801033a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	681a      	ldr	r2, [r3, #0]
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	f042 0201 	orr.w	r2, r2, #1
 8010324:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010326:	e008      	b.n	801033a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	681a      	ldr	r2, [r3, #0]
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	f042 0201 	orr.w	r2, r2, #1
 8010336:	601a      	str	r2, [r3, #0]
 8010338:	e000      	b.n	801033c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801033a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801033c:	2300      	movs	r3, #0
}
 801033e:	4618      	mov	r0, r3
 8010340:	3714      	adds	r7, #20
 8010342:	46bd      	mov	sp, r7
 8010344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010348:	4770      	bx	lr
 801034a:	bf00      	nop
 801034c:	40010000 	.word	0x40010000
 8010350:	40000400 	.word	0x40000400
 8010354:	40000800 	.word	0x40000800
 8010358:	40000c00 	.word	0x40000c00
 801035c:	40010400 	.word	0x40010400
 8010360:	40001800 	.word	0x40001800
 8010364:	40014000 	.word	0x40014000
 8010368:	4000e000 	.word	0x4000e000
 801036c:	4000e400 	.word	0x4000e400
 8010370:	00010007 	.word	0x00010007

08010374 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010374:	b580      	push	{r7, lr}
 8010376:	b082      	sub	sp, #8
 8010378:	af00      	add	r7, sp, #0
 801037a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d101      	bne.n	8010386 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010382:	2301      	movs	r3, #1
 8010384:	e049      	b.n	801041a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801038c:	b2db      	uxtb	r3, r3
 801038e:	2b00      	cmp	r3, #0
 8010390:	d106      	bne.n	80103a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	2200      	movs	r2, #0
 8010396:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801039a:	6878      	ldr	r0, [r7, #4]
 801039c:	f000 f841 	bl	8010422 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	2202      	movs	r2, #2
 80103a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	681a      	ldr	r2, [r3, #0]
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	3304      	adds	r3, #4
 80103b0:	4619      	mov	r1, r3
 80103b2:	4610      	mov	r0, r2
 80103b4:	f000 fb7a 	bl	8010aac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	2201      	movs	r2, #1
 80103bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	2201      	movs	r2, #1
 80103c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	2201      	movs	r2, #1
 80103cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	2201      	movs	r2, #1
 80103d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	2201      	movs	r2, #1
 80103dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	2201      	movs	r2, #1
 80103e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	2201      	movs	r2, #1
 80103ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	2201      	movs	r2, #1
 80103f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	2201      	movs	r2, #1
 80103fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	2201      	movs	r2, #1
 8010404:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	2201      	movs	r2, #1
 801040c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	2201      	movs	r2, #1
 8010414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8010418:	2300      	movs	r3, #0
}
 801041a:	4618      	mov	r0, r3
 801041c:	3708      	adds	r7, #8
 801041e:	46bd      	mov	sp, r7
 8010420:	bd80      	pop	{r7, pc}

08010422 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8010422:	b480      	push	{r7}
 8010424:	b083      	sub	sp, #12
 8010426:	af00      	add	r7, sp, #0
 8010428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801042a:	bf00      	nop
 801042c:	370c      	adds	r7, #12
 801042e:	46bd      	mov	sp, r7
 8010430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010434:	4770      	bx	lr

08010436 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010436:	b580      	push	{r7, lr}
 8010438:	b084      	sub	sp, #16
 801043a:	af00      	add	r7, sp, #0
 801043c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	68db      	ldr	r3, [r3, #12]
 8010444:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	691b      	ldr	r3, [r3, #16]
 801044c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 801044e:	68bb      	ldr	r3, [r7, #8]
 8010450:	f003 0302 	and.w	r3, r3, #2
 8010454:	2b00      	cmp	r3, #0
 8010456:	d020      	beq.n	801049a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	f003 0302 	and.w	r3, r3, #2
 801045e:	2b00      	cmp	r3, #0
 8010460:	d01b      	beq.n	801049a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	f06f 0202 	mvn.w	r2, #2
 801046a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	2201      	movs	r2, #1
 8010470:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	699b      	ldr	r3, [r3, #24]
 8010478:	f003 0303 	and.w	r3, r3, #3
 801047c:	2b00      	cmp	r3, #0
 801047e:	d003      	beq.n	8010488 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010480:	6878      	ldr	r0, [r7, #4]
 8010482:	f000 faf5 	bl	8010a70 <HAL_TIM_IC_CaptureCallback>
 8010486:	e005      	b.n	8010494 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010488:	6878      	ldr	r0, [r7, #4]
 801048a:	f000 fae7 	bl	8010a5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801048e:	6878      	ldr	r0, [r7, #4]
 8010490:	f000 faf8 	bl	8010a84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	2200      	movs	r2, #0
 8010498:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 801049a:	68bb      	ldr	r3, [r7, #8]
 801049c:	f003 0304 	and.w	r3, r3, #4
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d020      	beq.n	80104e6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	f003 0304 	and.w	r3, r3, #4
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d01b      	beq.n	80104e6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	f06f 0204 	mvn.w	r2, #4
 80104b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	2202      	movs	r2, #2
 80104bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	699b      	ldr	r3, [r3, #24]
 80104c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d003      	beq.n	80104d4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80104cc:	6878      	ldr	r0, [r7, #4]
 80104ce:	f000 facf 	bl	8010a70 <HAL_TIM_IC_CaptureCallback>
 80104d2:	e005      	b.n	80104e0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80104d4:	6878      	ldr	r0, [r7, #4]
 80104d6:	f000 fac1 	bl	8010a5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80104da:	6878      	ldr	r0, [r7, #4]
 80104dc:	f000 fad2 	bl	8010a84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	2200      	movs	r2, #0
 80104e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80104e6:	68bb      	ldr	r3, [r7, #8]
 80104e8:	f003 0308 	and.w	r3, r3, #8
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d020      	beq.n	8010532 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	f003 0308 	and.w	r3, r3, #8
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d01b      	beq.n	8010532 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	f06f 0208 	mvn.w	r2, #8
 8010502:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	2204      	movs	r2, #4
 8010508:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	69db      	ldr	r3, [r3, #28]
 8010510:	f003 0303 	and.w	r3, r3, #3
 8010514:	2b00      	cmp	r3, #0
 8010516:	d003      	beq.n	8010520 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010518:	6878      	ldr	r0, [r7, #4]
 801051a:	f000 faa9 	bl	8010a70 <HAL_TIM_IC_CaptureCallback>
 801051e:	e005      	b.n	801052c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010520:	6878      	ldr	r0, [r7, #4]
 8010522:	f000 fa9b 	bl	8010a5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010526:	6878      	ldr	r0, [r7, #4]
 8010528:	f000 faac 	bl	8010a84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	2200      	movs	r2, #0
 8010530:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8010532:	68bb      	ldr	r3, [r7, #8]
 8010534:	f003 0310 	and.w	r3, r3, #16
 8010538:	2b00      	cmp	r3, #0
 801053a:	d020      	beq.n	801057e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	f003 0310 	and.w	r3, r3, #16
 8010542:	2b00      	cmp	r3, #0
 8010544:	d01b      	beq.n	801057e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	f06f 0210 	mvn.w	r2, #16
 801054e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	2208      	movs	r2, #8
 8010554:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	69db      	ldr	r3, [r3, #28]
 801055c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010560:	2b00      	cmp	r3, #0
 8010562:	d003      	beq.n	801056c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010564:	6878      	ldr	r0, [r7, #4]
 8010566:	f000 fa83 	bl	8010a70 <HAL_TIM_IC_CaptureCallback>
 801056a:	e005      	b.n	8010578 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801056c:	6878      	ldr	r0, [r7, #4]
 801056e:	f000 fa75 	bl	8010a5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010572:	6878      	ldr	r0, [r7, #4]
 8010574:	f000 fa86 	bl	8010a84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	2200      	movs	r2, #0
 801057c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 801057e:	68bb      	ldr	r3, [r7, #8]
 8010580:	f003 0301 	and.w	r3, r3, #1
 8010584:	2b00      	cmp	r3, #0
 8010586:	d00c      	beq.n	80105a2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	f003 0301 	and.w	r3, r3, #1
 801058e:	2b00      	cmp	r3, #0
 8010590:	d007      	beq.n	80105a2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	f06f 0201 	mvn.w	r2, #1
 801059a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801059c:	6878      	ldr	r0, [r7, #4]
 801059e:	f7f1 fd0b 	bl	8001fb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80105a2:	68bb      	ldr	r3, [r7, #8]
 80105a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d104      	bne.n	80105b6 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80105ac:	68bb      	ldr	r3, [r7, #8]
 80105ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d00c      	beq.n	80105d0 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d007      	beq.n	80105d0 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80105c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80105ca:	6878      	ldr	r0, [r7, #4]
 80105cc:	f000 ffc6 	bl	801155c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80105d0:	68bb      	ldr	r3, [r7, #8]
 80105d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d00c      	beq.n	80105f4 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d007      	beq.n	80105f4 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80105ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80105ee:	6878      	ldr	r0, [r7, #4]
 80105f0:	f000 ffbe 	bl	8011570 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80105f4:	68bb      	ldr	r3, [r7, #8]
 80105f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d00c      	beq.n	8010618 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010604:	2b00      	cmp	r3, #0
 8010606:	d007      	beq.n	8010618 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8010610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010612:	6878      	ldr	r0, [r7, #4]
 8010614:	f000 fa40 	bl	8010a98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8010618:	68bb      	ldr	r3, [r7, #8]
 801061a:	f003 0320 	and.w	r3, r3, #32
 801061e:	2b00      	cmp	r3, #0
 8010620:	d00c      	beq.n	801063c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	f003 0320 	and.w	r3, r3, #32
 8010628:	2b00      	cmp	r3, #0
 801062a:	d007      	beq.n	801063c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	f06f 0220 	mvn.w	r2, #32
 8010634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010636:	6878      	ldr	r0, [r7, #4]
 8010638:	f000 ff86 	bl	8011548 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801063c:	bf00      	nop
 801063e:	3710      	adds	r7, #16
 8010640:	46bd      	mov	sp, r7
 8010642:	bd80      	pop	{r7, pc}

08010644 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010644:	b580      	push	{r7, lr}
 8010646:	b086      	sub	sp, #24
 8010648:	af00      	add	r7, sp, #0
 801064a:	60f8      	str	r0, [r7, #12]
 801064c:	60b9      	str	r1, [r7, #8]
 801064e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010650:	2300      	movs	r3, #0
 8010652:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801065a:	2b01      	cmp	r3, #1
 801065c:	d101      	bne.n	8010662 <HAL_TIM_PWM_ConfigChannel+0x1e>
 801065e:	2302      	movs	r3, #2
 8010660:	e0ff      	b.n	8010862 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	2201      	movs	r2, #1
 8010666:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	2b14      	cmp	r3, #20
 801066e:	f200 80f0 	bhi.w	8010852 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8010672:	a201      	add	r2, pc, #4	@ (adr r2, 8010678 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8010674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010678:	080106cd 	.word	0x080106cd
 801067c:	08010853 	.word	0x08010853
 8010680:	08010853 	.word	0x08010853
 8010684:	08010853 	.word	0x08010853
 8010688:	0801070d 	.word	0x0801070d
 801068c:	08010853 	.word	0x08010853
 8010690:	08010853 	.word	0x08010853
 8010694:	08010853 	.word	0x08010853
 8010698:	0801074f 	.word	0x0801074f
 801069c:	08010853 	.word	0x08010853
 80106a0:	08010853 	.word	0x08010853
 80106a4:	08010853 	.word	0x08010853
 80106a8:	0801078f 	.word	0x0801078f
 80106ac:	08010853 	.word	0x08010853
 80106b0:	08010853 	.word	0x08010853
 80106b4:	08010853 	.word	0x08010853
 80106b8:	080107d1 	.word	0x080107d1
 80106bc:	08010853 	.word	0x08010853
 80106c0:	08010853 	.word	0x08010853
 80106c4:	08010853 	.word	0x08010853
 80106c8:	08010811 	.word	0x08010811
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	68b9      	ldr	r1, [r7, #8]
 80106d2:	4618      	mov	r0, r3
 80106d4:	f000 fa9c 	bl	8010c10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	699a      	ldr	r2, [r3, #24]
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	f042 0208 	orr.w	r2, r2, #8
 80106e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	699a      	ldr	r2, [r3, #24]
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	f022 0204 	bic.w	r2, r2, #4
 80106f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	6999      	ldr	r1, [r3, #24]
 80106fe:	68bb      	ldr	r3, [r7, #8]
 8010700:	691a      	ldr	r2, [r3, #16]
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	430a      	orrs	r2, r1
 8010708:	619a      	str	r2, [r3, #24]
      break;
 801070a:	e0a5      	b.n	8010858 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	68b9      	ldr	r1, [r7, #8]
 8010712:	4618      	mov	r0, r3
 8010714:	f000 fb0c 	bl	8010d30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	699a      	ldr	r2, [r3, #24]
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010726:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	699a      	ldr	r2, [r3, #24]
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8010736:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	6999      	ldr	r1, [r3, #24]
 801073e:	68bb      	ldr	r3, [r7, #8]
 8010740:	691b      	ldr	r3, [r3, #16]
 8010742:	021a      	lsls	r2, r3, #8
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	430a      	orrs	r2, r1
 801074a:	619a      	str	r2, [r3, #24]
      break;
 801074c:	e084      	b.n	8010858 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	68b9      	ldr	r1, [r7, #8]
 8010754:	4618      	mov	r0, r3
 8010756:	f000 fb75 	bl	8010e44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	69da      	ldr	r2, [r3, #28]
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	f042 0208 	orr.w	r2, r2, #8
 8010768:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	69da      	ldr	r2, [r3, #28]
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	f022 0204 	bic.w	r2, r2, #4
 8010778:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	69d9      	ldr	r1, [r3, #28]
 8010780:	68bb      	ldr	r3, [r7, #8]
 8010782:	691a      	ldr	r2, [r3, #16]
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	430a      	orrs	r2, r1
 801078a:	61da      	str	r2, [r3, #28]
      break;
 801078c:	e064      	b.n	8010858 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	68b9      	ldr	r1, [r7, #8]
 8010794:	4618      	mov	r0, r3
 8010796:	f000 fbdd 	bl	8010f54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	69da      	ldr	r2, [r3, #28]
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80107a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	69da      	ldr	r2, [r3, #28]
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80107b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	69d9      	ldr	r1, [r3, #28]
 80107c0:	68bb      	ldr	r3, [r7, #8]
 80107c2:	691b      	ldr	r3, [r3, #16]
 80107c4:	021a      	lsls	r2, r3, #8
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	430a      	orrs	r2, r1
 80107cc:	61da      	str	r2, [r3, #28]
      break;
 80107ce:	e043      	b.n	8010858 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	68b9      	ldr	r1, [r7, #8]
 80107d6:	4618      	mov	r0, r3
 80107d8:	f000 fc26 	bl	8011028 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	f042 0208 	orr.w	r2, r2, #8
 80107ea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	f022 0204 	bic.w	r2, r2, #4
 80107fa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8010802:	68bb      	ldr	r3, [r7, #8]
 8010804:	691a      	ldr	r2, [r3, #16]
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	430a      	orrs	r2, r1
 801080c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 801080e:	e023      	b.n	8010858 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	68b9      	ldr	r1, [r7, #8]
 8010816:	4618      	mov	r0, r3
 8010818:	f000 fc6a 	bl	80110f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801082a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801083a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8010842:	68bb      	ldr	r3, [r7, #8]
 8010844:	691b      	ldr	r3, [r3, #16]
 8010846:	021a      	lsls	r2, r3, #8
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	430a      	orrs	r2, r1
 801084e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8010850:	e002      	b.n	8010858 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8010852:	2301      	movs	r3, #1
 8010854:	75fb      	strb	r3, [r7, #23]
      break;
 8010856:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	2200      	movs	r2, #0
 801085c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8010860:	7dfb      	ldrb	r3, [r7, #23]
}
 8010862:	4618      	mov	r0, r3
 8010864:	3718      	adds	r7, #24
 8010866:	46bd      	mov	sp, r7
 8010868:	bd80      	pop	{r7, pc}
 801086a:	bf00      	nop

0801086c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801086c:	b580      	push	{r7, lr}
 801086e:	b084      	sub	sp, #16
 8010870:	af00      	add	r7, sp, #0
 8010872:	6078      	str	r0, [r7, #4]
 8010874:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010876:	2300      	movs	r3, #0
 8010878:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010880:	2b01      	cmp	r3, #1
 8010882:	d101      	bne.n	8010888 <HAL_TIM_ConfigClockSource+0x1c>
 8010884:	2302      	movs	r3, #2
 8010886:	e0dc      	b.n	8010a42 <HAL_TIM_ConfigClockSource+0x1d6>
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	2201      	movs	r2, #1
 801088c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	2202      	movs	r2, #2
 8010894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	689b      	ldr	r3, [r3, #8]
 801089e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80108a0:	68ba      	ldr	r2, [r7, #8]
 80108a2:	4b6a      	ldr	r3, [pc, #424]	@ (8010a4c <HAL_TIM_ConfigClockSource+0x1e0>)
 80108a4:	4013      	ands	r3, r2
 80108a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80108a8:	68bb      	ldr	r3, [r7, #8]
 80108aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80108ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	68ba      	ldr	r2, [r7, #8]
 80108b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80108b8:	683b      	ldr	r3, [r7, #0]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	4a64      	ldr	r2, [pc, #400]	@ (8010a50 <HAL_TIM_ConfigClockSource+0x1e4>)
 80108be:	4293      	cmp	r3, r2
 80108c0:	f000 80a9 	beq.w	8010a16 <HAL_TIM_ConfigClockSource+0x1aa>
 80108c4:	4a62      	ldr	r2, [pc, #392]	@ (8010a50 <HAL_TIM_ConfigClockSource+0x1e4>)
 80108c6:	4293      	cmp	r3, r2
 80108c8:	f200 80ae 	bhi.w	8010a28 <HAL_TIM_ConfigClockSource+0x1bc>
 80108cc:	4a61      	ldr	r2, [pc, #388]	@ (8010a54 <HAL_TIM_ConfigClockSource+0x1e8>)
 80108ce:	4293      	cmp	r3, r2
 80108d0:	f000 80a1 	beq.w	8010a16 <HAL_TIM_ConfigClockSource+0x1aa>
 80108d4:	4a5f      	ldr	r2, [pc, #380]	@ (8010a54 <HAL_TIM_ConfigClockSource+0x1e8>)
 80108d6:	4293      	cmp	r3, r2
 80108d8:	f200 80a6 	bhi.w	8010a28 <HAL_TIM_ConfigClockSource+0x1bc>
 80108dc:	4a5e      	ldr	r2, [pc, #376]	@ (8010a58 <HAL_TIM_ConfigClockSource+0x1ec>)
 80108de:	4293      	cmp	r3, r2
 80108e0:	f000 8099 	beq.w	8010a16 <HAL_TIM_ConfigClockSource+0x1aa>
 80108e4:	4a5c      	ldr	r2, [pc, #368]	@ (8010a58 <HAL_TIM_ConfigClockSource+0x1ec>)
 80108e6:	4293      	cmp	r3, r2
 80108e8:	f200 809e 	bhi.w	8010a28 <HAL_TIM_ConfigClockSource+0x1bc>
 80108ec:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80108f0:	f000 8091 	beq.w	8010a16 <HAL_TIM_ConfigClockSource+0x1aa>
 80108f4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80108f8:	f200 8096 	bhi.w	8010a28 <HAL_TIM_ConfigClockSource+0x1bc>
 80108fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010900:	f000 8089 	beq.w	8010a16 <HAL_TIM_ConfigClockSource+0x1aa>
 8010904:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010908:	f200 808e 	bhi.w	8010a28 <HAL_TIM_ConfigClockSource+0x1bc>
 801090c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010910:	d03e      	beq.n	8010990 <HAL_TIM_ConfigClockSource+0x124>
 8010912:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010916:	f200 8087 	bhi.w	8010a28 <HAL_TIM_ConfigClockSource+0x1bc>
 801091a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801091e:	f000 8086 	beq.w	8010a2e <HAL_TIM_ConfigClockSource+0x1c2>
 8010922:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010926:	d87f      	bhi.n	8010a28 <HAL_TIM_ConfigClockSource+0x1bc>
 8010928:	2b70      	cmp	r3, #112	@ 0x70
 801092a:	d01a      	beq.n	8010962 <HAL_TIM_ConfigClockSource+0xf6>
 801092c:	2b70      	cmp	r3, #112	@ 0x70
 801092e:	d87b      	bhi.n	8010a28 <HAL_TIM_ConfigClockSource+0x1bc>
 8010930:	2b60      	cmp	r3, #96	@ 0x60
 8010932:	d050      	beq.n	80109d6 <HAL_TIM_ConfigClockSource+0x16a>
 8010934:	2b60      	cmp	r3, #96	@ 0x60
 8010936:	d877      	bhi.n	8010a28 <HAL_TIM_ConfigClockSource+0x1bc>
 8010938:	2b50      	cmp	r3, #80	@ 0x50
 801093a:	d03c      	beq.n	80109b6 <HAL_TIM_ConfigClockSource+0x14a>
 801093c:	2b50      	cmp	r3, #80	@ 0x50
 801093e:	d873      	bhi.n	8010a28 <HAL_TIM_ConfigClockSource+0x1bc>
 8010940:	2b40      	cmp	r3, #64	@ 0x40
 8010942:	d058      	beq.n	80109f6 <HAL_TIM_ConfigClockSource+0x18a>
 8010944:	2b40      	cmp	r3, #64	@ 0x40
 8010946:	d86f      	bhi.n	8010a28 <HAL_TIM_ConfigClockSource+0x1bc>
 8010948:	2b30      	cmp	r3, #48	@ 0x30
 801094a:	d064      	beq.n	8010a16 <HAL_TIM_ConfigClockSource+0x1aa>
 801094c:	2b30      	cmp	r3, #48	@ 0x30
 801094e:	d86b      	bhi.n	8010a28 <HAL_TIM_ConfigClockSource+0x1bc>
 8010950:	2b20      	cmp	r3, #32
 8010952:	d060      	beq.n	8010a16 <HAL_TIM_ConfigClockSource+0x1aa>
 8010954:	2b20      	cmp	r3, #32
 8010956:	d867      	bhi.n	8010a28 <HAL_TIM_ConfigClockSource+0x1bc>
 8010958:	2b00      	cmp	r3, #0
 801095a:	d05c      	beq.n	8010a16 <HAL_TIM_ConfigClockSource+0x1aa>
 801095c:	2b10      	cmp	r3, #16
 801095e:	d05a      	beq.n	8010a16 <HAL_TIM_ConfigClockSource+0x1aa>
 8010960:	e062      	b.n	8010a28 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8010966:	683b      	ldr	r3, [r7, #0]
 8010968:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801096a:	683b      	ldr	r3, [r7, #0]
 801096c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801096e:	683b      	ldr	r3, [r7, #0]
 8010970:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8010972:	f000 fca1 	bl	80112b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	689b      	ldr	r3, [r3, #8]
 801097c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801097e:	68bb      	ldr	r3, [r7, #8]
 8010980:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8010984:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	68ba      	ldr	r2, [r7, #8]
 801098c:	609a      	str	r2, [r3, #8]
      break;
 801098e:	e04f      	b.n	8010a30 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8010994:	683b      	ldr	r3, [r7, #0]
 8010996:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8010998:	683b      	ldr	r3, [r7, #0]
 801099a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801099c:	683b      	ldr	r3, [r7, #0]
 801099e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80109a0:	f000 fc8a 	bl	80112b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	689a      	ldr	r2, [r3, #8]
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80109b2:	609a      	str	r2, [r3, #8]
      break;
 80109b4:	e03c      	b.n	8010a30 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80109ba:	683b      	ldr	r3, [r7, #0]
 80109bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80109be:	683b      	ldr	r3, [r7, #0]
 80109c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80109c2:	461a      	mov	r2, r3
 80109c4:	f000 fbfa 	bl	80111bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	2150      	movs	r1, #80	@ 0x50
 80109ce:	4618      	mov	r0, r3
 80109d0:	f000 fc54 	bl	801127c <TIM_ITRx_SetConfig>
      break;
 80109d4:	e02c      	b.n	8010a30 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80109da:	683b      	ldr	r3, [r7, #0]
 80109dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80109de:	683b      	ldr	r3, [r7, #0]
 80109e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80109e2:	461a      	mov	r2, r3
 80109e4:	f000 fc19 	bl	801121a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	2160      	movs	r1, #96	@ 0x60
 80109ee:	4618      	mov	r0, r3
 80109f0:	f000 fc44 	bl	801127c <TIM_ITRx_SetConfig>
      break;
 80109f4:	e01c      	b.n	8010a30 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80109fa:	683b      	ldr	r3, [r7, #0]
 80109fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80109fe:	683b      	ldr	r3, [r7, #0]
 8010a00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010a02:	461a      	mov	r2, r3
 8010a04:	f000 fbda 	bl	80111bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	2140      	movs	r1, #64	@ 0x40
 8010a0e:	4618      	mov	r0, r3
 8010a10:	f000 fc34 	bl	801127c <TIM_ITRx_SetConfig>
      break;
 8010a14:	e00c      	b.n	8010a30 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	681a      	ldr	r2, [r3, #0]
 8010a1a:	683b      	ldr	r3, [r7, #0]
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	4619      	mov	r1, r3
 8010a20:	4610      	mov	r0, r2
 8010a22:	f000 fc2b 	bl	801127c <TIM_ITRx_SetConfig>
      break;
 8010a26:	e003      	b.n	8010a30 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8010a28:	2301      	movs	r3, #1
 8010a2a:	73fb      	strb	r3, [r7, #15]
      break;
 8010a2c:	e000      	b.n	8010a30 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8010a2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	2201      	movs	r2, #1
 8010a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	2200      	movs	r2, #0
 8010a3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8010a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a42:	4618      	mov	r0, r3
 8010a44:	3710      	adds	r7, #16
 8010a46:	46bd      	mov	sp, r7
 8010a48:	bd80      	pop	{r7, pc}
 8010a4a:	bf00      	nop
 8010a4c:	ffceff88 	.word	0xffceff88
 8010a50:	00100040 	.word	0x00100040
 8010a54:	00100030 	.word	0x00100030
 8010a58:	00100020 	.word	0x00100020

08010a5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010a5c:	b480      	push	{r7}
 8010a5e:	b083      	sub	sp, #12
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010a64:	bf00      	nop
 8010a66:	370c      	adds	r7, #12
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a6e:	4770      	bx	lr

08010a70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010a70:	b480      	push	{r7}
 8010a72:	b083      	sub	sp, #12
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010a78:	bf00      	nop
 8010a7a:	370c      	adds	r7, #12
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a82:	4770      	bx	lr

08010a84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010a84:	b480      	push	{r7}
 8010a86:	b083      	sub	sp, #12
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010a8c:	bf00      	nop
 8010a8e:	370c      	adds	r7, #12
 8010a90:	46bd      	mov	sp, r7
 8010a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a96:	4770      	bx	lr

08010a98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010a98:	b480      	push	{r7}
 8010a9a:	b083      	sub	sp, #12
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010aa0:	bf00      	nop
 8010aa2:	370c      	adds	r7, #12
 8010aa4:	46bd      	mov	sp, r7
 8010aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aaa:	4770      	bx	lr

08010aac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010aac:	b480      	push	{r7}
 8010aae:	b085      	sub	sp, #20
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	6078      	str	r0, [r7, #4]
 8010ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	4a4a      	ldr	r2, [pc, #296]	@ (8010be8 <TIM_Base_SetConfig+0x13c>)
 8010ac0:	4293      	cmp	r3, r2
 8010ac2:	d013      	beq.n	8010aec <TIM_Base_SetConfig+0x40>
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010aca:	d00f      	beq.n	8010aec <TIM_Base_SetConfig+0x40>
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	4a47      	ldr	r2, [pc, #284]	@ (8010bec <TIM_Base_SetConfig+0x140>)
 8010ad0:	4293      	cmp	r3, r2
 8010ad2:	d00b      	beq.n	8010aec <TIM_Base_SetConfig+0x40>
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	4a46      	ldr	r2, [pc, #280]	@ (8010bf0 <TIM_Base_SetConfig+0x144>)
 8010ad8:	4293      	cmp	r3, r2
 8010ada:	d007      	beq.n	8010aec <TIM_Base_SetConfig+0x40>
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	4a45      	ldr	r2, [pc, #276]	@ (8010bf4 <TIM_Base_SetConfig+0x148>)
 8010ae0:	4293      	cmp	r3, r2
 8010ae2:	d003      	beq.n	8010aec <TIM_Base_SetConfig+0x40>
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	4a44      	ldr	r2, [pc, #272]	@ (8010bf8 <TIM_Base_SetConfig+0x14c>)
 8010ae8:	4293      	cmp	r3, r2
 8010aea:	d108      	bne.n	8010afe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010af2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010af4:	683b      	ldr	r3, [r7, #0]
 8010af6:	685b      	ldr	r3, [r3, #4]
 8010af8:	68fa      	ldr	r2, [r7, #12]
 8010afa:	4313      	orrs	r3, r2
 8010afc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	4a39      	ldr	r2, [pc, #228]	@ (8010be8 <TIM_Base_SetConfig+0x13c>)
 8010b02:	4293      	cmp	r3, r2
 8010b04:	d027      	beq.n	8010b56 <TIM_Base_SetConfig+0xaa>
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010b0c:	d023      	beq.n	8010b56 <TIM_Base_SetConfig+0xaa>
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	4a36      	ldr	r2, [pc, #216]	@ (8010bec <TIM_Base_SetConfig+0x140>)
 8010b12:	4293      	cmp	r3, r2
 8010b14:	d01f      	beq.n	8010b56 <TIM_Base_SetConfig+0xaa>
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	4a35      	ldr	r2, [pc, #212]	@ (8010bf0 <TIM_Base_SetConfig+0x144>)
 8010b1a:	4293      	cmp	r3, r2
 8010b1c:	d01b      	beq.n	8010b56 <TIM_Base_SetConfig+0xaa>
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	4a34      	ldr	r2, [pc, #208]	@ (8010bf4 <TIM_Base_SetConfig+0x148>)
 8010b22:	4293      	cmp	r3, r2
 8010b24:	d017      	beq.n	8010b56 <TIM_Base_SetConfig+0xaa>
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	4a33      	ldr	r2, [pc, #204]	@ (8010bf8 <TIM_Base_SetConfig+0x14c>)
 8010b2a:	4293      	cmp	r3, r2
 8010b2c:	d013      	beq.n	8010b56 <TIM_Base_SetConfig+0xaa>
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	4a32      	ldr	r2, [pc, #200]	@ (8010bfc <TIM_Base_SetConfig+0x150>)
 8010b32:	4293      	cmp	r3, r2
 8010b34:	d00f      	beq.n	8010b56 <TIM_Base_SetConfig+0xaa>
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	4a31      	ldr	r2, [pc, #196]	@ (8010c00 <TIM_Base_SetConfig+0x154>)
 8010b3a:	4293      	cmp	r3, r2
 8010b3c:	d00b      	beq.n	8010b56 <TIM_Base_SetConfig+0xaa>
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	4a30      	ldr	r2, [pc, #192]	@ (8010c04 <TIM_Base_SetConfig+0x158>)
 8010b42:	4293      	cmp	r3, r2
 8010b44:	d007      	beq.n	8010b56 <TIM_Base_SetConfig+0xaa>
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	4a2f      	ldr	r2, [pc, #188]	@ (8010c08 <TIM_Base_SetConfig+0x15c>)
 8010b4a:	4293      	cmp	r3, r2
 8010b4c:	d003      	beq.n	8010b56 <TIM_Base_SetConfig+0xaa>
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	4a2e      	ldr	r2, [pc, #184]	@ (8010c0c <TIM_Base_SetConfig+0x160>)
 8010b52:	4293      	cmp	r3, r2
 8010b54:	d108      	bne.n	8010b68 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010b5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010b5e:	683b      	ldr	r3, [r7, #0]
 8010b60:	68db      	ldr	r3, [r3, #12]
 8010b62:	68fa      	ldr	r2, [r7, #12]
 8010b64:	4313      	orrs	r3, r2
 8010b66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8010b6e:	683b      	ldr	r3, [r7, #0]
 8010b70:	695b      	ldr	r3, [r3, #20]
 8010b72:	4313      	orrs	r3, r2
 8010b74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	68fa      	ldr	r2, [r7, #12]
 8010b7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010b7c:	683b      	ldr	r3, [r7, #0]
 8010b7e:	689a      	ldr	r2, [r3, #8]
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010b84:	683b      	ldr	r3, [r7, #0]
 8010b86:	681a      	ldr	r2, [r3, #0]
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	4a16      	ldr	r2, [pc, #88]	@ (8010be8 <TIM_Base_SetConfig+0x13c>)
 8010b90:	4293      	cmp	r3, r2
 8010b92:	d00f      	beq.n	8010bb4 <TIM_Base_SetConfig+0x108>
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	4a18      	ldr	r2, [pc, #96]	@ (8010bf8 <TIM_Base_SetConfig+0x14c>)
 8010b98:	4293      	cmp	r3, r2
 8010b9a:	d00b      	beq.n	8010bb4 <TIM_Base_SetConfig+0x108>
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	4a17      	ldr	r2, [pc, #92]	@ (8010bfc <TIM_Base_SetConfig+0x150>)
 8010ba0:	4293      	cmp	r3, r2
 8010ba2:	d007      	beq.n	8010bb4 <TIM_Base_SetConfig+0x108>
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	4a16      	ldr	r2, [pc, #88]	@ (8010c00 <TIM_Base_SetConfig+0x154>)
 8010ba8:	4293      	cmp	r3, r2
 8010baa:	d003      	beq.n	8010bb4 <TIM_Base_SetConfig+0x108>
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	4a15      	ldr	r2, [pc, #84]	@ (8010c04 <TIM_Base_SetConfig+0x158>)
 8010bb0:	4293      	cmp	r3, r2
 8010bb2:	d103      	bne.n	8010bbc <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010bb4:	683b      	ldr	r3, [r7, #0]
 8010bb6:	691a      	ldr	r2, [r3, #16]
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	2201      	movs	r2, #1
 8010bc0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	691b      	ldr	r3, [r3, #16]
 8010bc6:	f003 0301 	and.w	r3, r3, #1
 8010bca:	2b01      	cmp	r3, #1
 8010bcc:	d105      	bne.n	8010bda <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	691b      	ldr	r3, [r3, #16]
 8010bd2:	f023 0201 	bic.w	r2, r3, #1
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	611a      	str	r2, [r3, #16]
  }
}
 8010bda:	bf00      	nop
 8010bdc:	3714      	adds	r7, #20
 8010bde:	46bd      	mov	sp, r7
 8010be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be4:	4770      	bx	lr
 8010be6:	bf00      	nop
 8010be8:	40010000 	.word	0x40010000
 8010bec:	40000400 	.word	0x40000400
 8010bf0:	40000800 	.word	0x40000800
 8010bf4:	40000c00 	.word	0x40000c00
 8010bf8:	40010400 	.word	0x40010400
 8010bfc:	40014000 	.word	0x40014000
 8010c00:	40014400 	.word	0x40014400
 8010c04:	40014800 	.word	0x40014800
 8010c08:	4000e000 	.word	0x4000e000
 8010c0c:	4000e400 	.word	0x4000e400

08010c10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010c10:	b480      	push	{r7}
 8010c12:	b087      	sub	sp, #28
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6078      	str	r0, [r7, #4]
 8010c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	6a1b      	ldr	r3, [r3, #32]
 8010c1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	6a1b      	ldr	r3, [r3, #32]
 8010c24:	f023 0201 	bic.w	r2, r3, #1
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	685b      	ldr	r3, [r3, #4]
 8010c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	699b      	ldr	r3, [r3, #24]
 8010c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010c38:	68fa      	ldr	r2, [r7, #12]
 8010c3a:	4b37      	ldr	r3, [pc, #220]	@ (8010d18 <TIM_OC1_SetConfig+0x108>)
 8010c3c:	4013      	ands	r3, r2
 8010c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	f023 0303 	bic.w	r3, r3, #3
 8010c46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010c48:	683b      	ldr	r3, [r7, #0]
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	68fa      	ldr	r2, [r7, #12]
 8010c4e:	4313      	orrs	r3, r2
 8010c50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010c52:	697b      	ldr	r3, [r7, #20]
 8010c54:	f023 0302 	bic.w	r3, r3, #2
 8010c58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010c5a:	683b      	ldr	r3, [r7, #0]
 8010c5c:	689b      	ldr	r3, [r3, #8]
 8010c5e:	697a      	ldr	r2, [r7, #20]
 8010c60:	4313      	orrs	r3, r2
 8010c62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	4a2d      	ldr	r2, [pc, #180]	@ (8010d1c <TIM_OC1_SetConfig+0x10c>)
 8010c68:	4293      	cmp	r3, r2
 8010c6a:	d00f      	beq.n	8010c8c <TIM_OC1_SetConfig+0x7c>
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	4a2c      	ldr	r2, [pc, #176]	@ (8010d20 <TIM_OC1_SetConfig+0x110>)
 8010c70:	4293      	cmp	r3, r2
 8010c72:	d00b      	beq.n	8010c8c <TIM_OC1_SetConfig+0x7c>
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	4a2b      	ldr	r2, [pc, #172]	@ (8010d24 <TIM_OC1_SetConfig+0x114>)
 8010c78:	4293      	cmp	r3, r2
 8010c7a:	d007      	beq.n	8010c8c <TIM_OC1_SetConfig+0x7c>
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	4a2a      	ldr	r2, [pc, #168]	@ (8010d28 <TIM_OC1_SetConfig+0x118>)
 8010c80:	4293      	cmp	r3, r2
 8010c82:	d003      	beq.n	8010c8c <TIM_OC1_SetConfig+0x7c>
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	4a29      	ldr	r2, [pc, #164]	@ (8010d2c <TIM_OC1_SetConfig+0x11c>)
 8010c88:	4293      	cmp	r3, r2
 8010c8a:	d10c      	bne.n	8010ca6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010c8c:	697b      	ldr	r3, [r7, #20]
 8010c8e:	f023 0308 	bic.w	r3, r3, #8
 8010c92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010c94:	683b      	ldr	r3, [r7, #0]
 8010c96:	68db      	ldr	r3, [r3, #12]
 8010c98:	697a      	ldr	r2, [r7, #20]
 8010c9a:	4313      	orrs	r3, r2
 8010c9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010c9e:	697b      	ldr	r3, [r7, #20]
 8010ca0:	f023 0304 	bic.w	r3, r3, #4
 8010ca4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	4a1c      	ldr	r2, [pc, #112]	@ (8010d1c <TIM_OC1_SetConfig+0x10c>)
 8010caa:	4293      	cmp	r3, r2
 8010cac:	d00f      	beq.n	8010cce <TIM_OC1_SetConfig+0xbe>
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	4a1b      	ldr	r2, [pc, #108]	@ (8010d20 <TIM_OC1_SetConfig+0x110>)
 8010cb2:	4293      	cmp	r3, r2
 8010cb4:	d00b      	beq.n	8010cce <TIM_OC1_SetConfig+0xbe>
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	4a1a      	ldr	r2, [pc, #104]	@ (8010d24 <TIM_OC1_SetConfig+0x114>)
 8010cba:	4293      	cmp	r3, r2
 8010cbc:	d007      	beq.n	8010cce <TIM_OC1_SetConfig+0xbe>
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	4a19      	ldr	r2, [pc, #100]	@ (8010d28 <TIM_OC1_SetConfig+0x118>)
 8010cc2:	4293      	cmp	r3, r2
 8010cc4:	d003      	beq.n	8010cce <TIM_OC1_SetConfig+0xbe>
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	4a18      	ldr	r2, [pc, #96]	@ (8010d2c <TIM_OC1_SetConfig+0x11c>)
 8010cca:	4293      	cmp	r3, r2
 8010ccc:	d111      	bne.n	8010cf2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010cce:	693b      	ldr	r3, [r7, #16]
 8010cd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010cd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010cd6:	693b      	ldr	r3, [r7, #16]
 8010cd8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010cdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010cde:	683b      	ldr	r3, [r7, #0]
 8010ce0:	695b      	ldr	r3, [r3, #20]
 8010ce2:	693a      	ldr	r2, [r7, #16]
 8010ce4:	4313      	orrs	r3, r2
 8010ce6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010ce8:	683b      	ldr	r3, [r7, #0]
 8010cea:	699b      	ldr	r3, [r3, #24]
 8010cec:	693a      	ldr	r2, [r7, #16]
 8010cee:	4313      	orrs	r3, r2
 8010cf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	693a      	ldr	r2, [r7, #16]
 8010cf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	68fa      	ldr	r2, [r7, #12]
 8010cfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010cfe:	683b      	ldr	r3, [r7, #0]
 8010d00:	685a      	ldr	r2, [r3, #4]
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	697a      	ldr	r2, [r7, #20]
 8010d0a:	621a      	str	r2, [r3, #32]
}
 8010d0c:	bf00      	nop
 8010d0e:	371c      	adds	r7, #28
 8010d10:	46bd      	mov	sp, r7
 8010d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d16:	4770      	bx	lr
 8010d18:	fffeff8f 	.word	0xfffeff8f
 8010d1c:	40010000 	.word	0x40010000
 8010d20:	40010400 	.word	0x40010400
 8010d24:	40014000 	.word	0x40014000
 8010d28:	40014400 	.word	0x40014400
 8010d2c:	40014800 	.word	0x40014800

08010d30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010d30:	b480      	push	{r7}
 8010d32:	b087      	sub	sp, #28
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	6078      	str	r0, [r7, #4]
 8010d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	6a1b      	ldr	r3, [r3, #32]
 8010d3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	6a1b      	ldr	r3, [r3, #32]
 8010d44:	f023 0210 	bic.w	r2, r3, #16
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	685b      	ldr	r3, [r3, #4]
 8010d50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	699b      	ldr	r3, [r3, #24]
 8010d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010d58:	68fa      	ldr	r2, [r7, #12]
 8010d5a:	4b34      	ldr	r3, [pc, #208]	@ (8010e2c <TIM_OC2_SetConfig+0xfc>)
 8010d5c:	4013      	ands	r3, r2
 8010d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010d66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010d68:	683b      	ldr	r3, [r7, #0]
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	021b      	lsls	r3, r3, #8
 8010d6e:	68fa      	ldr	r2, [r7, #12]
 8010d70:	4313      	orrs	r3, r2
 8010d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010d74:	697b      	ldr	r3, [r7, #20]
 8010d76:	f023 0320 	bic.w	r3, r3, #32
 8010d7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010d7c:	683b      	ldr	r3, [r7, #0]
 8010d7e:	689b      	ldr	r3, [r3, #8]
 8010d80:	011b      	lsls	r3, r3, #4
 8010d82:	697a      	ldr	r2, [r7, #20]
 8010d84:	4313      	orrs	r3, r2
 8010d86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	4a29      	ldr	r2, [pc, #164]	@ (8010e30 <TIM_OC2_SetConfig+0x100>)
 8010d8c:	4293      	cmp	r3, r2
 8010d8e:	d003      	beq.n	8010d98 <TIM_OC2_SetConfig+0x68>
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	4a28      	ldr	r2, [pc, #160]	@ (8010e34 <TIM_OC2_SetConfig+0x104>)
 8010d94:	4293      	cmp	r3, r2
 8010d96:	d10d      	bne.n	8010db4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010d98:	697b      	ldr	r3, [r7, #20]
 8010d9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010d9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010da0:	683b      	ldr	r3, [r7, #0]
 8010da2:	68db      	ldr	r3, [r3, #12]
 8010da4:	011b      	lsls	r3, r3, #4
 8010da6:	697a      	ldr	r2, [r7, #20]
 8010da8:	4313      	orrs	r3, r2
 8010daa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010dac:	697b      	ldr	r3, [r7, #20]
 8010dae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010db2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	4a1e      	ldr	r2, [pc, #120]	@ (8010e30 <TIM_OC2_SetConfig+0x100>)
 8010db8:	4293      	cmp	r3, r2
 8010dba:	d00f      	beq.n	8010ddc <TIM_OC2_SetConfig+0xac>
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	4a1d      	ldr	r2, [pc, #116]	@ (8010e34 <TIM_OC2_SetConfig+0x104>)
 8010dc0:	4293      	cmp	r3, r2
 8010dc2:	d00b      	beq.n	8010ddc <TIM_OC2_SetConfig+0xac>
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	4a1c      	ldr	r2, [pc, #112]	@ (8010e38 <TIM_OC2_SetConfig+0x108>)
 8010dc8:	4293      	cmp	r3, r2
 8010dca:	d007      	beq.n	8010ddc <TIM_OC2_SetConfig+0xac>
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	4a1b      	ldr	r2, [pc, #108]	@ (8010e3c <TIM_OC2_SetConfig+0x10c>)
 8010dd0:	4293      	cmp	r3, r2
 8010dd2:	d003      	beq.n	8010ddc <TIM_OC2_SetConfig+0xac>
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	4a1a      	ldr	r2, [pc, #104]	@ (8010e40 <TIM_OC2_SetConfig+0x110>)
 8010dd8:	4293      	cmp	r3, r2
 8010dda:	d113      	bne.n	8010e04 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010ddc:	693b      	ldr	r3, [r7, #16]
 8010dde:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8010de2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010de4:	693b      	ldr	r3, [r7, #16]
 8010de6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010dea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010dec:	683b      	ldr	r3, [r7, #0]
 8010dee:	695b      	ldr	r3, [r3, #20]
 8010df0:	009b      	lsls	r3, r3, #2
 8010df2:	693a      	ldr	r2, [r7, #16]
 8010df4:	4313      	orrs	r3, r2
 8010df6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010df8:	683b      	ldr	r3, [r7, #0]
 8010dfa:	699b      	ldr	r3, [r3, #24]
 8010dfc:	009b      	lsls	r3, r3, #2
 8010dfe:	693a      	ldr	r2, [r7, #16]
 8010e00:	4313      	orrs	r3, r2
 8010e02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	693a      	ldr	r2, [r7, #16]
 8010e08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	68fa      	ldr	r2, [r7, #12]
 8010e0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010e10:	683b      	ldr	r3, [r7, #0]
 8010e12:	685a      	ldr	r2, [r3, #4]
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	697a      	ldr	r2, [r7, #20]
 8010e1c:	621a      	str	r2, [r3, #32]
}
 8010e1e:	bf00      	nop
 8010e20:	371c      	adds	r7, #28
 8010e22:	46bd      	mov	sp, r7
 8010e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e28:	4770      	bx	lr
 8010e2a:	bf00      	nop
 8010e2c:	feff8fff 	.word	0xfeff8fff
 8010e30:	40010000 	.word	0x40010000
 8010e34:	40010400 	.word	0x40010400
 8010e38:	40014000 	.word	0x40014000
 8010e3c:	40014400 	.word	0x40014400
 8010e40:	40014800 	.word	0x40014800

08010e44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010e44:	b480      	push	{r7}
 8010e46:	b087      	sub	sp, #28
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	6078      	str	r0, [r7, #4]
 8010e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	6a1b      	ldr	r3, [r3, #32]
 8010e52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	6a1b      	ldr	r3, [r3, #32]
 8010e58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	685b      	ldr	r3, [r3, #4]
 8010e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	69db      	ldr	r3, [r3, #28]
 8010e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010e6c:	68fa      	ldr	r2, [r7, #12]
 8010e6e:	4b33      	ldr	r3, [pc, #204]	@ (8010f3c <TIM_OC3_SetConfig+0xf8>)
 8010e70:	4013      	ands	r3, r2
 8010e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	f023 0303 	bic.w	r3, r3, #3
 8010e7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010e7c:	683b      	ldr	r3, [r7, #0]
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	68fa      	ldr	r2, [r7, #12]
 8010e82:	4313      	orrs	r3, r2
 8010e84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010e86:	697b      	ldr	r3, [r7, #20]
 8010e88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010e8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010e8e:	683b      	ldr	r3, [r7, #0]
 8010e90:	689b      	ldr	r3, [r3, #8]
 8010e92:	021b      	lsls	r3, r3, #8
 8010e94:	697a      	ldr	r2, [r7, #20]
 8010e96:	4313      	orrs	r3, r2
 8010e98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	4a28      	ldr	r2, [pc, #160]	@ (8010f40 <TIM_OC3_SetConfig+0xfc>)
 8010e9e:	4293      	cmp	r3, r2
 8010ea0:	d003      	beq.n	8010eaa <TIM_OC3_SetConfig+0x66>
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	4a27      	ldr	r2, [pc, #156]	@ (8010f44 <TIM_OC3_SetConfig+0x100>)
 8010ea6:	4293      	cmp	r3, r2
 8010ea8:	d10d      	bne.n	8010ec6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010eaa:	697b      	ldr	r3, [r7, #20]
 8010eac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010eb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010eb2:	683b      	ldr	r3, [r7, #0]
 8010eb4:	68db      	ldr	r3, [r3, #12]
 8010eb6:	021b      	lsls	r3, r3, #8
 8010eb8:	697a      	ldr	r2, [r7, #20]
 8010eba:	4313      	orrs	r3, r2
 8010ebc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010ebe:	697b      	ldr	r3, [r7, #20]
 8010ec0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8010ec4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	4a1d      	ldr	r2, [pc, #116]	@ (8010f40 <TIM_OC3_SetConfig+0xfc>)
 8010eca:	4293      	cmp	r3, r2
 8010ecc:	d00f      	beq.n	8010eee <TIM_OC3_SetConfig+0xaa>
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	4a1c      	ldr	r2, [pc, #112]	@ (8010f44 <TIM_OC3_SetConfig+0x100>)
 8010ed2:	4293      	cmp	r3, r2
 8010ed4:	d00b      	beq.n	8010eee <TIM_OC3_SetConfig+0xaa>
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	4a1b      	ldr	r2, [pc, #108]	@ (8010f48 <TIM_OC3_SetConfig+0x104>)
 8010eda:	4293      	cmp	r3, r2
 8010edc:	d007      	beq.n	8010eee <TIM_OC3_SetConfig+0xaa>
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	4a1a      	ldr	r2, [pc, #104]	@ (8010f4c <TIM_OC3_SetConfig+0x108>)
 8010ee2:	4293      	cmp	r3, r2
 8010ee4:	d003      	beq.n	8010eee <TIM_OC3_SetConfig+0xaa>
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	4a19      	ldr	r2, [pc, #100]	@ (8010f50 <TIM_OC3_SetConfig+0x10c>)
 8010eea:	4293      	cmp	r3, r2
 8010eec:	d113      	bne.n	8010f16 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010eee:	693b      	ldr	r3, [r7, #16]
 8010ef0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010ef4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010ef6:	693b      	ldr	r3, [r7, #16]
 8010ef8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8010efc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010efe:	683b      	ldr	r3, [r7, #0]
 8010f00:	695b      	ldr	r3, [r3, #20]
 8010f02:	011b      	lsls	r3, r3, #4
 8010f04:	693a      	ldr	r2, [r7, #16]
 8010f06:	4313      	orrs	r3, r2
 8010f08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010f0a:	683b      	ldr	r3, [r7, #0]
 8010f0c:	699b      	ldr	r3, [r3, #24]
 8010f0e:	011b      	lsls	r3, r3, #4
 8010f10:	693a      	ldr	r2, [r7, #16]
 8010f12:	4313      	orrs	r3, r2
 8010f14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	693a      	ldr	r2, [r7, #16]
 8010f1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	68fa      	ldr	r2, [r7, #12]
 8010f20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010f22:	683b      	ldr	r3, [r7, #0]
 8010f24:	685a      	ldr	r2, [r3, #4]
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	697a      	ldr	r2, [r7, #20]
 8010f2e:	621a      	str	r2, [r3, #32]
}
 8010f30:	bf00      	nop
 8010f32:	371c      	adds	r7, #28
 8010f34:	46bd      	mov	sp, r7
 8010f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f3a:	4770      	bx	lr
 8010f3c:	fffeff8f 	.word	0xfffeff8f
 8010f40:	40010000 	.word	0x40010000
 8010f44:	40010400 	.word	0x40010400
 8010f48:	40014000 	.word	0x40014000
 8010f4c:	40014400 	.word	0x40014400
 8010f50:	40014800 	.word	0x40014800

08010f54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010f54:	b480      	push	{r7}
 8010f56:	b087      	sub	sp, #28
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	6078      	str	r0, [r7, #4]
 8010f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	6a1b      	ldr	r3, [r3, #32]
 8010f62:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	6a1b      	ldr	r3, [r3, #32]
 8010f68:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	685b      	ldr	r3, [r3, #4]
 8010f74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	69db      	ldr	r3, [r3, #28]
 8010f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010f7c:	68fa      	ldr	r2, [r7, #12]
 8010f7e:	4b24      	ldr	r3, [pc, #144]	@ (8011010 <TIM_OC4_SetConfig+0xbc>)
 8010f80:	4013      	ands	r3, r2
 8010f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010f8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010f8c:	683b      	ldr	r3, [r7, #0]
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	021b      	lsls	r3, r3, #8
 8010f92:	68fa      	ldr	r2, [r7, #12]
 8010f94:	4313      	orrs	r3, r2
 8010f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010f98:	693b      	ldr	r3, [r7, #16]
 8010f9a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8010f9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010fa0:	683b      	ldr	r3, [r7, #0]
 8010fa2:	689b      	ldr	r3, [r3, #8]
 8010fa4:	031b      	lsls	r3, r3, #12
 8010fa6:	693a      	ldr	r2, [r7, #16]
 8010fa8:	4313      	orrs	r3, r2
 8010faa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	4a19      	ldr	r2, [pc, #100]	@ (8011014 <TIM_OC4_SetConfig+0xc0>)
 8010fb0:	4293      	cmp	r3, r2
 8010fb2:	d00f      	beq.n	8010fd4 <TIM_OC4_SetConfig+0x80>
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	4a18      	ldr	r2, [pc, #96]	@ (8011018 <TIM_OC4_SetConfig+0xc4>)
 8010fb8:	4293      	cmp	r3, r2
 8010fba:	d00b      	beq.n	8010fd4 <TIM_OC4_SetConfig+0x80>
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	4a17      	ldr	r2, [pc, #92]	@ (801101c <TIM_OC4_SetConfig+0xc8>)
 8010fc0:	4293      	cmp	r3, r2
 8010fc2:	d007      	beq.n	8010fd4 <TIM_OC4_SetConfig+0x80>
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	4a16      	ldr	r2, [pc, #88]	@ (8011020 <TIM_OC4_SetConfig+0xcc>)
 8010fc8:	4293      	cmp	r3, r2
 8010fca:	d003      	beq.n	8010fd4 <TIM_OC4_SetConfig+0x80>
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	4a15      	ldr	r2, [pc, #84]	@ (8011024 <TIM_OC4_SetConfig+0xd0>)
 8010fd0:	4293      	cmp	r3, r2
 8010fd2:	d109      	bne.n	8010fe8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010fd4:	697b      	ldr	r3, [r7, #20]
 8010fd6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010fda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010fdc:	683b      	ldr	r3, [r7, #0]
 8010fde:	695b      	ldr	r3, [r3, #20]
 8010fe0:	019b      	lsls	r3, r3, #6
 8010fe2:	697a      	ldr	r2, [r7, #20]
 8010fe4:	4313      	orrs	r3, r2
 8010fe6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	697a      	ldr	r2, [r7, #20]
 8010fec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	68fa      	ldr	r2, [r7, #12]
 8010ff2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010ff4:	683b      	ldr	r3, [r7, #0]
 8010ff6:	685a      	ldr	r2, [r3, #4]
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	693a      	ldr	r2, [r7, #16]
 8011000:	621a      	str	r2, [r3, #32]
}
 8011002:	bf00      	nop
 8011004:	371c      	adds	r7, #28
 8011006:	46bd      	mov	sp, r7
 8011008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801100c:	4770      	bx	lr
 801100e:	bf00      	nop
 8011010:	feff8fff 	.word	0xfeff8fff
 8011014:	40010000 	.word	0x40010000
 8011018:	40010400 	.word	0x40010400
 801101c:	40014000 	.word	0x40014000
 8011020:	40014400 	.word	0x40014400
 8011024:	40014800 	.word	0x40014800

08011028 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011028:	b480      	push	{r7}
 801102a:	b087      	sub	sp, #28
 801102c:	af00      	add	r7, sp, #0
 801102e:	6078      	str	r0, [r7, #4]
 8011030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	6a1b      	ldr	r3, [r3, #32]
 8011036:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	6a1b      	ldr	r3, [r3, #32]
 801103c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	685b      	ldr	r3, [r3, #4]
 8011048:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801104e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8011050:	68fa      	ldr	r2, [r7, #12]
 8011052:	4b21      	ldr	r3, [pc, #132]	@ (80110d8 <TIM_OC5_SetConfig+0xb0>)
 8011054:	4013      	ands	r3, r2
 8011056:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011058:	683b      	ldr	r3, [r7, #0]
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	68fa      	ldr	r2, [r7, #12]
 801105e:	4313      	orrs	r3, r2
 8011060:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8011062:	693b      	ldr	r3, [r7, #16]
 8011064:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8011068:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801106a:	683b      	ldr	r3, [r7, #0]
 801106c:	689b      	ldr	r3, [r3, #8]
 801106e:	041b      	lsls	r3, r3, #16
 8011070:	693a      	ldr	r2, [r7, #16]
 8011072:	4313      	orrs	r3, r2
 8011074:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	4a18      	ldr	r2, [pc, #96]	@ (80110dc <TIM_OC5_SetConfig+0xb4>)
 801107a:	4293      	cmp	r3, r2
 801107c:	d00f      	beq.n	801109e <TIM_OC5_SetConfig+0x76>
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	4a17      	ldr	r2, [pc, #92]	@ (80110e0 <TIM_OC5_SetConfig+0xb8>)
 8011082:	4293      	cmp	r3, r2
 8011084:	d00b      	beq.n	801109e <TIM_OC5_SetConfig+0x76>
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	4a16      	ldr	r2, [pc, #88]	@ (80110e4 <TIM_OC5_SetConfig+0xbc>)
 801108a:	4293      	cmp	r3, r2
 801108c:	d007      	beq.n	801109e <TIM_OC5_SetConfig+0x76>
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	4a15      	ldr	r2, [pc, #84]	@ (80110e8 <TIM_OC5_SetConfig+0xc0>)
 8011092:	4293      	cmp	r3, r2
 8011094:	d003      	beq.n	801109e <TIM_OC5_SetConfig+0x76>
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	4a14      	ldr	r2, [pc, #80]	@ (80110ec <TIM_OC5_SetConfig+0xc4>)
 801109a:	4293      	cmp	r3, r2
 801109c:	d109      	bne.n	80110b2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801109e:	697b      	ldr	r3, [r7, #20]
 80110a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80110a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80110a6:	683b      	ldr	r3, [r7, #0]
 80110a8:	695b      	ldr	r3, [r3, #20]
 80110aa:	021b      	lsls	r3, r3, #8
 80110ac:	697a      	ldr	r2, [r7, #20]
 80110ae:	4313      	orrs	r3, r2
 80110b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	697a      	ldr	r2, [r7, #20]
 80110b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	68fa      	ldr	r2, [r7, #12]
 80110bc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80110be:	683b      	ldr	r3, [r7, #0]
 80110c0:	685a      	ldr	r2, [r3, #4]
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	693a      	ldr	r2, [r7, #16]
 80110ca:	621a      	str	r2, [r3, #32]
}
 80110cc:	bf00      	nop
 80110ce:	371c      	adds	r7, #28
 80110d0:	46bd      	mov	sp, r7
 80110d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110d6:	4770      	bx	lr
 80110d8:	fffeff8f 	.word	0xfffeff8f
 80110dc:	40010000 	.word	0x40010000
 80110e0:	40010400 	.word	0x40010400
 80110e4:	40014000 	.word	0x40014000
 80110e8:	40014400 	.word	0x40014400
 80110ec:	40014800 	.word	0x40014800

080110f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80110f0:	b480      	push	{r7}
 80110f2:	b087      	sub	sp, #28
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	6078      	str	r0, [r7, #4]
 80110f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	6a1b      	ldr	r3, [r3, #32]
 80110fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	6a1b      	ldr	r3, [r3, #32]
 8011104:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	685b      	ldr	r3, [r3, #4]
 8011110:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8011118:	68fa      	ldr	r2, [r7, #12]
 801111a:	4b22      	ldr	r3, [pc, #136]	@ (80111a4 <TIM_OC6_SetConfig+0xb4>)
 801111c:	4013      	ands	r3, r2
 801111e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011120:	683b      	ldr	r3, [r7, #0]
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	021b      	lsls	r3, r3, #8
 8011126:	68fa      	ldr	r2, [r7, #12]
 8011128:	4313      	orrs	r3, r2
 801112a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801112c:	693b      	ldr	r3, [r7, #16]
 801112e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8011132:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8011134:	683b      	ldr	r3, [r7, #0]
 8011136:	689b      	ldr	r3, [r3, #8]
 8011138:	051b      	lsls	r3, r3, #20
 801113a:	693a      	ldr	r2, [r7, #16]
 801113c:	4313      	orrs	r3, r2
 801113e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	4a19      	ldr	r2, [pc, #100]	@ (80111a8 <TIM_OC6_SetConfig+0xb8>)
 8011144:	4293      	cmp	r3, r2
 8011146:	d00f      	beq.n	8011168 <TIM_OC6_SetConfig+0x78>
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	4a18      	ldr	r2, [pc, #96]	@ (80111ac <TIM_OC6_SetConfig+0xbc>)
 801114c:	4293      	cmp	r3, r2
 801114e:	d00b      	beq.n	8011168 <TIM_OC6_SetConfig+0x78>
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	4a17      	ldr	r2, [pc, #92]	@ (80111b0 <TIM_OC6_SetConfig+0xc0>)
 8011154:	4293      	cmp	r3, r2
 8011156:	d007      	beq.n	8011168 <TIM_OC6_SetConfig+0x78>
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	4a16      	ldr	r2, [pc, #88]	@ (80111b4 <TIM_OC6_SetConfig+0xc4>)
 801115c:	4293      	cmp	r3, r2
 801115e:	d003      	beq.n	8011168 <TIM_OC6_SetConfig+0x78>
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	4a15      	ldr	r2, [pc, #84]	@ (80111b8 <TIM_OC6_SetConfig+0xc8>)
 8011164:	4293      	cmp	r3, r2
 8011166:	d109      	bne.n	801117c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8011168:	697b      	ldr	r3, [r7, #20]
 801116a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801116e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8011170:	683b      	ldr	r3, [r7, #0]
 8011172:	695b      	ldr	r3, [r3, #20]
 8011174:	029b      	lsls	r3, r3, #10
 8011176:	697a      	ldr	r2, [r7, #20]
 8011178:	4313      	orrs	r3, r2
 801117a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	697a      	ldr	r2, [r7, #20]
 8011180:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	68fa      	ldr	r2, [r7, #12]
 8011186:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8011188:	683b      	ldr	r3, [r7, #0]
 801118a:	685a      	ldr	r2, [r3, #4]
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	693a      	ldr	r2, [r7, #16]
 8011194:	621a      	str	r2, [r3, #32]
}
 8011196:	bf00      	nop
 8011198:	371c      	adds	r7, #28
 801119a:	46bd      	mov	sp, r7
 801119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a0:	4770      	bx	lr
 80111a2:	bf00      	nop
 80111a4:	feff8fff 	.word	0xfeff8fff
 80111a8:	40010000 	.word	0x40010000
 80111ac:	40010400 	.word	0x40010400
 80111b0:	40014000 	.word	0x40014000
 80111b4:	40014400 	.word	0x40014400
 80111b8:	40014800 	.word	0x40014800

080111bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80111bc:	b480      	push	{r7}
 80111be:	b087      	sub	sp, #28
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	60f8      	str	r0, [r7, #12]
 80111c4:	60b9      	str	r1, [r7, #8]
 80111c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	6a1b      	ldr	r3, [r3, #32]
 80111cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	6a1b      	ldr	r3, [r3, #32]
 80111d2:	f023 0201 	bic.w	r2, r3, #1
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	699b      	ldr	r3, [r3, #24]
 80111de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80111e0:	693b      	ldr	r3, [r7, #16]
 80111e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80111e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	011b      	lsls	r3, r3, #4
 80111ec:	693a      	ldr	r2, [r7, #16]
 80111ee:	4313      	orrs	r3, r2
 80111f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80111f2:	697b      	ldr	r3, [r7, #20]
 80111f4:	f023 030a 	bic.w	r3, r3, #10
 80111f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80111fa:	697a      	ldr	r2, [r7, #20]
 80111fc:	68bb      	ldr	r3, [r7, #8]
 80111fe:	4313      	orrs	r3, r2
 8011200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	693a      	ldr	r2, [r7, #16]
 8011206:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	697a      	ldr	r2, [r7, #20]
 801120c:	621a      	str	r2, [r3, #32]
}
 801120e:	bf00      	nop
 8011210:	371c      	adds	r7, #28
 8011212:	46bd      	mov	sp, r7
 8011214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011218:	4770      	bx	lr

0801121a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801121a:	b480      	push	{r7}
 801121c:	b087      	sub	sp, #28
 801121e:	af00      	add	r7, sp, #0
 8011220:	60f8      	str	r0, [r7, #12]
 8011222:	60b9      	str	r1, [r7, #8]
 8011224:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	6a1b      	ldr	r3, [r3, #32]
 801122a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	6a1b      	ldr	r3, [r3, #32]
 8011230:	f023 0210 	bic.w	r2, r3, #16
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	699b      	ldr	r3, [r3, #24]
 801123c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801123e:	693b      	ldr	r3, [r7, #16]
 8011240:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8011244:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	031b      	lsls	r3, r3, #12
 801124a:	693a      	ldr	r2, [r7, #16]
 801124c:	4313      	orrs	r3, r2
 801124e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011250:	697b      	ldr	r3, [r7, #20]
 8011252:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8011256:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8011258:	68bb      	ldr	r3, [r7, #8]
 801125a:	011b      	lsls	r3, r3, #4
 801125c:	697a      	ldr	r2, [r7, #20]
 801125e:	4313      	orrs	r3, r2
 8011260:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	693a      	ldr	r2, [r7, #16]
 8011266:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	697a      	ldr	r2, [r7, #20]
 801126c:	621a      	str	r2, [r3, #32]
}
 801126e:	bf00      	nop
 8011270:	371c      	adds	r7, #28
 8011272:	46bd      	mov	sp, r7
 8011274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011278:	4770      	bx	lr
	...

0801127c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801127c:	b480      	push	{r7}
 801127e:	b085      	sub	sp, #20
 8011280:	af00      	add	r7, sp, #0
 8011282:	6078      	str	r0, [r7, #4]
 8011284:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	689b      	ldr	r3, [r3, #8]
 801128a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801128c:	68fa      	ldr	r2, [r7, #12]
 801128e:	4b09      	ldr	r3, [pc, #36]	@ (80112b4 <TIM_ITRx_SetConfig+0x38>)
 8011290:	4013      	ands	r3, r2
 8011292:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8011294:	683a      	ldr	r2, [r7, #0]
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	4313      	orrs	r3, r2
 801129a:	f043 0307 	orr.w	r3, r3, #7
 801129e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	68fa      	ldr	r2, [r7, #12]
 80112a4:	609a      	str	r2, [r3, #8]
}
 80112a6:	bf00      	nop
 80112a8:	3714      	adds	r7, #20
 80112aa:	46bd      	mov	sp, r7
 80112ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b0:	4770      	bx	lr
 80112b2:	bf00      	nop
 80112b4:	ffcfff8f 	.word	0xffcfff8f

080112b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80112b8:	b480      	push	{r7}
 80112ba:	b087      	sub	sp, #28
 80112bc:	af00      	add	r7, sp, #0
 80112be:	60f8      	str	r0, [r7, #12]
 80112c0:	60b9      	str	r1, [r7, #8]
 80112c2:	607a      	str	r2, [r7, #4]
 80112c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	689b      	ldr	r3, [r3, #8]
 80112ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80112cc:	697b      	ldr	r3, [r7, #20]
 80112ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80112d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80112d4:	683b      	ldr	r3, [r7, #0]
 80112d6:	021a      	lsls	r2, r3, #8
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	431a      	orrs	r2, r3
 80112dc:	68bb      	ldr	r3, [r7, #8]
 80112de:	4313      	orrs	r3, r2
 80112e0:	697a      	ldr	r2, [r7, #20]
 80112e2:	4313      	orrs	r3, r2
 80112e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	697a      	ldr	r2, [r7, #20]
 80112ea:	609a      	str	r2, [r3, #8]
}
 80112ec:	bf00      	nop
 80112ee:	371c      	adds	r7, #28
 80112f0:	46bd      	mov	sp, r7
 80112f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112f6:	4770      	bx	lr

080112f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80112f8:	b480      	push	{r7}
 80112fa:	b085      	sub	sp, #20
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	6078      	str	r0, [r7, #4]
 8011300:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011308:	2b01      	cmp	r3, #1
 801130a:	d101      	bne.n	8011310 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801130c:	2302      	movs	r3, #2
 801130e:	e077      	b.n	8011400 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	2201      	movs	r2, #1
 8011314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	2202      	movs	r2, #2
 801131c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	685b      	ldr	r3, [r3, #4]
 8011326:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	689b      	ldr	r3, [r3, #8]
 801132e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	4a35      	ldr	r2, [pc, #212]	@ (801140c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8011336:	4293      	cmp	r3, r2
 8011338:	d004      	beq.n	8011344 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	4a34      	ldr	r2, [pc, #208]	@ (8011410 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8011340:	4293      	cmp	r3, r2
 8011342:	d108      	bne.n	8011356 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 801134a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801134c:	683b      	ldr	r3, [r7, #0]
 801134e:	685b      	ldr	r3, [r3, #4]
 8011350:	68fa      	ldr	r2, [r7, #12]
 8011352:	4313      	orrs	r3, r2
 8011354:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801135c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801135e:	683b      	ldr	r3, [r7, #0]
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	68fa      	ldr	r2, [r7, #12]
 8011364:	4313      	orrs	r3, r2
 8011366:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	68fa      	ldr	r2, [r7, #12]
 801136e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	4a25      	ldr	r2, [pc, #148]	@ (801140c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8011376:	4293      	cmp	r3, r2
 8011378:	d02c      	beq.n	80113d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011382:	d027      	beq.n	80113d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	4a22      	ldr	r2, [pc, #136]	@ (8011414 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 801138a:	4293      	cmp	r3, r2
 801138c:	d022      	beq.n	80113d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	4a21      	ldr	r2, [pc, #132]	@ (8011418 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8011394:	4293      	cmp	r3, r2
 8011396:	d01d      	beq.n	80113d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	4a1f      	ldr	r2, [pc, #124]	@ (801141c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 801139e:	4293      	cmp	r3, r2
 80113a0:	d018      	beq.n	80113d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	4a1a      	ldr	r2, [pc, #104]	@ (8011410 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80113a8:	4293      	cmp	r3, r2
 80113aa:	d013      	beq.n	80113d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	4a1b      	ldr	r2, [pc, #108]	@ (8011420 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80113b2:	4293      	cmp	r3, r2
 80113b4:	d00e      	beq.n	80113d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	4a1a      	ldr	r2, [pc, #104]	@ (8011424 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80113bc:	4293      	cmp	r3, r2
 80113be:	d009      	beq.n	80113d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	4a18      	ldr	r2, [pc, #96]	@ (8011428 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80113c6:	4293      	cmp	r3, r2
 80113c8:	d004      	beq.n	80113d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	4a17      	ldr	r2, [pc, #92]	@ (801142c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80113d0:	4293      	cmp	r3, r2
 80113d2:	d10c      	bne.n	80113ee <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80113d4:	68bb      	ldr	r3, [r7, #8]
 80113d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80113da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80113dc:	683b      	ldr	r3, [r7, #0]
 80113de:	689b      	ldr	r3, [r3, #8]
 80113e0:	68ba      	ldr	r2, [r7, #8]
 80113e2:	4313      	orrs	r3, r2
 80113e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	68ba      	ldr	r2, [r7, #8]
 80113ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	2201      	movs	r2, #1
 80113f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	2200      	movs	r2, #0
 80113fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80113fe:	2300      	movs	r3, #0
}
 8011400:	4618      	mov	r0, r3
 8011402:	3714      	adds	r7, #20
 8011404:	46bd      	mov	sp, r7
 8011406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801140a:	4770      	bx	lr
 801140c:	40010000 	.word	0x40010000
 8011410:	40010400 	.word	0x40010400
 8011414:	40000400 	.word	0x40000400
 8011418:	40000800 	.word	0x40000800
 801141c:	40000c00 	.word	0x40000c00
 8011420:	40001800 	.word	0x40001800
 8011424:	40014000 	.word	0x40014000
 8011428:	4000e000 	.word	0x4000e000
 801142c:	4000e400 	.word	0x4000e400

08011430 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8011430:	b480      	push	{r7}
 8011432:	b085      	sub	sp, #20
 8011434:	af00      	add	r7, sp, #0
 8011436:	6078      	str	r0, [r7, #4]
 8011438:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801143a:	2300      	movs	r3, #0
 801143c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011444:	2b01      	cmp	r3, #1
 8011446:	d101      	bne.n	801144c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8011448:	2302      	movs	r3, #2
 801144a:	e073      	b.n	8011534 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	2201      	movs	r2, #1
 8011450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801145a:	683b      	ldr	r3, [r7, #0]
 801145c:	68db      	ldr	r3, [r3, #12]
 801145e:	4313      	orrs	r3, r2
 8011460:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8011468:	683b      	ldr	r3, [r7, #0]
 801146a:	689b      	ldr	r3, [r3, #8]
 801146c:	4313      	orrs	r3, r2
 801146e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8011476:	683b      	ldr	r3, [r7, #0]
 8011478:	685b      	ldr	r3, [r3, #4]
 801147a:	4313      	orrs	r3, r2
 801147c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8011484:	683b      	ldr	r3, [r7, #0]
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	4313      	orrs	r3, r2
 801148a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8011492:	683b      	ldr	r3, [r7, #0]
 8011494:	691b      	ldr	r3, [r3, #16]
 8011496:	4313      	orrs	r3, r2
 8011498:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80114a0:	683b      	ldr	r3, [r7, #0]
 80114a2:	695b      	ldr	r3, [r3, #20]
 80114a4:	4313      	orrs	r3, r2
 80114a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80114ae:	683b      	ldr	r3, [r7, #0]
 80114b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80114b2:	4313      	orrs	r3, r2
 80114b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80114bc:	683b      	ldr	r3, [r7, #0]
 80114be:	699b      	ldr	r3, [r3, #24]
 80114c0:	041b      	lsls	r3, r3, #16
 80114c2:	4313      	orrs	r3, r2
 80114c4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80114cc:	683b      	ldr	r3, [r7, #0]
 80114ce:	69db      	ldr	r3, [r3, #28]
 80114d0:	4313      	orrs	r3, r2
 80114d2:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	4a19      	ldr	r2, [pc, #100]	@ (8011540 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80114da:	4293      	cmp	r3, r2
 80114dc:	d004      	beq.n	80114e8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	4a18      	ldr	r2, [pc, #96]	@ (8011544 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80114e4:	4293      	cmp	r3, r2
 80114e6:	d11c      	bne.n	8011522 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80114ee:	683b      	ldr	r3, [r7, #0]
 80114f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80114f2:	051b      	lsls	r3, r3, #20
 80114f4:	4313      	orrs	r3, r2
 80114f6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80114fe:	683b      	ldr	r3, [r7, #0]
 8011500:	6a1b      	ldr	r3, [r3, #32]
 8011502:	4313      	orrs	r3, r2
 8011504:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 801150c:	683b      	ldr	r3, [r7, #0]
 801150e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011510:	4313      	orrs	r3, r2
 8011512:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 801151a:	683b      	ldr	r3, [r7, #0]
 801151c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801151e:	4313      	orrs	r3, r2
 8011520:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	68fa      	ldr	r2, [r7, #12]
 8011528:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	2200      	movs	r2, #0
 801152e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8011532:	2300      	movs	r3, #0
}
 8011534:	4618      	mov	r0, r3
 8011536:	3714      	adds	r7, #20
 8011538:	46bd      	mov	sp, r7
 801153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801153e:	4770      	bx	lr
 8011540:	40010000 	.word	0x40010000
 8011544:	40010400 	.word	0x40010400

08011548 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011548:	b480      	push	{r7}
 801154a:	b083      	sub	sp, #12
 801154c:	af00      	add	r7, sp, #0
 801154e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011550:	bf00      	nop
 8011552:	370c      	adds	r7, #12
 8011554:	46bd      	mov	sp, r7
 8011556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801155a:	4770      	bx	lr

0801155c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801155c:	b480      	push	{r7}
 801155e:	b083      	sub	sp, #12
 8011560:	af00      	add	r7, sp, #0
 8011562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011564:	bf00      	nop
 8011566:	370c      	adds	r7, #12
 8011568:	46bd      	mov	sp, r7
 801156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801156e:	4770      	bx	lr

08011570 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8011570:	b480      	push	{r7}
 8011572:	b083      	sub	sp, #12
 8011574:	af00      	add	r7, sp, #0
 8011576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8011578:	bf00      	nop
 801157a:	370c      	adds	r7, #12
 801157c:	46bd      	mov	sp, r7
 801157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011582:	4770      	bx	lr

08011584 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011584:	b580      	push	{r7, lr}
 8011586:	b082      	sub	sp, #8
 8011588:	af00      	add	r7, sp, #0
 801158a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	2b00      	cmp	r3, #0
 8011590:	d101      	bne.n	8011596 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011592:	2301      	movs	r3, #1
 8011594:	e042      	b.n	801161c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801159c:	2b00      	cmp	r3, #0
 801159e:	d106      	bne.n	80115ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	2200      	movs	r2, #0
 80115a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80115a8:	6878      	ldr	r0, [r7, #4]
 80115aa:	f7f2 f82b 	bl	8003604 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	2224      	movs	r2, #36	@ 0x24
 80115b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	681a      	ldr	r2, [r3, #0]
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	f022 0201 	bic.w	r2, r2, #1
 80115c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d002      	beq.n	80115d4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80115ce:	6878      	ldr	r0, [r7, #4]
 80115d0:	f000 ff22 	bl	8012418 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80115d4:	6878      	ldr	r0, [r7, #4]
 80115d6:	f000 f8b3 	bl	8011740 <UART_SetConfig>
 80115da:	4603      	mov	r3, r0
 80115dc:	2b01      	cmp	r3, #1
 80115de:	d101      	bne.n	80115e4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80115e0:	2301      	movs	r3, #1
 80115e2:	e01b      	b.n	801161c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	685a      	ldr	r2, [r3, #4]
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80115f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	689a      	ldr	r2, [r3, #8]
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8011602:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	681a      	ldr	r2, [r3, #0]
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	f042 0201 	orr.w	r2, r2, #1
 8011612:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011614:	6878      	ldr	r0, [r7, #4]
 8011616:	f000 ffa1 	bl	801255c <UART_CheckIdleState>
 801161a:	4603      	mov	r3, r0
}
 801161c:	4618      	mov	r0, r3
 801161e:	3708      	adds	r7, #8
 8011620:	46bd      	mov	sp, r7
 8011622:	bd80      	pop	{r7, pc}

08011624 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011624:	b580      	push	{r7, lr}
 8011626:	b08a      	sub	sp, #40	@ 0x28
 8011628:	af02      	add	r7, sp, #8
 801162a:	60f8      	str	r0, [r7, #12]
 801162c:	60b9      	str	r1, [r7, #8]
 801162e:	603b      	str	r3, [r7, #0]
 8011630:	4613      	mov	r3, r2
 8011632:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801163a:	2b20      	cmp	r3, #32
 801163c:	d17b      	bne.n	8011736 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 801163e:	68bb      	ldr	r3, [r7, #8]
 8011640:	2b00      	cmp	r3, #0
 8011642:	d002      	beq.n	801164a <HAL_UART_Transmit+0x26>
 8011644:	88fb      	ldrh	r3, [r7, #6]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d101      	bne.n	801164e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801164a:	2301      	movs	r3, #1
 801164c:	e074      	b.n	8011738 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	2200      	movs	r2, #0
 8011652:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	2221      	movs	r2, #33	@ 0x21
 801165a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801165e:	f7f2 fa61 	bl	8003b24 <HAL_GetTick>
 8011662:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	88fa      	ldrh	r2, [r7, #6]
 8011668:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	88fa      	ldrh	r2, [r7, #6]
 8011670:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	689b      	ldr	r3, [r3, #8]
 8011678:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801167c:	d108      	bne.n	8011690 <HAL_UART_Transmit+0x6c>
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	691b      	ldr	r3, [r3, #16]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d104      	bne.n	8011690 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8011686:	2300      	movs	r3, #0
 8011688:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801168a:	68bb      	ldr	r3, [r7, #8]
 801168c:	61bb      	str	r3, [r7, #24]
 801168e:	e003      	b.n	8011698 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8011690:	68bb      	ldr	r3, [r7, #8]
 8011692:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011694:	2300      	movs	r3, #0
 8011696:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8011698:	e030      	b.n	80116fc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801169a:	683b      	ldr	r3, [r7, #0]
 801169c:	9300      	str	r3, [sp, #0]
 801169e:	697b      	ldr	r3, [r7, #20]
 80116a0:	2200      	movs	r2, #0
 80116a2:	2180      	movs	r1, #128	@ 0x80
 80116a4:	68f8      	ldr	r0, [r7, #12]
 80116a6:	f001 f803 	bl	80126b0 <UART_WaitOnFlagUntilTimeout>
 80116aa:	4603      	mov	r3, r0
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d005      	beq.n	80116bc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	2220      	movs	r2, #32
 80116b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80116b8:	2303      	movs	r3, #3
 80116ba:	e03d      	b.n	8011738 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80116bc:	69fb      	ldr	r3, [r7, #28]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d10b      	bne.n	80116da <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80116c2:	69bb      	ldr	r3, [r7, #24]
 80116c4:	881b      	ldrh	r3, [r3, #0]
 80116c6:	461a      	mov	r2, r3
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80116d0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80116d2:	69bb      	ldr	r3, [r7, #24]
 80116d4:	3302      	adds	r3, #2
 80116d6:	61bb      	str	r3, [r7, #24]
 80116d8:	e007      	b.n	80116ea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80116da:	69fb      	ldr	r3, [r7, #28]
 80116dc:	781a      	ldrb	r2, [r3, #0]
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80116e4:	69fb      	ldr	r3, [r7, #28]
 80116e6:	3301      	adds	r3, #1
 80116e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80116f0:	b29b      	uxth	r3, r3
 80116f2:	3b01      	subs	r3, #1
 80116f4:	b29a      	uxth	r2, r3
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8011702:	b29b      	uxth	r3, r3
 8011704:	2b00      	cmp	r3, #0
 8011706:	d1c8      	bne.n	801169a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8011708:	683b      	ldr	r3, [r7, #0]
 801170a:	9300      	str	r3, [sp, #0]
 801170c:	697b      	ldr	r3, [r7, #20]
 801170e:	2200      	movs	r2, #0
 8011710:	2140      	movs	r1, #64	@ 0x40
 8011712:	68f8      	ldr	r0, [r7, #12]
 8011714:	f000 ffcc 	bl	80126b0 <UART_WaitOnFlagUntilTimeout>
 8011718:	4603      	mov	r3, r0
 801171a:	2b00      	cmp	r3, #0
 801171c:	d005      	beq.n	801172a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	2220      	movs	r2, #32
 8011722:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8011726:	2303      	movs	r3, #3
 8011728:	e006      	b.n	8011738 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	2220      	movs	r2, #32
 801172e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8011732:	2300      	movs	r3, #0
 8011734:	e000      	b.n	8011738 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8011736:	2302      	movs	r3, #2
  }
}
 8011738:	4618      	mov	r0, r3
 801173a:	3720      	adds	r7, #32
 801173c:	46bd      	mov	sp, r7
 801173e:	bd80      	pop	{r7, pc}

08011740 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011740:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011744:	b092      	sub	sp, #72	@ 0x48
 8011746:	af00      	add	r7, sp, #0
 8011748:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801174a:	2300      	movs	r3, #0
 801174c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011750:	697b      	ldr	r3, [r7, #20]
 8011752:	689a      	ldr	r2, [r3, #8]
 8011754:	697b      	ldr	r3, [r7, #20]
 8011756:	691b      	ldr	r3, [r3, #16]
 8011758:	431a      	orrs	r2, r3
 801175a:	697b      	ldr	r3, [r7, #20]
 801175c:	695b      	ldr	r3, [r3, #20]
 801175e:	431a      	orrs	r2, r3
 8011760:	697b      	ldr	r3, [r7, #20]
 8011762:	69db      	ldr	r3, [r3, #28]
 8011764:	4313      	orrs	r3, r2
 8011766:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011768:	697b      	ldr	r3, [r7, #20]
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	681a      	ldr	r2, [r3, #0]
 801176e:	4bbe      	ldr	r3, [pc, #760]	@ (8011a68 <UART_SetConfig+0x328>)
 8011770:	4013      	ands	r3, r2
 8011772:	697a      	ldr	r2, [r7, #20]
 8011774:	6812      	ldr	r2, [r2, #0]
 8011776:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011778:	430b      	orrs	r3, r1
 801177a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801177c:	697b      	ldr	r3, [r7, #20]
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	685b      	ldr	r3, [r3, #4]
 8011782:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8011786:	697b      	ldr	r3, [r7, #20]
 8011788:	68da      	ldr	r2, [r3, #12]
 801178a:	697b      	ldr	r3, [r7, #20]
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	430a      	orrs	r2, r1
 8011790:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011792:	697b      	ldr	r3, [r7, #20]
 8011794:	699b      	ldr	r3, [r3, #24]
 8011796:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011798:	697b      	ldr	r3, [r7, #20]
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	4ab3      	ldr	r2, [pc, #716]	@ (8011a6c <UART_SetConfig+0x32c>)
 801179e:	4293      	cmp	r3, r2
 80117a0:	d004      	beq.n	80117ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80117a2:	697b      	ldr	r3, [r7, #20]
 80117a4:	6a1b      	ldr	r3, [r3, #32]
 80117a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80117a8:	4313      	orrs	r3, r2
 80117aa:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80117ac:	697b      	ldr	r3, [r7, #20]
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	689a      	ldr	r2, [r3, #8]
 80117b2:	4baf      	ldr	r3, [pc, #700]	@ (8011a70 <UART_SetConfig+0x330>)
 80117b4:	4013      	ands	r3, r2
 80117b6:	697a      	ldr	r2, [r7, #20]
 80117b8:	6812      	ldr	r2, [r2, #0]
 80117ba:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80117bc:	430b      	orrs	r3, r1
 80117be:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80117c0:	697b      	ldr	r3, [r7, #20]
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117c6:	f023 010f 	bic.w	r1, r3, #15
 80117ca:	697b      	ldr	r3, [r7, #20]
 80117cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80117ce:	697b      	ldr	r3, [r7, #20]
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	430a      	orrs	r2, r1
 80117d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80117d6:	697b      	ldr	r3, [r7, #20]
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	4aa6      	ldr	r2, [pc, #664]	@ (8011a74 <UART_SetConfig+0x334>)
 80117dc:	4293      	cmp	r3, r2
 80117de:	d177      	bne.n	80118d0 <UART_SetConfig+0x190>
 80117e0:	4ba5      	ldr	r3, [pc, #660]	@ (8011a78 <UART_SetConfig+0x338>)
 80117e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80117e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80117e8:	2b28      	cmp	r3, #40	@ 0x28
 80117ea:	d86d      	bhi.n	80118c8 <UART_SetConfig+0x188>
 80117ec:	a201      	add	r2, pc, #4	@ (adr r2, 80117f4 <UART_SetConfig+0xb4>)
 80117ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117f2:	bf00      	nop
 80117f4:	08011899 	.word	0x08011899
 80117f8:	080118c9 	.word	0x080118c9
 80117fc:	080118c9 	.word	0x080118c9
 8011800:	080118c9 	.word	0x080118c9
 8011804:	080118c9 	.word	0x080118c9
 8011808:	080118c9 	.word	0x080118c9
 801180c:	080118c9 	.word	0x080118c9
 8011810:	080118c9 	.word	0x080118c9
 8011814:	080118a1 	.word	0x080118a1
 8011818:	080118c9 	.word	0x080118c9
 801181c:	080118c9 	.word	0x080118c9
 8011820:	080118c9 	.word	0x080118c9
 8011824:	080118c9 	.word	0x080118c9
 8011828:	080118c9 	.word	0x080118c9
 801182c:	080118c9 	.word	0x080118c9
 8011830:	080118c9 	.word	0x080118c9
 8011834:	080118a9 	.word	0x080118a9
 8011838:	080118c9 	.word	0x080118c9
 801183c:	080118c9 	.word	0x080118c9
 8011840:	080118c9 	.word	0x080118c9
 8011844:	080118c9 	.word	0x080118c9
 8011848:	080118c9 	.word	0x080118c9
 801184c:	080118c9 	.word	0x080118c9
 8011850:	080118c9 	.word	0x080118c9
 8011854:	080118b1 	.word	0x080118b1
 8011858:	080118c9 	.word	0x080118c9
 801185c:	080118c9 	.word	0x080118c9
 8011860:	080118c9 	.word	0x080118c9
 8011864:	080118c9 	.word	0x080118c9
 8011868:	080118c9 	.word	0x080118c9
 801186c:	080118c9 	.word	0x080118c9
 8011870:	080118c9 	.word	0x080118c9
 8011874:	080118b9 	.word	0x080118b9
 8011878:	080118c9 	.word	0x080118c9
 801187c:	080118c9 	.word	0x080118c9
 8011880:	080118c9 	.word	0x080118c9
 8011884:	080118c9 	.word	0x080118c9
 8011888:	080118c9 	.word	0x080118c9
 801188c:	080118c9 	.word	0x080118c9
 8011890:	080118c9 	.word	0x080118c9
 8011894:	080118c1 	.word	0x080118c1
 8011898:	2301      	movs	r3, #1
 801189a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801189e:	e326      	b.n	8011eee <UART_SetConfig+0x7ae>
 80118a0:	2304      	movs	r3, #4
 80118a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80118a6:	e322      	b.n	8011eee <UART_SetConfig+0x7ae>
 80118a8:	2308      	movs	r3, #8
 80118aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80118ae:	e31e      	b.n	8011eee <UART_SetConfig+0x7ae>
 80118b0:	2310      	movs	r3, #16
 80118b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80118b6:	e31a      	b.n	8011eee <UART_SetConfig+0x7ae>
 80118b8:	2320      	movs	r3, #32
 80118ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80118be:	e316      	b.n	8011eee <UART_SetConfig+0x7ae>
 80118c0:	2340      	movs	r3, #64	@ 0x40
 80118c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80118c6:	e312      	b.n	8011eee <UART_SetConfig+0x7ae>
 80118c8:	2380      	movs	r3, #128	@ 0x80
 80118ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80118ce:	e30e      	b.n	8011eee <UART_SetConfig+0x7ae>
 80118d0:	697b      	ldr	r3, [r7, #20]
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	4a69      	ldr	r2, [pc, #420]	@ (8011a7c <UART_SetConfig+0x33c>)
 80118d6:	4293      	cmp	r3, r2
 80118d8:	d130      	bne.n	801193c <UART_SetConfig+0x1fc>
 80118da:	4b67      	ldr	r3, [pc, #412]	@ (8011a78 <UART_SetConfig+0x338>)
 80118dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80118de:	f003 0307 	and.w	r3, r3, #7
 80118e2:	2b05      	cmp	r3, #5
 80118e4:	d826      	bhi.n	8011934 <UART_SetConfig+0x1f4>
 80118e6:	a201      	add	r2, pc, #4	@ (adr r2, 80118ec <UART_SetConfig+0x1ac>)
 80118e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118ec:	08011905 	.word	0x08011905
 80118f0:	0801190d 	.word	0x0801190d
 80118f4:	08011915 	.word	0x08011915
 80118f8:	0801191d 	.word	0x0801191d
 80118fc:	08011925 	.word	0x08011925
 8011900:	0801192d 	.word	0x0801192d
 8011904:	2300      	movs	r3, #0
 8011906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801190a:	e2f0      	b.n	8011eee <UART_SetConfig+0x7ae>
 801190c:	2304      	movs	r3, #4
 801190e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011912:	e2ec      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011914:	2308      	movs	r3, #8
 8011916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801191a:	e2e8      	b.n	8011eee <UART_SetConfig+0x7ae>
 801191c:	2310      	movs	r3, #16
 801191e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011922:	e2e4      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011924:	2320      	movs	r3, #32
 8011926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801192a:	e2e0      	b.n	8011eee <UART_SetConfig+0x7ae>
 801192c:	2340      	movs	r3, #64	@ 0x40
 801192e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011932:	e2dc      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011934:	2380      	movs	r3, #128	@ 0x80
 8011936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801193a:	e2d8      	b.n	8011eee <UART_SetConfig+0x7ae>
 801193c:	697b      	ldr	r3, [r7, #20]
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	4a4f      	ldr	r2, [pc, #316]	@ (8011a80 <UART_SetConfig+0x340>)
 8011942:	4293      	cmp	r3, r2
 8011944:	d130      	bne.n	80119a8 <UART_SetConfig+0x268>
 8011946:	4b4c      	ldr	r3, [pc, #304]	@ (8011a78 <UART_SetConfig+0x338>)
 8011948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801194a:	f003 0307 	and.w	r3, r3, #7
 801194e:	2b05      	cmp	r3, #5
 8011950:	d826      	bhi.n	80119a0 <UART_SetConfig+0x260>
 8011952:	a201      	add	r2, pc, #4	@ (adr r2, 8011958 <UART_SetConfig+0x218>)
 8011954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011958:	08011971 	.word	0x08011971
 801195c:	08011979 	.word	0x08011979
 8011960:	08011981 	.word	0x08011981
 8011964:	08011989 	.word	0x08011989
 8011968:	08011991 	.word	0x08011991
 801196c:	08011999 	.word	0x08011999
 8011970:	2300      	movs	r3, #0
 8011972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011976:	e2ba      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011978:	2304      	movs	r3, #4
 801197a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801197e:	e2b6      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011980:	2308      	movs	r3, #8
 8011982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011986:	e2b2      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011988:	2310      	movs	r3, #16
 801198a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801198e:	e2ae      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011990:	2320      	movs	r3, #32
 8011992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011996:	e2aa      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011998:	2340      	movs	r3, #64	@ 0x40
 801199a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801199e:	e2a6      	b.n	8011eee <UART_SetConfig+0x7ae>
 80119a0:	2380      	movs	r3, #128	@ 0x80
 80119a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80119a6:	e2a2      	b.n	8011eee <UART_SetConfig+0x7ae>
 80119a8:	697b      	ldr	r3, [r7, #20]
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	4a35      	ldr	r2, [pc, #212]	@ (8011a84 <UART_SetConfig+0x344>)
 80119ae:	4293      	cmp	r3, r2
 80119b0:	d130      	bne.n	8011a14 <UART_SetConfig+0x2d4>
 80119b2:	4b31      	ldr	r3, [pc, #196]	@ (8011a78 <UART_SetConfig+0x338>)
 80119b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80119b6:	f003 0307 	and.w	r3, r3, #7
 80119ba:	2b05      	cmp	r3, #5
 80119bc:	d826      	bhi.n	8011a0c <UART_SetConfig+0x2cc>
 80119be:	a201      	add	r2, pc, #4	@ (adr r2, 80119c4 <UART_SetConfig+0x284>)
 80119c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119c4:	080119dd 	.word	0x080119dd
 80119c8:	080119e5 	.word	0x080119e5
 80119cc:	080119ed 	.word	0x080119ed
 80119d0:	080119f5 	.word	0x080119f5
 80119d4:	080119fd 	.word	0x080119fd
 80119d8:	08011a05 	.word	0x08011a05
 80119dc:	2300      	movs	r3, #0
 80119de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80119e2:	e284      	b.n	8011eee <UART_SetConfig+0x7ae>
 80119e4:	2304      	movs	r3, #4
 80119e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80119ea:	e280      	b.n	8011eee <UART_SetConfig+0x7ae>
 80119ec:	2308      	movs	r3, #8
 80119ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80119f2:	e27c      	b.n	8011eee <UART_SetConfig+0x7ae>
 80119f4:	2310      	movs	r3, #16
 80119f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80119fa:	e278      	b.n	8011eee <UART_SetConfig+0x7ae>
 80119fc:	2320      	movs	r3, #32
 80119fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011a02:	e274      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011a04:	2340      	movs	r3, #64	@ 0x40
 8011a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011a0a:	e270      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011a0c:	2380      	movs	r3, #128	@ 0x80
 8011a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011a12:	e26c      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011a14:	697b      	ldr	r3, [r7, #20]
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	4a1b      	ldr	r2, [pc, #108]	@ (8011a88 <UART_SetConfig+0x348>)
 8011a1a:	4293      	cmp	r3, r2
 8011a1c:	d142      	bne.n	8011aa4 <UART_SetConfig+0x364>
 8011a1e:	4b16      	ldr	r3, [pc, #88]	@ (8011a78 <UART_SetConfig+0x338>)
 8011a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011a22:	f003 0307 	and.w	r3, r3, #7
 8011a26:	2b05      	cmp	r3, #5
 8011a28:	d838      	bhi.n	8011a9c <UART_SetConfig+0x35c>
 8011a2a:	a201      	add	r2, pc, #4	@ (adr r2, 8011a30 <UART_SetConfig+0x2f0>)
 8011a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a30:	08011a49 	.word	0x08011a49
 8011a34:	08011a51 	.word	0x08011a51
 8011a38:	08011a59 	.word	0x08011a59
 8011a3c:	08011a61 	.word	0x08011a61
 8011a40:	08011a8d 	.word	0x08011a8d
 8011a44:	08011a95 	.word	0x08011a95
 8011a48:	2300      	movs	r3, #0
 8011a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011a4e:	e24e      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011a50:	2304      	movs	r3, #4
 8011a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011a56:	e24a      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011a58:	2308      	movs	r3, #8
 8011a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011a5e:	e246      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011a60:	2310      	movs	r3, #16
 8011a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011a66:	e242      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011a68:	cfff69f3 	.word	0xcfff69f3
 8011a6c:	58000c00 	.word	0x58000c00
 8011a70:	11fff4ff 	.word	0x11fff4ff
 8011a74:	40011000 	.word	0x40011000
 8011a78:	58024400 	.word	0x58024400
 8011a7c:	40004400 	.word	0x40004400
 8011a80:	40004800 	.word	0x40004800
 8011a84:	40004c00 	.word	0x40004c00
 8011a88:	40005000 	.word	0x40005000
 8011a8c:	2320      	movs	r3, #32
 8011a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011a92:	e22c      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011a94:	2340      	movs	r3, #64	@ 0x40
 8011a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011a9a:	e228      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011a9c:	2380      	movs	r3, #128	@ 0x80
 8011a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011aa2:	e224      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011aa4:	697b      	ldr	r3, [r7, #20]
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	4ab1      	ldr	r2, [pc, #708]	@ (8011d70 <UART_SetConfig+0x630>)
 8011aaa:	4293      	cmp	r3, r2
 8011aac:	d176      	bne.n	8011b9c <UART_SetConfig+0x45c>
 8011aae:	4bb1      	ldr	r3, [pc, #708]	@ (8011d74 <UART_SetConfig+0x634>)
 8011ab0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011ab2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011ab6:	2b28      	cmp	r3, #40	@ 0x28
 8011ab8:	d86c      	bhi.n	8011b94 <UART_SetConfig+0x454>
 8011aba:	a201      	add	r2, pc, #4	@ (adr r2, 8011ac0 <UART_SetConfig+0x380>)
 8011abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ac0:	08011b65 	.word	0x08011b65
 8011ac4:	08011b95 	.word	0x08011b95
 8011ac8:	08011b95 	.word	0x08011b95
 8011acc:	08011b95 	.word	0x08011b95
 8011ad0:	08011b95 	.word	0x08011b95
 8011ad4:	08011b95 	.word	0x08011b95
 8011ad8:	08011b95 	.word	0x08011b95
 8011adc:	08011b95 	.word	0x08011b95
 8011ae0:	08011b6d 	.word	0x08011b6d
 8011ae4:	08011b95 	.word	0x08011b95
 8011ae8:	08011b95 	.word	0x08011b95
 8011aec:	08011b95 	.word	0x08011b95
 8011af0:	08011b95 	.word	0x08011b95
 8011af4:	08011b95 	.word	0x08011b95
 8011af8:	08011b95 	.word	0x08011b95
 8011afc:	08011b95 	.word	0x08011b95
 8011b00:	08011b75 	.word	0x08011b75
 8011b04:	08011b95 	.word	0x08011b95
 8011b08:	08011b95 	.word	0x08011b95
 8011b0c:	08011b95 	.word	0x08011b95
 8011b10:	08011b95 	.word	0x08011b95
 8011b14:	08011b95 	.word	0x08011b95
 8011b18:	08011b95 	.word	0x08011b95
 8011b1c:	08011b95 	.word	0x08011b95
 8011b20:	08011b7d 	.word	0x08011b7d
 8011b24:	08011b95 	.word	0x08011b95
 8011b28:	08011b95 	.word	0x08011b95
 8011b2c:	08011b95 	.word	0x08011b95
 8011b30:	08011b95 	.word	0x08011b95
 8011b34:	08011b95 	.word	0x08011b95
 8011b38:	08011b95 	.word	0x08011b95
 8011b3c:	08011b95 	.word	0x08011b95
 8011b40:	08011b85 	.word	0x08011b85
 8011b44:	08011b95 	.word	0x08011b95
 8011b48:	08011b95 	.word	0x08011b95
 8011b4c:	08011b95 	.word	0x08011b95
 8011b50:	08011b95 	.word	0x08011b95
 8011b54:	08011b95 	.word	0x08011b95
 8011b58:	08011b95 	.word	0x08011b95
 8011b5c:	08011b95 	.word	0x08011b95
 8011b60:	08011b8d 	.word	0x08011b8d
 8011b64:	2301      	movs	r3, #1
 8011b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011b6a:	e1c0      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011b6c:	2304      	movs	r3, #4
 8011b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011b72:	e1bc      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011b74:	2308      	movs	r3, #8
 8011b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011b7a:	e1b8      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011b7c:	2310      	movs	r3, #16
 8011b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011b82:	e1b4      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011b84:	2320      	movs	r3, #32
 8011b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011b8a:	e1b0      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011b8c:	2340      	movs	r3, #64	@ 0x40
 8011b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011b92:	e1ac      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011b94:	2380      	movs	r3, #128	@ 0x80
 8011b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011b9a:	e1a8      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011b9c:	697b      	ldr	r3, [r7, #20]
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	4a75      	ldr	r2, [pc, #468]	@ (8011d78 <UART_SetConfig+0x638>)
 8011ba2:	4293      	cmp	r3, r2
 8011ba4:	d130      	bne.n	8011c08 <UART_SetConfig+0x4c8>
 8011ba6:	4b73      	ldr	r3, [pc, #460]	@ (8011d74 <UART_SetConfig+0x634>)
 8011ba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011baa:	f003 0307 	and.w	r3, r3, #7
 8011bae:	2b05      	cmp	r3, #5
 8011bb0:	d826      	bhi.n	8011c00 <UART_SetConfig+0x4c0>
 8011bb2:	a201      	add	r2, pc, #4	@ (adr r2, 8011bb8 <UART_SetConfig+0x478>)
 8011bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bb8:	08011bd1 	.word	0x08011bd1
 8011bbc:	08011bd9 	.word	0x08011bd9
 8011bc0:	08011be1 	.word	0x08011be1
 8011bc4:	08011be9 	.word	0x08011be9
 8011bc8:	08011bf1 	.word	0x08011bf1
 8011bcc:	08011bf9 	.word	0x08011bf9
 8011bd0:	2300      	movs	r3, #0
 8011bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011bd6:	e18a      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011bd8:	2304      	movs	r3, #4
 8011bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011bde:	e186      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011be0:	2308      	movs	r3, #8
 8011be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011be6:	e182      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011be8:	2310      	movs	r3, #16
 8011bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011bee:	e17e      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011bf0:	2320      	movs	r3, #32
 8011bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011bf6:	e17a      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011bf8:	2340      	movs	r3, #64	@ 0x40
 8011bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011bfe:	e176      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011c00:	2380      	movs	r3, #128	@ 0x80
 8011c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011c06:	e172      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011c08:	697b      	ldr	r3, [r7, #20]
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	4a5b      	ldr	r2, [pc, #364]	@ (8011d7c <UART_SetConfig+0x63c>)
 8011c0e:	4293      	cmp	r3, r2
 8011c10:	d130      	bne.n	8011c74 <UART_SetConfig+0x534>
 8011c12:	4b58      	ldr	r3, [pc, #352]	@ (8011d74 <UART_SetConfig+0x634>)
 8011c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011c16:	f003 0307 	and.w	r3, r3, #7
 8011c1a:	2b05      	cmp	r3, #5
 8011c1c:	d826      	bhi.n	8011c6c <UART_SetConfig+0x52c>
 8011c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8011c24 <UART_SetConfig+0x4e4>)
 8011c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c24:	08011c3d 	.word	0x08011c3d
 8011c28:	08011c45 	.word	0x08011c45
 8011c2c:	08011c4d 	.word	0x08011c4d
 8011c30:	08011c55 	.word	0x08011c55
 8011c34:	08011c5d 	.word	0x08011c5d
 8011c38:	08011c65 	.word	0x08011c65
 8011c3c:	2300      	movs	r3, #0
 8011c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011c42:	e154      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011c44:	2304      	movs	r3, #4
 8011c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011c4a:	e150      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011c4c:	2308      	movs	r3, #8
 8011c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011c52:	e14c      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011c54:	2310      	movs	r3, #16
 8011c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011c5a:	e148      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011c5c:	2320      	movs	r3, #32
 8011c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011c62:	e144      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011c64:	2340      	movs	r3, #64	@ 0x40
 8011c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011c6a:	e140      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011c6c:	2380      	movs	r3, #128	@ 0x80
 8011c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011c72:	e13c      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011c74:	697b      	ldr	r3, [r7, #20]
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	4a41      	ldr	r2, [pc, #260]	@ (8011d80 <UART_SetConfig+0x640>)
 8011c7a:	4293      	cmp	r3, r2
 8011c7c:	f040 8082 	bne.w	8011d84 <UART_SetConfig+0x644>
 8011c80:	4b3c      	ldr	r3, [pc, #240]	@ (8011d74 <UART_SetConfig+0x634>)
 8011c82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011c84:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011c88:	2b28      	cmp	r3, #40	@ 0x28
 8011c8a:	d86d      	bhi.n	8011d68 <UART_SetConfig+0x628>
 8011c8c:	a201      	add	r2, pc, #4	@ (adr r2, 8011c94 <UART_SetConfig+0x554>)
 8011c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c92:	bf00      	nop
 8011c94:	08011d39 	.word	0x08011d39
 8011c98:	08011d69 	.word	0x08011d69
 8011c9c:	08011d69 	.word	0x08011d69
 8011ca0:	08011d69 	.word	0x08011d69
 8011ca4:	08011d69 	.word	0x08011d69
 8011ca8:	08011d69 	.word	0x08011d69
 8011cac:	08011d69 	.word	0x08011d69
 8011cb0:	08011d69 	.word	0x08011d69
 8011cb4:	08011d41 	.word	0x08011d41
 8011cb8:	08011d69 	.word	0x08011d69
 8011cbc:	08011d69 	.word	0x08011d69
 8011cc0:	08011d69 	.word	0x08011d69
 8011cc4:	08011d69 	.word	0x08011d69
 8011cc8:	08011d69 	.word	0x08011d69
 8011ccc:	08011d69 	.word	0x08011d69
 8011cd0:	08011d69 	.word	0x08011d69
 8011cd4:	08011d49 	.word	0x08011d49
 8011cd8:	08011d69 	.word	0x08011d69
 8011cdc:	08011d69 	.word	0x08011d69
 8011ce0:	08011d69 	.word	0x08011d69
 8011ce4:	08011d69 	.word	0x08011d69
 8011ce8:	08011d69 	.word	0x08011d69
 8011cec:	08011d69 	.word	0x08011d69
 8011cf0:	08011d69 	.word	0x08011d69
 8011cf4:	08011d51 	.word	0x08011d51
 8011cf8:	08011d69 	.word	0x08011d69
 8011cfc:	08011d69 	.word	0x08011d69
 8011d00:	08011d69 	.word	0x08011d69
 8011d04:	08011d69 	.word	0x08011d69
 8011d08:	08011d69 	.word	0x08011d69
 8011d0c:	08011d69 	.word	0x08011d69
 8011d10:	08011d69 	.word	0x08011d69
 8011d14:	08011d59 	.word	0x08011d59
 8011d18:	08011d69 	.word	0x08011d69
 8011d1c:	08011d69 	.word	0x08011d69
 8011d20:	08011d69 	.word	0x08011d69
 8011d24:	08011d69 	.word	0x08011d69
 8011d28:	08011d69 	.word	0x08011d69
 8011d2c:	08011d69 	.word	0x08011d69
 8011d30:	08011d69 	.word	0x08011d69
 8011d34:	08011d61 	.word	0x08011d61
 8011d38:	2301      	movs	r3, #1
 8011d3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d3e:	e0d6      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011d40:	2304      	movs	r3, #4
 8011d42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d46:	e0d2      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011d48:	2308      	movs	r3, #8
 8011d4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d4e:	e0ce      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011d50:	2310      	movs	r3, #16
 8011d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d56:	e0ca      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011d58:	2320      	movs	r3, #32
 8011d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d5e:	e0c6      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011d60:	2340      	movs	r3, #64	@ 0x40
 8011d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d66:	e0c2      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011d68:	2380      	movs	r3, #128	@ 0x80
 8011d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d6e:	e0be      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011d70:	40011400 	.word	0x40011400
 8011d74:	58024400 	.word	0x58024400
 8011d78:	40007800 	.word	0x40007800
 8011d7c:	40007c00 	.word	0x40007c00
 8011d80:	40011800 	.word	0x40011800
 8011d84:	697b      	ldr	r3, [r7, #20]
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	4aad      	ldr	r2, [pc, #692]	@ (8012040 <UART_SetConfig+0x900>)
 8011d8a:	4293      	cmp	r3, r2
 8011d8c:	d176      	bne.n	8011e7c <UART_SetConfig+0x73c>
 8011d8e:	4bad      	ldr	r3, [pc, #692]	@ (8012044 <UART_SetConfig+0x904>)
 8011d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011d92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011d96:	2b28      	cmp	r3, #40	@ 0x28
 8011d98:	d86c      	bhi.n	8011e74 <UART_SetConfig+0x734>
 8011d9a:	a201      	add	r2, pc, #4	@ (adr r2, 8011da0 <UART_SetConfig+0x660>)
 8011d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011da0:	08011e45 	.word	0x08011e45
 8011da4:	08011e75 	.word	0x08011e75
 8011da8:	08011e75 	.word	0x08011e75
 8011dac:	08011e75 	.word	0x08011e75
 8011db0:	08011e75 	.word	0x08011e75
 8011db4:	08011e75 	.word	0x08011e75
 8011db8:	08011e75 	.word	0x08011e75
 8011dbc:	08011e75 	.word	0x08011e75
 8011dc0:	08011e4d 	.word	0x08011e4d
 8011dc4:	08011e75 	.word	0x08011e75
 8011dc8:	08011e75 	.word	0x08011e75
 8011dcc:	08011e75 	.word	0x08011e75
 8011dd0:	08011e75 	.word	0x08011e75
 8011dd4:	08011e75 	.word	0x08011e75
 8011dd8:	08011e75 	.word	0x08011e75
 8011ddc:	08011e75 	.word	0x08011e75
 8011de0:	08011e55 	.word	0x08011e55
 8011de4:	08011e75 	.word	0x08011e75
 8011de8:	08011e75 	.word	0x08011e75
 8011dec:	08011e75 	.word	0x08011e75
 8011df0:	08011e75 	.word	0x08011e75
 8011df4:	08011e75 	.word	0x08011e75
 8011df8:	08011e75 	.word	0x08011e75
 8011dfc:	08011e75 	.word	0x08011e75
 8011e00:	08011e5d 	.word	0x08011e5d
 8011e04:	08011e75 	.word	0x08011e75
 8011e08:	08011e75 	.word	0x08011e75
 8011e0c:	08011e75 	.word	0x08011e75
 8011e10:	08011e75 	.word	0x08011e75
 8011e14:	08011e75 	.word	0x08011e75
 8011e18:	08011e75 	.word	0x08011e75
 8011e1c:	08011e75 	.word	0x08011e75
 8011e20:	08011e65 	.word	0x08011e65
 8011e24:	08011e75 	.word	0x08011e75
 8011e28:	08011e75 	.word	0x08011e75
 8011e2c:	08011e75 	.word	0x08011e75
 8011e30:	08011e75 	.word	0x08011e75
 8011e34:	08011e75 	.word	0x08011e75
 8011e38:	08011e75 	.word	0x08011e75
 8011e3c:	08011e75 	.word	0x08011e75
 8011e40:	08011e6d 	.word	0x08011e6d
 8011e44:	2301      	movs	r3, #1
 8011e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011e4a:	e050      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011e4c:	2304      	movs	r3, #4
 8011e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011e52:	e04c      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011e54:	2308      	movs	r3, #8
 8011e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011e5a:	e048      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011e5c:	2310      	movs	r3, #16
 8011e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011e62:	e044      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011e64:	2320      	movs	r3, #32
 8011e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011e6a:	e040      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011e6c:	2340      	movs	r3, #64	@ 0x40
 8011e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011e72:	e03c      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011e74:	2380      	movs	r3, #128	@ 0x80
 8011e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011e7a:	e038      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011e7c:	697b      	ldr	r3, [r7, #20]
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	4a71      	ldr	r2, [pc, #452]	@ (8012048 <UART_SetConfig+0x908>)
 8011e82:	4293      	cmp	r3, r2
 8011e84:	d130      	bne.n	8011ee8 <UART_SetConfig+0x7a8>
 8011e86:	4b6f      	ldr	r3, [pc, #444]	@ (8012044 <UART_SetConfig+0x904>)
 8011e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011e8a:	f003 0307 	and.w	r3, r3, #7
 8011e8e:	2b05      	cmp	r3, #5
 8011e90:	d826      	bhi.n	8011ee0 <UART_SetConfig+0x7a0>
 8011e92:	a201      	add	r2, pc, #4	@ (adr r2, 8011e98 <UART_SetConfig+0x758>)
 8011e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e98:	08011eb1 	.word	0x08011eb1
 8011e9c:	08011eb9 	.word	0x08011eb9
 8011ea0:	08011ec1 	.word	0x08011ec1
 8011ea4:	08011ec9 	.word	0x08011ec9
 8011ea8:	08011ed1 	.word	0x08011ed1
 8011eac:	08011ed9 	.word	0x08011ed9
 8011eb0:	2302      	movs	r3, #2
 8011eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011eb6:	e01a      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011eb8:	2304      	movs	r3, #4
 8011eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011ebe:	e016      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011ec0:	2308      	movs	r3, #8
 8011ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011ec6:	e012      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011ec8:	2310      	movs	r3, #16
 8011eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011ece:	e00e      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011ed0:	2320      	movs	r3, #32
 8011ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011ed6:	e00a      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011ed8:	2340      	movs	r3, #64	@ 0x40
 8011eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011ede:	e006      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011ee0:	2380      	movs	r3, #128	@ 0x80
 8011ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011ee6:	e002      	b.n	8011eee <UART_SetConfig+0x7ae>
 8011ee8:	2380      	movs	r3, #128	@ 0x80
 8011eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011eee:	697b      	ldr	r3, [r7, #20]
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	4a55      	ldr	r2, [pc, #340]	@ (8012048 <UART_SetConfig+0x908>)
 8011ef4:	4293      	cmp	r3, r2
 8011ef6:	f040 80f8 	bne.w	80120ea <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011efa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8011efe:	2b20      	cmp	r3, #32
 8011f00:	dc46      	bgt.n	8011f90 <UART_SetConfig+0x850>
 8011f02:	2b02      	cmp	r3, #2
 8011f04:	db75      	blt.n	8011ff2 <UART_SetConfig+0x8b2>
 8011f06:	3b02      	subs	r3, #2
 8011f08:	2b1e      	cmp	r3, #30
 8011f0a:	d872      	bhi.n	8011ff2 <UART_SetConfig+0x8b2>
 8011f0c:	a201      	add	r2, pc, #4	@ (adr r2, 8011f14 <UART_SetConfig+0x7d4>)
 8011f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f12:	bf00      	nop
 8011f14:	08011f97 	.word	0x08011f97
 8011f18:	08011ff3 	.word	0x08011ff3
 8011f1c:	08011f9f 	.word	0x08011f9f
 8011f20:	08011ff3 	.word	0x08011ff3
 8011f24:	08011ff3 	.word	0x08011ff3
 8011f28:	08011ff3 	.word	0x08011ff3
 8011f2c:	08011faf 	.word	0x08011faf
 8011f30:	08011ff3 	.word	0x08011ff3
 8011f34:	08011ff3 	.word	0x08011ff3
 8011f38:	08011ff3 	.word	0x08011ff3
 8011f3c:	08011ff3 	.word	0x08011ff3
 8011f40:	08011ff3 	.word	0x08011ff3
 8011f44:	08011ff3 	.word	0x08011ff3
 8011f48:	08011ff3 	.word	0x08011ff3
 8011f4c:	08011fbf 	.word	0x08011fbf
 8011f50:	08011ff3 	.word	0x08011ff3
 8011f54:	08011ff3 	.word	0x08011ff3
 8011f58:	08011ff3 	.word	0x08011ff3
 8011f5c:	08011ff3 	.word	0x08011ff3
 8011f60:	08011ff3 	.word	0x08011ff3
 8011f64:	08011ff3 	.word	0x08011ff3
 8011f68:	08011ff3 	.word	0x08011ff3
 8011f6c:	08011ff3 	.word	0x08011ff3
 8011f70:	08011ff3 	.word	0x08011ff3
 8011f74:	08011ff3 	.word	0x08011ff3
 8011f78:	08011ff3 	.word	0x08011ff3
 8011f7c:	08011ff3 	.word	0x08011ff3
 8011f80:	08011ff3 	.word	0x08011ff3
 8011f84:	08011ff3 	.word	0x08011ff3
 8011f88:	08011ff3 	.word	0x08011ff3
 8011f8c:	08011fe5 	.word	0x08011fe5
 8011f90:	2b40      	cmp	r3, #64	@ 0x40
 8011f92:	d02a      	beq.n	8011fea <UART_SetConfig+0x8aa>
 8011f94:	e02d      	b.n	8011ff2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8011f96:	f7fa fd91 	bl	800cabc <HAL_RCCEx_GetD3PCLK1Freq>
 8011f9a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011f9c:	e02f      	b.n	8011ffe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011f9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011fa2:	4618      	mov	r0, r3
 8011fa4:	f7fa fda0 	bl	800cae8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011fac:	e027      	b.n	8011ffe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011fae:	f107 0318 	add.w	r3, r7, #24
 8011fb2:	4618      	mov	r0, r3
 8011fb4:	f7fa feec 	bl	800cd90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011fb8:	69fb      	ldr	r3, [r7, #28]
 8011fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011fbc:	e01f      	b.n	8011ffe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011fbe:	4b21      	ldr	r3, [pc, #132]	@ (8012044 <UART_SetConfig+0x904>)
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	f003 0320 	and.w	r3, r3, #32
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d009      	beq.n	8011fde <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011fca:	4b1e      	ldr	r3, [pc, #120]	@ (8012044 <UART_SetConfig+0x904>)
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	08db      	lsrs	r3, r3, #3
 8011fd0:	f003 0303 	and.w	r3, r3, #3
 8011fd4:	4a1d      	ldr	r2, [pc, #116]	@ (801204c <UART_SetConfig+0x90c>)
 8011fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8011fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011fdc:	e00f      	b.n	8011ffe <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8011fde:	4b1b      	ldr	r3, [pc, #108]	@ (801204c <UART_SetConfig+0x90c>)
 8011fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011fe2:	e00c      	b.n	8011ffe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011fe4:	4b1a      	ldr	r3, [pc, #104]	@ (8012050 <UART_SetConfig+0x910>)
 8011fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011fe8:	e009      	b.n	8011ffe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011fea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011ff0:	e005      	b.n	8011ffe <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8011ff2:	2300      	movs	r3, #0
 8011ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8011ff6:	2301      	movs	r3, #1
 8011ff8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8011ffc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011ffe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012000:	2b00      	cmp	r3, #0
 8012002:	f000 81ee 	beq.w	80123e2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8012006:	697b      	ldr	r3, [r7, #20]
 8012008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801200a:	4a12      	ldr	r2, [pc, #72]	@ (8012054 <UART_SetConfig+0x914>)
 801200c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012010:	461a      	mov	r2, r3
 8012012:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012014:	fbb3 f3f2 	udiv	r3, r3, r2
 8012018:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801201a:	697b      	ldr	r3, [r7, #20]
 801201c:	685a      	ldr	r2, [r3, #4]
 801201e:	4613      	mov	r3, r2
 8012020:	005b      	lsls	r3, r3, #1
 8012022:	4413      	add	r3, r2
 8012024:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012026:	429a      	cmp	r2, r3
 8012028:	d305      	bcc.n	8012036 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801202a:	697b      	ldr	r3, [r7, #20]
 801202c:	685b      	ldr	r3, [r3, #4]
 801202e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012030:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012032:	429a      	cmp	r2, r3
 8012034:	d910      	bls.n	8012058 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8012036:	2301      	movs	r3, #1
 8012038:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801203c:	e1d1      	b.n	80123e2 <UART_SetConfig+0xca2>
 801203e:	bf00      	nop
 8012040:	40011c00 	.word	0x40011c00
 8012044:	58024400 	.word	0x58024400
 8012048:	58000c00 	.word	0x58000c00
 801204c:	03d09000 	.word	0x03d09000
 8012050:	003d0900 	.word	0x003d0900
 8012054:	080149a4 	.word	0x080149a4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012058:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801205a:	2200      	movs	r2, #0
 801205c:	60bb      	str	r3, [r7, #8]
 801205e:	60fa      	str	r2, [r7, #12]
 8012060:	697b      	ldr	r3, [r7, #20]
 8012062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012064:	4ac0      	ldr	r2, [pc, #768]	@ (8012368 <UART_SetConfig+0xc28>)
 8012066:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801206a:	b29b      	uxth	r3, r3
 801206c:	2200      	movs	r2, #0
 801206e:	603b      	str	r3, [r7, #0]
 8012070:	607a      	str	r2, [r7, #4]
 8012072:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012076:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801207a:	f7ee f9a1 	bl	80003c0 <__aeabi_uldivmod>
 801207e:	4602      	mov	r2, r0
 8012080:	460b      	mov	r3, r1
 8012082:	4610      	mov	r0, r2
 8012084:	4619      	mov	r1, r3
 8012086:	f04f 0200 	mov.w	r2, #0
 801208a:	f04f 0300 	mov.w	r3, #0
 801208e:	020b      	lsls	r3, r1, #8
 8012090:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8012094:	0202      	lsls	r2, r0, #8
 8012096:	6979      	ldr	r1, [r7, #20]
 8012098:	6849      	ldr	r1, [r1, #4]
 801209a:	0849      	lsrs	r1, r1, #1
 801209c:	2000      	movs	r0, #0
 801209e:	460c      	mov	r4, r1
 80120a0:	4605      	mov	r5, r0
 80120a2:	eb12 0804 	adds.w	r8, r2, r4
 80120a6:	eb43 0905 	adc.w	r9, r3, r5
 80120aa:	697b      	ldr	r3, [r7, #20]
 80120ac:	685b      	ldr	r3, [r3, #4]
 80120ae:	2200      	movs	r2, #0
 80120b0:	469a      	mov	sl, r3
 80120b2:	4693      	mov	fp, r2
 80120b4:	4652      	mov	r2, sl
 80120b6:	465b      	mov	r3, fp
 80120b8:	4640      	mov	r0, r8
 80120ba:	4649      	mov	r1, r9
 80120bc:	f7ee f980 	bl	80003c0 <__aeabi_uldivmod>
 80120c0:	4602      	mov	r2, r0
 80120c2:	460b      	mov	r3, r1
 80120c4:	4613      	mov	r3, r2
 80120c6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80120c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80120ce:	d308      	bcc.n	80120e2 <UART_SetConfig+0x9a2>
 80120d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80120d6:	d204      	bcs.n	80120e2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80120d8:	697b      	ldr	r3, [r7, #20]
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80120de:	60da      	str	r2, [r3, #12]
 80120e0:	e17f      	b.n	80123e2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80120e2:	2301      	movs	r3, #1
 80120e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80120e8:	e17b      	b.n	80123e2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80120ea:	697b      	ldr	r3, [r7, #20]
 80120ec:	69db      	ldr	r3, [r3, #28]
 80120ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80120f2:	f040 80bd 	bne.w	8012270 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80120f6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80120fa:	2b20      	cmp	r3, #32
 80120fc:	dc48      	bgt.n	8012190 <UART_SetConfig+0xa50>
 80120fe:	2b00      	cmp	r3, #0
 8012100:	db7b      	blt.n	80121fa <UART_SetConfig+0xaba>
 8012102:	2b20      	cmp	r3, #32
 8012104:	d879      	bhi.n	80121fa <UART_SetConfig+0xaba>
 8012106:	a201      	add	r2, pc, #4	@ (adr r2, 801210c <UART_SetConfig+0x9cc>)
 8012108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801210c:	08012197 	.word	0x08012197
 8012110:	0801219f 	.word	0x0801219f
 8012114:	080121fb 	.word	0x080121fb
 8012118:	080121fb 	.word	0x080121fb
 801211c:	080121a7 	.word	0x080121a7
 8012120:	080121fb 	.word	0x080121fb
 8012124:	080121fb 	.word	0x080121fb
 8012128:	080121fb 	.word	0x080121fb
 801212c:	080121b7 	.word	0x080121b7
 8012130:	080121fb 	.word	0x080121fb
 8012134:	080121fb 	.word	0x080121fb
 8012138:	080121fb 	.word	0x080121fb
 801213c:	080121fb 	.word	0x080121fb
 8012140:	080121fb 	.word	0x080121fb
 8012144:	080121fb 	.word	0x080121fb
 8012148:	080121fb 	.word	0x080121fb
 801214c:	080121c7 	.word	0x080121c7
 8012150:	080121fb 	.word	0x080121fb
 8012154:	080121fb 	.word	0x080121fb
 8012158:	080121fb 	.word	0x080121fb
 801215c:	080121fb 	.word	0x080121fb
 8012160:	080121fb 	.word	0x080121fb
 8012164:	080121fb 	.word	0x080121fb
 8012168:	080121fb 	.word	0x080121fb
 801216c:	080121fb 	.word	0x080121fb
 8012170:	080121fb 	.word	0x080121fb
 8012174:	080121fb 	.word	0x080121fb
 8012178:	080121fb 	.word	0x080121fb
 801217c:	080121fb 	.word	0x080121fb
 8012180:	080121fb 	.word	0x080121fb
 8012184:	080121fb 	.word	0x080121fb
 8012188:	080121fb 	.word	0x080121fb
 801218c:	080121ed 	.word	0x080121ed
 8012190:	2b40      	cmp	r3, #64	@ 0x40
 8012192:	d02e      	beq.n	80121f2 <UART_SetConfig+0xab2>
 8012194:	e031      	b.n	80121fa <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012196:	f7f8 fdf3 	bl	800ad80 <HAL_RCC_GetPCLK1Freq>
 801219a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801219c:	e033      	b.n	8012206 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801219e:	f7f8 fe05 	bl	800adac <HAL_RCC_GetPCLK2Freq>
 80121a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80121a4:	e02f      	b.n	8012206 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80121a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80121aa:	4618      	mov	r0, r3
 80121ac:	f7fa fc9c 	bl	800cae8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80121b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80121b4:	e027      	b.n	8012206 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80121b6:	f107 0318 	add.w	r3, r7, #24
 80121ba:	4618      	mov	r0, r3
 80121bc:	f7fa fde8 	bl	800cd90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80121c0:	69fb      	ldr	r3, [r7, #28]
 80121c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80121c4:	e01f      	b.n	8012206 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80121c6:	4b69      	ldr	r3, [pc, #420]	@ (801236c <UART_SetConfig+0xc2c>)
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	f003 0320 	and.w	r3, r3, #32
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d009      	beq.n	80121e6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80121d2:	4b66      	ldr	r3, [pc, #408]	@ (801236c <UART_SetConfig+0xc2c>)
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	08db      	lsrs	r3, r3, #3
 80121d8:	f003 0303 	and.w	r3, r3, #3
 80121dc:	4a64      	ldr	r2, [pc, #400]	@ (8012370 <UART_SetConfig+0xc30>)
 80121de:	fa22 f303 	lsr.w	r3, r2, r3
 80121e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80121e4:	e00f      	b.n	8012206 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80121e6:	4b62      	ldr	r3, [pc, #392]	@ (8012370 <UART_SetConfig+0xc30>)
 80121e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80121ea:	e00c      	b.n	8012206 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80121ec:	4b61      	ldr	r3, [pc, #388]	@ (8012374 <UART_SetConfig+0xc34>)
 80121ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80121f0:	e009      	b.n	8012206 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80121f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80121f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80121f8:	e005      	b.n	8012206 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80121fa:	2300      	movs	r3, #0
 80121fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80121fe:	2301      	movs	r3, #1
 8012200:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8012204:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8012206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012208:	2b00      	cmp	r3, #0
 801220a:	f000 80ea 	beq.w	80123e2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801220e:	697b      	ldr	r3, [r7, #20]
 8012210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012212:	4a55      	ldr	r2, [pc, #340]	@ (8012368 <UART_SetConfig+0xc28>)
 8012214:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012218:	461a      	mov	r2, r3
 801221a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801221c:	fbb3 f3f2 	udiv	r3, r3, r2
 8012220:	005a      	lsls	r2, r3, #1
 8012222:	697b      	ldr	r3, [r7, #20]
 8012224:	685b      	ldr	r3, [r3, #4]
 8012226:	085b      	lsrs	r3, r3, #1
 8012228:	441a      	add	r2, r3
 801222a:	697b      	ldr	r3, [r7, #20]
 801222c:	685b      	ldr	r3, [r3, #4]
 801222e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012232:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012236:	2b0f      	cmp	r3, #15
 8012238:	d916      	bls.n	8012268 <UART_SetConfig+0xb28>
 801223a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801223c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012240:	d212      	bcs.n	8012268 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012244:	b29b      	uxth	r3, r3
 8012246:	f023 030f 	bic.w	r3, r3, #15
 801224a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801224c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801224e:	085b      	lsrs	r3, r3, #1
 8012250:	b29b      	uxth	r3, r3
 8012252:	f003 0307 	and.w	r3, r3, #7
 8012256:	b29a      	uxth	r2, r3
 8012258:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801225a:	4313      	orrs	r3, r2
 801225c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 801225e:	697b      	ldr	r3, [r7, #20]
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8012264:	60da      	str	r2, [r3, #12]
 8012266:	e0bc      	b.n	80123e2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8012268:	2301      	movs	r3, #1
 801226a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801226e:	e0b8      	b.n	80123e2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8012270:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8012274:	2b20      	cmp	r3, #32
 8012276:	dc4b      	bgt.n	8012310 <UART_SetConfig+0xbd0>
 8012278:	2b00      	cmp	r3, #0
 801227a:	f2c0 8087 	blt.w	801238c <UART_SetConfig+0xc4c>
 801227e:	2b20      	cmp	r3, #32
 8012280:	f200 8084 	bhi.w	801238c <UART_SetConfig+0xc4c>
 8012284:	a201      	add	r2, pc, #4	@ (adr r2, 801228c <UART_SetConfig+0xb4c>)
 8012286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801228a:	bf00      	nop
 801228c:	08012317 	.word	0x08012317
 8012290:	0801231f 	.word	0x0801231f
 8012294:	0801238d 	.word	0x0801238d
 8012298:	0801238d 	.word	0x0801238d
 801229c:	08012327 	.word	0x08012327
 80122a0:	0801238d 	.word	0x0801238d
 80122a4:	0801238d 	.word	0x0801238d
 80122a8:	0801238d 	.word	0x0801238d
 80122ac:	08012337 	.word	0x08012337
 80122b0:	0801238d 	.word	0x0801238d
 80122b4:	0801238d 	.word	0x0801238d
 80122b8:	0801238d 	.word	0x0801238d
 80122bc:	0801238d 	.word	0x0801238d
 80122c0:	0801238d 	.word	0x0801238d
 80122c4:	0801238d 	.word	0x0801238d
 80122c8:	0801238d 	.word	0x0801238d
 80122cc:	08012347 	.word	0x08012347
 80122d0:	0801238d 	.word	0x0801238d
 80122d4:	0801238d 	.word	0x0801238d
 80122d8:	0801238d 	.word	0x0801238d
 80122dc:	0801238d 	.word	0x0801238d
 80122e0:	0801238d 	.word	0x0801238d
 80122e4:	0801238d 	.word	0x0801238d
 80122e8:	0801238d 	.word	0x0801238d
 80122ec:	0801238d 	.word	0x0801238d
 80122f0:	0801238d 	.word	0x0801238d
 80122f4:	0801238d 	.word	0x0801238d
 80122f8:	0801238d 	.word	0x0801238d
 80122fc:	0801238d 	.word	0x0801238d
 8012300:	0801238d 	.word	0x0801238d
 8012304:	0801238d 	.word	0x0801238d
 8012308:	0801238d 	.word	0x0801238d
 801230c:	0801237f 	.word	0x0801237f
 8012310:	2b40      	cmp	r3, #64	@ 0x40
 8012312:	d037      	beq.n	8012384 <UART_SetConfig+0xc44>
 8012314:	e03a      	b.n	801238c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012316:	f7f8 fd33 	bl	800ad80 <HAL_RCC_GetPCLK1Freq>
 801231a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801231c:	e03c      	b.n	8012398 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801231e:	f7f8 fd45 	bl	800adac <HAL_RCC_GetPCLK2Freq>
 8012322:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8012324:	e038      	b.n	8012398 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012326:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801232a:	4618      	mov	r0, r3
 801232c:	f7fa fbdc 	bl	800cae8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012332:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012334:	e030      	b.n	8012398 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012336:	f107 0318 	add.w	r3, r7, #24
 801233a:	4618      	mov	r0, r3
 801233c:	f7fa fd28 	bl	800cd90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012340:	69fb      	ldr	r3, [r7, #28]
 8012342:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012344:	e028      	b.n	8012398 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012346:	4b09      	ldr	r3, [pc, #36]	@ (801236c <UART_SetConfig+0xc2c>)
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	f003 0320 	and.w	r3, r3, #32
 801234e:	2b00      	cmp	r3, #0
 8012350:	d012      	beq.n	8012378 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012352:	4b06      	ldr	r3, [pc, #24]	@ (801236c <UART_SetConfig+0xc2c>)
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	08db      	lsrs	r3, r3, #3
 8012358:	f003 0303 	and.w	r3, r3, #3
 801235c:	4a04      	ldr	r2, [pc, #16]	@ (8012370 <UART_SetConfig+0xc30>)
 801235e:	fa22 f303 	lsr.w	r3, r2, r3
 8012362:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012364:	e018      	b.n	8012398 <UART_SetConfig+0xc58>
 8012366:	bf00      	nop
 8012368:	080149a4 	.word	0x080149a4
 801236c:	58024400 	.word	0x58024400
 8012370:	03d09000 	.word	0x03d09000
 8012374:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8012378:	4b24      	ldr	r3, [pc, #144]	@ (801240c <UART_SetConfig+0xccc>)
 801237a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801237c:	e00c      	b.n	8012398 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801237e:	4b24      	ldr	r3, [pc, #144]	@ (8012410 <UART_SetConfig+0xcd0>)
 8012380:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012382:	e009      	b.n	8012398 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012384:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012388:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801238a:	e005      	b.n	8012398 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 801238c:	2300      	movs	r3, #0
 801238e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8012390:	2301      	movs	r3, #1
 8012392:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8012396:	bf00      	nop
    }

    if (pclk != 0U)
 8012398:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801239a:	2b00      	cmp	r3, #0
 801239c:	d021      	beq.n	80123e2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801239e:	697b      	ldr	r3, [r7, #20]
 80123a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80123a2:	4a1c      	ldr	r2, [pc, #112]	@ (8012414 <UART_SetConfig+0xcd4>)
 80123a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80123a8:	461a      	mov	r2, r3
 80123aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80123ac:	fbb3 f2f2 	udiv	r2, r3, r2
 80123b0:	697b      	ldr	r3, [r7, #20]
 80123b2:	685b      	ldr	r3, [r3, #4]
 80123b4:	085b      	lsrs	r3, r3, #1
 80123b6:	441a      	add	r2, r3
 80123b8:	697b      	ldr	r3, [r7, #20]
 80123ba:	685b      	ldr	r3, [r3, #4]
 80123bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80123c0:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80123c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123c4:	2b0f      	cmp	r3, #15
 80123c6:	d909      	bls.n	80123dc <UART_SetConfig+0xc9c>
 80123c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80123ce:	d205      	bcs.n	80123dc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80123d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123d2:	b29a      	uxth	r2, r3
 80123d4:	697b      	ldr	r3, [r7, #20]
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	60da      	str	r2, [r3, #12]
 80123da:	e002      	b.n	80123e2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80123dc:	2301      	movs	r3, #1
 80123de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80123e2:	697b      	ldr	r3, [r7, #20]
 80123e4:	2201      	movs	r2, #1
 80123e6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80123ea:	697b      	ldr	r3, [r7, #20]
 80123ec:	2201      	movs	r2, #1
 80123ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80123f2:	697b      	ldr	r3, [r7, #20]
 80123f4:	2200      	movs	r2, #0
 80123f6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80123f8:	697b      	ldr	r3, [r7, #20]
 80123fa:	2200      	movs	r2, #0
 80123fc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80123fe:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8012402:	4618      	mov	r0, r3
 8012404:	3748      	adds	r7, #72	@ 0x48
 8012406:	46bd      	mov	sp, r7
 8012408:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801240c:	03d09000 	.word	0x03d09000
 8012410:	003d0900 	.word	0x003d0900
 8012414:	080149a4 	.word	0x080149a4

08012418 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8012418:	b480      	push	{r7}
 801241a:	b083      	sub	sp, #12
 801241c:	af00      	add	r7, sp, #0
 801241e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012424:	f003 0308 	and.w	r3, r3, #8
 8012428:	2b00      	cmp	r3, #0
 801242a:	d00a      	beq.n	8012442 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	685b      	ldr	r3, [r3, #4]
 8012432:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	430a      	orrs	r2, r1
 8012440:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012446:	f003 0301 	and.w	r3, r3, #1
 801244a:	2b00      	cmp	r3, #0
 801244c:	d00a      	beq.n	8012464 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	685b      	ldr	r3, [r3, #4]
 8012454:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	430a      	orrs	r2, r1
 8012462:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012468:	f003 0302 	and.w	r3, r3, #2
 801246c:	2b00      	cmp	r3, #0
 801246e:	d00a      	beq.n	8012486 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	685b      	ldr	r3, [r3, #4]
 8012476:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	430a      	orrs	r2, r1
 8012484:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801248a:	f003 0304 	and.w	r3, r3, #4
 801248e:	2b00      	cmp	r3, #0
 8012490:	d00a      	beq.n	80124a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	685b      	ldr	r3, [r3, #4]
 8012498:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	430a      	orrs	r2, r1
 80124a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80124ac:	f003 0310 	and.w	r3, r3, #16
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d00a      	beq.n	80124ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	689b      	ldr	r3, [r3, #8]
 80124ba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	430a      	orrs	r2, r1
 80124c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80124ce:	f003 0320 	and.w	r3, r3, #32
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d00a      	beq.n	80124ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	689b      	ldr	r3, [r3, #8]
 80124dc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	430a      	orrs	r2, r1
 80124ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80124f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d01a      	beq.n	801252e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	685b      	ldr	r3, [r3, #4]
 80124fe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	430a      	orrs	r2, r1
 801250c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012512:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012516:	d10a      	bne.n	801252e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	685b      	ldr	r3, [r3, #4]
 801251e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	430a      	orrs	r2, r1
 801252c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012536:	2b00      	cmp	r3, #0
 8012538:	d00a      	beq.n	8012550 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	681b      	ldr	r3, [r3, #0]
 801253e:	685b      	ldr	r3, [r3, #4]
 8012540:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	430a      	orrs	r2, r1
 801254e:	605a      	str	r2, [r3, #4]
  }
}
 8012550:	bf00      	nop
 8012552:	370c      	adds	r7, #12
 8012554:	46bd      	mov	sp, r7
 8012556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801255a:	4770      	bx	lr

0801255c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801255c:	b580      	push	{r7, lr}
 801255e:	b098      	sub	sp, #96	@ 0x60
 8012560:	af02      	add	r7, sp, #8
 8012562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	2200      	movs	r2, #0
 8012568:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801256c:	f7f1 fada 	bl	8003b24 <HAL_GetTick>
 8012570:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	f003 0308 	and.w	r3, r3, #8
 801257c:	2b08      	cmp	r3, #8
 801257e:	d12f      	bne.n	80125e0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012580:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8012584:	9300      	str	r3, [sp, #0]
 8012586:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012588:	2200      	movs	r2, #0
 801258a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801258e:	6878      	ldr	r0, [r7, #4]
 8012590:	f000 f88e 	bl	80126b0 <UART_WaitOnFlagUntilTimeout>
 8012594:	4603      	mov	r3, r0
 8012596:	2b00      	cmp	r3, #0
 8012598:	d022      	beq.n	80125e0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125a2:	e853 3f00 	ldrex	r3, [r3]
 80125a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80125a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80125aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80125ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	681b      	ldr	r3, [r3, #0]
 80125b4:	461a      	mov	r2, r3
 80125b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80125b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80125ba:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80125be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80125c0:	e841 2300 	strex	r3, r2, [r1]
 80125c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80125c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d1e6      	bne.n	801259a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	2220      	movs	r2, #32
 80125d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	2200      	movs	r2, #0
 80125d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80125dc:	2303      	movs	r3, #3
 80125de:	e063      	b.n	80126a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	f003 0304 	and.w	r3, r3, #4
 80125ea:	2b04      	cmp	r3, #4
 80125ec:	d149      	bne.n	8012682 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80125ee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80125f2:	9300      	str	r3, [sp, #0]
 80125f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80125f6:	2200      	movs	r2, #0
 80125f8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80125fc:	6878      	ldr	r0, [r7, #4]
 80125fe:	f000 f857 	bl	80126b0 <UART_WaitOnFlagUntilTimeout>
 8012602:	4603      	mov	r3, r0
 8012604:	2b00      	cmp	r3, #0
 8012606:	d03c      	beq.n	8012682 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801260e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012610:	e853 3f00 	ldrex	r3, [r3]
 8012614:	623b      	str	r3, [r7, #32]
   return(result);
 8012616:	6a3b      	ldr	r3, [r7, #32]
 8012618:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801261c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	461a      	mov	r2, r3
 8012624:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012626:	633b      	str	r3, [r7, #48]	@ 0x30
 8012628:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801262a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801262c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801262e:	e841 2300 	strex	r3, r2, [r1]
 8012632:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8012634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012636:	2b00      	cmp	r3, #0
 8012638:	d1e6      	bne.n	8012608 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	3308      	adds	r3, #8
 8012640:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012642:	693b      	ldr	r3, [r7, #16]
 8012644:	e853 3f00 	ldrex	r3, [r3]
 8012648:	60fb      	str	r3, [r7, #12]
   return(result);
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	f023 0301 	bic.w	r3, r3, #1
 8012650:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	3308      	adds	r3, #8
 8012658:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801265a:	61fa      	str	r2, [r7, #28]
 801265c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801265e:	69b9      	ldr	r1, [r7, #24]
 8012660:	69fa      	ldr	r2, [r7, #28]
 8012662:	e841 2300 	strex	r3, r2, [r1]
 8012666:	617b      	str	r3, [r7, #20]
   return(result);
 8012668:	697b      	ldr	r3, [r7, #20]
 801266a:	2b00      	cmp	r3, #0
 801266c:	d1e5      	bne.n	801263a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	2220      	movs	r2, #32
 8012672:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	2200      	movs	r2, #0
 801267a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801267e:	2303      	movs	r3, #3
 8012680:	e012      	b.n	80126a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	2220      	movs	r2, #32
 8012686:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	2220      	movs	r2, #32
 801268e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	2200      	movs	r2, #0
 8012696:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	2200      	movs	r2, #0
 801269c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	2200      	movs	r2, #0
 80126a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80126a6:	2300      	movs	r3, #0
}
 80126a8:	4618      	mov	r0, r3
 80126aa:	3758      	adds	r7, #88	@ 0x58
 80126ac:	46bd      	mov	sp, r7
 80126ae:	bd80      	pop	{r7, pc}

080126b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80126b0:	b580      	push	{r7, lr}
 80126b2:	b084      	sub	sp, #16
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	60f8      	str	r0, [r7, #12]
 80126b8:	60b9      	str	r1, [r7, #8]
 80126ba:	603b      	str	r3, [r7, #0]
 80126bc:	4613      	mov	r3, r2
 80126be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80126c0:	e04f      	b.n	8012762 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80126c2:	69bb      	ldr	r3, [r7, #24]
 80126c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126c8:	d04b      	beq.n	8012762 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80126ca:	f7f1 fa2b 	bl	8003b24 <HAL_GetTick>
 80126ce:	4602      	mov	r2, r0
 80126d0:	683b      	ldr	r3, [r7, #0]
 80126d2:	1ad3      	subs	r3, r2, r3
 80126d4:	69ba      	ldr	r2, [r7, #24]
 80126d6:	429a      	cmp	r2, r3
 80126d8:	d302      	bcc.n	80126e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80126da:	69bb      	ldr	r3, [r7, #24]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d101      	bne.n	80126e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80126e0:	2303      	movs	r3, #3
 80126e2:	e04e      	b.n	8012782 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	f003 0304 	and.w	r3, r3, #4
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d037      	beq.n	8012762 <UART_WaitOnFlagUntilTimeout+0xb2>
 80126f2:	68bb      	ldr	r3, [r7, #8]
 80126f4:	2b80      	cmp	r3, #128	@ 0x80
 80126f6:	d034      	beq.n	8012762 <UART_WaitOnFlagUntilTimeout+0xb2>
 80126f8:	68bb      	ldr	r3, [r7, #8]
 80126fa:	2b40      	cmp	r3, #64	@ 0x40
 80126fc:	d031      	beq.n	8012762 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	69db      	ldr	r3, [r3, #28]
 8012704:	f003 0308 	and.w	r3, r3, #8
 8012708:	2b08      	cmp	r3, #8
 801270a:	d110      	bne.n	801272e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	2208      	movs	r2, #8
 8012712:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012714:	68f8      	ldr	r0, [r7, #12]
 8012716:	f000 f839 	bl	801278c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	2208      	movs	r2, #8
 801271e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	2200      	movs	r2, #0
 8012726:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801272a:	2301      	movs	r3, #1
 801272c:	e029      	b.n	8012782 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	69db      	ldr	r3, [r3, #28]
 8012734:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8012738:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801273c:	d111      	bne.n	8012762 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8012746:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012748:	68f8      	ldr	r0, [r7, #12]
 801274a:	f000 f81f 	bl	801278c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801274e:	68fb      	ldr	r3, [r7, #12]
 8012750:	2220      	movs	r2, #32
 8012752:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012756:	68fb      	ldr	r3, [r7, #12]
 8012758:	2200      	movs	r2, #0
 801275a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801275e:	2303      	movs	r3, #3
 8012760:	e00f      	b.n	8012782 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	69da      	ldr	r2, [r3, #28]
 8012768:	68bb      	ldr	r3, [r7, #8]
 801276a:	4013      	ands	r3, r2
 801276c:	68ba      	ldr	r2, [r7, #8]
 801276e:	429a      	cmp	r2, r3
 8012770:	bf0c      	ite	eq
 8012772:	2301      	moveq	r3, #1
 8012774:	2300      	movne	r3, #0
 8012776:	b2db      	uxtb	r3, r3
 8012778:	461a      	mov	r2, r3
 801277a:	79fb      	ldrb	r3, [r7, #7]
 801277c:	429a      	cmp	r2, r3
 801277e:	d0a0      	beq.n	80126c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012780:	2300      	movs	r3, #0
}
 8012782:	4618      	mov	r0, r3
 8012784:	3710      	adds	r7, #16
 8012786:	46bd      	mov	sp, r7
 8012788:	bd80      	pop	{r7, pc}
	...

0801278c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801278c:	b480      	push	{r7}
 801278e:	b095      	sub	sp, #84	@ 0x54
 8012790:	af00      	add	r7, sp, #0
 8012792:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801279a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801279c:	e853 3f00 	ldrex	r3, [r3]
 80127a0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80127a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80127a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	461a      	mov	r2, r3
 80127b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80127b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80127b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80127b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80127ba:	e841 2300 	strex	r3, r2, [r1]
 80127be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80127c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d1e6      	bne.n	8012794 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	3308      	adds	r3, #8
 80127cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127ce:	6a3b      	ldr	r3, [r7, #32]
 80127d0:	e853 3f00 	ldrex	r3, [r3]
 80127d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80127d6:	69fa      	ldr	r2, [r7, #28]
 80127d8:	4b1e      	ldr	r3, [pc, #120]	@ (8012854 <UART_EndRxTransfer+0xc8>)
 80127da:	4013      	ands	r3, r2
 80127dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	3308      	adds	r3, #8
 80127e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80127e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80127e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80127ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80127ee:	e841 2300 	strex	r3, r2, [r1]
 80127f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80127f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d1e5      	bne.n	80127c6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80127fe:	2b01      	cmp	r3, #1
 8012800:	d118      	bne.n	8012834 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	e853 3f00 	ldrex	r3, [r3]
 801280e:	60bb      	str	r3, [r7, #8]
   return(result);
 8012810:	68bb      	ldr	r3, [r7, #8]
 8012812:	f023 0310 	bic.w	r3, r3, #16
 8012816:	647b      	str	r3, [r7, #68]	@ 0x44
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	461a      	mov	r2, r3
 801281e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012820:	61bb      	str	r3, [r7, #24]
 8012822:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012824:	6979      	ldr	r1, [r7, #20]
 8012826:	69ba      	ldr	r2, [r7, #24]
 8012828:	e841 2300 	strex	r3, r2, [r1]
 801282c:	613b      	str	r3, [r7, #16]
   return(result);
 801282e:	693b      	ldr	r3, [r7, #16]
 8012830:	2b00      	cmp	r3, #0
 8012832:	d1e6      	bne.n	8012802 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	2220      	movs	r2, #32
 8012838:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	2200      	movs	r2, #0
 8012840:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	2200      	movs	r2, #0
 8012846:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8012848:	bf00      	nop
 801284a:	3754      	adds	r7, #84	@ 0x54
 801284c:	46bd      	mov	sp, r7
 801284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012852:	4770      	bx	lr
 8012854:	effffffe 	.word	0xeffffffe

08012858 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012858:	b480      	push	{r7}
 801285a:	b085      	sub	sp, #20
 801285c:	af00      	add	r7, sp, #0
 801285e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012866:	2b01      	cmp	r3, #1
 8012868:	d101      	bne.n	801286e <HAL_UARTEx_DisableFifoMode+0x16>
 801286a:	2302      	movs	r3, #2
 801286c:	e027      	b.n	80128be <HAL_UARTEx_DisableFifoMode+0x66>
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	2201      	movs	r2, #1
 8012872:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	2224      	movs	r2, #36	@ 0x24
 801287a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	681a      	ldr	r2, [r3, #0]
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	f022 0201 	bic.w	r2, r2, #1
 8012894:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801289c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	2200      	movs	r2, #0
 80128a2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	68fa      	ldr	r2, [r7, #12]
 80128aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	2220      	movs	r2, #32
 80128b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	2200      	movs	r2, #0
 80128b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80128bc:	2300      	movs	r3, #0
}
 80128be:	4618      	mov	r0, r3
 80128c0:	3714      	adds	r7, #20
 80128c2:	46bd      	mov	sp, r7
 80128c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c8:	4770      	bx	lr

080128ca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80128ca:	b580      	push	{r7, lr}
 80128cc:	b084      	sub	sp, #16
 80128ce:	af00      	add	r7, sp, #0
 80128d0:	6078      	str	r0, [r7, #4]
 80128d2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80128da:	2b01      	cmp	r3, #1
 80128dc:	d101      	bne.n	80128e2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80128de:	2302      	movs	r3, #2
 80128e0:	e02d      	b.n	801293e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	2201      	movs	r2, #1
 80128e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	2224      	movs	r2, #36	@ 0x24
 80128ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	681a      	ldr	r2, [r3, #0]
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	f022 0201 	bic.w	r2, r2, #1
 8012908:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	689b      	ldr	r3, [r3, #8]
 8012910:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	683a      	ldr	r2, [r7, #0]
 801291a:	430a      	orrs	r2, r1
 801291c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801291e:	6878      	ldr	r0, [r7, #4]
 8012920:	f000 f850 	bl	80129c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	68fa      	ldr	r2, [r7, #12]
 801292a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	2220      	movs	r2, #32
 8012930:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	2200      	movs	r2, #0
 8012938:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801293c:	2300      	movs	r3, #0
}
 801293e:	4618      	mov	r0, r3
 8012940:	3710      	adds	r7, #16
 8012942:	46bd      	mov	sp, r7
 8012944:	bd80      	pop	{r7, pc}

08012946 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012946:	b580      	push	{r7, lr}
 8012948:	b084      	sub	sp, #16
 801294a:	af00      	add	r7, sp, #0
 801294c:	6078      	str	r0, [r7, #4]
 801294e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012956:	2b01      	cmp	r3, #1
 8012958:	d101      	bne.n	801295e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801295a:	2302      	movs	r3, #2
 801295c:	e02d      	b.n	80129ba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	2201      	movs	r2, #1
 8012962:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	2224      	movs	r2, #36	@ 0x24
 801296a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	681b      	ldr	r3, [r3, #0]
 8012974:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	681a      	ldr	r2, [r3, #0]
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	f022 0201 	bic.w	r2, r2, #1
 8012984:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	681b      	ldr	r3, [r3, #0]
 801298a:	689b      	ldr	r3, [r3, #8]
 801298c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	683a      	ldr	r2, [r7, #0]
 8012996:	430a      	orrs	r2, r1
 8012998:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801299a:	6878      	ldr	r0, [r7, #4]
 801299c:	f000 f812 	bl	80129c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	68fa      	ldr	r2, [r7, #12]
 80129a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	2220      	movs	r2, #32
 80129ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	2200      	movs	r2, #0
 80129b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80129b8:	2300      	movs	r3, #0
}
 80129ba:	4618      	mov	r0, r3
 80129bc:	3710      	adds	r7, #16
 80129be:	46bd      	mov	sp, r7
 80129c0:	bd80      	pop	{r7, pc}
	...

080129c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80129c4:	b480      	push	{r7}
 80129c6:	b085      	sub	sp, #20
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d108      	bne.n	80129e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	2201      	movs	r2, #1
 80129d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	2201      	movs	r2, #1
 80129e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80129e4:	e031      	b.n	8012a4a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80129e6:	2310      	movs	r3, #16
 80129e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80129ea:	2310      	movs	r3, #16
 80129ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	689b      	ldr	r3, [r3, #8]
 80129f4:	0e5b      	lsrs	r3, r3, #25
 80129f6:	b2db      	uxtb	r3, r3
 80129f8:	f003 0307 	and.w	r3, r3, #7
 80129fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	689b      	ldr	r3, [r3, #8]
 8012a04:	0f5b      	lsrs	r3, r3, #29
 8012a06:	b2db      	uxtb	r3, r3
 8012a08:	f003 0307 	and.w	r3, r3, #7
 8012a0c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012a0e:	7bbb      	ldrb	r3, [r7, #14]
 8012a10:	7b3a      	ldrb	r2, [r7, #12]
 8012a12:	4911      	ldr	r1, [pc, #68]	@ (8012a58 <UARTEx_SetNbDataToProcess+0x94>)
 8012a14:	5c8a      	ldrb	r2, [r1, r2]
 8012a16:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012a1a:	7b3a      	ldrb	r2, [r7, #12]
 8012a1c:	490f      	ldr	r1, [pc, #60]	@ (8012a5c <UARTEx_SetNbDataToProcess+0x98>)
 8012a1e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012a20:	fb93 f3f2 	sdiv	r3, r3, r2
 8012a24:	b29a      	uxth	r2, r3
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012a2c:	7bfb      	ldrb	r3, [r7, #15]
 8012a2e:	7b7a      	ldrb	r2, [r7, #13]
 8012a30:	4909      	ldr	r1, [pc, #36]	@ (8012a58 <UARTEx_SetNbDataToProcess+0x94>)
 8012a32:	5c8a      	ldrb	r2, [r1, r2]
 8012a34:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012a38:	7b7a      	ldrb	r2, [r7, #13]
 8012a3a:	4908      	ldr	r1, [pc, #32]	@ (8012a5c <UARTEx_SetNbDataToProcess+0x98>)
 8012a3c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012a3e:	fb93 f3f2 	sdiv	r3, r3, r2
 8012a42:	b29a      	uxth	r2, r3
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8012a4a:	bf00      	nop
 8012a4c:	3714      	adds	r7, #20
 8012a4e:	46bd      	mov	sp, r7
 8012a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a54:	4770      	bx	lr
 8012a56:	bf00      	nop
 8012a58:	080149bc 	.word	0x080149bc
 8012a5c:	080149c4 	.word	0x080149c4

08012a60 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8012a60:	b084      	sub	sp, #16
 8012a62:	b480      	push	{r7}
 8012a64:	b085      	sub	sp, #20
 8012a66:	af00      	add	r7, sp, #0
 8012a68:	6078      	str	r0, [r7, #4]
 8012a6a:	f107 001c 	add.w	r0, r7, #28
 8012a6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8012a72:	2300      	movs	r3, #0
 8012a74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8012a76:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8012a78:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8012a7a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8012a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 8012a7e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8012a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 8012a82:	431a      	orrs	r2, r3
             Init.ClockDiv
 8012a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 8012a86:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8012a88:	68fa      	ldr	r2, [r7, #12]
 8012a8a:	4313      	orrs	r3, r2
 8012a8c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	685a      	ldr	r2, [r3, #4]
 8012a92:	4b07      	ldr	r3, [pc, #28]	@ (8012ab0 <SDMMC_Init+0x50>)
 8012a94:	4013      	ands	r3, r2
 8012a96:	68fa      	ldr	r2, [r7, #12]
 8012a98:	431a      	orrs	r2, r3
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8012a9e:	2300      	movs	r3, #0
}
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	3714      	adds	r7, #20
 8012aa4:	46bd      	mov	sp, r7
 8012aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aaa:	b004      	add	sp, #16
 8012aac:	4770      	bx	lr
 8012aae:	bf00      	nop
 8012ab0:	ffc02c00 	.word	0xffc02c00

08012ab4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8012ab4:	b480      	push	{r7}
 8012ab6:	b083      	sub	sp, #12
 8012ab8:	af00      	add	r7, sp, #0
 8012aba:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8012ac2:	4618      	mov	r0, r3
 8012ac4:	370c      	adds	r7, #12
 8012ac6:	46bd      	mov	sp, r7
 8012ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012acc:	4770      	bx	lr

08012ace <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8012ace:	b480      	push	{r7}
 8012ad0:	b083      	sub	sp, #12
 8012ad2:	af00      	add	r7, sp, #0
 8012ad4:	6078      	str	r0, [r7, #4]
 8012ad6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8012ad8:	683b      	ldr	r3, [r7, #0]
 8012ada:	681a      	ldr	r2, [r3, #0]
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8012ae2:	2300      	movs	r3, #0
}
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	370c      	adds	r7, #12
 8012ae8:	46bd      	mov	sp, r7
 8012aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aee:	4770      	bx	lr

08012af0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8012af0:	b480      	push	{r7}
 8012af2:	b083      	sub	sp, #12
 8012af4:	af00      	add	r7, sp, #0
 8012af6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	f043 0203 	orr.w	r2, r3, #3
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8012b04:	2300      	movs	r3, #0
}
 8012b06:	4618      	mov	r0, r3
 8012b08:	370c      	adds	r7, #12
 8012b0a:	46bd      	mov	sp, r7
 8012b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b10:	4770      	bx	lr

08012b12 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8012b12:	b480      	push	{r7}
 8012b14:	b083      	sub	sp, #12
 8012b16:	af00      	add	r7, sp, #0
 8012b18:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	f003 0303 	and.w	r3, r3, #3
}
 8012b22:	4618      	mov	r0, r3
 8012b24:	370c      	adds	r7, #12
 8012b26:	46bd      	mov	sp, r7
 8012b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b2c:	4770      	bx	lr
	...

08012b30 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8012b30:	b480      	push	{r7}
 8012b32:	b085      	sub	sp, #20
 8012b34:	af00      	add	r7, sp, #0
 8012b36:	6078      	str	r0, [r7, #4]
 8012b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012b3a:	2300      	movs	r3, #0
 8012b3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8012b3e:	683b      	ldr	r3, [r7, #0]
 8012b40:	681a      	ldr	r2, [r3, #0]
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012b46:	683b      	ldr	r3, [r7, #0]
 8012b48:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8012b4a:	683b      	ldr	r3, [r7, #0]
 8012b4c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012b4e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8012b50:	683b      	ldr	r3, [r7, #0]
 8012b52:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8012b54:	431a      	orrs	r2, r3
                       Command->CPSM);
 8012b56:	683b      	ldr	r3, [r7, #0]
 8012b58:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8012b5a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012b5c:	68fa      	ldr	r2, [r7, #12]
 8012b5e:	4313      	orrs	r3, r2
 8012b60:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	68da      	ldr	r2, [r3, #12]
 8012b66:	4b06      	ldr	r3, [pc, #24]	@ (8012b80 <SDMMC_SendCommand+0x50>)
 8012b68:	4013      	ands	r3, r2
 8012b6a:	68fa      	ldr	r2, [r7, #12]
 8012b6c:	431a      	orrs	r2, r3
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012b72:	2300      	movs	r3, #0
}
 8012b74:	4618      	mov	r0, r3
 8012b76:	3714      	adds	r7, #20
 8012b78:	46bd      	mov	sp, r7
 8012b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b7e:	4770      	bx	lr
 8012b80:	fffee0c0 	.word	0xfffee0c0

08012b84 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8012b84:	b480      	push	{r7}
 8012b86:	b083      	sub	sp, #12
 8012b88:	af00      	add	r7, sp, #0
 8012b8a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	691b      	ldr	r3, [r3, #16]
 8012b90:	b2db      	uxtb	r3, r3
}
 8012b92:	4618      	mov	r0, r3
 8012b94:	370c      	adds	r7, #12
 8012b96:	46bd      	mov	sp, r7
 8012b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b9c:	4770      	bx	lr

08012b9e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8012b9e:	b480      	push	{r7}
 8012ba0:	b085      	sub	sp, #20
 8012ba2:	af00      	add	r7, sp, #0
 8012ba4:	6078      	str	r0, [r7, #4]
 8012ba6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	3314      	adds	r3, #20
 8012bac:	461a      	mov	r2, r3
 8012bae:	683b      	ldr	r3, [r7, #0]
 8012bb0:	4413      	add	r3, r2
 8012bb2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8012bb4:	68fb      	ldr	r3, [r7, #12]
 8012bb6:	681b      	ldr	r3, [r3, #0]
}
 8012bb8:	4618      	mov	r0, r3
 8012bba:	3714      	adds	r7, #20
 8012bbc:	46bd      	mov	sp, r7
 8012bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bc2:	4770      	bx	lr

08012bc4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8012bc4:	b480      	push	{r7}
 8012bc6:	b085      	sub	sp, #20
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	6078      	str	r0, [r7, #4]
 8012bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012bce:	2300      	movs	r3, #0
 8012bd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8012bd2:	683b      	ldr	r3, [r7, #0]
 8012bd4:	681a      	ldr	r2, [r3, #0]
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8012bda:	683b      	ldr	r3, [r7, #0]
 8012bdc:	685a      	ldr	r2, [r3, #4]
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012be2:	683b      	ldr	r3, [r7, #0]
 8012be4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8012be6:	683b      	ldr	r3, [r7, #0]
 8012be8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012bea:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8012bec:	683b      	ldr	r3, [r7, #0]
 8012bee:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8012bf0:	431a      	orrs	r2, r3
                       Data->DPSM);
 8012bf2:	683b      	ldr	r3, [r7, #0]
 8012bf4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8012bf6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012bf8:	68fa      	ldr	r2, [r7, #12]
 8012bfa:	4313      	orrs	r3, r2
 8012bfc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c02:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	431a      	orrs	r2, r3
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8012c0e:	2300      	movs	r3, #0

}
 8012c10:	4618      	mov	r0, r3
 8012c12:	3714      	adds	r7, #20
 8012c14:	46bd      	mov	sp, r7
 8012c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c1a:	4770      	bx	lr

08012c1c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8012c1c:	b580      	push	{r7, lr}
 8012c1e:	b088      	sub	sp, #32
 8012c20:	af00      	add	r7, sp, #0
 8012c22:	6078      	str	r0, [r7, #4]
 8012c24:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8012c26:	683b      	ldr	r3, [r7, #0]
 8012c28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8012c2a:	2310      	movs	r3, #16
 8012c2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012c2e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012c32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012c34:	2300      	movs	r3, #0
 8012c36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012c38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012c3c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012c3e:	f107 0308 	add.w	r3, r7, #8
 8012c42:	4619      	mov	r1, r3
 8012c44:	6878      	ldr	r0, [r7, #4]
 8012c46:	f7ff ff73 	bl	8012b30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8012c4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012c4e:	2110      	movs	r1, #16
 8012c50:	6878      	ldr	r0, [r7, #4]
 8012c52:	f000 fa5f 	bl	8013114 <SDMMC_GetCmdResp1>
 8012c56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012c58:	69fb      	ldr	r3, [r7, #28]
}
 8012c5a:	4618      	mov	r0, r3
 8012c5c:	3720      	adds	r7, #32
 8012c5e:	46bd      	mov	sp, r7
 8012c60:	bd80      	pop	{r7, pc}

08012c62 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012c62:	b580      	push	{r7, lr}
 8012c64:	b088      	sub	sp, #32
 8012c66:	af00      	add	r7, sp, #0
 8012c68:	6078      	str	r0, [r7, #4]
 8012c6a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012c6c:	683b      	ldr	r3, [r7, #0]
 8012c6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8012c70:	2311      	movs	r3, #17
 8012c72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012c74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012c78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012c7a:	2300      	movs	r3, #0
 8012c7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012c7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012c82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012c84:	f107 0308 	add.w	r3, r7, #8
 8012c88:	4619      	mov	r1, r3
 8012c8a:	6878      	ldr	r0, [r7, #4]
 8012c8c:	f7ff ff50 	bl	8012b30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012c90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012c94:	2111      	movs	r1, #17
 8012c96:	6878      	ldr	r0, [r7, #4]
 8012c98:	f000 fa3c 	bl	8013114 <SDMMC_GetCmdResp1>
 8012c9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012c9e:	69fb      	ldr	r3, [r7, #28]
}
 8012ca0:	4618      	mov	r0, r3
 8012ca2:	3720      	adds	r7, #32
 8012ca4:	46bd      	mov	sp, r7
 8012ca6:	bd80      	pop	{r7, pc}

08012ca8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012ca8:	b580      	push	{r7, lr}
 8012caa:	b088      	sub	sp, #32
 8012cac:	af00      	add	r7, sp, #0
 8012cae:	6078      	str	r0, [r7, #4]
 8012cb0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012cb2:	683b      	ldr	r3, [r7, #0]
 8012cb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8012cb6:	2312      	movs	r3, #18
 8012cb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012cba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012cbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012cc0:	2300      	movs	r3, #0
 8012cc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012cc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012cc8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012cca:	f107 0308 	add.w	r3, r7, #8
 8012cce:	4619      	mov	r1, r3
 8012cd0:	6878      	ldr	r0, [r7, #4]
 8012cd2:	f7ff ff2d 	bl	8012b30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012cda:	2112      	movs	r1, #18
 8012cdc:	6878      	ldr	r0, [r7, #4]
 8012cde:	f000 fa19 	bl	8013114 <SDMMC_GetCmdResp1>
 8012ce2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012ce4:	69fb      	ldr	r3, [r7, #28]
}
 8012ce6:	4618      	mov	r0, r3
 8012ce8:	3720      	adds	r7, #32
 8012cea:	46bd      	mov	sp, r7
 8012cec:	bd80      	pop	{r7, pc}

08012cee <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012cee:	b580      	push	{r7, lr}
 8012cf0:	b088      	sub	sp, #32
 8012cf2:	af00      	add	r7, sp, #0
 8012cf4:	6078      	str	r0, [r7, #4]
 8012cf6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012cf8:	683b      	ldr	r3, [r7, #0]
 8012cfa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8012cfc:	2318      	movs	r3, #24
 8012cfe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012d00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012d04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012d06:	2300      	movs	r3, #0
 8012d08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012d0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012d0e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012d10:	f107 0308 	add.w	r3, r7, #8
 8012d14:	4619      	mov	r1, r3
 8012d16:	6878      	ldr	r0, [r7, #4]
 8012d18:	f7ff ff0a 	bl	8012b30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012d1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012d20:	2118      	movs	r1, #24
 8012d22:	6878      	ldr	r0, [r7, #4]
 8012d24:	f000 f9f6 	bl	8013114 <SDMMC_GetCmdResp1>
 8012d28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012d2a:	69fb      	ldr	r3, [r7, #28]
}
 8012d2c:	4618      	mov	r0, r3
 8012d2e:	3720      	adds	r7, #32
 8012d30:	46bd      	mov	sp, r7
 8012d32:	bd80      	pop	{r7, pc}

08012d34 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012d34:	b580      	push	{r7, lr}
 8012d36:	b088      	sub	sp, #32
 8012d38:	af00      	add	r7, sp, #0
 8012d3a:	6078      	str	r0, [r7, #4]
 8012d3c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012d3e:	683b      	ldr	r3, [r7, #0]
 8012d40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8012d42:	2319      	movs	r3, #25
 8012d44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012d46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012d4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012d4c:	2300      	movs	r3, #0
 8012d4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012d50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012d54:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012d56:	f107 0308 	add.w	r3, r7, #8
 8012d5a:	4619      	mov	r1, r3
 8012d5c:	6878      	ldr	r0, [r7, #4]
 8012d5e:	f7ff fee7 	bl	8012b30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012d62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012d66:	2119      	movs	r1, #25
 8012d68:	6878      	ldr	r0, [r7, #4]
 8012d6a:	f000 f9d3 	bl	8013114 <SDMMC_GetCmdResp1>
 8012d6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012d70:	69fb      	ldr	r3, [r7, #28]
}
 8012d72:	4618      	mov	r0, r3
 8012d74:	3720      	adds	r7, #32
 8012d76:	46bd      	mov	sp, r7
 8012d78:	bd80      	pop	{r7, pc}
	...

08012d7c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8012d7c:	b580      	push	{r7, lr}
 8012d7e:	b088      	sub	sp, #32
 8012d80:	af00      	add	r7, sp, #0
 8012d82:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8012d84:	2300      	movs	r3, #0
 8012d86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8012d88:	230c      	movs	r3, #12
 8012d8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012d8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012d90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012d92:	2300      	movs	r3, #0
 8012d94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012d96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012d9a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	68db      	ldr	r3, [r3, #12]
 8012da0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	68db      	ldr	r3, [r3, #12]
 8012dac:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012db4:	f107 0308 	add.w	r3, r7, #8
 8012db8:	4619      	mov	r1, r3
 8012dba:	6878      	ldr	r0, [r7, #4]
 8012dbc:	f7ff feb8 	bl	8012b30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8012dc0:	4a0b      	ldr	r2, [pc, #44]	@ (8012df0 <SDMMC_CmdStopTransfer+0x74>)
 8012dc2:	210c      	movs	r1, #12
 8012dc4:	6878      	ldr	r0, [r7, #4]
 8012dc6:	f000 f9a5 	bl	8013114 <SDMMC_GetCmdResp1>
 8012dca:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	68db      	ldr	r3, [r3, #12]
 8012dd0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8012dd8:	69fb      	ldr	r3, [r7, #28]
 8012dda:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012dde:	d101      	bne.n	8012de4 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8012de0:	2300      	movs	r3, #0
 8012de2:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8012de4:	69fb      	ldr	r3, [r7, #28]
}
 8012de6:	4618      	mov	r0, r3
 8012de8:	3720      	adds	r7, #32
 8012dea:	46bd      	mov	sp, r7
 8012dec:	bd80      	pop	{r7, pc}
 8012dee:	bf00      	nop
 8012df0:	05f5e100 	.word	0x05f5e100

08012df4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8012df4:	b580      	push	{r7, lr}
 8012df6:	b088      	sub	sp, #32
 8012df8:	af00      	add	r7, sp, #0
 8012dfa:	6078      	str	r0, [r7, #4]
 8012dfc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8012dfe:	683b      	ldr	r3, [r7, #0]
 8012e00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8012e02:	2307      	movs	r3, #7
 8012e04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012e06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012e0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012e0c:	2300      	movs	r3, #0
 8012e0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012e10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012e14:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012e16:	f107 0308 	add.w	r3, r7, #8
 8012e1a:	4619      	mov	r1, r3
 8012e1c:	6878      	ldr	r0, [r7, #4]
 8012e1e:	f7ff fe87 	bl	8012b30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8012e22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012e26:	2107      	movs	r1, #7
 8012e28:	6878      	ldr	r0, [r7, #4]
 8012e2a:	f000 f973 	bl	8013114 <SDMMC_GetCmdResp1>
 8012e2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012e30:	69fb      	ldr	r3, [r7, #28]
}
 8012e32:	4618      	mov	r0, r3
 8012e34:	3720      	adds	r7, #32
 8012e36:	46bd      	mov	sp, r7
 8012e38:	bd80      	pop	{r7, pc}

08012e3a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8012e3a:	b580      	push	{r7, lr}
 8012e3c:	b088      	sub	sp, #32
 8012e3e:	af00      	add	r7, sp, #0
 8012e40:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8012e42:	2300      	movs	r3, #0
 8012e44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8012e46:	2300      	movs	r3, #0
 8012e48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012e4e:	2300      	movs	r3, #0
 8012e50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012e52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012e56:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012e58:	f107 0308 	add.w	r3, r7, #8
 8012e5c:	4619      	mov	r1, r3
 8012e5e:	6878      	ldr	r0, [r7, #4]
 8012e60:	f7ff fe66 	bl	8012b30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8012e64:	6878      	ldr	r0, [r7, #4]
 8012e66:	f000 fb97 	bl	8013598 <SDMMC_GetCmdError>
 8012e6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012e6c:	69fb      	ldr	r3, [r7, #28]
}
 8012e6e:	4618      	mov	r0, r3
 8012e70:	3720      	adds	r7, #32
 8012e72:	46bd      	mov	sp, r7
 8012e74:	bd80      	pop	{r7, pc}

08012e76 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8012e76:	b580      	push	{r7, lr}
 8012e78:	b088      	sub	sp, #32
 8012e7a:	af00      	add	r7, sp, #0
 8012e7c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8012e7e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8012e82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8012e84:	2308      	movs	r3, #8
 8012e86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012e88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012e8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012e8e:	2300      	movs	r3, #0
 8012e90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012e92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012e96:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012e98:	f107 0308 	add.w	r3, r7, #8
 8012e9c:	4619      	mov	r1, r3
 8012e9e:	6878      	ldr	r0, [r7, #4]
 8012ea0:	f7ff fe46 	bl	8012b30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8012ea4:	6878      	ldr	r0, [r7, #4]
 8012ea6:	f000 fb29 	bl	80134fc <SDMMC_GetCmdResp7>
 8012eaa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012eac:	69fb      	ldr	r3, [r7, #28]
}
 8012eae:	4618      	mov	r0, r3
 8012eb0:	3720      	adds	r7, #32
 8012eb2:	46bd      	mov	sp, r7
 8012eb4:	bd80      	pop	{r7, pc}

08012eb6 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012eb6:	b580      	push	{r7, lr}
 8012eb8:	b088      	sub	sp, #32
 8012eba:	af00      	add	r7, sp, #0
 8012ebc:	6078      	str	r0, [r7, #4]
 8012ebe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8012ec0:	683b      	ldr	r3, [r7, #0]
 8012ec2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8012ec4:	2337      	movs	r3, #55	@ 0x37
 8012ec6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012ec8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012ecc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012ece:	2300      	movs	r3, #0
 8012ed0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012ed2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012ed6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012ed8:	f107 0308 	add.w	r3, r7, #8
 8012edc:	4619      	mov	r1, r3
 8012ede:	6878      	ldr	r0, [r7, #4]
 8012ee0:	f7ff fe26 	bl	8012b30 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8012ee4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012ee8:	2137      	movs	r1, #55	@ 0x37
 8012eea:	6878      	ldr	r0, [r7, #4]
 8012eec:	f000 f912 	bl	8013114 <SDMMC_GetCmdResp1>
 8012ef0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012ef2:	69fb      	ldr	r3, [r7, #28]
}
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	3720      	adds	r7, #32
 8012ef8:	46bd      	mov	sp, r7
 8012efa:	bd80      	pop	{r7, pc}

08012efc <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012efc:	b580      	push	{r7, lr}
 8012efe:	b088      	sub	sp, #32
 8012f00:	af00      	add	r7, sp, #0
 8012f02:	6078      	str	r0, [r7, #4]
 8012f04:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8012f06:	683b      	ldr	r3, [r7, #0]
 8012f08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8012f0a:	2329      	movs	r3, #41	@ 0x29
 8012f0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012f0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012f12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012f14:	2300      	movs	r3, #0
 8012f16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012f18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012f1c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012f1e:	f107 0308 	add.w	r3, r7, #8
 8012f22:	4619      	mov	r1, r3
 8012f24:	6878      	ldr	r0, [r7, #4]
 8012f26:	f7ff fe03 	bl	8012b30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8012f2a:	6878      	ldr	r0, [r7, #4]
 8012f2c:	f000 fa2e 	bl	801338c <SDMMC_GetCmdResp3>
 8012f30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012f32:	69fb      	ldr	r3, [r7, #28]
}
 8012f34:	4618      	mov	r0, r3
 8012f36:	3720      	adds	r7, #32
 8012f38:	46bd      	mov	sp, r7
 8012f3a:	bd80      	pop	{r7, pc}

08012f3c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8012f3c:	b580      	push	{r7, lr}
 8012f3e:	b088      	sub	sp, #32
 8012f40:	af00      	add	r7, sp, #0
 8012f42:	6078      	str	r0, [r7, #4]
 8012f44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8012f46:	683b      	ldr	r3, [r7, #0]
 8012f48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8012f4a:	2306      	movs	r3, #6
 8012f4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012f4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012f52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012f54:	2300      	movs	r3, #0
 8012f56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012f58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012f5c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012f5e:	f107 0308 	add.w	r3, r7, #8
 8012f62:	4619      	mov	r1, r3
 8012f64:	6878      	ldr	r0, [r7, #4]
 8012f66:	f7ff fde3 	bl	8012b30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8012f6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012f6e:	2106      	movs	r1, #6
 8012f70:	6878      	ldr	r0, [r7, #4]
 8012f72:	f000 f8cf 	bl	8013114 <SDMMC_GetCmdResp1>
 8012f76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012f78:	69fb      	ldr	r3, [r7, #28]
}
 8012f7a:	4618      	mov	r0, r3
 8012f7c:	3720      	adds	r7, #32
 8012f7e:	46bd      	mov	sp, r7
 8012f80:	bd80      	pop	{r7, pc}

08012f82 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8012f82:	b580      	push	{r7, lr}
 8012f84:	b088      	sub	sp, #32
 8012f86:	af00      	add	r7, sp, #0
 8012f88:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8012f8a:	2300      	movs	r3, #0
 8012f8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8012f8e:	2333      	movs	r3, #51	@ 0x33
 8012f90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012f92:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012f96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012f98:	2300      	movs	r3, #0
 8012f9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012f9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012fa0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012fa2:	f107 0308 	add.w	r3, r7, #8
 8012fa6:	4619      	mov	r1, r3
 8012fa8:	6878      	ldr	r0, [r7, #4]
 8012faa:	f7ff fdc1 	bl	8012b30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8012fae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012fb2:	2133      	movs	r1, #51	@ 0x33
 8012fb4:	6878      	ldr	r0, [r7, #4]
 8012fb6:	f000 f8ad 	bl	8013114 <SDMMC_GetCmdResp1>
 8012fba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012fbc:	69fb      	ldr	r3, [r7, #28]
}
 8012fbe:	4618      	mov	r0, r3
 8012fc0:	3720      	adds	r7, #32
 8012fc2:	46bd      	mov	sp, r7
 8012fc4:	bd80      	pop	{r7, pc}

08012fc6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8012fc6:	b580      	push	{r7, lr}
 8012fc8:	b088      	sub	sp, #32
 8012fca:	af00      	add	r7, sp, #0
 8012fcc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8012fce:	2300      	movs	r3, #0
 8012fd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8012fd2:	2302      	movs	r3, #2
 8012fd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012fd6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8012fda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012fdc:	2300      	movs	r3, #0
 8012fde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012fe0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012fe4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012fe6:	f107 0308 	add.w	r3, r7, #8
 8012fea:	4619      	mov	r1, r3
 8012fec:	6878      	ldr	r0, [r7, #4]
 8012fee:	f7ff fd9f 	bl	8012b30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012ff2:	6878      	ldr	r0, [r7, #4]
 8012ff4:	f000 f980 	bl	80132f8 <SDMMC_GetCmdResp2>
 8012ff8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012ffa:	69fb      	ldr	r3, [r7, #28]
}
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	3720      	adds	r7, #32
 8013000:	46bd      	mov	sp, r7
 8013002:	bd80      	pop	{r7, pc}

08013004 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8013004:	b580      	push	{r7, lr}
 8013006:	b088      	sub	sp, #32
 8013008:	af00      	add	r7, sp, #0
 801300a:	6078      	str	r0, [r7, #4]
 801300c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801300e:	683b      	ldr	r3, [r7, #0]
 8013010:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8013012:	2309      	movs	r3, #9
 8013014:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8013016:	f44f 7340 	mov.w	r3, #768	@ 0x300
 801301a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801301c:	2300      	movs	r3, #0
 801301e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013020:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8013024:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013026:	f107 0308 	add.w	r3, r7, #8
 801302a:	4619      	mov	r1, r3
 801302c:	6878      	ldr	r0, [r7, #4]
 801302e:	f7ff fd7f 	bl	8012b30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8013032:	6878      	ldr	r0, [r7, #4]
 8013034:	f000 f960 	bl	80132f8 <SDMMC_GetCmdResp2>
 8013038:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801303a:	69fb      	ldr	r3, [r7, #28]
}
 801303c:	4618      	mov	r0, r3
 801303e:	3720      	adds	r7, #32
 8013040:	46bd      	mov	sp, r7
 8013042:	bd80      	pop	{r7, pc}

08013044 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8013044:	b580      	push	{r7, lr}
 8013046:	b088      	sub	sp, #32
 8013048:	af00      	add	r7, sp, #0
 801304a:	6078      	str	r0, [r7, #4]
 801304c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801304e:	2300      	movs	r3, #0
 8013050:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8013052:	2303      	movs	r3, #3
 8013054:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013056:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801305a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801305c:	2300      	movs	r3, #0
 801305e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013060:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8013064:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013066:	f107 0308 	add.w	r3, r7, #8
 801306a:	4619      	mov	r1, r3
 801306c:	6878      	ldr	r0, [r7, #4]
 801306e:	f7ff fd5f 	bl	8012b30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8013072:	683a      	ldr	r2, [r7, #0]
 8013074:	2103      	movs	r1, #3
 8013076:	6878      	ldr	r0, [r7, #4]
 8013078:	f000 f9c8 	bl	801340c <SDMMC_GetCmdResp6>
 801307c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801307e:	69fb      	ldr	r3, [r7, #28]
}
 8013080:	4618      	mov	r0, r3
 8013082:	3720      	adds	r7, #32
 8013084:	46bd      	mov	sp, r7
 8013086:	bd80      	pop	{r7, pc}

08013088 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8013088:	b580      	push	{r7, lr}
 801308a:	b088      	sub	sp, #32
 801308c:	af00      	add	r7, sp, #0
 801308e:	6078      	str	r0, [r7, #4]
 8013090:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8013092:	683b      	ldr	r3, [r7, #0]
 8013094:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8013096:	230d      	movs	r3, #13
 8013098:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801309a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801309e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80130a0:	2300      	movs	r3, #0
 80130a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80130a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80130a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80130aa:	f107 0308 	add.w	r3, r7, #8
 80130ae:	4619      	mov	r1, r3
 80130b0:	6878      	ldr	r0, [r7, #4]
 80130b2:	f7ff fd3d 	bl	8012b30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80130b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80130ba:	210d      	movs	r1, #13
 80130bc:	6878      	ldr	r0, [r7, #4]
 80130be:	f000 f829 	bl	8013114 <SDMMC_GetCmdResp1>
 80130c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80130c4:	69fb      	ldr	r3, [r7, #28]
}
 80130c6:	4618      	mov	r0, r3
 80130c8:	3720      	adds	r7, #32
 80130ca:	46bd      	mov	sp, r7
 80130cc:	bd80      	pop	{r7, pc}

080130ce <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80130ce:	b580      	push	{r7, lr}
 80130d0:	b088      	sub	sp, #32
 80130d2:	af00      	add	r7, sp, #0
 80130d4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80130d6:	2300      	movs	r3, #0
 80130d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80130da:	230d      	movs	r3, #13
 80130dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80130de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80130e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80130e4:	2300      	movs	r3, #0
 80130e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80130e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80130ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80130ee:	f107 0308 	add.w	r3, r7, #8
 80130f2:	4619      	mov	r1, r3
 80130f4:	6878      	ldr	r0, [r7, #4]
 80130f6:	f7ff fd1b 	bl	8012b30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80130fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80130fe:	210d      	movs	r1, #13
 8013100:	6878      	ldr	r0, [r7, #4]
 8013102:	f000 f807 	bl	8013114 <SDMMC_GetCmdResp1>
 8013106:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013108:	69fb      	ldr	r3, [r7, #28]
}
 801310a:	4618      	mov	r0, r3
 801310c:	3720      	adds	r7, #32
 801310e:	46bd      	mov	sp, r7
 8013110:	bd80      	pop	{r7, pc}
	...

08013114 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8013114:	b580      	push	{r7, lr}
 8013116:	b088      	sub	sp, #32
 8013118:	af00      	add	r7, sp, #0
 801311a:	60f8      	str	r0, [r7, #12]
 801311c:	460b      	mov	r3, r1
 801311e:	607a      	str	r2, [r7, #4]
 8013120:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8013122:	4b70      	ldr	r3, [pc, #448]	@ (80132e4 <SDMMC_GetCmdResp1+0x1d0>)
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	4a70      	ldr	r2, [pc, #448]	@ (80132e8 <SDMMC_GetCmdResp1+0x1d4>)
 8013128:	fba2 2303 	umull	r2, r3, r2, r3
 801312c:	0a5a      	lsrs	r2, r3, #9
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	fb02 f303 	mul.w	r3, r2, r3
 8013134:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8013136:	69fb      	ldr	r3, [r7, #28]
 8013138:	1e5a      	subs	r2, r3, #1
 801313a:	61fa      	str	r2, [r7, #28]
 801313c:	2b00      	cmp	r3, #0
 801313e:	d102      	bne.n	8013146 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013140:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8013144:	e0c9      	b.n	80132da <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801314a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 801314c:	69ba      	ldr	r2, [r7, #24]
 801314e:	4b67      	ldr	r3, [pc, #412]	@ (80132ec <SDMMC_GetCmdResp1+0x1d8>)
 8013150:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013152:	2b00      	cmp	r3, #0
 8013154:	d0ef      	beq.n	8013136 <SDMMC_GetCmdResp1+0x22>
 8013156:	69bb      	ldr	r3, [r7, #24]
 8013158:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801315c:	2b00      	cmp	r3, #0
 801315e:	d1ea      	bne.n	8013136 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013164:	f003 0304 	and.w	r3, r3, #4
 8013168:	2b00      	cmp	r3, #0
 801316a:	d004      	beq.n	8013176 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801316c:	68fb      	ldr	r3, [r7, #12]
 801316e:	2204      	movs	r2, #4
 8013170:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013172:	2304      	movs	r3, #4
 8013174:	e0b1      	b.n	80132da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801317a:	f003 0301 	and.w	r3, r3, #1
 801317e:	2b00      	cmp	r3, #0
 8013180:	d004      	beq.n	801318c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	2201      	movs	r2, #1
 8013186:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013188:	2301      	movs	r3, #1
 801318a:	e0a6      	b.n	80132da <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	4a58      	ldr	r2, [pc, #352]	@ (80132f0 <SDMMC_GetCmdResp1+0x1dc>)
 8013190:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8013192:	68f8      	ldr	r0, [r7, #12]
 8013194:	f7ff fcf6 	bl	8012b84 <SDMMC_GetCommandResponse>
 8013198:	4603      	mov	r3, r0
 801319a:	461a      	mov	r2, r3
 801319c:	7afb      	ldrb	r3, [r7, #11]
 801319e:	4293      	cmp	r3, r2
 80131a0:	d001      	beq.n	80131a6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80131a2:	2301      	movs	r3, #1
 80131a4:	e099      	b.n	80132da <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80131a6:	2100      	movs	r1, #0
 80131a8:	68f8      	ldr	r0, [r7, #12]
 80131aa:	f7ff fcf8 	bl	8012b9e <SDMMC_GetResponse>
 80131ae:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80131b0:	697a      	ldr	r2, [r7, #20]
 80131b2:	4b50      	ldr	r3, [pc, #320]	@ (80132f4 <SDMMC_GetCmdResp1+0x1e0>)
 80131b4:	4013      	ands	r3, r2
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d101      	bne.n	80131be <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80131ba:	2300      	movs	r3, #0
 80131bc:	e08d      	b.n	80132da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80131be:	697b      	ldr	r3, [r7, #20]
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	da02      	bge.n	80131ca <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80131c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80131c8:	e087      	b.n	80132da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80131ca:	697b      	ldr	r3, [r7, #20]
 80131cc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d001      	beq.n	80131d8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80131d4:	2340      	movs	r3, #64	@ 0x40
 80131d6:	e080      	b.n	80132da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80131d8:	697b      	ldr	r3, [r7, #20]
 80131da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d001      	beq.n	80131e6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80131e2:	2380      	movs	r3, #128	@ 0x80
 80131e4:	e079      	b.n	80132da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80131e6:	697b      	ldr	r3, [r7, #20]
 80131e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d002      	beq.n	80131f6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80131f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80131f4:	e071      	b.n	80132da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80131f6:	697b      	ldr	r3, [r7, #20]
 80131f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d002      	beq.n	8013206 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8013200:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013204:	e069      	b.n	80132da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8013206:	697b      	ldr	r3, [r7, #20]
 8013208:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 801320c:	2b00      	cmp	r3, #0
 801320e:	d002      	beq.n	8013216 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8013210:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013214:	e061      	b.n	80132da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8013216:	697b      	ldr	r3, [r7, #20]
 8013218:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801321c:	2b00      	cmp	r3, #0
 801321e:	d002      	beq.n	8013226 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8013220:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8013224:	e059      	b.n	80132da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8013226:	697b      	ldr	r3, [r7, #20]
 8013228:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801322c:	2b00      	cmp	r3, #0
 801322e:	d002      	beq.n	8013236 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8013230:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8013234:	e051      	b.n	80132da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8013236:	697b      	ldr	r3, [r7, #20]
 8013238:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801323c:	2b00      	cmp	r3, #0
 801323e:	d002      	beq.n	8013246 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013240:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8013244:	e049      	b.n	80132da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8013246:	697b      	ldr	r3, [r7, #20]
 8013248:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801324c:	2b00      	cmp	r3, #0
 801324e:	d002      	beq.n	8013256 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8013250:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8013254:	e041      	b.n	80132da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8013256:	697b      	ldr	r3, [r7, #20]
 8013258:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801325c:	2b00      	cmp	r3, #0
 801325e:	d002      	beq.n	8013266 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8013260:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013264:	e039      	b.n	80132da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8013266:	697b      	ldr	r3, [r7, #20]
 8013268:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801326c:	2b00      	cmp	r3, #0
 801326e:	d002      	beq.n	8013276 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8013270:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8013274:	e031      	b.n	80132da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8013276:	697b      	ldr	r3, [r7, #20]
 8013278:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801327c:	2b00      	cmp	r3, #0
 801327e:	d002      	beq.n	8013286 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8013280:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8013284:	e029      	b.n	80132da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8013286:	697b      	ldr	r3, [r7, #20]
 8013288:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801328c:	2b00      	cmp	r3, #0
 801328e:	d002      	beq.n	8013296 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8013290:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8013294:	e021      	b.n	80132da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8013296:	697b      	ldr	r3, [r7, #20]
 8013298:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801329c:	2b00      	cmp	r3, #0
 801329e:	d002      	beq.n	80132a6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80132a0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80132a4:	e019      	b.n	80132da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80132a6:	697b      	ldr	r3, [r7, #20]
 80132a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d002      	beq.n	80132b6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80132b0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80132b4:	e011      	b.n	80132da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80132b6:	697b      	ldr	r3, [r7, #20]
 80132b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d002      	beq.n	80132c6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80132c0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80132c4:	e009      	b.n	80132da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80132c6:	697b      	ldr	r3, [r7, #20]
 80132c8:	f003 0308 	and.w	r3, r3, #8
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d002      	beq.n	80132d6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80132d0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80132d4:	e001      	b.n	80132da <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80132d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80132da:	4618      	mov	r0, r3
 80132dc:	3720      	adds	r7, #32
 80132de:	46bd      	mov	sp, r7
 80132e0:	bd80      	pop	{r7, pc}
 80132e2:	bf00      	nop
 80132e4:	24000024 	.word	0x24000024
 80132e8:	10624dd3 	.word	0x10624dd3
 80132ec:	00200045 	.word	0x00200045
 80132f0:	002000c5 	.word	0x002000c5
 80132f4:	fdffe008 	.word	0xfdffe008

080132f8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80132f8:	b480      	push	{r7}
 80132fa:	b085      	sub	sp, #20
 80132fc:	af00      	add	r7, sp, #0
 80132fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013300:	4b1f      	ldr	r3, [pc, #124]	@ (8013380 <SDMMC_GetCmdResp2+0x88>)
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	4a1f      	ldr	r2, [pc, #124]	@ (8013384 <SDMMC_GetCmdResp2+0x8c>)
 8013306:	fba2 2303 	umull	r2, r3, r2, r3
 801330a:	0a5b      	lsrs	r3, r3, #9
 801330c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013310:	fb02 f303 	mul.w	r3, r2, r3
 8013314:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	1e5a      	subs	r2, r3, #1
 801331a:	60fa      	str	r2, [r7, #12]
 801331c:	2b00      	cmp	r3, #0
 801331e:	d102      	bne.n	8013326 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013320:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8013324:	e026      	b.n	8013374 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801332a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801332c:	68bb      	ldr	r3, [r7, #8]
 801332e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8013332:	2b00      	cmp	r3, #0
 8013334:	d0ef      	beq.n	8013316 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013336:	68bb      	ldr	r3, [r7, #8]
 8013338:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801333c:	2b00      	cmp	r3, #0
 801333e:	d1ea      	bne.n	8013316 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013344:	f003 0304 	and.w	r3, r3, #4
 8013348:	2b00      	cmp	r3, #0
 801334a:	d004      	beq.n	8013356 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	2204      	movs	r2, #4
 8013350:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013352:	2304      	movs	r3, #4
 8013354:	e00e      	b.n	8013374 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801335a:	f003 0301 	and.w	r3, r3, #1
 801335e:	2b00      	cmp	r3, #0
 8013360:	d004      	beq.n	801336c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	2201      	movs	r2, #1
 8013366:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013368:	2301      	movs	r3, #1
 801336a:	e003      	b.n	8013374 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	4a06      	ldr	r2, [pc, #24]	@ (8013388 <SDMMC_GetCmdResp2+0x90>)
 8013370:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8013372:	2300      	movs	r3, #0
}
 8013374:	4618      	mov	r0, r3
 8013376:	3714      	adds	r7, #20
 8013378:	46bd      	mov	sp, r7
 801337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801337e:	4770      	bx	lr
 8013380:	24000024 	.word	0x24000024
 8013384:	10624dd3 	.word	0x10624dd3
 8013388:	002000c5 	.word	0x002000c5

0801338c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 801338c:	b480      	push	{r7}
 801338e:	b085      	sub	sp, #20
 8013390:	af00      	add	r7, sp, #0
 8013392:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013394:	4b1a      	ldr	r3, [pc, #104]	@ (8013400 <SDMMC_GetCmdResp3+0x74>)
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	4a1a      	ldr	r2, [pc, #104]	@ (8013404 <SDMMC_GetCmdResp3+0x78>)
 801339a:	fba2 2303 	umull	r2, r3, r2, r3
 801339e:	0a5b      	lsrs	r3, r3, #9
 80133a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80133a4:	fb02 f303 	mul.w	r3, r2, r3
 80133a8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80133aa:	68fb      	ldr	r3, [r7, #12]
 80133ac:	1e5a      	subs	r2, r3, #1
 80133ae:	60fa      	str	r2, [r7, #12]
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d102      	bne.n	80133ba <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80133b4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80133b8:	e01b      	b.n	80133f2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80133be:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80133c0:	68bb      	ldr	r3, [r7, #8]
 80133c2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d0ef      	beq.n	80133aa <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80133ca:	68bb      	ldr	r3, [r7, #8]
 80133cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d1ea      	bne.n	80133aa <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80133d8:	f003 0304 	and.w	r3, r3, #4
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d004      	beq.n	80133ea <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	2204      	movs	r2, #4
 80133e4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80133e6:	2304      	movs	r3, #4
 80133e8:	e003      	b.n	80133f2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	4a06      	ldr	r2, [pc, #24]	@ (8013408 <SDMMC_GetCmdResp3+0x7c>)
 80133ee:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80133f0:	2300      	movs	r3, #0
}
 80133f2:	4618      	mov	r0, r3
 80133f4:	3714      	adds	r7, #20
 80133f6:	46bd      	mov	sp, r7
 80133f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133fc:	4770      	bx	lr
 80133fe:	bf00      	nop
 8013400:	24000024 	.word	0x24000024
 8013404:	10624dd3 	.word	0x10624dd3
 8013408:	002000c5 	.word	0x002000c5

0801340c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 801340c:	b580      	push	{r7, lr}
 801340e:	b088      	sub	sp, #32
 8013410:	af00      	add	r7, sp, #0
 8013412:	60f8      	str	r0, [r7, #12]
 8013414:	460b      	mov	r3, r1
 8013416:	607a      	str	r2, [r7, #4]
 8013418:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801341a:	4b35      	ldr	r3, [pc, #212]	@ (80134f0 <SDMMC_GetCmdResp6+0xe4>)
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	4a35      	ldr	r2, [pc, #212]	@ (80134f4 <SDMMC_GetCmdResp6+0xe8>)
 8013420:	fba2 2303 	umull	r2, r3, r2, r3
 8013424:	0a5b      	lsrs	r3, r3, #9
 8013426:	f241 3288 	movw	r2, #5000	@ 0x1388
 801342a:	fb02 f303 	mul.w	r3, r2, r3
 801342e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8013430:	69fb      	ldr	r3, [r7, #28]
 8013432:	1e5a      	subs	r2, r3, #1
 8013434:	61fa      	str	r2, [r7, #28]
 8013436:	2b00      	cmp	r3, #0
 8013438:	d102      	bne.n	8013440 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 801343a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801343e:	e052      	b.n	80134e6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8013440:	68fb      	ldr	r3, [r7, #12]
 8013442:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013444:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013446:	69bb      	ldr	r3, [r7, #24]
 8013448:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801344c:	2b00      	cmp	r3, #0
 801344e:	d0ef      	beq.n	8013430 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013450:	69bb      	ldr	r3, [r7, #24]
 8013452:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013456:	2b00      	cmp	r3, #0
 8013458:	d1ea      	bne.n	8013430 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801345e:	f003 0304 	and.w	r3, r3, #4
 8013462:	2b00      	cmp	r3, #0
 8013464:	d004      	beq.n	8013470 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	2204      	movs	r2, #4
 801346a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801346c:	2304      	movs	r3, #4
 801346e:	e03a      	b.n	80134e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013474:	f003 0301 	and.w	r3, r3, #1
 8013478:	2b00      	cmp	r3, #0
 801347a:	d004      	beq.n	8013486 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	2201      	movs	r2, #1
 8013480:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013482:	2301      	movs	r3, #1
 8013484:	e02f      	b.n	80134e6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8013486:	68f8      	ldr	r0, [r7, #12]
 8013488:	f7ff fb7c 	bl	8012b84 <SDMMC_GetCommandResponse>
 801348c:	4603      	mov	r3, r0
 801348e:	461a      	mov	r2, r3
 8013490:	7afb      	ldrb	r3, [r7, #11]
 8013492:	4293      	cmp	r3, r2
 8013494:	d001      	beq.n	801349a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013496:	2301      	movs	r3, #1
 8013498:	e025      	b.n	80134e6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	4a16      	ldr	r2, [pc, #88]	@ (80134f8 <SDMMC_GetCmdResp6+0xec>)
 801349e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80134a0:	2100      	movs	r1, #0
 80134a2:	68f8      	ldr	r0, [r7, #12]
 80134a4:	f7ff fb7b 	bl	8012b9e <SDMMC_GetResponse>
 80134a8:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 80134aa:	697b      	ldr	r3, [r7, #20]
 80134ac:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d106      	bne.n	80134c2 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80134b4:	697b      	ldr	r3, [r7, #20]
 80134b6:	0c1b      	lsrs	r3, r3, #16
 80134b8:	b29a      	uxth	r2, r3
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80134be:	2300      	movs	r3, #0
 80134c0:	e011      	b.n	80134e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80134c2:	697b      	ldr	r3, [r7, #20]
 80134c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d002      	beq.n	80134d2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80134cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80134d0:	e009      	b.n	80134e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80134d2:	697b      	ldr	r3, [r7, #20]
 80134d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d002      	beq.n	80134e2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80134dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80134e0:	e001      	b.n	80134e6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80134e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80134e6:	4618      	mov	r0, r3
 80134e8:	3720      	adds	r7, #32
 80134ea:	46bd      	mov	sp, r7
 80134ec:	bd80      	pop	{r7, pc}
 80134ee:	bf00      	nop
 80134f0:	24000024 	.word	0x24000024
 80134f4:	10624dd3 	.word	0x10624dd3
 80134f8:	002000c5 	.word	0x002000c5

080134fc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80134fc:	b480      	push	{r7}
 80134fe:	b085      	sub	sp, #20
 8013500:	af00      	add	r7, sp, #0
 8013502:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013504:	4b22      	ldr	r3, [pc, #136]	@ (8013590 <SDMMC_GetCmdResp7+0x94>)
 8013506:	681b      	ldr	r3, [r3, #0]
 8013508:	4a22      	ldr	r2, [pc, #136]	@ (8013594 <SDMMC_GetCmdResp7+0x98>)
 801350a:	fba2 2303 	umull	r2, r3, r2, r3
 801350e:	0a5b      	lsrs	r3, r3, #9
 8013510:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013514:	fb02 f303 	mul.w	r3, r2, r3
 8013518:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801351a:	68fb      	ldr	r3, [r7, #12]
 801351c:	1e5a      	subs	r2, r3, #1
 801351e:	60fa      	str	r2, [r7, #12]
 8013520:	2b00      	cmp	r3, #0
 8013522:	d102      	bne.n	801352a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013524:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8013528:	e02c      	b.n	8013584 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801352e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013530:	68bb      	ldr	r3, [r7, #8]
 8013532:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8013536:	2b00      	cmp	r3, #0
 8013538:	d0ef      	beq.n	801351a <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801353a:	68bb      	ldr	r3, [r7, #8]
 801353c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013540:	2b00      	cmp	r3, #0
 8013542:	d1ea      	bne.n	801351a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013548:	f003 0304 	and.w	r3, r3, #4
 801354c:	2b00      	cmp	r3, #0
 801354e:	d004      	beq.n	801355a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	2204      	movs	r2, #4
 8013554:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013556:	2304      	movs	r3, #4
 8013558:	e014      	b.n	8013584 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801355e:	f003 0301 	and.w	r3, r3, #1
 8013562:	2b00      	cmp	r3, #0
 8013564:	d004      	beq.n	8013570 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	2201      	movs	r2, #1
 801356a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801356c:	2301      	movs	r3, #1
 801356e:	e009      	b.n	8013584 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013574:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013578:	2b00      	cmp	r3, #0
 801357a:	d002      	beq.n	8013582 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	2240      	movs	r2, #64	@ 0x40
 8013580:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8013582:	2300      	movs	r3, #0

}
 8013584:	4618      	mov	r0, r3
 8013586:	3714      	adds	r7, #20
 8013588:	46bd      	mov	sp, r7
 801358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801358e:	4770      	bx	lr
 8013590:	24000024 	.word	0x24000024
 8013594:	10624dd3 	.word	0x10624dd3

08013598 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8013598:	b480      	push	{r7}
 801359a:	b085      	sub	sp, #20
 801359c:	af00      	add	r7, sp, #0
 801359e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80135a0:	4b11      	ldr	r3, [pc, #68]	@ (80135e8 <SDMMC_GetCmdError+0x50>)
 80135a2:	681b      	ldr	r3, [r3, #0]
 80135a4:	4a11      	ldr	r2, [pc, #68]	@ (80135ec <SDMMC_GetCmdError+0x54>)
 80135a6:	fba2 2303 	umull	r2, r3, r2, r3
 80135aa:	0a5b      	lsrs	r3, r3, #9
 80135ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80135b0:	fb02 f303 	mul.w	r3, r2, r3
 80135b4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80135b6:	68fb      	ldr	r3, [r7, #12]
 80135b8:	1e5a      	subs	r2, r3, #1
 80135ba:	60fa      	str	r2, [r7, #12]
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d102      	bne.n	80135c6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80135c0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80135c4:	e009      	b.n	80135da <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80135ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d0f1      	beq.n	80135b6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	4a06      	ldr	r2, [pc, #24]	@ (80135f0 <SDMMC_GetCmdError+0x58>)
 80135d6:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 80135d8:	2300      	movs	r3, #0
}
 80135da:	4618      	mov	r0, r3
 80135dc:	3714      	adds	r7, #20
 80135de:	46bd      	mov	sp, r7
 80135e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135e4:	4770      	bx	lr
 80135e6:	bf00      	nop
 80135e8:	24000024 	.word	0x24000024
 80135ec:	10624dd3 	.word	0x10624dd3
 80135f0:	002000c5 	.word	0x002000c5

080135f4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80135f4:	b580      	push	{r7, lr}
 80135f6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80135f8:	4904      	ldr	r1, [pc, #16]	@ (801360c <MX_FATFS_Init+0x18>)
 80135fa:	4805      	ldr	r0, [pc, #20]	@ (8013610 <MX_FATFS_Init+0x1c>)
 80135fc:	f000 fa8e 	bl	8013b1c <FATFS_LinkDriver>
 8013600:	4603      	mov	r3, r0
 8013602:	461a      	mov	r2, r3
 8013604:	4b03      	ldr	r3, [pc, #12]	@ (8013614 <MX_FATFS_Init+0x20>)
 8013606:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8013608:	bf00      	nop
 801360a:	bd80      	pop	{r7, pc}
 801360c:	24000964 	.word	0x24000964
 8013610:	080149cc 	.word	0x080149cc
 8013614:	24000960 	.word	0x24000960

08013618 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8013618:	b580      	push	{r7, lr}
 801361a:	b082      	sub	sp, #8
 801361c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801361e:	2300      	movs	r3, #0
 8013620:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8013622:	f000 f885 	bl	8013730 <BSP_SD_IsDetected>
 8013626:	4603      	mov	r3, r0
 8013628:	2b01      	cmp	r3, #1
 801362a:	d001      	beq.n	8013630 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 801362c:	2302      	movs	r3, #2
 801362e:	e012      	b.n	8013656 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8013630:	480b      	ldr	r0, [pc, #44]	@ (8013660 <BSP_SD_Init+0x48>)
 8013632:	f7f9 ffb7 	bl	800d5a4 <HAL_SD_Init>
 8013636:	4603      	mov	r3, r0
 8013638:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 801363a:	79fb      	ldrb	r3, [r7, #7]
 801363c:	2b00      	cmp	r3, #0
 801363e:	d109      	bne.n	8013654 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8013640:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8013644:	4806      	ldr	r0, [pc, #24]	@ (8013660 <BSP_SD_Init+0x48>)
 8013646:	f7fa fe6d 	bl	800e324 <HAL_SD_ConfigWideBusOperation>
 801364a:	4603      	mov	r3, r0
 801364c:	2b00      	cmp	r3, #0
 801364e:	d001      	beq.n	8013654 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8013650:	2301      	movs	r3, #1
 8013652:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8013654:	79fb      	ldrb	r3, [r7, #7]
}
 8013656:	4618      	mov	r0, r3
 8013658:	3708      	adds	r7, #8
 801365a:	46bd      	mov	sp, r7
 801365c:	bd80      	pop	{r7, pc}
 801365e:	bf00      	nop
 8013660:	240003e4 	.word	0x240003e4

08013664 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8013664:	b580      	push	{r7, lr}
 8013666:	b086      	sub	sp, #24
 8013668:	af00      	add	r7, sp, #0
 801366a:	60f8      	str	r0, [r7, #12]
 801366c:	60b9      	str	r1, [r7, #8]
 801366e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8013670:	2300      	movs	r3, #0
 8013672:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	68ba      	ldr	r2, [r7, #8]
 8013678:	68f9      	ldr	r1, [r7, #12]
 801367a:	4806      	ldr	r0, [pc, #24]	@ (8013694 <BSP_SD_ReadBlocks_DMA+0x30>)
 801367c:	f7fa f8b2 	bl	800d7e4 <HAL_SD_ReadBlocks_DMA>
 8013680:	4603      	mov	r3, r0
 8013682:	2b00      	cmp	r3, #0
 8013684:	d001      	beq.n	801368a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8013686:	2301      	movs	r3, #1
 8013688:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801368a:	7dfb      	ldrb	r3, [r7, #23]
}
 801368c:	4618      	mov	r0, r3
 801368e:	3718      	adds	r7, #24
 8013690:	46bd      	mov	sp, r7
 8013692:	bd80      	pop	{r7, pc}
 8013694:	240003e4 	.word	0x240003e4

08013698 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8013698:	b580      	push	{r7, lr}
 801369a:	b086      	sub	sp, #24
 801369c:	af00      	add	r7, sp, #0
 801369e:	60f8      	str	r0, [r7, #12]
 80136a0:	60b9      	str	r1, [r7, #8]
 80136a2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80136a4:	2300      	movs	r3, #0
 80136a6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	68ba      	ldr	r2, [r7, #8]
 80136ac:	68f9      	ldr	r1, [r7, #12]
 80136ae:	4806      	ldr	r0, [pc, #24]	@ (80136c8 <BSP_SD_WriteBlocks_DMA+0x30>)
 80136b0:	f7fa f940 	bl	800d934 <HAL_SD_WriteBlocks_DMA>
 80136b4:	4603      	mov	r3, r0
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d001      	beq.n	80136be <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80136ba:	2301      	movs	r3, #1
 80136bc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80136be:	7dfb      	ldrb	r3, [r7, #23]
}
 80136c0:	4618      	mov	r0, r3
 80136c2:	3718      	adds	r7, #24
 80136c4:	46bd      	mov	sp, r7
 80136c6:	bd80      	pop	{r7, pc}
 80136c8:	240003e4 	.word	0x240003e4

080136cc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80136cc:	b580      	push	{r7, lr}
 80136ce:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80136d0:	4805      	ldr	r0, [pc, #20]	@ (80136e8 <BSP_SD_GetCardState+0x1c>)
 80136d2:	f7fa ff39 	bl	800e548 <HAL_SD_GetCardState>
 80136d6:	4603      	mov	r3, r0
 80136d8:	2b04      	cmp	r3, #4
 80136da:	bf14      	ite	ne
 80136dc:	2301      	movne	r3, #1
 80136de:	2300      	moveq	r3, #0
 80136e0:	b2db      	uxtb	r3, r3
}
 80136e2:	4618      	mov	r0, r3
 80136e4:	bd80      	pop	{r7, pc}
 80136e6:	bf00      	nop
 80136e8:	240003e4 	.word	0x240003e4

080136ec <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80136ec:	b580      	push	{r7, lr}
 80136ee:	b082      	sub	sp, #8
 80136f0:	af00      	add	r7, sp, #0
 80136f2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80136f4:	6879      	ldr	r1, [r7, #4]
 80136f6:	4803      	ldr	r0, [pc, #12]	@ (8013704 <BSP_SD_GetCardInfo+0x18>)
 80136f8:	f7fa fde8 	bl	800e2cc <HAL_SD_GetCardInfo>
}
 80136fc:	bf00      	nop
 80136fe:	3708      	adds	r7, #8
 8013700:	46bd      	mov	sp, r7
 8013702:	bd80      	pop	{r7, pc}
 8013704:	240003e4 	.word	0x240003e4

08013708 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8013708:	b580      	push	{r7, lr}
 801370a:	b082      	sub	sp, #8
 801370c:	af00      	add	r7, sp, #0
 801370e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8013710:	f000 f9a0 	bl	8013a54 <BSP_SD_WriteCpltCallback>
}
 8013714:	bf00      	nop
 8013716:	3708      	adds	r7, #8
 8013718:	46bd      	mov	sp, r7
 801371a:	bd80      	pop	{r7, pc}

0801371c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 801371c:	b580      	push	{r7, lr}
 801371e:	b082      	sub	sp, #8
 8013720:	af00      	add	r7, sp, #0
 8013722:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8013724:	f000 f9a2 	bl	8013a6c <BSP_SD_ReadCpltCallback>
}
 8013728:	bf00      	nop
 801372a:	3708      	adds	r7, #8
 801372c:	46bd      	mov	sp, r7
 801372e:	bd80      	pop	{r7, pc}

08013730 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8013730:	b580      	push	{r7, lr}
 8013732:	b082      	sub	sp, #8
 8013734:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8013736:	2301      	movs	r3, #1
 8013738:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 801373a:	f000 f80b 	bl	8013754 <BSP_PlatformIsDetected>
 801373e:	4603      	mov	r3, r0
 8013740:	2b00      	cmp	r3, #0
 8013742:	d101      	bne.n	8013748 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8013744:	2300      	movs	r3, #0
 8013746:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8013748:	79fb      	ldrb	r3, [r7, #7]
 801374a:	b2db      	uxtb	r3, r3
}
 801374c:	4618      	mov	r0, r3
 801374e:	3708      	adds	r7, #8
 8013750:	46bd      	mov	sp, r7
 8013752:	bd80      	pop	{r7, pc}

08013754 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8013754:	b580      	push	{r7, lr}
 8013756:	b082      	sub	sp, #8
 8013758:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801375a:	2301      	movs	r3, #1
 801375c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 801375e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8013762:	4806      	ldr	r0, [pc, #24]	@ (801377c <BSP_PlatformIsDetected+0x28>)
 8013764:	f7f6 fb66 	bl	8009e34 <HAL_GPIO_ReadPin>
 8013768:	4603      	mov	r3, r0
 801376a:	2b00      	cmp	r3, #0
 801376c:	d001      	beq.n	8013772 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 801376e:	2300      	movs	r3, #0
 8013770:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8013772:	79fb      	ldrb	r3, [r7, #7]
}
 8013774:	4618      	mov	r0, r3
 8013776:	3708      	adds	r7, #8
 8013778:	46bd      	mov	sp, r7
 801377a:	bd80      	pop	{r7, pc}
 801377c:	58021400 	.word	0x58021400

08013780 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8013780:	b580      	push	{r7, lr}
 8013782:	b084      	sub	sp, #16
 8013784:	af00      	add	r7, sp, #0
 8013786:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8013788:	f7f0 f9cc 	bl	8003b24 <HAL_GetTick>
 801378c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 801378e:	e006      	b.n	801379e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013790:	f7ff ff9c 	bl	80136cc <BSP_SD_GetCardState>
 8013794:	4603      	mov	r3, r0
 8013796:	2b00      	cmp	r3, #0
 8013798:	d101      	bne.n	801379e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801379a:	2300      	movs	r3, #0
 801379c:	e009      	b.n	80137b2 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 801379e:	f7f0 f9c1 	bl	8003b24 <HAL_GetTick>
 80137a2:	4602      	mov	r2, r0
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	1ad3      	subs	r3, r2, r3
 80137a8:	687a      	ldr	r2, [r7, #4]
 80137aa:	429a      	cmp	r2, r3
 80137ac:	d8f0      	bhi.n	8013790 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80137ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80137b2:	4618      	mov	r0, r3
 80137b4:	3710      	adds	r7, #16
 80137b6:	46bd      	mov	sp, r7
 80137b8:	bd80      	pop	{r7, pc}
	...

080137bc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80137bc:	b580      	push	{r7, lr}
 80137be:	b082      	sub	sp, #8
 80137c0:	af00      	add	r7, sp, #0
 80137c2:	4603      	mov	r3, r0
 80137c4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80137c6:	4b0b      	ldr	r3, [pc, #44]	@ (80137f4 <SD_CheckStatus+0x38>)
 80137c8:	2201      	movs	r2, #1
 80137ca:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80137cc:	f7ff ff7e 	bl	80136cc <BSP_SD_GetCardState>
 80137d0:	4603      	mov	r3, r0
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d107      	bne.n	80137e6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80137d6:	4b07      	ldr	r3, [pc, #28]	@ (80137f4 <SD_CheckStatus+0x38>)
 80137d8:	781b      	ldrb	r3, [r3, #0]
 80137da:	b2db      	uxtb	r3, r3
 80137dc:	f023 0301 	bic.w	r3, r3, #1
 80137e0:	b2da      	uxtb	r2, r3
 80137e2:	4b04      	ldr	r3, [pc, #16]	@ (80137f4 <SD_CheckStatus+0x38>)
 80137e4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80137e6:	4b03      	ldr	r3, [pc, #12]	@ (80137f4 <SD_CheckStatus+0x38>)
 80137e8:	781b      	ldrb	r3, [r3, #0]
 80137ea:	b2db      	uxtb	r3, r3
}
 80137ec:	4618      	mov	r0, r3
 80137ee:	3708      	adds	r7, #8
 80137f0:	46bd      	mov	sp, r7
 80137f2:	bd80      	pop	{r7, pc}
 80137f4:	24000031 	.word	0x24000031

080137f8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80137f8:	b580      	push	{r7, lr}
 80137fa:	b082      	sub	sp, #8
 80137fc:	af00      	add	r7, sp, #0
 80137fe:	4603      	mov	r3, r0
 8013800:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8013802:	f7ff ff09 	bl	8013618 <BSP_SD_Init>
 8013806:	4603      	mov	r3, r0
 8013808:	2b00      	cmp	r3, #0
 801380a:	d107      	bne.n	801381c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 801380c:	79fb      	ldrb	r3, [r7, #7]
 801380e:	4618      	mov	r0, r3
 8013810:	f7ff ffd4 	bl	80137bc <SD_CheckStatus>
 8013814:	4603      	mov	r3, r0
 8013816:	461a      	mov	r2, r3
 8013818:	4b04      	ldr	r3, [pc, #16]	@ (801382c <SD_initialize+0x34>)
 801381a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 801381c:	4b03      	ldr	r3, [pc, #12]	@ (801382c <SD_initialize+0x34>)
 801381e:	781b      	ldrb	r3, [r3, #0]
 8013820:	b2db      	uxtb	r3, r3
}
 8013822:	4618      	mov	r0, r3
 8013824:	3708      	adds	r7, #8
 8013826:	46bd      	mov	sp, r7
 8013828:	bd80      	pop	{r7, pc}
 801382a:	bf00      	nop
 801382c:	24000031 	.word	0x24000031

08013830 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8013830:	b580      	push	{r7, lr}
 8013832:	b082      	sub	sp, #8
 8013834:	af00      	add	r7, sp, #0
 8013836:	4603      	mov	r3, r0
 8013838:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801383a:	79fb      	ldrb	r3, [r7, #7]
 801383c:	4618      	mov	r0, r3
 801383e:	f7ff ffbd 	bl	80137bc <SD_CheckStatus>
 8013842:	4603      	mov	r3, r0
}
 8013844:	4618      	mov	r0, r3
 8013846:	3708      	adds	r7, #8
 8013848:	46bd      	mov	sp, r7
 801384a:	bd80      	pop	{r7, pc}

0801384c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 801384c:	b580      	push	{r7, lr}
 801384e:	b086      	sub	sp, #24
 8013850:	af00      	add	r7, sp, #0
 8013852:	60b9      	str	r1, [r7, #8]
 8013854:	607a      	str	r2, [r7, #4]
 8013856:	603b      	str	r3, [r7, #0]
 8013858:	4603      	mov	r3, r0
 801385a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801385c:	2301      	movs	r3, #1
 801385e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8013860:	f247 5030 	movw	r0, #30000	@ 0x7530
 8013864:	f7ff ff8c 	bl	8013780 <SD_CheckStatusWithTimeout>
 8013868:	4603      	mov	r3, r0
 801386a:	2b00      	cmp	r3, #0
 801386c:	da01      	bge.n	8013872 <SD_read+0x26>
  {
    return res;
 801386e:	7dfb      	ldrb	r3, [r7, #23]
 8013870:	e03b      	b.n	80138ea <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8013872:	683a      	ldr	r2, [r7, #0]
 8013874:	6879      	ldr	r1, [r7, #4]
 8013876:	68b8      	ldr	r0, [r7, #8]
 8013878:	f7ff fef4 	bl	8013664 <BSP_SD_ReadBlocks_DMA>
 801387c:	4603      	mov	r3, r0
 801387e:	2b00      	cmp	r3, #0
 8013880:	d132      	bne.n	80138e8 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8013882:	4b1c      	ldr	r3, [pc, #112]	@ (80138f4 <SD_read+0xa8>)
 8013884:	2200      	movs	r2, #0
 8013886:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8013888:	f7f0 f94c 	bl	8003b24 <HAL_GetTick>
 801388c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801388e:	bf00      	nop
 8013890:	4b18      	ldr	r3, [pc, #96]	@ (80138f4 <SD_read+0xa8>)
 8013892:	681b      	ldr	r3, [r3, #0]
 8013894:	2b00      	cmp	r3, #0
 8013896:	d108      	bne.n	80138aa <SD_read+0x5e>
 8013898:	f7f0 f944 	bl	8003b24 <HAL_GetTick>
 801389c:	4602      	mov	r2, r0
 801389e:	693b      	ldr	r3, [r7, #16]
 80138a0:	1ad3      	subs	r3, r2, r3
 80138a2:	f247 522f 	movw	r2, #29999	@ 0x752f
 80138a6:	4293      	cmp	r3, r2
 80138a8:	d9f2      	bls.n	8013890 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80138aa:	4b12      	ldr	r3, [pc, #72]	@ (80138f4 <SD_read+0xa8>)
 80138ac:	681b      	ldr	r3, [r3, #0]
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d102      	bne.n	80138b8 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80138b2:	2301      	movs	r3, #1
 80138b4:	75fb      	strb	r3, [r7, #23]
 80138b6:	e017      	b.n	80138e8 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80138b8:	4b0e      	ldr	r3, [pc, #56]	@ (80138f4 <SD_read+0xa8>)
 80138ba:	2200      	movs	r2, #0
 80138bc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80138be:	f7f0 f931 	bl	8003b24 <HAL_GetTick>
 80138c2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80138c4:	e007      	b.n	80138d6 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80138c6:	f7ff ff01 	bl	80136cc <BSP_SD_GetCardState>
 80138ca:	4603      	mov	r3, r0
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d102      	bne.n	80138d6 <SD_read+0x8a>
          {
            res = RES_OK;
 80138d0:	2300      	movs	r3, #0
 80138d2:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80138d4:	e008      	b.n	80138e8 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80138d6:	f7f0 f925 	bl	8003b24 <HAL_GetTick>
 80138da:	4602      	mov	r2, r0
 80138dc:	693b      	ldr	r3, [r7, #16]
 80138de:	1ad3      	subs	r3, r2, r3
 80138e0:	f247 522f 	movw	r2, #29999	@ 0x752f
 80138e4:	4293      	cmp	r3, r2
 80138e6:	d9ee      	bls.n	80138c6 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80138e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80138ea:	4618      	mov	r0, r3
 80138ec:	3718      	adds	r7, #24
 80138ee:	46bd      	mov	sp, r7
 80138f0:	bd80      	pop	{r7, pc}
 80138f2:	bf00      	nop
 80138f4:	2400096c 	.word	0x2400096c

080138f8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80138f8:	b580      	push	{r7, lr}
 80138fa:	b086      	sub	sp, #24
 80138fc:	af00      	add	r7, sp, #0
 80138fe:	60b9      	str	r1, [r7, #8]
 8013900:	607a      	str	r2, [r7, #4]
 8013902:	603b      	str	r3, [r7, #0]
 8013904:	4603      	mov	r3, r0
 8013906:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013908:	2301      	movs	r3, #1
 801390a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 801390c:	4b24      	ldr	r3, [pc, #144]	@ (80139a0 <SD_write+0xa8>)
 801390e:	2200      	movs	r2, #0
 8013910:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8013912:	f247 5030 	movw	r0, #30000	@ 0x7530
 8013916:	f7ff ff33 	bl	8013780 <SD_CheckStatusWithTimeout>
 801391a:	4603      	mov	r3, r0
 801391c:	2b00      	cmp	r3, #0
 801391e:	da01      	bge.n	8013924 <SD_write+0x2c>
  {
    return res;
 8013920:	7dfb      	ldrb	r3, [r7, #23]
 8013922:	e038      	b.n	8013996 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8013924:	683a      	ldr	r2, [r7, #0]
 8013926:	6879      	ldr	r1, [r7, #4]
 8013928:	68b8      	ldr	r0, [r7, #8]
 801392a:	f7ff feb5 	bl	8013698 <BSP_SD_WriteBlocks_DMA>
 801392e:	4603      	mov	r3, r0
 8013930:	2b00      	cmp	r3, #0
 8013932:	d12f      	bne.n	8013994 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8013934:	f7f0 f8f6 	bl	8003b24 <HAL_GetTick>
 8013938:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801393a:	bf00      	nop
 801393c:	4b18      	ldr	r3, [pc, #96]	@ (80139a0 <SD_write+0xa8>)
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	2b00      	cmp	r3, #0
 8013942:	d108      	bne.n	8013956 <SD_write+0x5e>
 8013944:	f7f0 f8ee 	bl	8003b24 <HAL_GetTick>
 8013948:	4602      	mov	r2, r0
 801394a:	693b      	ldr	r3, [r7, #16]
 801394c:	1ad3      	subs	r3, r2, r3
 801394e:	f247 522f 	movw	r2, #29999	@ 0x752f
 8013952:	4293      	cmp	r3, r2
 8013954:	d9f2      	bls.n	801393c <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8013956:	4b12      	ldr	r3, [pc, #72]	@ (80139a0 <SD_write+0xa8>)
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	2b00      	cmp	r3, #0
 801395c:	d102      	bne.n	8013964 <SD_write+0x6c>
      {
        res = RES_ERROR;
 801395e:	2301      	movs	r3, #1
 8013960:	75fb      	strb	r3, [r7, #23]
 8013962:	e017      	b.n	8013994 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8013964:	4b0e      	ldr	r3, [pc, #56]	@ (80139a0 <SD_write+0xa8>)
 8013966:	2200      	movs	r2, #0
 8013968:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801396a:	f7f0 f8db 	bl	8003b24 <HAL_GetTick>
 801396e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8013970:	e007      	b.n	8013982 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013972:	f7ff feab 	bl	80136cc <BSP_SD_GetCardState>
 8013976:	4603      	mov	r3, r0
 8013978:	2b00      	cmp	r3, #0
 801397a:	d102      	bne.n	8013982 <SD_write+0x8a>
          {
            res = RES_OK;
 801397c:	2300      	movs	r3, #0
 801397e:	75fb      	strb	r3, [r7, #23]
            break;
 8013980:	e008      	b.n	8013994 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8013982:	f7f0 f8cf 	bl	8003b24 <HAL_GetTick>
 8013986:	4602      	mov	r2, r0
 8013988:	693b      	ldr	r3, [r7, #16]
 801398a:	1ad3      	subs	r3, r2, r3
 801398c:	f247 522f 	movw	r2, #29999	@ 0x752f
 8013990:	4293      	cmp	r3, r2
 8013992:	d9ee      	bls.n	8013972 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8013994:	7dfb      	ldrb	r3, [r7, #23]
}
 8013996:	4618      	mov	r0, r3
 8013998:	3718      	adds	r7, #24
 801399a:	46bd      	mov	sp, r7
 801399c:	bd80      	pop	{r7, pc}
 801399e:	bf00      	nop
 80139a0:	24000968 	.word	0x24000968

080139a4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80139a4:	b580      	push	{r7, lr}
 80139a6:	b08c      	sub	sp, #48	@ 0x30
 80139a8:	af00      	add	r7, sp, #0
 80139aa:	4603      	mov	r3, r0
 80139ac:	603a      	str	r2, [r7, #0]
 80139ae:	71fb      	strb	r3, [r7, #7]
 80139b0:	460b      	mov	r3, r1
 80139b2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80139b4:	2301      	movs	r3, #1
 80139b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80139ba:	4b25      	ldr	r3, [pc, #148]	@ (8013a50 <SD_ioctl+0xac>)
 80139bc:	781b      	ldrb	r3, [r3, #0]
 80139be:	b2db      	uxtb	r3, r3
 80139c0:	f003 0301 	and.w	r3, r3, #1
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d001      	beq.n	80139cc <SD_ioctl+0x28>
 80139c8:	2303      	movs	r3, #3
 80139ca:	e03c      	b.n	8013a46 <SD_ioctl+0xa2>

  switch (cmd)
 80139cc:	79bb      	ldrb	r3, [r7, #6]
 80139ce:	2b03      	cmp	r3, #3
 80139d0:	d834      	bhi.n	8013a3c <SD_ioctl+0x98>
 80139d2:	a201      	add	r2, pc, #4	@ (adr r2, 80139d8 <SD_ioctl+0x34>)
 80139d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80139d8:	080139e9 	.word	0x080139e9
 80139dc:	080139f1 	.word	0x080139f1
 80139e0:	08013a09 	.word	0x08013a09
 80139e4:	08013a23 	.word	0x08013a23
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80139e8:	2300      	movs	r3, #0
 80139ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80139ee:	e028      	b.n	8013a42 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80139f0:	f107 0308 	add.w	r3, r7, #8
 80139f4:	4618      	mov	r0, r3
 80139f6:	f7ff fe79 	bl	80136ec <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80139fa:	6a3a      	ldr	r2, [r7, #32]
 80139fc:	683b      	ldr	r3, [r7, #0]
 80139fe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013a00:	2300      	movs	r3, #0
 8013a02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8013a06:	e01c      	b.n	8013a42 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8013a08:	f107 0308 	add.w	r3, r7, #8
 8013a0c:	4618      	mov	r0, r3
 8013a0e:	f7ff fe6d 	bl	80136ec <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8013a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a14:	b29a      	uxth	r2, r3
 8013a16:	683b      	ldr	r3, [r7, #0]
 8013a18:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8013a1a:	2300      	movs	r3, #0
 8013a1c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8013a20:	e00f      	b.n	8013a42 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8013a22:	f107 0308 	add.w	r3, r7, #8
 8013a26:	4618      	mov	r0, r3
 8013a28:	f7ff fe60 	bl	80136ec <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8013a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a2e:	0a5a      	lsrs	r2, r3, #9
 8013a30:	683b      	ldr	r3, [r7, #0]
 8013a32:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013a34:	2300      	movs	r3, #0
 8013a36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8013a3a:	e002      	b.n	8013a42 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8013a3c:	2304      	movs	r3, #4
 8013a3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8013a42:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8013a46:	4618      	mov	r0, r3
 8013a48:	3730      	adds	r7, #48	@ 0x30
 8013a4a:	46bd      	mov	sp, r7
 8013a4c:	bd80      	pop	{r7, pc}
 8013a4e:	bf00      	nop
 8013a50:	24000031 	.word	0x24000031

08013a54 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8013a54:	b480      	push	{r7}
 8013a56:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8013a58:	4b03      	ldr	r3, [pc, #12]	@ (8013a68 <BSP_SD_WriteCpltCallback+0x14>)
 8013a5a:	2201      	movs	r2, #1
 8013a5c:	601a      	str	r2, [r3, #0]
}
 8013a5e:	bf00      	nop
 8013a60:	46bd      	mov	sp, r7
 8013a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a66:	4770      	bx	lr
 8013a68:	24000968 	.word	0x24000968

08013a6c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8013a6c:	b480      	push	{r7}
 8013a6e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8013a70:	4b03      	ldr	r3, [pc, #12]	@ (8013a80 <BSP_SD_ReadCpltCallback+0x14>)
 8013a72:	2201      	movs	r2, #1
 8013a74:	601a      	str	r2, [r3, #0]
}
 8013a76:	bf00      	nop
 8013a78:	46bd      	mov	sp, r7
 8013a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a7e:	4770      	bx	lr
 8013a80:	2400096c 	.word	0x2400096c

08013a84 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8013a84:	b480      	push	{r7}
 8013a86:	b087      	sub	sp, #28
 8013a88:	af00      	add	r7, sp, #0
 8013a8a:	60f8      	str	r0, [r7, #12]
 8013a8c:	60b9      	str	r1, [r7, #8]
 8013a8e:	4613      	mov	r3, r2
 8013a90:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8013a92:	2301      	movs	r3, #1
 8013a94:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8013a96:	2300      	movs	r3, #0
 8013a98:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8013a9a:	4b1f      	ldr	r3, [pc, #124]	@ (8013b18 <FATFS_LinkDriverEx+0x94>)
 8013a9c:	7a5b      	ldrb	r3, [r3, #9]
 8013a9e:	b2db      	uxtb	r3, r3
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d131      	bne.n	8013b08 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8013aa4:	4b1c      	ldr	r3, [pc, #112]	@ (8013b18 <FATFS_LinkDriverEx+0x94>)
 8013aa6:	7a5b      	ldrb	r3, [r3, #9]
 8013aa8:	b2db      	uxtb	r3, r3
 8013aaa:	461a      	mov	r2, r3
 8013aac:	4b1a      	ldr	r3, [pc, #104]	@ (8013b18 <FATFS_LinkDriverEx+0x94>)
 8013aae:	2100      	movs	r1, #0
 8013ab0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8013ab2:	4b19      	ldr	r3, [pc, #100]	@ (8013b18 <FATFS_LinkDriverEx+0x94>)
 8013ab4:	7a5b      	ldrb	r3, [r3, #9]
 8013ab6:	b2db      	uxtb	r3, r3
 8013ab8:	4a17      	ldr	r2, [pc, #92]	@ (8013b18 <FATFS_LinkDriverEx+0x94>)
 8013aba:	009b      	lsls	r3, r3, #2
 8013abc:	4413      	add	r3, r2
 8013abe:	68fa      	ldr	r2, [r7, #12]
 8013ac0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8013ac2:	4b15      	ldr	r3, [pc, #84]	@ (8013b18 <FATFS_LinkDriverEx+0x94>)
 8013ac4:	7a5b      	ldrb	r3, [r3, #9]
 8013ac6:	b2db      	uxtb	r3, r3
 8013ac8:	461a      	mov	r2, r3
 8013aca:	4b13      	ldr	r3, [pc, #76]	@ (8013b18 <FATFS_LinkDriverEx+0x94>)
 8013acc:	4413      	add	r3, r2
 8013ace:	79fa      	ldrb	r2, [r7, #7]
 8013ad0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8013ad2:	4b11      	ldr	r3, [pc, #68]	@ (8013b18 <FATFS_LinkDriverEx+0x94>)
 8013ad4:	7a5b      	ldrb	r3, [r3, #9]
 8013ad6:	b2db      	uxtb	r3, r3
 8013ad8:	1c5a      	adds	r2, r3, #1
 8013ada:	b2d1      	uxtb	r1, r2
 8013adc:	4a0e      	ldr	r2, [pc, #56]	@ (8013b18 <FATFS_LinkDriverEx+0x94>)
 8013ade:	7251      	strb	r1, [r2, #9]
 8013ae0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8013ae2:	7dbb      	ldrb	r3, [r7, #22]
 8013ae4:	3330      	adds	r3, #48	@ 0x30
 8013ae6:	b2da      	uxtb	r2, r3
 8013ae8:	68bb      	ldr	r3, [r7, #8]
 8013aea:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8013aec:	68bb      	ldr	r3, [r7, #8]
 8013aee:	3301      	adds	r3, #1
 8013af0:	223a      	movs	r2, #58	@ 0x3a
 8013af2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8013af4:	68bb      	ldr	r3, [r7, #8]
 8013af6:	3302      	adds	r3, #2
 8013af8:	222f      	movs	r2, #47	@ 0x2f
 8013afa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8013afc:	68bb      	ldr	r3, [r7, #8]
 8013afe:	3303      	adds	r3, #3
 8013b00:	2200      	movs	r2, #0
 8013b02:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8013b04:	2300      	movs	r3, #0
 8013b06:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8013b08:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b0a:	4618      	mov	r0, r3
 8013b0c:	371c      	adds	r7, #28
 8013b0e:	46bd      	mov	sp, r7
 8013b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b14:	4770      	bx	lr
 8013b16:	bf00      	nop
 8013b18:	24000970 	.word	0x24000970

08013b1c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8013b1c:	b580      	push	{r7, lr}
 8013b1e:	b082      	sub	sp, #8
 8013b20:	af00      	add	r7, sp, #0
 8013b22:	6078      	str	r0, [r7, #4]
 8013b24:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8013b26:	2200      	movs	r2, #0
 8013b28:	6839      	ldr	r1, [r7, #0]
 8013b2a:	6878      	ldr	r0, [r7, #4]
 8013b2c:	f7ff ffaa 	bl	8013a84 <FATFS_LinkDriverEx>
 8013b30:	4603      	mov	r3, r0
}
 8013b32:	4618      	mov	r0, r3
 8013b34:	3708      	adds	r7, #8
 8013b36:	46bd      	mov	sp, r7
 8013b38:	bd80      	pop	{r7, pc}
	...

08013b3c <sniprintf>:
 8013b3c:	b40c      	push	{r2, r3}
 8013b3e:	b530      	push	{r4, r5, lr}
 8013b40:	4b18      	ldr	r3, [pc, #96]	@ (8013ba4 <sniprintf+0x68>)
 8013b42:	1e0c      	subs	r4, r1, #0
 8013b44:	681d      	ldr	r5, [r3, #0]
 8013b46:	b09d      	sub	sp, #116	@ 0x74
 8013b48:	da08      	bge.n	8013b5c <sniprintf+0x20>
 8013b4a:	238b      	movs	r3, #139	@ 0x8b
 8013b4c:	602b      	str	r3, [r5, #0]
 8013b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8013b52:	b01d      	add	sp, #116	@ 0x74
 8013b54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013b58:	b002      	add	sp, #8
 8013b5a:	4770      	bx	lr
 8013b5c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8013b60:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013b64:	f04f 0300 	mov.w	r3, #0
 8013b68:	931b      	str	r3, [sp, #108]	@ 0x6c
 8013b6a:	bf14      	ite	ne
 8013b6c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8013b70:	4623      	moveq	r3, r4
 8013b72:	9304      	str	r3, [sp, #16]
 8013b74:	9307      	str	r3, [sp, #28]
 8013b76:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013b7a:	9002      	str	r0, [sp, #8]
 8013b7c:	9006      	str	r0, [sp, #24]
 8013b7e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013b82:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8013b84:	ab21      	add	r3, sp, #132	@ 0x84
 8013b86:	a902      	add	r1, sp, #8
 8013b88:	4628      	mov	r0, r5
 8013b8a:	9301      	str	r3, [sp, #4]
 8013b8c:	f000 f9c4 	bl	8013f18 <_svfiprintf_r>
 8013b90:	1c43      	adds	r3, r0, #1
 8013b92:	bfbc      	itt	lt
 8013b94:	238b      	movlt	r3, #139	@ 0x8b
 8013b96:	602b      	strlt	r3, [r5, #0]
 8013b98:	2c00      	cmp	r4, #0
 8013b9a:	d0da      	beq.n	8013b52 <sniprintf+0x16>
 8013b9c:	9b02      	ldr	r3, [sp, #8]
 8013b9e:	2200      	movs	r2, #0
 8013ba0:	701a      	strb	r2, [r3, #0]
 8013ba2:	e7d6      	b.n	8013b52 <sniprintf+0x16>
 8013ba4:	24000034 	.word	0x24000034

08013ba8 <siprintf>:
 8013ba8:	b40e      	push	{r1, r2, r3}
 8013baa:	b510      	push	{r4, lr}
 8013bac:	b09d      	sub	sp, #116	@ 0x74
 8013bae:	ab1f      	add	r3, sp, #124	@ 0x7c
 8013bb0:	9002      	str	r0, [sp, #8]
 8013bb2:	9006      	str	r0, [sp, #24]
 8013bb4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013bb8:	480a      	ldr	r0, [pc, #40]	@ (8013be4 <siprintf+0x3c>)
 8013bba:	9107      	str	r1, [sp, #28]
 8013bbc:	9104      	str	r1, [sp, #16]
 8013bbe:	490a      	ldr	r1, [pc, #40]	@ (8013be8 <siprintf+0x40>)
 8013bc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8013bc4:	9105      	str	r1, [sp, #20]
 8013bc6:	2400      	movs	r4, #0
 8013bc8:	a902      	add	r1, sp, #8
 8013bca:	6800      	ldr	r0, [r0, #0]
 8013bcc:	9301      	str	r3, [sp, #4]
 8013bce:	941b      	str	r4, [sp, #108]	@ 0x6c
 8013bd0:	f000 f9a2 	bl	8013f18 <_svfiprintf_r>
 8013bd4:	9b02      	ldr	r3, [sp, #8]
 8013bd6:	701c      	strb	r4, [r3, #0]
 8013bd8:	b01d      	add	sp, #116	@ 0x74
 8013bda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013bde:	b003      	add	sp, #12
 8013be0:	4770      	bx	lr
 8013be2:	bf00      	nop
 8013be4:	24000034 	.word	0x24000034
 8013be8:	ffff0208 	.word	0xffff0208

08013bec <memset>:
 8013bec:	4402      	add	r2, r0
 8013bee:	4603      	mov	r3, r0
 8013bf0:	4293      	cmp	r3, r2
 8013bf2:	d100      	bne.n	8013bf6 <memset+0xa>
 8013bf4:	4770      	bx	lr
 8013bf6:	f803 1b01 	strb.w	r1, [r3], #1
 8013bfa:	e7f9      	b.n	8013bf0 <memset+0x4>

08013bfc <__errno>:
 8013bfc:	4b01      	ldr	r3, [pc, #4]	@ (8013c04 <__errno+0x8>)
 8013bfe:	6818      	ldr	r0, [r3, #0]
 8013c00:	4770      	bx	lr
 8013c02:	bf00      	nop
 8013c04:	24000034 	.word	0x24000034

08013c08 <__libc_init_array>:
 8013c08:	b570      	push	{r4, r5, r6, lr}
 8013c0a:	4d0d      	ldr	r5, [pc, #52]	@ (8013c40 <__libc_init_array+0x38>)
 8013c0c:	4c0d      	ldr	r4, [pc, #52]	@ (8013c44 <__libc_init_array+0x3c>)
 8013c0e:	1b64      	subs	r4, r4, r5
 8013c10:	10a4      	asrs	r4, r4, #2
 8013c12:	2600      	movs	r6, #0
 8013c14:	42a6      	cmp	r6, r4
 8013c16:	d109      	bne.n	8013c2c <__libc_init_array+0x24>
 8013c18:	4d0b      	ldr	r5, [pc, #44]	@ (8013c48 <__libc_init_array+0x40>)
 8013c1a:	4c0c      	ldr	r4, [pc, #48]	@ (8013c4c <__libc_init_array+0x44>)
 8013c1c:	f000 fc64 	bl	80144e8 <_init>
 8013c20:	1b64      	subs	r4, r4, r5
 8013c22:	10a4      	asrs	r4, r4, #2
 8013c24:	2600      	movs	r6, #0
 8013c26:	42a6      	cmp	r6, r4
 8013c28:	d105      	bne.n	8013c36 <__libc_init_array+0x2e>
 8013c2a:	bd70      	pop	{r4, r5, r6, pc}
 8013c2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8013c30:	4798      	blx	r3
 8013c32:	3601      	adds	r6, #1
 8013c34:	e7ee      	b.n	8013c14 <__libc_init_array+0xc>
 8013c36:	f855 3b04 	ldr.w	r3, [r5], #4
 8013c3a:	4798      	blx	r3
 8013c3c:	3601      	adds	r6, #1
 8013c3e:	e7f2      	b.n	8013c26 <__libc_init_array+0x1e>
 8013c40:	08014a1c 	.word	0x08014a1c
 8013c44:	08014a1c 	.word	0x08014a1c
 8013c48:	08014a1c 	.word	0x08014a1c
 8013c4c:	08014a20 	.word	0x08014a20

08013c50 <__retarget_lock_acquire_recursive>:
 8013c50:	4770      	bx	lr

08013c52 <__retarget_lock_release_recursive>:
 8013c52:	4770      	bx	lr

08013c54 <memcpy>:
 8013c54:	440a      	add	r2, r1
 8013c56:	4291      	cmp	r1, r2
 8013c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8013c5c:	d100      	bne.n	8013c60 <memcpy+0xc>
 8013c5e:	4770      	bx	lr
 8013c60:	b510      	push	{r4, lr}
 8013c62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013c66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013c6a:	4291      	cmp	r1, r2
 8013c6c:	d1f9      	bne.n	8013c62 <memcpy+0xe>
 8013c6e:	bd10      	pop	{r4, pc}

08013c70 <_free_r>:
 8013c70:	b538      	push	{r3, r4, r5, lr}
 8013c72:	4605      	mov	r5, r0
 8013c74:	2900      	cmp	r1, #0
 8013c76:	d041      	beq.n	8013cfc <_free_r+0x8c>
 8013c78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013c7c:	1f0c      	subs	r4, r1, #4
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	bfb8      	it	lt
 8013c82:	18e4      	addlt	r4, r4, r3
 8013c84:	f000 f8e0 	bl	8013e48 <__malloc_lock>
 8013c88:	4a1d      	ldr	r2, [pc, #116]	@ (8013d00 <_free_r+0x90>)
 8013c8a:	6813      	ldr	r3, [r2, #0]
 8013c8c:	b933      	cbnz	r3, 8013c9c <_free_r+0x2c>
 8013c8e:	6063      	str	r3, [r4, #4]
 8013c90:	6014      	str	r4, [r2, #0]
 8013c92:	4628      	mov	r0, r5
 8013c94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013c98:	f000 b8dc 	b.w	8013e54 <__malloc_unlock>
 8013c9c:	42a3      	cmp	r3, r4
 8013c9e:	d908      	bls.n	8013cb2 <_free_r+0x42>
 8013ca0:	6820      	ldr	r0, [r4, #0]
 8013ca2:	1821      	adds	r1, r4, r0
 8013ca4:	428b      	cmp	r3, r1
 8013ca6:	bf01      	itttt	eq
 8013ca8:	6819      	ldreq	r1, [r3, #0]
 8013caa:	685b      	ldreq	r3, [r3, #4]
 8013cac:	1809      	addeq	r1, r1, r0
 8013cae:	6021      	streq	r1, [r4, #0]
 8013cb0:	e7ed      	b.n	8013c8e <_free_r+0x1e>
 8013cb2:	461a      	mov	r2, r3
 8013cb4:	685b      	ldr	r3, [r3, #4]
 8013cb6:	b10b      	cbz	r3, 8013cbc <_free_r+0x4c>
 8013cb8:	42a3      	cmp	r3, r4
 8013cba:	d9fa      	bls.n	8013cb2 <_free_r+0x42>
 8013cbc:	6811      	ldr	r1, [r2, #0]
 8013cbe:	1850      	adds	r0, r2, r1
 8013cc0:	42a0      	cmp	r0, r4
 8013cc2:	d10b      	bne.n	8013cdc <_free_r+0x6c>
 8013cc4:	6820      	ldr	r0, [r4, #0]
 8013cc6:	4401      	add	r1, r0
 8013cc8:	1850      	adds	r0, r2, r1
 8013cca:	4283      	cmp	r3, r0
 8013ccc:	6011      	str	r1, [r2, #0]
 8013cce:	d1e0      	bne.n	8013c92 <_free_r+0x22>
 8013cd0:	6818      	ldr	r0, [r3, #0]
 8013cd2:	685b      	ldr	r3, [r3, #4]
 8013cd4:	6053      	str	r3, [r2, #4]
 8013cd6:	4408      	add	r0, r1
 8013cd8:	6010      	str	r0, [r2, #0]
 8013cda:	e7da      	b.n	8013c92 <_free_r+0x22>
 8013cdc:	d902      	bls.n	8013ce4 <_free_r+0x74>
 8013cde:	230c      	movs	r3, #12
 8013ce0:	602b      	str	r3, [r5, #0]
 8013ce2:	e7d6      	b.n	8013c92 <_free_r+0x22>
 8013ce4:	6820      	ldr	r0, [r4, #0]
 8013ce6:	1821      	adds	r1, r4, r0
 8013ce8:	428b      	cmp	r3, r1
 8013cea:	bf04      	itt	eq
 8013cec:	6819      	ldreq	r1, [r3, #0]
 8013cee:	685b      	ldreq	r3, [r3, #4]
 8013cf0:	6063      	str	r3, [r4, #4]
 8013cf2:	bf04      	itt	eq
 8013cf4:	1809      	addeq	r1, r1, r0
 8013cf6:	6021      	streq	r1, [r4, #0]
 8013cf8:	6054      	str	r4, [r2, #4]
 8013cfa:	e7ca      	b.n	8013c92 <_free_r+0x22>
 8013cfc:	bd38      	pop	{r3, r4, r5, pc}
 8013cfe:	bf00      	nop
 8013d00:	24000ac0 	.word	0x24000ac0

08013d04 <sbrk_aligned>:
 8013d04:	b570      	push	{r4, r5, r6, lr}
 8013d06:	4e0f      	ldr	r6, [pc, #60]	@ (8013d44 <sbrk_aligned+0x40>)
 8013d08:	460c      	mov	r4, r1
 8013d0a:	6831      	ldr	r1, [r6, #0]
 8013d0c:	4605      	mov	r5, r0
 8013d0e:	b911      	cbnz	r1, 8013d16 <sbrk_aligned+0x12>
 8013d10:	f000 fba4 	bl	801445c <_sbrk_r>
 8013d14:	6030      	str	r0, [r6, #0]
 8013d16:	4621      	mov	r1, r4
 8013d18:	4628      	mov	r0, r5
 8013d1a:	f000 fb9f 	bl	801445c <_sbrk_r>
 8013d1e:	1c43      	adds	r3, r0, #1
 8013d20:	d103      	bne.n	8013d2a <sbrk_aligned+0x26>
 8013d22:	f04f 34ff 	mov.w	r4, #4294967295
 8013d26:	4620      	mov	r0, r4
 8013d28:	bd70      	pop	{r4, r5, r6, pc}
 8013d2a:	1cc4      	adds	r4, r0, #3
 8013d2c:	f024 0403 	bic.w	r4, r4, #3
 8013d30:	42a0      	cmp	r0, r4
 8013d32:	d0f8      	beq.n	8013d26 <sbrk_aligned+0x22>
 8013d34:	1a21      	subs	r1, r4, r0
 8013d36:	4628      	mov	r0, r5
 8013d38:	f000 fb90 	bl	801445c <_sbrk_r>
 8013d3c:	3001      	adds	r0, #1
 8013d3e:	d1f2      	bne.n	8013d26 <sbrk_aligned+0x22>
 8013d40:	e7ef      	b.n	8013d22 <sbrk_aligned+0x1e>
 8013d42:	bf00      	nop
 8013d44:	24000abc 	.word	0x24000abc

08013d48 <_malloc_r>:
 8013d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013d4c:	1ccd      	adds	r5, r1, #3
 8013d4e:	f025 0503 	bic.w	r5, r5, #3
 8013d52:	3508      	adds	r5, #8
 8013d54:	2d0c      	cmp	r5, #12
 8013d56:	bf38      	it	cc
 8013d58:	250c      	movcc	r5, #12
 8013d5a:	2d00      	cmp	r5, #0
 8013d5c:	4606      	mov	r6, r0
 8013d5e:	db01      	blt.n	8013d64 <_malloc_r+0x1c>
 8013d60:	42a9      	cmp	r1, r5
 8013d62:	d904      	bls.n	8013d6e <_malloc_r+0x26>
 8013d64:	230c      	movs	r3, #12
 8013d66:	6033      	str	r3, [r6, #0]
 8013d68:	2000      	movs	r0, #0
 8013d6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013e44 <_malloc_r+0xfc>
 8013d72:	f000 f869 	bl	8013e48 <__malloc_lock>
 8013d76:	f8d8 3000 	ldr.w	r3, [r8]
 8013d7a:	461c      	mov	r4, r3
 8013d7c:	bb44      	cbnz	r4, 8013dd0 <_malloc_r+0x88>
 8013d7e:	4629      	mov	r1, r5
 8013d80:	4630      	mov	r0, r6
 8013d82:	f7ff ffbf 	bl	8013d04 <sbrk_aligned>
 8013d86:	1c43      	adds	r3, r0, #1
 8013d88:	4604      	mov	r4, r0
 8013d8a:	d158      	bne.n	8013e3e <_malloc_r+0xf6>
 8013d8c:	f8d8 4000 	ldr.w	r4, [r8]
 8013d90:	4627      	mov	r7, r4
 8013d92:	2f00      	cmp	r7, #0
 8013d94:	d143      	bne.n	8013e1e <_malloc_r+0xd6>
 8013d96:	2c00      	cmp	r4, #0
 8013d98:	d04b      	beq.n	8013e32 <_malloc_r+0xea>
 8013d9a:	6823      	ldr	r3, [r4, #0]
 8013d9c:	4639      	mov	r1, r7
 8013d9e:	4630      	mov	r0, r6
 8013da0:	eb04 0903 	add.w	r9, r4, r3
 8013da4:	f000 fb5a 	bl	801445c <_sbrk_r>
 8013da8:	4581      	cmp	r9, r0
 8013daa:	d142      	bne.n	8013e32 <_malloc_r+0xea>
 8013dac:	6821      	ldr	r1, [r4, #0]
 8013dae:	1a6d      	subs	r5, r5, r1
 8013db0:	4629      	mov	r1, r5
 8013db2:	4630      	mov	r0, r6
 8013db4:	f7ff ffa6 	bl	8013d04 <sbrk_aligned>
 8013db8:	3001      	adds	r0, #1
 8013dba:	d03a      	beq.n	8013e32 <_malloc_r+0xea>
 8013dbc:	6823      	ldr	r3, [r4, #0]
 8013dbe:	442b      	add	r3, r5
 8013dc0:	6023      	str	r3, [r4, #0]
 8013dc2:	f8d8 3000 	ldr.w	r3, [r8]
 8013dc6:	685a      	ldr	r2, [r3, #4]
 8013dc8:	bb62      	cbnz	r2, 8013e24 <_malloc_r+0xdc>
 8013dca:	f8c8 7000 	str.w	r7, [r8]
 8013dce:	e00f      	b.n	8013df0 <_malloc_r+0xa8>
 8013dd0:	6822      	ldr	r2, [r4, #0]
 8013dd2:	1b52      	subs	r2, r2, r5
 8013dd4:	d420      	bmi.n	8013e18 <_malloc_r+0xd0>
 8013dd6:	2a0b      	cmp	r2, #11
 8013dd8:	d917      	bls.n	8013e0a <_malloc_r+0xc2>
 8013dda:	1961      	adds	r1, r4, r5
 8013ddc:	42a3      	cmp	r3, r4
 8013dde:	6025      	str	r5, [r4, #0]
 8013de0:	bf18      	it	ne
 8013de2:	6059      	strne	r1, [r3, #4]
 8013de4:	6863      	ldr	r3, [r4, #4]
 8013de6:	bf08      	it	eq
 8013de8:	f8c8 1000 	streq.w	r1, [r8]
 8013dec:	5162      	str	r2, [r4, r5]
 8013dee:	604b      	str	r3, [r1, #4]
 8013df0:	4630      	mov	r0, r6
 8013df2:	f000 f82f 	bl	8013e54 <__malloc_unlock>
 8013df6:	f104 000b 	add.w	r0, r4, #11
 8013dfa:	1d23      	adds	r3, r4, #4
 8013dfc:	f020 0007 	bic.w	r0, r0, #7
 8013e00:	1ac2      	subs	r2, r0, r3
 8013e02:	bf1c      	itt	ne
 8013e04:	1a1b      	subne	r3, r3, r0
 8013e06:	50a3      	strne	r3, [r4, r2]
 8013e08:	e7af      	b.n	8013d6a <_malloc_r+0x22>
 8013e0a:	6862      	ldr	r2, [r4, #4]
 8013e0c:	42a3      	cmp	r3, r4
 8013e0e:	bf0c      	ite	eq
 8013e10:	f8c8 2000 	streq.w	r2, [r8]
 8013e14:	605a      	strne	r2, [r3, #4]
 8013e16:	e7eb      	b.n	8013df0 <_malloc_r+0xa8>
 8013e18:	4623      	mov	r3, r4
 8013e1a:	6864      	ldr	r4, [r4, #4]
 8013e1c:	e7ae      	b.n	8013d7c <_malloc_r+0x34>
 8013e1e:	463c      	mov	r4, r7
 8013e20:	687f      	ldr	r7, [r7, #4]
 8013e22:	e7b6      	b.n	8013d92 <_malloc_r+0x4a>
 8013e24:	461a      	mov	r2, r3
 8013e26:	685b      	ldr	r3, [r3, #4]
 8013e28:	42a3      	cmp	r3, r4
 8013e2a:	d1fb      	bne.n	8013e24 <_malloc_r+0xdc>
 8013e2c:	2300      	movs	r3, #0
 8013e2e:	6053      	str	r3, [r2, #4]
 8013e30:	e7de      	b.n	8013df0 <_malloc_r+0xa8>
 8013e32:	230c      	movs	r3, #12
 8013e34:	6033      	str	r3, [r6, #0]
 8013e36:	4630      	mov	r0, r6
 8013e38:	f000 f80c 	bl	8013e54 <__malloc_unlock>
 8013e3c:	e794      	b.n	8013d68 <_malloc_r+0x20>
 8013e3e:	6005      	str	r5, [r0, #0]
 8013e40:	e7d6      	b.n	8013df0 <_malloc_r+0xa8>
 8013e42:	bf00      	nop
 8013e44:	24000ac0 	.word	0x24000ac0

08013e48 <__malloc_lock>:
 8013e48:	4801      	ldr	r0, [pc, #4]	@ (8013e50 <__malloc_lock+0x8>)
 8013e4a:	f7ff bf01 	b.w	8013c50 <__retarget_lock_acquire_recursive>
 8013e4e:	bf00      	nop
 8013e50:	24000ab8 	.word	0x24000ab8

08013e54 <__malloc_unlock>:
 8013e54:	4801      	ldr	r0, [pc, #4]	@ (8013e5c <__malloc_unlock+0x8>)
 8013e56:	f7ff befc 	b.w	8013c52 <__retarget_lock_release_recursive>
 8013e5a:	bf00      	nop
 8013e5c:	24000ab8 	.word	0x24000ab8

08013e60 <__ssputs_r>:
 8013e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e64:	688e      	ldr	r6, [r1, #8]
 8013e66:	461f      	mov	r7, r3
 8013e68:	42be      	cmp	r6, r7
 8013e6a:	680b      	ldr	r3, [r1, #0]
 8013e6c:	4682      	mov	sl, r0
 8013e6e:	460c      	mov	r4, r1
 8013e70:	4690      	mov	r8, r2
 8013e72:	d82d      	bhi.n	8013ed0 <__ssputs_r+0x70>
 8013e74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013e78:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013e7c:	d026      	beq.n	8013ecc <__ssputs_r+0x6c>
 8013e7e:	6965      	ldr	r5, [r4, #20]
 8013e80:	6909      	ldr	r1, [r1, #16]
 8013e82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013e86:	eba3 0901 	sub.w	r9, r3, r1
 8013e8a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013e8e:	1c7b      	adds	r3, r7, #1
 8013e90:	444b      	add	r3, r9
 8013e92:	106d      	asrs	r5, r5, #1
 8013e94:	429d      	cmp	r5, r3
 8013e96:	bf38      	it	cc
 8013e98:	461d      	movcc	r5, r3
 8013e9a:	0553      	lsls	r3, r2, #21
 8013e9c:	d527      	bpl.n	8013eee <__ssputs_r+0x8e>
 8013e9e:	4629      	mov	r1, r5
 8013ea0:	f7ff ff52 	bl	8013d48 <_malloc_r>
 8013ea4:	4606      	mov	r6, r0
 8013ea6:	b360      	cbz	r0, 8013f02 <__ssputs_r+0xa2>
 8013ea8:	6921      	ldr	r1, [r4, #16]
 8013eaa:	464a      	mov	r2, r9
 8013eac:	f7ff fed2 	bl	8013c54 <memcpy>
 8013eb0:	89a3      	ldrh	r3, [r4, #12]
 8013eb2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8013eb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013eba:	81a3      	strh	r3, [r4, #12]
 8013ebc:	6126      	str	r6, [r4, #16]
 8013ebe:	6165      	str	r5, [r4, #20]
 8013ec0:	444e      	add	r6, r9
 8013ec2:	eba5 0509 	sub.w	r5, r5, r9
 8013ec6:	6026      	str	r6, [r4, #0]
 8013ec8:	60a5      	str	r5, [r4, #8]
 8013eca:	463e      	mov	r6, r7
 8013ecc:	42be      	cmp	r6, r7
 8013ece:	d900      	bls.n	8013ed2 <__ssputs_r+0x72>
 8013ed0:	463e      	mov	r6, r7
 8013ed2:	6820      	ldr	r0, [r4, #0]
 8013ed4:	4632      	mov	r2, r6
 8013ed6:	4641      	mov	r1, r8
 8013ed8:	f000 faa6 	bl	8014428 <memmove>
 8013edc:	68a3      	ldr	r3, [r4, #8]
 8013ede:	1b9b      	subs	r3, r3, r6
 8013ee0:	60a3      	str	r3, [r4, #8]
 8013ee2:	6823      	ldr	r3, [r4, #0]
 8013ee4:	4433      	add	r3, r6
 8013ee6:	6023      	str	r3, [r4, #0]
 8013ee8:	2000      	movs	r0, #0
 8013eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013eee:	462a      	mov	r2, r5
 8013ef0:	f000 fac4 	bl	801447c <_realloc_r>
 8013ef4:	4606      	mov	r6, r0
 8013ef6:	2800      	cmp	r0, #0
 8013ef8:	d1e0      	bne.n	8013ebc <__ssputs_r+0x5c>
 8013efa:	6921      	ldr	r1, [r4, #16]
 8013efc:	4650      	mov	r0, sl
 8013efe:	f7ff feb7 	bl	8013c70 <_free_r>
 8013f02:	230c      	movs	r3, #12
 8013f04:	f8ca 3000 	str.w	r3, [sl]
 8013f08:	89a3      	ldrh	r3, [r4, #12]
 8013f0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013f0e:	81a3      	strh	r3, [r4, #12]
 8013f10:	f04f 30ff 	mov.w	r0, #4294967295
 8013f14:	e7e9      	b.n	8013eea <__ssputs_r+0x8a>
	...

08013f18 <_svfiprintf_r>:
 8013f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f1c:	4698      	mov	r8, r3
 8013f1e:	898b      	ldrh	r3, [r1, #12]
 8013f20:	061b      	lsls	r3, r3, #24
 8013f22:	b09d      	sub	sp, #116	@ 0x74
 8013f24:	4607      	mov	r7, r0
 8013f26:	460d      	mov	r5, r1
 8013f28:	4614      	mov	r4, r2
 8013f2a:	d510      	bpl.n	8013f4e <_svfiprintf_r+0x36>
 8013f2c:	690b      	ldr	r3, [r1, #16]
 8013f2e:	b973      	cbnz	r3, 8013f4e <_svfiprintf_r+0x36>
 8013f30:	2140      	movs	r1, #64	@ 0x40
 8013f32:	f7ff ff09 	bl	8013d48 <_malloc_r>
 8013f36:	6028      	str	r0, [r5, #0]
 8013f38:	6128      	str	r0, [r5, #16]
 8013f3a:	b930      	cbnz	r0, 8013f4a <_svfiprintf_r+0x32>
 8013f3c:	230c      	movs	r3, #12
 8013f3e:	603b      	str	r3, [r7, #0]
 8013f40:	f04f 30ff 	mov.w	r0, #4294967295
 8013f44:	b01d      	add	sp, #116	@ 0x74
 8013f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f4a:	2340      	movs	r3, #64	@ 0x40
 8013f4c:	616b      	str	r3, [r5, #20]
 8013f4e:	2300      	movs	r3, #0
 8013f50:	9309      	str	r3, [sp, #36]	@ 0x24
 8013f52:	2320      	movs	r3, #32
 8013f54:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013f58:	f8cd 800c 	str.w	r8, [sp, #12]
 8013f5c:	2330      	movs	r3, #48	@ 0x30
 8013f5e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80140fc <_svfiprintf_r+0x1e4>
 8013f62:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013f66:	f04f 0901 	mov.w	r9, #1
 8013f6a:	4623      	mov	r3, r4
 8013f6c:	469a      	mov	sl, r3
 8013f6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013f72:	b10a      	cbz	r2, 8013f78 <_svfiprintf_r+0x60>
 8013f74:	2a25      	cmp	r2, #37	@ 0x25
 8013f76:	d1f9      	bne.n	8013f6c <_svfiprintf_r+0x54>
 8013f78:	ebba 0b04 	subs.w	fp, sl, r4
 8013f7c:	d00b      	beq.n	8013f96 <_svfiprintf_r+0x7e>
 8013f7e:	465b      	mov	r3, fp
 8013f80:	4622      	mov	r2, r4
 8013f82:	4629      	mov	r1, r5
 8013f84:	4638      	mov	r0, r7
 8013f86:	f7ff ff6b 	bl	8013e60 <__ssputs_r>
 8013f8a:	3001      	adds	r0, #1
 8013f8c:	f000 80a7 	beq.w	80140de <_svfiprintf_r+0x1c6>
 8013f90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013f92:	445a      	add	r2, fp
 8013f94:	9209      	str	r2, [sp, #36]	@ 0x24
 8013f96:	f89a 3000 	ldrb.w	r3, [sl]
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	f000 809f 	beq.w	80140de <_svfiprintf_r+0x1c6>
 8013fa0:	2300      	movs	r3, #0
 8013fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8013fa6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013faa:	f10a 0a01 	add.w	sl, sl, #1
 8013fae:	9304      	str	r3, [sp, #16]
 8013fb0:	9307      	str	r3, [sp, #28]
 8013fb2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013fb6:	931a      	str	r3, [sp, #104]	@ 0x68
 8013fb8:	4654      	mov	r4, sl
 8013fba:	2205      	movs	r2, #5
 8013fbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013fc0:	484e      	ldr	r0, [pc, #312]	@ (80140fc <_svfiprintf_r+0x1e4>)
 8013fc2:	f7ec f9ad 	bl	8000320 <memchr>
 8013fc6:	9a04      	ldr	r2, [sp, #16]
 8013fc8:	b9d8      	cbnz	r0, 8014002 <_svfiprintf_r+0xea>
 8013fca:	06d0      	lsls	r0, r2, #27
 8013fcc:	bf44      	itt	mi
 8013fce:	2320      	movmi	r3, #32
 8013fd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013fd4:	0711      	lsls	r1, r2, #28
 8013fd6:	bf44      	itt	mi
 8013fd8:	232b      	movmi	r3, #43	@ 0x2b
 8013fda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013fde:	f89a 3000 	ldrb.w	r3, [sl]
 8013fe2:	2b2a      	cmp	r3, #42	@ 0x2a
 8013fe4:	d015      	beq.n	8014012 <_svfiprintf_r+0xfa>
 8013fe6:	9a07      	ldr	r2, [sp, #28]
 8013fe8:	4654      	mov	r4, sl
 8013fea:	2000      	movs	r0, #0
 8013fec:	f04f 0c0a 	mov.w	ip, #10
 8013ff0:	4621      	mov	r1, r4
 8013ff2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013ff6:	3b30      	subs	r3, #48	@ 0x30
 8013ff8:	2b09      	cmp	r3, #9
 8013ffa:	d94b      	bls.n	8014094 <_svfiprintf_r+0x17c>
 8013ffc:	b1b0      	cbz	r0, 801402c <_svfiprintf_r+0x114>
 8013ffe:	9207      	str	r2, [sp, #28]
 8014000:	e014      	b.n	801402c <_svfiprintf_r+0x114>
 8014002:	eba0 0308 	sub.w	r3, r0, r8
 8014006:	fa09 f303 	lsl.w	r3, r9, r3
 801400a:	4313      	orrs	r3, r2
 801400c:	9304      	str	r3, [sp, #16]
 801400e:	46a2      	mov	sl, r4
 8014010:	e7d2      	b.n	8013fb8 <_svfiprintf_r+0xa0>
 8014012:	9b03      	ldr	r3, [sp, #12]
 8014014:	1d19      	adds	r1, r3, #4
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	9103      	str	r1, [sp, #12]
 801401a:	2b00      	cmp	r3, #0
 801401c:	bfbb      	ittet	lt
 801401e:	425b      	neglt	r3, r3
 8014020:	f042 0202 	orrlt.w	r2, r2, #2
 8014024:	9307      	strge	r3, [sp, #28]
 8014026:	9307      	strlt	r3, [sp, #28]
 8014028:	bfb8      	it	lt
 801402a:	9204      	strlt	r2, [sp, #16]
 801402c:	7823      	ldrb	r3, [r4, #0]
 801402e:	2b2e      	cmp	r3, #46	@ 0x2e
 8014030:	d10a      	bne.n	8014048 <_svfiprintf_r+0x130>
 8014032:	7863      	ldrb	r3, [r4, #1]
 8014034:	2b2a      	cmp	r3, #42	@ 0x2a
 8014036:	d132      	bne.n	801409e <_svfiprintf_r+0x186>
 8014038:	9b03      	ldr	r3, [sp, #12]
 801403a:	1d1a      	adds	r2, r3, #4
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	9203      	str	r2, [sp, #12]
 8014040:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014044:	3402      	adds	r4, #2
 8014046:	9305      	str	r3, [sp, #20]
 8014048:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801410c <_svfiprintf_r+0x1f4>
 801404c:	7821      	ldrb	r1, [r4, #0]
 801404e:	2203      	movs	r2, #3
 8014050:	4650      	mov	r0, sl
 8014052:	f7ec f965 	bl	8000320 <memchr>
 8014056:	b138      	cbz	r0, 8014068 <_svfiprintf_r+0x150>
 8014058:	9b04      	ldr	r3, [sp, #16]
 801405a:	eba0 000a 	sub.w	r0, r0, sl
 801405e:	2240      	movs	r2, #64	@ 0x40
 8014060:	4082      	lsls	r2, r0
 8014062:	4313      	orrs	r3, r2
 8014064:	3401      	adds	r4, #1
 8014066:	9304      	str	r3, [sp, #16]
 8014068:	f814 1b01 	ldrb.w	r1, [r4], #1
 801406c:	4824      	ldr	r0, [pc, #144]	@ (8014100 <_svfiprintf_r+0x1e8>)
 801406e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014072:	2206      	movs	r2, #6
 8014074:	f7ec f954 	bl	8000320 <memchr>
 8014078:	2800      	cmp	r0, #0
 801407a:	d036      	beq.n	80140ea <_svfiprintf_r+0x1d2>
 801407c:	4b21      	ldr	r3, [pc, #132]	@ (8014104 <_svfiprintf_r+0x1ec>)
 801407e:	bb1b      	cbnz	r3, 80140c8 <_svfiprintf_r+0x1b0>
 8014080:	9b03      	ldr	r3, [sp, #12]
 8014082:	3307      	adds	r3, #7
 8014084:	f023 0307 	bic.w	r3, r3, #7
 8014088:	3308      	adds	r3, #8
 801408a:	9303      	str	r3, [sp, #12]
 801408c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801408e:	4433      	add	r3, r6
 8014090:	9309      	str	r3, [sp, #36]	@ 0x24
 8014092:	e76a      	b.n	8013f6a <_svfiprintf_r+0x52>
 8014094:	fb0c 3202 	mla	r2, ip, r2, r3
 8014098:	460c      	mov	r4, r1
 801409a:	2001      	movs	r0, #1
 801409c:	e7a8      	b.n	8013ff0 <_svfiprintf_r+0xd8>
 801409e:	2300      	movs	r3, #0
 80140a0:	3401      	adds	r4, #1
 80140a2:	9305      	str	r3, [sp, #20]
 80140a4:	4619      	mov	r1, r3
 80140a6:	f04f 0c0a 	mov.w	ip, #10
 80140aa:	4620      	mov	r0, r4
 80140ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80140b0:	3a30      	subs	r2, #48	@ 0x30
 80140b2:	2a09      	cmp	r2, #9
 80140b4:	d903      	bls.n	80140be <_svfiprintf_r+0x1a6>
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d0c6      	beq.n	8014048 <_svfiprintf_r+0x130>
 80140ba:	9105      	str	r1, [sp, #20]
 80140bc:	e7c4      	b.n	8014048 <_svfiprintf_r+0x130>
 80140be:	fb0c 2101 	mla	r1, ip, r1, r2
 80140c2:	4604      	mov	r4, r0
 80140c4:	2301      	movs	r3, #1
 80140c6:	e7f0      	b.n	80140aa <_svfiprintf_r+0x192>
 80140c8:	ab03      	add	r3, sp, #12
 80140ca:	9300      	str	r3, [sp, #0]
 80140cc:	462a      	mov	r2, r5
 80140ce:	4b0e      	ldr	r3, [pc, #56]	@ (8014108 <_svfiprintf_r+0x1f0>)
 80140d0:	a904      	add	r1, sp, #16
 80140d2:	4638      	mov	r0, r7
 80140d4:	f3af 8000 	nop.w
 80140d8:	1c42      	adds	r2, r0, #1
 80140da:	4606      	mov	r6, r0
 80140dc:	d1d6      	bne.n	801408c <_svfiprintf_r+0x174>
 80140de:	89ab      	ldrh	r3, [r5, #12]
 80140e0:	065b      	lsls	r3, r3, #25
 80140e2:	f53f af2d 	bmi.w	8013f40 <_svfiprintf_r+0x28>
 80140e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80140e8:	e72c      	b.n	8013f44 <_svfiprintf_r+0x2c>
 80140ea:	ab03      	add	r3, sp, #12
 80140ec:	9300      	str	r3, [sp, #0]
 80140ee:	462a      	mov	r2, r5
 80140f0:	4b05      	ldr	r3, [pc, #20]	@ (8014108 <_svfiprintf_r+0x1f0>)
 80140f2:	a904      	add	r1, sp, #16
 80140f4:	4638      	mov	r0, r7
 80140f6:	f000 f879 	bl	80141ec <_printf_i>
 80140fa:	e7ed      	b.n	80140d8 <_svfiprintf_r+0x1c0>
 80140fc:	080149e0 	.word	0x080149e0
 8014100:	080149ea 	.word	0x080149ea
 8014104:	00000000 	.word	0x00000000
 8014108:	08013e61 	.word	0x08013e61
 801410c:	080149e6 	.word	0x080149e6

08014110 <_printf_common>:
 8014110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014114:	4616      	mov	r6, r2
 8014116:	4698      	mov	r8, r3
 8014118:	688a      	ldr	r2, [r1, #8]
 801411a:	690b      	ldr	r3, [r1, #16]
 801411c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014120:	4293      	cmp	r3, r2
 8014122:	bfb8      	it	lt
 8014124:	4613      	movlt	r3, r2
 8014126:	6033      	str	r3, [r6, #0]
 8014128:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801412c:	4607      	mov	r7, r0
 801412e:	460c      	mov	r4, r1
 8014130:	b10a      	cbz	r2, 8014136 <_printf_common+0x26>
 8014132:	3301      	adds	r3, #1
 8014134:	6033      	str	r3, [r6, #0]
 8014136:	6823      	ldr	r3, [r4, #0]
 8014138:	0699      	lsls	r1, r3, #26
 801413a:	bf42      	ittt	mi
 801413c:	6833      	ldrmi	r3, [r6, #0]
 801413e:	3302      	addmi	r3, #2
 8014140:	6033      	strmi	r3, [r6, #0]
 8014142:	6825      	ldr	r5, [r4, #0]
 8014144:	f015 0506 	ands.w	r5, r5, #6
 8014148:	d106      	bne.n	8014158 <_printf_common+0x48>
 801414a:	f104 0a19 	add.w	sl, r4, #25
 801414e:	68e3      	ldr	r3, [r4, #12]
 8014150:	6832      	ldr	r2, [r6, #0]
 8014152:	1a9b      	subs	r3, r3, r2
 8014154:	42ab      	cmp	r3, r5
 8014156:	dc26      	bgt.n	80141a6 <_printf_common+0x96>
 8014158:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801415c:	6822      	ldr	r2, [r4, #0]
 801415e:	3b00      	subs	r3, #0
 8014160:	bf18      	it	ne
 8014162:	2301      	movne	r3, #1
 8014164:	0692      	lsls	r2, r2, #26
 8014166:	d42b      	bmi.n	80141c0 <_printf_common+0xb0>
 8014168:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801416c:	4641      	mov	r1, r8
 801416e:	4638      	mov	r0, r7
 8014170:	47c8      	blx	r9
 8014172:	3001      	adds	r0, #1
 8014174:	d01e      	beq.n	80141b4 <_printf_common+0xa4>
 8014176:	6823      	ldr	r3, [r4, #0]
 8014178:	6922      	ldr	r2, [r4, #16]
 801417a:	f003 0306 	and.w	r3, r3, #6
 801417e:	2b04      	cmp	r3, #4
 8014180:	bf02      	ittt	eq
 8014182:	68e5      	ldreq	r5, [r4, #12]
 8014184:	6833      	ldreq	r3, [r6, #0]
 8014186:	1aed      	subeq	r5, r5, r3
 8014188:	68a3      	ldr	r3, [r4, #8]
 801418a:	bf0c      	ite	eq
 801418c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014190:	2500      	movne	r5, #0
 8014192:	4293      	cmp	r3, r2
 8014194:	bfc4      	itt	gt
 8014196:	1a9b      	subgt	r3, r3, r2
 8014198:	18ed      	addgt	r5, r5, r3
 801419a:	2600      	movs	r6, #0
 801419c:	341a      	adds	r4, #26
 801419e:	42b5      	cmp	r5, r6
 80141a0:	d11a      	bne.n	80141d8 <_printf_common+0xc8>
 80141a2:	2000      	movs	r0, #0
 80141a4:	e008      	b.n	80141b8 <_printf_common+0xa8>
 80141a6:	2301      	movs	r3, #1
 80141a8:	4652      	mov	r2, sl
 80141aa:	4641      	mov	r1, r8
 80141ac:	4638      	mov	r0, r7
 80141ae:	47c8      	blx	r9
 80141b0:	3001      	adds	r0, #1
 80141b2:	d103      	bne.n	80141bc <_printf_common+0xac>
 80141b4:	f04f 30ff 	mov.w	r0, #4294967295
 80141b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80141bc:	3501      	adds	r5, #1
 80141be:	e7c6      	b.n	801414e <_printf_common+0x3e>
 80141c0:	18e1      	adds	r1, r4, r3
 80141c2:	1c5a      	adds	r2, r3, #1
 80141c4:	2030      	movs	r0, #48	@ 0x30
 80141c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80141ca:	4422      	add	r2, r4
 80141cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80141d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80141d4:	3302      	adds	r3, #2
 80141d6:	e7c7      	b.n	8014168 <_printf_common+0x58>
 80141d8:	2301      	movs	r3, #1
 80141da:	4622      	mov	r2, r4
 80141dc:	4641      	mov	r1, r8
 80141de:	4638      	mov	r0, r7
 80141e0:	47c8      	blx	r9
 80141e2:	3001      	adds	r0, #1
 80141e4:	d0e6      	beq.n	80141b4 <_printf_common+0xa4>
 80141e6:	3601      	adds	r6, #1
 80141e8:	e7d9      	b.n	801419e <_printf_common+0x8e>
	...

080141ec <_printf_i>:
 80141ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80141f0:	7e0f      	ldrb	r7, [r1, #24]
 80141f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80141f4:	2f78      	cmp	r7, #120	@ 0x78
 80141f6:	4691      	mov	r9, r2
 80141f8:	4680      	mov	r8, r0
 80141fa:	460c      	mov	r4, r1
 80141fc:	469a      	mov	sl, r3
 80141fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8014202:	d807      	bhi.n	8014214 <_printf_i+0x28>
 8014204:	2f62      	cmp	r7, #98	@ 0x62
 8014206:	d80a      	bhi.n	801421e <_printf_i+0x32>
 8014208:	2f00      	cmp	r7, #0
 801420a:	f000 80d1 	beq.w	80143b0 <_printf_i+0x1c4>
 801420e:	2f58      	cmp	r7, #88	@ 0x58
 8014210:	f000 80b8 	beq.w	8014384 <_printf_i+0x198>
 8014214:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014218:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801421c:	e03a      	b.n	8014294 <_printf_i+0xa8>
 801421e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8014222:	2b15      	cmp	r3, #21
 8014224:	d8f6      	bhi.n	8014214 <_printf_i+0x28>
 8014226:	a101      	add	r1, pc, #4	@ (adr r1, 801422c <_printf_i+0x40>)
 8014228:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801422c:	08014285 	.word	0x08014285
 8014230:	08014299 	.word	0x08014299
 8014234:	08014215 	.word	0x08014215
 8014238:	08014215 	.word	0x08014215
 801423c:	08014215 	.word	0x08014215
 8014240:	08014215 	.word	0x08014215
 8014244:	08014299 	.word	0x08014299
 8014248:	08014215 	.word	0x08014215
 801424c:	08014215 	.word	0x08014215
 8014250:	08014215 	.word	0x08014215
 8014254:	08014215 	.word	0x08014215
 8014258:	08014397 	.word	0x08014397
 801425c:	080142c3 	.word	0x080142c3
 8014260:	08014351 	.word	0x08014351
 8014264:	08014215 	.word	0x08014215
 8014268:	08014215 	.word	0x08014215
 801426c:	080143b9 	.word	0x080143b9
 8014270:	08014215 	.word	0x08014215
 8014274:	080142c3 	.word	0x080142c3
 8014278:	08014215 	.word	0x08014215
 801427c:	08014215 	.word	0x08014215
 8014280:	08014359 	.word	0x08014359
 8014284:	6833      	ldr	r3, [r6, #0]
 8014286:	1d1a      	adds	r2, r3, #4
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	6032      	str	r2, [r6, #0]
 801428c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014290:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014294:	2301      	movs	r3, #1
 8014296:	e09c      	b.n	80143d2 <_printf_i+0x1e6>
 8014298:	6833      	ldr	r3, [r6, #0]
 801429a:	6820      	ldr	r0, [r4, #0]
 801429c:	1d19      	adds	r1, r3, #4
 801429e:	6031      	str	r1, [r6, #0]
 80142a0:	0606      	lsls	r6, r0, #24
 80142a2:	d501      	bpl.n	80142a8 <_printf_i+0xbc>
 80142a4:	681d      	ldr	r5, [r3, #0]
 80142a6:	e003      	b.n	80142b0 <_printf_i+0xc4>
 80142a8:	0645      	lsls	r5, r0, #25
 80142aa:	d5fb      	bpl.n	80142a4 <_printf_i+0xb8>
 80142ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80142b0:	2d00      	cmp	r5, #0
 80142b2:	da03      	bge.n	80142bc <_printf_i+0xd0>
 80142b4:	232d      	movs	r3, #45	@ 0x2d
 80142b6:	426d      	negs	r5, r5
 80142b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80142bc:	4858      	ldr	r0, [pc, #352]	@ (8014420 <_printf_i+0x234>)
 80142be:	230a      	movs	r3, #10
 80142c0:	e011      	b.n	80142e6 <_printf_i+0xfa>
 80142c2:	6821      	ldr	r1, [r4, #0]
 80142c4:	6833      	ldr	r3, [r6, #0]
 80142c6:	0608      	lsls	r0, r1, #24
 80142c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80142cc:	d402      	bmi.n	80142d4 <_printf_i+0xe8>
 80142ce:	0649      	lsls	r1, r1, #25
 80142d0:	bf48      	it	mi
 80142d2:	b2ad      	uxthmi	r5, r5
 80142d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80142d6:	4852      	ldr	r0, [pc, #328]	@ (8014420 <_printf_i+0x234>)
 80142d8:	6033      	str	r3, [r6, #0]
 80142da:	bf14      	ite	ne
 80142dc:	230a      	movne	r3, #10
 80142de:	2308      	moveq	r3, #8
 80142e0:	2100      	movs	r1, #0
 80142e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80142e6:	6866      	ldr	r6, [r4, #4]
 80142e8:	60a6      	str	r6, [r4, #8]
 80142ea:	2e00      	cmp	r6, #0
 80142ec:	db05      	blt.n	80142fa <_printf_i+0x10e>
 80142ee:	6821      	ldr	r1, [r4, #0]
 80142f0:	432e      	orrs	r6, r5
 80142f2:	f021 0104 	bic.w	r1, r1, #4
 80142f6:	6021      	str	r1, [r4, #0]
 80142f8:	d04b      	beq.n	8014392 <_printf_i+0x1a6>
 80142fa:	4616      	mov	r6, r2
 80142fc:	fbb5 f1f3 	udiv	r1, r5, r3
 8014300:	fb03 5711 	mls	r7, r3, r1, r5
 8014304:	5dc7      	ldrb	r7, [r0, r7]
 8014306:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801430a:	462f      	mov	r7, r5
 801430c:	42bb      	cmp	r3, r7
 801430e:	460d      	mov	r5, r1
 8014310:	d9f4      	bls.n	80142fc <_printf_i+0x110>
 8014312:	2b08      	cmp	r3, #8
 8014314:	d10b      	bne.n	801432e <_printf_i+0x142>
 8014316:	6823      	ldr	r3, [r4, #0]
 8014318:	07df      	lsls	r7, r3, #31
 801431a:	d508      	bpl.n	801432e <_printf_i+0x142>
 801431c:	6923      	ldr	r3, [r4, #16]
 801431e:	6861      	ldr	r1, [r4, #4]
 8014320:	4299      	cmp	r1, r3
 8014322:	bfde      	ittt	le
 8014324:	2330      	movle	r3, #48	@ 0x30
 8014326:	f806 3c01 	strble.w	r3, [r6, #-1]
 801432a:	f106 36ff 	addle.w	r6, r6, #4294967295
 801432e:	1b92      	subs	r2, r2, r6
 8014330:	6122      	str	r2, [r4, #16]
 8014332:	f8cd a000 	str.w	sl, [sp]
 8014336:	464b      	mov	r3, r9
 8014338:	aa03      	add	r2, sp, #12
 801433a:	4621      	mov	r1, r4
 801433c:	4640      	mov	r0, r8
 801433e:	f7ff fee7 	bl	8014110 <_printf_common>
 8014342:	3001      	adds	r0, #1
 8014344:	d14a      	bne.n	80143dc <_printf_i+0x1f0>
 8014346:	f04f 30ff 	mov.w	r0, #4294967295
 801434a:	b004      	add	sp, #16
 801434c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014350:	6823      	ldr	r3, [r4, #0]
 8014352:	f043 0320 	orr.w	r3, r3, #32
 8014356:	6023      	str	r3, [r4, #0]
 8014358:	4832      	ldr	r0, [pc, #200]	@ (8014424 <_printf_i+0x238>)
 801435a:	2778      	movs	r7, #120	@ 0x78
 801435c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8014360:	6823      	ldr	r3, [r4, #0]
 8014362:	6831      	ldr	r1, [r6, #0]
 8014364:	061f      	lsls	r7, r3, #24
 8014366:	f851 5b04 	ldr.w	r5, [r1], #4
 801436a:	d402      	bmi.n	8014372 <_printf_i+0x186>
 801436c:	065f      	lsls	r7, r3, #25
 801436e:	bf48      	it	mi
 8014370:	b2ad      	uxthmi	r5, r5
 8014372:	6031      	str	r1, [r6, #0]
 8014374:	07d9      	lsls	r1, r3, #31
 8014376:	bf44      	itt	mi
 8014378:	f043 0320 	orrmi.w	r3, r3, #32
 801437c:	6023      	strmi	r3, [r4, #0]
 801437e:	b11d      	cbz	r5, 8014388 <_printf_i+0x19c>
 8014380:	2310      	movs	r3, #16
 8014382:	e7ad      	b.n	80142e0 <_printf_i+0xf4>
 8014384:	4826      	ldr	r0, [pc, #152]	@ (8014420 <_printf_i+0x234>)
 8014386:	e7e9      	b.n	801435c <_printf_i+0x170>
 8014388:	6823      	ldr	r3, [r4, #0]
 801438a:	f023 0320 	bic.w	r3, r3, #32
 801438e:	6023      	str	r3, [r4, #0]
 8014390:	e7f6      	b.n	8014380 <_printf_i+0x194>
 8014392:	4616      	mov	r6, r2
 8014394:	e7bd      	b.n	8014312 <_printf_i+0x126>
 8014396:	6833      	ldr	r3, [r6, #0]
 8014398:	6825      	ldr	r5, [r4, #0]
 801439a:	6961      	ldr	r1, [r4, #20]
 801439c:	1d18      	adds	r0, r3, #4
 801439e:	6030      	str	r0, [r6, #0]
 80143a0:	062e      	lsls	r6, r5, #24
 80143a2:	681b      	ldr	r3, [r3, #0]
 80143a4:	d501      	bpl.n	80143aa <_printf_i+0x1be>
 80143a6:	6019      	str	r1, [r3, #0]
 80143a8:	e002      	b.n	80143b0 <_printf_i+0x1c4>
 80143aa:	0668      	lsls	r0, r5, #25
 80143ac:	d5fb      	bpl.n	80143a6 <_printf_i+0x1ba>
 80143ae:	8019      	strh	r1, [r3, #0]
 80143b0:	2300      	movs	r3, #0
 80143b2:	6123      	str	r3, [r4, #16]
 80143b4:	4616      	mov	r6, r2
 80143b6:	e7bc      	b.n	8014332 <_printf_i+0x146>
 80143b8:	6833      	ldr	r3, [r6, #0]
 80143ba:	1d1a      	adds	r2, r3, #4
 80143bc:	6032      	str	r2, [r6, #0]
 80143be:	681e      	ldr	r6, [r3, #0]
 80143c0:	6862      	ldr	r2, [r4, #4]
 80143c2:	2100      	movs	r1, #0
 80143c4:	4630      	mov	r0, r6
 80143c6:	f7eb ffab 	bl	8000320 <memchr>
 80143ca:	b108      	cbz	r0, 80143d0 <_printf_i+0x1e4>
 80143cc:	1b80      	subs	r0, r0, r6
 80143ce:	6060      	str	r0, [r4, #4]
 80143d0:	6863      	ldr	r3, [r4, #4]
 80143d2:	6123      	str	r3, [r4, #16]
 80143d4:	2300      	movs	r3, #0
 80143d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80143da:	e7aa      	b.n	8014332 <_printf_i+0x146>
 80143dc:	6923      	ldr	r3, [r4, #16]
 80143de:	4632      	mov	r2, r6
 80143e0:	4649      	mov	r1, r9
 80143e2:	4640      	mov	r0, r8
 80143e4:	47d0      	blx	sl
 80143e6:	3001      	adds	r0, #1
 80143e8:	d0ad      	beq.n	8014346 <_printf_i+0x15a>
 80143ea:	6823      	ldr	r3, [r4, #0]
 80143ec:	079b      	lsls	r3, r3, #30
 80143ee:	d413      	bmi.n	8014418 <_printf_i+0x22c>
 80143f0:	68e0      	ldr	r0, [r4, #12]
 80143f2:	9b03      	ldr	r3, [sp, #12]
 80143f4:	4298      	cmp	r0, r3
 80143f6:	bfb8      	it	lt
 80143f8:	4618      	movlt	r0, r3
 80143fa:	e7a6      	b.n	801434a <_printf_i+0x15e>
 80143fc:	2301      	movs	r3, #1
 80143fe:	4632      	mov	r2, r6
 8014400:	4649      	mov	r1, r9
 8014402:	4640      	mov	r0, r8
 8014404:	47d0      	blx	sl
 8014406:	3001      	adds	r0, #1
 8014408:	d09d      	beq.n	8014346 <_printf_i+0x15a>
 801440a:	3501      	adds	r5, #1
 801440c:	68e3      	ldr	r3, [r4, #12]
 801440e:	9903      	ldr	r1, [sp, #12]
 8014410:	1a5b      	subs	r3, r3, r1
 8014412:	42ab      	cmp	r3, r5
 8014414:	dcf2      	bgt.n	80143fc <_printf_i+0x210>
 8014416:	e7eb      	b.n	80143f0 <_printf_i+0x204>
 8014418:	2500      	movs	r5, #0
 801441a:	f104 0619 	add.w	r6, r4, #25
 801441e:	e7f5      	b.n	801440c <_printf_i+0x220>
 8014420:	080149f1 	.word	0x080149f1
 8014424:	08014a02 	.word	0x08014a02

08014428 <memmove>:
 8014428:	4288      	cmp	r0, r1
 801442a:	b510      	push	{r4, lr}
 801442c:	eb01 0402 	add.w	r4, r1, r2
 8014430:	d902      	bls.n	8014438 <memmove+0x10>
 8014432:	4284      	cmp	r4, r0
 8014434:	4623      	mov	r3, r4
 8014436:	d807      	bhi.n	8014448 <memmove+0x20>
 8014438:	1e43      	subs	r3, r0, #1
 801443a:	42a1      	cmp	r1, r4
 801443c:	d008      	beq.n	8014450 <memmove+0x28>
 801443e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014442:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014446:	e7f8      	b.n	801443a <memmove+0x12>
 8014448:	4402      	add	r2, r0
 801444a:	4601      	mov	r1, r0
 801444c:	428a      	cmp	r2, r1
 801444e:	d100      	bne.n	8014452 <memmove+0x2a>
 8014450:	bd10      	pop	{r4, pc}
 8014452:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014456:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801445a:	e7f7      	b.n	801444c <memmove+0x24>

0801445c <_sbrk_r>:
 801445c:	b538      	push	{r3, r4, r5, lr}
 801445e:	4d06      	ldr	r5, [pc, #24]	@ (8014478 <_sbrk_r+0x1c>)
 8014460:	2300      	movs	r3, #0
 8014462:	4604      	mov	r4, r0
 8014464:	4608      	mov	r0, r1
 8014466:	602b      	str	r3, [r5, #0]
 8014468:	f7ef f9fe 	bl	8003868 <_sbrk>
 801446c:	1c43      	adds	r3, r0, #1
 801446e:	d102      	bne.n	8014476 <_sbrk_r+0x1a>
 8014470:	682b      	ldr	r3, [r5, #0]
 8014472:	b103      	cbz	r3, 8014476 <_sbrk_r+0x1a>
 8014474:	6023      	str	r3, [r4, #0]
 8014476:	bd38      	pop	{r3, r4, r5, pc}
 8014478:	24000ab4 	.word	0x24000ab4

0801447c <_realloc_r>:
 801447c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014480:	4607      	mov	r7, r0
 8014482:	4614      	mov	r4, r2
 8014484:	460d      	mov	r5, r1
 8014486:	b921      	cbnz	r1, 8014492 <_realloc_r+0x16>
 8014488:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801448c:	4611      	mov	r1, r2
 801448e:	f7ff bc5b 	b.w	8013d48 <_malloc_r>
 8014492:	b92a      	cbnz	r2, 80144a0 <_realloc_r+0x24>
 8014494:	f7ff fbec 	bl	8013c70 <_free_r>
 8014498:	4625      	mov	r5, r4
 801449a:	4628      	mov	r0, r5
 801449c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144a0:	f000 f81a 	bl	80144d8 <_malloc_usable_size_r>
 80144a4:	4284      	cmp	r4, r0
 80144a6:	4606      	mov	r6, r0
 80144a8:	d802      	bhi.n	80144b0 <_realloc_r+0x34>
 80144aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80144ae:	d8f4      	bhi.n	801449a <_realloc_r+0x1e>
 80144b0:	4621      	mov	r1, r4
 80144b2:	4638      	mov	r0, r7
 80144b4:	f7ff fc48 	bl	8013d48 <_malloc_r>
 80144b8:	4680      	mov	r8, r0
 80144ba:	b908      	cbnz	r0, 80144c0 <_realloc_r+0x44>
 80144bc:	4645      	mov	r5, r8
 80144be:	e7ec      	b.n	801449a <_realloc_r+0x1e>
 80144c0:	42b4      	cmp	r4, r6
 80144c2:	4622      	mov	r2, r4
 80144c4:	4629      	mov	r1, r5
 80144c6:	bf28      	it	cs
 80144c8:	4632      	movcs	r2, r6
 80144ca:	f7ff fbc3 	bl	8013c54 <memcpy>
 80144ce:	4629      	mov	r1, r5
 80144d0:	4638      	mov	r0, r7
 80144d2:	f7ff fbcd 	bl	8013c70 <_free_r>
 80144d6:	e7f1      	b.n	80144bc <_realloc_r+0x40>

080144d8 <_malloc_usable_size_r>:
 80144d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80144dc:	1f18      	subs	r0, r3, #4
 80144de:	2b00      	cmp	r3, #0
 80144e0:	bfbc      	itt	lt
 80144e2:	580b      	ldrlt	r3, [r1, r0]
 80144e4:	18c0      	addlt	r0, r0, r3
 80144e6:	4770      	bx	lr

080144e8 <_init>:
 80144e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144ea:	bf00      	nop
 80144ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80144ee:	bc08      	pop	{r3}
 80144f0:	469e      	mov	lr, r3
 80144f2:	4770      	bx	lr

080144f4 <_fini>:
 80144f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144f6:	bf00      	nop
 80144f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80144fa:	bc08      	pop	{r3}
 80144fc:	469e      	mov	lr, r3
 80144fe:	4770      	bx	lr
