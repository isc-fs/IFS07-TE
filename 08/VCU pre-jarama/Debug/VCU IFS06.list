
VCU IFS06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000140f4  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000544  080143c4  080143c4  000153c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014908  08014908  00015908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014910  08014910  00015910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08014914  08014914  00015914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  24000000  08014918  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000a3c  24000084  0801499c  00016084  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000ac0  0801499c  00016ac0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00016084  2**0
                  CONTENTS, READONLY
 10 .debug_info   000289f5  00000000  00000000  000160b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000042aa  00000000  00000000  0003eaa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002050  00000000  00000000  00042d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001926  00000000  00000000  00044da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a513  00000000  00000000  000466ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002a0d4  00000000  00000000  00080be1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017da59  00000000  00000000  000aacb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0022870e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000092ac  00000000  00000000  00228754  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000084  00000000  00000000  00231a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000084 	.word	0x24000084
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080143ac 	.word	0x080143ac

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000088 	.word	0x24000088
 800030c:	080143ac 	.word	0x080143ac

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b988 	b.w	80006e8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	468e      	mov	lr, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	4688      	mov	r8, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d962      	bls.n	80004cc <__udivmoddi4+0xdc>
 8000406:	fab2 f682 	clz	r6, r2
 800040a:	b14e      	cbz	r6, 8000420 <__udivmoddi4+0x30>
 800040c:	f1c6 0320 	rsb	r3, r6, #32
 8000410:	fa01 f806 	lsl.w	r8, r1, r6
 8000414:	fa20 f303 	lsr.w	r3, r0, r3
 8000418:	40b7      	lsls	r7, r6
 800041a:	ea43 0808 	orr.w	r8, r3, r8
 800041e:	40b4      	lsls	r4, r6
 8000420:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000424:	fa1f fc87 	uxth.w	ip, r7
 8000428:	fbb8 f1fe 	udiv	r1, r8, lr
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fb01 f20c 	mul.w	r2, r1, ip
 800043a:	429a      	cmp	r2, r3
 800043c:	d909      	bls.n	8000452 <__udivmoddi4+0x62>
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	f101 30ff 	add.w	r0, r1, #4294967295
 8000444:	f080 80ea 	bcs.w	800061c <__udivmoddi4+0x22c>
 8000448:	429a      	cmp	r2, r3
 800044a:	f240 80e7 	bls.w	800061c <__udivmoddi4+0x22c>
 800044e:	3902      	subs	r1, #2
 8000450:	443b      	add	r3, r7
 8000452:	1a9a      	subs	r2, r3, r2
 8000454:	b2a3      	uxth	r3, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000462:	fb00 fc0c 	mul.w	ip, r0, ip
 8000466:	459c      	cmp	ip, r3
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x8e>
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000470:	f080 80d6 	bcs.w	8000620 <__udivmoddi4+0x230>
 8000474:	459c      	cmp	ip, r3
 8000476:	f240 80d3 	bls.w	8000620 <__udivmoddi4+0x230>
 800047a:	443b      	add	r3, r7
 800047c:	3802      	subs	r0, #2
 800047e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000482:	eba3 030c 	sub.w	r3, r3, ip
 8000486:	2100      	movs	r1, #0
 8000488:	b11d      	cbz	r5, 8000492 <__udivmoddi4+0xa2>
 800048a:	40f3      	lsrs	r3, r6
 800048c:	2200      	movs	r2, #0
 800048e:	e9c5 3200 	strd	r3, r2, [r5]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d905      	bls.n	80004a6 <__udivmoddi4+0xb6>
 800049a:	b10d      	cbz	r5, 80004a0 <__udivmoddi4+0xb0>
 800049c:	e9c5 0100 	strd	r0, r1, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	4608      	mov	r0, r1
 80004a4:	e7f5      	b.n	8000492 <__udivmoddi4+0xa2>
 80004a6:	fab3 f183 	clz	r1, r3
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d146      	bne.n	800053c <__udivmoddi4+0x14c>
 80004ae:	4573      	cmp	r3, lr
 80004b0:	d302      	bcc.n	80004b8 <__udivmoddi4+0xc8>
 80004b2:	4282      	cmp	r2, r0
 80004b4:	f200 8105 	bhi.w	80006c2 <__udivmoddi4+0x2d2>
 80004b8:	1a84      	subs	r4, r0, r2
 80004ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80004be:	2001      	movs	r0, #1
 80004c0:	4690      	mov	r8, r2
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d0e5      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004c6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ca:	e7e2      	b.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f000 8090 	beq.w	80005f2 <__udivmoddi4+0x202>
 80004d2:	fab2 f682 	clz	r6, r2
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	f040 80a4 	bne.w	8000624 <__udivmoddi4+0x234>
 80004dc:	1a8a      	subs	r2, r1, r2
 80004de:	0c03      	lsrs	r3, r0, #16
 80004e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e4:	b280      	uxth	r0, r0
 80004e6:	b2bc      	uxth	r4, r7
 80004e8:	2101      	movs	r1, #1
 80004ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80004f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004f6:	fb04 f20c 	mul.w	r2, r4, ip
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x11e>
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x11c>
 8000506:	429a      	cmp	r2, r3
 8000508:	f200 80e0 	bhi.w	80006cc <__udivmoddi4+0x2dc>
 800050c:	46c4      	mov	ip, r8
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	fbb3 f2fe 	udiv	r2, r3, lr
 8000514:	fb0e 3312 	mls	r3, lr, r2, r3
 8000518:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800051c:	fb02 f404 	mul.w	r4, r2, r4
 8000520:	429c      	cmp	r4, r3
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x144>
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	f102 30ff 	add.w	r0, r2, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x142>
 800052c:	429c      	cmp	r4, r3
 800052e:	f200 80ca 	bhi.w	80006c6 <__udivmoddi4+0x2d6>
 8000532:	4602      	mov	r2, r0
 8000534:	1b1b      	subs	r3, r3, r4
 8000536:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800053a:	e7a5      	b.n	8000488 <__udivmoddi4+0x98>
 800053c:	f1c1 0620 	rsb	r6, r1, #32
 8000540:	408b      	lsls	r3, r1
 8000542:	fa22 f706 	lsr.w	r7, r2, r6
 8000546:	431f      	orrs	r7, r3
 8000548:	fa0e f401 	lsl.w	r4, lr, r1
 800054c:	fa20 f306 	lsr.w	r3, r0, r6
 8000550:	fa2e fe06 	lsr.w	lr, lr, r6
 8000554:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000558:	4323      	orrs	r3, r4
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	fa1f fc87 	uxth.w	ip, r7
 8000562:	fbbe f0f9 	udiv	r0, lr, r9
 8000566:	0c1c      	lsrs	r4, r3, #16
 8000568:	fb09 ee10 	mls	lr, r9, r0, lr
 800056c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000570:	fb00 fe0c 	mul.w	lr, r0, ip
 8000574:	45a6      	cmp	lr, r4
 8000576:	fa02 f201 	lsl.w	r2, r2, r1
 800057a:	d909      	bls.n	8000590 <__udivmoddi4+0x1a0>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000582:	f080 809c 	bcs.w	80006be <__udivmoddi4+0x2ce>
 8000586:	45a6      	cmp	lr, r4
 8000588:	f240 8099 	bls.w	80006be <__udivmoddi4+0x2ce>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	eba4 040e 	sub.w	r4, r4, lr
 8000594:	fa1f fe83 	uxth.w	lr, r3
 8000598:	fbb4 f3f9 	udiv	r3, r4, r9
 800059c:	fb09 4413 	mls	r4, r9, r3, r4
 80005a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005a8:	45a4      	cmp	ip, r4
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x1ce>
 80005ac:	193c      	adds	r4, r7, r4
 80005ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80005b2:	f080 8082 	bcs.w	80006ba <__udivmoddi4+0x2ca>
 80005b6:	45a4      	cmp	ip, r4
 80005b8:	d97f      	bls.n	80006ba <__udivmoddi4+0x2ca>
 80005ba:	3b02      	subs	r3, #2
 80005bc:	443c      	add	r4, r7
 80005be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005c2:	eba4 040c 	sub.w	r4, r4, ip
 80005c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ca:	4564      	cmp	r4, ip
 80005cc:	4673      	mov	r3, lr
 80005ce:	46e1      	mov	r9, ip
 80005d0:	d362      	bcc.n	8000698 <__udivmoddi4+0x2a8>
 80005d2:	d05f      	beq.n	8000694 <__udivmoddi4+0x2a4>
 80005d4:	b15d      	cbz	r5, 80005ee <__udivmoddi4+0x1fe>
 80005d6:	ebb8 0203 	subs.w	r2, r8, r3
 80005da:	eb64 0409 	sbc.w	r4, r4, r9
 80005de:	fa04 f606 	lsl.w	r6, r4, r6
 80005e2:	fa22 f301 	lsr.w	r3, r2, r1
 80005e6:	431e      	orrs	r6, r3
 80005e8:	40cc      	lsrs	r4, r1
 80005ea:	e9c5 6400 	strd	r6, r4, [r5]
 80005ee:	2100      	movs	r1, #0
 80005f0:	e74f      	b.n	8000492 <__udivmoddi4+0xa2>
 80005f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005f6:	0c01      	lsrs	r1, r0, #16
 80005f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005fc:	b280      	uxth	r0, r0
 80005fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000602:	463b      	mov	r3, r7
 8000604:	4638      	mov	r0, r7
 8000606:	463c      	mov	r4, r7
 8000608:	46b8      	mov	r8, r7
 800060a:	46be      	mov	lr, r7
 800060c:	2620      	movs	r6, #32
 800060e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000612:	eba2 0208 	sub.w	r2, r2, r8
 8000616:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800061a:	e766      	b.n	80004ea <__udivmoddi4+0xfa>
 800061c:	4601      	mov	r1, r0
 800061e:	e718      	b.n	8000452 <__udivmoddi4+0x62>
 8000620:	4610      	mov	r0, r2
 8000622:	e72c      	b.n	800047e <__udivmoddi4+0x8e>
 8000624:	f1c6 0220 	rsb	r2, r6, #32
 8000628:	fa2e f302 	lsr.w	r3, lr, r2
 800062c:	40b7      	lsls	r7, r6
 800062e:	40b1      	lsls	r1, r6
 8000630:	fa20 f202 	lsr.w	r2, r0, r2
 8000634:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000638:	430a      	orrs	r2, r1
 800063a:	fbb3 f8fe 	udiv	r8, r3, lr
 800063e:	b2bc      	uxth	r4, r7
 8000640:	fb0e 3318 	mls	r3, lr, r8, r3
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800064a:	fb08 f904 	mul.w	r9, r8, r4
 800064e:	40b0      	lsls	r0, r6
 8000650:	4589      	cmp	r9, r1
 8000652:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000656:	b280      	uxth	r0, r0
 8000658:	d93e      	bls.n	80006d8 <__udivmoddi4+0x2e8>
 800065a:	1879      	adds	r1, r7, r1
 800065c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000660:	d201      	bcs.n	8000666 <__udivmoddi4+0x276>
 8000662:	4589      	cmp	r9, r1
 8000664:	d81f      	bhi.n	80006a6 <__udivmoddi4+0x2b6>
 8000666:	eba1 0109 	sub.w	r1, r1, r9
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	fb0e 1119 	mls	r1, lr, r9, r1
 8000676:	b292      	uxth	r2, r2
 8000678:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800067c:	4542      	cmp	r2, r8
 800067e:	d229      	bcs.n	80006d4 <__udivmoddi4+0x2e4>
 8000680:	18ba      	adds	r2, r7, r2
 8000682:	f109 31ff 	add.w	r1, r9, #4294967295
 8000686:	d2c4      	bcs.n	8000612 <__udivmoddi4+0x222>
 8000688:	4542      	cmp	r2, r8
 800068a:	d2c2      	bcs.n	8000612 <__udivmoddi4+0x222>
 800068c:	f1a9 0102 	sub.w	r1, r9, #2
 8000690:	443a      	add	r2, r7
 8000692:	e7be      	b.n	8000612 <__udivmoddi4+0x222>
 8000694:	45f0      	cmp	r8, lr
 8000696:	d29d      	bcs.n	80005d4 <__udivmoddi4+0x1e4>
 8000698:	ebbe 0302 	subs.w	r3, lr, r2
 800069c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006a0:	3801      	subs	r0, #1
 80006a2:	46e1      	mov	r9, ip
 80006a4:	e796      	b.n	80005d4 <__udivmoddi4+0x1e4>
 80006a6:	eba7 0909 	sub.w	r9, r7, r9
 80006aa:	4449      	add	r1, r9
 80006ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80006b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b4:	fb09 f804 	mul.w	r8, r9, r4
 80006b8:	e7db      	b.n	8000672 <__udivmoddi4+0x282>
 80006ba:	4673      	mov	r3, lr
 80006bc:	e77f      	b.n	80005be <__udivmoddi4+0x1ce>
 80006be:	4650      	mov	r0, sl
 80006c0:	e766      	b.n	8000590 <__udivmoddi4+0x1a0>
 80006c2:	4608      	mov	r0, r1
 80006c4:	e6fd      	b.n	80004c2 <__udivmoddi4+0xd2>
 80006c6:	443b      	add	r3, r7
 80006c8:	3a02      	subs	r2, #2
 80006ca:	e733      	b.n	8000534 <__udivmoddi4+0x144>
 80006cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006d0:	443b      	add	r3, r7
 80006d2:	e71c      	b.n	800050e <__udivmoddi4+0x11e>
 80006d4:	4649      	mov	r1, r9
 80006d6:	e79c      	b.n	8000612 <__udivmoddi4+0x222>
 80006d8:	eba1 0109 	sub.w	r1, r1, r9
 80006dc:	46c4      	mov	ip, r8
 80006de:	fbb1 f9fe 	udiv	r9, r1, lr
 80006e2:	fb09 f804 	mul.w	r8, r9, r4
 80006e6:	e7c4      	b.n	8000672 <__udivmoddi4+0x282>

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ee:	b0d7      	sub	sp, #348	@ 0x15c
 80006f0:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f2:	f003 f8f3 	bl	80038dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f6:	f000 fb0f 	bl	8000d18 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006fa:	f000 fb7b 	bl	8000df4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fe:	f001 f835 	bl	800176c <MX_GPIO_Init>
  MX_DMA_Init();
 8000702:	f001 f813 	bl	800172c <MX_DMA_Init>
  MX_ADC1_Init();
 8000706:	f000 fba7 	bl	8000e58 <MX_ADC1_Init>
  MX_ADC2_Init();
 800070a:	f000 fc41 	bl	8000f90 <MX_ADC2_Init>
  MX_FDCAN1_Init();
 800070e:	f000 fca7 	bl	8001060 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000712:	f000 fd23 	bl	800115c <MX_FDCAN2_Init>
  MX_TIM1_Init();
 8000716:	f000 fe91 	bl	800143c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800071a:	f000 ffbb 	bl	8001694 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 800071e:	f000 ff45 	bl	80015ac <MX_TIM16_Init>
  MX_USART1_UART_Init();
 8000722:	f000 ff6b 	bl	80015fc <MX_USART1_UART_Init>
  MX_SDMMC1_SD_Init();
 8000726:	f000 fe15 	bl	8001354 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800072a:	f012 fec5 	bl	80134b8 <MX_FATFS_Init>
  MX_FDCAN3_Init();
 800072e:	f000 fd93 	bl	8001258 <MX_FDCAN3_Init>
  MX_SPI2_Init();
 8000732:	f000 fe2d 	bl	8001390 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	// Inicializar tarjeta microSD
	//SDCard_start();
	//HAL_Delay(2000);
  HAL_Delay(5);
 8000736:	2005      	movs	r0, #5
 8000738:	f003 f962 	bl	8003a00 <HAL_Delay>
  uint8_t before = nrf24_ReadReg(CONFIG);
 800073c:	2000      	movs	r0, #0
 800073e:	f001 ffc3 	bl	80026c8 <nrf24_ReadReg>
 8000742:	4603      	mov	r3, r0
 8000744:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
  uint8_t test   = (uint8_t)~before;
 8000748:	f897 313b 	ldrb.w	r3, [r7, #315]	@ 0x13b
 800074c:	43db      	mvns	r3, r3
 800074e:	f887 313a 	strb.w	r3, [r7, #314]	@ 0x13a
  nrf24_WriteReg(CONFIG, test);
 8000752:	f897 313a 	ldrb.w	r3, [r7, #314]	@ 0x13a
 8000756:	4619      	mov	r1, r3
 8000758:	2000      	movs	r0, #0
 800075a:	f001 ff65 	bl	8002628 <nrf24_WriteReg>
  HAL_Delay(1);
 800075e:	2001      	movs	r0, #1
 8000760:	f003 f94e 	bl	8003a00 <HAL_Delay>
  uint8_t echo   = nrf24_ReadReg(CONFIG);
 8000764:	2000      	movs	r0, #0
 8000766:	f001 ffaf 	bl	80026c8 <nrf24_ReadReg>
 800076a:	4603      	mov	r3, r0
 800076c:	f887 3139 	strb.w	r3, [r7, #313]	@ 0x139
  char msg[80];
  snprintf(msg,sizeof msg,"[NRF-PROBE] before=%02X wrote=%02X echo=%02X\r\n",before,test,echo);
 8000770:	f897 113b 	ldrb.w	r1, [r7, #315]	@ 0x13b
 8000774:	f897 313a 	ldrb.w	r3, [r7, #314]	@ 0x13a
 8000778:	f897 2139 	ldrb.w	r2, [r7, #313]	@ 0x139
 800077c:	f107 00e4 	add.w	r0, r7, #228	@ 0xe4
 8000780:	9201      	str	r2, [sp, #4]
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	460b      	mov	r3, r1
 8000786:	4ab4      	ldr	r2, [pc, #720]	@ (8000a58 <main+0x36c>)
 8000788:	2150      	movs	r1, #80	@ 0x50
 800078a:	f013 f939 	bl	8013a00 <sniprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 800078e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff fdbc 	bl	8000310 <strlen>
 8000798:	4603      	mov	r3, r0
 800079a:	b29a      	uxth	r2, r3
 800079c:	f107 01e4 	add.w	r1, r7, #228	@ 0xe4
 80007a0:	f04f 33ff 	mov.w	r3, #4294967295
 80007a4:	48ad      	ldr	r0, [pc, #692]	@ (8000a5c <main+0x370>)
 80007a6:	f010 fe9f 	bl	80114e8 <HAL_UART_Transmit>
  // restore
  nrf24_WriteReg(CONFIG, 0x08);
 80007aa:	2108      	movs	r1, #8
 80007ac:	2000      	movs	r0, #0
 80007ae:	f001 ff3b 	bl	8002628 <nrf24_WriteReg>

  // ---- nRF24 bring-up ----
  NRF24_Init();
 80007b2:	f002 f881 	bl	80028b8 <NRF24_Init>
  //Comentar para uso real
  HAL_Delay(5);                      // small settle
 80007b6:	2005      	movs	r0, #5
 80007b8:	f003 f922 	bl	8003a00 <HAL_Delay>
  uint8_t st = NRF24_StatusNOP();
 80007bc:	f002 fa2c 	bl	8002c18 <NRF24_StatusNOP>
 80007c0:	4603      	mov	r3, r0
 80007c2:	f887 3138 	strb.w	r3, [r7, #312]	@ 0x138
  char m[64];
  snprintf(m,sizeof(m),"[NRF] STATUS via NOP = 0x%02X\r\n", st);
 80007c6:	f897 3138 	ldrb.w	r3, [r7, #312]	@ 0x138
 80007ca:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 80007ce:	4aa4      	ldr	r2, [pc, #656]	@ (8000a60 <main+0x374>)
 80007d0:	2140      	movs	r1, #64	@ 0x40
 80007d2:	f013 f915 	bl	8013a00 <sniprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)m,strlen(m),HAL_MAX_DELAY);
 80007d6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff fd98 	bl	8000310 <strlen>
 80007e0:	4603      	mov	r3, r0
 80007e2:	b29a      	uxth	r2, r3
 80007e4:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 80007e8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ec:	489b      	ldr	r0, [pc, #620]	@ (8000a5c <main+0x370>)
 80007ee:	f010 fe7b 	bl	80114e8 <HAL_UART_Transmit>

  NRF24_TxMode(rf_addr, TEL_CHAN);
 80007f2:	214c      	movs	r1, #76	@ 0x4c
 80007f4:	489b      	ldr	r0, [pc, #620]	@ (8000a64 <main+0x378>)
 80007f6:	f002 f892 	bl	800291e <NRF24_TxMode>
  NRF24_Dump();                           // prints via UART for sanity
 80007fa:	f002 f987 	bl	8002b0c <NRF24_Dump>
  uint8_t cfg = nrf24_ReadReg(CONFIG);
 80007fe:	2000      	movs	r0, #0
 8000800:	f001 ff62 	bl	80026c8 <nrf24_ReadReg>
 8000804:	4603      	mov	r3, r0
 8000806:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
  uint8_t rf  = nrf24_ReadReg(RF_SETUP);
 800080a:	2006      	movs	r0, #6
 800080c:	f001 ff5c 	bl	80026c8 <nrf24_ReadReg>
 8000810:	4603      	mov	r3, r0
 8000812:	f887 3136 	strb.w	r3, [r7, #310]	@ 0x136
  uint8_t ch  = nrf24_ReadReg(RF_CH);
 8000816:	2005      	movs	r0, #5
 8000818:	f001 ff56 	bl	80026c8 <nrf24_ReadReg>
 800081c:	4603      	mov	r3, r0
 800081e:	f887 3135 	strb.w	r3, [r7, #309]	@ 0x135
  char info[64];
  snprintf(info, sizeof(info), "[NRF] CFG=%02X RF=%02X CH=%u\r\n", cfg, rf, ch);
 8000822:	f897 1137 	ldrb.w	r1, [r7, #311]	@ 0x137
 8000826:	f897 3136 	ldrb.w	r3, [r7, #310]	@ 0x136
 800082a:	f897 2135 	ldrb.w	r2, [r7, #309]	@ 0x135
 800082e:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 8000832:	9201      	str	r2, [sp, #4]
 8000834:	9300      	str	r3, [sp, #0]
 8000836:	460b      	mov	r3, r1
 8000838:	4a8b      	ldr	r2, [pc, #556]	@ (8000a68 <main+0x37c>)
 800083a:	2140      	movs	r1, #64	@ 0x40
 800083c:	f013 f8e0 	bl	8013a00 <sniprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 8000840:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff fd63 	bl	8000310 <strlen>
 800084a:	4603      	mov	r3, r0
 800084c:	b29a      	uxth	r2, r3
 800084e:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 8000852:	f04f 33ff 	mov.w	r3, #4294967295
 8000856:	4881      	ldr	r0, [pc, #516]	@ (8000a5c <main+0x370>)
 8000858:	f010 fe46 	bl	80114e8 <HAL_UART_Transmit>
	//sprintf(buffer, "%u,1test,1test1,1test2\n", (unsigned)time(NULL));
	//SDCard_write("data.csv", "1test,1test1,1test2\n", 0); // el modo 0 asume que existe el archivo y añade datos
	//print(buffer);

	// HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)buffer_adc, 3) != HAL_OK)
 800085c:	2203      	movs	r2, #3
 800085e:	4983      	ldr	r1, [pc, #524]	@ (8000a6c <main+0x380>)
 8000860:	4883      	ldr	r0, [pc, #524]	@ (8000a70 <main+0x384>)
 8000862:	f004 f827 	bl	80048b4 <HAL_ADC_Start_DMA>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d004      	beq.n	8000876 <main+0x18a>
	{
#if DEBUG
		print("Error al inicializar ADC_DMA");
 800086c:	4881      	ldr	r0, [pc, #516]	@ (8000a74 <main+0x388>)
 800086e:	f001 f87d 	bl	800196c <print>
#endif
		Error_Handler();
 8000872:	f001 fe8d 	bl	8002590 <Error_Handler>
	//LPF_EMA_Init(&s1_filt, 0.2f);
	//LPF_EMA_Init(&s2_filt, 0.2f);

	// Inicialización de buses CAN
	// Inversor
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8000876:	4880      	ldr	r0, [pc, #512]	@ (8000a78 <main+0x38c>)
 8000878:	f008 f928 	bl	8008acc <HAL_FDCAN_Start>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d004      	beq.n	800088c <main+0x1a0>
	{
#if DEBUG
		print("Error al inicializar CAN_INV");
 8000882:	487e      	ldr	r0, [pc, #504]	@ (8000a7c <main+0x390>)
 8000884:	f001 f872 	bl	800196c <print>
#endif
		Error_Handler();
 8000888:	f001 fe82 	bl	8002590 <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 800088c:	2200      	movs	r2, #0
 800088e:	2101      	movs	r1, #1
 8000890:	4879      	ldr	r0, [pc, #484]	@ (8000a78 <main+0x38c>)
 8000892:	f008 fb0d 	bl	8008eb0 <HAL_FDCAN_ActivateNotification>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d004      	beq.n	80008a6 <main+0x1ba>
									   0) != HAL_OK)
	{

#if DEBUG
		print("Error al activar NOTIFICACION CAN_INV");
 800089c:	4878      	ldr	r0, [pc, #480]	@ (8000a80 <main+0x394>)
 800089e:	f001 f865 	bl	800196c <print>
#endif
		Error_Handler();
 80008a2:	f001 fe75 	bl	8002590 <Error_Handler>
#endif
		Error_Handler();
	}*/

	// Acumulador
	if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK)
 80008a6:	4877      	ldr	r0, [pc, #476]	@ (8000a84 <main+0x398>)
 80008a8:	f008 f910 	bl	8008acc <HAL_FDCAN_Start>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d004      	beq.n	80008bc <main+0x1d0>
	{

#if DEBUG
		print("Error al inicializar CAN_ACU");
 80008b2:	4875      	ldr	r0, [pc, #468]	@ (8000a88 <main+0x39c>)
 80008b4:	f001 f85a 	bl	800196c <print>

#endif
		Error_Handler();
 80008b8:	f001 fe6a 	bl	8002590 <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 80008bc:	2200      	movs	r2, #0
 80008be:	2101      	movs	r1, #1
 80008c0:	4870      	ldr	r0, [pc, #448]	@ (8000a84 <main+0x398>)
 80008c2:	f008 faf5 	bl	8008eb0 <HAL_FDCAN_ActivateNotification>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d004      	beq.n	80008d6 <main+0x1ea>
									   0) != HAL_OK)
	{

#if DEBUG
		print("Error al activar NOTIFICATION CAN_ACU");
 80008cc:	486f      	ldr	r0, [pc, #444]	@ (8000a8c <main+0x3a0>)
 80008ce:	f001 f84d 	bl	800196c <print>
#endif
		Error_Handler();
 80008d2:	f001 fe5d 	bl	8002590 <Error_Handler>
	}

	//Dash
	if (HAL_FDCAN_Start(&hfdcan3) != HAL_OK)
 80008d6:	486e      	ldr	r0, [pc, #440]	@ (8000a90 <main+0x3a4>)
 80008d8:	f008 f8f8 	bl	8008acc <HAL_FDCAN_Start>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d004      	beq.n	80008ec <main+0x200>
	{

#if DEBUG
		print("Error al inicializar CAN_DASH");
 80008e2:	486c      	ldr	r0, [pc, #432]	@ (8000a94 <main+0x3a8>)
 80008e4:	f001 f842 	bl	800196c <print>

#endif
		Error_Handler();
 80008e8:	f001 fe52 	bl	8002590 <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan3, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 80008ec:	2200      	movs	r2, #0
 80008ee:	2101      	movs	r1, #1
 80008f0:	4867      	ldr	r0, [pc, #412]	@ (8000a90 <main+0x3a4>)
 80008f2:	f008 fadd 	bl	8008eb0 <HAL_FDCAN_ActivateNotification>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d004      	beq.n	8000906 <main+0x21a>
									   0) != HAL_OK)
	{

#if DEBUG
		print("Error al activar NOTIFICATION CAN_DASH");
 80008fc:	4866      	ldr	r0, [pc, #408]	@ (8000a98 <main+0x3ac>)
 80008fe:	f001 f835 	bl	800196c <print>
#endif
		Error_Handler();
 8000902:	f001 fe45 	bl	8002590 <Error_Handler>
	}

	//---------- SECUENCIA DE ARRANQUE ----------
#if (DEBUG)
	print("Solicitar tensión inversor");
 8000906:	4865      	ldr	r0, [pc, #404]	@ (8000a9c <main+0x3b0>)
 8000908:	f001 f830 	bl	800196c <print>
#if (CALIBRATION)
	config_inv_lectura_v = 1;
#endif

	// Espera ACK inversor (DC bus)
	uint32_t _last_req_log = 0;
 800090c:	2300      	movs	r3, #0
 800090e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
	while (config_inv_lectura_v == 0)
 8000912:	e016      	b.n	8000942 <main+0x256>
	{
		if ((HAL_GetTick() - _last_req_log) >= 1000) {
 8000914:	f003 f868 	bl	80039e8 <HAL_GetTick>
 8000918:	4602      	mov	r2, r0
 800091a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800091e:	1ad3      	subs	r3, r2, r3
 8000920:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000924:	d306      	bcc.n	8000934 <main+0x248>
		        _last_req_log = HAL_GetTick();
 8000926:	f003 f85f 	bl	80039e8 <HAL_GetTick>
 800092a:	f8c7 013c 	str.w	r0, [r7, #316]	@ 0x13c
		        print("Solicitar tensión inversor");
 800092e:	485b      	ldr	r0, [pc, #364]	@ (8000a9c <main+0x3b0>)
 8000930:	f001 f81c 	bl	800196c <print>
		    }
		if (config_inv_lectura_v == 1)
 8000934:	4b5a      	ldr	r3, [pc, #360]	@ (8000aa0 <main+0x3b4>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2b01      	cmp	r3, #1
 800093a:	d102      	bne.n	8000942 <main+0x256>
		{

#if DEBUG
			print("CAN_INV: Lectura de DC_BUS_VOLTAGE correctamente");
 800093c:	4859      	ldr	r0, [pc, #356]	@ (8000aa4 <main+0x3b8>)
 800093e:	f001 f815 	bl	800196c <print>
	while (config_inv_lectura_v == 0)
 8000942:	4b57      	ldr	r3, [pc, #348]	@ (8000aa0 <main+0x3b4>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d0e4      	beq.n	8000914 <main+0x228>
	}

#if !CALIBRATION

	// PRE-CHARGE
	while (precarga_inv == 0 && inv_dc_bus_voltage < 300)
 800094a:	e056      	b.n	80009fa <main+0x30e>
	{

#if DEBUG
		sprintf(TxBuffer, "DC_BUS_VOLTAGE: %i V\r\n", inv_dc_bus_voltage);
 800094c:	4b56      	ldr	r3, [pc, #344]	@ (8000aa8 <main+0x3bc>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	461a      	mov	r2, r3
 8000952:	4956      	ldr	r1, [pc, #344]	@ (8000aac <main+0x3c0>)
 8000954:	4856      	ldr	r0, [pc, #344]	@ (8000ab0 <main+0x3c4>)
 8000956:	f013 f889 	bl	8013a6c <siprintf>
		//print(TxBuffer);
		// printValue((int) ((byte1_voltage << 8) | byte0_voltage));
#endif

		// Reenvío DC_BUS_VOLTAGE al AMS por CAN_ACU
		TxHeader_Acu.Identifier = ID_dc_bus_voltage;
 800095a:	4b56      	ldr	r3, [pc, #344]	@ (8000ab4 <main+0x3c8>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a56      	ldr	r2, [pc, #344]	@ (8000ab8 <main+0x3cc>)
 8000960:	6013      	str	r3, [r2, #0]
		TxHeader_Acu.DataLength = 2;
 8000962:	4b55      	ldr	r3, [pc, #340]	@ (8000ab8 <main+0x3cc>)
 8000964:	2202      	movs	r2, #2
 8000966:	60da      	str	r2, [r3, #12]
		TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 8000968:	4b53      	ldr	r3, [pc, #332]	@ (8000ab8 <main+0x3cc>)
 800096a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800096e:	605a      	str	r2, [r3, #4]
		TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 8000970:	4b51      	ldr	r3, [pc, #324]	@ (8000ab8 <main+0x3cc>)
 8000972:	2200      	movs	r2, #0
 8000974:	619a      	str	r2, [r3, #24]
		TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 8000976:	4b50      	ldr	r3, [pc, #320]	@ (8000ab8 <main+0x3cc>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]

		/*		TxData_Acu[0] = byte0_voltage;
		 TxData_Acu[1] = byte1_voltage;*/
		TxData_Acu[0] = inv_dc_bus_voltage & 0xFF;
 800097c:	4b4a      	ldr	r3, [pc, #296]	@ (8000aa8 <main+0x3bc>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	b2da      	uxtb	r2, r3
 8000982:	4b4e      	ldr	r3, [pc, #312]	@ (8000abc <main+0x3d0>)
 8000984:	701a      	strb	r2, [r3, #0]
		TxData_Acu[1] = (inv_dc_bus_voltage >> 8) & 0xFF;
 8000986:	4b48      	ldr	r3, [pc, #288]	@ (8000aa8 <main+0x3bc>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	121b      	asrs	r3, r3, #8
 800098c:	b2da      	uxtb	r2, r3
 800098e:	4b4b      	ldr	r3, [pc, #300]	@ (8000abc <main+0x3d0>)
 8000990:	705a      	strb	r2, [r3, #1]
		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK)
 8000992:	4a4a      	ldr	r2, [pc, #296]	@ (8000abc <main+0x3d0>)
 8000994:	4948      	ldr	r1, [pc, #288]	@ (8000ab8 <main+0x3cc>)
 8000996:	483b      	ldr	r0, [pc, #236]	@ (8000a84 <main+0x398>)
 8000998:	f008 f8c3 	bl	8008b22 <HAL_FDCAN_AddMessageToTxFifoQ>
#if DEBUG
			//print("CAN_ACU: DC_BUS_VOLTAGE enviado a AMS");
#endif
		}

		precharge_button = HAL_GPIO_ReadPin(START_BUTTON_GPIO_Port,
 800099c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009a0:	4847      	ldr	r0, [pc, #284]	@ (8000ac0 <main+0x3d4>)
 80009a2:	f009 f9a9 	bl	8009cf8 <HAL_GPIO_ReadPin>
 80009a6:	4603      	mov	r3, r0
 80009a8:	461a      	mov	r2, r3
 80009aa:	4b46      	ldr	r3, [pc, #280]	@ (8000ac4 <main+0x3d8>)
 80009ac:	601a      	str	r2, [r3, #0]
											START_BUTTON_Pin);
		if (precharge_button == 1){
 80009ae:	4b45      	ldr	r3, [pc, #276]	@ (8000ac4 <main+0x3d8>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d11a      	bne.n	80009ec <main+0x300>
			TxHeader_Acu.Identifier = 0x600;
 80009b6:	4b40      	ldr	r3, [pc, #256]	@ (8000ab8 <main+0x3cc>)
 80009b8:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80009bc:	601a      	str	r2, [r3, #0]
			TxHeader_Acu.DataLength = 2;
 80009be:	4b3e      	ldr	r3, [pc, #248]	@ (8000ab8 <main+0x3cc>)
 80009c0:	2202      	movs	r2, #2
 80009c2:	60da      	str	r2, [r3, #12]
			TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 80009c4:	4b3c      	ldr	r3, [pc, #240]	@ (8000ab8 <main+0x3cc>)
 80009c6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009ca:	605a      	str	r2, [r3, #4]
			TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 80009cc:	4b3a      	ldr	r3, [pc, #232]	@ (8000ab8 <main+0x3cc>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	619a      	str	r2, [r3, #24]
			TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 80009d2:	4b39      	ldr	r3, [pc, #228]	@ (8000ab8 <main+0x3cc>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]


			TxData_Acu[0] = precharge_button;
 80009d8:	4b3a      	ldr	r3, [pc, #232]	@ (8000ac4 <main+0x3d8>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	4b37      	ldr	r3, [pc, #220]	@ (8000abc <main+0x3d0>)
 80009e0:	701a      	strb	r2, [r3, #0]

			if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK)
 80009e2:	4a36      	ldr	r2, [pc, #216]	@ (8000abc <main+0x3d0>)
 80009e4:	4934      	ldr	r1, [pc, #208]	@ (8000ab8 <main+0x3cc>)
 80009e6:	4827      	ldr	r0, [pc, #156]	@ (8000a84 <main+0x398>)
 80009e8:	f008 f89b 	bl	8008b22 <HAL_FDCAN_AddMessageToTxFifoQ>
			}
		}



		if (precarga_inv == 1)
 80009ec:	4b36      	ldr	r3, [pc, #216]	@ (8000ac8 <main+0x3dc>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d102      	bne.n	80009fa <main+0x30e>
		{
#if DEBUG
			print("CAN_ACU: Precarga correcta");
 80009f4:	4835      	ldr	r0, [pc, #212]	@ (8000acc <main+0x3e0>)
 80009f6:	f000 ffb9 	bl	800196c <print>
	while (precarga_inv == 0 && inv_dc_bus_voltage < 300)
 80009fa:	4b33      	ldr	r3, [pc, #204]	@ (8000ac8 <main+0x3dc>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d104      	bne.n	8000a0c <main+0x320>
 8000a02:	4b29      	ldr	r3, [pc, #164]	@ (8000aa8 <main+0x3bc>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000a0a:	db9f      	blt.n	800094c <main+0x260>
#endif
		}

	}

	TxHeader_Acu.Identifier = ID_dc_bus_voltage;
 8000a0c:	4b29      	ldr	r3, [pc, #164]	@ (8000ab4 <main+0x3c8>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a29      	ldr	r2, [pc, #164]	@ (8000ab8 <main+0x3cc>)
 8000a12:	6013      	str	r3, [r2, #0]
	TxHeader_Acu.DataLength = 2;
 8000a14:	4b28      	ldr	r3, [pc, #160]	@ (8000ab8 <main+0x3cc>)
 8000a16:	2202      	movs	r2, #2
 8000a18:	60da      	str	r2, [r3, #12]
	TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 8000a1a:	4b27      	ldr	r3, [pc, #156]	@ (8000ab8 <main+0x3cc>)
 8000a1c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a20:	605a      	str	r2, [r3, #4]
	TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 8000a22:	4b25      	ldr	r3, [pc, #148]	@ (8000ab8 <main+0x3cc>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
	TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 8000a28:	4b23      	ldr	r3, [pc, #140]	@ (8000ab8 <main+0x3cc>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]

	TxData_Acu[0] = inv_dc_bus_voltage & 0xFF;
 8000a2e:	4b1e      	ldr	r3, [pc, #120]	@ (8000aa8 <main+0x3bc>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	b2da      	uxtb	r2, r3
 8000a34:	4b21      	ldr	r3, [pc, #132]	@ (8000abc <main+0x3d0>)
 8000a36:	701a      	strb	r2, [r3, #0]
	TxData_Acu[1] = (inv_dc_bus_voltage >> 8) & 0xFF;
 8000a38:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa8 <main+0x3bc>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	121b      	asrs	r3, r3, #8
 8000a3e:	b2da      	uxtb	r2, r3
 8000a40:	4b1e      	ldr	r3, [pc, #120]	@ (8000abc <main+0x3d0>)
 8000a42:	705a      	strb	r2, [r3, #1]
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK)
 8000a44:	4a1d      	ldr	r2, [pc, #116]	@ (8000abc <main+0x3d0>)
 8000a46:	491c      	ldr	r1, [pc, #112]	@ (8000ab8 <main+0x3cc>)
 8000a48:	480e      	ldr	r0, [pc, #56]	@ (8000a84 <main+0x398>)
 8000a4a:	f008 f86a 	bl	8008b22 <HAL_FDCAN_AddMessageToTxFifoQ>
	 * 10 ms interruption => 10ms * 264MHz = 2640000
	 * preescalado 264 (por ejemplo)
	 * timer count = 2640000 / 264 = 10000
	 */
#if !CALIBRATION
	HAL_TIM_Base_Start_IT(&htim16);
 8000a4e:	4820      	ldr	r0, [pc, #128]	@ (8000ad0 <main+0x3e4>)
 8000a50:	f00f fb6c 	bl	801012c <HAL_TIM_Base_Start_IT>
#endif

#if 1
	// Espera a que se pulse el botón de arranque mientras se pisa el freno
	while (boton_arranque == 0)
 8000a54:	e072      	b.n	8000b3c <main+0x450>
 8000a56:	bf00      	nop
 8000a58:	080143c4 	.word	0x080143c4
 8000a5c:	24000614 	.word	0x24000614
 8000a60:	080143f4 	.word	0x080143f4
 8000a64:	24000008 	.word	0x24000008
 8000a68:	08014414 	.word	0x08014414
 8000a6c:	240007ac 	.word	0x240007ac
 8000a70:	240000ac 	.word	0x240000ac
 8000a74:	08014434 	.word	0x08014434
 8000a78:	24000204 	.word	0x24000204
 8000a7c:	08014454 	.word	0x08014454
 8000a80:	08014474 	.word	0x08014474
 8000a84:	240002a4 	.word	0x240002a4
 8000a88:	0801449c 	.word	0x0801449c
 8000a8c:	080144bc 	.word	0x080144bc
 8000a90:	24000344 	.word	0x24000344
 8000a94:	080144e4 	.word	0x080144e4
 8000a98:	08014504 	.word	0x08014504
 8000a9c:	0801452c 	.word	0x0801452c
 8000aa0:	240000a4 	.word	0x240000a4
 8000aa4:	08014548 	.word	0x08014548
 8000aa8:	240007a4 	.word	0x240007a4
 8000aac:	0801457c 	.word	0x0801457c
 8000ab0:	24000840 	.word	0x24000840
 8000ab4:	24000004 	.word	0x24000004
 8000ab8:	24000704 	.word	0x24000704
 8000abc:	24000788 	.word	0x24000788
 8000ac0:	58021400 	.word	0x58021400
 8000ac4:	240007d8 	.word	0x240007d8
 8000ac8:	240000a0 	.word	0x240000a0
 8000acc:	08014594 	.word	0x08014594
 8000ad0:	24000534 	.word	0x24000534
	{

		HAL_ADC_Start(&hadc1);
 8000ad4:	486f      	ldr	r0, [pc, #444]	@ (8000c94 <main+0x5a8>)
 8000ad6:	f003 fcfb 	bl	80044d0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000ada:	f04f 31ff 	mov.w	r1, #4294967295
 8000ade:	486d      	ldr	r0, [pc, #436]	@ (8000c94 <main+0x5a8>)
 8000ae0:	f003 fdf4 	bl	80046cc <HAL_ADC_PollForConversion>

		s_freno = HAL_ADC_GetValue(&hadc1);
 8000ae4:	486b      	ldr	r0, [pc, #428]	@ (8000c94 <main+0x5a8>)
 8000ae6:	f003 ffc1 	bl	8004a6c <HAL_ADC_GetValue>
 8000aea:	4603      	mov	r3, r0
 8000aec:	461a      	mov	r2, r3
 8000aee:	4b6a      	ldr	r3, [pc, #424]	@ (8000c98 <main+0x5ac>)
 8000af0:	601a      	str	r2, [r3, #0]

		HAL_ADC_Stop(&hadc1);
 8000af2:	4868      	ldr	r0, [pc, #416]	@ (8000c94 <main+0x5a8>)
 8000af4:	f003 fdb6 	bl	8004664 <HAL_ADC_Stop>

		//printValue(s_freno);
		print("Pulsa botón");
 8000af8:	4868      	ldr	r0, [pc, #416]	@ (8000c9c <main+0x5b0>)
 8000afa:	f000 ff37 	bl	800196c <print>

		start_button_act = HAL_GPIO_ReadPin(START_BUTTON_GPIO_Port,
 8000afe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b02:	4867      	ldr	r0, [pc, #412]	@ (8000ca0 <main+0x5b4>)
 8000b04:	f009 f8f8 	bl	8009cf8 <HAL_GPIO_ReadPin>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	4b65      	ldr	r3, [pc, #404]	@ (8000ca4 <main+0x5b8>)
 8000b0e:	601a      	str	r2, [r3, #0]
											START_BUTTON_Pin);

		if (start_button_act == 1)
 8000b10:	4b64      	ldr	r3, [pc, #400]	@ (8000ca4 <main+0x5b8>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d111      	bne.n	8000b3c <main+0x450>
		{

#if DEBUG
			//printValue(s_freno);
			print("Pulsa freno");
 8000b18:	4863      	ldr	r0, [pc, #396]	@ (8000ca8 <main+0x5bc>)
 8000b1a:	f000 ff27 	bl	800196c <print>
#endif
			if (s_freno > 900)
 8000b1e:	4b5e      	ldr	r3, [pc, #376]	@ (8000c98 <main+0x5ac>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8000b26:	dd06      	ble.n	8000b36 <main+0x44a>
			{
				boton_arranque = 1;
 8000b28:	4b60      	ldr	r3, [pc, #384]	@ (8000cac <main+0x5c0>)
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	601a      	str	r2, [r3, #0]
#if DEBUG
				print("Coche arrancado correctamente");
 8000b2e:	4860      	ldr	r0, [pc, #384]	@ (8000cb0 <main+0x5c4>)
 8000b30:	f000 ff1c 	bl	800196c <print>
 8000b34:	e002      	b.n	8000b3c <main+0x450>
#endif
			}
			else
			{
#if DEBUG
				print("Pulsar freno para arrancar");
 8000b36:	485f      	ldr	r0, [pc, #380]	@ (8000cb4 <main+0x5c8>)
 8000b38:	f000 ff18 	bl	800196c <print>
	while (boton_arranque == 0)
 8000b3c:	4b5b      	ldr	r3, [pc, #364]	@ (8000cac <main+0x5c0>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d0c7      	beq.n	8000ad4 <main+0x3e8>
	}
#endif

	// Activar READY-TO-DRIVE-SOUND (RTDS) durante 2s
#if DEBUG
	print("RTDS sonando");
 8000b44:	485c      	ldr	r0, [pc, #368]	@ (8000cb8 <main+0x5cc>)
 8000b46:	f000 ff11 	bl	800196c <print>
#endif
#if !CALIBRATION

	flag_r2d = 1;
 8000b4a:	4b5c      	ldr	r3, [pc, #368]	@ (8000cbc <main+0x5d0>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(RTDS_GPIO_Port, RTDS_Pin, GPIO_PIN_SET); // Enciende RTDS
 8000b50:	2201      	movs	r2, #1
 8000b52:	2102      	movs	r1, #2
 8000b54:	485a      	ldr	r0, [pc, #360]	@ (8000cc0 <main+0x5d4>)
 8000b56:	f009 f8e7 	bl	8009d28 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 8000b5a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b5e:	f002 ff4f 	bl	8003a00 <HAL_Delay>
	HAL_GPIO_WritePin(RTDS_GPIO_Port, RTDS_Pin, GPIO_PIN_RESET); // Apaga RTDS
 8000b62:	2200      	movs	r2, #0
 8000b64:	2102      	movs	r1, #2
 8000b66:	4856      	ldr	r0, [pc, #344]	@ (8000cc0 <main+0x5d4>)
 8000b68:	f009 f8de 	bl	8009d28 <HAL_GPIO_WritePin>

#endif

#if DEBUG
	print("RTDS apagado");
 8000b6c:	4855      	ldr	r0, [pc, #340]	@ (8000cc4 <main+0x5d8>)
 8000b6e:	f000 fefd 	bl	800196c <print>
#endif

	// Estado STAND BY inversor
	while (state != 3)
 8000b72:	e006      	b.n	8000b82 <main+0x496>
	{
		if (state == 3)
 8000b74:	4b54      	ldr	r3, [pc, #336]	@ (8000cc8 <main+0x5dc>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b03      	cmp	r3, #3
 8000b7a:	d102      	bne.n	8000b82 <main+0x496>
		{
#if DEBUG
			print("Precarga");
 8000b7c:	4853      	ldr	r0, [pc, #332]	@ (8000ccc <main+0x5e0>)
 8000b7e:	f000 fef5 	bl	800196c <print>
	while (state != 3)
 8000b82:	4b51      	ldr	r3, [pc, #324]	@ (8000cc8 <main+0x5dc>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b03      	cmp	r3, #3
 8000b88:	d1f4      	bne.n	8000b74 <main+0x488>
#endif
		}
	}

#if DEBUG
	print("state : stand by");
 8000b8a:	4851      	ldr	r0, [pc, #324]	@ (8000cd0 <main+0x5e4>)
 8000b8c:	f000 feee 	bl	800196c <print>
#endif

	while (state != 4)
 8000b90:	e037      	b.n	8000c02 <main+0x516>
	{
		// Estado READY inversor
		TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8000b92:	4b50      	ldr	r3, [pc, #320]	@ (8000cd4 <main+0x5e8>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a50      	ldr	r2, [pc, #320]	@ (8000cd8 <main+0x5ec>)
 8000b98:	6013      	str	r3, [r2, #0]
		TxHeader_Inv.DataLength = 3;
 8000b9a:	4b4f      	ldr	r3, [pc, #316]	@ (8000cd8 <main+0x5ec>)
 8000b9c:	2203      	movs	r2, #3
 8000b9e:	60da      	str	r2, [r3, #12]
		TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8000ba0:	4b4d      	ldr	r3, [pc, #308]	@ (8000cd8 <main+0x5ec>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	605a      	str	r2, [r3, #4]

		TxData_Inv[0] = 0x0;
 8000ba6:	4b4d      	ldr	r3, [pc, #308]	@ (8000cdc <main+0x5f0>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	701a      	strb	r2, [r3, #0]
		TxData_Inv[1] = 0x0;
 8000bac:	4b4b      	ldr	r3, [pc, #300]	@ (8000cdc <main+0x5f0>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	705a      	strb	r2, [r3, #1]
		TxData_Inv[2] = 0x4;
 8000bb2:	4b4a      	ldr	r3, [pc, #296]	@ (8000cdc <main+0x5f0>)
 8000bb4:	2204      	movs	r2, #4
 8000bb6:	709a      	strb	r2, [r3, #2]
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8000bb8:	4a48      	ldr	r2, [pc, #288]	@ (8000cdc <main+0x5f0>)
 8000bba:	4947      	ldr	r1, [pc, #284]	@ (8000cd8 <main+0x5ec>)
 8000bbc:	4848      	ldr	r0, [pc, #288]	@ (8000ce0 <main+0x5f4>)
 8000bbe:	f007 ffb0 	bl	8008b22 <HAL_FDCAN_AddMessageToTxFifoQ>

		TxHeader_Inv.Identifier = 0x362;
 8000bc2:	4b45      	ldr	r3, [pc, #276]	@ (8000cd8 <main+0x5ec>)
 8000bc4:	f240 3262 	movw	r2, #866	@ 0x362
 8000bc8:	601a      	str	r2, [r3, #0]
		TxHeader_Inv.DataLength = 4;
 8000bca:	4b43      	ldr	r3, [pc, #268]	@ (8000cd8 <main+0x5ec>)
 8000bcc:	2204      	movs	r2, #4
 8000bce:	60da      	str	r2, [r3, #12]

		real_torque = 0;
 8000bd0:	4b44      	ldr	r3, [pc, #272]	@ (8000ce4 <main+0x5f8>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	801a      	strh	r2, [r3, #0]

		TxData_Inv[0] = 0x0;
 8000bd6:	4b41      	ldr	r3, [pc, #260]	@ (8000cdc <main+0x5f0>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	701a      	strb	r2, [r3, #0]
		TxData_Inv[1] = 0x0;
 8000bdc:	4b3f      	ldr	r3, [pc, #252]	@ (8000cdc <main+0x5f0>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	705a      	strb	r2, [r3, #1]
		TxData_Inv[2] = real_torque;
 8000be2:	4b40      	ldr	r3, [pc, #256]	@ (8000ce4 <main+0x5f8>)
 8000be4:	881b      	ldrh	r3, [r3, #0]
 8000be6:	b2da      	uxtb	r2, r3
 8000be8:	4b3c      	ldr	r3, [pc, #240]	@ (8000cdc <main+0x5f0>)
 8000bea:	709a      	strb	r2, [r3, #2]
		TxData_Inv[3] = 0x0;
 8000bec:	4b3b      	ldr	r3, [pc, #236]	@ (8000cdc <main+0x5f0>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	70da      	strb	r2, [r3, #3]
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8000bf2:	4a3a      	ldr	r2, [pc, #232]	@ (8000cdc <main+0x5f0>)
 8000bf4:	4938      	ldr	r1, [pc, #224]	@ (8000cd8 <main+0x5ec>)
 8000bf6:	483a      	ldr	r0, [pc, #232]	@ (8000ce0 <main+0x5f4>)
 8000bf8:	f007 ff93 	bl	8008b22 <HAL_FDCAN_AddMessageToTxFifoQ>
		HAL_Delay(10);
 8000bfc:	200a      	movs	r0, #10
 8000bfe:	f002 feff 	bl	8003a00 <HAL_Delay>
	while (state != 4)
 8000c02:	4b31      	ldr	r3, [pc, #196]	@ (8000cc8 <main+0x5dc>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b04      	cmp	r3, #4
 8000c08:	d1c3      	bne.n	8000b92 <main+0x4a6>

	}

#if DEBUG
	print("state: ready");
 8000c0a:	4837      	ldr	r0, [pc, #220]	@ (8000ce8 <main+0x5fc>)
 8000c0c:	f000 feae 	bl	800196c <print>
	{

		// Envío datos telemetría
		static uint32_t last_1s = 0;
		static uint32_t last_irq_seen = 0;
		if (HAL_GetTick() - last_1s >= 1000) {
 8000c10:	f002 feea 	bl	80039e8 <HAL_GetTick>
 8000c14:	4602      	mov	r2, r0
 8000c16:	4b35      	ldr	r3, [pc, #212]	@ (8000cec <main+0x600>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	1ad3      	subs	r3, r2, r3
 8000c1c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000c20:	d3f6      	bcc.n	8000c10 <main+0x524>
		    last_1s = HAL_GetTick();
 8000c22:	f002 fee1 	bl	80039e8 <HAL_GetTick>
 8000c26:	4603      	mov	r3, r0
 8000c28:	4a30      	ldr	r2, [pc, #192]	@ (8000cec <main+0x600>)
 8000c2a:	6013      	str	r3, [r2, #0]
		    char hb[96];
		    snprintf(hb, sizeof(hb),
 8000c2c:	4b30      	ldr	r3, [pc, #192]	@ (8000cf0 <main+0x604>)
 8000c2e:	681e      	ldr	r6, [r3, #0]
 8000c30:	4b30      	ldr	r3, [pc, #192]	@ (8000cf4 <main+0x608>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a30      	ldr	r2, [pc, #192]	@ (8000cf8 <main+0x60c>)
 8000c36:	6812      	ldr	r2, [r2, #0]
		             "[TEL] irq=%lu sent=%lu fail=%lu%s  Vdc=%d  rpm=%d  state=%u\r\n",
		             (unsigned long)tel_irq_cnt,
		             (unsigned long)tel_sent_ok,
		             (unsigned long)tel_sent_fail,
		             (tel_irq_cnt == last_irq_seen) ? " (NO NEW IRQ!)" : "",
 8000c38:	492d      	ldr	r1, [pc, #180]	@ (8000cf0 <main+0x604>)
 8000c3a:	6808      	ldr	r0, [r1, #0]
 8000c3c:	492f      	ldr	r1, [pc, #188]	@ (8000cfc <main+0x610>)
 8000c3e:	6809      	ldr	r1, [r1, #0]
		    snprintf(hb, sizeof(hb),
 8000c40:	4288      	cmp	r0, r1
 8000c42:	d101      	bne.n	8000c48 <main+0x55c>
 8000c44:	492e      	ldr	r1, [pc, #184]	@ (8000d00 <main+0x614>)
 8000c46:	e000      	b.n	8000c4a <main+0x55e>
 8000c48:	492e      	ldr	r1, [pc, #184]	@ (8000d04 <main+0x618>)
 8000c4a:	482f      	ldr	r0, [pc, #188]	@ (8000d08 <main+0x61c>)
 8000c4c:	6800      	ldr	r0, [r0, #0]
 8000c4e:	4c2f      	ldr	r4, [pc, #188]	@ (8000d0c <main+0x620>)
 8000c50:	6824      	ldr	r4, [r4, #0]
 8000c52:	4d1d      	ldr	r5, [pc, #116]	@ (8000cc8 <main+0x5dc>)
 8000c54:	782d      	ldrb	r5, [r5, #0]
 8000c56:	f107 0c04 	add.w	ip, r7, #4
 8000c5a:	9505      	str	r5, [sp, #20]
 8000c5c:	9404      	str	r4, [sp, #16]
 8000c5e:	9003      	str	r0, [sp, #12]
 8000c60:	9102      	str	r1, [sp, #8]
 8000c62:	9201      	str	r2, [sp, #4]
 8000c64:	9300      	str	r3, [sp, #0]
 8000c66:	4633      	mov	r3, r6
 8000c68:	4a29      	ldr	r2, [pc, #164]	@ (8000d10 <main+0x624>)
 8000c6a:	2160      	movs	r1, #96	@ 0x60
 8000c6c:	4660      	mov	r0, ip
 8000c6e:	f012 fec7 	bl	8013a00 <sniprintf>
		             inv_dc_bus_voltage, e_machine_rpm, state);
		    HAL_UART_Transmit(&huart2, (uint8_t*)hb, strlen(hb), HAL_MAX_DELAY);
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff fb4b 	bl	8000310 <strlen>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	b29a      	uxth	r2, r3
 8000c7e:	1d39      	adds	r1, r7, #4
 8000c80:	f04f 33ff 	mov.w	r3, #4294967295
 8000c84:	4823      	ldr	r0, [pc, #140]	@ (8000d14 <main+0x628>)
 8000c86:	f010 fc2f 	bl	80114e8 <HAL_UART_Transmit>
		    last_irq_seen = tel_irq_cnt;
 8000c8a:	4b19      	ldr	r3, [pc, #100]	@ (8000cf0 <main+0x604>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a1b      	ldr	r2, [pc, #108]	@ (8000cfc <main+0x610>)
 8000c90:	6013      	str	r3, [r2, #0]
	{
 8000c92:	e7bd      	b.n	8000c10 <main+0x524>
 8000c94:	240000ac 	.word	0x240000ac
 8000c98:	240007bc 	.word	0x240007bc
 8000c9c:	080145b0 	.word	0x080145b0
 8000ca0:	58021400 	.word	0x58021400
 8000ca4:	240007a0 	.word	0x240007a0
 8000ca8:	080145c0 	.word	0x080145c0
 8000cac:	240000a8 	.word	0x240000a8
 8000cb0:	080145cc 	.word	0x080145cc
 8000cb4:	080145ec 	.word	0x080145ec
 8000cb8:	08014608 	.word	0x08014608
 8000cbc:	2400093c 	.word	0x2400093c
 8000cc0:	58020800 	.word	0x58020800
 8000cc4:	08014618 	.word	0x08014618
 8000cc8:	240007ca 	.word	0x240007ca
 8000ccc:	08014628 	.word	0x08014628
 8000cd0:	08014634 	.word	0x08014634
 8000cd4:	24000000 	.word	0x24000000
 8000cd8:	240006b8 	.word	0x240006b8
 8000cdc:	24000778 	.word	0x24000778
 8000ce0:	24000204 	.word	0x24000204
 8000ce4:	240007c8 	.word	0x240007c8
 8000ce8:	08014648 	.word	0x08014648
 8000cec:	24000940 	.word	0x24000940
 8000cf0:	240006ac 	.word	0x240006ac
 8000cf4:	240006b0 	.word	0x240006b0
 8000cf8:	240006b4 	.word	0x240006b4
 8000cfc:	24000944 	.word	0x24000944
 8000d00:	08014658 	.word	0x08014658
 8000d04:	08014668 	.word	0x08014668
 8000d08:	240007a4 	.word	0x240007a4
 8000d0c:	240007a8 	.word	0x240007a8
 8000d10:	0801466c 	.word	0x0801466c
 8000d14:	24000614 	.word	0x24000614

08000d18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b09c      	sub	sp, #112	@ 0x70
 8000d1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d22:	224c      	movs	r2, #76	@ 0x4c
 8000d24:	2100      	movs	r1, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f012 fec2 	bl	8013ab0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d2c:	1d3b      	adds	r3, r7, #4
 8000d2e:	2220      	movs	r2, #32
 8000d30:	2100      	movs	r1, #0
 8000d32:	4618      	mov	r0, r3
 8000d34:	f012 febc 	bl	8013ab0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d38:	2002      	movs	r0, #2
 8000d3a:	f009 f80f 	bl	8009d5c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000d3e:	2300      	movs	r3, #0
 8000d40:	603b      	str	r3, [r7, #0]
 8000d42:	4b2b      	ldr	r3, [pc, #172]	@ (8000df0 <SystemClock_Config+0xd8>)
 8000d44:	699b      	ldr	r3, [r3, #24]
 8000d46:	4a2a      	ldr	r2, [pc, #168]	@ (8000df0 <SystemClock_Config+0xd8>)
 8000d48:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d4c:	6193      	str	r3, [r2, #24]
 8000d4e:	4b28      	ldr	r3, [pc, #160]	@ (8000df0 <SystemClock_Config+0xd8>)
 8000d50:	699b      	ldr	r3, [r3, #24]
 8000d52:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d5a:	bf00      	nop
 8000d5c:	4b24      	ldr	r3, [pc, #144]	@ (8000df0 <SystemClock_Config+0xd8>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d68:	d1f8      	bne.n	8000d5c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d6e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d72:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d74:	2302      	movs	r3, #2
 8000d76:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8000d80:	232c      	movs	r3, #44	@ 0x2c
 8000d82:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000d84:	2301      	movs	r3, #1
 8000d86:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d88:	2304      	movs	r3, #4
 8000d8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d90:	230c      	movs	r3, #12
 8000d92:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d94:	2300      	movs	r3, #0
 8000d96:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000da0:	4618      	mov	r0, r3
 8000da2:	f009 f815 	bl	8009dd0 <HAL_RCC_OscConfig>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000dac:	f001 fbf0 	bl	8002590 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000db0:	233f      	movs	r3, #63	@ 0x3f
 8000db2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000db4:	2303      	movs	r3, #3
 8000db6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000db8:	2300      	movs	r3, #0
 8000dba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000dbc:	2308      	movs	r3, #8
 8000dbe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000dc0:	2340      	movs	r3, #64	@ 0x40
 8000dc2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000dc4:	2340      	movs	r3, #64	@ 0x40
 8000dc6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000dc8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dcc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000dce:	2340      	movs	r3, #64	@ 0x40
 8000dd0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	2103      	movs	r1, #3
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f009 fbd4 	bl	800a584 <HAL_RCC_ClockConfig>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000de2:	f001 fbd5 	bl	8002590 <Error_Handler>
  }
}
 8000de6:	bf00      	nop
 8000de8:	3770      	adds	r7, #112	@ 0x70
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	58024800 	.word	0x58024800

08000df4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b0ae      	sub	sp, #184	@ 0xb8
 8000df8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	22b8      	movs	r2, #184	@ 0xb8
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4618      	mov	r0, r3
 8000e02:	f012 fe55 	bl	8013ab0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SDMMC;
 8000e06:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8000e0a:	f04f 0300 	mov.w	r3, #0
 8000e0e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000e12:	2302      	movs	r3, #2
 8000e14:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000e16:	2310      	movs	r3, #16
 8000e18:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 1;
 8000e22:	2301      	movs	r3, #1
 8000e24:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000e26:	23c0      	movs	r3, #192	@ 0xc0
 8000e28:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000e32:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e36:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e3e:	463b      	mov	r3, r7
 8000e40:	4618      	mov	r0, r3
 8000e42:	f009 ff2b 	bl	800ac9c <HAL_RCCEx_PeriphCLKConfig>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8000e4c:	f001 fba0 	bl	8002590 <Error_Handler>
  }
}
 8000e50:	bf00      	nop
 8000e52:	37b8      	adds	r7, #184	@ 0xb8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08c      	sub	sp, #48	@ 0x30
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	2224      	movs	r2, #36	@ 0x24
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4618      	mov	r0, r3
 8000e72:	f012 fe1d 	bl	8013ab0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e76:	4b41      	ldr	r3, [pc, #260]	@ (8000f7c <MX_ADC1_Init+0x124>)
 8000e78:	4a41      	ldr	r2, [pc, #260]	@ (8000f80 <MX_ADC1_Init+0x128>)
 8000e7a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000e7c:	4b3f      	ldr	r3, [pc, #252]	@ (8000f7c <MX_ADC1_Init+0x124>)
 8000e7e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000e82:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e84:	4b3d      	ldr	r3, [pc, #244]	@ (8000f7c <MX_ADC1_Init+0x124>)
 8000e86:	2208      	movs	r2, #8
 8000e88:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e8a:	4b3c      	ldr	r3, [pc, #240]	@ (8000f7c <MX_ADC1_Init+0x124>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000e90:	4b3a      	ldr	r3, [pc, #232]	@ (8000f7c <MX_ADC1_Init+0x124>)
 8000e92:	2208      	movs	r2, #8
 8000e94:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e96:	4b39      	ldr	r3, [pc, #228]	@ (8000f7c <MX_ADC1_Init+0x124>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e9c:	4b37      	ldr	r3, [pc, #220]	@ (8000f7c <MX_ADC1_Init+0x124>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8000ea2:	4b36      	ldr	r3, [pc, #216]	@ (8000f7c <MX_ADC1_Init+0x124>)
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ea8:	4b34      	ldr	r3, [pc, #208]	@ (8000f7c <MX_ADC1_Init+0x124>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eb0:	4b32      	ldr	r3, [pc, #200]	@ (8000f7c <MX_ADC1_Init+0x124>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eb6:	4b31      	ldr	r3, [pc, #196]	@ (8000f7c <MX_ADC1_Init+0x124>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000ebc:	4b2f      	ldr	r3, [pc, #188]	@ (8000f7c <MX_ADC1_Init+0x124>)
 8000ebe:	2203      	movs	r2, #3
 8000ec0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ec2:	4b2e      	ldr	r3, [pc, #184]	@ (8000f7c <MX_ADC1_Init+0x124>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ec8:	4b2c      	ldr	r3, [pc, #176]	@ (8000f7c <MX_ADC1_Init+0x124>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000ece:	4b2b      	ldr	r3, [pc, #172]	@ (8000f7c <MX_ADC1_Init+0x124>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8000ed6:	4b29      	ldr	r3, [pc, #164]	@ (8000f7c <MX_ADC1_Init+0x124>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000edc:	4827      	ldr	r0, [pc, #156]	@ (8000f7c <MX_ADC1_Init+0x124>)
 8000ede:	f003 f8ef 	bl	80040c0 <HAL_ADC_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000ee8:	f001 fb52 	bl	8002590 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000eec:	2300      	movs	r3, #0
 8000eee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ef0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4821      	ldr	r0, [pc, #132]	@ (8000f7c <MX_ADC1_Init+0x124>)
 8000ef8:	f005 f8ce 	bl	8006098 <HAL_ADCEx_MultiModeConfigChannel>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000f02:	f001 fb45 	bl	8002590 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000f06:	4b1f      	ldr	r3, [pc, #124]	@ (8000f84 <MX_ADC1_Init+0x12c>)
 8000f08:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f0a:	2306      	movs	r3, #6
 8000f0c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8000f0e:	2305      	movs	r3, #5
 8000f10:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f12:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000f16:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f18:	2304      	movs	r3, #4
 8000f1a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000f20:	2300      	movs	r3, #0
 8000f22:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f26:	463b      	mov	r3, r7
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4814      	ldr	r0, [pc, #80]	@ (8000f7c <MX_ADC1_Init+0x124>)
 8000f2c:	f004 f804 	bl	8004f38 <HAL_ADC_ConfigChannel>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000f36:	f001 fb2b 	bl	8002590 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000f3a:	4b13      	ldr	r3, [pc, #76]	@ (8000f88 <MX_ADC1_Init+0x130>)
 8000f3c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f3e:	230c      	movs	r3, #12
 8000f40:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f42:	463b      	mov	r3, r7
 8000f44:	4619      	mov	r1, r3
 8000f46:	480d      	ldr	r0, [pc, #52]	@ (8000f7c <MX_ADC1_Init+0x124>)
 8000f48:	f003 fff6 	bl	8004f38 <HAL_ADC_ConfigChannel>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000f52:	f001 fb1d 	bl	8002590 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000f56:	4b0d      	ldr	r3, [pc, #52]	@ (8000f8c <MX_ADC1_Init+0x134>)
 8000f58:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000f5a:	2312      	movs	r3, #18
 8000f5c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f5e:	463b      	mov	r3, r7
 8000f60:	4619      	mov	r1, r3
 8000f62:	4806      	ldr	r0, [pc, #24]	@ (8000f7c <MX_ADC1_Init+0x124>)
 8000f64:	f003 ffe8 	bl	8004f38 <HAL_ADC_ConfigChannel>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8000f6e:	f001 fb0f 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f72:	bf00      	nop
 8000f74:	3730      	adds	r7, #48	@ 0x30
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	240000ac 	.word	0x240000ac
 8000f80:	40022000 	.word	0x40022000
 8000f84:	10c00010 	.word	0x10c00010
 8000f88:	14f00020 	.word	0x14f00020
 8000f8c:	08600004 	.word	0x08600004

08000f90 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08a      	sub	sp, #40	@ 0x28
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	2224      	movs	r2, #36	@ 0x24
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f012 fd87 	bl	8013ab0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000fa2:	4b2c      	ldr	r3, [pc, #176]	@ (8001054 <MX_ADC2_Init+0xc4>)
 8000fa4:	4a2c      	ldr	r2, [pc, #176]	@ (8001058 <MX_ADC2_Init+0xc8>)
 8000fa6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000fa8:	4b2a      	ldr	r3, [pc, #168]	@ (8001054 <MX_ADC2_Init+0xc4>)
 8000faa:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000fae:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000fb0:	4b28      	ldr	r3, [pc, #160]	@ (8001054 <MX_ADC2_Init+0xc4>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fb6:	4b27      	ldr	r3, [pc, #156]	@ (8001054 <MX_ADC2_Init+0xc4>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fbc:	4b25      	ldr	r3, [pc, #148]	@ (8001054 <MX_ADC2_Init+0xc4>)
 8000fbe:	2204      	movs	r2, #4
 8000fc0:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000fc2:	4b24      	ldr	r3, [pc, #144]	@ (8001054 <MX_ADC2_Init+0xc4>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000fc8:	4b22      	ldr	r3, [pc, #136]	@ (8001054 <MX_ADC2_Init+0xc4>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000fce:	4b21      	ldr	r3, [pc, #132]	@ (8001054 <MX_ADC2_Init+0xc4>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000fd4:	4b1f      	ldr	r3, [pc, #124]	@ (8001054 <MX_ADC2_Init+0xc4>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fdc:	4b1d      	ldr	r3, [pc, #116]	@ (8001054 <MX_ADC2_Init+0xc4>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fe2:	4b1c      	ldr	r3, [pc, #112]	@ (8001054 <MX_ADC2_Init+0xc4>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000fe8:	4b1a      	ldr	r3, [pc, #104]	@ (8001054 <MX_ADC2_Init+0xc4>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fee:	4b19      	ldr	r3, [pc, #100]	@ (8001054 <MX_ADC2_Init+0xc4>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ff4:	4b17      	ldr	r3, [pc, #92]	@ (8001054 <MX_ADC2_Init+0xc4>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000ffa:	4b16      	ldr	r3, [pc, #88]	@ (8001054 <MX_ADC2_Init+0xc4>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8001002:	4b14      	ldr	r3, [pc, #80]	@ (8001054 <MX_ADC2_Init+0xc4>)
 8001004:	2201      	movs	r2, #1
 8001006:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001008:	4812      	ldr	r0, [pc, #72]	@ (8001054 <MX_ADC2_Init+0xc4>)
 800100a:	f003 f859 	bl	80040c0 <HAL_ADC_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8001014:	f001 fabc 	bl	8002590 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001018:	4b10      	ldr	r3, [pc, #64]	@ (800105c <MX_ADC2_Init+0xcc>)
 800101a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800101c:	2306      	movs	r3, #6
 800101e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001020:	2300      	movs	r3, #0
 8001022:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001024:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001028:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800102a:	2304      	movs	r3, #4
 800102c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001032:	2300      	movs	r3, #0
 8001034:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	4619      	mov	r1, r3
 800103c:	4805      	ldr	r0, [pc, #20]	@ (8001054 <MX_ADC2_Init+0xc4>)
 800103e:	f003 ff7b 	bl	8004f38 <HAL_ADC_ConfigChannel>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_ADC2_Init+0xbc>
  {
    Error_Handler();
 8001048:	f001 faa2 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800104c:	bf00      	nop
 800104e:	3728      	adds	r7, #40	@ 0x28
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	2400011c 	.word	0x2400011c
 8001058:	40022100 	.word	0x40022100
 800105c:	25b00200 	.word	0x25b00200

08001060 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001066:	4b3b      	ldr	r3, [pc, #236]	@ (8001154 <MX_FDCAN1_Init+0xf4>)
 8001068:	4a3b      	ldr	r2, [pc, #236]	@ (8001158 <MX_FDCAN1_Init+0xf8>)
 800106a:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800106c:	4b39      	ldr	r3, [pc, #228]	@ (8001154 <MX_FDCAN1_Init+0xf4>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001072:	4b38      	ldr	r3, [pc, #224]	@ (8001154 <MX_FDCAN1_Init+0xf4>)
 8001074:	2200      	movs	r2, #0
 8001076:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8001078:	4b36      	ldr	r3, [pc, #216]	@ (8001154 <MX_FDCAN1_Init+0xf4>)
 800107a:	2201      	movs	r2, #1
 800107c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800107e:	4b35      	ldr	r3, [pc, #212]	@ (8001154 <MX_FDCAN1_Init+0xf4>)
 8001080:	2200      	movs	r2, #0
 8001082:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001084:	4b33      	ldr	r3, [pc, #204]	@ (8001154 <MX_FDCAN1_Init+0xf4>)
 8001086:	2200      	movs	r2, #0
 8001088:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 6;
 800108a:	4b32      	ldr	r3, [pc, #200]	@ (8001154 <MX_FDCAN1_Init+0xf4>)
 800108c:	2206      	movs	r2, #6
 800108e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001090:	4b30      	ldr	r3, [pc, #192]	@ (8001154 <MX_FDCAN1_Init+0xf4>)
 8001092:	2201      	movs	r2, #1
 8001094:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8001096:	4b2f      	ldr	r3, [pc, #188]	@ (8001154 <MX_FDCAN1_Init+0xf4>)
 8001098:	2202      	movs	r2, #2
 800109a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 800109c:	4b2d      	ldr	r3, [pc, #180]	@ (8001154 <MX_FDCAN1_Init+0xf4>)
 800109e:	2205      	movs	r2, #5
 80010a0:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80010a2:	4b2c      	ldr	r3, [pc, #176]	@ (8001154 <MX_FDCAN1_Init+0xf4>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80010a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001154 <MX_FDCAN1_Init+0xf4>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80010ae:	4b29      	ldr	r3, [pc, #164]	@ (8001154 <MX_FDCAN1_Init+0xf4>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80010b4:	4b27      	ldr	r3, [pc, #156]	@ (8001154 <MX_FDCAN1_Init+0xf4>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80010ba:	4b26      	ldr	r3, [pc, #152]	@ (8001154 <MX_FDCAN1_Init+0xf4>)
 80010bc:	2200      	movs	r2, #0
 80010be:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 80010c0:	4b24      	ldr	r3, [pc, #144]	@ (8001154 <MX_FDCAN1_Init+0xf4>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 1;
 80010c6:	4b23      	ldr	r3, [pc, #140]	@ (8001154 <MX_FDCAN1_Init+0xf4>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 80010cc:	4b21      	ldr	r3, [pc, #132]	@ (8001154 <MX_FDCAN1_Init+0xf4>)
 80010ce:	2220      	movs	r2, #32
 80010d0:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80010d2:	4b20      	ldr	r3, [pc, #128]	@ (8001154 <MX_FDCAN1_Init+0xf4>)
 80010d4:	2204      	movs	r2, #4
 80010d6:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 80010d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001154 <MX_FDCAN1_Init+0xf4>)
 80010da:	2220      	movs	r2, #32
 80010dc:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80010de:	4b1d      	ldr	r3, [pc, #116]	@ (8001154 <MX_FDCAN1_Init+0xf4>)
 80010e0:	2204      	movs	r2, #4
 80010e2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80010e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001154 <MX_FDCAN1_Init+0xf4>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80010ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001154 <MX_FDCAN1_Init+0xf4>)
 80010ec:	2204      	movs	r2, #4
 80010ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80010f0:	4b18      	ldr	r3, [pc, #96]	@ (8001154 <MX_FDCAN1_Init+0xf4>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80010f6:	4b17      	ldr	r3, [pc, #92]	@ (8001154 <MX_FDCAN1_Init+0xf4>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 80010fc:	4b15      	ldr	r3, [pc, #84]	@ (8001154 <MX_FDCAN1_Init+0xf4>)
 80010fe:	2220      	movs	r2, #32
 8001100:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001102:	4b14      	ldr	r3, [pc, #80]	@ (8001154 <MX_FDCAN1_Init+0xf4>)
 8001104:	2200      	movs	r2, #0
 8001106:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001108:	4b12      	ldr	r3, [pc, #72]	@ (8001154 <MX_FDCAN1_Init+0xf4>)
 800110a:	2204      	movs	r2, #4
 800110c:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800110e:	4811      	ldr	r0, [pc, #68]	@ (8001154 <MX_FDCAN1_Init+0xf4>)
 8001110:	f007 fa88 	bl	8008624 <HAL_FDCAN_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 800111a:	f001 fa39 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800111e:	2300      	movs	r3, #0
 8001120:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001126:	2302      	movs	r3, #2
 8001128:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800112a:	2301      	movs	r3, #1
 800112c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8001136:	463b      	mov	r3, r7
 8001138:	4619      	mov	r1, r3
 800113a:	4806      	ldr	r0, [pc, #24]	@ (8001154 <MX_FDCAN1_Init+0xf4>)
 800113c:	f007 fc50 	bl	80089e0 <HAL_FDCAN_ConfigFilter>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_FDCAN1_Init+0xea>
	{
		Error_Handler();
 8001146:	f001 fa23 	bl	8002590 <Error_Handler>
	}
  /* USER CODE END FDCAN1_Init 2 */

}
 800114a:	bf00      	nop
 800114c:	3720      	adds	r7, #32
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	24000204 	.word	0x24000204
 8001158:	4000a000 	.word	0x4000a000

0800115c <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001162:	4b3b      	ldr	r3, [pc, #236]	@ (8001250 <MX_FDCAN2_Init+0xf4>)
 8001164:	4a3b      	ldr	r2, [pc, #236]	@ (8001254 <MX_FDCAN2_Init+0xf8>)
 8001166:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001168:	4b39      	ldr	r3, [pc, #228]	@ (8001250 <MX_FDCAN2_Init+0xf4>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800116e:	4b38      	ldr	r3, [pc, #224]	@ (8001250 <MX_FDCAN2_Init+0xf4>)
 8001170:	2200      	movs	r2, #0
 8001172:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001174:	4b36      	ldr	r3, [pc, #216]	@ (8001250 <MX_FDCAN2_Init+0xf4>)
 8001176:	2200      	movs	r2, #0
 8001178:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 800117a:	4b35      	ldr	r3, [pc, #212]	@ (8001250 <MX_FDCAN2_Init+0xf4>)
 800117c:	2200      	movs	r2, #0
 800117e:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001180:	4b33      	ldr	r3, [pc, #204]	@ (8001250 <MX_FDCAN2_Init+0xf4>)
 8001182:	2200      	movs	r2, #0
 8001184:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 6;
 8001186:	4b32      	ldr	r3, [pc, #200]	@ (8001250 <MX_FDCAN2_Init+0xf4>)
 8001188:	2206      	movs	r2, #6
 800118a:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 800118c:	4b30      	ldr	r3, [pc, #192]	@ (8001250 <MX_FDCAN2_Init+0xf4>)
 800118e:	2201      	movs	r2, #1
 8001190:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8001192:	4b2f      	ldr	r3, [pc, #188]	@ (8001250 <MX_FDCAN2_Init+0xf4>)
 8001194:	2202      	movs	r2, #2
 8001196:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 5;
 8001198:	4b2d      	ldr	r3, [pc, #180]	@ (8001250 <MX_FDCAN2_Init+0xf4>)
 800119a:	2205      	movs	r2, #5
 800119c:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 800119e:	4b2c      	ldr	r3, [pc, #176]	@ (8001250 <MX_FDCAN2_Init+0xf4>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80011a4:	4b2a      	ldr	r3, [pc, #168]	@ (8001250 <MX_FDCAN2_Init+0xf4>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80011aa:	4b29      	ldr	r3, [pc, #164]	@ (8001250 <MX_FDCAN2_Init+0xf4>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80011b0:	4b27      	ldr	r3, [pc, #156]	@ (8001250 <MX_FDCAN2_Init+0xf4>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 80011b6:	4b26      	ldr	r3, [pc, #152]	@ (8001250 <MX_FDCAN2_Init+0xf4>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 1;
 80011bc:	4b24      	ldr	r3, [pc, #144]	@ (8001250 <MX_FDCAN2_Init+0xf4>)
 80011be:	2201      	movs	r2, #1
 80011c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 1;
 80011c2:	4b23      	ldr	r3, [pc, #140]	@ (8001250 <MX_FDCAN2_Init+0xf4>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 16;
 80011c8:	4b21      	ldr	r3, [pc, #132]	@ (8001250 <MX_FDCAN2_Init+0xf4>)
 80011ca:	2210      	movs	r2, #16
 80011cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80011ce:	4b20      	ldr	r3, [pc, #128]	@ (8001250 <MX_FDCAN2_Init+0xf4>)
 80011d0:	2204      	movs	r2, #4
 80011d2:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 16;
 80011d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001250 <MX_FDCAN2_Init+0xf4>)
 80011d6:	2210      	movs	r2, #16
 80011d8:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80011da:	4b1d      	ldr	r3, [pc, #116]	@ (8001250 <MX_FDCAN2_Init+0xf4>)
 80011dc:	2204      	movs	r2, #4
 80011de:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 80011e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001250 <MX_FDCAN2_Init+0xf4>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80011e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001250 <MX_FDCAN2_Init+0xf4>)
 80011e8:	2204      	movs	r2, #4
 80011ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 80011ec:	4b18      	ldr	r3, [pc, #96]	@ (8001250 <MX_FDCAN2_Init+0xf4>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 80011f2:	4b17      	ldr	r3, [pc, #92]	@ (8001250 <MX_FDCAN2_Init+0xf4>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 16;
 80011f8:	4b15      	ldr	r3, [pc, #84]	@ (8001250 <MX_FDCAN2_Init+0xf4>)
 80011fa:	2210      	movs	r2, #16
 80011fc:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80011fe:	4b14      	ldr	r3, [pc, #80]	@ (8001250 <MX_FDCAN2_Init+0xf4>)
 8001200:	2200      	movs	r2, #0
 8001202:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001204:	4b12      	ldr	r3, [pc, #72]	@ (8001250 <MX_FDCAN2_Init+0xf4>)
 8001206:	2204      	movs	r2, #4
 8001208:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 800120a:	4811      	ldr	r0, [pc, #68]	@ (8001250 <MX_FDCAN2_Init+0xf4>)
 800120c:	f007 fa0a 	bl	8008624 <HAL_FDCAN_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_FDCAN2_Init+0xbe>
  {
    Error_Handler();
 8001216:	f001 f9bb 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 800121a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800121e:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001224:	2302      	movs	r3, #2
 8001226:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001228:	2301      	movs	r3, #1
 800122a:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 800122c:	2300      	movs	r3, #0
 800122e:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 8001234:	463b      	mov	r3, r7
 8001236:	4619      	mov	r1, r3
 8001238:	4805      	ldr	r0, [pc, #20]	@ (8001250 <MX_FDCAN2_Init+0xf4>)
 800123a:	f007 fbd1 	bl	80089e0 <HAL_FDCAN_ConfigFilter>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_FDCAN2_Init+0xec>
	{
		Error_Handler();
 8001244:	f001 f9a4 	bl	8002590 <Error_Handler>
	}
  /* USER CODE END FDCAN2_Init 2 */

}
 8001248:	bf00      	nop
 800124a:	3720      	adds	r7, #32
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	240002a4 	.word	0x240002a4
 8001254:	4000a400 	.word	0x4000a400

08001258 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b088      	sub	sp, #32
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 800125e:	4b3b      	ldr	r3, [pc, #236]	@ (800134c <MX_FDCAN3_Init+0xf4>)
 8001260:	4a3b      	ldr	r2, [pc, #236]	@ (8001350 <MX_FDCAN3_Init+0xf8>)
 8001262:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001264:	4b39      	ldr	r3, [pc, #228]	@ (800134c <MX_FDCAN3_Init+0xf4>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 800126a:	4b38      	ldr	r3, [pc, #224]	@ (800134c <MX_FDCAN3_Init+0xf4>)
 800126c:	2200      	movs	r2, #0
 800126e:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8001270:	4b36      	ldr	r3, [pc, #216]	@ (800134c <MX_FDCAN3_Init+0xf4>)
 8001272:	2200      	movs	r2, #0
 8001274:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8001276:	4b35      	ldr	r3, [pc, #212]	@ (800134c <MX_FDCAN3_Init+0xf4>)
 8001278:	2200      	movs	r2, #0
 800127a:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 800127c:	4b33      	ldr	r3, [pc, #204]	@ (800134c <MX_FDCAN3_Init+0xf4>)
 800127e:	2200      	movs	r2, #0
 8001280:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 6;
 8001282:	4b32      	ldr	r3, [pc, #200]	@ (800134c <MX_FDCAN3_Init+0xf4>)
 8001284:	2206      	movs	r2, #6
 8001286:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8001288:	4b30      	ldr	r3, [pc, #192]	@ (800134c <MX_FDCAN3_Init+0xf4>)
 800128a:	2201      	movs	r2, #1
 800128c:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 800128e:	4b2f      	ldr	r3, [pc, #188]	@ (800134c <MX_FDCAN3_Init+0xf4>)
 8001290:	2202      	movs	r2, #2
 8001292:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 5;
 8001294:	4b2d      	ldr	r3, [pc, #180]	@ (800134c <MX_FDCAN3_Init+0xf4>)
 8001296:	2205      	movs	r2, #5
 8001298:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 800129a:	4b2c      	ldr	r3, [pc, #176]	@ (800134c <MX_FDCAN3_Init+0xf4>)
 800129c:	2201      	movs	r2, #1
 800129e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 80012a0:	4b2a      	ldr	r3, [pc, #168]	@ (800134c <MX_FDCAN3_Init+0xf4>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 80012a6:	4b29      	ldr	r3, [pc, #164]	@ (800134c <MX_FDCAN3_Init+0xf4>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 80012ac:	4b27      	ldr	r3, [pc, #156]	@ (800134c <MX_FDCAN3_Init+0xf4>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 80012b2:	4b26      	ldr	r3, [pc, #152]	@ (800134c <MX_FDCAN3_Init+0xf4>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan3.Init.StdFiltersNbr = 1;
 80012b8:	4b24      	ldr	r3, [pc, #144]	@ (800134c <MX_FDCAN3_Init+0xf4>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan3.Init.ExtFiltersNbr = 1;
 80012be:	4b23      	ldr	r3, [pc, #140]	@ (800134c <MX_FDCAN3_Init+0xf4>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 16;
 80012c4:	4b21      	ldr	r3, [pc, #132]	@ (800134c <MX_FDCAN3_Init+0xf4>)
 80012c6:	2210      	movs	r2, #16
 80012c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80012ca:	4b20      	ldr	r3, [pc, #128]	@ (800134c <MX_FDCAN3_Init+0xf4>)
 80012cc:	2204      	movs	r2, #4
 80012ce:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 16;
 80012d0:	4b1e      	ldr	r3, [pc, #120]	@ (800134c <MX_FDCAN3_Init+0xf4>)
 80012d2:	2210      	movs	r2, #16
 80012d4:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80012d6:	4b1d      	ldr	r3, [pc, #116]	@ (800134c <MX_FDCAN3_Init+0xf4>)
 80012d8:	2204      	movs	r2, #4
 80012da:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 80012dc:	4b1b      	ldr	r3, [pc, #108]	@ (800134c <MX_FDCAN3_Init+0xf4>)
 80012de:	2200      	movs	r2, #0
 80012e0:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80012e2:	4b1a      	ldr	r3, [pc, #104]	@ (800134c <MX_FDCAN3_Init+0xf4>)
 80012e4:	2204      	movs	r2, #4
 80012e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 80012e8:	4b18      	ldr	r3, [pc, #96]	@ (800134c <MX_FDCAN3_Init+0xf4>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 80012ee:	4b17      	ldr	r3, [pc, #92]	@ (800134c <MX_FDCAN3_Init+0xf4>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 16;
 80012f4:	4b15      	ldr	r3, [pc, #84]	@ (800134c <MX_FDCAN3_Init+0xf4>)
 80012f6:	2210      	movs	r2, #16
 80012f8:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80012fa:	4b14      	ldr	r3, [pc, #80]	@ (800134c <MX_FDCAN3_Init+0xf4>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001300:	4b12      	ldr	r3, [pc, #72]	@ (800134c <MX_FDCAN3_Init+0xf4>)
 8001302:	2204      	movs	r2, #4
 8001304:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8001306:	4811      	ldr	r0, [pc, #68]	@ (800134c <MX_FDCAN3_Init+0xf4>)
 8001308:	f007 f98c 	bl	8008624 <HAL_FDCAN_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_FDCAN3_Init+0xbe>
  {
    Error_Handler();
 8001312:	f001 f93d 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8001316:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800131a:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001320:	2302      	movs	r3, #2
 8001322:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001324:	2301      	movs	r3, #1
 8001326:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 8001328:	2300      	movs	r3, #0
 800132a:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan3, &sFilterConfig) != HAL_OK)
 8001330:	463b      	mov	r3, r7
 8001332:	4619      	mov	r1, r3
 8001334:	4805      	ldr	r0, [pc, #20]	@ (800134c <MX_FDCAN3_Init+0xf4>)
 8001336:	f007 fb53 	bl	80089e0 <HAL_FDCAN_ConfigFilter>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_FDCAN3_Init+0xec>
	{
		Error_Handler();
 8001340:	f001 f926 	bl	8002590 <Error_Handler>
	}

  /* USER CODE END FDCAN3_Init 2 */

}
 8001344:	bf00      	nop
 8001346:	3720      	adds	r7, #32
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	24000344 	.word	0x24000344
 8001350:	4000d400 	.word	0x4000d400

08001354 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001358:	4b0b      	ldr	r3, [pc, #44]	@ (8001388 <MX_SDMMC1_SD_Init+0x34>)
 800135a:	4a0c      	ldr	r2, [pc, #48]	@ (800138c <MX_SDMMC1_SD_Init+0x38>)
 800135c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800135e:	4b0a      	ldr	r3, [pc, #40]	@ (8001388 <MX_SDMMC1_SD_Init+0x34>)
 8001360:	2200      	movs	r2, #0
 8001362:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001364:	4b08      	ldr	r3, [pc, #32]	@ (8001388 <MX_SDMMC1_SD_Init+0x34>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800136a:	4b07      	ldr	r3, [pc, #28]	@ (8001388 <MX_SDMMC1_SD_Init+0x34>)
 800136c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001370:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001372:	4b05      	ldr	r3, [pc, #20]	@ (8001388 <MX_SDMMC1_SD_Init+0x34>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 2;
 8001378:	4b03      	ldr	r3, [pc, #12]	@ (8001388 <MX_SDMMC1_SD_Init+0x34>)
 800137a:	2202      	movs	r2, #2
 800137c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	240003e4 	.word	0x240003e4
 800138c:	52007000 	.word	0x52007000

08001390 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001394:	4b27      	ldr	r3, [pc, #156]	@ (8001434 <MX_SPI2_Init+0xa4>)
 8001396:	4a28      	ldr	r2, [pc, #160]	@ (8001438 <MX_SPI2_Init+0xa8>)
 8001398:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800139a:	4b26      	ldr	r3, [pc, #152]	@ (8001434 <MX_SPI2_Init+0xa4>)
 800139c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80013a0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80013a2:	4b24      	ldr	r3, [pc, #144]	@ (8001434 <MX_SPI2_Init+0xa4>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80013a8:	4b22      	ldr	r3, [pc, #136]	@ (8001434 <MX_SPI2_Init+0xa4>)
 80013aa:	2207      	movs	r2, #7
 80013ac:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013ae:	4b21      	ldr	r3, [pc, #132]	@ (8001434 <MX_SPI2_Init+0xa4>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001434 <MX_SPI2_Init+0xa4>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80013ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001434 <MX_SPI2_Init+0xa4>)
 80013bc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80013c0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80013c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001434 <MX_SPI2_Init+0xa4>)
 80013c4:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80013c8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001434 <MX_SPI2_Init+0xa4>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013d0:	4b18      	ldr	r3, [pc, #96]	@ (8001434 <MX_SPI2_Init+0xa4>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013d6:	4b17      	ldr	r3, [pc, #92]	@ (8001434 <MX_SPI2_Init+0xa4>)
 80013d8:	2200      	movs	r2, #0
 80013da:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80013dc:	4b15      	ldr	r3, [pc, #84]	@ (8001434 <MX_SPI2_Init+0xa4>)
 80013de:	2200      	movs	r2, #0
 80013e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80013e2:	4b14      	ldr	r3, [pc, #80]	@ (8001434 <MX_SPI2_Init+0xa4>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80013e8:	4b12      	ldr	r3, [pc, #72]	@ (8001434 <MX_SPI2_Init+0xa4>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80013ee:	4b11      	ldr	r3, [pc, #68]	@ (8001434 <MX_SPI2_Init+0xa4>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001434 <MX_SPI2_Init+0xa4>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001434 <MX_SPI2_Init+0xa4>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001400:	4b0c      	ldr	r3, [pc, #48]	@ (8001434 <MX_SPI2_Init+0xa4>)
 8001402:	2200      	movs	r2, #0
 8001404:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001406:	4b0b      	ldr	r3, [pc, #44]	@ (8001434 <MX_SPI2_Init+0xa4>)
 8001408:	2200      	movs	r2, #0
 800140a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800140c:	4b09      	ldr	r3, [pc, #36]	@ (8001434 <MX_SPI2_Init+0xa4>)
 800140e:	2200      	movs	r2, #0
 8001410:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001412:	4b08      	ldr	r3, [pc, #32]	@ (8001434 <MX_SPI2_Init+0xa4>)
 8001414:	2200      	movs	r2, #0
 8001416:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001418:	4b06      	ldr	r3, [pc, #24]	@ (8001434 <MX_SPI2_Init+0xa4>)
 800141a:	2200      	movs	r2, #0
 800141c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800141e:	4805      	ldr	r0, [pc, #20]	@ (8001434 <MX_SPI2_Init+0xa4>)
 8001420:	f00d fc86 	bl	800ed30 <HAL_SPI_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 800142a:	f001 f8b1 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	24000460 	.word	0x24000460
 8001438:	40003800 	.word	0x40003800

0800143c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b09c      	sub	sp, #112	@ 0x70
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001442:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001450:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800145c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
 800146c:	615a      	str	r2, [r3, #20]
 800146e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001470:	1d3b      	adds	r3, r7, #4
 8001472:	2234      	movs	r2, #52	@ 0x34
 8001474:	2100      	movs	r1, #0
 8001476:	4618      	mov	r0, r3
 8001478:	f012 fb1a 	bl	8013ab0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800147c:	4b49      	ldr	r3, [pc, #292]	@ (80015a4 <MX_TIM1_Init+0x168>)
 800147e:	4a4a      	ldr	r2, [pc, #296]	@ (80015a8 <MX_TIM1_Init+0x16c>)
 8001480:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001482:	4b48      	ldr	r3, [pc, #288]	@ (80015a4 <MX_TIM1_Init+0x168>)
 8001484:	2200      	movs	r2, #0
 8001486:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001488:	4b46      	ldr	r3, [pc, #280]	@ (80015a4 <MX_TIM1_Init+0x168>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800148e:	4b45      	ldr	r3, [pc, #276]	@ (80015a4 <MX_TIM1_Init+0x168>)
 8001490:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001494:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001496:	4b43      	ldr	r3, [pc, #268]	@ (80015a4 <MX_TIM1_Init+0x168>)
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800149c:	4b41      	ldr	r3, [pc, #260]	@ (80015a4 <MX_TIM1_Init+0x168>)
 800149e:	2200      	movs	r2, #0
 80014a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014a2:	4b40      	ldr	r3, [pc, #256]	@ (80015a4 <MX_TIM1_Init+0x168>)
 80014a4:	2280      	movs	r2, #128	@ 0x80
 80014a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014a8:	483e      	ldr	r0, [pc, #248]	@ (80015a4 <MX_TIM1_Init+0x168>)
 80014aa:	f00e fde8 	bl	801007e <HAL_TIM_Base_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80014b4:	f001 f86c 	bl	8002590 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014bc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014be:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80014c2:	4619      	mov	r1, r3
 80014c4:	4837      	ldr	r0, [pc, #220]	@ (80015a4 <MX_TIM1_Init+0x168>)
 80014c6:	f00f f933 	bl	8010730 <HAL_TIM_ConfigClockSource>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80014d0:	f001 f85e 	bl	8002590 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014d4:	4833      	ldr	r0, [pc, #204]	@ (80015a4 <MX_TIM1_Init+0x168>)
 80014d6:	f00e feaf 	bl	8010238 <HAL_TIM_PWM_Init>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80014e0:	f001 f856 	bl	8002590 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e4:	2300      	movs	r3, #0
 80014e6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014e8:	2300      	movs	r3, #0
 80014ea:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ec:	2300      	movs	r3, #0
 80014ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014f0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80014f4:	4619      	mov	r1, r3
 80014f6:	482b      	ldr	r0, [pc, #172]	@ (80015a4 <MX_TIM1_Init+0x168>)
 80014f8:	f00f fe60 	bl	80111bc <HAL_TIMEx_MasterConfigSynchronization>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001502:	f001 f845 	bl	8002590 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001506:	2360      	movs	r3, #96	@ 0x60
 8001508:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800150e:	2300      	movs	r3, #0
 8001510:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001512:	2300      	movs	r3, #0
 8001514:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001516:	2300      	movs	r3, #0
 8001518:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800151a:	2300      	movs	r3, #0
 800151c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800151e:	2300      	movs	r3, #0
 8001520:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001522:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001526:	2200      	movs	r2, #0
 8001528:	4619      	mov	r1, r3
 800152a:	481e      	ldr	r0, [pc, #120]	@ (80015a4 <MX_TIM1_Init+0x168>)
 800152c:	f00e ffec 	bl	8010508 <HAL_TIM_PWM_ConfigChannel>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001536:	f001 f82b 	bl	8002590 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800153a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800153e:	2204      	movs	r2, #4
 8001540:	4619      	mov	r1, r3
 8001542:	4818      	ldr	r0, [pc, #96]	@ (80015a4 <MX_TIM1_Init+0x168>)
 8001544:	f00e ffe0 	bl	8010508 <HAL_TIM_PWM_ConfigChannel>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800154e:	f001 f81f 	bl	8002590 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001552:	2300      	movs	r3, #0
 8001554:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001556:	2300      	movs	r3, #0
 8001558:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001566:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800156a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001570:	2300      	movs	r3, #0
 8001572:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001574:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001578:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800157e:	2300      	movs	r3, #0
 8001580:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	4619      	mov	r1, r3
 8001586:	4807      	ldr	r0, [pc, #28]	@ (80015a4 <MX_TIM1_Init+0x168>)
 8001588:	f00f feb4 	bl	80112f4 <HAL_TIMEx_ConfigBreakDeadTime>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001592:	f000 fffd 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001596:	4803      	ldr	r0, [pc, #12]	@ (80015a4 <MX_TIM1_Init+0x168>)
 8001598:	f001 ff5a 	bl	8003450 <HAL_TIM_MspPostInit>

}
 800159c:	bf00      	nop
 800159e:	3770      	adds	r7, #112	@ 0x70
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	240004e8 	.word	0x240004e8
 80015a8:	40010000 	.word	0x40010000

080015ac <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80015b0:	4b10      	ldr	r3, [pc, #64]	@ (80015f4 <MX_TIM16_Init+0x48>)
 80015b2:	4a11      	ldr	r2, [pc, #68]	@ (80015f8 <MX_TIM16_Init+0x4c>)
 80015b4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 528;
 80015b6:	4b0f      	ldr	r3, [pc, #60]	@ (80015f4 <MX_TIM16_Init+0x48>)
 80015b8:	f44f 7204 	mov.w	r2, #528	@ 0x210
 80015bc:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015be:	4b0d      	ldr	r3, [pc, #52]	@ (80015f4 <MX_TIM16_Init+0x48>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000 - 1;
 80015c4:	4b0b      	ldr	r3, [pc, #44]	@ (80015f4 <MX_TIM16_Init+0x48>)
 80015c6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80015ca:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015cc:	4b09      	ldr	r3, [pc, #36]	@ (80015f4 <MX_TIM16_Init+0x48>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80015d2:	4b08      	ldr	r3, [pc, #32]	@ (80015f4 <MX_TIM16_Init+0x48>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d8:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <MX_TIM16_Init+0x48>)
 80015da:	2200      	movs	r2, #0
 80015dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80015de:	4805      	ldr	r0, [pc, #20]	@ (80015f4 <MX_TIM16_Init+0x48>)
 80015e0:	f00e fd4d 	bl	801007e <HAL_TIM_Base_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80015ea:	f000 ffd1 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	24000534 	.word	0x24000534
 80015f8:	40014400 	.word	0x40014400

080015fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001600:	4b22      	ldr	r3, [pc, #136]	@ (800168c <MX_USART1_UART_Init+0x90>)
 8001602:	4a23      	ldr	r2, [pc, #140]	@ (8001690 <MX_USART1_UART_Init+0x94>)
 8001604:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001606:	4b21      	ldr	r3, [pc, #132]	@ (800168c <MX_USART1_UART_Init+0x90>)
 8001608:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800160c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800160e:	4b1f      	ldr	r3, [pc, #124]	@ (800168c <MX_USART1_UART_Init+0x90>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001614:	4b1d      	ldr	r3, [pc, #116]	@ (800168c <MX_USART1_UART_Init+0x90>)
 8001616:	2200      	movs	r2, #0
 8001618:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800161a:	4b1c      	ldr	r3, [pc, #112]	@ (800168c <MX_USART1_UART_Init+0x90>)
 800161c:	2200      	movs	r2, #0
 800161e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001620:	4b1a      	ldr	r3, [pc, #104]	@ (800168c <MX_USART1_UART_Init+0x90>)
 8001622:	220c      	movs	r2, #12
 8001624:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001626:	4b19      	ldr	r3, [pc, #100]	@ (800168c <MX_USART1_UART_Init+0x90>)
 8001628:	2200      	movs	r2, #0
 800162a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800162c:	4b17      	ldr	r3, [pc, #92]	@ (800168c <MX_USART1_UART_Init+0x90>)
 800162e:	2200      	movs	r2, #0
 8001630:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001632:	4b16      	ldr	r3, [pc, #88]	@ (800168c <MX_USART1_UART_Init+0x90>)
 8001634:	2200      	movs	r2, #0
 8001636:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001638:	4b14      	ldr	r3, [pc, #80]	@ (800168c <MX_USART1_UART_Init+0x90>)
 800163a:	2200      	movs	r2, #0
 800163c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800163e:	4b13      	ldr	r3, [pc, #76]	@ (800168c <MX_USART1_UART_Init+0x90>)
 8001640:	2200      	movs	r2, #0
 8001642:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001644:	4811      	ldr	r0, [pc, #68]	@ (800168c <MX_USART1_UART_Init+0x90>)
 8001646:	f00f feff 	bl	8011448 <HAL_UART_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001650:	f000 ff9e 	bl	8002590 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001654:	2100      	movs	r1, #0
 8001656:	480d      	ldr	r0, [pc, #52]	@ (800168c <MX_USART1_UART_Init+0x90>)
 8001658:	f011 f899 	bl	801278e <HAL_UARTEx_SetTxFifoThreshold>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001662:	f000 ff95 	bl	8002590 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001666:	2100      	movs	r1, #0
 8001668:	4808      	ldr	r0, [pc, #32]	@ (800168c <MX_USART1_UART_Init+0x90>)
 800166a:	f011 f8ce 	bl	801280a <HAL_UARTEx_SetRxFifoThreshold>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001674:	f000 ff8c 	bl	8002590 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001678:	4804      	ldr	r0, [pc, #16]	@ (800168c <MX_USART1_UART_Init+0x90>)
 800167a:	f011 f84f 	bl	801271c <HAL_UARTEx_DisableFifoMode>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001684:	f000 ff84 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}
 800168c:	24000580 	.word	0x24000580
 8001690:	40011000 	.word	0x40011000

08001694 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001698:	4b22      	ldr	r3, [pc, #136]	@ (8001724 <MX_USART2_UART_Init+0x90>)
 800169a:	4a23      	ldr	r2, [pc, #140]	@ (8001728 <MX_USART2_UART_Init+0x94>)
 800169c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800169e:	4b21      	ldr	r3, [pc, #132]	@ (8001724 <MX_USART2_UART_Init+0x90>)
 80016a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001724 <MX_USART2_UART_Init+0x90>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001724 <MX_USART2_UART_Init+0x90>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001724 <MX_USART2_UART_Init+0x90>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001724 <MX_USART2_UART_Init+0x90>)
 80016ba:	220c      	movs	r2, #12
 80016bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016be:	4b19      	ldr	r3, [pc, #100]	@ (8001724 <MX_USART2_UART_Init+0x90>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c4:	4b17      	ldr	r3, [pc, #92]	@ (8001724 <MX_USART2_UART_Init+0x90>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ca:	4b16      	ldr	r3, [pc, #88]	@ (8001724 <MX_USART2_UART_Init+0x90>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016d0:	4b14      	ldr	r3, [pc, #80]	@ (8001724 <MX_USART2_UART_Init+0x90>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016d6:	4b13      	ldr	r3, [pc, #76]	@ (8001724 <MX_USART2_UART_Init+0x90>)
 80016d8:	2200      	movs	r2, #0
 80016da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016dc:	4811      	ldr	r0, [pc, #68]	@ (8001724 <MX_USART2_UART_Init+0x90>)
 80016de:	f00f feb3 	bl	8011448 <HAL_UART_Init>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80016e8:	f000 ff52 	bl	8002590 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016ec:	2100      	movs	r1, #0
 80016ee:	480d      	ldr	r0, [pc, #52]	@ (8001724 <MX_USART2_UART_Init+0x90>)
 80016f0:	f011 f84d 	bl	801278e <HAL_UARTEx_SetTxFifoThreshold>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80016fa:	f000 ff49 	bl	8002590 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016fe:	2100      	movs	r1, #0
 8001700:	4808      	ldr	r0, [pc, #32]	@ (8001724 <MX_USART2_UART_Init+0x90>)
 8001702:	f011 f882 	bl	801280a <HAL_UARTEx_SetRxFifoThreshold>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800170c:	f000 ff40 	bl	8002590 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001710:	4804      	ldr	r0, [pc, #16]	@ (8001724 <MX_USART2_UART_Init+0x90>)
 8001712:	f011 f803 	bl	801271c <HAL_UARTEx_DisableFifoMode>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800171c:	f000 ff38 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}
 8001724:	24000614 	.word	0x24000614
 8001728:	40004400 	.word	0x40004400

0800172c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001732:	4b0d      	ldr	r3, [pc, #52]	@ (8001768 <MX_DMA_Init+0x3c>)
 8001734:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001738:	4a0b      	ldr	r2, [pc, #44]	@ (8001768 <MX_DMA_Init+0x3c>)
 800173a:	f043 0301 	orr.w	r3, r3, #1
 800173e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001742:	4b09      	ldr	r3, [pc, #36]	@ (8001768 <MX_DMA_Init+0x3c>)
 8001744:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	607b      	str	r3, [r7, #4]
 800174e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001750:	2200      	movs	r2, #0
 8001752:	2100      	movs	r1, #0
 8001754:	200b      	movs	r0, #11
 8001756:	f004 fe5c 	bl	8006412 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800175a:	200b      	movs	r0, #11
 800175c:	f004 fe73 	bl	8006446 <HAL_NVIC_EnableIRQ>

}
 8001760:	bf00      	nop
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	58024400 	.word	0x58024400

0800176c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08e      	sub	sp, #56	@ 0x38
 8001770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001772:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]
 800177e:	60da      	str	r2, [r3, #12]
 8001780:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001782:	4b75      	ldr	r3, [pc, #468]	@ (8001958 <MX_GPIO_Init+0x1ec>)
 8001784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001788:	4a73      	ldr	r2, [pc, #460]	@ (8001958 <MX_GPIO_Init+0x1ec>)
 800178a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800178e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001792:	4b71      	ldr	r3, [pc, #452]	@ (8001958 <MX_GPIO_Init+0x1ec>)
 8001794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001798:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800179c:	623b      	str	r3, [r7, #32]
 800179e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a0:	4b6d      	ldr	r3, [pc, #436]	@ (8001958 <MX_GPIO_Init+0x1ec>)
 80017a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017a6:	4a6c      	ldr	r2, [pc, #432]	@ (8001958 <MX_GPIO_Init+0x1ec>)
 80017a8:	f043 0304 	orr.w	r3, r3, #4
 80017ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017b0:	4b69      	ldr	r3, [pc, #420]	@ (8001958 <MX_GPIO_Init+0x1ec>)
 80017b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017b6:	f003 0304 	and.w	r3, r3, #4
 80017ba:	61fb      	str	r3, [r7, #28]
 80017bc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017be:	4b66      	ldr	r3, [pc, #408]	@ (8001958 <MX_GPIO_Init+0x1ec>)
 80017c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017c4:	4a64      	ldr	r2, [pc, #400]	@ (8001958 <MX_GPIO_Init+0x1ec>)
 80017c6:	f043 0301 	orr.w	r3, r3, #1
 80017ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017ce:	4b62      	ldr	r3, [pc, #392]	@ (8001958 <MX_GPIO_Init+0x1ec>)
 80017d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	61bb      	str	r3, [r7, #24]
 80017da:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017dc:	4b5e      	ldr	r3, [pc, #376]	@ (8001958 <MX_GPIO_Init+0x1ec>)
 80017de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017e2:	4a5d      	ldr	r2, [pc, #372]	@ (8001958 <MX_GPIO_Init+0x1ec>)
 80017e4:	f043 0302 	orr.w	r3, r3, #2
 80017e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017ec:	4b5a      	ldr	r3, [pc, #360]	@ (8001958 <MX_GPIO_Init+0x1ec>)
 80017ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017fa:	4b57      	ldr	r3, [pc, #348]	@ (8001958 <MX_GPIO_Init+0x1ec>)
 80017fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001800:	4a55      	ldr	r2, [pc, #340]	@ (8001958 <MX_GPIO_Init+0x1ec>)
 8001802:	f043 0320 	orr.w	r3, r3, #32
 8001806:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800180a:	4b53      	ldr	r3, [pc, #332]	@ (8001958 <MX_GPIO_Init+0x1ec>)
 800180c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001810:	f003 0320 	and.w	r3, r3, #32
 8001814:	613b      	str	r3, [r7, #16]
 8001816:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001818:	4b4f      	ldr	r3, [pc, #316]	@ (8001958 <MX_GPIO_Init+0x1ec>)
 800181a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800181e:	4a4e      	ldr	r2, [pc, #312]	@ (8001958 <MX_GPIO_Init+0x1ec>)
 8001820:	f043 0310 	orr.w	r3, r3, #16
 8001824:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001828:	4b4b      	ldr	r3, [pc, #300]	@ (8001958 <MX_GPIO_Init+0x1ec>)
 800182a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800182e:	f003 0310 	and.w	r3, r3, #16
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001836:	4b48      	ldr	r3, [pc, #288]	@ (8001958 <MX_GPIO_Init+0x1ec>)
 8001838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800183c:	4a46      	ldr	r2, [pc, #280]	@ (8001958 <MX_GPIO_Init+0x1ec>)
 800183e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001842:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001846:	4b44      	ldr	r3, [pc, #272]	@ (8001958 <MX_GPIO_Init+0x1ec>)
 8001848:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800184c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001854:	4b40      	ldr	r3, [pc, #256]	@ (8001958 <MX_GPIO_Init+0x1ec>)
 8001856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800185a:	4a3f      	ldr	r2, [pc, #252]	@ (8001958 <MX_GPIO_Init+0x1ec>)
 800185c:	f043 0308 	orr.w	r3, r3, #8
 8001860:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001864:	4b3c      	ldr	r3, [pc, #240]	@ (8001958 <MX_GPIO_Init+0x1ec>)
 8001866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800186a:	f003 0308 	and.w	r3, r3, #8
 800186e:	607b      	str	r3, [r7, #4]
 8001870:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, START_BUTTON_LED_Pin|RTDS_Pin, GPIO_PIN_RESET);
 8001872:	2200      	movs	r2, #0
 8001874:	2103      	movs	r1, #3
 8001876:	4839      	ldr	r0, [pc, #228]	@ (800195c <MX_GPIO_Init+0x1f0>)
 8001878:	f008 fa56 	bl	8009d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS18B20_Data_GPIO_Port, DS18B20_Data_Pin, GPIO_PIN_RESET);
 800187c:	2200      	movs	r2, #0
 800187e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001882:	4837      	ldr	r0, [pc, #220]	@ (8001960 <MX_GPIO_Init+0x1f4>)
 8001884:	f008 fa50 	bl	8009d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : START_BUTTON_LED_Pin RTDS_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_LED_Pin|RTDS_Pin;
 8001888:	2303      	movs	r3, #3
 800188a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188c:	2301      	movs	r3, #1
 800188e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001894:	2300      	movs	r3, #0
 8001896:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001898:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800189c:	4619      	mov	r1, r3
 800189e:	482f      	ldr	r0, [pc, #188]	@ (800195c <MX_GPIO_Init+0x1f0>)
 80018a0:	f008 f882 	bl	80099a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 80018a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018aa:	2300      	movs	r3, #0
 80018ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018ae:	2302      	movs	r3, #2
 80018b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80018b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018b6:	4619      	mov	r1, r3
 80018b8:	482a      	ldr	r0, [pc, #168]	@ (8001964 <MX_GPIO_Init+0x1f8>)
 80018ba:	f008 f875 	bl	80099a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MICROSD_DET_Pin */
  GPIO_InitStruct.Pin = MICROSD_DET_Pin;
 80018be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80018c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c4:	2300      	movs	r3, #0
 80018c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(MICROSD_DET_GPIO_Port, &GPIO_InitStruct);
 80018cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018d0:	4619      	mov	r1, r3
 80018d2:	4824      	ldr	r0, [pc, #144]	@ (8001964 <MX_GPIO_Init+0x1f8>)
 80018d4:	f008 f868 	bl	80099a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DS18B20_Data_Pin */
  GPIO_InitStruct.Pin = DS18B20_Data_Pin;
 80018d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018de:	2301      	movs	r3, #1
 80018e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e6:	2300      	movs	r3, #0
 80018e8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(DS18B20_Data_GPIO_Port, &GPIO_InitStruct);
 80018ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018ee:	4619      	mov	r1, r3
 80018f0:	481b      	ldr	r0, [pc, #108]	@ (8001960 <MX_GPIO_Init+0x1f4>)
 80018f2:	f008 f859 	bl	80099a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON1_Pin */
  GPIO_InitStruct.Pin = START_BUTTON1_Pin;
 80018f6:	2380      	movs	r3, #128	@ 0x80
 80018f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018fa:	2300      	movs	r3, #0
 80018fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018fe:	2302      	movs	r3, #2
 8001900:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(START_BUTTON1_GPIO_Port, &GPIO_InitStruct);
 8001902:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001906:	4619      	mov	r1, r3
 8001908:	4817      	ldr	r0, [pc, #92]	@ (8001968 <MX_GPIO_Init+0x1fc>)
 800190a:	f008 f84d 	bl	80099a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  /* --- nRF24 CE/CSN pins (PG3=CSN idle HIGH, PC6=CE idle LOW) --- */

  // Idle levels
  HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);   // CSN idle HIGH
 800190e:	2201      	movs	r2, #1
 8001910:	2108      	movs	r1, #8
 8001912:	4815      	ldr	r0, [pc, #84]	@ (8001968 <MX_GPIO_Init+0x1fc>)
 8001914:	f008 fa08 	bl	8009d28 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(NRF24_CE_PORT,  NRF24_CE_PIN,  GPIO_PIN_RESET); // CE  idle LOW
 8001918:	2200      	movs	r2, #0
 800191a:	2140      	movs	r1, #64	@ 0x40
 800191c:	480f      	ldr	r0, [pc, #60]	@ (800195c <MX_GPIO_Init+0x1f0>)
 800191e:	f008 fa03 	bl	8009d28 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8001922:	2301      	movs	r3, #1
 8001924:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800192a:	2302      	movs	r3, #2
 800192c:	633b      	str	r3, [r7, #48]	@ 0x30

  GPIO_InitStruct.Pin = NRF24_CSN_PIN;
 800192e:	2308      	movs	r3, #8
 8001930:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(NRF24_CSN_PORT, &GPIO_InitStruct);
 8001932:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001936:	4619      	mov	r1, r3
 8001938:	480b      	ldr	r0, [pc, #44]	@ (8001968 <MX_GPIO_Init+0x1fc>)
 800193a:	f008 f835 	bl	80099a8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = NRF24_CE_PIN;
 800193e:	2340      	movs	r3, #64	@ 0x40
 8001940:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(NRF24_CE_PORT, &GPIO_InitStruct);
 8001942:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001946:	4619      	mov	r1, r3
 8001948:	4804      	ldr	r0, [pc, #16]	@ (800195c <MX_GPIO_Init+0x1f0>)
 800194a:	f008 f82d 	bl	80099a8 <HAL_GPIO_Init>



/* USER CODE END MX_GPIO_Init_2 */
}
 800194e:	bf00      	nop
 8001950:	3738      	adds	r7, #56	@ 0x38
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	58024400 	.word	0x58024400
 800195c:	58020800 	.word	0x58020800
 8001960:	58021000 	.word	0x58021000
 8001964:	58021400 	.word	0x58021400
 8001968:	58021800 	.word	0x58021800

0800196c <print>:

/* USER CODE BEGIN 4 */
void print(char uart_buffer[])
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s \n\r", uart_buffer);
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	4909      	ldr	r1, [pc, #36]	@ (800199c <print+0x30>)
 8001978:	4809      	ldr	r0, [pc, #36]	@ (80019a0 <print+0x34>)
 800197a:	f012 f877 	bl	8013a6c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_msg, strlen(uart_msg),
 800197e:	4808      	ldr	r0, [pc, #32]	@ (80019a0 <print+0x34>)
 8001980:	f7fe fcc6 	bl	8000310 <strlen>
 8001984:	4603      	mov	r3, r0
 8001986:	b29a      	uxth	r2, r3
 8001988:	f04f 33ff 	mov.w	r3, #4294967295
 800198c:	4904      	ldr	r1, [pc, #16]	@ (80019a0 <print+0x34>)
 800198e:	4805      	ldr	r0, [pc, #20]	@ (80019a4 <print+0x38>)
 8001990:	f00f fdaa 	bl	80114e8 <HAL_UART_Transmit>
					  HAL_MAX_DELAY);
}
 8001994:	bf00      	nop
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	080146ac 	.word	0x080146ac
 80019a0:	240007dc 	.word	0x240007dc
 80019a4:	24000614 	.word	0x24000614

080019a8 <printValue>:

void printValue(int value)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%hu \n\r", value);
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	4909      	ldr	r1, [pc, #36]	@ (80019d8 <printValue+0x30>)
 80019b4:	4809      	ldr	r0, [pc, #36]	@ (80019dc <printValue+0x34>)
 80019b6:	f012 f859 	bl	8013a6c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_msg, strlen(uart_msg),
 80019ba:	4808      	ldr	r0, [pc, #32]	@ (80019dc <printValue+0x34>)
 80019bc:	f7fe fca8 	bl	8000310 <strlen>
 80019c0:	4603      	mov	r3, r0
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	f04f 33ff 	mov.w	r3, #4294967295
 80019c8:	4904      	ldr	r1, [pc, #16]	@ (80019dc <printValue+0x34>)
 80019ca:	4805      	ldr	r0, [pc, #20]	@ (80019e0 <printValue+0x38>)
 80019cc:	f00f fd8c 	bl	80114e8 <HAL_UART_Transmit>
					  HAL_MAX_DELAY);
}
 80019d0:	bf00      	nop
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	080146b4 	.word	0x080146b4
 80019dc:	240007dc 	.word	0x240007dc
 80019e0:	24000614 	.word	0x24000614

080019e4 <HAL_ADC_ConvCpltCallback>:
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_msg, strlen(uart_msg),
					  HAL_MAX_DELAY);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
	//s1_aceleracion = buffer_adc[0];
	//s2_aceleracion = buffer_adc[1];
	//s_freno = buffer_adc[2];
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <HAL_FDCAN_RxFifo0Callback>:
		Error_Handler();
	}
}

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	f003 0301 	and.w	r3, r3, #1
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	f000 80cc 	beq.w	8001ba6 <HAL_FDCAN_RxFifo0Callback+0x1ae>
	{
		/* Retreive Rx messages from RX FIFO0 */

		if (hfdcan->Instance == FDCAN1)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a67      	ldr	r2, [pc, #412]	@ (8001bb0 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d164      	bne.n	8001ae2 <HAL_FDCAN_RxFifo0Callback+0xea>
		{
			if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader_Inv,
 8001a18:	4b66      	ldr	r3, [pc, #408]	@ (8001bb4 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001a1a:	4a67      	ldr	r2, [pc, #412]	@ (8001bb8 <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 8001a1c:	2140      	movs	r1, #64	@ 0x40
 8001a1e:	4867      	ldr	r0, [pc, #412]	@ (8001bbc <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 8001a20:	f007 f8da 	bl	8008bd8 <HAL_FDCAN_GetRxMessage>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	f040 80bd 	bne.w	8001ba6 <HAL_FDCAN_RxFifo0Callback+0x1ae>
									   RxData_Inv) == HAL_OK)
			{
				switch (RxHeader_Inv.Identifier)
 8001a2c:	4b62      	ldr	r3, [pc, #392]	@ (8001bb8 <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f240 4266 	movw	r2, #1126	@ 0x466
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d03c      	beq.n	8001ab2 <HAL_FDCAN_RxFifo0Callback+0xba>
 8001a38:	f240 4266 	movw	r2, #1126	@ 0x466
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	f200 80b2 	bhi.w	8001ba6 <HAL_FDCAN_RxFifo0Callback+0x1ae>
 8001a42:	f240 4261 	movw	r2, #1121	@ 0x461
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d004      	beq.n	8001a54 <HAL_FDCAN_RxFifo0Callback+0x5c>
 8001a4a:	f240 4263 	movw	r2, #1123	@ 0x463
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d015      	beq.n	8001a7e <HAL_FDCAN_RxFifo0Callback+0x86>

				}
			}
		}
	}
}
 8001a52:	e0a8      	b.n	8001ba6 <HAL_FDCAN_RxFifo0Callback+0x1ae>
					state = RxData_Inv[4] & 0xF;
 8001a54:	4b57      	ldr	r3, [pc, #348]	@ (8001bb4 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001a56:	791b      	ldrb	r3, [r3, #4]
 8001a58:	f003 030f 	and.w	r3, r3, #15
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	4b58      	ldr	r3, [pc, #352]	@ (8001bc0 <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 8001a60:	701a      	strb	r2, [r3, #0]
					if (state == 10 || state == 11)
 8001a62:	4b57      	ldr	r3, [pc, #348]	@ (8001bc0 <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b0a      	cmp	r3, #10
 8001a68:	d004      	beq.n	8001a74 <HAL_FDCAN_RxFifo0Callback+0x7c>
 8001a6a:	4b55      	ldr	r3, [pc, #340]	@ (8001bc0 <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b0b      	cmp	r3, #11
 8001a70:	f040 8092 	bne.w	8001b98 <HAL_FDCAN_RxFifo0Callback+0x1a0>
						error = RxData_Inv[2];
 8001a74:	4b4f      	ldr	r3, [pc, #316]	@ (8001bb4 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001a76:	789a      	ldrb	r2, [r3, #2]
 8001a78:	4b52      	ldr	r3, [pc, #328]	@ (8001bc4 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 8001a7a:	701a      	strb	r2, [r3, #0]
					break;
 8001a7c:	e08c      	b.n	8001b98 <HAL_FDCAN_RxFifo0Callback+0x1a0>
					e_machine_rpm = (RxData_Inv[7] & 0x0F << 16) | RxData_Inv[8] << 8 | RxData_Inv[5];
 8001a7e:	4b4d      	ldr	r3, [pc, #308]	@ (8001bb4 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001a80:	79db      	ldrb	r3, [r3, #7]
 8001a82:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 8001a86:	4b4b      	ldr	r3, [pc, #300]	@ (8001bb4 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001a88:	7a1b      	ldrb	r3, [r3, #8]
 8001a8a:	021b      	lsls	r3, r3, #8
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	4a49      	ldr	r2, [pc, #292]	@ (8001bb4 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001a90:	7952      	ldrb	r2, [r2, #5]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	4a4c      	ldr	r2, [pc, #304]	@ (8001bc8 <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 8001a96:	6013      	str	r3, [r2, #0]
					if (e_machine_rpm & 0x80000)
 8001a98:	4b4b      	ldr	r3, [pc, #300]	@ (8001bc8 <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d07b      	beq.n	8001b9c <HAL_FDCAN_RxFifo0Callback+0x1a4>
						e_machine_rpm |= 0xFFF0000;
 8001aa4:	4b48      	ldr	r3, [pc, #288]	@ (8001bc8 <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4b48      	ldr	r3, [pc, #288]	@ (8001bcc <HAL_FDCAN_RxFifo0Callback+0x1d4>)
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	4a46      	ldr	r2, [pc, #280]	@ (8001bc8 <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 8001aae:	6013      	str	r3, [r2, #0]
					break;
 8001ab0:	e074      	b.n	8001b9c <HAL_FDCAN_RxFifo0Callback+0x1a4>
					if (RxHeader_Inv.DataLength == 6)
 8001ab2:	4b41      	ldr	r3, [pc, #260]	@ (8001bb8 <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	2b06      	cmp	r3, #6
 8001ab8:	d172      	bne.n	8001ba0 <HAL_FDCAN_RxFifo0Callback+0x1a8>
						if (config_inv_lectura_v == 0)
 8001aba:	4b45      	ldr	r3, [pc, #276]	@ (8001bd0 <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d102      	bne.n	8001ac8 <HAL_FDCAN_RxFifo0Callback+0xd0>
							config_inv_lectura_v = 1;
 8001ac2:	4b43      	ldr	r3, [pc, #268]	@ (8001bd0 <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	601a      	str	r2, [r3, #0]
						if (config_inv_lectura_v == 1)
 8001ac8:	4b41      	ldr	r3, [pc, #260]	@ (8001bd0 <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d167      	bne.n	8001ba0 <HAL_FDCAN_RxFifo0Callback+0x1a8>
							inv_dc_bus_voltage = RxData_Inv[3] << 8 | RxData_Inv[2];
 8001ad0:	4b38      	ldr	r3, [pc, #224]	@ (8001bb4 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001ad2:	78db      	ldrb	r3, [r3, #3]
 8001ad4:	021b      	lsls	r3, r3, #8
 8001ad6:	4a37      	ldr	r2, [pc, #220]	@ (8001bb4 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001ad8:	7892      	ldrb	r2, [r2, #2]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	4a3d      	ldr	r2, [pc, #244]	@ (8001bd4 <HAL_FDCAN_RxFifo0Callback+0x1dc>)
 8001ade:	6013      	str	r3, [r2, #0]
					break;
 8001ae0:	e05e      	b.n	8001ba0 <HAL_FDCAN_RxFifo0Callback+0x1a8>
		else if (hfdcan->Instance == FDCAN2)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a3c      	ldr	r2, [pc, #240]	@ (8001bd8 <HAL_FDCAN_RxFifo0Callback+0x1e0>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d126      	bne.n	8001b3a <HAL_FDCAN_RxFifo0Callback+0x142>
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_Acu,
 8001aec:	4b3b      	ldr	r3, [pc, #236]	@ (8001bdc <HAL_FDCAN_RxFifo0Callback+0x1e4>)
 8001aee:	4a3c      	ldr	r2, [pc, #240]	@ (8001be0 <HAL_FDCAN_RxFifo0Callback+0x1e8>)
 8001af0:	2140      	movs	r1, #64	@ 0x40
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f007 f870 	bl	8008bd8 <HAL_FDCAN_GetRxMessage>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d153      	bne.n	8001ba6 <HAL_FDCAN_RxFifo0Callback+0x1ae>
				switch (RxHeader_Acu.Identifier)
 8001afe:	4b38      	ldr	r3, [pc, #224]	@ (8001be0 <HAL_FDCAN_RxFifo0Callback+0x1e8>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2b20      	cmp	r3, #32
 8001b04:	d003      	beq.n	8001b0e <HAL_FDCAN_RxFifo0Callback+0x116>
 8001b06:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001b0a:	d008      	beq.n	8001b1e <HAL_FDCAN_RxFifo0Callback+0x126>
}
 8001b0c:	e04b      	b.n	8001ba6 <HAL_FDCAN_RxFifo0Callback+0x1ae>
					if (RxData_Acu[0] == 0)
 8001b0e:	4b33      	ldr	r3, [pc, #204]	@ (8001bdc <HAL_FDCAN_RxFifo0Callback+0x1e4>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d146      	bne.n	8001ba4 <HAL_FDCAN_RxFifo0Callback+0x1ac>
						precarga_inv = 1;
 8001b16:	4b33      	ldr	r3, [pc, #204]	@ (8001be4 <HAL_FDCAN_RxFifo0Callback+0x1ec>)
 8001b18:	2201      	movs	r2, #1
 8001b1a:	601a      	str	r2, [r3, #0]
					break;
 8001b1c:	e042      	b.n	8001ba4 <HAL_FDCAN_RxFifo0Callback+0x1ac>
					v_celda_min = (int)(RxData_Acu[0] << 8 | RxData_Acu[1]);
 8001b1e:	4b2f      	ldr	r3, [pc, #188]	@ (8001bdc <HAL_FDCAN_RxFifo0Callback+0x1e4>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	021b      	lsls	r3, r3, #8
 8001b24:	4a2d      	ldr	r2, [pc, #180]	@ (8001bdc <HAL_FDCAN_RxFifo0Callback+0x1e4>)
 8001b26:	7852      	ldrb	r2, [r2, #1]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	ee07 3a90 	vmov	s15, r3
 8001b2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b32:	4b2d      	ldr	r3, [pc, #180]	@ (8001be8 <HAL_FDCAN_RxFifo0Callback+0x1f0>)
 8001b34:	edc3 7a00 	vstr	s15, [r3]
					break;
 8001b38:	e035      	b.n	8001ba6 <HAL_FDCAN_RxFifo0Callback+0x1ae>
		else if (hfdcan->Instance == FDCAN3)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a2b      	ldr	r2, [pc, #172]	@ (8001bec <HAL_FDCAN_RxFifo0Callback+0x1f4>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d130      	bne.n	8001ba6 <HAL_FDCAN_RxFifo0Callback+0x1ae>
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_Dash,
 8001b44:	4b2a      	ldr	r3, [pc, #168]	@ (8001bf0 <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 8001b46:	4a2b      	ldr	r2, [pc, #172]	@ (8001bf4 <HAL_FDCAN_RxFifo0Callback+0x1fc>)
 8001b48:	2140      	movs	r1, #64	@ 0x40
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f007 f844 	bl	8008bd8 <HAL_FDCAN_GetRxMessage>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d127      	bne.n	8001ba6 <HAL_FDCAN_RxFifo0Callback+0x1ae>
				switch (RxHeader_Dash.Identifier)
 8001b56:	4b27      	ldr	r3, [pc, #156]	@ (8001bf4 <HAL_FDCAN_RxFifo0Callback+0x1fc>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f240 1233 	movw	r2, #307	@ 0x133
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d121      	bne.n	8001ba6 <HAL_FDCAN_RxFifo0Callback+0x1ae>
					s1_aceleracion = ((uint16_t)RxData_Dash[0] << 8) | RxData_Dash[1];
 8001b62:	4b23      	ldr	r3, [pc, #140]	@ (8001bf0 <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	b21b      	sxth	r3, r3
 8001b68:	021b      	lsls	r3, r3, #8
 8001b6a:	b21a      	sxth	r2, r3
 8001b6c:	4b20      	ldr	r3, [pc, #128]	@ (8001bf0 <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 8001b6e:	785b      	ldrb	r3, [r3, #1]
 8001b70:	b21b      	sxth	r3, r3
 8001b72:	4313      	orrs	r3, r2
 8001b74:	b21b      	sxth	r3, r3
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	4b1f      	ldr	r3, [pc, #124]	@ (8001bf8 <HAL_FDCAN_RxFifo0Callback+0x200>)
 8001b7a:	801a      	strh	r2, [r3, #0]
					s2_aceleracion = ((uint16_t)RxData_Dash[2] << 8) | RxData_Dash[3];
 8001b7c:	4b1c      	ldr	r3, [pc, #112]	@ (8001bf0 <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 8001b7e:	789b      	ldrb	r3, [r3, #2]
 8001b80:	b21b      	sxth	r3, r3
 8001b82:	021b      	lsls	r3, r3, #8
 8001b84:	b21a      	sxth	r2, r3
 8001b86:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf0 <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 8001b88:	78db      	ldrb	r3, [r3, #3]
 8001b8a:	b21b      	sxth	r3, r3
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	b21b      	sxth	r3, r3
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	4b1a      	ldr	r3, [pc, #104]	@ (8001bfc <HAL_FDCAN_RxFifo0Callback+0x204>)
 8001b94:	801a      	strh	r2, [r3, #0]
}
 8001b96:	e006      	b.n	8001ba6 <HAL_FDCAN_RxFifo0Callback+0x1ae>
					break;
 8001b98:	bf00      	nop
 8001b9a:	e004      	b.n	8001ba6 <HAL_FDCAN_RxFifo0Callback+0x1ae>
					break;
 8001b9c:	bf00      	nop
 8001b9e:	e002      	b.n	8001ba6 <HAL_FDCAN_RxFifo0Callback+0x1ae>
					break;
 8001ba0:	bf00      	nop
 8001ba2:	e000      	b.n	8001ba6 <HAL_FDCAN_RxFifo0Callback+0x1ae>
					break;
 8001ba4:	bf00      	nop
}
 8001ba6:	bf00      	nop
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	4000a000 	.word	0x4000a000
 8001bb4:	24000780 	.word	0x24000780
 8001bb8:	240006dc 	.word	0x240006dc
 8001bbc:	24000204 	.word	0x24000204
 8001bc0:	240007ca 	.word	0x240007ca
 8001bc4:	2400093a 	.word	0x2400093a
 8001bc8:	240007a8 	.word	0x240007a8
 8001bcc:	0fff0000 	.word	0x0fff0000
 8001bd0:	240000a4 	.word	0x240000a4
 8001bd4:	240007a4 	.word	0x240007a4
 8001bd8:	4000a400 	.word	0x4000a400
 8001bdc:	24000790 	.word	0x24000790
 8001be0:	24000728 	.word	0x24000728
 8001be4:	240000a0 	.word	0x240000a0
 8001be8:	24000010 	.word	0x24000010
 8001bec:	4000d400 	.word	0x4000d400
 8001bf0:	24000798 	.word	0x24000798
 8001bf4:	24000750 	.word	0x24000750
 8001bf8:	240007b2 	.word	0x240007b2
 8001bfc:	240007b4 	.word	0x240007b4

08001c00 <HAL_FDCAN_ErrorStatusCallback>:

void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs) {
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
	if (hfdcan == &hfdcan2) {
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a03      	ldr	r2, [pc, #12]	@ (8001c1c <HAL_FDCAN_ErrorStatusCallback+0x1c>)
 8001c0e:	4293      	cmp	r3, r2
		if ((ErrorStatusITs & FDCAN_IT_BUS_OFF) != RESET) {
			//CAN_bus_off_check_reset(hfdcan);
		}
	}
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	240002a4 	.word	0x240002a4

08001c20 <setTorque>:
	}
	return sum / N_LECTURAS;
}*/

uint16_t setTorque()
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
	print("Sensor freno: ");
	printValue(s_freno);
#endif

	// Calculamos % torque  en función de la posición de los sensores
	s1_aceleracion_aux = (s1_aceleracion - 2050) / (29.5 - 20.5);
 8001c26:	4b90      	ldr	r3, [pc, #576]	@ (8001e68 <setTorque+0x248>)
 8001c28:	881b      	ldrh	r3, [r3, #0]
 8001c2a:	f6a3 0302 	subw	r3, r3, #2050	@ 0x802
 8001c2e:	ee07 3a90 	vmov	s15, r3
 8001c32:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001c36:	eeb2 5b02 	vmov.f64	d5, #34	@ 0x41100000  9.0
 8001c3a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001c3e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001c42:	ee17 3a90 	vmov	r3, s15
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	4b88      	ldr	r3, [pc, #544]	@ (8001e6c <setTorque+0x24c>)
 8001c4a:	801a      	strh	r2, [r3, #0]
	if (s1_aceleracion_aux < 0)
	{
		s1_aceleracion_aux = 0;
	}
	else if (s1_aceleracion_aux > 100)
 8001c4c:	4b87      	ldr	r3, [pc, #540]	@ (8001e6c <setTorque+0x24c>)
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	2b64      	cmp	r3, #100	@ 0x64
 8001c52:	d902      	bls.n	8001c5a <setTorque+0x3a>
	{
		s1_aceleracion_aux = 100;
 8001c54:	4b85      	ldr	r3, [pc, #532]	@ (8001e6c <setTorque+0x24c>)
 8001c56:	2264      	movs	r2, #100	@ 0x64
 8001c58:	801a      	strh	r2, [r3, #0]
	}

	s2_aceleracion_aux = (s2_aceleracion - 1915) / (25.70 - 19.15);
 8001c5a:	4b85      	ldr	r3, [pc, #532]	@ (8001e70 <setTorque+0x250>)
 8001c5c:	881b      	ldrh	r3, [r3, #0]
 8001c5e:	f2a3 737b 	subw	r3, r3, #1915	@ 0x77b
 8001c62:	ee07 3a90 	vmov	s15, r3
 8001c66:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001c6a:	ed9f 5b75 	vldr	d5, [pc, #468]	@ 8001e40 <setTorque+0x220>
 8001c6e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001c72:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001c76:	ee17 3a90 	vmov	r3, s15
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	4b7d      	ldr	r3, [pc, #500]	@ (8001e74 <setTorque+0x254>)
 8001c7e:	801a      	strh	r2, [r3, #0]
	if (s2_aceleracion_aux < 0)
	{
		s2_aceleracion_aux = 0;
	}
	else if (s2_aceleracion_aux > 100)
 8001c80:	4b7c      	ldr	r3, [pc, #496]	@ (8001e74 <setTorque+0x254>)
 8001c82:	881b      	ldrh	r3, [r3, #0]
 8001c84:	2b64      	cmp	r3, #100	@ 0x64
 8001c86:	d902      	bls.n	8001c8e <setTorque+0x6e>
	{
		s2_aceleracion_aux = 100;
 8001c88:	4b7a      	ldr	r3, [pc, #488]	@ (8001e74 <setTorque+0x254>)
 8001c8a:	2264      	movs	r2, #100	@ 0x64
 8001c8c:	801a      	strh	r2, [r3, #0]
	printValue(s2_aceleracion_aux);
	print("");
#endif

	// Torque enviado es la media de los dos sensores
	if (s1_aceleracion_aux > 8 && s2_aceleracion_aux > 8)
 8001c8e:	4b77      	ldr	r3, [pc, #476]	@ (8001e6c <setTorque+0x24c>)
 8001c90:	881b      	ldrh	r3, [r3, #0]
 8001c92:	2b08      	cmp	r3, #8
 8001c94:	d911      	bls.n	8001cba <setTorque+0x9a>
 8001c96:	4b77      	ldr	r3, [pc, #476]	@ (8001e74 <setTorque+0x254>)
 8001c98:	881b      	ldrh	r3, [r3, #0]
 8001c9a:	2b08      	cmp	r3, #8
 8001c9c:	d90d      	bls.n	8001cba <setTorque+0x9a>
	{
		torque_total = (s1_aceleracion_aux + s2_aceleracion_aux) / 2;
 8001c9e:	4b73      	ldr	r3, [pc, #460]	@ (8001e6c <setTorque+0x24c>)
 8001ca0:	881b      	ldrh	r3, [r3, #0]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	4b73      	ldr	r3, [pc, #460]	@ (8001e74 <setTorque+0x254>)
 8001ca6:	881b      	ldrh	r3, [r3, #0]
 8001ca8:	4413      	add	r3, r2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	da00      	bge.n	8001cb0 <setTorque+0x90>
 8001cae:	3301      	adds	r3, #1
 8001cb0:	105b      	asrs	r3, r3, #1
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	4b70      	ldr	r3, [pc, #448]	@ (8001e78 <setTorque+0x258>)
 8001cb6:	801a      	strh	r2, [r3, #0]
 8001cb8:	e002      	b.n	8001cc0 <setTorque+0xa0>
	}
	else
	{
		torque_total = 0;
 8001cba:	4b6f      	ldr	r3, [pc, #444]	@ (8001e78 <setTorque+0x258>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	801a      	strh	r2, [r3, #0]
	}

	// Por debajo de un 10% no acelera y por encima de un 90% esta a tope
	if (torque_total < 10)
 8001cc0:	4b6d      	ldr	r3, [pc, #436]	@ (8001e78 <setTorque+0x258>)
 8001cc2:	881b      	ldrh	r3, [r3, #0]
 8001cc4:	2b09      	cmp	r3, #9
 8001cc6:	d803      	bhi.n	8001cd0 <setTorque+0xb0>
	{
		torque_total = 0;
 8001cc8:	4b6b      	ldr	r3, [pc, #428]	@ (8001e78 <setTorque+0x258>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	801a      	strh	r2, [r3, #0]
 8001cce:	e006      	b.n	8001cde <setTorque+0xbe>
	}
	else if (torque_total > 90)
 8001cd0:	4b69      	ldr	r3, [pc, #420]	@ (8001e78 <setTorque+0x258>)
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	2b5a      	cmp	r3, #90	@ 0x5a
 8001cd6:	d902      	bls.n	8001cde <setTorque+0xbe>
	{
		torque_total = 100;
 8001cd8:	4b67      	ldr	r3, [pc, #412]	@ (8001e78 <setTorque+0x258>)
 8001cda:	2264      	movs	r2, #100	@ 0x64
 8001cdc:	801a      	strh	r2, [r3, #0]
	}

	// Comprobamos EV 2.3 APPS/Brake Pedal Plausibility Check
	// En caso de que se esté pisando el freno y mas de un 25% del pedal para. Se resetea
	// solo si el acelerador vuelve por debajo del 5%
	if (s_freno > UMBRAL_FRENO_APPS && torque_total > 25)
 8001cde:	4b67      	ldr	r3, [pc, #412]	@ (8001e7c <setTorque+0x25c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	dd0a      	ble.n	8001d00 <setTorque+0xe0>
 8001cea:	4b63      	ldr	r3, [pc, #396]	@ (8001e78 <setTorque+0x258>)
 8001cec:	881b      	ldrh	r3, [r3, #0]
 8001cee:	2b19      	cmp	r3, #25
 8001cf0:	d906      	bls.n	8001d00 <setTorque+0xe0>
	{
		print("EV_2_3");
 8001cf2:	4863      	ldr	r0, [pc, #396]	@ (8001e80 <setTorque+0x260>)
 8001cf4:	f7ff fe3a 	bl	800196c <print>
		flag_EV_2_3 = 1;
 8001cf8:	4b62      	ldr	r3, [pc, #392]	@ (8001e84 <setTorque+0x264>)
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	e00c      	b.n	8001d1a <setTorque+0xfa>
	}
	else if (s_freno < UMBRAL_FRENO_APPS && torque_total < 5)
 8001d00:	4b5e      	ldr	r3, [pc, #376]	@ (8001e7c <setTorque+0x25c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	dc06      	bgt.n	8001d1a <setTorque+0xfa>
 8001d0c:	4b5a      	ldr	r3, [pc, #360]	@ (8001e78 <setTorque+0x258>)
 8001d0e:	881b      	ldrh	r3, [r3, #0]
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	d802      	bhi.n	8001d1a <setTorque+0xfa>
	{
		flag_EV_2_3 = 0;
 8001d14:	4b5b      	ldr	r3, [pc, #364]	@ (8001e84 <setTorque+0x264>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
	}
	// If an implausibility occurs between the values of the APPSs and persists for more than
	// 100ms The power to the motor(s) must be immediately shut down completely
	// T11.8.9 Implausibility is defined as a deviation of more than ten percentage points
	// pedal travel between any of the used APPSs
	if (abs(s1_aceleracion_aux - s2_aceleracion_aux) > 10)
 8001d1a:	4b54      	ldr	r3, [pc, #336]	@ (8001e6c <setTorque+0x24c>)
 8001d1c:	881b      	ldrh	r3, [r3, #0]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	4b54      	ldr	r3, [pc, #336]	@ (8001e74 <setTorque+0x254>)
 8001d22:	881b      	ldrh	r3, [r3, #0]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	bfb8      	it	lt
 8001d2a:	425b      	neglt	r3, r3
 8001d2c:	2b0a      	cmp	r3, #10
 8001d2e:	dd06      	ble.n	8001d3e <setTorque+0x11e>
	{

		// if (HAL_GetTick() - last_time_t_11_8 > 100) {
		print("T11.8.9");
 8001d30:	4855      	ldr	r0, [pc, #340]	@ (8001e88 <setTorque+0x268>)
 8001d32:	f7ff fe1b 	bl	800196c <print>
		flag_T11_8_9 = 1;
 8001d36:	4b55      	ldr	r3, [pc, #340]	@ (8001e8c <setTorque+0x26c>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	e007      	b.n	8001d4e <setTorque+0x12e>
		//}
	}
	else
	{
		last_time_t_11_8 = HAL_GetTick();
 8001d3e:	f001 fe53 	bl	80039e8 <HAL_GetTick>
 8001d42:	4603      	mov	r3, r0
 8001d44:	4a52      	ldr	r2, [pc, #328]	@ (8001e90 <setTorque+0x270>)
 8001d46:	6013      	str	r3, [r2, #0]
		flag_T11_8_9 = 0;
 8001d48:	4b50      	ldr	r3, [pc, #320]	@ (8001e8c <setTorque+0x26c>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
	}

	if (flag_EV_2_3 || flag_T11_8_9)
 8001d4e:	4b4d      	ldr	r3, [pc, #308]	@ (8001e84 <setTorque+0x264>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d103      	bne.n	8001d5e <setTorque+0x13e>
 8001d56:	4b4d      	ldr	r3, [pc, #308]	@ (8001e8c <setTorque+0x26c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d002      	beq.n	8001d64 <setTorque+0x144>
	{
		torque_total = 0;
 8001d5e:	4b46      	ldr	r3, [pc, #280]	@ (8001e78 <setTorque+0x258>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	801a      	strh	r2, [r3, #0]
	print("Torque total solicitado: ");
	printValue(torque_total);
#endif

	// Limitación del torque en función de la carga
	if (v_celda_min < 3500)
 8001d64:	4b4b      	ldr	r3, [pc, #300]	@ (8001e94 <setTorque+0x274>)
 8001d66:	edd3 7a00 	vldr	s15, [r3]
 8001d6a:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8001e98 <setTorque+0x278>
 8001d6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d76:	d53a      	bpl.n	8001dee <setTorque+0x1ce>
	{
		if (v_celda_min > 2800)
 8001d78:	4b46      	ldr	r3, [pc, #280]	@ (8001e94 <setTorque+0x274>)
 8001d7a:	edd3 7a00 	vldr	s15, [r3]
 8001d7e:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001e9c <setTorque+0x27c>
 8001d82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d8a:	dd1f      	ble.n	8001dcc <setTorque+0x1ac>
		{
			torque_limitado = torque_total * (1.357 * v_celda_min - 3750) / 1000;
 8001d8c:	4b3a      	ldr	r3, [pc, #232]	@ (8001e78 <setTorque+0x258>)
 8001d8e:	881b      	ldrh	r3, [r3, #0]
 8001d90:	ee07 3a90 	vmov	s15, r3
 8001d94:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001d98:	4b3e      	ldr	r3, [pc, #248]	@ (8001e94 <setTorque+0x274>)
 8001d9a:	edd3 7a00 	vldr	s15, [r3]
 8001d9e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001da2:	ed9f 5b29 	vldr	d5, [pc, #164]	@ 8001e48 <setTorque+0x228>
 8001da6:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001daa:	ed9f 5b29 	vldr	d5, [pc, #164]	@ 8001e50 <setTorque+0x230>
 8001dae:	ee37 7b45 	vsub.f64	d7, d7, d5
 8001db2:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001db6:	ed9f 5b28 	vldr	d5, [pc, #160]	@ 8001e58 <setTorque+0x238>
 8001dba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001dbe:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001dc2:	ee17 2a90 	vmov	r2, s15
 8001dc6:	4b36      	ldr	r3, [pc, #216]	@ (8001ea0 <setTorque+0x280>)
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	e015      	b.n	8001df8 <setTorque+0x1d8>
		}
		else
		{
			torque_limitado = torque_total * 0.05;
 8001dcc:	4b2a      	ldr	r3, [pc, #168]	@ (8001e78 <setTorque+0x258>)
 8001dce:	881b      	ldrh	r3, [r3, #0]
 8001dd0:	ee07 3a90 	vmov	s15, r3
 8001dd4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001dd8:	ed9f 6b21 	vldr	d6, [pc, #132]	@ 8001e60 <setTorque+0x240>
 8001ddc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001de0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001de4:	ee17 2a90 	vmov	r2, s15
 8001de8:	4b2d      	ldr	r3, [pc, #180]	@ (8001ea0 <setTorque+0x280>)
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	e004      	b.n	8001df8 <setTorque+0x1d8>
		}
	}
	else
	{
		torque_limitado = torque_total;
 8001dee:	4b22      	ldr	r3, [pc, #136]	@ (8001e78 <setTorque+0x258>)
 8001df0:	881b      	ldrh	r3, [r3, #0]
 8001df2:	461a      	mov	r2, r3
 8001df4:	4b2a      	ldr	r3, [pc, #168]	@ (8001ea0 <setTorque+0x280>)
 8001df6:	601a      	str	r2, [r3, #0]
print("Torque limitado en: ");
printValue(torque_limitado);
#endif

	// torque_total = torque_total * 240 / 100;
	if (torque_total >= 10)
 8001df8:	4b1f      	ldr	r3, [pc, #124]	@ (8001e78 <setTorque+0x258>)
 8001dfa:	881b      	ldrh	r3, [r3, #0]
 8001dfc:	2b09      	cmp	r3, #9
 8001dfe:	d912      	bls.n	8001e26 <setTorque+0x206>
	{
		torque_total = (torque_total * 240 / 90 - 2400 / 90) * (100 / 100);
 8001e00:	4b1d      	ldr	r3, [pc, #116]	@ (8001e78 <setTorque+0x258>)
 8001e02:	881b      	ldrh	r3, [r3, #0]
 8001e04:	461a      	mov	r2, r3
 8001e06:	4613      	mov	r3, r2
 8001e08:	011b      	lsls	r3, r3, #4
 8001e0a:	1a9b      	subs	r3, r3, r2
 8001e0c:	011b      	lsls	r3, r3, #4
 8001e0e:	4a25      	ldr	r2, [pc, #148]	@ (8001ea4 <setTorque+0x284>)
 8001e10:	fb82 1203 	smull	r1, r2, r2, r3
 8001e14:	441a      	add	r2, r3
 8001e16:	1192      	asrs	r2, r2, #6
 8001e18:	17db      	asrs	r3, r3, #31
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	3b1a      	subs	r3, #26
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	4b15      	ldr	r3, [pc, #84]	@ (8001e78 <setTorque+0x258>)
 8001e24:	801a      	strh	r2, [r3, #0]
	/*if(torque_total < 0){
		torque_total = 0;
	}*/

	// Invertir todos los bits (complemento a uno)
	uint16_t complement_one = ~torque_total;
 8001e26:	4b14      	ldr	r3, [pc, #80]	@ (8001e78 <setTorque+0x258>)
 8001e28:	881b      	ldrh	r3, [r3, #0]
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	80fb      	strh	r3, [r7, #6]

	// Sumar 1 para obtener el complemento a dos
	uint16_t torque_real = complement_one + 1;
 8001e2e:	88fb      	ldrh	r3, [r7, #6]
 8001e30:	3301      	adds	r3, #1
 8001e32:	80bb      	strh	r3, [r7, #4]

#if 0
	print("Torque mandado al inversor: ");
	printHex(torque_real);
#endif
	return torque_real;
 8001e34:	88bb      	ldrh	r3, [r7, #4]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	33333334 	.word	0x33333334
 8001e44:	401a3333 	.word	0x401a3333
 8001e48:	a1cac083 	.word	0xa1cac083
 8001e4c:	3ff5b645 	.word	0x3ff5b645
 8001e50:	00000000 	.word	0x00000000
 8001e54:	40ad4c00 	.word	0x40ad4c00
 8001e58:	00000000 	.word	0x00000000
 8001e5c:	408f4000 	.word	0x408f4000
 8001e60:	9999999a 	.word	0x9999999a
 8001e64:	3fa99999 	.word	0x3fa99999
 8001e68:	240007b2 	.word	0x240007b2
 8001e6c:	240007b6 	.word	0x240007b6
 8001e70:	240007b4 	.word	0x240007b4
 8001e74:	240007b8 	.word	0x240007b8
 8001e78:	240007c0 	.word	0x240007c0
 8001e7c:	240007bc 	.word	0x240007bc
 8001e80:	080146c8 	.word	0x080146c8
 8001e84:	240007d0 	.word	0x240007d0
 8001e88:	080146d0 	.word	0x080146d0
 8001e8c:	240007d4 	.word	0x240007d4
 8001e90:	240007cc 	.word	0x240007cc
 8001e94:	24000010 	.word	0x24000010
 8001e98:	455ac000 	.word	0x455ac000
 8001e9c:	452f0000 	.word	0x452f0000
 8001ea0:	240007c4 	.word	0x240007c4
 8001ea4:	b60b60b7 	.word	0xb60b60b7

08001ea8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]

	if (htim == &htim16)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a9a      	ldr	r2, [pc, #616]	@ (800211c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	f040 81fd 	bne.w	80022b4 <HAL_TIM_PeriodElapsedCallback+0x40c>
	{
		// Reenvío DC_BUS_VOLTAGE al AMS por CAN_ACU
		TxHeader_Acu.Identifier = ID_dc_bus_voltage;
 8001eba:	4b99      	ldr	r3, [pc, #612]	@ (8002120 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a99      	ldr	r2, [pc, #612]	@ (8002124 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001ec0:	6013      	str	r3, [r2, #0]
		TxHeader_Acu.DataLength = 2;
 8001ec2:	4b98      	ldr	r3, [pc, #608]	@ (8002124 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	60da      	str	r2, [r3, #12]
		TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 8001ec8:	4b96      	ldr	r3, [pc, #600]	@ (8002124 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001eca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ece:	605a      	str	r2, [r3, #4]
		TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 8001ed0:	4b94      	ldr	r3, [pc, #592]	@ (8002124 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	619a      	str	r2, [r3, #24]
		TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 8001ed6:	4b93      	ldr	r3, [pc, #588]	@ (8002124 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	609a      	str	r2, [r3, #8]

		/*		TxData_Acu[0] = byte0_voltage;
		 TxData_Acu[1] = byte1_voltage;*/
		TxData_Acu[0] = inv_dc_bus_voltage & 0xFF;
 8001edc:	4b92      	ldr	r3, [pc, #584]	@ (8002128 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	4b92      	ldr	r3, [pc, #584]	@ (800212c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001ee4:	701a      	strb	r2, [r3, #0]
		TxData_Acu[1] = (inv_dc_bus_voltage >> 8) & 0xFF;
 8001ee6:	4b90      	ldr	r3, [pc, #576]	@ (8002128 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	121b      	asrs	r3, r3, #8
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	4b8f      	ldr	r3, [pc, #572]	@ (800212c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001ef0:	705a      	strb	r2, [r3, #1]
		//printValue(inv_dc_bus_voltage);
		/* --- Telemetry tick: 10ms base --- */
		    tel_irq_cnt++;                // <--- ADD
 8001ef2:	4b8f      	ldr	r3, [pc, #572]	@ (8002130 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	4a8d      	ldr	r2, [pc, #564]	@ (8002130 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001efa:	6013      	str	r3, [r2, #0]
		    tel_tick += 10;
 8001efc:	4b8d      	ldr	r3, [pc, #564]	@ (8002134 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	330a      	adds	r3, #10
 8001f02:	4a8c      	ldr	r2, [pc, #560]	@ (8002134 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001f04:	6013      	str	r3, [r2, #0]
		    if (tel_tick >= 500) {        // 500 ms cadence
 8001f06:	4b8b      	ldr	r3, [pc, #556]	@ (8002134 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001f0e:	d304      	bcc.n	8001f1a <HAL_TIM_PeriodElapsedCallback+0x72>
		        tel_tick = 0;
 8001f10:	4b88      	ldr	r3, [pc, #544]	@ (8002134 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
		        tel_send_now();           // 32B nRF24 burst (no prints from ISR)
 8001f16:	f000 fa65 	bl	80023e4 <tel_send_now>
		    }

		    (void)HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu);
 8001f1a:	4a84      	ldr	r2, [pc, #528]	@ (800212c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001f1c:	4981      	ldr	r1, [pc, #516]	@ (8002124 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001f1e:	4886      	ldr	r0, [pc, #536]	@ (8002138 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001f20:	f006 fdff 	bl	8008b22 <HAL_FDCAN_AddMessageToTxFifoQ>

		    precharge_button = HAL_GPIO_ReadPin(START_BUTTON_GPIO_Port, START_BUTTON_Pin);
 8001f24:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f28:	4884      	ldr	r0, [pc, #528]	@ (800213c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001f2a:	f007 fee5 	bl	8009cf8 <HAL_GPIO_ReadPin>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	461a      	mov	r2, r3
 8001f32:	4b83      	ldr	r3, [pc, #524]	@ (8002140 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001f34:	601a      	str	r2, [r3, #0]

		    TxHeader_Acu.Identifier = 0x600;
 8001f36:	4b7b      	ldr	r3, [pc, #492]	@ (8002124 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001f38:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8001f3c:	601a      	str	r2, [r3, #0]
		    TxHeader_Acu.DataLength = 2;
 8001f3e:	4b79      	ldr	r3, [pc, #484]	@ (8002124 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001f40:	2202      	movs	r2, #2
 8001f42:	60da      	str	r2, [r3, #12]
		    TxHeader_Acu.IdType     = FDCAN_EXTENDED_ID;
 8001f44:	4b77      	ldr	r3, [pc, #476]	@ (8002124 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001f46:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f4a:	605a      	str	r2, [r3, #4]
		    TxHeader_Acu.FDFormat   = FDCAN_CLASSIC_CAN;
 8001f4c:	4b75      	ldr	r3, [pc, #468]	@ (8002124 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	619a      	str	r2, [r3, #24]
		    TxHeader_Acu.TxFrameType= FDCAN_DATA_FRAME;
 8001f52:	4b74      	ldr	r3, [pc, #464]	@ (8002124 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	609a      	str	r2, [r3, #8]
		    TxData_Acu[0] = precharge_button;
 8001f58:	4b79      	ldr	r3, [pc, #484]	@ (8002140 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	4b73      	ldr	r3, [pc, #460]	@ (800212c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001f60:	701a      	strb	r2, [r3, #0]

		    /* REMOVE noisy ISR print:
		       printValue(TxData_Acu[0]);  // <-- delete this (no UART in ISR) */

		    (void)HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu);
 8001f62:	4a72      	ldr	r2, [pc, #456]	@ (800212c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001f64:	496f      	ldr	r1, [pc, #444]	@ (8002124 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001f66:	4874      	ldr	r0, [pc, #464]	@ (8002138 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001f68:	f006 fddb 	bl	8008b22 <HAL_FDCAN_AddMessageToTxFifoQ>

		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK)
 8001f6c:	4a6f      	ldr	r2, [pc, #444]	@ (800212c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001f6e:	496d      	ldr	r1, [pc, #436]	@ (8002124 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001f70:	4871      	ldr	r0, [pc, #452]	@ (8002138 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001f72:	f006 fdd6 	bl	8008b22 <HAL_FDCAN_AddMessageToTxFifoQ>
#if DEBUG
			//print("CAN_ACU: DC_BUS_VOLTAGE enviado a AMS");
#endif
		}

		precharge_button = HAL_GPIO_ReadPin(START_BUTTON_GPIO_Port, START_BUTTON_Pin);
 8001f76:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f7a:	4870      	ldr	r0, [pc, #448]	@ (800213c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001f7c:	f007 febc 	bl	8009cf8 <HAL_GPIO_ReadPin>
 8001f80:	4603      	mov	r3, r0
 8001f82:	461a      	mov	r2, r3
 8001f84:	4b6e      	ldr	r3, [pc, #440]	@ (8002140 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001f86:	601a      	str	r2, [r3, #0]

		TxHeader_Acu.Identifier = 0x600;
 8001f88:	4b66      	ldr	r3, [pc, #408]	@ (8002124 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001f8a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8001f8e:	601a      	str	r2, [r3, #0]
		TxHeader_Acu.DataLength = 2;
 8001f90:	4b64      	ldr	r3, [pc, #400]	@ (8002124 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001f92:	2202      	movs	r2, #2
 8001f94:	60da      	str	r2, [r3, #12]
		TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 8001f96:	4b63      	ldr	r3, [pc, #396]	@ (8002124 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001f98:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f9c:	605a      	str	r2, [r3, #4]
		TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 8001f9e:	4b61      	ldr	r3, [pc, #388]	@ (8002124 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	619a      	str	r2, [r3, #24]
		TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 8001fa4:	4b5f      	ldr	r3, [pc, #380]	@ (8002124 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	609a      	str	r2, [r3, #8]


		TxData_Acu[0] = precharge_button;
 8001faa:	4b65      	ldr	r3, [pc, #404]	@ (8002140 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	4b5e      	ldr	r3, [pc, #376]	@ (800212c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001fb2:	701a      	strb	r2, [r3, #0]
		printValue(TxData_Acu[0]);
 8001fb4:	4b5d      	ldr	r3, [pc, #372]	@ (800212c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff fcf5 	bl	80019a8 <printValue>

		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK)
 8001fbe:	4a5b      	ldr	r2, [pc, #364]	@ (800212c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001fc0:	4958      	ldr	r1, [pc, #352]	@ (8002124 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001fc2:	485d      	ldr	r0, [pc, #372]	@ (8002138 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001fc4:	f006 fdad 	bl	8008b22 <HAL_FDCAN_AddMessageToTxFifoQ>

		// ---------- CONTROL DEL INVERSOR ----------

		//printHex(state);
		// Estado TORQUE
		if ((state == 4 || state == 6) && flag_r2d == 1)
 8001fc8:	4b5e      	ldr	r3, [pc, #376]	@ (8002144 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	2b04      	cmp	r3, #4
 8001fce:	d003      	beq.n	8001fd8 <HAL_TIM_PeriodElapsedCallback+0x130>
 8001fd0:	4b5c      	ldr	r3, [pc, #368]	@ (8002144 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	2b06      	cmp	r3, #6
 8001fd6:	d11b      	bne.n	8002010 <HAL_TIM_PeriodElapsedCallback+0x168>
 8001fd8:	4b5b      	ldr	r3, [pc, #364]	@ (8002148 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d117      	bne.n	8002010 <HAL_TIM_PeriodElapsedCallback+0x168>
		{ // Si no hay que reactivar el coche manda siempre torque

			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001fe0:	4b5a      	ldr	r3, [pc, #360]	@ (800214c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a5a      	ldr	r2, [pc, #360]	@ (8002150 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001fe6:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8001fe8:	4b59      	ldr	r3, [pc, #356]	@ (8002150 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001fea:	2203      	movs	r2, #3
 8001fec:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001fee:	4b58      	ldr	r3, [pc, #352]	@ (8002150 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8001ff4:	4b57      	ldr	r3, [pc, #348]	@ (8002154 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001ffa:	4b56      	ldr	r3, [pc, #344]	@ (8002154 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0x6;
 8002000:	4b54      	ldr	r3, [pc, #336]	@ (8002154 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8002002:	2206      	movs	r2, #6
 8002004:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8002006:	4a53      	ldr	r2, [pc, #332]	@ (8002154 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8002008:	4951      	ldr	r1, [pc, #324]	@ (8002150 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800200a:	4853      	ldr	r0, [pc, #332]	@ (8002158 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800200c:	f006 fd89 	bl	8008b22 <HAL_FDCAN_AddMessageToTxFifoQ>
		}

		if(flag_r2d == 1){
 8002010:	4b4d      	ldr	r3, [pc, #308]	@ (8002148 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2b01      	cmp	r3, #1
 8002016:	f040 814d 	bne.w	80022b4 <HAL_TIM_PeriodElapsedCallback+0x40c>
			switch (state)
 800201a:	4b4a      	ldr	r3, [pc, #296]	@ (8002144 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b0d      	cmp	r3, #13
 8002020:	f200 8148 	bhi.w	80022b4 <HAL_TIM_PeriodElapsedCallback+0x40c>
 8002024:	a201      	add	r2, pc, #4	@ (adr r2, 800202c <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800202a:	bf00      	nop
 800202c:	08002065 	.word	0x08002065
 8002030:	080022b5 	.word	0x080022b5
 8002034:	080022b5 	.word	0x080022b5
 8002038:	08002095 	.word	0x08002095
 800203c:	080020cb 	.word	0x080020cb
 8002040:	080022b5 	.word	0x080022b5
 8002044:	080021a1 	.word	0x080021a1
 8002048:	080022b5 	.word	0x080022b5
 800204c:	080022b5 	.word	0x080022b5
 8002050:	080022b5 	.word	0x080022b5
 8002054:	08002201 	.word	0x08002201
 8002058:	08002241 	.word	0x08002241
 800205c:	080022b5 	.word	0x080022b5
 8002060:	0800227d 	.word	0x0800227d
			{
			case 0:
				TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8002064:	4b39      	ldr	r3, [pc, #228]	@ (800214c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a39      	ldr	r2, [pc, #228]	@ (8002150 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800206a:	6013      	str	r3, [r2, #0]
				TxHeader_Inv.DataLength = 3;
 800206c:	4b38      	ldr	r3, [pc, #224]	@ (8002150 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800206e:	2203      	movs	r2, #3
 8002070:	60da      	str	r2, [r3, #12]
				TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8002072:	4b37      	ldr	r3, [pc, #220]	@ (8002150 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002074:	2200      	movs	r2, #0
 8002076:	605a      	str	r2, [r3, #4]

				TxData_Inv[0] = 0x0;
 8002078:	4b36      	ldr	r3, [pc, #216]	@ (8002154 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800207a:	2200      	movs	r2, #0
 800207c:	701a      	strb	r2, [r3, #0]
				TxData_Inv[1] = 0x0;
 800207e:	4b35      	ldr	r3, [pc, #212]	@ (8002154 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8002080:	2200      	movs	r2, #0
 8002082:	705a      	strb	r2, [r3, #1]
				TxData_Inv[2] = 0x1;
 8002084:	4b33      	ldr	r3, [pc, #204]	@ (8002154 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8002086:	2201      	movs	r2, #1
 8002088:	709a      	strb	r2, [r3, #2]
				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 800208a:	4a32      	ldr	r2, [pc, #200]	@ (8002154 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800208c:	4930      	ldr	r1, [pc, #192]	@ (8002150 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800208e:	4832      	ldr	r0, [pc, #200]	@ (8002158 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8002090:	f006 fd47 	bl	8008b22 <HAL_FDCAN_AddMessageToTxFifoQ>

			case 3:
	#if DEBUG
				//print("state: standby");
	#endif
				flag_react = 0;
 8002094:	4b31      	ldr	r3, [pc, #196]	@ (800215c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002096:	2200      	movs	r2, #0
 8002098:	701a      	strb	r2, [r3, #0]
				// Estado READY inversor
				TxHeader_Inv.Identifier = RX_SETPOINT_1;
 800209a:	4b2c      	ldr	r3, [pc, #176]	@ (800214c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a2c      	ldr	r2, [pc, #176]	@ (8002150 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80020a0:	6013      	str	r3, [r2, #0]
				TxHeader_Inv.DataLength = 3;
 80020a2:	4b2b      	ldr	r3, [pc, #172]	@ (8002150 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80020a4:	2203      	movs	r2, #3
 80020a6:	60da      	str	r2, [r3, #12]
				TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 80020a8:	4b29      	ldr	r3, [pc, #164]	@ (8002150 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	605a      	str	r2, [r3, #4]

				TxData_Inv[0] = 0x0;
 80020ae:	4b29      	ldr	r3, [pc, #164]	@ (8002154 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	701a      	strb	r2, [r3, #0]
				TxData_Inv[1] = 0x0;
 80020b4:	4b27      	ldr	r3, [pc, #156]	@ (8002154 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	705a      	strb	r2, [r3, #1]
				TxData_Inv[2] = 0x4;
 80020ba:	4b26      	ldr	r3, [pc, #152]	@ (8002154 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80020bc:	2204      	movs	r2, #4
 80020be:	709a      	strb	r2, [r3, #2]
				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 80020c0:	4a24      	ldr	r2, [pc, #144]	@ (8002154 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80020c2:	4923      	ldr	r1, [pc, #140]	@ (8002150 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80020c4:	4824      	ldr	r0, [pc, #144]	@ (8002158 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80020c6:	f006 fd2c 	bl	8008b22 <HAL_FDCAN_AddMessageToTxFifoQ>
				//}

			case 4:

	#if DEBUG
				print("state: ready");
 80020ca:	4825      	ldr	r0, [pc, #148]	@ (8002160 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80020cc:	f7ff fc4e 	bl	800196c <print>
	#endif
				if (flag_r2d == 1){
 80020d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002148 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d147      	bne.n	8002168 <HAL_TIM_PeriodElapsedCallback+0x2c0>
					TxHeader_Inv.Identifier = 0x362;
 80020d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002150 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80020da:	f240 3262 	movw	r2, #866	@ 0x362
 80020de:	601a      	str	r2, [r3, #0]
					TxHeader_Inv.DataLength = 4;
 80020e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002150 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80020e2:	2204      	movs	r2, #4
 80020e4:	60da      	str	r2, [r3, #12]

					real_torque = 0;
 80020e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002164 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	801a      	strh	r2, [r3, #0]

					TxData_Inv[0] = 0x0;
 80020ec:	4b19      	ldr	r3, [pc, #100]	@ (8002154 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	701a      	strb	r2, [r3, #0]
					TxData_Inv[1] = 0x0;
 80020f2:	4b18      	ldr	r3, [pc, #96]	@ (8002154 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	705a      	strb	r2, [r3, #1]
					TxData_Inv[2] = real_torque;
 80020f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002164 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80020fa:	881b      	ldrh	r3, [r3, #0]
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	4b15      	ldr	r3, [pc, #84]	@ (8002154 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8002100:	709a      	strb	r2, [r3, #2]
					TxData_Inv[3] = 0x0;
 8002102:	4b14      	ldr	r3, [pc, #80]	@ (8002154 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8002104:	2200      	movs	r2, #0
 8002106:	70da      	strb	r2, [r3, #3]
					HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8002108:	4a12      	ldr	r2, [pc, #72]	@ (8002154 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800210a:	4911      	ldr	r1, [pc, #68]	@ (8002150 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800210c:	4812      	ldr	r0, [pc, #72]	@ (8002158 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800210e:	f006 fd08 	bl	8008b22 <HAL_FDCAN_AddMessageToTxFifoQ>
					flag_react = 0; // Reactivado
 8002112:	4b12      	ldr	r3, [pc, #72]	@ (800215c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002114:	2200      	movs	r2, #0
 8002116:	701a      	strb	r2, [r3, #0]
					TxData_Inv[1] = 0x0;
					TxData_Inv[2] = 0x4;
					HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
				}

				break;
 8002118:	e0cc      	b.n	80022b4 <HAL_TIM_PeriodElapsedCallback+0x40c>
 800211a:	bf00      	nop
 800211c:	24000534 	.word	0x24000534
 8002120:	24000004 	.word	0x24000004
 8002124:	24000704 	.word	0x24000704
 8002128:	240007a4 	.word	0x240007a4
 800212c:	24000788 	.word	0x24000788
 8002130:	240006ac 	.word	0x240006ac
 8002134:	240006a8 	.word	0x240006a8
 8002138:	240002a4 	.word	0x240002a4
 800213c:	58021400 	.word	0x58021400
 8002140:	240007d8 	.word	0x240007d8
 8002144:	240007ca 	.word	0x240007ca
 8002148:	2400093c 	.word	0x2400093c
 800214c:	24000000 	.word	0x24000000
 8002150:	240006b8 	.word	0x240006b8
 8002154:	24000778 	.word	0x24000778
 8002158:	24000204 	.word	0x24000204
 800215c:	2400093b 	.word	0x2400093b
 8002160:	08014648 	.word	0x08014648
 8002164:	240007c8 	.word	0x240007c8
					flag_react = 0;
 8002168:	4b54      	ldr	r3, [pc, #336]	@ (80022bc <HAL_TIM_PeriodElapsedCallback+0x414>)
 800216a:	2200      	movs	r2, #0
 800216c:	701a      	strb	r2, [r3, #0]
					TxHeader_Inv.Identifier = RX_SETPOINT_1;
 800216e:	4b54      	ldr	r3, [pc, #336]	@ (80022c0 <HAL_TIM_PeriodElapsedCallback+0x418>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a54      	ldr	r2, [pc, #336]	@ (80022c4 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8002174:	6013      	str	r3, [r2, #0]
					TxHeader_Inv.DataLength = 3;
 8002176:	4b53      	ldr	r3, [pc, #332]	@ (80022c4 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8002178:	2203      	movs	r2, #3
 800217a:	60da      	str	r2, [r3, #12]
					TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 800217c:	4b51      	ldr	r3, [pc, #324]	@ (80022c4 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 800217e:	2200      	movs	r2, #0
 8002180:	605a      	str	r2, [r3, #4]
					TxData_Inv[0] = 0x0;
 8002182:	4b51      	ldr	r3, [pc, #324]	@ (80022c8 <HAL_TIM_PeriodElapsedCallback+0x420>)
 8002184:	2200      	movs	r2, #0
 8002186:	701a      	strb	r2, [r3, #0]
					TxData_Inv[1] = 0x0;
 8002188:	4b4f      	ldr	r3, [pc, #316]	@ (80022c8 <HAL_TIM_PeriodElapsedCallback+0x420>)
 800218a:	2200      	movs	r2, #0
 800218c:	705a      	strb	r2, [r3, #1]
					TxData_Inv[2] = 0x4;
 800218e:	4b4e      	ldr	r3, [pc, #312]	@ (80022c8 <HAL_TIM_PeriodElapsedCallback+0x420>)
 8002190:	2204      	movs	r2, #4
 8002192:	709a      	strb	r2, [r3, #2]
					HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8002194:	4a4c      	ldr	r2, [pc, #304]	@ (80022c8 <HAL_TIM_PeriodElapsedCallback+0x420>)
 8002196:	494b      	ldr	r1, [pc, #300]	@ (80022c4 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8002198:	484c      	ldr	r0, [pc, #304]	@ (80022cc <HAL_TIM_PeriodElapsedCallback+0x424>)
 800219a:	f006 fcc2 	bl	8008b22 <HAL_FDCAN_AddMessageToTxFifoQ>
				break;
 800219e:	e089      	b.n	80022b4 <HAL_TIM_PeriodElapsedCallback+0x40c>
			case 6:
				print("state: torque");
 80021a0:	484b      	ldr	r0, [pc, #300]	@ (80022d0 <HAL_TIM_PeriodElapsedCallback+0x428>)
 80021a2:	f7ff fbe3 	bl	800196c <print>

				// Request TORQUE inversor

				// flag_react = 1;

				real_torque = setTorque();
 80021a6:	f7ff fd3b 	bl	8001c20 <setTorque>
 80021aa:	4603      	mov	r3, r0
 80021ac:	461a      	mov	r2, r3
 80021ae:	4b49      	ldr	r3, [pc, #292]	@ (80022d4 <HAL_TIM_PeriodElapsedCallback+0x42c>)
 80021b0:	801a      	strh	r2, [r3, #0]

				TxHeader_Inv.Identifier = 0x362;
 80021b2:	4b44      	ldr	r3, [pc, #272]	@ (80022c4 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 80021b4:	f240 3262 	movw	r2, #866	@ 0x362
 80021b8:	601a      	str	r2, [r3, #0]
				TxHeader_Inv.DataLength = 4;
 80021ba:	4b42      	ldr	r3, [pc, #264]	@ (80022c4 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 80021bc:	2204      	movs	r2, #4
 80021be:	60da      	str	r2, [r3, #12]

				// real_torque = 0;
				byte_torque_1 = real_torque & 0xFF;
 80021c0:	4b44      	ldr	r3, [pc, #272]	@ (80022d4 <HAL_TIM_PeriodElapsedCallback+0x42c>)
 80021c2:	881b      	ldrh	r3, [r3, #0]
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	4b44      	ldr	r3, [pc, #272]	@ (80022d8 <HAL_TIM_PeriodElapsedCallback+0x430>)
 80021c8:	701a      	strb	r2, [r3, #0]
				byte_torque_2 = (real_torque >> 8) & 0xFF;
 80021ca:	4b42      	ldr	r3, [pc, #264]	@ (80022d4 <HAL_TIM_PeriodElapsedCallback+0x42c>)
 80021cc:	881b      	ldrh	r3, [r3, #0]
 80021ce:	0a1b      	lsrs	r3, r3, #8
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	4b41      	ldr	r3, [pc, #260]	@ (80022dc <HAL_TIM_PeriodElapsedCallback+0x434>)
 80021d6:	701a      	strb	r2, [r3, #0]
				TxData_Inv[0] = 0x00;
 80021d8:	4b3b      	ldr	r3, [pc, #236]	@ (80022c8 <HAL_TIM_PeriodElapsedCallback+0x420>)
 80021da:	2200      	movs	r2, #0
 80021dc:	701a      	strb	r2, [r3, #0]
				TxData_Inv[1] = 0x00;
 80021de:	4b3a      	ldr	r3, [pc, #232]	@ (80022c8 <HAL_TIM_PeriodElapsedCallback+0x420>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	705a      	strb	r2, [r3, #1]
					if(frena > 500){
						acelera = 1;
						frena = 0;
					}
				}*/
				TxData_Inv[2] = byte_torque_1;
 80021e4:	4b3c      	ldr	r3, [pc, #240]	@ (80022d8 <HAL_TIM_PeriodElapsedCallback+0x430>)
 80021e6:	781a      	ldrb	r2, [r3, #0]
 80021e8:	4b37      	ldr	r3, [pc, #220]	@ (80022c8 <HAL_TIM_PeriodElapsedCallback+0x420>)
 80021ea:	709a      	strb	r2, [r3, #2]
				TxData_Inv[3] = byte_torque_2;
 80021ec:	4b3b      	ldr	r3, [pc, #236]	@ (80022dc <HAL_TIM_PeriodElapsedCallback+0x434>)
 80021ee:	781a      	ldrb	r2, [r3, #0]
 80021f0:	4b35      	ldr	r3, [pc, #212]	@ (80022c8 <HAL_TIM_PeriodElapsedCallback+0x420>)
 80021f2:	70da      	strb	r2, [r3, #3]
				// TxData_Inv[2] = 0xFE;
				// TxData_Inv[3] = 0xFF;
				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 80021f4:	4a34      	ldr	r2, [pc, #208]	@ (80022c8 <HAL_TIM_PeriodElapsedCallback+0x420>)
 80021f6:	4933      	ldr	r1, [pc, #204]	@ (80022c4 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 80021f8:	4834      	ldr	r0, [pc, #208]	@ (80022cc <HAL_TIM_PeriodElapsedCallback+0x424>)
 80021fa:	f006 fc92 	bl	8008b22 <HAL_FDCAN_AddMessageToTxFifoQ>
				//CAN_bus_off_check_reset(&hfdcan1);

				break;
 80021fe:	e059      	b.n	80022b4 <HAL_TIM_PeriodElapsedCallback+0x40c>

			case 10:
				print("state: soft fault");
 8002200:	4837      	ldr	r0, [pc, #220]	@ (80022e0 <HAL_TIM_PeriodElapsedCallback+0x438>)
 8002202:	f7ff fbb3 	bl	800196c <print>
				printValue(error);
 8002206:	4b37      	ldr	r3, [pc, #220]	@ (80022e4 <HAL_TIM_PeriodElapsedCallback+0x43c>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff fbcc 	bl	80019a8 <printValue>

				// Estado READY inversor
				TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8002210:	4b2b      	ldr	r3, [pc, #172]	@ (80022c0 <HAL_TIM_PeriodElapsedCallback+0x418>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a2b      	ldr	r2, [pc, #172]	@ (80022c4 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8002216:	6013      	str	r3, [r2, #0]
				TxHeader_Inv.DataLength = 3;
 8002218:	4b2a      	ldr	r3, [pc, #168]	@ (80022c4 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 800221a:	2203      	movs	r2, #3
 800221c:	60da      	str	r2, [r3, #12]
				TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 800221e:	4b29      	ldr	r3, [pc, #164]	@ (80022c4 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8002220:	2200      	movs	r2, #0
 8002222:	605a      	str	r2, [r3, #4]

				TxData_Inv[0] = 0x0;
 8002224:	4b28      	ldr	r3, [pc, #160]	@ (80022c8 <HAL_TIM_PeriodElapsedCallback+0x420>)
 8002226:	2200      	movs	r2, #0
 8002228:	701a      	strb	r2, [r3, #0]
				TxData_Inv[1] = 0x0;
 800222a:	4b27      	ldr	r3, [pc, #156]	@ (80022c8 <HAL_TIM_PeriodElapsedCallback+0x420>)
 800222c:	2200      	movs	r2, #0
 800222e:	705a      	strb	r2, [r3, #1]
				TxData_Inv[2] = 0x13;
 8002230:	4b25      	ldr	r3, [pc, #148]	@ (80022c8 <HAL_TIM_PeriodElapsedCallback+0x420>)
 8002232:	2213      	movs	r2, #19
 8002234:	709a      	strb	r2, [r3, #2]
				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8002236:	4a24      	ldr	r2, [pc, #144]	@ (80022c8 <HAL_TIM_PeriodElapsedCallback+0x420>)
 8002238:	4922      	ldr	r1, [pc, #136]	@ (80022c4 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 800223a:	4824      	ldr	r0, [pc, #144]	@ (80022cc <HAL_TIM_PeriodElapsedCallback+0x424>)
 800223c:	f006 fc71 	bl	8008b22 <HAL_FDCAN_AddMessageToTxFifoQ>
						HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv,
													  TxData_Inv);
					}*/

			case 11:
				print("state: hard fault");
 8002240:	4829      	ldr	r0, [pc, #164]	@ (80022e8 <HAL_TIM_PeriodElapsedCallback+0x440>)
 8002242:	f7ff fb93 	bl	800196c <print>
				flag_react = 1;
 8002246:	4b1d      	ldr	r3, [pc, #116]	@ (80022bc <HAL_TIM_PeriodElapsedCallback+0x414>)
 8002248:	2201      	movs	r2, #1
 800224a:	701a      	strb	r2, [r3, #0]
				TxHeader_Inv.Identifier = RX_SETPOINT_1;
 800224c:	4b1c      	ldr	r3, [pc, #112]	@ (80022c0 <HAL_TIM_PeriodElapsedCallback+0x418>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a1c      	ldr	r2, [pc, #112]	@ (80022c4 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8002252:	6013      	str	r3, [r2, #0]
				TxHeader_Inv.DataLength = 3;
 8002254:	4b1b      	ldr	r3, [pc, #108]	@ (80022c4 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8002256:	2203      	movs	r2, #3
 8002258:	60da      	str	r2, [r3, #12]
				TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 800225a:	4b1a      	ldr	r3, [pc, #104]	@ (80022c4 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 800225c:	2200      	movs	r2, #0
 800225e:	605a      	str	r2, [r3, #4]

				TxData_Inv[0] = 0x0;
 8002260:	4b19      	ldr	r3, [pc, #100]	@ (80022c8 <HAL_TIM_PeriodElapsedCallback+0x420>)
 8002262:	2200      	movs	r2, #0
 8002264:	701a      	strb	r2, [r3, #0]
				TxData_Inv[1] = 0x0;
 8002266:	4b18      	ldr	r3, [pc, #96]	@ (80022c8 <HAL_TIM_PeriodElapsedCallback+0x420>)
 8002268:	2200      	movs	r2, #0
 800226a:	705a      	strb	r2, [r3, #1]
				TxData_Inv[2] = 13;
 800226c:	4b16      	ldr	r3, [pc, #88]	@ (80022c8 <HAL_TIM_PeriodElapsedCallback+0x420>)
 800226e:	220d      	movs	r2, #13
 8002270:	709a      	strb	r2, [r3, #2]
				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8002272:	4a15      	ldr	r2, [pc, #84]	@ (80022c8 <HAL_TIM_PeriodElapsedCallback+0x420>)
 8002274:	4913      	ldr	r1, [pc, #76]	@ (80022c4 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8002276:	4815      	ldr	r0, [pc, #84]	@ (80022cc <HAL_TIM_PeriodElapsedCallback+0x424>)
 8002278:	f006 fc53 	bl	8008b22 <HAL_FDCAN_AddMessageToTxFifoQ>

			case 13:
				print("state: shutdown");
 800227c:	481b      	ldr	r0, [pc, #108]	@ (80022ec <HAL_TIM_PeriodElapsedCallback+0x444>)
 800227e:	f7ff fb75 	bl	800196c <print>
				TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8002282:	4b0f      	ldr	r3, [pc, #60]	@ (80022c0 <HAL_TIM_PeriodElapsedCallback+0x418>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a0f      	ldr	r2, [pc, #60]	@ (80022c4 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8002288:	6013      	str	r3, [r2, #0]
				TxHeader_Inv.DataLength = 3;
 800228a:	4b0e      	ldr	r3, [pc, #56]	@ (80022c4 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 800228c:	2203      	movs	r2, #3
 800228e:	60da      	str	r2, [r3, #12]
				TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8002290:	4b0c      	ldr	r3, [pc, #48]	@ (80022c4 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8002292:	2200      	movs	r2, #0
 8002294:	605a      	str	r2, [r3, #4]

				TxData_Inv[0] = 0x0;
 8002296:	4b0c      	ldr	r3, [pc, #48]	@ (80022c8 <HAL_TIM_PeriodElapsedCallback+0x420>)
 8002298:	2200      	movs	r2, #0
 800229a:	701a      	strb	r2, [r3, #0]
				TxData_Inv[1] = 0x0;
 800229c:	4b0a      	ldr	r3, [pc, #40]	@ (80022c8 <HAL_TIM_PeriodElapsedCallback+0x420>)
 800229e:	2200      	movs	r2, #0
 80022a0:	705a      	strb	r2, [r3, #1]
				TxData_Inv[2] = 0x1;
 80022a2:	4b09      	ldr	r3, [pc, #36]	@ (80022c8 <HAL_TIM_PeriodElapsedCallback+0x420>)
 80022a4:	2201      	movs	r2, #1
 80022a6:	709a      	strb	r2, [r3, #2]
				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 80022a8:	4a07      	ldr	r2, [pc, #28]	@ (80022c8 <HAL_TIM_PeriodElapsedCallback+0x420>)
 80022aa:	4906      	ldr	r1, [pc, #24]	@ (80022c4 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 80022ac:	4807      	ldr	r0, [pc, #28]	@ (80022cc <HAL_TIM_PeriodElapsedCallback+0x424>)
 80022ae:	f006 fc38 	bl	8008b22 <HAL_FDCAN_AddMessageToTxFifoQ>


				break;
 80022b2:	bf00      	nop
			}
		}
#endif
	}
}
 80022b4:	bf00      	nop
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	2400093b 	.word	0x2400093b
 80022c0:	24000000 	.word	0x24000000
 80022c4:	240006b8 	.word	0x240006b8
 80022c8:	24000778 	.word	0x24000778
 80022cc:	24000204 	.word	0x24000204
 80022d0:	080146d8 	.word	0x080146d8
 80022d4:	240007c8 	.word	0x240007c8
 80022d8:	240007c2 	.word	0x240007c2
 80022dc:	240007c3 	.word	0x240007c3
 80022e0:	080146e8 	.word	0x080146e8
 80022e4:	2400093a 	.word	0x2400093a
 80022e8:	080146fc 	.word	0x080146fc
 80022ec:	08014710 	.word	0x08014710

080022f0 <tel_build_packet>:

// Packs 8 floats (32 bytes). f[0] is the "frame ID".
static void tel_build_packet(float f[8]) {
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
    memset(f, 0, 8*sizeof(float));
 80022f8:	2220      	movs	r2, #32
 80022fa:	2100      	movs	r1, #0
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f011 fbd7 	bl	8013ab0 <memset>

#if TEL_USE_DUMMY
    static uint16_t ids[] = {0x610,0x600,0x630,0x640,0x650,0x670,0x660,0x680};
    static uint8_t idx = 0; if (++idx >= sizeof(ids)/sizeof(ids[0])) idx = 0;
 8002302:	4b2f      	ldr	r3, [pc, #188]	@ (80023c0 <tel_build_packet+0xd0>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	3301      	adds	r3, #1
 8002308:	b2da      	uxtb	r2, r3
 800230a:	4b2d      	ldr	r3, [pc, #180]	@ (80023c0 <tel_build_packet+0xd0>)
 800230c:	701a      	strb	r2, [r3, #0]
 800230e:	4b2c      	ldr	r3, [pc, #176]	@ (80023c0 <tel_build_packet+0xd0>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b07      	cmp	r3, #7
 8002314:	d902      	bls.n	800231c <tel_build_packet+0x2c>
 8002316:	4b2a      	ldr	r3, [pc, #168]	@ (80023c0 <tel_build_packet+0xd0>)
 8002318:	2200      	movs	r2, #0
 800231a:	701a      	strb	r2, [r3, #0]

    f[0] = (float)ids[idx];
 800231c:	4b28      	ldr	r3, [pc, #160]	@ (80023c0 <tel_build_packet+0xd0>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	461a      	mov	r2, r3
 8002322:	4b28      	ldr	r3, [pc, #160]	@ (80023c4 <tel_build_packet+0xd4>)
 8002324:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002328:	ee07 3a90 	vmov	s15, r3
 800232c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	edc3 7a00 	vstr	s15, [r3]
    f[1] = (float)inv_dc_bus_voltage;
 8002336:	4b24      	ldr	r3, [pc, #144]	@ (80023c8 <tel_build_packet+0xd8>)
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	3304      	adds	r3, #4
 800233e:	ee07 2a90 	vmov	s15, r2
 8002342:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002346:	edc3 7a00 	vstr	s15, [r3]
    f[2] = (float)e_machine_rpm;
 800234a:	4b20      	ldr	r3, [pc, #128]	@ (80023cc <tel_build_packet+0xdc>)
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	3308      	adds	r3, #8
 8002352:	ee07 2a90 	vmov	s15, r2
 8002356:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800235a:	edc3 7a00 	vstr	s15, [r3]
    f[3] = (float)torque_total;
 800235e:	4b1c      	ldr	r3, [pc, #112]	@ (80023d0 <tel_build_packet+0xe0>)
 8002360:	881a      	ldrh	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	330c      	adds	r3, #12
 8002366:	ee07 2a90 	vmov	s15, r2
 800236a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800236e:	edc3 7a00 	vstr	s15, [r3]
    f[4] = (float)v_celda_min;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	3310      	adds	r3, #16
 8002376:	4a17      	ldr	r2, [pc, #92]	@ (80023d4 <tel_build_packet+0xe4>)
 8002378:	6812      	ldr	r2, [r2, #0]
 800237a:	601a      	str	r2, [r3, #0]
    f[5] = (float)s1_aceleracion;
 800237c:	4b16      	ldr	r3, [pc, #88]	@ (80023d8 <tel_build_packet+0xe8>)
 800237e:	881a      	ldrh	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3314      	adds	r3, #20
 8002384:	ee07 2a90 	vmov	s15, r2
 8002388:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800238c:	edc3 7a00 	vstr	s15, [r3]
    f[6] = (float)s2_aceleracion;
 8002390:	4b12      	ldr	r3, [pc, #72]	@ (80023dc <tel_build_packet+0xec>)
 8002392:	881a      	ldrh	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3318      	adds	r3, #24
 8002398:	ee07 2a90 	vmov	s15, r2
 800239c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023a0:	edc3 7a00 	vstr	s15, [r3]
    f[7] = (float)state;
 80023a4:	4b0e      	ldr	r3, [pc, #56]	@ (80023e0 <tel_build_packet+0xf0>)
 80023a6:	781a      	ldrb	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	331c      	adds	r3, #28
 80023ac:	ee07 2a90 	vmov	s15, r2
 80023b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023b4:	edc3 7a00 	vstr	s15, [r3]
    f[4] = (float)torque_total;
    f[5] = (float)v_celda_min;
    f[6] = (float)s1_aceleracion;
    f[7] = (float)s2_aceleracion;
#endif
}
 80023b8:	bf00      	nop
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	24000948 	.word	0x24000948
 80023c4:	24000014 	.word	0x24000014
 80023c8:	240007a4 	.word	0x240007a4
 80023cc:	240007a8 	.word	0x240007a8
 80023d0:	240007c0 	.word	0x240007c0
 80023d4:	24000010 	.word	0x24000010
 80023d8:	240007b2 	.word	0x240007b2
 80023dc:	240007b4 	.word	0x240007b4
 80023e0:	240007ca 	.word	0x240007ca

080023e4 <tel_send_now>:

static void tel_send_now(void) {
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b0b6      	sub	sp, #216	@ 0xd8
 80023e8:	af02      	add	r7, sp, #8
    float pkt[8];
    tel_build_packet(pkt);
 80023ea:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff ff7e 	bl	80022f0 <tel_build_packet>

    // debug: print exactly what we'll TX
    char msg[160];
    int ent, dec;
    snprintf(msg, sizeof(msg), "\r\n[TX] ID: 0x%X", (uint16_t)pkt[0]);
 80023f4:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 80023f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023fc:	ee17 3a90 	vmov	r3, s15
 8002400:	b29b      	uxth	r3, r3
 8002402:	4638      	mov	r0, r7
 8002404:	4a5a      	ldr	r2, [pc, #360]	@ (8002570 <tel_send_now+0x18c>)
 8002406:	21a0      	movs	r1, #160	@ 0xa0
 8002408:	f011 fafa 	bl	8013a00 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800240c:	463b      	mov	r3, r7
 800240e:	4618      	mov	r0, r3
 8002410:	f7fd ff7e 	bl	8000310 <strlen>
 8002414:	4603      	mov	r3, r0
 8002416:	b29a      	uxth	r2, r3
 8002418:	4639      	mov	r1, r7
 800241a:	f04f 33ff 	mov.w	r3, #4294967295
 800241e:	4855      	ldr	r0, [pc, #340]	@ (8002574 <tel_send_now+0x190>)
 8002420:	f00f f862 	bl	80114e8 <HAL_UART_Transmit>
    for (int j=1; j<8; ++j) {
 8002424:	2301      	movs	r3, #1
 8002426:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800242a:	e04e      	b.n	80024ca <tel_send_now+0xe6>
        ent = (int)pkt[j];
 800242c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	33d0      	adds	r3, #208	@ 0xd0
 8002434:	443b      	add	r3, r7
 8002436:	3b30      	subs	r3, #48	@ 0x30
 8002438:	edd3 7a00 	vldr	s15, [r3]
 800243c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002440:	ee17 3a90 	vmov	r3, s15
 8002444:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
        dec = (int)((pkt[j] - ent) * 100); if (dec < 0) dec = -dec;
 8002448:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	33d0      	adds	r3, #208	@ 0xd0
 8002450:	443b      	add	r3, r7
 8002452:	3b30      	subs	r3, #48	@ 0x30
 8002454:	ed93 7a00 	vldr	s14, [r3]
 8002458:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800245c:	ee07 3a90 	vmov	s15, r3
 8002460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002464:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002468:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8002578 <tel_send_now+0x194>
 800246c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002470:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002474:	ee17 3a90 	vmov	r3, s15
 8002478:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800247c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002480:	2b00      	cmp	r3, #0
 8002482:	da04      	bge.n	800248e <tel_send_now+0xaa>
 8002484:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002488:	425b      	negs	r3, r3
 800248a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        snprintf(msg, sizeof(msg), ", V%d:%d.%02d", j, ent, dec);
 800248e:	4638      	mov	r0, r7
 8002490:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002494:	9301      	str	r3, [sp, #4]
 8002496:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80024a0:	4a36      	ldr	r2, [pc, #216]	@ (800257c <tel_send_now+0x198>)
 80024a2:	21a0      	movs	r1, #160	@ 0xa0
 80024a4:	f011 faac 	bl	8013a00 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80024a8:	463b      	mov	r3, r7
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7fd ff30 	bl	8000310 <strlen>
 80024b0:	4603      	mov	r3, r0
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	4639      	mov	r1, r7
 80024b6:	f04f 33ff 	mov.w	r3, #4294967295
 80024ba:	482e      	ldr	r0, [pc, #184]	@ (8002574 <tel_send_now+0x190>)
 80024bc:	f00f f814 	bl	80114e8 <HAL_UART_Transmit>
    for (int j=1; j<8; ++j) {
 80024c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80024c4:	3301      	adds	r3, #1
 80024c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80024ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80024ce:	2b07      	cmp	r3, #7
 80024d0:	ddac      	ble.n	800242c <tel_send_now+0x48>
    }
    HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 80024d2:	f04f 33ff 	mov.w	r3, #4294967295
 80024d6:	2202      	movs	r2, #2
 80024d8:	4929      	ldr	r1, [pc, #164]	@ (8002580 <tel_send_now+0x19c>)
 80024da:	4826      	ldr	r0, [pc, #152]	@ (8002574 <tel_send_now+0x190>)
 80024dc:	f00f f804 	bl	80114e8 <HAL_UART_Transmit>

    // TX over nRF24 (32 bytes)
    uint8_t ok = NRF24_Transmit((uint8_t*)pkt);
 80024e0:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80024e4:	4618      	mov	r0, r3
 80024e6:	f000 fa3f 	bl	8002968 <NRF24_Transmit>
 80024ea:	4603      	mov	r3, r0
 80024ec:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
    uint8_t st = nrf24_ReadReg(STATUS);
 80024f0:	2007      	movs	r0, #7
 80024f2:	f000 f8e9 	bl	80026c8 <nrf24_ReadReg>
 80024f6:	4603      	mov	r3, r0
 80024f8:	f887 30c6 	strb.w	r3, [r7, #198]	@ 0xc6
    uint8_t ob = nrf24_ReadReg(OBSERVE_TX);
 80024fc:	2008      	movs	r0, #8
 80024fe:	f000 f8e3 	bl	80026c8 <nrf24_ReadReg>
 8002502:	4603      	mov	r3, r0
 8002504:	f887 30c5 	strb.w	r3, [r7, #197]	@ 0xc5

    snprintf(msg, sizeof(msg), ok ? "[TX] OK " : "[TX] FAIL ");
 8002508:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <tel_send_now+0x130>
 8002510:	4a1c      	ldr	r2, [pc, #112]	@ (8002584 <tel_send_now+0x1a0>)
 8002512:	e000      	b.n	8002516 <tel_send_now+0x132>
 8002514:	4a1c      	ldr	r2, [pc, #112]	@ (8002588 <tel_send_now+0x1a4>)
 8002516:	463b      	mov	r3, r7
 8002518:	21a0      	movs	r1, #160	@ 0xa0
 800251a:	4618      	mov	r0, r3
 800251c:	f011 fa70 	bl	8013a00 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002520:	463b      	mov	r3, r7
 8002522:	4618      	mov	r0, r3
 8002524:	f7fd fef4 	bl	8000310 <strlen>
 8002528:	4603      	mov	r3, r0
 800252a:	b29a      	uxth	r2, r3
 800252c:	4639      	mov	r1, r7
 800252e:	f04f 33ff 	mov.w	r3, #4294967295
 8002532:	4810      	ldr	r0, [pc, #64]	@ (8002574 <tel_send_now+0x190>)
 8002534:	f00e ffd8 	bl	80114e8 <HAL_UART_Transmit>
    snprintf(msg, sizeof(msg), "STATUS=%02X OBSERVE_TX=%02X\r\n", st, ob);
 8002538:	f897 20c6 	ldrb.w	r2, [r7, #198]	@ 0xc6
 800253c:	f897 30c5 	ldrb.w	r3, [r7, #197]	@ 0xc5
 8002540:	4638      	mov	r0, r7
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	4613      	mov	r3, r2
 8002546:	4a11      	ldr	r2, [pc, #68]	@ (800258c <tel_send_now+0x1a8>)
 8002548:	21a0      	movs	r1, #160	@ 0xa0
 800254a:	f011 fa59 	bl	8013a00 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800254e:	463b      	mov	r3, r7
 8002550:	4618      	mov	r0, r3
 8002552:	f7fd fedd 	bl	8000310 <strlen>
 8002556:	4603      	mov	r3, r0
 8002558:	b29a      	uxth	r2, r3
 800255a:	4639      	mov	r1, r7
 800255c:	f04f 33ff 	mov.w	r3, #4294967295
 8002560:	4804      	ldr	r0, [pc, #16]	@ (8002574 <tel_send_now+0x190>)
 8002562:	f00e ffc1 	bl	80114e8 <HAL_UART_Transmit>
}
 8002566:	bf00      	nop
 8002568:	37d0      	adds	r7, #208	@ 0xd0
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	08014720 	.word	0x08014720
 8002574:	24000614 	.word	0x24000614
 8002578:	42c80000 	.word	0x42c80000
 800257c:	08014730 	.word	0x08014730
 8002580:	08014740 	.word	0x08014740
 8002584:	08014744 	.word	0x08014744
 8002588:	08014750 	.word	0x08014750
 800258c:	0801475c 	.word	0x0801475c

08002590 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002594:	b672      	cpsid	i
}
 8002596:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002598:	bf00      	nop
 800259a:	e7fd      	b.n	8002598 <Error_Handler+0x8>

0800259c <CS_Select>:
#define NRF24_CE_PIN     GPIO_PIN_6
#define NRF24_CSN_PORT   GPIOG
#define NRF24_CSN_PIN    GPIO_PIN_3

/* ==== Local helpers ====================================================== */
static inline void CS_Select(void)   { HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET); }
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
 80025a0:	2200      	movs	r2, #0
 80025a2:	2108      	movs	r1, #8
 80025a4:	4802      	ldr	r0, [pc, #8]	@ (80025b0 <CS_Select+0x14>)
 80025a6:	f007 fbbf 	bl	8009d28 <HAL_GPIO_WritePin>
 80025aa:	bf00      	nop
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	58021800 	.word	0x58021800

080025b4 <CS_UnSelect>:
static inline void CS_UnSelect(void) { HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);   }
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	2201      	movs	r2, #1
 80025ba:	2108      	movs	r1, #8
 80025bc:	4802      	ldr	r0, [pc, #8]	@ (80025c8 <CS_UnSelect+0x14>)
 80025be:	f007 fbb3 	bl	8009d28 <HAL_GPIO_WritePin>
 80025c2:	bf00      	nop
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	58021800 	.word	0x58021800

080025cc <CE_Enable>:
static inline void CE_Enable(void)   { HAL_GPIO_WritePin(NRF24_CE_PORT,  NRF24_CE_PIN,  GPIO_PIN_SET);   }
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	2201      	movs	r2, #1
 80025d2:	2140      	movs	r1, #64	@ 0x40
 80025d4:	4802      	ldr	r0, [pc, #8]	@ (80025e0 <CE_Enable+0x14>)
 80025d6:	f007 fba7 	bl	8009d28 <HAL_GPIO_WritePin>
 80025da:	bf00      	nop
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	58020800 	.word	0x58020800

080025e4 <CE_Disable>:
static inline void CE_Disable(void)  { HAL_GPIO_WritePin(NRF24_CE_PORT,  NRF24_CE_PIN,  GPIO_PIN_RESET); }
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	2200      	movs	r2, #0
 80025ea:	2140      	movs	r1, #64	@ 0x40
 80025ec:	4802      	ldr	r0, [pc, #8]	@ (80025f8 <CE_Disable+0x14>)
 80025ee:	f007 fb9b 	bl	8009d28 <HAL_GPIO_WritePin>
 80025f2:	bf00      	nop
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	58020800 	.word	0x58020800

080025fc <uputs>:

static void uputs(const char *s){ HAL_UART_Transmit(NRF24_UART, (uint8_t*)s, strlen(s), HAL_MAX_DELAY); }
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f7fd fe83 	bl	8000310 <strlen>
 800260a:	4603      	mov	r3, r0
 800260c:	b29a      	uxth	r2, r3
 800260e:	f04f 33ff 	mov.w	r3, #4294967295
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	4803      	ldr	r0, [pc, #12]	@ (8002624 <uputs+0x28>)
 8002616:	f00e ff67 	bl	80114e8 <HAL_UART_Transmit>
 800261a:	bf00      	nop
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	24000614 	.word	0x24000614

08002628 <nrf24_WriteReg>:
#define T_SHORT   100U
#define T_LONG   1000U

/* ==== Low-level SPI access ============================================== */
void nrf24_WriteReg(uint8_t reg, uint8_t val)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	4603      	mov	r3, r0
 8002630:	460a      	mov	r2, r1
 8002632:	71fb      	strb	r3, [r7, #7]
 8002634:	4613      	mov	r3, r2
 8002636:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];
    buf[0] = (uint8_t)(W_REGISTER | (reg & REGISTER_MASK));
 8002638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263c:	f003 031f 	and.w	r3, r3, #31
 8002640:	b25b      	sxtb	r3, r3
 8002642:	f043 0320 	orr.w	r3, r3, #32
 8002646:	b25b      	sxtb	r3, r3
 8002648:	b2db      	uxtb	r3, r3
 800264a:	733b      	strb	r3, [r7, #12]
    buf[1] = val;
 800264c:	79bb      	ldrb	r3, [r7, #6]
 800264e:	737b      	strb	r3, [r7, #13]
    CS_Select();
 8002650:	f7ff ffa4 	bl	800259c <CS_Select>
    HAL_SPI_Transmit(NRF24_SPI, buf, 2, T_SHORT);
 8002654:	f107 010c 	add.w	r1, r7, #12
 8002658:	2364      	movs	r3, #100	@ 0x64
 800265a:	2202      	movs	r2, #2
 800265c:	4804      	ldr	r0, [pc, #16]	@ (8002670 <nrf24_WriteReg+0x48>)
 800265e:	f00c fc8b 	bl	800ef78 <HAL_SPI_Transmit>
    CS_UnSelect();
 8002662:	f7ff ffa7 	bl	80025b4 <CS_UnSelect>
}
 8002666:	bf00      	nop
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	24000460 	.word	0x24000460

08002674 <nrf24_WriteRegMulti>:
void nrf24_WriteRegMulti(uint8_t reg, const uint8_t *data, int size)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	4603      	mov	r3, r0
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
 8002680:	73fb      	strb	r3, [r7, #15]
    uint8_t cmd = (uint8_t)(W_REGISTER | (reg & REGISTER_MASK));
 8002682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002686:	f003 031f 	and.w	r3, r3, #31
 800268a:	b25b      	sxtb	r3, r3
 800268c:	f043 0320 	orr.w	r3, r3, #32
 8002690:	b25b      	sxtb	r3, r3
 8002692:	b2db      	uxtb	r3, r3
 8002694:	75fb      	strb	r3, [r7, #23]
    CS_Select();
 8002696:	f7ff ff81 	bl	800259c <CS_Select>
    HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, T_SHORT);
 800269a:	f107 0117 	add.w	r1, r7, #23
 800269e:	2364      	movs	r3, #100	@ 0x64
 80026a0:	2201      	movs	r2, #1
 80026a2:	4808      	ldr	r0, [pc, #32]	@ (80026c4 <nrf24_WriteRegMulti+0x50>)
 80026a4:	f00c fc68 	bl	800ef78 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(NRF24_SPI, (uint8_t*)data, size, T_LONG);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026b0:	68b9      	ldr	r1, [r7, #8]
 80026b2:	4804      	ldr	r0, [pc, #16]	@ (80026c4 <nrf24_WriteRegMulti+0x50>)
 80026b4:	f00c fc60 	bl	800ef78 <HAL_SPI_Transmit>
    CS_UnSelect();
 80026b8:	f7ff ff7c 	bl	80025b4 <CS_UnSelect>
}
 80026bc:	bf00      	nop
 80026be:	3718      	adds	r7, #24
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	24000460 	.word	0x24000460

080026c8 <nrf24_ReadReg>:

 uint8_t nrf24_ReadReg(uint8_t reg)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	71fb      	strb	r3, [r7, #7]
    uint8_t cmd = (uint8_t)(R_REGISTER | (reg & REGISTER_MASK));
 80026d2:	79fb      	ldrb	r3, [r7, #7]
 80026d4:	f003 031f 	and.w	r3, r3, #31
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	73fb      	strb	r3, [r7, #15]
    uint8_t val = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	73bb      	strb	r3, [r7, #14]
    CS_Select();
 80026e0:	f7ff ff5c 	bl	800259c <CS_Select>
    HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, T_SHORT);
 80026e4:	f107 010f 	add.w	r1, r7, #15
 80026e8:	2364      	movs	r3, #100	@ 0x64
 80026ea:	2201      	movs	r2, #1
 80026ec:	4808      	ldr	r0, [pc, #32]	@ (8002710 <nrf24_ReadReg+0x48>)
 80026ee:	f00c fc43 	bl	800ef78 <HAL_SPI_Transmit>
    HAL_SPI_Receive (NRF24_SPI, &val, 1, T_SHORT);
 80026f2:	f107 010e 	add.w	r1, r7, #14
 80026f6:	2364      	movs	r3, #100	@ 0x64
 80026f8:	2201      	movs	r2, #1
 80026fa:	4805      	ldr	r0, [pc, #20]	@ (8002710 <nrf24_ReadReg+0x48>)
 80026fc:	f00c fe2a 	bl	800f354 <HAL_SPI_Receive>
    CS_UnSelect();
 8002700:	f7ff ff58 	bl	80025b4 <CS_UnSelect>
    return val;
 8002704:	7bbb      	ldrb	r3, [r7, #14]
}
 8002706:	4618      	mov	r0, r3
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	24000460 	.word	0x24000460

08002714 <nrf24_ReadRegMulti>:

static void nrf24_ReadRegMulti(uint8_t reg, uint8_t *data, int size)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	4603      	mov	r3, r0
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
 8002720:	73fb      	strb	r3, [r7, #15]
    uint8_t cmd = (uint8_t)(R_REGISTER | (reg & REGISTER_MASK));
 8002722:	7bfb      	ldrb	r3, [r7, #15]
 8002724:	f003 031f 	and.w	r3, r3, #31
 8002728:	b2db      	uxtb	r3, r3
 800272a:	75fb      	strb	r3, [r7, #23]
    CS_Select();
 800272c:	f7ff ff36 	bl	800259c <CS_Select>
    HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, T_SHORT);
 8002730:	f107 0117 	add.w	r1, r7, #23
 8002734:	2364      	movs	r3, #100	@ 0x64
 8002736:	2201      	movs	r2, #1
 8002738:	4808      	ldr	r0, [pc, #32]	@ (800275c <nrf24_ReadRegMulti+0x48>)
 800273a:	f00c fc1d 	bl	800ef78 <HAL_SPI_Transmit>
    HAL_SPI_Receive (NRF24_SPI, data, size, T_LONG);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	b29a      	uxth	r2, r3
 8002742:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002746:	68b9      	ldr	r1, [r7, #8]
 8002748:	4804      	ldr	r0, [pc, #16]	@ (800275c <nrf24_ReadRegMulti+0x48>)
 800274a:	f00c fe03 	bl	800f354 <HAL_SPI_Receive>
    CS_UnSelect();
 800274e:	f7ff ff31 	bl	80025b4 <CS_UnSelect>
}
 8002752:	bf00      	nop
 8002754:	3718      	adds	r7, #24
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	24000460 	.word	0x24000460

08002760 <nrf24_SendCmd>:

static void nrf24_SendCmd(uint8_t cmd)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	4603      	mov	r3, r0
 8002768:	71fb      	strb	r3, [r7, #7]
    CS_Select();
 800276a:	f7ff ff17 	bl	800259c <CS_Select>
    HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, T_SHORT);
 800276e:	1df9      	adds	r1, r7, #7
 8002770:	2364      	movs	r3, #100	@ 0x64
 8002772:	2201      	movs	r2, #1
 8002774:	4804      	ldr	r0, [pc, #16]	@ (8002788 <nrf24_SendCmd+0x28>)
 8002776:	f00c fbff 	bl	800ef78 <HAL_SPI_Transmit>
    CS_UnSelect();
 800277a:	f7ff ff1b 	bl	80025b4 <CS_UnSelect>
}
 800277e:	bf00      	nop
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	24000460 	.word	0x24000460

0800278c <nrf24_reset>:

/* ==== Soft reset (subset) =============================================== */
static void nrf24_reset(uint8_t reg)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	71fb      	strb	r3, [r7, #7]
    if (reg == STATUS) {
 8002796:	79fb      	ldrb	r3, [r7, #7]
 8002798:	2b07      	cmp	r3, #7
 800279a:	d104      	bne.n	80027a6 <nrf24_reset+0x1a>
        /* clear IRQs (RX_DR | TX_DS | MAX_RT) */
        nrf24_WriteReg(STATUS, 0x70);
 800279c:	2170      	movs	r1, #112	@ 0x70
 800279e:	2007      	movs	r0, #7
 80027a0:	f7ff ff42 	bl	8002628 <nrf24_WriteReg>
        nrf24_WriteReg(RX_PW_P2, 0);
        nrf24_WriteReg(RX_PW_P3, 0);
        nrf24_WriteReg(RX_PW_P4, 0);
        nrf24_WriteReg(RX_PW_P5, 0);
    }
}
 80027a4:	e080      	b.n	80028a8 <nrf24_reset+0x11c>
    else if (reg == FIFO_STATUS) {
 80027a6:	79fb      	ldrb	r3, [r7, #7]
 80027a8:	2b17      	cmp	r3, #23
 80027aa:	d104      	bne.n	80027b6 <nrf24_reset+0x2a>
        nrf24_WriteReg(FIFO_STATUS, 0x11);
 80027ac:	2111      	movs	r1, #17
 80027ae:	2017      	movs	r0, #23
 80027b0:	f7ff ff3a 	bl	8002628 <nrf24_WriteReg>
}
 80027b4:	e078      	b.n	80028a8 <nrf24_reset+0x11c>
        nrf24_WriteReg(CONFIG,      0x08);  /* CRC off, PWR_DOWN */
 80027b6:	2108      	movs	r1, #8
 80027b8:	2000      	movs	r0, #0
 80027ba:	f7ff ff35 	bl	8002628 <nrf24_WriteReg>
        nrf24_WriteReg(EN_AA,       0x00);  /* no Auto-ACK */
 80027be:	2100      	movs	r1, #0
 80027c0:	2001      	movs	r0, #1
 80027c2:	f7ff ff31 	bl	8002628 <nrf24_WriteReg>
        nrf24_WriteReg(EN_RXADDR,   0x03);  /* P0,P1 enabled */
 80027c6:	2103      	movs	r1, #3
 80027c8:	2002      	movs	r0, #2
 80027ca:	f7ff ff2d 	bl	8002628 <nrf24_WriteReg>
        nrf24_WriteReg(SETUP_AW,    0x03);  /* 5-byte addr */
 80027ce:	2103      	movs	r1, #3
 80027d0:	2003      	movs	r0, #3
 80027d2:	f7ff ff29 	bl	8002628 <nrf24_WriteReg>
        nrf24_WriteReg(SETUP_RETR,  0x00);  /* no retries */
 80027d6:	2100      	movs	r1, #0
 80027d8:	2004      	movs	r0, #4
 80027da:	f7ff ff25 	bl	8002628 <nrf24_WriteReg>
        nrf24_WriteReg(RF_CH,       76);    /* ch=76 */
 80027de:	214c      	movs	r1, #76	@ 0x4c
 80027e0:	2005      	movs	r0, #5
 80027e2:	f7ff ff21 	bl	8002628 <nrf24_WriteReg>
        nrf24_WriteReg(RF_SETUP,    0x06);  /* 1 Mbps, 0 dBm */
 80027e6:	2106      	movs	r1, #6
 80027e8:	2006      	movs	r0, #6
 80027ea:	f7ff ff1d 	bl	8002628 <nrf24_WriteReg>
        nrf24_WriteReg(FEATURE,     0x00);  /* no dyn payloads */
 80027ee:	2100      	movs	r1, #0
 80027f0:	201d      	movs	r0, #29
 80027f2:	f7ff ff19 	bl	8002628 <nrf24_WriteReg>
        nrf24_WriteReg(DYNPD,       0x00);
 80027f6:	2100      	movs	r1, #0
 80027f8:	201c      	movs	r0, #28
 80027fa:	f7ff ff15 	bl	8002628 <nrf24_WriteReg>
        nrf24_WriteReg(FIFO_STATUS, 0x11);
 80027fe:	2111      	movs	r1, #17
 8002800:	2017      	movs	r0, #23
 8002802:	f7ff ff11 	bl	8002628 <nrf24_WriteReg>
        nrf24_WriteReg(STATUS,      0x70);  /* clear IRQs */
 8002806:	2170      	movs	r1, #112	@ 0x70
 8002808:	2007      	movs	r0, #7
 800280a:	f7ff ff0d 	bl	8002628 <nrf24_WriteReg>
        uint8_t def0[5] = {0xE7,0xE7,0xE7,0xE7,0xE7};
 800280e:	4a28      	ldr	r2, [pc, #160]	@ (80028b0 <nrf24_reset+0x124>)
 8002810:	f107 0310 	add.w	r3, r7, #16
 8002814:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002818:	6018      	str	r0, [r3, #0]
 800281a:	3304      	adds	r3, #4
 800281c:	7019      	strb	r1, [r3, #0]
        uint8_t def1[5] = {0xC2,0xC2,0xC2,0xC2,0xC2};
 800281e:	4a25      	ldr	r2, [pc, #148]	@ (80028b4 <nrf24_reset+0x128>)
 8002820:	f107 0308 	add.w	r3, r7, #8
 8002824:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002828:	6018      	str	r0, [r3, #0]
 800282a:	3304      	adds	r3, #4
 800282c:	7019      	strb	r1, [r3, #0]
        nrf24_WriteRegMulti(RX_ADDR_P0, def0, 5);
 800282e:	f107 0310 	add.w	r3, r7, #16
 8002832:	2205      	movs	r2, #5
 8002834:	4619      	mov	r1, r3
 8002836:	200a      	movs	r0, #10
 8002838:	f7ff ff1c 	bl	8002674 <nrf24_WriteRegMulti>
        nrf24_WriteRegMulti(RX_ADDR_P1, def1, 5);
 800283c:	f107 0308 	add.w	r3, r7, #8
 8002840:	2205      	movs	r2, #5
 8002842:	4619      	mov	r1, r3
 8002844:	200b      	movs	r0, #11
 8002846:	f7ff ff15 	bl	8002674 <nrf24_WriteRegMulti>
        nrf24_WriteReg    (RX_ADDR_P2, 0xC3);
 800284a:	21c3      	movs	r1, #195	@ 0xc3
 800284c:	200c      	movs	r0, #12
 800284e:	f7ff feeb 	bl	8002628 <nrf24_WriteReg>
        nrf24_WriteReg    (RX_ADDR_P3, 0xC4);
 8002852:	21c4      	movs	r1, #196	@ 0xc4
 8002854:	200d      	movs	r0, #13
 8002856:	f7ff fee7 	bl	8002628 <nrf24_WriteReg>
        nrf24_WriteReg    (RX_ADDR_P4, 0xC5);
 800285a:	21c5      	movs	r1, #197	@ 0xc5
 800285c:	200e      	movs	r0, #14
 800285e:	f7ff fee3 	bl	8002628 <nrf24_WriteReg>
        nrf24_WriteReg    (RX_ADDR_P5, 0xC6);
 8002862:	21c6      	movs	r1, #198	@ 0xc6
 8002864:	200f      	movs	r0, #15
 8002866:	f7ff fedf 	bl	8002628 <nrf24_WriteReg>
        nrf24_WriteRegMulti(TX_ADDR,    def0, 5);
 800286a:	f107 0310 	add.w	r3, r7, #16
 800286e:	2205      	movs	r2, #5
 8002870:	4619      	mov	r1, r3
 8002872:	2010      	movs	r0, #16
 8002874:	f7ff fefe 	bl	8002674 <nrf24_WriteRegMulti>
        nrf24_WriteReg(RX_PW_P0, 0);
 8002878:	2100      	movs	r1, #0
 800287a:	2011      	movs	r0, #17
 800287c:	f7ff fed4 	bl	8002628 <nrf24_WriteReg>
        nrf24_WriteReg(RX_PW_P1, 0);
 8002880:	2100      	movs	r1, #0
 8002882:	2012      	movs	r0, #18
 8002884:	f7ff fed0 	bl	8002628 <nrf24_WriteReg>
        nrf24_WriteReg(RX_PW_P2, 0);
 8002888:	2100      	movs	r1, #0
 800288a:	2013      	movs	r0, #19
 800288c:	f7ff fecc 	bl	8002628 <nrf24_WriteReg>
        nrf24_WriteReg(RX_PW_P3, 0);
 8002890:	2100      	movs	r1, #0
 8002892:	2014      	movs	r0, #20
 8002894:	f7ff fec8 	bl	8002628 <nrf24_WriteReg>
        nrf24_WriteReg(RX_PW_P4, 0);
 8002898:	2100      	movs	r1, #0
 800289a:	2015      	movs	r0, #21
 800289c:	f7ff fec4 	bl	8002628 <nrf24_WriteReg>
        nrf24_WriteReg(RX_PW_P5, 0);
 80028a0:	2100      	movs	r1, #0
 80028a2:	2016      	movs	r0, #22
 80028a4:	f7ff fec0 	bl	8002628 <nrf24_WriteReg>
}
 80028a8:	bf00      	nop
 80028aa:	3718      	adds	r7, #24
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	0801477c 	.word	0x0801477c
 80028b4:	08014784 	.word	0x08014784

080028b8 <NRF24_Init>:

/* ==== Public API ========================================================= */

void NRF24_Init(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
    CE_Disable();
 80028bc:	f7ff fe92 	bl	80025e4 <CE_Disable>
    nrf24_reset(0);
 80028c0:	2000      	movs	r0, #0
 80028c2:	f7ff ff63 	bl	800278c <nrf24_reset>

    /* fixed settings for link bring-up */
    nrf24_WriteReg(EN_AA,        0x00);  /* NO ACK */
 80028c6:	2100      	movs	r1, #0
 80028c8:	2001      	movs	r0, #1
 80028ca:	f7ff fead 	bl	8002628 <nrf24_WriteReg>
    nrf24_WriteReg(SETUP_RETR,   0x00);  /* NO retries */
 80028ce:	2100      	movs	r1, #0
 80028d0:	2004      	movs	r0, #4
 80028d2:	f7ff fea9 	bl	8002628 <nrf24_WriteReg>
    nrf24_WriteReg(EN_RXADDR,    0x03);  /* P0,P1 */
 80028d6:	2103      	movs	r1, #3
 80028d8:	2002      	movs	r0, #2
 80028da:	f7ff fea5 	bl	8002628 <nrf24_WriteReg>
    nrf24_WriteReg(SETUP_AW,     0x03);  /* 5-byte */
 80028de:	2103      	movs	r1, #3
 80028e0:	2003      	movs	r0, #3
 80028e2:	f7ff fea1 	bl	8002628 <nrf24_WriteReg>
    nrf24_WriteReg(RF_CH,        76);    /* channel 76 */
 80028e6:	214c      	movs	r1, #76	@ 0x4c
 80028e8:	2005      	movs	r0, #5
 80028ea:	f7ff fe9d 	bl	8002628 <nrf24_WriteReg>
    nrf24_WriteReg(RF_SETUP,     0x06);  /* 1 Mbps, 0 dBm */
 80028ee:	2106      	movs	r1, #6
 80028f0:	2006      	movs	r0, #6
 80028f2:	f7ff fe99 	bl	8002628 <nrf24_WriteReg>
    nrf24_WriteReg(FEATURE,      0x00);
 80028f6:	2100      	movs	r1, #0
 80028f8:	201d      	movs	r0, #29
 80028fa:	f7ff fe95 	bl	8002628 <nrf24_WriteReg>
    nrf24_WriteReg(DYNPD,        0x00);
 80028fe:	2100      	movs	r1, #0
 8002900:	201c      	movs	r0, #28
 8002902:	f7ff fe91 	bl	8002628 <nrf24_WriteReg>
    nrf24_WriteReg(FIFO_STATUS,  0x11);
 8002906:	2111      	movs	r1, #17
 8002908:	2017      	movs	r0, #23
 800290a:	f7ff fe8d 	bl	8002628 <nrf24_WriteReg>
    nrf24_WriteReg(STATUS,       0x70);  /* clear IRQs */
 800290e:	2170      	movs	r1, #112	@ 0x70
 8002910:	2007      	movs	r0, #7
 8002912:	f7ff fe89 	bl	8002628 <nrf24_WriteReg>

    CE_Enable();    /* power state will be set in TxMode/RxMode */
 8002916:	f7ff fe59 	bl	80025cc <CE_Enable>
}
 800291a:	bf00      	nop
 800291c:	bd80      	pop	{r7, pc}

0800291e <NRF24_TxMode>:

void NRF24_TxMode(uint8_t *Address, uint8_t channel)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b084      	sub	sp, #16
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
 8002926:	460b      	mov	r3, r1
 8002928:	70fb      	strb	r3, [r7, #3]
    CE_Disable();
 800292a:	f7ff fe5b 	bl	80025e4 <CE_Disable>

    nrf24_WriteReg(RF_CH, channel);
 800292e:	78fb      	ldrb	r3, [r7, #3]
 8002930:	4619      	mov	r1, r3
 8002932:	2005      	movs	r0, #5
 8002934:	f7ff fe78 	bl	8002628 <nrf24_WriteReg>
    nrf24_WriteRegMulti(TX_ADDR,    Address, 5);
 8002938:	2205      	movs	r2, #5
 800293a:	6879      	ldr	r1, [r7, #4]
 800293c:	2010      	movs	r0, #16
 800293e:	f7ff fe99 	bl	8002674 <nrf24_WriteRegMulti>
    nrf24_WriteRegMulti(RX_ADDR_P0, Address, 5);  /* ACK return path if enabled later */
 8002942:	2205      	movs	r2, #5
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	200a      	movs	r0, #10
 8002948:	f7ff fe94 	bl	8002674 <nrf24_WriteRegMulti>

    /* CONFIG: PWR_UP(1) | EN_CRC(1) | CRCO(1=16bit) | PRIM_RX(0) */
    uint8_t cfg = (1<<1) | (1<<3) | (1<<2);   /* 0x0E */
 800294c:	230e      	movs	r3, #14
 800294e:	73fb      	strb	r3, [r7, #15]
    nrf24_WriteReg(CONFIG, cfg);
 8002950:	7bfb      	ldrb	r3, [r7, #15]
 8002952:	4619      	mov	r1, r3
 8002954:	2000      	movs	r0, #0
 8002956:	f7ff fe67 	bl	8002628 <nrf24_WriteReg>

    CE_Enable();
 800295a:	f7ff fe37 	bl	80025cc <CE_Enable>
}
 800295e:	bf00      	nop
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
	...

08002968 <NRF24_Transmit>:

uint8_t NRF24_Transmit(uint8_t *data)   /* 32 bytes */
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b098      	sub	sp, #96	@ 0x60
 800296c:	af02      	add	r7, sp, #8
 800296e:	6078      	str	r0, [r7, #4]
    uint8_t cmd, status;
    uint32_t t0;

    CE_Disable();
 8002970:	f7ff fe38 	bl	80025e4 <CE_Disable>

    /* load TX FIFO */
    cmd = W_TX_PAYLOAD;
 8002974:	23a0      	movs	r3, #160	@ 0xa0
 8002976:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
    CS_Select();
 800297a:	f7ff fe0f 	bl	800259c <CS_Select>
    HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, T_SHORT);
 800297e:	f107 0151 	add.w	r1, r7, #81	@ 0x51
 8002982:	2364      	movs	r3, #100	@ 0x64
 8002984:	2201      	movs	r2, #1
 8002986:	483a      	ldr	r0, [pc, #232]	@ (8002a70 <NRF24_Transmit+0x108>)
 8002988:	f00c faf6 	bl	800ef78 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(NRF24_SPI, data, 32, T_LONG);
 800298c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002990:	2220      	movs	r2, #32
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	4836      	ldr	r0, [pc, #216]	@ (8002a70 <NRF24_Transmit+0x108>)
 8002996:	f00c faef 	bl	800ef78 <HAL_SPI_Transmit>
    CS_UnSelect();
 800299a:	f7ff fe0b 	bl	80025b4 <CS_UnSelect>

    /* pulse CE >= 10us */
    CE_Enable();
 800299e:	f7ff fe15 	bl	80025cc <CE_Enable>
    for (volatile int i = 0; i < 400; i++) { __NOP(); }
 80029a2:	2300      	movs	r3, #0
 80029a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029a6:	e003      	b.n	80029b0 <NRF24_Transmit+0x48>
 80029a8:	bf00      	nop
 80029aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80029ac:	3301      	adds	r3, #1
 80029ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80029b2:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80029b6:	dbf7      	blt.n	80029a8 <NRF24_Transmit+0x40>
    CE_Disable();
 80029b8:	f7ff fe14 	bl	80025e4 <CE_Disable>

    /* wait for TX_DS or MAX_RT, ~5 ms timeout */
    t0 = HAL_GetTick();
 80029bc:	f001 f814 	bl	80039e8 <HAL_GetTick>
 80029c0:	6578      	str	r0, [r7, #84]	@ 0x54
    do {
        status = nrf24_ReadReg(STATUS);
 80029c2:	2007      	movs	r0, #7
 80029c4:	f7ff fe80 	bl	80026c8 <nrf24_ReadReg>
 80029c8:	4603      	mov	r3, r0
 80029ca:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
        if (status & (1<<5)) break; /* TX_DS */
 80029ce:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80029d2:	f003 0320 	and.w	r3, r3, #32
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10d      	bne.n	80029f6 <NRF24_Transmit+0x8e>
        if (status & (1<<4)) break; /* MAX_RT */
 80029da:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80029de:	f003 0310 	and.w	r3, r3, #16
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d109      	bne.n	80029fa <NRF24_Transmit+0x92>
    } while ((HAL_GetTick() - t0) < 5);
 80029e6:	f000 ffff 	bl	80039e8 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b04      	cmp	r3, #4
 80029f2:	d9e6      	bls.n	80029c2 <NRF24_Transmit+0x5a>
 80029f4:	e002      	b.n	80029fc <NRF24_Transmit+0x94>
        if (status & (1<<5)) break; /* TX_DS */
 80029f6:	bf00      	nop
 80029f8:	e000      	b.n	80029fc <NRF24_Transmit+0x94>
        if (status & (1<<4)) break; /* MAX_RT */
 80029fa:	bf00      	nop

    /* clear IRQ flags */
    nrf24_WriteReg(STATUS, (1<<5) | (1<<4) | (1<<6));
 80029fc:	2170      	movs	r1, #112	@ 0x70
 80029fe:	2007      	movs	r0, #7
 8002a00:	f7ff fe12 	bl	8002628 <nrf24_WriteReg>

    if (status & (1<<4)) {
 8002a04:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8002a08:	f003 0310 	and.w	r3, r3, #16
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d024      	beq.n	8002a5a <NRF24_Transmit+0xf2>
        nrf24_SendCmd(FLUSH_TX);
 8002a10:	20e1      	movs	r0, #225	@ 0xe1
 8002a12:	f7ff fea5 	bl	8002760 <nrf24_SendCmd>
        char msg[64];
        uint8_t ob = nrf24_ReadReg(OBSERVE_TX);
 8002a16:	2008      	movs	r0, #8
 8002a18:	f7ff fe56 	bl	80026c8 <nrf24_ReadReg>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
        snprintf(msg, sizeof(msg), "[TX] MAX_RT. STATUS=%02X OBSERVE_TX=%02X\r\n", status, ob);
 8002a22:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 8002a26:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8002a2a:	f107 000c 	add.w	r0, r7, #12
 8002a2e:	9300      	str	r3, [sp, #0]
 8002a30:	4613      	mov	r3, r2
 8002a32:	4a10      	ldr	r2, [pc, #64]	@ (8002a74 <NRF24_Transmit+0x10c>)
 8002a34:	2140      	movs	r1, #64	@ 0x40
 8002a36:	f010 ffe3 	bl	8013a00 <sniprintf>
        HAL_UART_Transmit(NRF24_UART, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002a3a:	f107 030c 	add.w	r3, r7, #12
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7fd fc66 	bl	8000310 <strlen>
 8002a44:	4603      	mov	r3, r0
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	f107 010c 	add.w	r1, r7, #12
 8002a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a50:	4809      	ldr	r0, [pc, #36]	@ (8002a78 <NRF24_Transmit+0x110>)
 8002a52:	f00e fd49 	bl	80114e8 <HAL_UART_Transmit>
        return 0;
 8002a56:	2300      	movs	r3, #0
 8002a58:	e006      	b.n	8002a68 <NRF24_Transmit+0x100>
    }
    return (status & (1<<5)) ? 1 : 0;
 8002a5a:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8002a5e:	115b      	asrs	r3, r3, #5
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	b2db      	uxtb	r3, r3
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3758      	adds	r7, #88	@ 0x58
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	24000460 	.word	0x24000460
 8002a74:	0801478c 	.word	0x0801478c
 8002a78:	24000614 	.word	0x24000614

08002a7c <hex1>:

    for (int i = 29; i < 38; i++) data[i] = nrf24_ReadReg(i - 12);
}

/* ===== Simple UART dump ================================================== */
static void hex1(const char *name, uint8_t v){
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b08c      	sub	sp, #48	@ 0x30
 8002a80:	af02      	add	r7, sp, #8
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	70fb      	strb	r3, [r7, #3]
    char s[32];
    snprintf(s, sizeof(s), "%s=%02X ", name, v);
 8002a88:	78fb      	ldrb	r3, [r7, #3]
 8002a8a:	f107 0008 	add.w	r0, r7, #8
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4a06      	ldr	r2, [pc, #24]	@ (8002aac <hex1+0x30>)
 8002a94:	2120      	movs	r1, #32
 8002a96:	f010 ffb3 	bl	8013a00 <sniprintf>
    uputs(s);
 8002a9a:	f107 0308 	add.w	r3, r7, #8
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff fdac 	bl	80025fc <uputs>
}
 8002aa4:	bf00      	nop
 8002aa6:	3728      	adds	r7, #40	@ 0x28
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	080147b8 	.word	0x080147b8

08002ab0 <dump_hex5>:

static void dump_hex5(const char *name, const uint8_t *v){
 8002ab0:	b5b0      	push	{r4, r5, r7, lr}
 8002ab2:	b098      	sub	sp, #96	@ 0x60
 8002ab4:	af06      	add	r7, sp, #24
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
    char s[64];
    snprintf(s, sizeof(s), "%s=%02X %02X %02X %02X %02X  ",
            name, v[0], v[1], v[2], v[3], v[4]);
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	781b      	ldrb	r3, [r3, #0]
    snprintf(s, sizeof(s), "%s=%02X %02X %02X %02X %02X  ",
 8002abe:	461a      	mov	r2, r3
            name, v[0], v[1], v[2], v[3], v[4]);
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	781b      	ldrb	r3, [r3, #0]
    snprintf(s, sizeof(s), "%s=%02X %02X %02X %02X %02X  ",
 8002ac6:	4619      	mov	r1, r3
            name, v[0], v[1], v[2], v[3], v[4]);
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	3302      	adds	r3, #2
 8002acc:	781b      	ldrb	r3, [r3, #0]
    snprintf(s, sizeof(s), "%s=%02X %02X %02X %02X %02X  ",
 8002ace:	461c      	mov	r4, r3
            name, v[0], v[1], v[2], v[3], v[4]);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	3303      	adds	r3, #3
 8002ad4:	781b      	ldrb	r3, [r3, #0]
    snprintf(s, sizeof(s), "%s=%02X %02X %02X %02X %02X  ",
 8002ad6:	461d      	mov	r5, r3
            name, v[0], v[1], v[2], v[3], v[4]);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	3304      	adds	r3, #4
 8002adc:	781b      	ldrb	r3, [r3, #0]
    snprintf(s, sizeof(s), "%s=%02X %02X %02X %02X %02X  ",
 8002ade:	f107 0008 	add.w	r0, r7, #8
 8002ae2:	9304      	str	r3, [sp, #16]
 8002ae4:	9503      	str	r5, [sp, #12]
 8002ae6:	9402      	str	r4, [sp, #8]
 8002ae8:	9101      	str	r1, [sp, #4]
 8002aea:	9200      	str	r2, [sp, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a06      	ldr	r2, [pc, #24]	@ (8002b08 <dump_hex5+0x58>)
 8002af0:	2140      	movs	r1, #64	@ 0x40
 8002af2:	f010 ff85 	bl	8013a00 <sniprintf>
    uputs(s);
 8002af6:	f107 0308 	add.w	r3, r7, #8
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff fd7e 	bl	80025fc <uputs>
}
 8002b00:	bf00      	nop
 8002b02:	3748      	adds	r7, #72	@ 0x48
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bdb0      	pop	{r4, r5, r7, pc}
 8002b08:	080147c4 	.word	0x080147c4

08002b0c <NRF24_Dump>:

void NRF24_Dump(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
    uint8_t v, addr[5];
    v = nrf24_ReadReg(CONFIG);     hex1("CFG",   v);
 8002b12:	2000      	movs	r0, #0
 8002b14:	f7ff fdd8 	bl	80026c8 <nrf24_ReadReg>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	71fb      	strb	r3, [r7, #7]
 8002b1c:	79fb      	ldrb	r3, [r7, #7]
 8002b1e:	4619      	mov	r1, r3
 8002b20:	4832      	ldr	r0, [pc, #200]	@ (8002bec <NRF24_Dump+0xe0>)
 8002b22:	f7ff ffab 	bl	8002a7c <hex1>
    v = nrf24_ReadReg(EN_AA);      hex1("EN_AA", v);
 8002b26:	2001      	movs	r0, #1
 8002b28:	f7ff fdce 	bl	80026c8 <nrf24_ReadReg>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	71fb      	strb	r3, [r7, #7]
 8002b30:	79fb      	ldrb	r3, [r7, #7]
 8002b32:	4619      	mov	r1, r3
 8002b34:	482e      	ldr	r0, [pc, #184]	@ (8002bf0 <NRF24_Dump+0xe4>)
 8002b36:	f7ff ffa1 	bl	8002a7c <hex1>
    v = nrf24_ReadReg(SETUP_RETR); hex1("RETR",  v);
 8002b3a:	2004      	movs	r0, #4
 8002b3c:	f7ff fdc4 	bl	80026c8 <nrf24_ReadReg>
 8002b40:	4603      	mov	r3, r0
 8002b42:	71fb      	strb	r3, [r7, #7]
 8002b44:	79fb      	ldrb	r3, [r7, #7]
 8002b46:	4619      	mov	r1, r3
 8002b48:	482a      	ldr	r0, [pc, #168]	@ (8002bf4 <NRF24_Dump+0xe8>)
 8002b4a:	f7ff ff97 	bl	8002a7c <hex1>
    v = nrf24_ReadReg(RF_CH);      hex1("CH",    v);
 8002b4e:	2005      	movs	r0, #5
 8002b50:	f7ff fdba 	bl	80026c8 <nrf24_ReadReg>
 8002b54:	4603      	mov	r3, r0
 8002b56:	71fb      	strb	r3, [r7, #7]
 8002b58:	79fb      	ldrb	r3, [r7, #7]
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4826      	ldr	r0, [pc, #152]	@ (8002bf8 <NRF24_Dump+0xec>)
 8002b5e:	f7ff ff8d 	bl	8002a7c <hex1>
    v = nrf24_ReadReg(RF_SETUP);   hex1("RF",    v);
 8002b62:	2006      	movs	r0, #6
 8002b64:	f7ff fdb0 	bl	80026c8 <nrf24_ReadReg>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	71fb      	strb	r3, [r7, #7]
 8002b6c:	79fb      	ldrb	r3, [r7, #7]
 8002b6e:	4619      	mov	r1, r3
 8002b70:	4822      	ldr	r0, [pc, #136]	@ (8002bfc <NRF24_Dump+0xf0>)
 8002b72:	f7ff ff83 	bl	8002a7c <hex1>
    v = nrf24_ReadReg(FEATURE);    hex1("FEAT",  v);
 8002b76:	201d      	movs	r0, #29
 8002b78:	f7ff fda6 	bl	80026c8 <nrf24_ReadReg>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	71fb      	strb	r3, [r7, #7]
 8002b80:	79fb      	ldrb	r3, [r7, #7]
 8002b82:	4619      	mov	r1, r3
 8002b84:	481e      	ldr	r0, [pc, #120]	@ (8002c00 <NRF24_Dump+0xf4>)
 8002b86:	f7ff ff79 	bl	8002a7c <hex1>
    v = nrf24_ReadReg(DYNPD);      hex1("DYNPD", v);
 8002b8a:	201c      	movs	r0, #28
 8002b8c:	f7ff fd9c 	bl	80026c8 <nrf24_ReadReg>
 8002b90:	4603      	mov	r3, r0
 8002b92:	71fb      	strb	r3, [r7, #7]
 8002b94:	79fb      	ldrb	r3, [r7, #7]
 8002b96:	4619      	mov	r1, r3
 8002b98:	481a      	ldr	r0, [pc, #104]	@ (8002c04 <NRF24_Dump+0xf8>)
 8002b9a:	f7ff ff6f 	bl	8002a7c <hex1>

    nrf24_ReadRegMulti(TX_ADDR,    addr, 5); dump_hex5("TX",  addr);
 8002b9e:	463b      	mov	r3, r7
 8002ba0:	2205      	movs	r2, #5
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	2010      	movs	r0, #16
 8002ba6:	f7ff fdb5 	bl	8002714 <nrf24_ReadRegMulti>
 8002baa:	463b      	mov	r3, r7
 8002bac:	4619      	mov	r1, r3
 8002bae:	4816      	ldr	r0, [pc, #88]	@ (8002c08 <NRF24_Dump+0xfc>)
 8002bb0:	f7ff ff7e 	bl	8002ab0 <dump_hex5>
    nrf24_ReadRegMulti(RX_ADDR_P0, addr, 5); dump_hex5("RX0", addr);
 8002bb4:	463b      	mov	r3, r7
 8002bb6:	2205      	movs	r2, #5
 8002bb8:	4619      	mov	r1, r3
 8002bba:	200a      	movs	r0, #10
 8002bbc:	f7ff fdaa 	bl	8002714 <nrf24_ReadRegMulti>
 8002bc0:	463b      	mov	r3, r7
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	4811      	ldr	r0, [pc, #68]	@ (8002c0c <NRF24_Dump+0x100>)
 8002bc6:	f7ff ff73 	bl	8002ab0 <dump_hex5>

    v = nrf24_ReadReg(STATUS);     hex1("STAT",  v);
 8002bca:	2007      	movs	r0, #7
 8002bcc:	f7ff fd7c 	bl	80026c8 <nrf24_ReadReg>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	71fb      	strb	r3, [r7, #7]
 8002bd4:	79fb      	ldrb	r3, [r7, #7]
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	480d      	ldr	r0, [pc, #52]	@ (8002c10 <NRF24_Dump+0x104>)
 8002bda:	f7ff ff4f 	bl	8002a7c <hex1>
    uputs("\r\n");
 8002bde:	480d      	ldr	r0, [pc, #52]	@ (8002c14 <NRF24_Dump+0x108>)
 8002be0:	f7ff fd0c 	bl	80025fc <uputs>
}
 8002be4:	bf00      	nop
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	080147e4 	.word	0x080147e4
 8002bf0:	080147e8 	.word	0x080147e8
 8002bf4:	080147f0 	.word	0x080147f0
 8002bf8:	080147f8 	.word	0x080147f8
 8002bfc:	080147fc 	.word	0x080147fc
 8002c00:	08014800 	.word	0x08014800
 8002c04:	08014808 	.word	0x08014808
 8002c08:	08014810 	.word	0x08014810
 8002c0c:	08014814 	.word	0x08014814
 8002c10:	08014818 	.word	0x08014818
 8002c14:	08014820 	.word	0x08014820

08002c18 <NRF24_StatusNOP>:
uint8_t NRF24_StatusNOP(void) {
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af02      	add	r7, sp, #8
    uint8_t cmd = NOP, st = 0x00;
 8002c1e:	23ff      	movs	r3, #255	@ 0xff
 8002c20:	71fb      	strb	r3, [r7, #7]
 8002c22:	2300      	movs	r3, #0
 8002c24:	71bb      	strb	r3, [r7, #6]
    CS_Select();
 8002c26:	f7ff fcb9 	bl	800259c <CS_Select>
    HAL_SPI_TransmitReceive(NRF24_SPI, &cmd, &st, 1, 100);
 8002c2a:	1dba      	adds	r2, r7, #6
 8002c2c:	1df9      	adds	r1, r7, #7
 8002c2e:	2364      	movs	r3, #100	@ 0x64
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	2301      	movs	r3, #1
 8002c34:	4804      	ldr	r0, [pc, #16]	@ (8002c48 <NRF24_StatusNOP+0x30>)
 8002c36:	f00c fdff 	bl	800f838 <HAL_SPI_TransmitReceive>
    CS_UnSelect();
 8002c3a:	f7ff fcbb 	bl	80025b4 <CS_UnSelect>
    return st;
 8002c3e:	79bb      	ldrb	r3, [r7, #6]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3708      	adds	r7, #8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	24000460 	.word	0x24000460

08002c4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c52:	4b0a      	ldr	r3, [pc, #40]	@ (8002c7c <HAL_MspInit+0x30>)
 8002c54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002c58:	4a08      	ldr	r2, [pc, #32]	@ (8002c7c <HAL_MspInit+0x30>)
 8002c5a:	f043 0302 	orr.w	r3, r3, #2
 8002c5e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002c62:	4b06      	ldr	r3, [pc, #24]	@ (8002c7c <HAL_MspInit+0x30>)
 8002c64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	607b      	str	r3, [r7, #4]
 8002c6e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr
 8002c7c:	58024400 	.word	0x58024400

08002c80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b090      	sub	sp, #64	@ 0x40
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	605a      	str	r2, [r3, #4]
 8002c92:	609a      	str	r2, [r3, #8]
 8002c94:	60da      	str	r2, [r3, #12]
 8002c96:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a90      	ldr	r2, [pc, #576]	@ (8002ee0 <HAL_ADC_MspInit+0x260>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	f040 80a3 	bne.w	8002dea <HAL_ADC_MspInit+0x16a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002ca4:	4b8f      	ldr	r3, [pc, #572]	@ (8002ee4 <HAL_ADC_MspInit+0x264>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	4a8e      	ldr	r2, [pc, #568]	@ (8002ee4 <HAL_ADC_MspInit+0x264>)
 8002cac:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002cae:	4b8d      	ldr	r3, [pc, #564]	@ (8002ee4 <HAL_ADC_MspInit+0x264>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d10e      	bne.n	8002cd4 <HAL_ADC_MspInit+0x54>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002cb6:	4b8c      	ldr	r3, [pc, #560]	@ (8002ee8 <HAL_ADC_MspInit+0x268>)
 8002cb8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002cbc:	4a8a      	ldr	r2, [pc, #552]	@ (8002ee8 <HAL_ADC_MspInit+0x268>)
 8002cbe:	f043 0320 	orr.w	r3, r3, #32
 8002cc2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002cc6:	4b88      	ldr	r3, [pc, #544]	@ (8002ee8 <HAL_ADC_MspInit+0x268>)
 8002cc8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002ccc:	f003 0320 	and.w	r3, r3, #32
 8002cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cd4:	4b84      	ldr	r3, [pc, #528]	@ (8002ee8 <HAL_ADC_MspInit+0x268>)
 8002cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002cda:	4a83      	ldr	r2, [pc, #524]	@ (8002ee8 <HAL_ADC_MspInit+0x268>)
 8002cdc:	f043 0304 	orr.w	r3, r3, #4
 8002ce0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ce4:	4b80      	ldr	r3, [pc, #512]	@ (8002ee8 <HAL_ADC_MspInit+0x268>)
 8002ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002cea:	f003 0304 	and.w	r3, r3, #4
 8002cee:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cf2:	4b7d      	ldr	r3, [pc, #500]	@ (8002ee8 <HAL_ADC_MspInit+0x268>)
 8002cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002cf8:	4a7b      	ldr	r2, [pc, #492]	@ (8002ee8 <HAL_ADC_MspInit+0x268>)
 8002cfa:	f043 0302 	orr.w	r3, r3, #2
 8002cfe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002d02:	4b79      	ldr	r3, [pc, #484]	@ (8002ee8 <HAL_ADC_MspInit+0x268>)
 8002d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	623b      	str	r3, [r7, #32]
 8002d0e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d10:	4b75      	ldr	r3, [pc, #468]	@ (8002ee8 <HAL_ADC_MspInit+0x268>)
 8002d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d16:	4a74      	ldr	r2, [pc, #464]	@ (8002ee8 <HAL_ADC_MspInit+0x268>)
 8002d18:	f043 0320 	orr.w	r3, r3, #32
 8002d1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002d20:	4b71      	ldr	r3, [pc, #452]	@ (8002ee8 <HAL_ADC_MspInit+0x268>)
 8002d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d26:	f003 0320 	and.w	r3, r3, #32
 8002d2a:	61fb      	str	r3, [r7, #28]
 8002d2c:	69fb      	ldr	r3, [r7, #28]
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = S_APPS_1_Pin|SUSPENSION_RL_Pin;
 8002d2e:	2330      	movs	r3, #48	@ 0x30
 8002d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d32:	2303      	movs	r3, #3
 8002d34:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d36:	2300      	movs	r3, #0
 8002d38:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d3a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d3e:	4619      	mov	r1, r3
 8002d40:	486a      	ldr	r0, [pc, #424]	@ (8002eec <HAL_ADC_MspInit+0x26c>)
 8002d42:	f006 fe31 	bl	80099a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SUSPENSION_RR_Pin|S_APPS_2_Pin;
 8002d46:	2303      	movs	r3, #3
 8002d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d52:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d56:	4619      	mov	r1, r3
 8002d58:	4865      	ldr	r0, [pc, #404]	@ (8002ef0 <HAL_ADC_MspInit+0x270>)
 8002d5a:	f006 fe25 	bl	80099a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = S_FRENO_Pin;
 8002d5e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d64:	2303      	movs	r3, #3
 8002d66:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(S_FRENO_GPIO_Port, &GPIO_InitStruct);
 8002d6c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d70:	4619      	mov	r1, r3
 8002d72:	4860      	ldr	r0, [pc, #384]	@ (8002ef4 <HAL_ADC_MspInit+0x274>)
 8002d74:	f006 fe18 	bl	80099a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8002d78:	4b5f      	ldr	r3, [pc, #380]	@ (8002ef8 <HAL_ADC_MspInit+0x278>)
 8002d7a:	4a60      	ldr	r2, [pc, #384]	@ (8002efc <HAL_ADC_MspInit+0x27c>)
 8002d7c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002d7e:	4b5e      	ldr	r3, [pc, #376]	@ (8002ef8 <HAL_ADC_MspInit+0x278>)
 8002d80:	2209      	movs	r2, #9
 8002d82:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d84:	4b5c      	ldr	r3, [pc, #368]	@ (8002ef8 <HAL_ADC_MspInit+0x278>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d8a:	4b5b      	ldr	r3, [pc, #364]	@ (8002ef8 <HAL_ADC_MspInit+0x278>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002d90:	4b59      	ldr	r3, [pc, #356]	@ (8002ef8 <HAL_ADC_MspInit+0x278>)
 8002d92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d96:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d98:	4b57      	ldr	r3, [pc, #348]	@ (8002ef8 <HAL_ADC_MspInit+0x278>)
 8002d9a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002d9e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002da0:	4b55      	ldr	r3, [pc, #340]	@ (8002ef8 <HAL_ADC_MspInit+0x278>)
 8002da2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002da6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002da8:	4b53      	ldr	r3, [pc, #332]	@ (8002ef8 <HAL_ADC_MspInit+0x278>)
 8002daa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002dae:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002db0:	4b51      	ldr	r3, [pc, #324]	@ (8002ef8 <HAL_ADC_MspInit+0x278>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002db6:	4b50      	ldr	r3, [pc, #320]	@ (8002ef8 <HAL_ADC_MspInit+0x278>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002dbc:	484e      	ldr	r0, [pc, #312]	@ (8002ef8 <HAL_ADC_MspInit+0x278>)
 8002dbe:	f003 fb5d 	bl	800647c <HAL_DMA_Init>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <HAL_ADC_MspInit+0x14c>
    {
      Error_Handler();
 8002dc8:	f7ff fbe2 	bl	8002590 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a4a      	ldr	r2, [pc, #296]	@ (8002ef8 <HAL_ADC_MspInit+0x278>)
 8002dd0:	659a      	str	r2, [r3, #88]	@ 0x58
 8002dd2:	4a49      	ldr	r2, [pc, #292]	@ (8002ef8 <HAL_ADC_MspInit+0x278>)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002dd8:	2200      	movs	r2, #0
 8002dda:	2100      	movs	r1, #0
 8002ddc:	2012      	movs	r0, #18
 8002dde:	f003 fb18 	bl	8006412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002de2:	2012      	movs	r0, #18
 8002de4:	f003 fb2f 	bl	8006446 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002de8:	e076      	b.n	8002ed8 <HAL_ADC_MspInit+0x258>
  else if(hadc->Instance==ADC2)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a44      	ldr	r2, [pc, #272]	@ (8002f00 <HAL_ADC_MspInit+0x280>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d171      	bne.n	8002ed8 <HAL_ADC_MspInit+0x258>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002df4:	4b3b      	ldr	r3, [pc, #236]	@ (8002ee4 <HAL_ADC_MspInit+0x264>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	4a3a      	ldr	r2, [pc, #232]	@ (8002ee4 <HAL_ADC_MspInit+0x264>)
 8002dfc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002dfe:	4b39      	ldr	r3, [pc, #228]	@ (8002ee4 <HAL_ADC_MspInit+0x264>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d10e      	bne.n	8002e24 <HAL_ADC_MspInit+0x1a4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002e06:	4b38      	ldr	r3, [pc, #224]	@ (8002ee8 <HAL_ADC_MspInit+0x268>)
 8002e08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002e0c:	4a36      	ldr	r2, [pc, #216]	@ (8002ee8 <HAL_ADC_MspInit+0x268>)
 8002e0e:	f043 0320 	orr.w	r3, r3, #32
 8002e12:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002e16:	4b34      	ldr	r3, [pc, #208]	@ (8002ee8 <HAL_ADC_MspInit+0x268>)
 8002e18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002e1c:	f003 0320 	and.w	r3, r3, #32
 8002e20:	61bb      	str	r3, [r7, #24]
 8002e22:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e24:	4b30      	ldr	r3, [pc, #192]	@ (8002ee8 <HAL_ADC_MspInit+0x268>)
 8002e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e2a:	4a2f      	ldr	r2, [pc, #188]	@ (8002ee8 <HAL_ADC_MspInit+0x268>)
 8002e2c:	f043 0304 	orr.w	r3, r3, #4
 8002e30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e34:	4b2c      	ldr	r3, [pc, #176]	@ (8002ee8 <HAL_ADC_MspInit+0x268>)
 8002e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e3a:	f003 0304 	and.w	r3, r3, #4
 8002e3e:	617b      	str	r3, [r7, #20]
 8002e40:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e42:	4b29      	ldr	r3, [pc, #164]	@ (8002ee8 <HAL_ADC_MspInit+0x268>)
 8002e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e48:	4a27      	ldr	r2, [pc, #156]	@ (8002ee8 <HAL_ADC_MspInit+0x268>)
 8002e4a:	f043 0302 	orr.w	r3, r3, #2
 8002e4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e52:	4b25      	ldr	r3, [pc, #148]	@ (8002ee8 <HAL_ADC_MspInit+0x268>)
 8002e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	613b      	str	r3, [r7, #16]
 8002e5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e60:	4b21      	ldr	r3, [pc, #132]	@ (8002ee8 <HAL_ADC_MspInit+0x268>)
 8002e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e66:	4a20      	ldr	r2, [pc, #128]	@ (8002ee8 <HAL_ADC_MspInit+0x268>)
 8002e68:	f043 0320 	orr.w	r3, r3, #32
 8002e6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e70:	4b1d      	ldr	r3, [pc, #116]	@ (8002ee8 <HAL_ADC_MspInit+0x268>)
 8002e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e76:	f003 0320 	and.w	r3, r3, #32
 8002e7a:	60fb      	str	r3, [r7, #12]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SUSPENSION_RL_Pin;
 8002e7e:	2320      	movs	r3, #32
 8002e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e82:	2303      	movs	r3, #3
 8002e84:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e86:	2300      	movs	r3, #0
 8002e88:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SUSPENSION_RL_GPIO_Port, &GPIO_InitStruct);
 8002e8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4816      	ldr	r0, [pc, #88]	@ (8002eec <HAL_ADC_MspInit+0x26c>)
 8002e92:	f006 fd89 	bl	80099a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SUSPENSION_RR_Pin;
 8002e96:	2301      	movs	r3, #1
 8002e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SUSPENSION_RR_GPIO_Port, &GPIO_InitStruct);
 8002ea2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	4811      	ldr	r0, [pc, #68]	@ (8002ef0 <HAL_ADC_MspInit+0x270>)
 8002eaa:	f006 fd7d 	bl	80099a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SUSPENSION_FR_Pin;
 8002eae:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SUSPENSION_FR_GPIO_Port, &GPIO_InitStruct);
 8002ebc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	480c      	ldr	r0, [pc, #48]	@ (8002ef4 <HAL_ADC_MspInit+0x274>)
 8002ec4:	f006 fd70 	bl	80099a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002ec8:	2200      	movs	r2, #0
 8002eca:	2100      	movs	r1, #0
 8002ecc:	2012      	movs	r0, #18
 8002ece:	f003 faa0 	bl	8006412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002ed2:	2012      	movs	r0, #18
 8002ed4:	f003 fab7 	bl	8006446 <HAL_NVIC_EnableIRQ>
}
 8002ed8:	bf00      	nop
 8002eda:	3740      	adds	r7, #64	@ 0x40
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	40022000 	.word	0x40022000
 8002ee4:	2400094c 	.word	0x2400094c
 8002ee8:	58024400 	.word	0x58024400
 8002eec:	58020800 	.word	0x58020800
 8002ef0:	58020400 	.word	0x58020400
 8002ef4:	58021400 	.word	0x58021400
 8002ef8:	2400018c 	.word	0x2400018c
 8002efc:	40020010 	.word	0x40020010
 8002f00:	40022100 	.word	0x40022100

08002f04 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b0bc      	sub	sp, #240	@ 0xf0
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f0c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	605a      	str	r2, [r3, #4]
 8002f16:	609a      	str	r2, [r3, #8]
 8002f18:	60da      	str	r2, [r3, #12]
 8002f1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f1c:	f107 0320 	add.w	r3, r7, #32
 8002f20:	22b8      	movs	r2, #184	@ 0xb8
 8002f22:	2100      	movs	r1, #0
 8002f24:	4618      	mov	r0, r3
 8002f26:	f010 fdc3 	bl	8013ab0 <memset>
  if(hfdcan->Instance==FDCAN1)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a8d      	ldr	r2, [pc, #564]	@ (8003164 <HAL_FDCAN_MspInit+0x260>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d157      	bne.n	8002fe4 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002f34:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002f38:	f04f 0300 	mov.w	r3, #0
 8002f3c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002f40:	2300      	movs	r3, #0
 8002f42:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f46:	f107 0320 	add.w	r3, r7, #32
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f007 fea6 	bl	800ac9c <HAL_RCCEx_PeriphCLKConfig>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8002f56:	f7ff fb1b 	bl	8002590 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002f5a:	4b83      	ldr	r3, [pc, #524]	@ (8003168 <HAL_FDCAN_MspInit+0x264>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	4a81      	ldr	r2, [pc, #516]	@ (8003168 <HAL_FDCAN_MspInit+0x264>)
 8002f62:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002f64:	4b80      	ldr	r3, [pc, #512]	@ (8003168 <HAL_FDCAN_MspInit+0x264>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d10e      	bne.n	8002f8a <HAL_FDCAN_MspInit+0x86>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002f6c:	4b7f      	ldr	r3, [pc, #508]	@ (800316c <HAL_FDCAN_MspInit+0x268>)
 8002f6e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002f72:	4a7e      	ldr	r2, [pc, #504]	@ (800316c <HAL_FDCAN_MspInit+0x268>)
 8002f74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f78:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8002f7c:	4b7b      	ldr	r3, [pc, #492]	@ (800316c <HAL_FDCAN_MspInit+0x268>)
 8002f7e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f86:	61fb      	str	r3, [r7, #28]
 8002f88:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f8a:	4b78      	ldr	r3, [pc, #480]	@ (800316c <HAL_FDCAN_MspInit+0x268>)
 8002f8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f90:	4a76      	ldr	r2, [pc, #472]	@ (800316c <HAL_FDCAN_MspInit+0x268>)
 8002f92:	f043 0308 	orr.w	r3, r3, #8
 8002f96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f9a:	4b74      	ldr	r3, [pc, #464]	@ (800316c <HAL_FDCAN_MspInit+0x268>)
 8002f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002fa0:	f003 0308 	and.w	r3, r3, #8
 8002fa4:	61bb      	str	r3, [r7, #24]
 8002fa6:	69bb      	ldr	r3, [r7, #24]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fae:	2302      	movs	r3, #2
 8002fb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002fc0:	2309      	movs	r3, #9
 8002fc2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fc6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002fca:	4619      	mov	r1, r3
 8002fcc:	4868      	ldr	r0, [pc, #416]	@ (8003170 <HAL_FDCAN_MspInit+0x26c>)
 8002fce:	f006 fceb 	bl	80099a8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 1, 0);
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	2101      	movs	r1, #1
 8002fd6:	2013      	movs	r0, #19
 8002fd8:	f003 fa1b 	bl	8006412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002fdc:	2013      	movs	r0, #19
 8002fde:	f003 fa32 	bl	8006446 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8002fe2:	e0ba      	b.n	800315a <HAL_FDCAN_MspInit+0x256>
  else if(hfdcan->Instance==FDCAN2)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a62      	ldr	r2, [pc, #392]	@ (8003174 <HAL_FDCAN_MspInit+0x270>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d158      	bne.n	80030a0 <HAL_FDCAN_MspInit+0x19c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002fee:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002ff2:	f04f 0300 	mov.w	r3, #0
 8002ff6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003000:	f107 0320 	add.w	r3, r7, #32
 8003004:	4618      	mov	r0, r3
 8003006:	f007 fe49 	bl	800ac9c <HAL_RCCEx_PeriphCLKConfig>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <HAL_FDCAN_MspInit+0x110>
      Error_Handler();
 8003010:	f7ff fabe 	bl	8002590 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8003014:	4b54      	ldr	r3, [pc, #336]	@ (8003168 <HAL_FDCAN_MspInit+0x264>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	3301      	adds	r3, #1
 800301a:	4a53      	ldr	r2, [pc, #332]	@ (8003168 <HAL_FDCAN_MspInit+0x264>)
 800301c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800301e:	4b52      	ldr	r3, [pc, #328]	@ (8003168 <HAL_FDCAN_MspInit+0x264>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d10e      	bne.n	8003044 <HAL_FDCAN_MspInit+0x140>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8003026:	4b51      	ldr	r3, [pc, #324]	@ (800316c <HAL_FDCAN_MspInit+0x268>)
 8003028:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800302c:	4a4f      	ldr	r2, [pc, #316]	@ (800316c <HAL_FDCAN_MspInit+0x268>)
 800302e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003032:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8003036:	4b4d      	ldr	r3, [pc, #308]	@ (800316c <HAL_FDCAN_MspInit+0x268>)
 8003038:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800303c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003040:	617b      	str	r3, [r7, #20]
 8003042:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003044:	4b49      	ldr	r3, [pc, #292]	@ (800316c <HAL_FDCAN_MspInit+0x268>)
 8003046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800304a:	4a48      	ldr	r2, [pc, #288]	@ (800316c <HAL_FDCAN_MspInit+0x268>)
 800304c:	f043 0302 	orr.w	r3, r3, #2
 8003050:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003054:	4b45      	ldr	r3, [pc, #276]	@ (800316c <HAL_FDCAN_MspInit+0x268>)
 8003056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	613b      	str	r3, [r7, #16]
 8003060:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003062:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003066:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800306a:	2302      	movs	r3, #2
 800306c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003070:	2300      	movs	r3, #0
 8003072:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003076:	2300      	movs	r3, #0
 8003078:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800307c:	2309      	movs	r3, #9
 800307e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003082:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003086:	4619      	mov	r1, r3
 8003088:	483b      	ldr	r0, [pc, #236]	@ (8003178 <HAL_FDCAN_MspInit+0x274>)
 800308a:	f006 fc8d 	bl	80099a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 2, 0);
 800308e:	2200      	movs	r2, #0
 8003090:	2102      	movs	r1, #2
 8003092:	2014      	movs	r0, #20
 8003094:	f003 f9bd 	bl	8006412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8003098:	2014      	movs	r0, #20
 800309a:	f003 f9d4 	bl	8006446 <HAL_NVIC_EnableIRQ>
}
 800309e:	e05c      	b.n	800315a <HAL_FDCAN_MspInit+0x256>
  else if(hfdcan->Instance==FDCAN3)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a35      	ldr	r2, [pc, #212]	@ (800317c <HAL_FDCAN_MspInit+0x278>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d157      	bne.n	800315a <HAL_FDCAN_MspInit+0x256>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80030aa:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80030ae:	f04f 0300 	mov.w	r3, #0
 80030b2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80030b6:	2300      	movs	r3, #0
 80030b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030bc:	f107 0320 	add.w	r3, r7, #32
 80030c0:	4618      	mov	r0, r3
 80030c2:	f007 fdeb 	bl	800ac9c <HAL_RCCEx_PeriphCLKConfig>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <HAL_FDCAN_MspInit+0x1cc>
      Error_Handler();
 80030cc:	f7ff fa60 	bl	8002590 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80030d0:	4b25      	ldr	r3, [pc, #148]	@ (8003168 <HAL_FDCAN_MspInit+0x264>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	3301      	adds	r3, #1
 80030d6:	4a24      	ldr	r2, [pc, #144]	@ (8003168 <HAL_FDCAN_MspInit+0x264>)
 80030d8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80030da:	4b23      	ldr	r3, [pc, #140]	@ (8003168 <HAL_FDCAN_MspInit+0x264>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d10e      	bne.n	8003100 <HAL_FDCAN_MspInit+0x1fc>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80030e2:	4b22      	ldr	r3, [pc, #136]	@ (800316c <HAL_FDCAN_MspInit+0x268>)
 80030e4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80030e8:	4a20      	ldr	r2, [pc, #128]	@ (800316c <HAL_FDCAN_MspInit+0x268>)
 80030ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030ee:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80030f2:	4b1e      	ldr	r3, [pc, #120]	@ (800316c <HAL_FDCAN_MspInit+0x268>)
 80030f4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80030f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030fc:	60fb      	str	r3, [r7, #12]
 80030fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003100:	4b1a      	ldr	r3, [pc, #104]	@ (800316c <HAL_FDCAN_MspInit+0x268>)
 8003102:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003106:	4a19      	ldr	r2, [pc, #100]	@ (800316c <HAL_FDCAN_MspInit+0x268>)
 8003108:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800310c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003110:	4b16      	ldr	r3, [pc, #88]	@ (800316c <HAL_FDCAN_MspInit+0x268>)
 8003112:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003116:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800311a:	60bb      	str	r3, [r7, #8]
 800311c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800311e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003122:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003126:	2302      	movs	r3, #2
 8003128:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312c:	2300      	movs	r3, #0
 800312e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003132:	2300      	movs	r3, #0
 8003134:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8003138:	2302      	movs	r3, #2
 800313a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800313e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003142:	4619      	mov	r1, r3
 8003144:	480e      	ldr	r0, [pc, #56]	@ (8003180 <HAL_FDCAN_MspInit+0x27c>)
 8003146:	f006 fc2f 	bl	80099a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN3_IT0_IRQn, 0, 0);
 800314a:	2200      	movs	r2, #0
 800314c:	2100      	movs	r1, #0
 800314e:	209f      	movs	r0, #159	@ 0x9f
 8003150:	f003 f95f 	bl	8006412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT0_IRQn);
 8003154:	209f      	movs	r0, #159	@ 0x9f
 8003156:	f003 f976 	bl	8006446 <HAL_NVIC_EnableIRQ>
}
 800315a:	bf00      	nop
 800315c:	37f0      	adds	r7, #240	@ 0xf0
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	4000a000 	.word	0x4000a000
 8003168:	24000950 	.word	0x24000950
 800316c:	58024400 	.word	0x58024400
 8003170:	58020c00 	.word	0x58020c00
 8003174:	4000a400 	.word	0x4000a400
 8003178:	58020400 	.word	0x58020400
 800317c:	4000d400 	.word	0x4000d400
 8003180:	58021800 	.word	0x58021800

08003184 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b08c      	sub	sp, #48	@ 0x30
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800318c:	f107 031c 	add.w	r3, r7, #28
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	605a      	str	r2, [r3, #4]
 8003196:	609a      	str	r2, [r3, #8]
 8003198:	60da      	str	r2, [r3, #12]
 800319a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a3e      	ldr	r2, [pc, #248]	@ (800329c <HAL_SD_MspInit+0x118>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d175      	bne.n	8003292 <HAL_SD_MspInit+0x10e>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80031a6:	4b3e      	ldr	r3, [pc, #248]	@ (80032a0 <HAL_SD_MspInit+0x11c>)
 80031a8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80031ac:	4a3c      	ldr	r2, [pc, #240]	@ (80032a0 <HAL_SD_MspInit+0x11c>)
 80031ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031b2:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80031b6:	4b3a      	ldr	r3, [pc, #232]	@ (80032a0 <HAL_SD_MspInit+0x11c>)
 80031b8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80031bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031c0:	61bb      	str	r3, [r7, #24]
 80031c2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031c4:	4b36      	ldr	r3, [pc, #216]	@ (80032a0 <HAL_SD_MspInit+0x11c>)
 80031c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031ca:	4a35      	ldr	r2, [pc, #212]	@ (80032a0 <HAL_SD_MspInit+0x11c>)
 80031cc:	f043 0304 	orr.w	r3, r3, #4
 80031d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80031d4:	4b32      	ldr	r3, [pc, #200]	@ (80032a0 <HAL_SD_MspInit+0x11c>)
 80031d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031da:	f003 0304 	and.w	r3, r3, #4
 80031de:	617b      	str	r3, [r7, #20]
 80031e0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031e2:	4b2f      	ldr	r3, [pc, #188]	@ (80032a0 <HAL_SD_MspInit+0x11c>)
 80031e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031e8:	4a2d      	ldr	r2, [pc, #180]	@ (80032a0 <HAL_SD_MspInit+0x11c>)
 80031ea:	f043 0308 	orr.w	r3, r3, #8
 80031ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80031f2:	4b2b      	ldr	r3, [pc, #172]	@ (80032a0 <HAL_SD_MspInit+0x11c>)
 80031f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031f8:	f003 0308 	and.w	r3, r3, #8
 80031fc:	613b      	str	r3, [r7, #16]
 80031fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003200:	4b27      	ldr	r3, [pc, #156]	@ (80032a0 <HAL_SD_MspInit+0x11c>)
 8003202:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003206:	4a26      	ldr	r2, [pc, #152]	@ (80032a0 <HAL_SD_MspInit+0x11c>)
 8003208:	f043 0302 	orr.w	r3, r3, #2
 800320c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003210:	4b23      	ldr	r3, [pc, #140]	@ (80032a0 <HAL_SD_MspInit+0x11c>)
 8003212:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	60fb      	str	r3, [r7, #12]
 800321c:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PB8     ------> SDMMC1_CKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800321e:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8003222:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003224:	2302      	movs	r3, #2
 8003226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003228:	2300      	movs	r3, #0
 800322a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800322c:	2303      	movs	r3, #3
 800322e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003230:	230c      	movs	r3, #12
 8003232:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003234:	f107 031c 	add.w	r3, r7, #28
 8003238:	4619      	mov	r1, r3
 800323a:	481a      	ldr	r0, [pc, #104]	@ (80032a4 <HAL_SD_MspInit+0x120>)
 800323c:	f006 fbb4 	bl	80099a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003240:	2304      	movs	r3, #4
 8003242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003244:	2302      	movs	r3, #2
 8003246:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003248:	2300      	movs	r3, #0
 800324a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800324c:	2303      	movs	r3, #3
 800324e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003250:	230c      	movs	r3, #12
 8003252:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003254:	f107 031c 	add.w	r3, r7, #28
 8003258:	4619      	mov	r1, r3
 800325a:	4813      	ldr	r0, [pc, #76]	@ (80032a8 <HAL_SD_MspInit+0x124>)
 800325c:	f006 fba4 	bl	80099a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003260:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003264:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003266:	2302      	movs	r3, #2
 8003268:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800326a:	2300      	movs	r3, #0
 800326c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800326e:	2303      	movs	r3, #3
 8003270:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SDMMC1;
 8003272:	2307      	movs	r3, #7
 8003274:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003276:	f107 031c 	add.w	r3, r7, #28
 800327a:	4619      	mov	r1, r3
 800327c:	480b      	ldr	r0, [pc, #44]	@ (80032ac <HAL_SD_MspInit+0x128>)
 800327e:	f006 fb93 	bl	80099a8 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8003282:	2200      	movs	r2, #0
 8003284:	2100      	movs	r1, #0
 8003286:	2031      	movs	r0, #49	@ 0x31
 8003288:	f003 f8c3 	bl	8006412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800328c:	2031      	movs	r0, #49	@ 0x31
 800328e:	f003 f8da 	bl	8006446 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8003292:	bf00      	nop
 8003294:	3730      	adds	r7, #48	@ 0x30
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	52007000 	.word	0x52007000
 80032a0:	58024400 	.word	0x58024400
 80032a4:	58020800 	.word	0x58020800
 80032a8:	58020c00 	.word	0x58020c00
 80032ac:	58020400 	.word	0x58020400

080032b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b0ba      	sub	sp, #232	@ 0xe8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	605a      	str	r2, [r3, #4]
 80032c2:	609a      	str	r2, [r3, #8]
 80032c4:	60da      	str	r2, [r3, #12]
 80032c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032c8:	f107 0318 	add.w	r3, r7, #24
 80032cc:	22b8      	movs	r2, #184	@ 0xb8
 80032ce:	2100      	movs	r1, #0
 80032d0:	4618      	mov	r0, r3
 80032d2:	f010 fbed 	bl	8013ab0 <memset>
  if(hspi->Instance==SPI2)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a39      	ldr	r2, [pc, #228]	@ (80033c0 <HAL_SPI_MspInit+0x110>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d16a      	bne.n	80033b6 <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80032e0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80032e4:	f04f 0300 	mov.w	r3, #0
 80032e8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80032ec:	2300      	movs	r3, #0
 80032ee:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032f0:	f107 0318 	add.w	r3, r7, #24
 80032f4:	4618      	mov	r0, r3
 80032f6:	f007 fcd1 	bl	800ac9c <HAL_RCCEx_PeriphCLKConfig>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8003300:	f7ff f946 	bl	8002590 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003304:	4b2f      	ldr	r3, [pc, #188]	@ (80033c4 <HAL_SPI_MspInit+0x114>)
 8003306:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800330a:	4a2e      	ldr	r2, [pc, #184]	@ (80033c4 <HAL_SPI_MspInit+0x114>)
 800330c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003310:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003314:	4b2b      	ldr	r3, [pc, #172]	@ (80033c4 <HAL_SPI_MspInit+0x114>)
 8003316:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800331a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800331e:	617b      	str	r3, [r7, #20]
 8003320:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003322:	4b28      	ldr	r3, [pc, #160]	@ (80033c4 <HAL_SPI_MspInit+0x114>)
 8003324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003328:	4a26      	ldr	r2, [pc, #152]	@ (80033c4 <HAL_SPI_MspInit+0x114>)
 800332a:	f043 0302 	orr.w	r3, r3, #2
 800332e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003332:	4b24      	ldr	r3, [pc, #144]	@ (80033c4 <HAL_SPI_MspInit+0x114>)
 8003334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	613b      	str	r3, [r7, #16]
 800333e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003340:	4b20      	ldr	r3, [pc, #128]	@ (80033c4 <HAL_SPI_MspInit+0x114>)
 8003342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003346:	4a1f      	ldr	r2, [pc, #124]	@ (80033c4 <HAL_SPI_MspInit+0x114>)
 8003348:	f043 0301 	orr.w	r3, r3, #1
 800334c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003350:	4b1c      	ldr	r3, [pc, #112]	@ (80033c4 <HAL_SPI_MspInit+0x114>)
 8003352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	60fb      	str	r3, [r7, #12]
 800335c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    PA12     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800335e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003362:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003366:	2302      	movs	r3, #2
 8003368:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336c:	2300      	movs	r3, #0
 800336e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003372:	2300      	movs	r3, #0
 8003374:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003378:	2305      	movs	r3, #5
 800337a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800337e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003382:	4619      	mov	r1, r3
 8003384:	4810      	ldr	r0, [pc, #64]	@ (80033c8 <HAL_SPI_MspInit+0x118>)
 8003386:	f006 fb0f 	bl	80099a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800338a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800338e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003392:	2302      	movs	r3, #2
 8003394:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003398:	2300      	movs	r3, #0
 800339a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800339e:	2300      	movs	r3, #0
 80033a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80033a4:	2305      	movs	r3, #5
 80033a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033aa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80033ae:	4619      	mov	r1, r3
 80033b0:	4806      	ldr	r0, [pc, #24]	@ (80033cc <HAL_SPI_MspInit+0x11c>)
 80033b2:	f006 faf9 	bl	80099a8 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80033b6:	bf00      	nop
 80033b8:	37e8      	adds	r7, #232	@ 0xe8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	40003800 	.word	0x40003800
 80033c4:	58024400 	.word	0x58024400
 80033c8:	58020400 	.word	0x58020400
 80033cc:	58020000 	.word	0x58020000

080033d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a19      	ldr	r2, [pc, #100]	@ (8003444 <HAL_TIM_Base_MspInit+0x74>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d10f      	bne.n	8003402 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80033e2:	4b19      	ldr	r3, [pc, #100]	@ (8003448 <HAL_TIM_Base_MspInit+0x78>)
 80033e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80033e8:	4a17      	ldr	r2, [pc, #92]	@ (8003448 <HAL_TIM_Base_MspInit+0x78>)
 80033ea:	f043 0301 	orr.w	r3, r3, #1
 80033ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80033f2:	4b15      	ldr	r3, [pc, #84]	@ (8003448 <HAL_TIM_Base_MspInit+0x78>)
 80033f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	60fb      	str	r3, [r7, #12]
 80033fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003400:	e01b      	b.n	800343a <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM16)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a11      	ldr	r2, [pc, #68]	@ (800344c <HAL_TIM_Base_MspInit+0x7c>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d116      	bne.n	800343a <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800340c:	4b0e      	ldr	r3, [pc, #56]	@ (8003448 <HAL_TIM_Base_MspInit+0x78>)
 800340e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003412:	4a0d      	ldr	r2, [pc, #52]	@ (8003448 <HAL_TIM_Base_MspInit+0x78>)
 8003414:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003418:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800341c:	4b0a      	ldr	r3, [pc, #40]	@ (8003448 <HAL_TIM_Base_MspInit+0x78>)
 800341e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003426:	60bb      	str	r3, [r7, #8]
 8003428:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800342a:	2200      	movs	r2, #0
 800342c:	2100      	movs	r1, #0
 800342e:	2075      	movs	r0, #117	@ 0x75
 8003430:	f002 ffef 	bl	8006412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8003434:	2075      	movs	r0, #117	@ 0x75
 8003436:	f003 f806 	bl	8006446 <HAL_NVIC_EnableIRQ>
}
 800343a:	bf00      	nop
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	40010000 	.word	0x40010000
 8003448:	58024400 	.word	0x58024400
 800344c:	40014400 	.word	0x40014400

08003450 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b088      	sub	sp, #32
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003458:	f107 030c 	add.w	r3, r7, #12
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	605a      	str	r2, [r3, #4]
 8003462:	609a      	str	r2, [r3, #8]
 8003464:	60da      	str	r2, [r3, #12]
 8003466:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a13      	ldr	r2, [pc, #76]	@ (80034bc <HAL_TIM_MspPostInit+0x6c>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d11f      	bne.n	80034b2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003472:	4b13      	ldr	r3, [pc, #76]	@ (80034c0 <HAL_TIM_MspPostInit+0x70>)
 8003474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003478:	4a11      	ldr	r2, [pc, #68]	@ (80034c0 <HAL_TIM_MspPostInit+0x70>)
 800347a:	f043 0310 	orr.w	r3, r3, #16
 800347e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003482:	4b0f      	ldr	r3, [pc, #60]	@ (80034c0 <HAL_TIM_MspPostInit+0x70>)
 8003484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003488:	f003 0310 	and.w	r3, r3, #16
 800348c:	60bb      	str	r3, [r7, #8]
 800348e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_FAN1_Pin|PWM_FAN2_Pin;
 8003490:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8003494:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003496:	2302      	movs	r3, #2
 8003498:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349a:	2300      	movs	r3, #0
 800349c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800349e:	2300      	movs	r3, #0
 80034a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80034a2:	2301      	movs	r3, #1
 80034a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034a6:	f107 030c 	add.w	r3, r7, #12
 80034aa:	4619      	mov	r1, r3
 80034ac:	4805      	ldr	r0, [pc, #20]	@ (80034c4 <HAL_TIM_MspPostInit+0x74>)
 80034ae:	f006 fa7b 	bl	80099a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80034b2:	bf00      	nop
 80034b4:	3720      	adds	r7, #32
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	40010000 	.word	0x40010000
 80034c0:	58024400 	.word	0x58024400
 80034c4:	58021000 	.word	0x58021000

080034c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b0ba      	sub	sp, #232	@ 0xe8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034d0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	605a      	str	r2, [r3, #4]
 80034da:	609a      	str	r2, [r3, #8]
 80034dc:	60da      	str	r2, [r3, #12]
 80034de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80034e0:	f107 0318 	add.w	r3, r7, #24
 80034e4:	22b8      	movs	r2, #184	@ 0xb8
 80034e6:	2100      	movs	r1, #0
 80034e8:	4618      	mov	r0, r3
 80034ea:	f010 fae1 	bl	8013ab0 <memset>
  if(huart->Instance==USART1)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a4d      	ldr	r2, [pc, #308]	@ (8003628 <HAL_UART_MspInit+0x160>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d147      	bne.n	8003588 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80034f8:	f04f 0201 	mov.w	r2, #1
 80034fc:	f04f 0300 	mov.w	r3, #0
 8003500:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003504:	2300      	movs	r3, #0
 8003506:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800350a:	f107 0318 	add.w	r3, r7, #24
 800350e:	4618      	mov	r0, r3
 8003510:	f007 fbc4 	bl	800ac9c <HAL_RCCEx_PeriphCLKConfig>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800351a:	f7ff f839 	bl	8002590 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800351e:	4b43      	ldr	r3, [pc, #268]	@ (800362c <HAL_UART_MspInit+0x164>)
 8003520:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003524:	4a41      	ldr	r2, [pc, #260]	@ (800362c <HAL_UART_MspInit+0x164>)
 8003526:	f043 0310 	orr.w	r3, r3, #16
 800352a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800352e:	4b3f      	ldr	r3, [pc, #252]	@ (800362c <HAL_UART_MspInit+0x164>)
 8003530:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003534:	f003 0310 	and.w	r3, r3, #16
 8003538:	617b      	str	r3, [r7, #20]
 800353a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800353c:	4b3b      	ldr	r3, [pc, #236]	@ (800362c <HAL_UART_MspInit+0x164>)
 800353e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003542:	4a3a      	ldr	r2, [pc, #232]	@ (800362c <HAL_UART_MspInit+0x164>)
 8003544:	f043 0301 	orr.w	r3, r3, #1
 8003548:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800354c:	4b37      	ldr	r3, [pc, #220]	@ (800362c <HAL_UART_MspInit+0x164>)
 800354e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	613b      	str	r3, [r7, #16]
 8003558:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_GPS_Pin|USART1_RX_GPS_Pin;
 800355a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800355e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003562:	2302      	movs	r3, #2
 8003564:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003568:	2300      	movs	r3, #0
 800356a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800356e:	2300      	movs	r3, #0
 8003570:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003574:	2307      	movs	r3, #7
 8003576:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800357a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800357e:	4619      	mov	r1, r3
 8003580:	482b      	ldr	r0, [pc, #172]	@ (8003630 <HAL_UART_MspInit+0x168>)
 8003582:	f006 fa11 	bl	80099a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003586:	e04a      	b.n	800361e <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART2)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a29      	ldr	r2, [pc, #164]	@ (8003634 <HAL_UART_MspInit+0x16c>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d145      	bne.n	800361e <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003592:	f04f 0202 	mov.w	r2, #2
 8003596:	f04f 0300 	mov.w	r3, #0
 800359a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800359e:	2300      	movs	r3, #0
 80035a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035a4:	f107 0318 	add.w	r3, r7, #24
 80035a8:	4618      	mov	r0, r3
 80035aa:	f007 fb77 	bl	800ac9c <HAL_RCCEx_PeriphCLKConfig>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 80035b4:	f7fe ffec 	bl	8002590 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80035b8:	4b1c      	ldr	r3, [pc, #112]	@ (800362c <HAL_UART_MspInit+0x164>)
 80035ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80035be:	4a1b      	ldr	r2, [pc, #108]	@ (800362c <HAL_UART_MspInit+0x164>)
 80035c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035c4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80035c8:	4b18      	ldr	r3, [pc, #96]	@ (800362c <HAL_UART_MspInit+0x164>)
 80035ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80035ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035d6:	4b15      	ldr	r3, [pc, #84]	@ (800362c <HAL_UART_MspInit+0x164>)
 80035d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035dc:	4a13      	ldr	r2, [pc, #76]	@ (800362c <HAL_UART_MspInit+0x164>)
 80035de:	f043 0301 	orr.w	r3, r3, #1
 80035e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80035e6:	4b11      	ldr	r3, [pc, #68]	@ (800362c <HAL_UART_MspInit+0x164>)
 80035e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	60bb      	str	r3, [r7, #8]
 80035f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80035f4:	230c      	movs	r3, #12
 80035f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035fa:	2302      	movs	r3, #2
 80035fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003600:	2300      	movs	r3, #0
 8003602:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003606:	2300      	movs	r3, #0
 8003608:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800360c:	2307      	movs	r3, #7
 800360e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003612:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003616:	4619      	mov	r1, r3
 8003618:	4805      	ldr	r0, [pc, #20]	@ (8003630 <HAL_UART_MspInit+0x168>)
 800361a:	f006 f9c5 	bl	80099a8 <HAL_GPIO_Init>
}
 800361e:	bf00      	nop
 8003620:	37e8      	adds	r7, #232	@ 0xe8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	40011000 	.word	0x40011000
 800362c:	58024400 	.word	0x58024400
 8003630:	58020000 	.word	0x58020000
 8003634:	40004400 	.word	0x40004400

08003638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800363c:	bf00      	nop
 800363e:	e7fd      	b.n	800363c <NMI_Handler+0x4>

08003640 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003644:	bf00      	nop
 8003646:	e7fd      	b.n	8003644 <HardFault_Handler+0x4>

08003648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800364c:	bf00      	nop
 800364e:	e7fd      	b.n	800364c <MemManage_Handler+0x4>

08003650 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003654:	bf00      	nop
 8003656:	e7fd      	b.n	8003654 <BusFault_Handler+0x4>

08003658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800365c:	bf00      	nop
 800365e:	e7fd      	b.n	800365c <UsageFault_Handler+0x4>

08003660 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003664:	bf00      	nop
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800366e:	b480      	push	{r7}
 8003670:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003672:	bf00      	nop
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003680:	bf00      	nop
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr

0800368a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800368e:	f000 f997 	bl	80039c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003692:	bf00      	nop
 8003694:	bd80      	pop	{r7, pc}
	...

08003698 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800369c:	4802      	ldr	r0, [pc, #8]	@ (80036a8 <DMA1_Stream0_IRQHandler+0x10>)
 800369e:	f003 fcaf 	bl	8007000 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80036a2:	bf00      	nop
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	2400018c 	.word	0x2400018c

080036ac <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80036b0:	4803      	ldr	r0, [pc, #12]	@ (80036c0 <ADC_IRQHandler+0x14>)
 80036b2:	f001 f9e9 	bl	8004a88 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80036b6:	4803      	ldr	r0, [pc, #12]	@ (80036c4 <ADC_IRQHandler+0x18>)
 80036b8:	f001 f9e6 	bl	8004a88 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80036bc:	bf00      	nop
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	240000ac 	.word	0x240000ac
 80036c4:	2400011c 	.word	0x2400011c

080036c8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80036cc:	4802      	ldr	r0, [pc, #8]	@ (80036d8 <FDCAN1_IT0_IRQHandler+0x10>)
 80036ce:	f005 fc69 	bl	8008fa4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80036d2:	bf00      	nop
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	24000204 	.word	0x24000204

080036dc <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 80036e0:	4802      	ldr	r0, [pc, #8]	@ (80036ec <FDCAN2_IT0_IRQHandler+0x10>)
 80036e2:	f005 fc5f 	bl	8008fa4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 80036e6:	bf00      	nop
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	240002a4 	.word	0x240002a4

080036f0 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80036f4:	4802      	ldr	r0, [pc, #8]	@ (8003700 <SDMMC1_IRQHandler+0x10>)
 80036f6:	f00a f927 	bl	800d948 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80036fa:	bf00      	nop
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	240003e4 	.word	0x240003e4

08003704 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003708:	4802      	ldr	r0, [pc, #8]	@ (8003714 <TIM16_IRQHandler+0x10>)
 800370a:	f00c fdf6 	bl	80102fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800370e:	bf00      	nop
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	24000534 	.word	0x24000534

08003718 <FDCAN3_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 0.
  */
void FDCAN3_IT0_IRQHandler(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 0 */

  /* USER CODE END FDCAN3_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 800371c:	4802      	ldr	r0, [pc, #8]	@ (8003728 <FDCAN3_IT0_IRQHandler+0x10>)
 800371e:	f005 fc41 	bl	8008fa4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 1 */

  /* USER CODE END FDCAN3_IT0_IRQn 1 */
}
 8003722:	bf00      	nop
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	24000344 	.word	0x24000344

0800372c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003734:	4a14      	ldr	r2, [pc, #80]	@ (8003788 <_sbrk+0x5c>)
 8003736:	4b15      	ldr	r3, [pc, #84]	@ (800378c <_sbrk+0x60>)
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003740:	4b13      	ldr	r3, [pc, #76]	@ (8003790 <_sbrk+0x64>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d102      	bne.n	800374e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003748:	4b11      	ldr	r3, [pc, #68]	@ (8003790 <_sbrk+0x64>)
 800374a:	4a12      	ldr	r2, [pc, #72]	@ (8003794 <_sbrk+0x68>)
 800374c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800374e:	4b10      	ldr	r3, [pc, #64]	@ (8003790 <_sbrk+0x64>)
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4413      	add	r3, r2
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	429a      	cmp	r2, r3
 800375a:	d207      	bcs.n	800376c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800375c:	f010 f9b0 	bl	8013ac0 <__errno>
 8003760:	4603      	mov	r3, r0
 8003762:	220c      	movs	r2, #12
 8003764:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003766:	f04f 33ff 	mov.w	r3, #4294967295
 800376a:	e009      	b.n	8003780 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800376c:	4b08      	ldr	r3, [pc, #32]	@ (8003790 <_sbrk+0x64>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003772:	4b07      	ldr	r3, [pc, #28]	@ (8003790 <_sbrk+0x64>)
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4413      	add	r3, r2
 800377a:	4a05      	ldr	r2, [pc, #20]	@ (8003790 <_sbrk+0x64>)
 800377c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800377e:	68fb      	ldr	r3, [r7, #12]
}
 8003780:	4618      	mov	r0, r3
 8003782:	3718      	adds	r7, #24
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	24050000 	.word	0x24050000
 800378c:	00000400 	.word	0x00000400
 8003790:	24000954 	.word	0x24000954
 8003794:	24000ac0 	.word	0x24000ac0

08003798 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800379c:	4b32      	ldr	r3, [pc, #200]	@ (8003868 <SystemInit+0xd0>)
 800379e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037a2:	4a31      	ldr	r2, [pc, #196]	@ (8003868 <SystemInit+0xd0>)
 80037a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80037a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80037ac:	4b2f      	ldr	r3, [pc, #188]	@ (800386c <SystemInit+0xd4>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 030f 	and.w	r3, r3, #15
 80037b4:	2b06      	cmp	r3, #6
 80037b6:	d807      	bhi.n	80037c8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80037b8:	4b2c      	ldr	r3, [pc, #176]	@ (800386c <SystemInit+0xd4>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f023 030f 	bic.w	r3, r3, #15
 80037c0:	4a2a      	ldr	r2, [pc, #168]	@ (800386c <SystemInit+0xd4>)
 80037c2:	f043 0307 	orr.w	r3, r3, #7
 80037c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80037c8:	4b29      	ldr	r3, [pc, #164]	@ (8003870 <SystemInit+0xd8>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a28      	ldr	r2, [pc, #160]	@ (8003870 <SystemInit+0xd8>)
 80037ce:	f043 0301 	orr.w	r3, r3, #1
 80037d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80037d4:	4b26      	ldr	r3, [pc, #152]	@ (8003870 <SystemInit+0xd8>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80037da:	4b25      	ldr	r3, [pc, #148]	@ (8003870 <SystemInit+0xd8>)
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	4924      	ldr	r1, [pc, #144]	@ (8003870 <SystemInit+0xd8>)
 80037e0:	4b24      	ldr	r3, [pc, #144]	@ (8003874 <SystemInit+0xdc>)
 80037e2:	4013      	ands	r3, r2
 80037e4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80037e6:	4b21      	ldr	r3, [pc, #132]	@ (800386c <SystemInit+0xd4>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0308 	and.w	r3, r3, #8
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d007      	beq.n	8003802 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80037f2:	4b1e      	ldr	r3, [pc, #120]	@ (800386c <SystemInit+0xd4>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f023 030f 	bic.w	r3, r3, #15
 80037fa:	4a1c      	ldr	r2, [pc, #112]	@ (800386c <SystemInit+0xd4>)
 80037fc:	f043 0307 	orr.w	r3, r3, #7
 8003800:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003802:	4b1b      	ldr	r3, [pc, #108]	@ (8003870 <SystemInit+0xd8>)
 8003804:	2200      	movs	r2, #0
 8003806:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003808:	4b19      	ldr	r3, [pc, #100]	@ (8003870 <SystemInit+0xd8>)
 800380a:	2200      	movs	r2, #0
 800380c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800380e:	4b18      	ldr	r3, [pc, #96]	@ (8003870 <SystemInit+0xd8>)
 8003810:	2200      	movs	r2, #0
 8003812:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003814:	4b16      	ldr	r3, [pc, #88]	@ (8003870 <SystemInit+0xd8>)
 8003816:	4a18      	ldr	r2, [pc, #96]	@ (8003878 <SystemInit+0xe0>)
 8003818:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800381a:	4b15      	ldr	r3, [pc, #84]	@ (8003870 <SystemInit+0xd8>)
 800381c:	4a17      	ldr	r2, [pc, #92]	@ (800387c <SystemInit+0xe4>)
 800381e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003820:	4b13      	ldr	r3, [pc, #76]	@ (8003870 <SystemInit+0xd8>)
 8003822:	4a17      	ldr	r2, [pc, #92]	@ (8003880 <SystemInit+0xe8>)
 8003824:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003826:	4b12      	ldr	r3, [pc, #72]	@ (8003870 <SystemInit+0xd8>)
 8003828:	2200      	movs	r2, #0
 800382a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800382c:	4b10      	ldr	r3, [pc, #64]	@ (8003870 <SystemInit+0xd8>)
 800382e:	4a14      	ldr	r2, [pc, #80]	@ (8003880 <SystemInit+0xe8>)
 8003830:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003832:	4b0f      	ldr	r3, [pc, #60]	@ (8003870 <SystemInit+0xd8>)
 8003834:	2200      	movs	r2, #0
 8003836:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003838:	4b0d      	ldr	r3, [pc, #52]	@ (8003870 <SystemInit+0xd8>)
 800383a:	4a11      	ldr	r2, [pc, #68]	@ (8003880 <SystemInit+0xe8>)
 800383c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800383e:	4b0c      	ldr	r3, [pc, #48]	@ (8003870 <SystemInit+0xd8>)
 8003840:	2200      	movs	r2, #0
 8003842:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003844:	4b0a      	ldr	r3, [pc, #40]	@ (8003870 <SystemInit+0xd8>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a09      	ldr	r2, [pc, #36]	@ (8003870 <SystemInit+0xd8>)
 800384a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800384e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003850:	4b07      	ldr	r3, [pc, #28]	@ (8003870 <SystemInit+0xd8>)
 8003852:	2200      	movs	r2, #0
 8003854:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003856:	4b0b      	ldr	r3, [pc, #44]	@ (8003884 <SystemInit+0xec>)
 8003858:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800385c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800385e:	bf00      	nop
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr
 8003868:	e000ed00 	.word	0xe000ed00
 800386c:	52002000 	.word	0x52002000
 8003870:	58024400 	.word	0x58024400
 8003874:	eaf6ed7f 	.word	0xeaf6ed7f
 8003878:	02020200 	.word	0x02020200
 800387c:	01ff0000 	.word	0x01ff0000
 8003880:	01010280 	.word	0x01010280
 8003884:	52004000 	.word	0x52004000

08003888 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003888:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80038c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800388c:	f7ff ff84 	bl	8003798 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003890:	480c      	ldr	r0, [pc, #48]	@ (80038c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003892:	490d      	ldr	r1, [pc, #52]	@ (80038c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003894:	4a0d      	ldr	r2, [pc, #52]	@ (80038cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003896:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003898:	e002      	b.n	80038a0 <LoopCopyDataInit>

0800389a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800389a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800389c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800389e:	3304      	adds	r3, #4

080038a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038a4:	d3f9      	bcc.n	800389a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038a6:	4a0a      	ldr	r2, [pc, #40]	@ (80038d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80038a8:	4c0a      	ldr	r4, [pc, #40]	@ (80038d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80038aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038ac:	e001      	b.n	80038b2 <LoopFillZerobss>

080038ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038b0:	3204      	adds	r2, #4

080038b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038b4:	d3fb      	bcc.n	80038ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80038b6:	f010 f909 	bl	8013acc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80038ba:	f7fc ff17 	bl	80006ec <main>
  bx  lr
 80038be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80038c0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80038c4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80038c8:	24000084 	.word	0x24000084
  ldr r2, =_sidata
 80038cc:	08014918 	.word	0x08014918
  ldr r2, =_sbss
 80038d0:	24000084 	.word	0x24000084
  ldr r4, =_ebss
 80038d4:	24000ac0 	.word	0x24000ac0

080038d8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038d8:	e7fe      	b.n	80038d8 <ADC3_IRQHandler>
	...

080038dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038e2:	2003      	movs	r0, #3
 80038e4:	f002 fd8a 	bl	80063fc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80038e8:	f007 f802 	bl	800a8f0 <HAL_RCC_GetSysClockFreq>
 80038ec:	4602      	mov	r2, r0
 80038ee:	4b15      	ldr	r3, [pc, #84]	@ (8003944 <HAL_Init+0x68>)
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	0a1b      	lsrs	r3, r3, #8
 80038f4:	f003 030f 	and.w	r3, r3, #15
 80038f8:	4913      	ldr	r1, [pc, #76]	@ (8003948 <HAL_Init+0x6c>)
 80038fa:	5ccb      	ldrb	r3, [r1, r3]
 80038fc:	f003 031f 	and.w	r3, r3, #31
 8003900:	fa22 f303 	lsr.w	r3, r2, r3
 8003904:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003906:	4b0f      	ldr	r3, [pc, #60]	@ (8003944 <HAL_Init+0x68>)
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	f003 030f 	and.w	r3, r3, #15
 800390e:	4a0e      	ldr	r2, [pc, #56]	@ (8003948 <HAL_Init+0x6c>)
 8003910:	5cd3      	ldrb	r3, [r2, r3]
 8003912:	f003 031f 	and.w	r3, r3, #31
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	fa22 f303 	lsr.w	r3, r2, r3
 800391c:	4a0b      	ldr	r2, [pc, #44]	@ (800394c <HAL_Init+0x70>)
 800391e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003920:	4a0b      	ldr	r2, [pc, #44]	@ (8003950 <HAL_Init+0x74>)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003926:	200f      	movs	r0, #15
 8003928:	f000 f814 	bl	8003954 <HAL_InitTick>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e002      	b.n	800393c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003936:	f7ff f989 	bl	8002c4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3708      	adds	r7, #8
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	58024400 	.word	0x58024400
 8003948:	08014870 	.word	0x08014870
 800394c:	24000028 	.word	0x24000028
 8003950:	24000024 	.word	0x24000024

08003954 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800395c:	4b15      	ldr	r3, [pc, #84]	@ (80039b4 <HAL_InitTick+0x60>)
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d101      	bne.n	8003968 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e021      	b.n	80039ac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003968:	4b13      	ldr	r3, [pc, #76]	@ (80039b8 <HAL_InitTick+0x64>)
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	4b11      	ldr	r3, [pc, #68]	@ (80039b4 <HAL_InitTick+0x60>)
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	4619      	mov	r1, r3
 8003972:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003976:	fbb3 f3f1 	udiv	r3, r3, r1
 800397a:	fbb2 f3f3 	udiv	r3, r2, r3
 800397e:	4618      	mov	r0, r3
 8003980:	f002 fd6f 	bl	8006462 <HAL_SYSTICK_Config>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e00e      	b.n	80039ac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2b0f      	cmp	r3, #15
 8003992:	d80a      	bhi.n	80039aa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003994:	2200      	movs	r2, #0
 8003996:	6879      	ldr	r1, [r7, #4]
 8003998:	f04f 30ff 	mov.w	r0, #4294967295
 800399c:	f002 fd39 	bl	8006412 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80039a0:	4a06      	ldr	r2, [pc, #24]	@ (80039bc <HAL_InitTick+0x68>)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
 80039a8:	e000      	b.n	80039ac <HAL_InitTick+0x58>
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3708      	adds	r7, #8
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	24000030 	.word	0x24000030
 80039b8:	24000024 	.word	0x24000024
 80039bc:	2400002c 	.word	0x2400002c

080039c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80039c4:	4b06      	ldr	r3, [pc, #24]	@ (80039e0 <HAL_IncTick+0x20>)
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	461a      	mov	r2, r3
 80039ca:	4b06      	ldr	r3, [pc, #24]	@ (80039e4 <HAL_IncTick+0x24>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4413      	add	r3, r2
 80039d0:	4a04      	ldr	r2, [pc, #16]	@ (80039e4 <HAL_IncTick+0x24>)
 80039d2:	6013      	str	r3, [r2, #0]
}
 80039d4:	bf00      	nop
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	24000030 	.word	0x24000030
 80039e4:	24000958 	.word	0x24000958

080039e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
  return uwTick;
 80039ec:	4b03      	ldr	r3, [pc, #12]	@ (80039fc <HAL_GetTick+0x14>)
 80039ee:	681b      	ldr	r3, [r3, #0]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	24000958 	.word	0x24000958

08003a00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a08:	f7ff ffee 	bl	80039e8 <HAL_GetTick>
 8003a0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a18:	d005      	beq.n	8003a26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8003a44 <HAL_Delay+0x44>)
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	4413      	add	r3, r2
 8003a24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a26:	bf00      	nop
 8003a28:	f7ff ffde 	bl	80039e8 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d8f7      	bhi.n	8003a28 <HAL_Delay+0x28>
  {
  }
}
 8003a38:	bf00      	nop
 8003a3a:	bf00      	nop
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	24000030 	.word	0x24000030

08003a48 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	431a      	orrs	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	609a      	str	r2, [r3, #8]
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b083      	sub	sp, #12
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
 8003a76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	431a      	orrs	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	609a      	str	r2, [r3, #8]
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b087      	sub	sp, #28
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
 8003abc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	3360      	adds	r3, #96	@ 0x60
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	4a10      	ldr	r2, [pc, #64]	@ (8003b10 <LL_ADC_SetOffset+0x60>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d10b      	bne.n	8003aec <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003aea:	e00b      	b.n	8003b04 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	430b      	orrs	r3, r1
 8003afe:	431a      	orrs	r2, r3
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	601a      	str	r2, [r3, #0]
}
 8003b04:	bf00      	nop
 8003b06:	371c      	adds	r7, #28
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr
 8003b10:	58026000 	.word	0x58026000

08003b14 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	3360      	adds	r3, #96	@ 0x60
 8003b22:	461a      	mov	r2, r3
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	4413      	add	r3, r2
 8003b2a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3714      	adds	r7, #20
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	f003 031f 	and.w	r3, r3, #31
 8003b5a:	6879      	ldr	r1, [r7, #4]
 8003b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b60:	431a      	orrs	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	611a      	str	r2, [r3, #16]
}
 8003b66:	bf00      	nop
 8003b68:	3714      	adds	r7, #20
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
	...

08003b74 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b087      	sub	sp, #28
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	4a0c      	ldr	r2, [pc, #48]	@ (8003bb4 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d00e      	beq.n	8003ba6 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	3360      	adds	r3, #96	@ 0x60
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4413      	add	r3, r2
 8003b94:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	431a      	orrs	r2, r3
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	601a      	str	r2, [r3, #0]
  }
}
 8003ba6:	bf00      	nop
 8003ba8:	371c      	adds	r7, #28
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	58026000 	.word	0x58026000

08003bb8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b087      	sub	sp, #28
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	4a0c      	ldr	r2, [pc, #48]	@ (8003bf8 <LL_ADC_SetOffsetSaturation+0x40>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d10e      	bne.n	8003bea <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	3360      	adds	r3, #96	@ 0x60
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	431a      	orrs	r2, r3
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003bea:	bf00      	nop
 8003bec:	371c      	adds	r7, #28
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	58026000 	.word	0x58026000

08003bfc <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b087      	sub	sp, #28
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4a0c      	ldr	r2, [pc, #48]	@ (8003c3c <LL_ADC_SetOffsetSign+0x40>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d10e      	bne.n	8003c2e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	3360      	adds	r3, #96	@ 0x60
 8003c14:	461a      	mov	r2, r3
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	4413      	add	r3, r2
 8003c1c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003c2e:	bf00      	nop
 8003c30:	371c      	adds	r7, #28
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	58026000 	.word	0x58026000

08003c40 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b087      	sub	sp, #28
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	3360      	adds	r3, #96	@ 0x60
 8003c50:	461a      	mov	r2, r3
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4413      	add	r3, r2
 8003c58:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	4a0c      	ldr	r2, [pc, #48]	@ (8003c90 <LL_ADC_SetOffsetState+0x50>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d108      	bne.n	8003c74 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003c72:	e007      	b.n	8003c84 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	601a      	str	r2, [r3, #0]
}
 8003c84:	bf00      	nop
 8003c86:	371c      	adds	r7, #28
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr
 8003c90:	58026000 	.word	0x58026000

08003c94 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d101      	bne.n	8003cac <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e000      	b.n	8003cae <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b087      	sub	sp, #28
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	60f8      	str	r0, [r7, #12]
 8003cc2:	60b9      	str	r1, [r7, #8]
 8003cc4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	3330      	adds	r3, #48	@ 0x30
 8003cca:	461a      	mov	r2, r3
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	0a1b      	lsrs	r3, r3, #8
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	f003 030c 	and.w	r3, r3, #12
 8003cd6:	4413      	add	r3, r2
 8003cd8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	f003 031f 	and.w	r3, r3, #31
 8003ce4:	211f      	movs	r1, #31
 8003ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cea:	43db      	mvns	r3, r3
 8003cec:	401a      	ands	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	0e9b      	lsrs	r3, r3, #26
 8003cf2:	f003 011f 	and.w	r1, r3, #31
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	f003 031f 	and.w	r3, r3, #31
 8003cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8003d00:	431a      	orrs	r2, r3
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003d06:	bf00      	nop
 8003d08:	371c      	adds	r7, #28
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8003d12:	b480      	push	{r7}
 8003d14:	b083      	sub	sp, #12
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
 8003d1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f023 0203 	bic.w	r2, r3, #3
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	431a      	orrs	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	60da      	str	r2, [r3, #12]
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	f043 0201 	orr.w	r2, r3, #1
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	60da      	str	r2, [r3, #12]
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a08      	ldr	r2, [pc, #32]	@ (8003d88 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d107      	bne.n	8003d7a <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	f023 0203 	bic.w	r2, r3, #3
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	431a      	orrs	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	60da      	str	r2, [r3, #12]
  }
}
 8003d7a:	bf00      	nop
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	58026000 	.word	0x58026000

08003d8c <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d98:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d101      	bne.n	8003da4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003da0:	2301      	movs	r3, #1
 8003da2:	e000      	b.n	8003da6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr

08003db2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003db2:	b480      	push	{r7}
 8003db4:	b087      	sub	sp, #28
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	60f8      	str	r0, [r7, #12]
 8003dba:	60b9      	str	r1, [r7, #8]
 8003dbc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	3314      	adds	r3, #20
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	0e5b      	lsrs	r3, r3, #25
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	f003 0304 	and.w	r3, r3, #4
 8003dce:	4413      	add	r3, r2
 8003dd0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	0d1b      	lsrs	r3, r3, #20
 8003dda:	f003 031f 	and.w	r3, r3, #31
 8003dde:	2107      	movs	r1, #7
 8003de0:	fa01 f303 	lsl.w	r3, r1, r3
 8003de4:	43db      	mvns	r3, r3
 8003de6:	401a      	ands	r2, r3
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	0d1b      	lsrs	r3, r3, #20
 8003dec:	f003 031f 	and.w	r3, r3, #31
 8003df0:	6879      	ldr	r1, [r7, #4]
 8003df2:	fa01 f303 	lsl.w	r3, r1, r3
 8003df6:	431a      	orrs	r2, r3
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003dfc:	bf00      	nop
 8003dfe:	371c      	adds	r7, #28
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4a1a      	ldr	r2, [pc, #104]	@ (8003e80 <LL_ADC_SetChannelSingleDiff+0x78>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d115      	bne.n	8003e48 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e28:	43db      	mvns	r3, r3
 8003e2a:	401a      	ands	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f003 0318 	and.w	r3, r3, #24
 8003e32:	4914      	ldr	r1, [pc, #80]	@ (8003e84 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003e34:	40d9      	lsrs	r1, r3
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	400b      	ands	r3, r1
 8003e3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003e46:	e014      	b.n	8003e72 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e54:	43db      	mvns	r3, r3
 8003e56:	401a      	ands	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f003 0318 	and.w	r3, r3, #24
 8003e5e:	4909      	ldr	r1, [pc, #36]	@ (8003e84 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003e60:	40d9      	lsrs	r1, r3
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	400b      	ands	r3, r1
 8003e66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8003e72:	bf00      	nop
 8003e74:	3714      	adds	r7, #20
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	58026000 	.word	0x58026000
 8003e84:	000fffff 	.word	0x000fffff

08003e88 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f003 031f 	and.w	r3, r3, #31
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689a      	ldr	r2, [r3, #8]
 8003ecc:	4b04      	ldr	r3, [pc, #16]	@ (8003ee0 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003ece:	4013      	ands	r3, r2
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6093      	str	r3, [r2, #8]
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	5fffffc0 	.word	0x5fffffc0

08003ee4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ef4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ef8:	d101      	bne.n	8003efe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003efa:	2301      	movs	r3, #1
 8003efc:	e000      	b.n	8003f00 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	4b05      	ldr	r3, [pc, #20]	@ (8003f30 <LL_ADC_EnableInternalRegulator+0x24>)
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr
 8003f30:	6fffffc0 	.word	0x6fffffc0

08003f34 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f48:	d101      	bne.n	8003f4e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e000      	b.n	8003f50 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	4b05      	ldr	r3, [pc, #20]	@ (8003f80 <LL_ADC_Enable+0x24>)
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	f043 0201 	orr.w	r2, r3, #1
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr
 8003f80:	7fffffc0 	.word	0x7fffffc0

08003f84 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	4b05      	ldr	r3, [pc, #20]	@ (8003fa8 <LL_ADC_Disable+0x24>)
 8003f92:	4013      	ands	r3, r2
 8003f94:	f043 0202 	orr.w	r2, r3, #2
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	7fffffc0 	.word	0x7fffffc0

08003fac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f003 0301 	and.w	r3, r3, #1
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d101      	bne.n	8003fc4 <LL_ADC_IsEnabled+0x18>
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e000      	b.n	8003fc6 <LL_ADC_IsEnabled+0x1a>
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b083      	sub	sp, #12
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d101      	bne.n	8003fea <LL_ADC_IsDisableOngoing+0x18>
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e000      	b.n	8003fec <LL_ADC_IsDisableOngoing+0x1a>
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689a      	ldr	r2, [r3, #8]
 8004004:	4b05      	ldr	r3, [pc, #20]	@ (800401c <LL_ADC_REG_StartConversion+0x24>)
 8004006:	4013      	ands	r3, r2
 8004008:	f043 0204 	orr.w	r2, r3, #4
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr
 800401c:	7fffffc0 	.word	0x7fffffc0

08004020 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689a      	ldr	r2, [r3, #8]
 800402c:	4b05      	ldr	r3, [pc, #20]	@ (8004044 <LL_ADC_REG_StopConversion+0x24>)
 800402e:	4013      	ands	r3, r2
 8004030:	f043 0210 	orr.w	r2, r3, #16
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr
 8004044:	7fffffc0 	.word	0x7fffffc0

08004048 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f003 0304 	and.w	r3, r3, #4
 8004058:	2b04      	cmp	r3, #4
 800405a:	d101      	bne.n	8004060 <LL_ADC_REG_IsConversionOngoing+0x18>
 800405c:	2301      	movs	r3, #1
 800405e:	e000      	b.n	8004062 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
	...

08004070 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689a      	ldr	r2, [r3, #8]
 800407c:	4b05      	ldr	r3, [pc, #20]	@ (8004094 <LL_ADC_INJ_StopConversion+0x24>)
 800407e:	4013      	ands	r3, r2
 8004080:	f043 0220 	orr.w	r2, r3, #32
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr
 8004094:	7fffffc0 	.word	0x7fffffc0

08004098 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f003 0308 	and.w	r3, r3, #8
 80040a8:	2b08      	cmp	r3, #8
 80040aa:	d101      	bne.n	80040b0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80040ac:	2301      	movs	r3, #1
 80040ae:	e000      	b.n	80040b2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
	...

080040c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80040c0:	b590      	push	{r4, r7, lr}
 80040c2:	b089      	sub	sp, #36	@ 0x24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040c8:	2300      	movs	r3, #0
 80040ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80040cc:	2300      	movs	r3, #0
 80040ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e1ee      	b.n	80044b8 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d109      	bne.n	80040fc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f7fe fdc9 	bl	8002c80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4618      	mov	r0, r3
 8004102:	f7ff feef 	bl	8003ee4 <LL_ADC_IsDeepPowerDownEnabled>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d004      	beq.n	8004116 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4618      	mov	r0, r3
 8004112:	f7ff fed5 	bl	8003ec0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4618      	mov	r0, r3
 800411c:	f7ff ff0a 	bl	8003f34 <LL_ADC_IsInternalRegulatorEnabled>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d114      	bne.n	8004150 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4618      	mov	r0, r3
 800412c:	f7ff feee 	bl	8003f0c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004130:	4b8e      	ldr	r3, [pc, #568]	@ (800436c <HAL_ADC_Init+0x2ac>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	099b      	lsrs	r3, r3, #6
 8004136:	4a8e      	ldr	r2, [pc, #568]	@ (8004370 <HAL_ADC_Init+0x2b0>)
 8004138:	fba2 2303 	umull	r2, r3, r2, r3
 800413c:	099b      	lsrs	r3, r3, #6
 800413e:	3301      	adds	r3, #1
 8004140:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004142:	e002      	b.n	800414a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	3b01      	subs	r3, #1
 8004148:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1f9      	bne.n	8004144 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4618      	mov	r0, r3
 8004156:	f7ff feed 	bl	8003f34 <LL_ADC_IsInternalRegulatorEnabled>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10d      	bne.n	800417c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004164:	f043 0210 	orr.w	r2, r3, #16
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004170:	f043 0201 	orr.w	r2, r3, #1
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4618      	mov	r0, r3
 8004182:	f7ff ff61 	bl	8004048 <LL_ADC_REG_IsConversionOngoing>
 8004186:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800418c:	f003 0310 	and.w	r3, r3, #16
 8004190:	2b00      	cmp	r3, #0
 8004192:	f040 8188 	bne.w	80044a6 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	2b00      	cmp	r3, #0
 800419a:	f040 8184 	bne.w	80044a6 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041a2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80041a6:	f043 0202 	orr.w	r2, r3, #2
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7ff fefa 	bl	8003fac <LL_ADC_IsEnabled>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d136      	bne.n	800422c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a6c      	ldr	r2, [pc, #432]	@ (8004374 <HAL_ADC_Init+0x2b4>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d004      	beq.n	80041d2 <HAL_ADC_Init+0x112>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a6a      	ldr	r2, [pc, #424]	@ (8004378 <HAL_ADC_Init+0x2b8>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d10e      	bne.n	80041f0 <HAL_ADC_Init+0x130>
 80041d2:	4868      	ldr	r0, [pc, #416]	@ (8004374 <HAL_ADC_Init+0x2b4>)
 80041d4:	f7ff feea 	bl	8003fac <LL_ADC_IsEnabled>
 80041d8:	4604      	mov	r4, r0
 80041da:	4867      	ldr	r0, [pc, #412]	@ (8004378 <HAL_ADC_Init+0x2b8>)
 80041dc:	f7ff fee6 	bl	8003fac <LL_ADC_IsEnabled>
 80041e0:	4603      	mov	r3, r0
 80041e2:	4323      	orrs	r3, r4
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	bf0c      	ite	eq
 80041e8:	2301      	moveq	r3, #1
 80041ea:	2300      	movne	r3, #0
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	e008      	b.n	8004202 <HAL_ADC_Init+0x142>
 80041f0:	4862      	ldr	r0, [pc, #392]	@ (800437c <HAL_ADC_Init+0x2bc>)
 80041f2:	f7ff fedb 	bl	8003fac <LL_ADC_IsEnabled>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	bf0c      	ite	eq
 80041fc:	2301      	moveq	r3, #1
 80041fe:	2300      	movne	r3, #0
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d012      	beq.n	800422c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a5a      	ldr	r2, [pc, #360]	@ (8004374 <HAL_ADC_Init+0x2b4>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d004      	beq.n	800421a <HAL_ADC_Init+0x15a>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a58      	ldr	r2, [pc, #352]	@ (8004378 <HAL_ADC_Init+0x2b8>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d101      	bne.n	800421e <HAL_ADC_Init+0x15e>
 800421a:	4a59      	ldr	r2, [pc, #356]	@ (8004380 <HAL_ADC_Init+0x2c0>)
 800421c:	e000      	b.n	8004220 <HAL_ADC_Init+0x160>
 800421e:	4a59      	ldr	r2, [pc, #356]	@ (8004384 <HAL_ADC_Init+0x2c4>)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	4619      	mov	r1, r3
 8004226:	4610      	mov	r0, r2
 8004228:	f7ff fc0e 	bl	8003a48 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a52      	ldr	r2, [pc, #328]	@ (800437c <HAL_ADC_Init+0x2bc>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d129      	bne.n	800428a <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	7e5b      	ldrb	r3, [r3, #25]
 800423a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004240:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8004246:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	2b08      	cmp	r3, #8
 800424e:	d013      	beq.n	8004278 <HAL_ADC_Init+0x1b8>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	2b0c      	cmp	r3, #12
 8004256:	d00d      	beq.n	8004274 <HAL_ADC_Init+0x1b4>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	2b1c      	cmp	r3, #28
 800425e:	d007      	beq.n	8004270 <HAL_ADC_Init+0x1b0>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	2b18      	cmp	r3, #24
 8004266:	d101      	bne.n	800426c <HAL_ADC_Init+0x1ac>
 8004268:	2318      	movs	r3, #24
 800426a:	e006      	b.n	800427a <HAL_ADC_Init+0x1ba>
 800426c:	2300      	movs	r3, #0
 800426e:	e004      	b.n	800427a <HAL_ADC_Init+0x1ba>
 8004270:	2310      	movs	r3, #16
 8004272:	e002      	b.n	800427a <HAL_ADC_Init+0x1ba>
 8004274:	2308      	movs	r3, #8
 8004276:	e000      	b.n	800427a <HAL_ADC_Init+0x1ba>
 8004278:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800427a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004282:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004284:	4313      	orrs	r3, r2
 8004286:	61bb      	str	r3, [r7, #24]
 8004288:	e00e      	b.n	80042a8 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	7e5b      	ldrb	r3, [r3, #25]
 800428e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004294:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800429a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042a2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80042a4:	4313      	orrs	r3, r2
 80042a6:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d106      	bne.n	80042c0 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b6:	3b01      	subs	r3, #1
 80042b8:	045b      	lsls	r3, r3, #17
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	4313      	orrs	r3, r2
 80042be:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d009      	beq.n	80042dc <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042cc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80042d6:	69ba      	ldr	r2, [r7, #24]
 80042d8:	4313      	orrs	r3, r2
 80042da:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a26      	ldr	r2, [pc, #152]	@ (800437c <HAL_ADC_Init+0x2bc>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d115      	bne.n	8004312 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68da      	ldr	r2, [r3, #12]
 80042ec:	4b26      	ldr	r3, [pc, #152]	@ (8004388 <HAL_ADC_Init+0x2c8>)
 80042ee:	4013      	ands	r3, r2
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	6812      	ldr	r2, [r2, #0]
 80042f4:	69b9      	ldr	r1, [r7, #24]
 80042f6:	430b      	orrs	r3, r1
 80042f8:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	430a      	orrs	r2, r1
 800430e:	611a      	str	r2, [r3, #16]
 8004310:	e009      	b.n	8004326 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68da      	ldr	r2, [r3, #12]
 8004318:	4b1c      	ldr	r3, [pc, #112]	@ (800438c <HAL_ADC_Init+0x2cc>)
 800431a:	4013      	ands	r3, r2
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	6812      	ldr	r2, [r2, #0]
 8004320:	69b9      	ldr	r1, [r7, #24]
 8004322:	430b      	orrs	r3, r1
 8004324:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4618      	mov	r0, r3
 800432c:	f7ff fe8c 	bl	8004048 <LL_ADC_REG_IsConversionOngoing>
 8004330:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4618      	mov	r0, r3
 8004338:	f7ff feae 	bl	8004098 <LL_ADC_INJ_IsConversionOngoing>
 800433c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	2b00      	cmp	r3, #0
 8004342:	f040 808e 	bne.w	8004462 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2b00      	cmp	r3, #0
 800434a:	f040 808a 	bne.w	8004462 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a0a      	ldr	r2, [pc, #40]	@ (800437c <HAL_ADC_Init+0x2bc>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d11b      	bne.n	8004390 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	7e1b      	ldrb	r3, [r3, #24]
 800435c:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004364:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8004366:	4313      	orrs	r3, r2
 8004368:	61bb      	str	r3, [r7, #24]
 800436a:	e018      	b.n	800439e <HAL_ADC_Init+0x2de>
 800436c:	24000024 	.word	0x24000024
 8004370:	053e2d63 	.word	0x053e2d63
 8004374:	40022000 	.word	0x40022000
 8004378:	40022100 	.word	0x40022100
 800437c:	58026000 	.word	0x58026000
 8004380:	40022300 	.word	0x40022300
 8004384:	58026300 	.word	0x58026300
 8004388:	fff04007 	.word	0xfff04007
 800438c:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	7e1b      	ldrb	r3, [r3, #24]
 8004394:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 800439a:	4313      	orrs	r3, r2
 800439c:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68da      	ldr	r2, [r3, #12]
 80043a4:	4b46      	ldr	r3, [pc, #280]	@ (80044c0 <HAL_ADC_Init+0x400>)
 80043a6:	4013      	ands	r3, r2
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	6812      	ldr	r2, [r2, #0]
 80043ac:	69b9      	ldr	r1, [r7, #24]
 80043ae:	430b      	orrs	r3, r1
 80043b0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d137      	bne.n	800442c <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043c0:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a3f      	ldr	r2, [pc, #252]	@ (80044c4 <HAL_ADC_Init+0x404>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d116      	bne.n	80043fa <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	691a      	ldr	r2, [r3, #16]
 80043d2:	4b3d      	ldr	r3, [pc, #244]	@ (80044c8 <HAL_ADC_Init+0x408>)
 80043d4:	4013      	ands	r3, r2
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80043de:	4311      	orrs	r1, r2
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80043e4:	4311      	orrs	r1, r2
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80043ea:	430a      	orrs	r2, r1
 80043ec:	431a      	orrs	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f042 0201 	orr.w	r2, r2, #1
 80043f6:	611a      	str	r2, [r3, #16]
 80043f8:	e020      	b.n	800443c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	691a      	ldr	r2, [r3, #16]
 8004400:	4b32      	ldr	r3, [pc, #200]	@ (80044cc <HAL_ADC_Init+0x40c>)
 8004402:	4013      	ands	r3, r2
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004408:	3a01      	subs	r2, #1
 800440a:	0411      	lsls	r1, r2, #16
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004410:	4311      	orrs	r1, r2
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004416:	4311      	orrs	r1, r2
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800441c:	430a      	orrs	r2, r1
 800441e:	431a      	orrs	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f042 0201 	orr.w	r2, r2, #1
 8004428:	611a      	str	r2, [r3, #16]
 800442a:	e007      	b.n	800443c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	691a      	ldr	r2, [r3, #16]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 0201 	bic.w	r2, r2, #1
 800443a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a1b      	ldr	r2, [pc, #108]	@ (80044c4 <HAL_ADC_Init+0x404>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d002      	beq.n	8004462 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f001 fcd5 	bl	8005e0c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d10c      	bne.n	8004484 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004470:	f023 010f 	bic.w	r1, r3, #15
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	69db      	ldr	r3, [r3, #28]
 8004478:	1e5a      	subs	r2, r3, #1
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	430a      	orrs	r2, r1
 8004480:	631a      	str	r2, [r3, #48]	@ 0x30
 8004482:	e007      	b.n	8004494 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f022 020f 	bic.w	r2, r2, #15
 8004492:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004498:	f023 0303 	bic.w	r3, r3, #3
 800449c:	f043 0201 	orr.w	r2, r3, #1
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	661a      	str	r2, [r3, #96]	@ 0x60
 80044a4:	e007      	b.n	80044b6 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044aa:	f043 0210 	orr.w	r2, r3, #16
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80044b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3724      	adds	r7, #36	@ 0x24
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd90      	pop	{r4, r7, pc}
 80044c0:	ffffbffc 	.word	0xffffbffc
 80044c4:	58026000 	.word	0x58026000
 80044c8:	fc00f81f 	.word	0xfc00f81f
 80044cc:	fc00f81e 	.word	0xfc00f81e

080044d0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a5c      	ldr	r2, [pc, #368]	@ (8004650 <HAL_ADC_Start+0x180>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d004      	beq.n	80044ec <HAL_ADC_Start+0x1c>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a5b      	ldr	r2, [pc, #364]	@ (8004654 <HAL_ADC_Start+0x184>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d101      	bne.n	80044f0 <HAL_ADC_Start+0x20>
 80044ec:	4b5a      	ldr	r3, [pc, #360]	@ (8004658 <HAL_ADC_Start+0x188>)
 80044ee:	e000      	b.n	80044f2 <HAL_ADC_Start+0x22>
 80044f0:	4b5a      	ldr	r3, [pc, #360]	@ (800465c <HAL_ADC_Start+0x18c>)
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7ff fcc8 	bl	8003e88 <LL_ADC_GetMultimode>
 80044f8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4618      	mov	r0, r3
 8004500:	f7ff fda2 	bl	8004048 <LL_ADC_REG_IsConversionOngoing>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	f040 809a 	bne.w	8004640 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004512:	2b01      	cmp	r3, #1
 8004514:	d101      	bne.n	800451a <HAL_ADC_Start+0x4a>
 8004516:	2302      	movs	r3, #2
 8004518:	e095      	b.n	8004646 <HAL_ADC_Start+0x176>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2201      	movs	r2, #1
 800451e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f001 faf4 	bl	8005b10 <ADC_Enable>
 8004528:	4603      	mov	r3, r0
 800452a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800452c:	7dfb      	ldrb	r3, [r7, #23]
 800452e:	2b00      	cmp	r3, #0
 8004530:	f040 8081 	bne.w	8004636 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004538:	4b49      	ldr	r3, [pc, #292]	@ (8004660 <HAL_ADC_Start+0x190>)
 800453a:	4013      	ands	r3, r2
 800453c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a42      	ldr	r2, [pc, #264]	@ (8004654 <HAL_ADC_Start+0x184>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d002      	beq.n	8004554 <HAL_ADC_Start+0x84>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	e000      	b.n	8004556 <HAL_ADC_Start+0x86>
 8004554:	4b3e      	ldr	r3, [pc, #248]	@ (8004650 <HAL_ADC_Start+0x180>)
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	6812      	ldr	r2, [r2, #0]
 800455a:	4293      	cmp	r3, r2
 800455c:	d002      	beq.n	8004564 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d105      	bne.n	8004570 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004568:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004574:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004578:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800457c:	d106      	bne.n	800458c <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004582:	f023 0206 	bic.w	r2, r3, #6
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	665a      	str	r2, [r3, #100]	@ 0x64
 800458a:	e002      	b.n	8004592 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	221c      	movs	r2, #28
 8004598:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a2b      	ldr	r2, [pc, #172]	@ (8004654 <HAL_ADC_Start+0x184>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d002      	beq.n	80045b2 <HAL_ADC_Start+0xe2>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	e000      	b.n	80045b4 <HAL_ADC_Start+0xe4>
 80045b2:	4b27      	ldr	r3, [pc, #156]	@ (8004650 <HAL_ADC_Start+0x180>)
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	6812      	ldr	r2, [r2, #0]
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d008      	beq.n	80045ce <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d005      	beq.n	80045ce <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	2b05      	cmp	r3, #5
 80045c6:	d002      	beq.n	80045ce <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	2b09      	cmp	r3, #9
 80045cc:	d114      	bne.n	80045f8 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d007      	beq.n	80045ec <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045e0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80045e4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7ff fd01 	bl	8003ff8 <LL_ADC_REG_StartConversion>
 80045f6:	e025      	b.n	8004644 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045fc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	661a      	str	r2, [r3, #96]	@ 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a12      	ldr	r2, [pc, #72]	@ (8004654 <HAL_ADC_Start+0x184>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d002      	beq.n	8004614 <HAL_ADC_Start+0x144>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	e000      	b.n	8004616 <HAL_ADC_Start+0x146>
 8004614:	4b0e      	ldr	r3, [pc, #56]	@ (8004650 <HAL_ADC_Start+0x180>)
 8004616:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00f      	beq.n	8004644 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004628:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800462c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	661a      	str	r2, [r3, #96]	@ 0x60
 8004634:	e006      	b.n	8004644 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800463e:	e001      	b.n	8004644 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004640:	2302      	movs	r3, #2
 8004642:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004644:	7dfb      	ldrb	r3, [r7, #23]
}
 8004646:	4618      	mov	r0, r3
 8004648:	3718      	adds	r7, #24
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	40022000 	.word	0x40022000
 8004654:	40022100 	.word	0x40022100
 8004658:	40022300 	.word	0x40022300
 800465c:	58026300 	.word	0x58026300
 8004660:	fffff0fe 	.word	0xfffff0fe

08004664 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004672:	2b01      	cmp	r3, #1
 8004674:	d101      	bne.n	800467a <HAL_ADC_Stop+0x16>
 8004676:	2302      	movs	r3, #2
 8004678:	e021      	b.n	80046be <HAL_ADC_Stop+0x5a>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004682:	2103      	movs	r1, #3
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f001 f987 	bl	8005998 <ADC_ConversionStop>
 800468a:	4603      	mov	r3, r0
 800468c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800468e:	7bfb      	ldrb	r3, [r7, #15]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d10f      	bne.n	80046b4 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f001 fac5 	bl	8005c24 <ADC_Disable>
 800469a:	4603      	mov	r3, r0
 800469c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800469e:	7bfb      	ldrb	r3, [r7, #15]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d107      	bne.n	80046b4 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80046a8:	4b07      	ldr	r3, [pc, #28]	@ (80046c8 <HAL_ADC_Stop+0x64>)
 80046aa:	4013      	ands	r3, r2
 80046ac:	f043 0201 	orr.w	r2, r3, #1
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80046bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	ffffeefe 	.word	0xffffeefe

080046cc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b088      	sub	sp, #32
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a72      	ldr	r2, [pc, #456]	@ (80048a4 <HAL_ADC_PollForConversion+0x1d8>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d004      	beq.n	80046ea <HAL_ADC_PollForConversion+0x1e>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a70      	ldr	r2, [pc, #448]	@ (80048a8 <HAL_ADC_PollForConversion+0x1dc>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d101      	bne.n	80046ee <HAL_ADC_PollForConversion+0x22>
 80046ea:	4b70      	ldr	r3, [pc, #448]	@ (80048ac <HAL_ADC_PollForConversion+0x1e0>)
 80046ec:	e000      	b.n	80046f0 <HAL_ADC_PollForConversion+0x24>
 80046ee:	4b70      	ldr	r3, [pc, #448]	@ (80048b0 <HAL_ADC_PollForConversion+0x1e4>)
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7ff fbc9 	bl	8003e88 <LL_ADC_GetMultimode>
 80046f6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	2b08      	cmp	r3, #8
 80046fe:	d102      	bne.n	8004706 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8004700:	2308      	movs	r3, #8
 8004702:	61fb      	str	r3, [r7, #28]
 8004704:	e037      	b.n	8004776 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d005      	beq.n	8004718 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	2b05      	cmp	r3, #5
 8004710:	d002      	beq.n	8004718 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	2b09      	cmp	r3, #9
 8004716:	d111      	bne.n	800473c <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d007      	beq.n	8004736 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800472a:	f043 0220 	orr.w	r2, r3, #32
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e0b1      	b.n	800489a <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004736:	2304      	movs	r3, #4
 8004738:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800473a:	e01c      	b.n	8004776 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a58      	ldr	r2, [pc, #352]	@ (80048a4 <HAL_ADC_PollForConversion+0x1d8>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d004      	beq.n	8004750 <HAL_ADC_PollForConversion+0x84>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a57      	ldr	r2, [pc, #348]	@ (80048a8 <HAL_ADC_PollForConversion+0x1dc>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d101      	bne.n	8004754 <HAL_ADC_PollForConversion+0x88>
 8004750:	4b56      	ldr	r3, [pc, #344]	@ (80048ac <HAL_ADC_PollForConversion+0x1e0>)
 8004752:	e000      	b.n	8004756 <HAL_ADC_PollForConversion+0x8a>
 8004754:	4b56      	ldr	r3, [pc, #344]	@ (80048b0 <HAL_ADC_PollForConversion+0x1e4>)
 8004756:	4618      	mov	r0, r3
 8004758:	f7ff fba4 	bl	8003ea4 <LL_ADC_GetMultiDMATransfer>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d007      	beq.n	8004772 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004766:	f043 0220 	orr.w	r2, r3, #32
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e093      	b.n	800489a <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004772:	2304      	movs	r3, #4
 8004774:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004776:	f7ff f937 	bl	80039e8 <HAL_GetTick>
 800477a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800477c:	e021      	b.n	80047c2 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004784:	d01d      	beq.n	80047c2 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004786:	f7ff f92f 	bl	80039e8 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	429a      	cmp	r2, r3
 8004794:	d302      	bcc.n	800479c <HAL_ADC_PollForConversion+0xd0>
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d112      	bne.n	80047c2 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	4013      	ands	r3, r2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10b      	bne.n	80047c2 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047ae:	f043 0204 	orr.w	r2, r3, #4
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

          return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e06b      	b.n	800489a <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	4013      	ands	r3, r2
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d0d6      	beq.n	800477e <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047d4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7ff fa57 	bl	8003c94 <LL_ADC_REG_IsTriggerSourceSWStart>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d01c      	beq.n	8004826 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	7e5b      	ldrb	r3, [r3, #25]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d118      	bne.n	8004826 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0308 	and.w	r3, r3, #8
 80047fe:	2b08      	cmp	r3, #8
 8004800:	d111      	bne.n	8004826 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004806:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	661a      	str	r2, [r3, #96]	@ 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004812:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d105      	bne.n	8004826 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800481e:	f043 0201 	orr.w	r2, r3, #1
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a1f      	ldr	r2, [pc, #124]	@ (80048a8 <HAL_ADC_PollForConversion+0x1dc>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d002      	beq.n	8004836 <HAL_ADC_PollForConversion+0x16a>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	e000      	b.n	8004838 <HAL_ADC_PollForConversion+0x16c>
 8004836:	4b1b      	ldr	r3, [pc, #108]	@ (80048a4 <HAL_ADC_PollForConversion+0x1d8>)
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	6812      	ldr	r2, [r2, #0]
 800483c:	4293      	cmp	r3, r2
 800483e:	d008      	beq.n	8004852 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d005      	beq.n	8004852 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	2b05      	cmp	r3, #5
 800484a:	d002      	beq.n	8004852 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	2b09      	cmp	r3, #9
 8004850:	d104      	bne.n	800485c <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	61bb      	str	r3, [r7, #24]
 800485a:	e00c      	b.n	8004876 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a11      	ldr	r2, [pc, #68]	@ (80048a8 <HAL_ADC_PollForConversion+0x1dc>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d002      	beq.n	800486c <HAL_ADC_PollForConversion+0x1a0>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	e000      	b.n	800486e <HAL_ADC_PollForConversion+0x1a2>
 800486c:	4b0d      	ldr	r3, [pc, #52]	@ (80048a4 <HAL_ADC_PollForConversion+0x1d8>)
 800486e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	2b08      	cmp	r3, #8
 800487a:	d104      	bne.n	8004886 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2208      	movs	r2, #8
 8004882:	601a      	str	r2, [r3, #0]
 8004884:	e008      	b.n	8004898 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d103      	bne.n	8004898 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	220c      	movs	r2, #12
 8004896:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3720      	adds	r7, #32
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	40022000 	.word	0x40022000
 80048a8:	40022100 	.word	0x40022100
 80048ac:	40022300 	.word	0x40022300
 80048b0:	58026300 	.word	0x58026300

080048b4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a60      	ldr	r2, [pc, #384]	@ (8004a48 <HAL_ADC_Start_DMA+0x194>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d004      	beq.n	80048d4 <HAL_ADC_Start_DMA+0x20>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a5f      	ldr	r2, [pc, #380]	@ (8004a4c <HAL_ADC_Start_DMA+0x198>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d101      	bne.n	80048d8 <HAL_ADC_Start_DMA+0x24>
 80048d4:	4b5e      	ldr	r3, [pc, #376]	@ (8004a50 <HAL_ADC_Start_DMA+0x19c>)
 80048d6:	e000      	b.n	80048da <HAL_ADC_Start_DMA+0x26>
 80048d8:	4b5e      	ldr	r3, [pc, #376]	@ (8004a54 <HAL_ADC_Start_DMA+0x1a0>)
 80048da:	4618      	mov	r0, r3
 80048dc:	f7ff fad4 	bl	8003e88 <LL_ADC_GetMultimode>
 80048e0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7ff fbae 	bl	8004048 <LL_ADC_REG_IsConversionOngoing>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	f040 80a2 	bne.w	8004a38 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d101      	bne.n	8004902 <HAL_ADC_Start_DMA+0x4e>
 80048fe:	2302      	movs	r3, #2
 8004900:	e09d      	b.n	8004a3e <HAL_ADC_Start_DMA+0x18a>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d006      	beq.n	800491e <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	2b05      	cmp	r3, #5
 8004914:	d003      	beq.n	800491e <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	2b09      	cmp	r3, #9
 800491a:	f040 8086 	bne.w	8004a2a <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	f001 f8f6 	bl	8005b10 <ADC_Enable>
 8004924:	4603      	mov	r3, r0
 8004926:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004928:	7dfb      	ldrb	r3, [r7, #23]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d178      	bne.n	8004a20 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004932:	4b49      	ldr	r3, [pc, #292]	@ (8004a58 <HAL_ADC_Start_DMA+0x1a4>)
 8004934:	4013      	ands	r3, r2
 8004936:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a42      	ldr	r2, [pc, #264]	@ (8004a4c <HAL_ADC_Start_DMA+0x198>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d002      	beq.n	800494e <HAL_ADC_Start_DMA+0x9a>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	e000      	b.n	8004950 <HAL_ADC_Start_DMA+0x9c>
 800494e:	4b3e      	ldr	r3, [pc, #248]	@ (8004a48 <HAL_ADC_Start_DMA+0x194>)
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	6812      	ldr	r2, [r2, #0]
 8004954:	4293      	cmp	r3, r2
 8004956:	d002      	beq.n	800495e <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d105      	bne.n	800496a <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004962:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800496e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d006      	beq.n	8004984 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800497a:	f023 0206 	bic.w	r2, r3, #6
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	665a      	str	r2, [r3, #100]	@ 0x64
 8004982:	e002      	b.n	800498a <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800498e:	4a33      	ldr	r2, [pc, #204]	@ (8004a5c <HAL_ADC_Start_DMA+0x1a8>)
 8004990:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004996:	4a32      	ldr	r2, [pc, #200]	@ (8004a60 <HAL_ADC_Start_DMA+0x1ac>)
 8004998:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800499e:	4a31      	ldr	r2, [pc, #196]	@ (8004a64 <HAL_ADC_Start_DMA+0x1b0>)
 80049a0:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	221c      	movs	r2, #28
 80049a8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	685a      	ldr	r2, [r3, #4]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f042 0210 	orr.w	r2, r2, #16
 80049c0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a28      	ldr	r2, [pc, #160]	@ (8004a68 <HAL_ADC_Start_DMA+0x1b4>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d10f      	bne.n	80049ec <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80049d6:	005b      	lsls	r3, r3, #1
 80049d8:	4619      	mov	r1, r3
 80049da:	4610      	mov	r0, r2
 80049dc:	f7ff f9bc 	bl	8003d58 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7ff f9a7 	bl	8003d38 <LL_ADC_EnableDMAReq>
 80049ea:	e007      	b.n	80049fc <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049f4:	4619      	mov	r1, r3
 80049f6:	4610      	mov	r0, r2
 80049f8:	f7ff f98b 	bl	8003d12 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	3340      	adds	r3, #64	@ 0x40
 8004a06:	4619      	mov	r1, r3
 8004a08:	68ba      	ldr	r2, [r7, #8]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f002 f88e 	bl	8006b2c <HAL_DMA_Start_IT>
 8004a10:	4603      	mov	r3, r0
 8004a12:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7ff faed 	bl	8003ff8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004a1e:	e00d      	b.n	8004a3c <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 8004a28:	e008      	b.n	8004a3c <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8004a36:	e001      	b.n	8004a3c <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004a38:	2302      	movs	r3, #2
 8004a3a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004a3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3718      	adds	r7, #24
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	40022000 	.word	0x40022000
 8004a4c:	40022100 	.word	0x40022100
 8004a50:	40022300 	.word	0x40022300
 8004a54:	58026300 	.word	0x58026300
 8004a58:	fffff0fe 	.word	0xfffff0fe
 8004a5c:	08005ce3 	.word	0x08005ce3
 8004a60:	08005dbb 	.word	0x08005dbb
 8004a64:	08005dd7 	.word	0x08005dd7
 8004a68:	58026000 	.word	0x58026000

08004a6c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
	...

08004a88 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b08a      	sub	sp, #40	@ 0x28
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004a90:	2300      	movs	r3, #0
 8004a92:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a87      	ldr	r2, [pc, #540]	@ (8004cc8 <HAL_ADC_IRQHandler+0x240>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d004      	beq.n	8004ab8 <HAL_ADC_IRQHandler+0x30>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a86      	ldr	r2, [pc, #536]	@ (8004ccc <HAL_ADC_IRQHandler+0x244>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d101      	bne.n	8004abc <HAL_ADC_IRQHandler+0x34>
 8004ab8:	4b85      	ldr	r3, [pc, #532]	@ (8004cd0 <HAL_ADC_IRQHandler+0x248>)
 8004aba:	e000      	b.n	8004abe <HAL_ADC_IRQHandler+0x36>
 8004abc:	4b85      	ldr	r3, [pc, #532]	@ (8004cd4 <HAL_ADC_IRQHandler+0x24c>)
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7ff f9e2 	bl	8003e88 <LL_ADC_GetMultimode>
 8004ac4:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	f003 0302 	and.w	r3, r3, #2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d017      	beq.n	8004b00 <HAL_ADC_IRQHandler+0x78>
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d012      	beq.n	8004b00 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ade:	f003 0310 	and.w	r3, r3, #16
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d105      	bne.n	8004af2 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aea:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f001 fac6 	bl	8006084 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2202      	movs	r2, #2
 8004afe:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	f003 0304 	and.w	r3, r3, #4
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d004      	beq.n	8004b14 <HAL_ADC_IRQHandler+0x8c>
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	f003 0304 	and.w	r3, r3, #4
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d10a      	bne.n	8004b2a <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f000 8083 	beq.w	8004c26 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	f003 0308 	and.w	r3, r3, #8
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d07d      	beq.n	8004c26 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b2e:	f003 0310 	and.w	r3, r3, #16
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d105      	bne.n	8004b42 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b3a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7ff f8a4 	bl	8003c94 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d062      	beq.n	8004c18 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a5d      	ldr	r2, [pc, #372]	@ (8004ccc <HAL_ADC_IRQHandler+0x244>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d002      	beq.n	8004b62 <HAL_ADC_IRQHandler+0xda>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	e000      	b.n	8004b64 <HAL_ADC_IRQHandler+0xdc>
 8004b62:	4b59      	ldr	r3, [pc, #356]	@ (8004cc8 <HAL_ADC_IRQHandler+0x240>)
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	6812      	ldr	r2, [r2, #0]
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d008      	beq.n	8004b7e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d005      	beq.n	8004b7e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	2b05      	cmp	r3, #5
 8004b76:	d002      	beq.n	8004b7e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	2b09      	cmp	r3, #9
 8004b7c:	d104      	bne.n	8004b88 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	623b      	str	r3, [r7, #32]
 8004b86:	e00c      	b.n	8004ba2 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a4f      	ldr	r2, [pc, #316]	@ (8004ccc <HAL_ADC_IRQHandler+0x244>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d002      	beq.n	8004b98 <HAL_ADC_IRQHandler+0x110>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	e000      	b.n	8004b9a <HAL_ADC_IRQHandler+0x112>
 8004b98:	4b4b      	ldr	r3, [pc, #300]	@ (8004cc8 <HAL_ADC_IRQHandler+0x240>)
 8004b9a:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004ba2:	6a3b      	ldr	r3, [r7, #32]
 8004ba4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d135      	bne.n	8004c18 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0308 	and.w	r3, r3, #8
 8004bb6:	2b08      	cmp	r3, #8
 8004bb8:	d12e      	bne.n	8004c18 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7ff fa42 	bl	8004048 <LL_ADC_REG_IsConversionOngoing>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d11a      	bne.n	8004c00 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f022 020c 	bic.w	r2, r2, #12
 8004bd8:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bde:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d112      	bne.n	8004c18 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bf6:	f043 0201 	orr.w	r2, r3, #1
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	661a      	str	r2, [r3, #96]	@ 0x60
 8004bfe:	e00b      	b.n	8004c18 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c04:	f043 0210 	orr.w	r2, r3, #16
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c10:	f043 0201 	orr.w	r2, r3, #1
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f7fc fee3 	bl	80019e4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	220c      	movs	r2, #12
 8004c24:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	f003 0320 	and.w	r3, r3, #32
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d004      	beq.n	8004c3a <HAL_ADC_IRQHandler+0x1b2>
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	f003 0320 	and.w	r3, r3, #32
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10b      	bne.n	8004c52 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f000 80a0 	beq.w	8004d86 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 809a 	beq.w	8004d86 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c56:	f003 0310 	and.w	r3, r3, #16
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d105      	bne.n	8004c6a <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c62:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7ff f88c 	bl	8003d8c <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004c74:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7ff f80a 	bl	8003c94 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004c80:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a11      	ldr	r2, [pc, #68]	@ (8004ccc <HAL_ADC_IRQHandler+0x244>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d002      	beq.n	8004c92 <HAL_ADC_IRQHandler+0x20a>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	e000      	b.n	8004c94 <HAL_ADC_IRQHandler+0x20c>
 8004c92:	4b0d      	ldr	r3, [pc, #52]	@ (8004cc8 <HAL_ADC_IRQHandler+0x240>)
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	6812      	ldr	r2, [r2, #0]
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d008      	beq.n	8004cae <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d005      	beq.n	8004cae <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	2b06      	cmp	r3, #6
 8004ca6:	d002      	beq.n	8004cae <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	2b07      	cmp	r3, #7
 8004cac:	d104      	bne.n	8004cb8 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	623b      	str	r3, [r7, #32]
 8004cb6:	e014      	b.n	8004ce2 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a03      	ldr	r2, [pc, #12]	@ (8004ccc <HAL_ADC_IRQHandler+0x244>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d00a      	beq.n	8004cd8 <HAL_ADC_IRQHandler+0x250>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	e008      	b.n	8004cda <HAL_ADC_IRQHandler+0x252>
 8004cc8:	40022000 	.word	0x40022000
 8004ccc:	40022100 	.word	0x40022100
 8004cd0:	40022300 	.word	0x40022300
 8004cd4:	58026300 	.word	0x58026300
 8004cd8:	4b84      	ldr	r3, [pc, #528]	@ (8004eec <HAL_ADC_IRQHandler+0x464>)
 8004cda:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d047      	beq.n	8004d78 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004ce8:	6a3b      	ldr	r3, [r7, #32]
 8004cea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d007      	beq.n	8004d02 <HAL_ADC_IRQHandler+0x27a>
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d03f      	beq.n	8004d78 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004cf8:	6a3b      	ldr	r3, [r7, #32]
 8004cfa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d13a      	bne.n	8004d78 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d0c:	2b40      	cmp	r3, #64	@ 0x40
 8004d0e:	d133      	bne.n	8004d78 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004d10:	6a3b      	ldr	r3, [r7, #32]
 8004d12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d12e      	bne.n	8004d78 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7ff f9ba 	bl	8004098 <LL_ADC_INJ_IsConversionOngoing>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d11a      	bne.n	8004d60 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	685a      	ldr	r2, [r3, #4]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004d38:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d3e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d112      	bne.n	8004d78 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d56:	f043 0201 	orr.w	r2, r3, #1
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	661a      	str	r2, [r3, #96]	@ 0x60
 8004d5e:	e00b      	b.n	8004d78 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d64:	f043 0210 	orr.w	r2, r3, #16
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d70:	f043 0201 	orr.w	r2, r3, #1
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f001 f95b 	bl	8006034 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2260      	movs	r2, #96	@ 0x60
 8004d84:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d011      	beq.n	8004db4 <HAL_ADC_IRQHandler+0x32c>
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00c      	beq.n	8004db4 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d9e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f8b2 	bl	8004f10 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2280      	movs	r2, #128	@ 0x80
 8004db2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d012      	beq.n	8004de4 <HAL_ADC_IRQHandler+0x35c>
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00d      	beq.n	8004de4 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dcc:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f001 f941 	bl	800605c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004de2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d012      	beq.n	8004e14 <HAL_ADC_IRQHandler+0x38c>
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00d      	beq.n	8004e14 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dfc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f001 f933 	bl	8006070 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e12:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	f003 0310 	and.w	r3, r3, #16
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d043      	beq.n	8004ea6 <HAL_ADC_IRQHandler+0x41e>
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	f003 0310 	and.w	r3, r3, #16
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d03e      	beq.n	8004ea6 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d102      	bne.n	8004e36 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8004e30:	2301      	movs	r3, #1
 8004e32:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e34:	e021      	b.n	8004e7a <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d015      	beq.n	8004e68 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a2a      	ldr	r2, [pc, #168]	@ (8004eec <HAL_ADC_IRQHandler+0x464>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d004      	beq.n	8004e50 <HAL_ADC_IRQHandler+0x3c8>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a29      	ldr	r2, [pc, #164]	@ (8004ef0 <HAL_ADC_IRQHandler+0x468>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d101      	bne.n	8004e54 <HAL_ADC_IRQHandler+0x3cc>
 8004e50:	4b28      	ldr	r3, [pc, #160]	@ (8004ef4 <HAL_ADC_IRQHandler+0x46c>)
 8004e52:	e000      	b.n	8004e56 <HAL_ADC_IRQHandler+0x3ce>
 8004e54:	4b28      	ldr	r3, [pc, #160]	@ (8004ef8 <HAL_ADC_IRQHandler+0x470>)
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7ff f824 	bl	8003ea4 <LL_ADC_GetMultiDMATransfer>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00b      	beq.n	8004e7a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8004e62:	2301      	movs	r3, #1
 8004e64:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e66:	e008      	b.n	8004e7a <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	f003 0303 	and.w	r3, r3, #3
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d001      	beq.n	8004e7a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8004e76:	2301      	movs	r3, #1
 8004e78:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d10e      	bne.n	8004e9e <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e84:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e90:	f043 0202 	orr.w	r2, r3, #2
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 f843 	bl	8004f24 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2210      	movs	r2, #16
 8004ea4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d018      	beq.n	8004ee2 <HAL_ADC_IRQHandler+0x45a>
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d013      	beq.n	8004ee2 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ebe:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004eca:	f043 0208 	orr.w	r2, r3, #8
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004eda:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f001 f8b3 	bl	8006048 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004ee2:	bf00      	nop
 8004ee4:	3728      	adds	r7, #40	@ 0x28
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	40022000 	.word	0x40022000
 8004ef0:	40022100 	.word	0x40022100
 8004ef4:	40022300 	.word	0x40022300
 8004ef8:	58026300 	.word	0x58026300

08004efc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004f04:	bf00      	nop
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004f38:	b590      	push	{r4, r7, lr}
 8004f3a:	b0b9      	sub	sp, #228	@ 0xe4
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f42:	2300      	movs	r3, #0
 8004f44:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f52:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	4aab      	ldr	r2, [pc, #684]	@ (8005208 <HAL_ADC_ConfigChannel+0x2d0>)
 8004f5a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d102      	bne.n	8004f6c <HAL_ADC_ConfigChannel+0x34>
 8004f66:	2302      	movs	r3, #2
 8004f68:	f000 bcfe 	b.w	8005968 <HAL_ADC_ConfigChannel+0xa30>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f7ff f865 	bl	8004048 <LL_ADC_REG_IsConversionOngoing>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f040 84e2 	bne.w	800594a <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	db38      	blt.n	8005000 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a9e      	ldr	r2, [pc, #632]	@ (800520c <HAL_ADC_ConfigChannel+0x2d4>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d033      	beq.n	8005000 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d108      	bne.n	8004fb6 <HAL_ADC_ConfigChannel+0x7e>
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	0e9b      	lsrs	r3, r3, #26
 8004faa:	f003 031f 	and.w	r3, r3, #31
 8004fae:	2201      	movs	r2, #1
 8004fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb4:	e01d      	b.n	8004ff2 <HAL_ADC_ConfigChannel+0xba>
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fbe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004fc2:	fa93 f3a3 	rbit	r3, r3
 8004fc6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004fca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004fce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004fd2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8004fda:	2320      	movs	r3, #32
 8004fdc:	e004      	b.n	8004fe8 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8004fde:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004fe2:	fab3 f383 	clz	r3, r3
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	f003 031f 	and.w	r3, r3, #31
 8004fec:	2201      	movs	r2, #1
 8004fee:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	6812      	ldr	r2, [r2, #0]
 8004ff6:	69d1      	ldr	r1, [r2, #28]
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	6812      	ldr	r2, [r2, #0]
 8004ffc:	430b      	orrs	r3, r1
 8004ffe:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6818      	ldr	r0, [r3, #0]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	6859      	ldr	r1, [r3, #4]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	461a      	mov	r2, r3
 800500e:	f7fe fe54 	bl	8003cba <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4618      	mov	r0, r3
 8005018:	f7ff f816 	bl	8004048 <LL_ADC_REG_IsConversionOngoing>
 800501c:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4618      	mov	r0, r3
 8005026:	f7ff f837 	bl	8004098 <LL_ADC_INJ_IsConversionOngoing>
 800502a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800502e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005032:	2b00      	cmp	r3, #0
 8005034:	f040 8270 	bne.w	8005518 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005038:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800503c:	2b00      	cmp	r3, #0
 800503e:	f040 826b 	bne.w	8005518 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6818      	ldr	r0, [r3, #0]
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	6819      	ldr	r1, [r3, #0]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	461a      	mov	r2, r3
 8005050:	f7fe feaf 	bl	8003db2 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a6c      	ldr	r2, [pc, #432]	@ (800520c <HAL_ADC_ConfigChannel+0x2d4>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d10d      	bne.n	800507a <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	695a      	ldr	r2, [r3, #20]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	08db      	lsrs	r3, r3, #3
 800506a:	f003 0303 	and.w	r3, r3, #3
 800506e:	005b      	lsls	r3, r3, #1
 8005070:	fa02 f303 	lsl.w	r3, r2, r3
 8005074:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005078:	e032      	b.n	80050e0 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800507a:	4b65      	ldr	r3, [pc, #404]	@ (8005210 <HAL_ADC_ConfigChannel+0x2d8>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005082:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005086:	d10b      	bne.n	80050a0 <HAL_ADC_ConfigChannel+0x168>
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	695a      	ldr	r2, [r3, #20]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	089b      	lsrs	r3, r3, #2
 8005094:	f003 0307 	and.w	r3, r3, #7
 8005098:	005b      	lsls	r3, r3, #1
 800509a:	fa02 f303 	lsl.w	r3, r2, r3
 800509e:	e01d      	b.n	80050dc <HAL_ADC_ConfigChannel+0x1a4>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	f003 0310 	and.w	r3, r3, #16
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d10b      	bne.n	80050c6 <HAL_ADC_ConfigChannel+0x18e>
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	695a      	ldr	r2, [r3, #20]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	089b      	lsrs	r3, r3, #2
 80050ba:	f003 0307 	and.w	r3, r3, #7
 80050be:	005b      	lsls	r3, r3, #1
 80050c0:	fa02 f303 	lsl.w	r3, r2, r3
 80050c4:	e00a      	b.n	80050dc <HAL_ADC_ConfigChannel+0x1a4>
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	695a      	ldr	r2, [r3, #20]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	089b      	lsrs	r3, r3, #2
 80050d2:	f003 0304 	and.w	r3, r3, #4
 80050d6:	005b      	lsls	r3, r3, #1
 80050d8:	fa02 f303 	lsl.w	r3, r2, r3
 80050dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	2b04      	cmp	r3, #4
 80050e6:	d048      	beq.n	800517a <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6818      	ldr	r0, [r3, #0]
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	6919      	ldr	r1, [r3, #16]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80050f8:	f7fe fcda 	bl	8003ab0 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a42      	ldr	r2, [pc, #264]	@ (800520c <HAL_ADC_ConfigChannel+0x2d4>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d119      	bne.n	800513a <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6818      	ldr	r0, [r3, #0]
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	6919      	ldr	r1, [r3, #16]
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	69db      	ldr	r3, [r3, #28]
 8005112:	461a      	mov	r2, r3
 8005114:	f7fe fd72 	bl	8003bfc <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6818      	ldr	r0, [r3, #0]
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	6919      	ldr	r1, [r3, #16]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d102      	bne.n	8005130 <HAL_ADC_ConfigChannel+0x1f8>
 800512a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800512e:	e000      	b.n	8005132 <HAL_ADC_ConfigChannel+0x1fa>
 8005130:	2300      	movs	r3, #0
 8005132:	461a      	mov	r2, r3
 8005134:	f7fe fd40 	bl	8003bb8 <LL_ADC_SetOffsetSaturation>
 8005138:	e1ee      	b.n	8005518 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6818      	ldr	r0, [r3, #0]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	6919      	ldr	r1, [r3, #16]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005148:	2b01      	cmp	r3, #1
 800514a:	d102      	bne.n	8005152 <HAL_ADC_ConfigChannel+0x21a>
 800514c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005150:	e000      	b.n	8005154 <HAL_ADC_ConfigChannel+0x21c>
 8005152:	2300      	movs	r3, #0
 8005154:	461a      	mov	r2, r3
 8005156:	f7fe fd0d 	bl	8003b74 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6818      	ldr	r0, [r3, #0]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	6919      	ldr	r1, [r3, #16]
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	7e1b      	ldrb	r3, [r3, #24]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d102      	bne.n	8005170 <HAL_ADC_ConfigChannel+0x238>
 800516a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800516e:	e000      	b.n	8005172 <HAL_ADC_ConfigChannel+0x23a>
 8005170:	2300      	movs	r3, #0
 8005172:	461a      	mov	r2, r3
 8005174:	f7fe fce4 	bl	8003b40 <LL_ADC_SetDataRightShift>
 8005178:	e1ce      	b.n	8005518 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a23      	ldr	r2, [pc, #140]	@ (800520c <HAL_ADC_ConfigChannel+0x2d4>)
 8005180:	4293      	cmp	r3, r2
 8005182:	f040 8181 	bne.w	8005488 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2100      	movs	r1, #0
 800518c:	4618      	mov	r0, r3
 800518e:	f7fe fcc1 	bl	8003b14 <LL_ADC_GetOffsetChannel>
 8005192:	4603      	mov	r3, r0
 8005194:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005198:	2b00      	cmp	r3, #0
 800519a:	d10a      	bne.n	80051b2 <HAL_ADC_ConfigChannel+0x27a>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2100      	movs	r1, #0
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7fe fcb6 	bl	8003b14 <LL_ADC_GetOffsetChannel>
 80051a8:	4603      	mov	r3, r0
 80051aa:	0e9b      	lsrs	r3, r3, #26
 80051ac:	f003 021f 	and.w	r2, r3, #31
 80051b0:	e01e      	b.n	80051f0 <HAL_ADC_ConfigChannel+0x2b8>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2100      	movs	r1, #0
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7fe fcab 	bl	8003b14 <LL_ADC_GetOffsetChannel>
 80051be:	4603      	mov	r3, r0
 80051c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80051c8:	fa93 f3a3 	rbit	r3, r3
 80051cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 80051d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80051d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  if (value == 0U)
 80051d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d101      	bne.n	80051e4 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 80051e0:	2320      	movs	r3, #32
 80051e2:	e004      	b.n	80051ee <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 80051e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80051e8:	fab3 f383 	clz	r3, r3
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	461a      	mov	r2, r3
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d10b      	bne.n	8005214 <HAL_ADC_ConfigChannel+0x2dc>
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	0e9b      	lsrs	r3, r3, #26
 8005202:	f003 031f 	and.w	r3, r3, #31
 8005206:	e01e      	b.n	8005246 <HAL_ADC_ConfigChannel+0x30e>
 8005208:	47ff0000 	.word	0x47ff0000
 800520c:	58026000 	.word	0x58026000
 8005210:	5c001000 	.word	0x5c001000
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800521c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005220:	fa93 f3a3 	rbit	r3, r3
 8005224:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8005228:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800522c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8005230:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8005238:	2320      	movs	r3, #32
 800523a:	e004      	b.n	8005246 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 800523c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005240:	fab3 f383 	clz	r3, r3
 8005244:	b2db      	uxtb	r3, r3
 8005246:	429a      	cmp	r2, r3
 8005248:	d106      	bne.n	8005258 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2200      	movs	r2, #0
 8005250:	2100      	movs	r1, #0
 8005252:	4618      	mov	r0, r3
 8005254:	f7fe fcf4 	bl	8003c40 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2101      	movs	r1, #1
 800525e:	4618      	mov	r0, r3
 8005260:	f7fe fc58 	bl	8003b14 <LL_ADC_GetOffsetChannel>
 8005264:	4603      	mov	r3, r0
 8005266:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800526a:	2b00      	cmp	r3, #0
 800526c:	d10a      	bne.n	8005284 <HAL_ADC_ConfigChannel+0x34c>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2101      	movs	r1, #1
 8005274:	4618      	mov	r0, r3
 8005276:	f7fe fc4d 	bl	8003b14 <LL_ADC_GetOffsetChannel>
 800527a:	4603      	mov	r3, r0
 800527c:	0e9b      	lsrs	r3, r3, #26
 800527e:	f003 021f 	and.w	r2, r3, #31
 8005282:	e01e      	b.n	80052c2 <HAL_ADC_ConfigChannel+0x38a>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2101      	movs	r1, #1
 800528a:	4618      	mov	r0, r3
 800528c:	f7fe fc42 	bl	8003b14 <LL_ADC_GetOffsetChannel>
 8005290:	4603      	mov	r3, r0
 8005292:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005296:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800529a:	fa93 f3a3 	rbit	r3, r3
 800529e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80052a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80052a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80052aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 80052b2:	2320      	movs	r3, #32
 80052b4:	e004      	b.n	80052c0 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 80052b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80052ba:	fab3 f383 	clz	r3, r3
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	461a      	mov	r2, r3
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d105      	bne.n	80052da <HAL_ADC_ConfigChannel+0x3a2>
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	0e9b      	lsrs	r3, r3, #26
 80052d4:	f003 031f 	and.w	r3, r3, #31
 80052d8:	e018      	b.n	800530c <HAL_ADC_ConfigChannel+0x3d4>
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80052e6:	fa93 f3a3 	rbit	r3, r3
 80052ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80052ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80052f2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80052f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d101      	bne.n	8005302 <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 80052fe:	2320      	movs	r3, #32
 8005300:	e004      	b.n	800530c <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8005302:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005306:	fab3 f383 	clz	r3, r3
 800530a:	b2db      	uxtb	r3, r3
 800530c:	429a      	cmp	r2, r3
 800530e:	d106      	bne.n	800531e <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2200      	movs	r2, #0
 8005316:	2101      	movs	r1, #1
 8005318:	4618      	mov	r0, r3
 800531a:	f7fe fc91 	bl	8003c40 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2102      	movs	r1, #2
 8005324:	4618      	mov	r0, r3
 8005326:	f7fe fbf5 	bl	8003b14 <LL_ADC_GetOffsetChannel>
 800532a:	4603      	mov	r3, r0
 800532c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005330:	2b00      	cmp	r3, #0
 8005332:	d10a      	bne.n	800534a <HAL_ADC_ConfigChannel+0x412>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2102      	movs	r1, #2
 800533a:	4618      	mov	r0, r3
 800533c:	f7fe fbea 	bl	8003b14 <LL_ADC_GetOffsetChannel>
 8005340:	4603      	mov	r3, r0
 8005342:	0e9b      	lsrs	r3, r3, #26
 8005344:	f003 021f 	and.w	r2, r3, #31
 8005348:	e01e      	b.n	8005388 <HAL_ADC_ConfigChannel+0x450>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2102      	movs	r1, #2
 8005350:	4618      	mov	r0, r3
 8005352:	f7fe fbdf 	bl	8003b14 <LL_ADC_GetOffsetChannel>
 8005356:	4603      	mov	r3, r0
 8005358:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800535c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005360:	fa93 f3a3 	rbit	r3, r3
 8005364:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8005368:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800536c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8005370:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005374:	2b00      	cmp	r3, #0
 8005376:	d101      	bne.n	800537c <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8005378:	2320      	movs	r3, #32
 800537a:	e004      	b.n	8005386 <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 800537c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005380:	fab3 f383 	clz	r3, r3
 8005384:	b2db      	uxtb	r3, r3
 8005386:	461a      	mov	r2, r3
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005390:	2b00      	cmp	r3, #0
 8005392:	d105      	bne.n	80053a0 <HAL_ADC_ConfigChannel+0x468>
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	0e9b      	lsrs	r3, r3, #26
 800539a:	f003 031f 	and.w	r3, r3, #31
 800539e:	e014      	b.n	80053ca <HAL_ADC_ConfigChannel+0x492>
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80053a8:	fa93 f3a3 	rbit	r3, r3
 80053ac:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80053ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80053b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d101      	bne.n	80053c0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80053bc:	2320      	movs	r3, #32
 80053be:	e004      	b.n	80053ca <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80053c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80053c4:	fab3 f383 	clz	r3, r3
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d106      	bne.n	80053dc <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2200      	movs	r2, #0
 80053d4:	2102      	movs	r1, #2
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7fe fc32 	bl	8003c40 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2103      	movs	r1, #3
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7fe fb96 	bl	8003b14 <LL_ADC_GetOffsetChannel>
 80053e8:	4603      	mov	r3, r0
 80053ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10a      	bne.n	8005408 <HAL_ADC_ConfigChannel+0x4d0>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2103      	movs	r1, #3
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7fe fb8b 	bl	8003b14 <LL_ADC_GetOffsetChannel>
 80053fe:	4603      	mov	r3, r0
 8005400:	0e9b      	lsrs	r3, r3, #26
 8005402:	f003 021f 	and.w	r2, r3, #31
 8005406:	e017      	b.n	8005438 <HAL_ADC_ConfigChannel+0x500>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2103      	movs	r1, #3
 800540e:	4618      	mov	r0, r3
 8005410:	f7fe fb80 	bl	8003b14 <LL_ADC_GetOffsetChannel>
 8005414:	4603      	mov	r3, r0
 8005416:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005418:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800541a:	fa93 f3a3 	rbit	r3, r3
 800541e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8005420:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005422:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8005424:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005426:	2b00      	cmp	r3, #0
 8005428:	d101      	bne.n	800542e <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 800542a:	2320      	movs	r3, #32
 800542c:	e003      	b.n	8005436 <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 800542e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005430:	fab3 f383 	clz	r3, r3
 8005434:	b2db      	uxtb	r3, r3
 8005436:	461a      	mov	r2, r3
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005440:	2b00      	cmp	r3, #0
 8005442:	d105      	bne.n	8005450 <HAL_ADC_ConfigChannel+0x518>
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	0e9b      	lsrs	r3, r3, #26
 800544a:	f003 031f 	and.w	r3, r3, #31
 800544e:	e011      	b.n	8005474 <HAL_ADC_ConfigChannel+0x53c>
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005456:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005458:	fa93 f3a3 	rbit	r3, r3
 800545c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800545e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005460:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8005462:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005464:	2b00      	cmp	r3, #0
 8005466:	d101      	bne.n	800546c <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8005468:	2320      	movs	r3, #32
 800546a:	e003      	b.n	8005474 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 800546c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800546e:	fab3 f383 	clz	r3, r3
 8005472:	b2db      	uxtb	r3, r3
 8005474:	429a      	cmp	r2, r3
 8005476:	d14f      	bne.n	8005518 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2200      	movs	r2, #0
 800547e:	2103      	movs	r1, #3
 8005480:	4618      	mov	r0, r3
 8005482:	f7fe fbdd 	bl	8003c40 <LL_ADC_SetOffsetState>
 8005486:	e047      	b.n	8005518 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800548e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	069b      	lsls	r3, r3, #26
 8005498:	429a      	cmp	r2, r3
 800549a:	d107      	bne.n	80054ac <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80054aa:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	069b      	lsls	r3, r3, #26
 80054bc:	429a      	cmp	r2, r3
 80054be:	d107      	bne.n	80054d0 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80054ce:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	069b      	lsls	r3, r3, #26
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d107      	bne.n	80054f4 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80054f2:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	069b      	lsls	r3, r3, #26
 8005504:	429a      	cmp	r2, r3
 8005506:	d107      	bne.n	8005518 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005516:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4618      	mov	r0, r3
 800551e:	f7fe fd45 	bl	8003fac <LL_ADC_IsEnabled>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	f040 8219 	bne.w	800595c <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6818      	ldr	r0, [r3, #0]
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	6819      	ldr	r1, [r3, #0]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	461a      	mov	r2, r3
 8005538:	f7fe fc66 	bl	8003e08 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	4aa1      	ldr	r2, [pc, #644]	@ (80057c8 <HAL_ADC_ConfigChannel+0x890>)
 8005542:	4293      	cmp	r3, r2
 8005544:	f040 812e 	bne.w	80057a4 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005554:	2b00      	cmp	r3, #0
 8005556:	d10b      	bne.n	8005570 <HAL_ADC_ConfigChannel+0x638>
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	0e9b      	lsrs	r3, r3, #26
 800555e:	3301      	adds	r3, #1
 8005560:	f003 031f 	and.w	r3, r3, #31
 8005564:	2b09      	cmp	r3, #9
 8005566:	bf94      	ite	ls
 8005568:	2301      	movls	r3, #1
 800556a:	2300      	movhi	r3, #0
 800556c:	b2db      	uxtb	r3, r3
 800556e:	e019      	b.n	80055a4 <HAL_ADC_ConfigChannel+0x66c>
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005576:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005578:	fa93 f3a3 	rbit	r3, r3
 800557c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800557e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005580:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8005582:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005584:	2b00      	cmp	r3, #0
 8005586:	d101      	bne.n	800558c <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8005588:	2320      	movs	r3, #32
 800558a:	e003      	b.n	8005594 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 800558c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800558e:	fab3 f383 	clz	r3, r3
 8005592:	b2db      	uxtb	r3, r3
 8005594:	3301      	adds	r3, #1
 8005596:	f003 031f 	and.w	r3, r3, #31
 800559a:	2b09      	cmp	r3, #9
 800559c:	bf94      	ite	ls
 800559e:	2301      	movls	r3, #1
 80055a0:	2300      	movhi	r3, #0
 80055a2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d079      	beq.n	800569c <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d107      	bne.n	80055c4 <HAL_ADC_ConfigChannel+0x68c>
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	0e9b      	lsrs	r3, r3, #26
 80055ba:	3301      	adds	r3, #1
 80055bc:	069b      	lsls	r3, r3, #26
 80055be:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80055c2:	e015      	b.n	80055f0 <HAL_ADC_ConfigChannel+0x6b8>
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055cc:	fa93 f3a3 	rbit	r3, r3
 80055d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80055d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055d4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80055d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d101      	bne.n	80055e0 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 80055dc:	2320      	movs	r3, #32
 80055de:	e003      	b.n	80055e8 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 80055e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055e2:	fab3 f383 	clz	r3, r3
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	3301      	adds	r3, #1
 80055ea:	069b      	lsls	r3, r3, #26
 80055ec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d109      	bne.n	8005610 <HAL_ADC_ConfigChannel+0x6d8>
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	0e9b      	lsrs	r3, r3, #26
 8005602:	3301      	adds	r3, #1
 8005604:	f003 031f 	and.w	r3, r3, #31
 8005608:	2101      	movs	r1, #1
 800560a:	fa01 f303 	lsl.w	r3, r1, r3
 800560e:	e017      	b.n	8005640 <HAL_ADC_ConfigChannel+0x708>
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005616:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005618:	fa93 f3a3 	rbit	r3, r3
 800561c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800561e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005620:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8005622:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005624:	2b00      	cmp	r3, #0
 8005626:	d101      	bne.n	800562c <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8005628:	2320      	movs	r3, #32
 800562a:	e003      	b.n	8005634 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 800562c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800562e:	fab3 f383 	clz	r3, r3
 8005632:	b2db      	uxtb	r3, r3
 8005634:	3301      	adds	r3, #1
 8005636:	f003 031f 	and.w	r3, r3, #31
 800563a:	2101      	movs	r1, #1
 800563c:	fa01 f303 	lsl.w	r3, r1, r3
 8005640:	ea42 0103 	orr.w	r1, r2, r3
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800564c:	2b00      	cmp	r3, #0
 800564e:	d10a      	bne.n	8005666 <HAL_ADC_ConfigChannel+0x72e>
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	0e9b      	lsrs	r3, r3, #26
 8005656:	3301      	adds	r3, #1
 8005658:	f003 021f 	and.w	r2, r3, #31
 800565c:	4613      	mov	r3, r2
 800565e:	005b      	lsls	r3, r3, #1
 8005660:	4413      	add	r3, r2
 8005662:	051b      	lsls	r3, r3, #20
 8005664:	e018      	b.n	8005698 <HAL_ADC_ConfigChannel+0x760>
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800566c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800566e:	fa93 f3a3 	rbit	r3, r3
 8005672:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8005674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005676:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8005678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 800567e:	2320      	movs	r3, #32
 8005680:	e003      	b.n	800568a <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 8005682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005684:	fab3 f383 	clz	r3, r3
 8005688:	b2db      	uxtb	r3, r3
 800568a:	3301      	adds	r3, #1
 800568c:	f003 021f 	and.w	r2, r3, #31
 8005690:	4613      	mov	r3, r2
 8005692:	005b      	lsls	r3, r3, #1
 8005694:	4413      	add	r3, r2
 8005696:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005698:	430b      	orrs	r3, r1
 800569a:	e07e      	b.n	800579a <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d107      	bne.n	80056b8 <HAL_ADC_ConfigChannel+0x780>
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	0e9b      	lsrs	r3, r3, #26
 80056ae:	3301      	adds	r3, #1
 80056b0:	069b      	lsls	r3, r3, #26
 80056b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80056b6:	e015      	b.n	80056e4 <HAL_ADC_ConfigChannel+0x7ac>
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056c0:	fa93 f3a3 	rbit	r3, r3
 80056c4:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80056c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80056ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d101      	bne.n	80056d4 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 80056d0:	2320      	movs	r3, #32
 80056d2:	e003      	b.n	80056dc <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 80056d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056d6:	fab3 f383 	clz	r3, r3
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	3301      	adds	r3, #1
 80056de:	069b      	lsls	r3, r3, #26
 80056e0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d109      	bne.n	8005704 <HAL_ADC_ConfigChannel+0x7cc>
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	0e9b      	lsrs	r3, r3, #26
 80056f6:	3301      	adds	r3, #1
 80056f8:	f003 031f 	and.w	r3, r3, #31
 80056fc:	2101      	movs	r1, #1
 80056fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005702:	e017      	b.n	8005734 <HAL_ADC_ConfigChannel+0x7fc>
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	fa93 f3a3 	rbit	r3, r3
 8005710:	61bb      	str	r3, [r7, #24]
  return result;
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005716:	6a3b      	ldr	r3, [r7, #32]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d101      	bne.n	8005720 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 800571c:	2320      	movs	r3, #32
 800571e:	e003      	b.n	8005728 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8005720:	6a3b      	ldr	r3, [r7, #32]
 8005722:	fab3 f383 	clz	r3, r3
 8005726:	b2db      	uxtb	r3, r3
 8005728:	3301      	adds	r3, #1
 800572a:	f003 031f 	and.w	r3, r3, #31
 800572e:	2101      	movs	r1, #1
 8005730:	fa01 f303 	lsl.w	r3, r1, r3
 8005734:	ea42 0103 	orr.w	r1, r2, r3
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005740:	2b00      	cmp	r3, #0
 8005742:	d10d      	bne.n	8005760 <HAL_ADC_ConfigChannel+0x828>
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	0e9b      	lsrs	r3, r3, #26
 800574a:	3301      	adds	r3, #1
 800574c:	f003 021f 	and.w	r2, r3, #31
 8005750:	4613      	mov	r3, r2
 8005752:	005b      	lsls	r3, r3, #1
 8005754:	4413      	add	r3, r2
 8005756:	3b1e      	subs	r3, #30
 8005758:	051b      	lsls	r3, r3, #20
 800575a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800575e:	e01b      	b.n	8005798 <HAL_ADC_ConfigChannel+0x860>
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	fa93 f3a3 	rbit	r3, r3
 800576c:	60fb      	str	r3, [r7, #12]
  return result;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d101      	bne.n	800577c <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8005778:	2320      	movs	r3, #32
 800577a:	e003      	b.n	8005784 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	fab3 f383 	clz	r3, r3
 8005782:	b2db      	uxtb	r3, r3
 8005784:	3301      	adds	r3, #1
 8005786:	f003 021f 	and.w	r2, r3, #31
 800578a:	4613      	mov	r3, r2
 800578c:	005b      	lsls	r3, r3, #1
 800578e:	4413      	add	r3, r2
 8005790:	3b1e      	subs	r3, #30
 8005792:	051b      	lsls	r3, r3, #20
 8005794:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005798:	430b      	orrs	r3, r1
 800579a:	683a      	ldr	r2, [r7, #0]
 800579c:	6892      	ldr	r2, [r2, #8]
 800579e:	4619      	mov	r1, r3
 80057a0:	f7fe fb07 	bl	8003db2 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f280 80d7 	bge.w	800595c <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a06      	ldr	r2, [pc, #24]	@ (80057cc <HAL_ADC_ConfigChannel+0x894>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d004      	beq.n	80057c2 <HAL_ADC_ConfigChannel+0x88a>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a04      	ldr	r2, [pc, #16]	@ (80057d0 <HAL_ADC_ConfigChannel+0x898>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d10a      	bne.n	80057d8 <HAL_ADC_ConfigChannel+0x8a0>
 80057c2:	4b04      	ldr	r3, [pc, #16]	@ (80057d4 <HAL_ADC_ConfigChannel+0x89c>)
 80057c4:	e009      	b.n	80057da <HAL_ADC_ConfigChannel+0x8a2>
 80057c6:	bf00      	nop
 80057c8:	47ff0000 	.word	0x47ff0000
 80057cc:	40022000 	.word	0x40022000
 80057d0:	40022100 	.word	0x40022100
 80057d4:	40022300 	.word	0x40022300
 80057d8:	4b65      	ldr	r3, [pc, #404]	@ (8005970 <HAL_ADC_ConfigChannel+0xa38>)
 80057da:	4618      	mov	r0, r3
 80057dc:	f7fe f95a 	bl	8003a94 <LL_ADC_GetCommonPathInternalCh>
 80057e0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a62      	ldr	r2, [pc, #392]	@ (8005974 <HAL_ADC_ConfigChannel+0xa3c>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d004      	beq.n	80057f8 <HAL_ADC_ConfigChannel+0x8c0>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a61      	ldr	r2, [pc, #388]	@ (8005978 <HAL_ADC_ConfigChannel+0xa40>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d10e      	bne.n	8005816 <HAL_ADC_ConfigChannel+0x8de>
 80057f8:	485e      	ldr	r0, [pc, #376]	@ (8005974 <HAL_ADC_ConfigChannel+0xa3c>)
 80057fa:	f7fe fbd7 	bl	8003fac <LL_ADC_IsEnabled>
 80057fe:	4604      	mov	r4, r0
 8005800:	485d      	ldr	r0, [pc, #372]	@ (8005978 <HAL_ADC_ConfigChannel+0xa40>)
 8005802:	f7fe fbd3 	bl	8003fac <LL_ADC_IsEnabled>
 8005806:	4603      	mov	r3, r0
 8005808:	4323      	orrs	r3, r4
 800580a:	2b00      	cmp	r3, #0
 800580c:	bf0c      	ite	eq
 800580e:	2301      	moveq	r3, #1
 8005810:	2300      	movne	r3, #0
 8005812:	b2db      	uxtb	r3, r3
 8005814:	e008      	b.n	8005828 <HAL_ADC_ConfigChannel+0x8f0>
 8005816:	4859      	ldr	r0, [pc, #356]	@ (800597c <HAL_ADC_ConfigChannel+0xa44>)
 8005818:	f7fe fbc8 	bl	8003fac <LL_ADC_IsEnabled>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	bf0c      	ite	eq
 8005822:	2301      	moveq	r3, #1
 8005824:	2300      	movne	r3, #0
 8005826:	b2db      	uxtb	r3, r3
 8005828:	2b00      	cmp	r3, #0
 800582a:	f000 8084 	beq.w	8005936 <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a53      	ldr	r2, [pc, #332]	@ (8005980 <HAL_ADC_ConfigChannel+0xa48>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d132      	bne.n	800589e <HAL_ADC_ConfigChannel+0x966>
 8005838:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800583c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d12c      	bne.n	800589e <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a4c      	ldr	r2, [pc, #304]	@ (800597c <HAL_ADC_ConfigChannel+0xa44>)
 800584a:	4293      	cmp	r3, r2
 800584c:	f040 8086 	bne.w	800595c <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a47      	ldr	r2, [pc, #284]	@ (8005974 <HAL_ADC_ConfigChannel+0xa3c>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d004      	beq.n	8005864 <HAL_ADC_ConfigChannel+0x92c>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a46      	ldr	r2, [pc, #280]	@ (8005978 <HAL_ADC_ConfigChannel+0xa40>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d101      	bne.n	8005868 <HAL_ADC_ConfigChannel+0x930>
 8005864:	4a47      	ldr	r2, [pc, #284]	@ (8005984 <HAL_ADC_ConfigChannel+0xa4c>)
 8005866:	e000      	b.n	800586a <HAL_ADC_ConfigChannel+0x932>
 8005868:	4a41      	ldr	r2, [pc, #260]	@ (8005970 <HAL_ADC_ConfigChannel+0xa38>)
 800586a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800586e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005872:	4619      	mov	r1, r3
 8005874:	4610      	mov	r0, r2
 8005876:	f7fe f8fa 	bl	8003a6e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800587a:	4b43      	ldr	r3, [pc, #268]	@ (8005988 <HAL_ADC_ConfigChannel+0xa50>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	099b      	lsrs	r3, r3, #6
 8005880:	4a42      	ldr	r2, [pc, #264]	@ (800598c <HAL_ADC_ConfigChannel+0xa54>)
 8005882:	fba2 2303 	umull	r2, r3, r2, r3
 8005886:	099b      	lsrs	r3, r3, #6
 8005888:	3301      	adds	r3, #1
 800588a:	005b      	lsls	r3, r3, #1
 800588c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800588e:	e002      	b.n	8005896 <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	3b01      	subs	r3, #1
 8005894:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d1f9      	bne.n	8005890 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800589c:	e05e      	b.n	800595c <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a3b      	ldr	r2, [pc, #236]	@ (8005990 <HAL_ADC_ConfigChannel+0xa58>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d120      	bne.n	80058ea <HAL_ADC_ConfigChannel+0x9b2>
 80058a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80058ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d11a      	bne.n	80058ea <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a30      	ldr	r2, [pc, #192]	@ (800597c <HAL_ADC_ConfigChannel+0xa44>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d14e      	bne.n	800595c <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a2c      	ldr	r2, [pc, #176]	@ (8005974 <HAL_ADC_ConfigChannel+0xa3c>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d004      	beq.n	80058d2 <HAL_ADC_ConfigChannel+0x99a>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a2a      	ldr	r2, [pc, #168]	@ (8005978 <HAL_ADC_ConfigChannel+0xa40>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d101      	bne.n	80058d6 <HAL_ADC_ConfigChannel+0x99e>
 80058d2:	4a2c      	ldr	r2, [pc, #176]	@ (8005984 <HAL_ADC_ConfigChannel+0xa4c>)
 80058d4:	e000      	b.n	80058d8 <HAL_ADC_ConfigChannel+0x9a0>
 80058d6:	4a26      	ldr	r2, [pc, #152]	@ (8005970 <HAL_ADC_ConfigChannel+0xa38>)
 80058d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80058dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80058e0:	4619      	mov	r1, r3
 80058e2:	4610      	mov	r0, r2
 80058e4:	f7fe f8c3 	bl	8003a6e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80058e8:	e038      	b.n	800595c <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a29      	ldr	r2, [pc, #164]	@ (8005994 <HAL_ADC_ConfigChannel+0xa5c>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d133      	bne.n	800595c <HAL_ADC_ConfigChannel+0xa24>
 80058f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80058f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d12d      	bne.n	800595c <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a1d      	ldr	r2, [pc, #116]	@ (800597c <HAL_ADC_ConfigChannel+0xa44>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d128      	bne.n	800595c <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a19      	ldr	r2, [pc, #100]	@ (8005974 <HAL_ADC_ConfigChannel+0xa3c>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d004      	beq.n	800591e <HAL_ADC_ConfigChannel+0x9e6>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a17      	ldr	r2, [pc, #92]	@ (8005978 <HAL_ADC_ConfigChannel+0xa40>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d101      	bne.n	8005922 <HAL_ADC_ConfigChannel+0x9ea>
 800591e:	4a19      	ldr	r2, [pc, #100]	@ (8005984 <HAL_ADC_ConfigChannel+0xa4c>)
 8005920:	e000      	b.n	8005924 <HAL_ADC_ConfigChannel+0x9ec>
 8005922:	4a13      	ldr	r2, [pc, #76]	@ (8005970 <HAL_ADC_ConfigChannel+0xa38>)
 8005924:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005928:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800592c:	4619      	mov	r1, r3
 800592e:	4610      	mov	r0, r2
 8005930:	f7fe f89d 	bl	8003a6e <LL_ADC_SetCommonPathInternalCh>
 8005934:	e012      	b.n	800595c <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800593a:	f043 0220 	orr.w	r2, r3, #32
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8005948:	e008      	b.n	800595c <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800594e:	f043 0220 	orr.w	r2, r3, #32
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005964:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8005968:	4618      	mov	r0, r3
 800596a:	37e4      	adds	r7, #228	@ 0xe4
 800596c:	46bd      	mov	sp, r7
 800596e:	bd90      	pop	{r4, r7, pc}
 8005970:	58026300 	.word	0x58026300
 8005974:	40022000 	.word	0x40022000
 8005978:	40022100 	.word	0x40022100
 800597c:	58026000 	.word	0x58026000
 8005980:	c7520000 	.word	0xc7520000
 8005984:	40022300 	.word	0x40022300
 8005988:	24000024 	.word	0x24000024
 800598c:	053e2d63 	.word	0x053e2d63
 8005990:	c3210000 	.word	0xc3210000
 8005994:	cb840000 	.word	0xcb840000

08005998 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b088      	sub	sp, #32
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80059a2:	2300      	movs	r3, #0
 80059a4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7fe fb4a 	bl	8004048 <LL_ADC_REG_IsConversionOngoing>
 80059b4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7fe fb6c 	bl	8004098 <LL_ADC_INJ_IsConversionOngoing>
 80059c0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d103      	bne.n	80059d0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	f000 8098 	beq.w	8005b00 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d02a      	beq.n	8005a34 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	7e5b      	ldrb	r3, [r3, #25]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d126      	bne.n	8005a34 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	7e1b      	ldrb	r3, [r3, #24]
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d122      	bne.n	8005a34 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80059ee:	2301      	movs	r3, #1
 80059f0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80059f2:	e014      	b.n	8005a1e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	4a45      	ldr	r2, [pc, #276]	@ (8005b0c <ADC_ConversionStop+0x174>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d90d      	bls.n	8005a18 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a00:	f043 0210 	orr.w	r2, r3, #16
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a0c:	f043 0201 	orr.w	r2, r3, #1
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e074      	b.n	8005b02 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a28:	2b40      	cmp	r3, #64	@ 0x40
 8005a2a:	d1e3      	bne.n	80059f4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2240      	movs	r2, #64	@ 0x40
 8005a32:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d014      	beq.n	8005a64 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7fe fb02 	bl	8004048 <LL_ADC_REG_IsConversionOngoing>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00c      	beq.n	8005a64 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f7fe fabf 	bl	8003fd2 <LL_ADC_IsDisableOngoing>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d104      	bne.n	8005a64 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7fe fade 	bl	8004020 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d014      	beq.n	8005a94 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7fe fb12 	bl	8004098 <LL_ADC_INJ_IsConversionOngoing>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00c      	beq.n	8005a94 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7fe faa7 	bl	8003fd2 <LL_ADC_IsDisableOngoing>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d104      	bne.n	8005a94 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f7fe faee 	bl	8004070 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d005      	beq.n	8005aa6 <ADC_ConversionStop+0x10e>
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	2b03      	cmp	r3, #3
 8005a9e:	d105      	bne.n	8005aac <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8005aa0:	230c      	movs	r3, #12
 8005aa2:	617b      	str	r3, [r7, #20]
        break;
 8005aa4:	e005      	b.n	8005ab2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8005aa6:	2308      	movs	r3, #8
 8005aa8:	617b      	str	r3, [r7, #20]
        break;
 8005aaa:	e002      	b.n	8005ab2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005aac:	2304      	movs	r3, #4
 8005aae:	617b      	str	r3, [r7, #20]
        break;
 8005ab0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8005ab2:	f7fd ff99 	bl	80039e8 <HAL_GetTick>
 8005ab6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005ab8:	e01b      	b.n	8005af2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005aba:	f7fd ff95 	bl	80039e8 <HAL_GetTick>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	1ad3      	subs	r3, r2, r3
 8005ac4:	2b05      	cmp	r3, #5
 8005ac6:	d914      	bls.n	8005af2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	689a      	ldr	r2, [r3, #8]
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00d      	beq.n	8005af2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ada:	f043 0210 	orr.w	r2, r3, #16
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ae6:	f043 0201 	orr.w	r2, r3, #1
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e007      	b.n	8005b02 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	689a      	ldr	r2, [r3, #8]
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	4013      	ands	r3, r2
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1dc      	bne.n	8005aba <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3720      	adds	r7, #32
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	000cdbff 	.word	0x000cdbff

08005b10 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f7fe fa45 	bl	8003fac <LL_ADC_IsEnabled>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d16e      	bne.n	8005c06 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	689a      	ldr	r2, [r3, #8]
 8005b2e:	4b38      	ldr	r3, [pc, #224]	@ (8005c10 <ADC_Enable+0x100>)
 8005b30:	4013      	ands	r3, r2
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00d      	beq.n	8005b52 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b3a:	f043 0210 	orr.w	r2, r3, #16
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b46:	f043 0201 	orr.w	r2, r3, #1
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e05a      	b.n	8005c08 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7fe fa00 	bl	8003f5c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005b5c:	f7fd ff44 	bl	80039e8 <HAL_GetTick>
 8005b60:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a2b      	ldr	r2, [pc, #172]	@ (8005c14 <ADC_Enable+0x104>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d004      	beq.n	8005b76 <ADC_Enable+0x66>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a29      	ldr	r2, [pc, #164]	@ (8005c18 <ADC_Enable+0x108>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d101      	bne.n	8005b7a <ADC_Enable+0x6a>
 8005b76:	4b29      	ldr	r3, [pc, #164]	@ (8005c1c <ADC_Enable+0x10c>)
 8005b78:	e000      	b.n	8005b7c <ADC_Enable+0x6c>
 8005b7a:	4b29      	ldr	r3, [pc, #164]	@ (8005c20 <ADC_Enable+0x110>)
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7fe f983 	bl	8003e88 <LL_ADC_GetMultimode>
 8005b82:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a23      	ldr	r2, [pc, #140]	@ (8005c18 <ADC_Enable+0x108>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d002      	beq.n	8005b94 <ADC_Enable+0x84>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	e000      	b.n	8005b96 <ADC_Enable+0x86>
 8005b94:	4b1f      	ldr	r3, [pc, #124]	@ (8005c14 <ADC_Enable+0x104>)
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	6812      	ldr	r2, [r2, #0]
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d02c      	beq.n	8005bf8 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d130      	bne.n	8005c06 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005ba4:	e028      	b.n	8005bf8 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7fe f9fe 	bl	8003fac <LL_ADC_IsEnabled>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d104      	bne.n	8005bc0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7fe f9ce 	bl	8003f5c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005bc0:	f7fd ff12 	bl	80039e8 <HAL_GetTick>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d914      	bls.n	8005bf8 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0301 	and.w	r3, r3, #1
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d00d      	beq.n	8005bf8 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005be0:	f043 0210 	orr.w	r2, r3, #16
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bec:	f043 0201 	orr.w	r2, r3, #1
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e007      	b.n	8005c08 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0301 	and.w	r3, r3, #1
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d1cf      	bne.n	8005ba6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	8000003f 	.word	0x8000003f
 8005c14:	40022000 	.word	0x40022000
 8005c18:	40022100 	.word	0x40022100
 8005c1c:	40022300 	.word	0x40022300
 8005c20:	58026300 	.word	0x58026300

08005c24 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7fe f9ce 	bl	8003fd2 <LL_ADC_IsDisableOngoing>
 8005c36:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f7fe f9b5 	bl	8003fac <LL_ADC_IsEnabled>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d047      	beq.n	8005cd8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d144      	bne.n	8005cd8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	f003 030d 	and.w	r3, r3, #13
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d10c      	bne.n	8005c76 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7fe f98f 	bl	8003f84 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2203      	movs	r2, #3
 8005c6c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005c6e:	f7fd febb 	bl	80039e8 <HAL_GetTick>
 8005c72:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005c74:	e029      	b.n	8005cca <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c7a:	f043 0210 	orr.w	r2, r3, #16
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c86:	f043 0201 	orr.w	r2, r3, #1
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e023      	b.n	8005cda <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005c92:	f7fd fea9 	bl	80039e8 <HAL_GetTick>
 8005c96:	4602      	mov	r2, r0
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d914      	bls.n	8005cca <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	f003 0301 	and.w	r3, r3, #1
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00d      	beq.n	8005cca <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cb2:	f043 0210 	orr.w	r2, r3, #16
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cbe:	f043 0201 	orr.w	r2, r3, #1
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e007      	b.n	8005cda <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f003 0301 	and.w	r3, r3, #1
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1dc      	bne.n	8005c92 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3710      	adds	r7, #16
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b084      	sub	sp, #16
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cee:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cf4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d14b      	bne.n	8005d94 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d00:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 0308 	and.w	r3, r3, #8
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d021      	beq.n	8005d5a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7fd ffba 	bl	8003c94 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d032      	beq.n	8005d8c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d12b      	bne.n	8005d8c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d38:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d11f      	bne.n	8005d8c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d50:	f043 0201 	orr.w	r2, r3, #1
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	661a      	str	r2, [r3, #96]	@ 0x60
 8005d58:	e018      	b.n	8005d8c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	f003 0303 	and.w	r3, r3, #3
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d111      	bne.n	8005d8c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d6c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d105      	bne.n	8005d8c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d84:	f043 0201 	orr.w	r2, r3, #1
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005d8c:	68f8      	ldr	r0, [r7, #12]
 8005d8e:	f7fb fe29 	bl	80019e4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005d92:	e00e      	b.n	8005db2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d98:	f003 0310 	and.w	r3, r3, #16
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d003      	beq.n	8005da8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	f7ff f8bf 	bl	8004f24 <HAL_ADC_ErrorCallback>
}
 8005da6:	e004      	b.n	8005db2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	4798      	blx	r3
}
 8005db2:	bf00      	nop
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}

08005dba <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005dba:	b580      	push	{r7, lr}
 8005dbc:	b084      	sub	sp, #16
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dc6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005dc8:	68f8      	ldr	r0, [r7, #12]
 8005dca:	f7ff f897 	bl	8004efc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005dce:	bf00      	nop
 8005dd0:	3710      	adds	r7, #16
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}

08005dd6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b084      	sub	sp, #16
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005de2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005de8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005df4:	f043 0204 	orr.w	r2, r3, #4
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005dfc:	68f8      	ldr	r0, [r7, #12]
 8005dfe:	f7ff f891 	bl	8004f24 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005e02:	bf00      	nop
 8005e04:	3710      	adds	r7, #16
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
	...

08005e0c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a6c      	ldr	r2, [pc, #432]	@ (8005fcc <ADC_ConfigureBoostMode+0x1c0>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d004      	beq.n	8005e28 <ADC_ConfigureBoostMode+0x1c>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a6b      	ldr	r2, [pc, #428]	@ (8005fd0 <ADC_ConfigureBoostMode+0x1c4>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d109      	bne.n	8005e3c <ADC_ConfigureBoostMode+0x30>
 8005e28:	4b6a      	ldr	r3, [pc, #424]	@ (8005fd4 <ADC_ConfigureBoostMode+0x1c8>)
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	bf14      	ite	ne
 8005e34:	2301      	movne	r3, #1
 8005e36:	2300      	moveq	r3, #0
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	e008      	b.n	8005e4e <ADC_ConfigureBoostMode+0x42>
 8005e3c:	4b66      	ldr	r3, [pc, #408]	@ (8005fd8 <ADC_ConfigureBoostMode+0x1cc>)
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	bf14      	ite	ne
 8005e48:	2301      	movne	r3, #1
 8005e4a:	2300      	moveq	r3, #0
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d01c      	beq.n	8005e8c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005e52:	f004 fec7 	bl	800abe4 <HAL_RCC_GetHCLKFreq>
 8005e56:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005e60:	d010      	beq.n	8005e84 <ADC_ConfigureBoostMode+0x78>
 8005e62:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005e66:	d873      	bhi.n	8005f50 <ADC_ConfigureBoostMode+0x144>
 8005e68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e6c:	d002      	beq.n	8005e74 <ADC_ConfigureBoostMode+0x68>
 8005e6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e72:	d16d      	bne.n	8005f50 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	0c1b      	lsrs	r3, r3, #16
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e80:	60fb      	str	r3, [r7, #12]
        break;
 8005e82:	e068      	b.n	8005f56 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	089b      	lsrs	r3, r3, #2
 8005e88:	60fb      	str	r3, [r7, #12]
        break;
 8005e8a:	e064      	b.n	8005f56 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005e8c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8005e90:	f04f 0100 	mov.w	r1, #0
 8005e94:	f006 f8a2 	bl	800bfdc <HAL_RCCEx_GetPeriphCLKFreq>
 8005e98:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8005ea2:	d051      	beq.n	8005f48 <ADC_ConfigureBoostMode+0x13c>
 8005ea4:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8005ea8:	d854      	bhi.n	8005f54 <ADC_ConfigureBoostMode+0x148>
 8005eaa:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8005eae:	d047      	beq.n	8005f40 <ADC_ConfigureBoostMode+0x134>
 8005eb0:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8005eb4:	d84e      	bhi.n	8005f54 <ADC_ConfigureBoostMode+0x148>
 8005eb6:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8005eba:	d03d      	beq.n	8005f38 <ADC_ConfigureBoostMode+0x12c>
 8005ebc:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8005ec0:	d848      	bhi.n	8005f54 <ADC_ConfigureBoostMode+0x148>
 8005ec2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ec6:	d033      	beq.n	8005f30 <ADC_ConfigureBoostMode+0x124>
 8005ec8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ecc:	d842      	bhi.n	8005f54 <ADC_ConfigureBoostMode+0x148>
 8005ece:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8005ed2:	d029      	beq.n	8005f28 <ADC_ConfigureBoostMode+0x11c>
 8005ed4:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8005ed8:	d83c      	bhi.n	8005f54 <ADC_ConfigureBoostMode+0x148>
 8005eda:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005ede:	d01a      	beq.n	8005f16 <ADC_ConfigureBoostMode+0x10a>
 8005ee0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005ee4:	d836      	bhi.n	8005f54 <ADC_ConfigureBoostMode+0x148>
 8005ee6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005eea:	d014      	beq.n	8005f16 <ADC_ConfigureBoostMode+0x10a>
 8005eec:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005ef0:	d830      	bhi.n	8005f54 <ADC_ConfigureBoostMode+0x148>
 8005ef2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ef6:	d00e      	beq.n	8005f16 <ADC_ConfigureBoostMode+0x10a>
 8005ef8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005efc:	d82a      	bhi.n	8005f54 <ADC_ConfigureBoostMode+0x148>
 8005efe:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005f02:	d008      	beq.n	8005f16 <ADC_ConfigureBoostMode+0x10a>
 8005f04:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005f08:	d824      	bhi.n	8005f54 <ADC_ConfigureBoostMode+0x148>
 8005f0a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f0e:	d002      	beq.n	8005f16 <ADC_ConfigureBoostMode+0x10a>
 8005f10:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005f14:	d11e      	bne.n	8005f54 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	0c9b      	lsrs	r3, r3, #18
 8005f1c:	005b      	lsls	r3, r3, #1
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f24:	60fb      	str	r3, [r7, #12]
        break;
 8005f26:	e016      	b.n	8005f56 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	091b      	lsrs	r3, r3, #4
 8005f2c:	60fb      	str	r3, [r7, #12]
        break;
 8005f2e:	e012      	b.n	8005f56 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	095b      	lsrs	r3, r3, #5
 8005f34:	60fb      	str	r3, [r7, #12]
        break;
 8005f36:	e00e      	b.n	8005f56 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	099b      	lsrs	r3, r3, #6
 8005f3c:	60fb      	str	r3, [r7, #12]
        break;
 8005f3e:	e00a      	b.n	8005f56 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	09db      	lsrs	r3, r3, #7
 8005f44:	60fb      	str	r3, [r7, #12]
        break;
 8005f46:	e006      	b.n	8005f56 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	0a1b      	lsrs	r3, r3, #8
 8005f4c:	60fb      	str	r3, [r7, #12]
        break;
 8005f4e:	e002      	b.n	8005f56 <ADC_ConfigureBoostMode+0x14a>
        break;
 8005f50:	bf00      	nop
 8005f52:	e000      	b.n	8005f56 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005f54:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	085b      	lsrs	r3, r3, #1
 8005f5a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	4a1f      	ldr	r2, [pc, #124]	@ (8005fdc <ADC_ConfigureBoostMode+0x1d0>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d808      	bhi.n	8005f76 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	689a      	ldr	r2, [r3, #8]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005f72:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005f74:	e025      	b.n	8005fc2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	4a19      	ldr	r2, [pc, #100]	@ (8005fe0 <ADC_ConfigureBoostMode+0x1d4>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d80a      	bhi.n	8005f94 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f90:	609a      	str	r2, [r3, #8]
}
 8005f92:	e016      	b.n	8005fc2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	4a13      	ldr	r2, [pc, #76]	@ (8005fe4 <ADC_ConfigureBoostMode+0x1d8>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d80a      	bhi.n	8005fb2 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fae:	609a      	str	r2, [r3, #8]
}
 8005fb0:	e007      	b.n	8005fc2 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	689a      	ldr	r2, [r3, #8]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8005fc0:	609a      	str	r2, [r3, #8]
}
 8005fc2:	bf00      	nop
 8005fc4:	3710      	adds	r7, #16
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	40022000 	.word	0x40022000
 8005fd0:	40022100 	.word	0x40022100
 8005fd4:	40022300 	.word	0x40022300
 8005fd8:	58026300 	.word	0x58026300
 8005fdc:	005f5e10 	.word	0x005f5e10
 8005fe0:	00bebc20 	.word	0x00bebc20
 8005fe4:	017d7840 	.word	0x017d7840

08005fe8 <LL_ADC_IsEnabled>:
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	f003 0301 	and.w	r3, r3, #1
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d101      	bne.n	8006000 <LL_ADC_IsEnabled+0x18>
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e000      	b.n	8006002 <LL_ADC_IsEnabled+0x1a>
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	370c      	adds	r7, #12
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr

0800600e <LL_ADC_REG_IsConversionOngoing>:
{
 800600e:	b480      	push	{r7}
 8006010:	b083      	sub	sp, #12
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f003 0304 	and.w	r3, r3, #4
 800601e:	2b04      	cmp	r3, #4
 8006020:	d101      	bne.n	8006026 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006022:	2301      	movs	r3, #1
 8006024:	e000      	b.n	8006028 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800603c:	bf00      	nop
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006050:	bf00      	nop
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006064:	bf00      	nop
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006078:	bf00      	nop
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800608c:	bf00      	nop
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006098:	b590      	push	{r4, r7, lr}
 800609a:	b0a3      	sub	sp, #140	@ 0x8c
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80060a2:	2300      	movs	r3, #0
 80060a4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d101      	bne.n	80060b6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80060b2:	2302      	movs	r3, #2
 80060b4:	e0c1      	b.n	800623a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80060be:	2300      	movs	r3, #0
 80060c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80060c2:	2300      	movs	r3, #0
 80060c4:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a5e      	ldr	r2, [pc, #376]	@ (8006244 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d102      	bne.n	80060d6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80060d0:	4b5d      	ldr	r3, [pc, #372]	@ (8006248 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80060d2:	60fb      	str	r3, [r7, #12]
 80060d4:	e001      	b.n	80060da <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80060d6:	2300      	movs	r3, #0
 80060d8:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d10b      	bne.n	80060f8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060e4:	f043 0220 	orr.w	r2, r3, #32
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e0a0      	b.n	800623a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7ff ff87 	bl	800600e <LL_ADC_REG_IsConversionOngoing>
 8006100:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4618      	mov	r0, r3
 800610a:	f7ff ff80 	bl	800600e <LL_ADC_REG_IsConversionOngoing>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	f040 8081 	bne.w	8006218 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006116:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800611a:	2b00      	cmp	r3, #0
 800611c:	d17c      	bne.n	8006218 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a48      	ldr	r2, [pc, #288]	@ (8006244 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d004      	beq.n	8006132 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a46      	ldr	r2, [pc, #280]	@ (8006248 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d101      	bne.n	8006136 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8006132:	4b46      	ldr	r3, [pc, #280]	@ (800624c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006134:	e000      	b.n	8006138 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8006136:	4b46      	ldr	r3, [pc, #280]	@ (8006250 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006138:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d039      	beq.n	80061b6 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8006142:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	431a      	orrs	r2, r3
 8006150:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006152:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a3a      	ldr	r2, [pc, #232]	@ (8006244 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d004      	beq.n	8006168 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a39      	ldr	r2, [pc, #228]	@ (8006248 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d10e      	bne.n	8006186 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8006168:	4836      	ldr	r0, [pc, #216]	@ (8006244 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800616a:	f7ff ff3d 	bl	8005fe8 <LL_ADC_IsEnabled>
 800616e:	4604      	mov	r4, r0
 8006170:	4835      	ldr	r0, [pc, #212]	@ (8006248 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006172:	f7ff ff39 	bl	8005fe8 <LL_ADC_IsEnabled>
 8006176:	4603      	mov	r3, r0
 8006178:	4323      	orrs	r3, r4
 800617a:	2b00      	cmp	r3, #0
 800617c:	bf0c      	ite	eq
 800617e:	2301      	moveq	r3, #1
 8006180:	2300      	movne	r3, #0
 8006182:	b2db      	uxtb	r3, r3
 8006184:	e008      	b.n	8006198 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8006186:	4833      	ldr	r0, [pc, #204]	@ (8006254 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8006188:	f7ff ff2e 	bl	8005fe8 <LL_ADC_IsEnabled>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	bf0c      	ite	eq
 8006192:	2301      	moveq	r3, #1
 8006194:	2300      	movne	r3, #0
 8006196:	b2db      	uxtb	r3, r3
 8006198:	2b00      	cmp	r3, #0
 800619a:	d047      	beq.n	800622c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800619c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800619e:	689a      	ldr	r2, [r3, #8]
 80061a0:	4b2d      	ldr	r3, [pc, #180]	@ (8006258 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80061a2:	4013      	ands	r3, r2
 80061a4:	683a      	ldr	r2, [r7, #0]
 80061a6:	6811      	ldr	r1, [r2, #0]
 80061a8:	683a      	ldr	r2, [r7, #0]
 80061aa:	6892      	ldr	r2, [r2, #8]
 80061ac:	430a      	orrs	r2, r1
 80061ae:	431a      	orrs	r2, r3
 80061b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80061b2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80061b4:	e03a      	b.n	800622c <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80061b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80061be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80061c0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a1f      	ldr	r2, [pc, #124]	@ (8006244 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d004      	beq.n	80061d6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a1d      	ldr	r2, [pc, #116]	@ (8006248 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d10e      	bne.n	80061f4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80061d6:	481b      	ldr	r0, [pc, #108]	@ (8006244 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80061d8:	f7ff ff06 	bl	8005fe8 <LL_ADC_IsEnabled>
 80061dc:	4604      	mov	r4, r0
 80061de:	481a      	ldr	r0, [pc, #104]	@ (8006248 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80061e0:	f7ff ff02 	bl	8005fe8 <LL_ADC_IsEnabled>
 80061e4:	4603      	mov	r3, r0
 80061e6:	4323      	orrs	r3, r4
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	bf0c      	ite	eq
 80061ec:	2301      	moveq	r3, #1
 80061ee:	2300      	movne	r3, #0
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	e008      	b.n	8006206 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80061f4:	4817      	ldr	r0, [pc, #92]	@ (8006254 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80061f6:	f7ff fef7 	bl	8005fe8 <LL_ADC_IsEnabled>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	bf0c      	ite	eq
 8006200:	2301      	moveq	r3, #1
 8006202:	2300      	movne	r3, #0
 8006204:	b2db      	uxtb	r3, r3
 8006206:	2b00      	cmp	r3, #0
 8006208:	d010      	beq.n	800622c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800620a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800620c:	689a      	ldr	r2, [r3, #8]
 800620e:	4b12      	ldr	r3, [pc, #72]	@ (8006258 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006210:	4013      	ands	r3, r2
 8006212:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006214:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006216:	e009      	b.n	800622c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800621c:	f043 0220 	orr.w	r2, r3, #32
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800622a:	e000      	b.n	800622e <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800622c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8006236:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 800623a:	4618      	mov	r0, r3
 800623c:	378c      	adds	r7, #140	@ 0x8c
 800623e:	46bd      	mov	sp, r7
 8006240:	bd90      	pop	{r4, r7, pc}
 8006242:	bf00      	nop
 8006244:	40022000 	.word	0x40022000
 8006248:	40022100 	.word	0x40022100
 800624c:	40022300 	.word	0x40022300
 8006250:	58026300 	.word	0x58026300
 8006254:	58026000 	.word	0x58026000
 8006258:	fffff0e0 	.word	0xfffff0e0

0800625c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800625c:	b480      	push	{r7}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f003 0307 	and.w	r3, r3, #7
 800626a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800626c:	4b0b      	ldr	r3, [pc, #44]	@ (800629c <__NVIC_SetPriorityGrouping+0x40>)
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006272:	68ba      	ldr	r2, [r7, #8]
 8006274:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006278:	4013      	ands	r3, r2
 800627a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006284:	4b06      	ldr	r3, [pc, #24]	@ (80062a0 <__NVIC_SetPriorityGrouping+0x44>)
 8006286:	4313      	orrs	r3, r2
 8006288:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800628a:	4a04      	ldr	r2, [pc, #16]	@ (800629c <__NVIC_SetPriorityGrouping+0x40>)
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	60d3      	str	r3, [r2, #12]
}
 8006290:	bf00      	nop
 8006292:	3714      	adds	r7, #20
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr
 800629c:	e000ed00 	.word	0xe000ed00
 80062a0:	05fa0000 	.word	0x05fa0000

080062a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80062a4:	b480      	push	{r7}
 80062a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80062a8:	4b04      	ldr	r3, [pc, #16]	@ (80062bc <__NVIC_GetPriorityGrouping+0x18>)
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	0a1b      	lsrs	r3, r3, #8
 80062ae:	f003 0307 	and.w	r3, r3, #7
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr
 80062bc:	e000ed00 	.word	0xe000ed00

080062c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	4603      	mov	r3, r0
 80062c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80062ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	db0b      	blt.n	80062ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80062d2:	88fb      	ldrh	r3, [r7, #6]
 80062d4:	f003 021f 	and.w	r2, r3, #31
 80062d8:	4907      	ldr	r1, [pc, #28]	@ (80062f8 <__NVIC_EnableIRQ+0x38>)
 80062da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80062de:	095b      	lsrs	r3, r3, #5
 80062e0:	2001      	movs	r0, #1
 80062e2:	fa00 f202 	lsl.w	r2, r0, r2
 80062e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80062ea:	bf00      	nop
 80062ec:	370c      	adds	r7, #12
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	e000e100 	.word	0xe000e100

080062fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	4603      	mov	r3, r0
 8006304:	6039      	str	r1, [r7, #0]
 8006306:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006308:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800630c:	2b00      	cmp	r3, #0
 800630e:	db0a      	blt.n	8006326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	b2da      	uxtb	r2, r3
 8006314:	490c      	ldr	r1, [pc, #48]	@ (8006348 <__NVIC_SetPriority+0x4c>)
 8006316:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800631a:	0112      	lsls	r2, r2, #4
 800631c:	b2d2      	uxtb	r2, r2
 800631e:	440b      	add	r3, r1
 8006320:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006324:	e00a      	b.n	800633c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	b2da      	uxtb	r2, r3
 800632a:	4908      	ldr	r1, [pc, #32]	@ (800634c <__NVIC_SetPriority+0x50>)
 800632c:	88fb      	ldrh	r3, [r7, #6]
 800632e:	f003 030f 	and.w	r3, r3, #15
 8006332:	3b04      	subs	r3, #4
 8006334:	0112      	lsls	r2, r2, #4
 8006336:	b2d2      	uxtb	r2, r2
 8006338:	440b      	add	r3, r1
 800633a:	761a      	strb	r2, [r3, #24]
}
 800633c:	bf00      	nop
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr
 8006348:	e000e100 	.word	0xe000e100
 800634c:	e000ed00 	.word	0xe000ed00

08006350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006350:	b480      	push	{r7}
 8006352:	b089      	sub	sp, #36	@ 0x24
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f003 0307 	and.w	r3, r3, #7
 8006362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	f1c3 0307 	rsb	r3, r3, #7
 800636a:	2b04      	cmp	r3, #4
 800636c:	bf28      	it	cs
 800636e:	2304      	movcs	r3, #4
 8006370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	3304      	adds	r3, #4
 8006376:	2b06      	cmp	r3, #6
 8006378:	d902      	bls.n	8006380 <NVIC_EncodePriority+0x30>
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	3b03      	subs	r3, #3
 800637e:	e000      	b.n	8006382 <NVIC_EncodePriority+0x32>
 8006380:	2300      	movs	r3, #0
 8006382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006384:	f04f 32ff 	mov.w	r2, #4294967295
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	fa02 f303 	lsl.w	r3, r2, r3
 800638e:	43da      	mvns	r2, r3
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	401a      	ands	r2, r3
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006398:	f04f 31ff 	mov.w	r1, #4294967295
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	fa01 f303 	lsl.w	r3, r1, r3
 80063a2:	43d9      	mvns	r1, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063a8:	4313      	orrs	r3, r2
         );
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3724      	adds	r7, #36	@ 0x24
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr
	...

080063b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	3b01      	subs	r3, #1
 80063c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80063c8:	d301      	bcc.n	80063ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80063ca:	2301      	movs	r3, #1
 80063cc:	e00f      	b.n	80063ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80063ce:	4a0a      	ldr	r2, [pc, #40]	@ (80063f8 <SysTick_Config+0x40>)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	3b01      	subs	r3, #1
 80063d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80063d6:	210f      	movs	r1, #15
 80063d8:	f04f 30ff 	mov.w	r0, #4294967295
 80063dc:	f7ff ff8e 	bl	80062fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80063e0:	4b05      	ldr	r3, [pc, #20]	@ (80063f8 <SysTick_Config+0x40>)
 80063e2:	2200      	movs	r2, #0
 80063e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80063e6:	4b04      	ldr	r3, [pc, #16]	@ (80063f8 <SysTick_Config+0x40>)
 80063e8:	2207      	movs	r2, #7
 80063ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3708      	adds	r7, #8
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	e000e010 	.word	0xe000e010

080063fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f7ff ff29 	bl	800625c <__NVIC_SetPriorityGrouping>
}
 800640a:	bf00      	nop
 800640c:	3708      	adds	r7, #8
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006412:	b580      	push	{r7, lr}
 8006414:	b086      	sub	sp, #24
 8006416:	af00      	add	r7, sp, #0
 8006418:	4603      	mov	r3, r0
 800641a:	60b9      	str	r1, [r7, #8]
 800641c:	607a      	str	r2, [r7, #4]
 800641e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006420:	f7ff ff40 	bl	80062a4 <__NVIC_GetPriorityGrouping>
 8006424:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	68b9      	ldr	r1, [r7, #8]
 800642a:	6978      	ldr	r0, [r7, #20]
 800642c:	f7ff ff90 	bl	8006350 <NVIC_EncodePriority>
 8006430:	4602      	mov	r2, r0
 8006432:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006436:	4611      	mov	r1, r2
 8006438:	4618      	mov	r0, r3
 800643a:	f7ff ff5f 	bl	80062fc <__NVIC_SetPriority>
}
 800643e:	bf00      	nop
 8006440:	3718      	adds	r7, #24
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}

08006446 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006446:	b580      	push	{r7, lr}
 8006448:	b082      	sub	sp, #8
 800644a:	af00      	add	r7, sp, #0
 800644c:	4603      	mov	r3, r0
 800644e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006450:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006454:	4618      	mov	r0, r3
 8006456:	f7ff ff33 	bl	80062c0 <__NVIC_EnableIRQ>
}
 800645a:	bf00      	nop
 800645c:	3708      	adds	r7, #8
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}

08006462 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006462:	b580      	push	{r7, lr}
 8006464:	b082      	sub	sp, #8
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f7ff ffa4 	bl	80063b8 <SysTick_Config>
 8006470:	4603      	mov	r3, r0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3708      	adds	r7, #8
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
	...

0800647c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b086      	sub	sp, #24
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006484:	f7fd fab0 	bl	80039e8 <HAL_GetTick>
 8006488:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d101      	bne.n	8006494 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e312      	b.n	8006aba <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a66      	ldr	r2, [pc, #408]	@ (8006634 <HAL_DMA_Init+0x1b8>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d04a      	beq.n	8006534 <HAL_DMA_Init+0xb8>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a65      	ldr	r2, [pc, #404]	@ (8006638 <HAL_DMA_Init+0x1bc>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d045      	beq.n	8006534 <HAL_DMA_Init+0xb8>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a63      	ldr	r2, [pc, #396]	@ (800663c <HAL_DMA_Init+0x1c0>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d040      	beq.n	8006534 <HAL_DMA_Init+0xb8>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a62      	ldr	r2, [pc, #392]	@ (8006640 <HAL_DMA_Init+0x1c4>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d03b      	beq.n	8006534 <HAL_DMA_Init+0xb8>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a60      	ldr	r2, [pc, #384]	@ (8006644 <HAL_DMA_Init+0x1c8>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d036      	beq.n	8006534 <HAL_DMA_Init+0xb8>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a5f      	ldr	r2, [pc, #380]	@ (8006648 <HAL_DMA_Init+0x1cc>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d031      	beq.n	8006534 <HAL_DMA_Init+0xb8>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a5d      	ldr	r2, [pc, #372]	@ (800664c <HAL_DMA_Init+0x1d0>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d02c      	beq.n	8006534 <HAL_DMA_Init+0xb8>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a5c      	ldr	r2, [pc, #368]	@ (8006650 <HAL_DMA_Init+0x1d4>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d027      	beq.n	8006534 <HAL_DMA_Init+0xb8>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a5a      	ldr	r2, [pc, #360]	@ (8006654 <HAL_DMA_Init+0x1d8>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d022      	beq.n	8006534 <HAL_DMA_Init+0xb8>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a59      	ldr	r2, [pc, #356]	@ (8006658 <HAL_DMA_Init+0x1dc>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d01d      	beq.n	8006534 <HAL_DMA_Init+0xb8>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a57      	ldr	r2, [pc, #348]	@ (800665c <HAL_DMA_Init+0x1e0>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d018      	beq.n	8006534 <HAL_DMA_Init+0xb8>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a56      	ldr	r2, [pc, #344]	@ (8006660 <HAL_DMA_Init+0x1e4>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d013      	beq.n	8006534 <HAL_DMA_Init+0xb8>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a54      	ldr	r2, [pc, #336]	@ (8006664 <HAL_DMA_Init+0x1e8>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d00e      	beq.n	8006534 <HAL_DMA_Init+0xb8>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a53      	ldr	r2, [pc, #332]	@ (8006668 <HAL_DMA_Init+0x1ec>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d009      	beq.n	8006534 <HAL_DMA_Init+0xb8>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a51      	ldr	r2, [pc, #324]	@ (800666c <HAL_DMA_Init+0x1f0>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d004      	beq.n	8006534 <HAL_DMA_Init+0xb8>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a50      	ldr	r2, [pc, #320]	@ (8006670 <HAL_DMA_Init+0x1f4>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d101      	bne.n	8006538 <HAL_DMA_Init+0xbc>
 8006534:	2301      	movs	r3, #1
 8006536:	e000      	b.n	800653a <HAL_DMA_Init+0xbe>
 8006538:	2300      	movs	r3, #0
 800653a:	2b00      	cmp	r3, #0
 800653c:	f000 813c 	beq.w	80067b8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2202      	movs	r2, #2
 8006544:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a37      	ldr	r2, [pc, #220]	@ (8006634 <HAL_DMA_Init+0x1b8>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d04a      	beq.n	80065f0 <HAL_DMA_Init+0x174>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a36      	ldr	r2, [pc, #216]	@ (8006638 <HAL_DMA_Init+0x1bc>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d045      	beq.n	80065f0 <HAL_DMA_Init+0x174>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a34      	ldr	r2, [pc, #208]	@ (800663c <HAL_DMA_Init+0x1c0>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d040      	beq.n	80065f0 <HAL_DMA_Init+0x174>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a33      	ldr	r2, [pc, #204]	@ (8006640 <HAL_DMA_Init+0x1c4>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d03b      	beq.n	80065f0 <HAL_DMA_Init+0x174>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a31      	ldr	r2, [pc, #196]	@ (8006644 <HAL_DMA_Init+0x1c8>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d036      	beq.n	80065f0 <HAL_DMA_Init+0x174>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a30      	ldr	r2, [pc, #192]	@ (8006648 <HAL_DMA_Init+0x1cc>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d031      	beq.n	80065f0 <HAL_DMA_Init+0x174>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a2e      	ldr	r2, [pc, #184]	@ (800664c <HAL_DMA_Init+0x1d0>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d02c      	beq.n	80065f0 <HAL_DMA_Init+0x174>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a2d      	ldr	r2, [pc, #180]	@ (8006650 <HAL_DMA_Init+0x1d4>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d027      	beq.n	80065f0 <HAL_DMA_Init+0x174>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a2b      	ldr	r2, [pc, #172]	@ (8006654 <HAL_DMA_Init+0x1d8>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d022      	beq.n	80065f0 <HAL_DMA_Init+0x174>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a2a      	ldr	r2, [pc, #168]	@ (8006658 <HAL_DMA_Init+0x1dc>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d01d      	beq.n	80065f0 <HAL_DMA_Init+0x174>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a28      	ldr	r2, [pc, #160]	@ (800665c <HAL_DMA_Init+0x1e0>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d018      	beq.n	80065f0 <HAL_DMA_Init+0x174>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a27      	ldr	r2, [pc, #156]	@ (8006660 <HAL_DMA_Init+0x1e4>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d013      	beq.n	80065f0 <HAL_DMA_Init+0x174>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a25      	ldr	r2, [pc, #148]	@ (8006664 <HAL_DMA_Init+0x1e8>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d00e      	beq.n	80065f0 <HAL_DMA_Init+0x174>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a24      	ldr	r2, [pc, #144]	@ (8006668 <HAL_DMA_Init+0x1ec>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d009      	beq.n	80065f0 <HAL_DMA_Init+0x174>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a22      	ldr	r2, [pc, #136]	@ (800666c <HAL_DMA_Init+0x1f0>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d004      	beq.n	80065f0 <HAL_DMA_Init+0x174>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a21      	ldr	r2, [pc, #132]	@ (8006670 <HAL_DMA_Init+0x1f4>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d108      	bne.n	8006602 <HAL_DMA_Init+0x186>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f022 0201 	bic.w	r2, r2, #1
 80065fe:	601a      	str	r2, [r3, #0]
 8006600:	e007      	b.n	8006612 <HAL_DMA_Init+0x196>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f022 0201 	bic.w	r2, r2, #1
 8006610:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006612:	e02f      	b.n	8006674 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006614:	f7fd f9e8 	bl	80039e8 <HAL_GetTick>
 8006618:	4602      	mov	r2, r0
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	2b05      	cmp	r3, #5
 8006620:	d928      	bls.n	8006674 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2220      	movs	r2, #32
 8006626:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2203      	movs	r2, #3
 800662c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e242      	b.n	8006aba <HAL_DMA_Init+0x63e>
 8006634:	40020010 	.word	0x40020010
 8006638:	40020028 	.word	0x40020028
 800663c:	40020040 	.word	0x40020040
 8006640:	40020058 	.word	0x40020058
 8006644:	40020070 	.word	0x40020070
 8006648:	40020088 	.word	0x40020088
 800664c:	400200a0 	.word	0x400200a0
 8006650:	400200b8 	.word	0x400200b8
 8006654:	40020410 	.word	0x40020410
 8006658:	40020428 	.word	0x40020428
 800665c:	40020440 	.word	0x40020440
 8006660:	40020458 	.word	0x40020458
 8006664:	40020470 	.word	0x40020470
 8006668:	40020488 	.word	0x40020488
 800666c:	400204a0 	.word	0x400204a0
 8006670:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 0301 	and.w	r3, r3, #1
 800667e:	2b00      	cmp	r3, #0
 8006680:	d1c8      	bne.n	8006614 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800668a:	697a      	ldr	r2, [r7, #20]
 800668c:	4b83      	ldr	r3, [pc, #524]	@ (800689c <HAL_DMA_Init+0x420>)
 800668e:	4013      	ands	r3, r2
 8006690:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800669a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80066a6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	699b      	ldr	r3, [r3, #24]
 80066ac:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80066b2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6a1b      	ldr	r3, [r3, #32]
 80066b8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80066ba:	697a      	ldr	r2, [r7, #20]
 80066bc:	4313      	orrs	r3, r2
 80066be:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066c4:	2b04      	cmp	r3, #4
 80066c6:	d107      	bne.n	80066d8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066d0:	4313      	orrs	r3, r2
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	2b28      	cmp	r3, #40	@ 0x28
 80066de:	d903      	bls.n	80066e8 <HAL_DMA_Init+0x26c>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80066e6:	d91f      	bls.n	8006728 <HAL_DMA_Init+0x2ac>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	2b3e      	cmp	r3, #62	@ 0x3e
 80066ee:	d903      	bls.n	80066f8 <HAL_DMA_Init+0x27c>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	2b42      	cmp	r3, #66	@ 0x42
 80066f6:	d917      	bls.n	8006728 <HAL_DMA_Init+0x2ac>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	2b46      	cmp	r3, #70	@ 0x46
 80066fe:	d903      	bls.n	8006708 <HAL_DMA_Init+0x28c>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	2b48      	cmp	r3, #72	@ 0x48
 8006706:	d90f      	bls.n	8006728 <HAL_DMA_Init+0x2ac>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	2b4e      	cmp	r3, #78	@ 0x4e
 800670e:	d903      	bls.n	8006718 <HAL_DMA_Init+0x29c>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	2b52      	cmp	r3, #82	@ 0x52
 8006716:	d907      	bls.n	8006728 <HAL_DMA_Init+0x2ac>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	2b73      	cmp	r3, #115	@ 0x73
 800671e:	d905      	bls.n	800672c <HAL_DMA_Init+0x2b0>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	2b77      	cmp	r3, #119	@ 0x77
 8006726:	d801      	bhi.n	800672c <HAL_DMA_Init+0x2b0>
 8006728:	2301      	movs	r3, #1
 800672a:	e000      	b.n	800672e <HAL_DMA_Init+0x2b2>
 800672c:	2300      	movs	r3, #0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d003      	beq.n	800673a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006738:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	697a      	ldr	r2, [r7, #20]
 8006740:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	695b      	ldr	r3, [r3, #20]
 8006748:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	f023 0307 	bic.w	r3, r3, #7
 8006750:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006756:	697a      	ldr	r2, [r7, #20]
 8006758:	4313      	orrs	r3, r2
 800675a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006760:	2b04      	cmp	r3, #4
 8006762:	d117      	bne.n	8006794 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006768:	697a      	ldr	r2, [r7, #20]
 800676a:	4313      	orrs	r3, r2
 800676c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00e      	beq.n	8006794 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f001 fdca 	bl	8008310 <DMA_CheckFifoParam>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d008      	beq.n	8006794 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2240      	movs	r2, #64	@ 0x40
 8006786:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	e192      	b.n	8006aba <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	697a      	ldr	r2, [r7, #20]
 800679a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f001 fd05 	bl	80081ac <DMA_CalcBaseAndBitshift>
 80067a2:	4603      	mov	r3, r0
 80067a4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067aa:	f003 031f 	and.w	r3, r3, #31
 80067ae:	223f      	movs	r2, #63	@ 0x3f
 80067b0:	409a      	lsls	r2, r3
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	609a      	str	r2, [r3, #8]
 80067b6:	e0c8      	b.n	800694a <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a38      	ldr	r2, [pc, #224]	@ (80068a0 <HAL_DMA_Init+0x424>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d022      	beq.n	8006808 <HAL_DMA_Init+0x38c>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a37      	ldr	r2, [pc, #220]	@ (80068a4 <HAL_DMA_Init+0x428>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d01d      	beq.n	8006808 <HAL_DMA_Init+0x38c>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a35      	ldr	r2, [pc, #212]	@ (80068a8 <HAL_DMA_Init+0x42c>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d018      	beq.n	8006808 <HAL_DMA_Init+0x38c>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a34      	ldr	r2, [pc, #208]	@ (80068ac <HAL_DMA_Init+0x430>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d013      	beq.n	8006808 <HAL_DMA_Init+0x38c>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a32      	ldr	r2, [pc, #200]	@ (80068b0 <HAL_DMA_Init+0x434>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d00e      	beq.n	8006808 <HAL_DMA_Init+0x38c>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a31      	ldr	r2, [pc, #196]	@ (80068b4 <HAL_DMA_Init+0x438>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d009      	beq.n	8006808 <HAL_DMA_Init+0x38c>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a2f      	ldr	r2, [pc, #188]	@ (80068b8 <HAL_DMA_Init+0x43c>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d004      	beq.n	8006808 <HAL_DMA_Init+0x38c>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a2e      	ldr	r2, [pc, #184]	@ (80068bc <HAL_DMA_Init+0x440>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d101      	bne.n	800680c <HAL_DMA_Init+0x390>
 8006808:	2301      	movs	r3, #1
 800680a:	e000      	b.n	800680e <HAL_DMA_Init+0x392>
 800680c:	2300      	movs	r3, #0
 800680e:	2b00      	cmp	r3, #0
 8006810:	f000 8092 	beq.w	8006938 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a21      	ldr	r2, [pc, #132]	@ (80068a0 <HAL_DMA_Init+0x424>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d021      	beq.n	8006862 <HAL_DMA_Init+0x3e6>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a20      	ldr	r2, [pc, #128]	@ (80068a4 <HAL_DMA_Init+0x428>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d01c      	beq.n	8006862 <HAL_DMA_Init+0x3e6>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a1e      	ldr	r2, [pc, #120]	@ (80068a8 <HAL_DMA_Init+0x42c>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d017      	beq.n	8006862 <HAL_DMA_Init+0x3e6>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a1d      	ldr	r2, [pc, #116]	@ (80068ac <HAL_DMA_Init+0x430>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d012      	beq.n	8006862 <HAL_DMA_Init+0x3e6>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a1b      	ldr	r2, [pc, #108]	@ (80068b0 <HAL_DMA_Init+0x434>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d00d      	beq.n	8006862 <HAL_DMA_Init+0x3e6>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a1a      	ldr	r2, [pc, #104]	@ (80068b4 <HAL_DMA_Init+0x438>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d008      	beq.n	8006862 <HAL_DMA_Init+0x3e6>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a18      	ldr	r2, [pc, #96]	@ (80068b8 <HAL_DMA_Init+0x43c>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d003      	beq.n	8006862 <HAL_DMA_Init+0x3e6>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a17      	ldr	r2, [pc, #92]	@ (80068bc <HAL_DMA_Init+0x440>)
 8006860:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2202      	movs	r2, #2
 8006866:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800687a:	697a      	ldr	r2, [r7, #20]
 800687c:	4b10      	ldr	r3, [pc, #64]	@ (80068c0 <HAL_DMA_Init+0x444>)
 800687e:	4013      	ands	r3, r2
 8006880:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	2b40      	cmp	r3, #64	@ 0x40
 8006888:	d01c      	beq.n	80068c4 <HAL_DMA_Init+0x448>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	2b80      	cmp	r3, #128	@ 0x80
 8006890:	d102      	bne.n	8006898 <HAL_DMA_Init+0x41c>
 8006892:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006896:	e016      	b.n	80068c6 <HAL_DMA_Init+0x44a>
 8006898:	2300      	movs	r3, #0
 800689a:	e014      	b.n	80068c6 <HAL_DMA_Init+0x44a>
 800689c:	fe10803f 	.word	0xfe10803f
 80068a0:	58025408 	.word	0x58025408
 80068a4:	5802541c 	.word	0x5802541c
 80068a8:	58025430 	.word	0x58025430
 80068ac:	58025444 	.word	0x58025444
 80068b0:	58025458 	.word	0x58025458
 80068b4:	5802546c 	.word	0x5802546c
 80068b8:	58025480 	.word	0x58025480
 80068bc:	58025494 	.word	0x58025494
 80068c0:	fffe000f 	.word	0xfffe000f
 80068c4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	68d2      	ldr	r2, [r2, #12]
 80068ca:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80068cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80068d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	695b      	ldr	r3, [r3, #20]
 80068da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80068dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80068e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	69db      	ldr	r3, [r3, #28]
 80068ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80068ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a1b      	ldr	r3, [r3, #32]
 80068f2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80068f4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80068f6:	697a      	ldr	r2, [r7, #20]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	697a      	ldr	r2, [r7, #20]
 8006902:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	461a      	mov	r2, r3
 800690a:	4b6e      	ldr	r3, [pc, #440]	@ (8006ac4 <HAL_DMA_Init+0x648>)
 800690c:	4413      	add	r3, r2
 800690e:	4a6e      	ldr	r2, [pc, #440]	@ (8006ac8 <HAL_DMA_Init+0x64c>)
 8006910:	fba2 2303 	umull	r2, r3, r2, r3
 8006914:	091b      	lsrs	r3, r3, #4
 8006916:	009a      	lsls	r2, r3, #2
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f001 fc45 	bl	80081ac <DMA_CalcBaseAndBitshift>
 8006922:	4603      	mov	r3, r0
 8006924:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800692a:	f003 031f 	and.w	r3, r3, #31
 800692e:	2201      	movs	r2, #1
 8006930:	409a      	lsls	r2, r3
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	605a      	str	r2, [r3, #4]
 8006936:	e008      	b.n	800694a <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2240      	movs	r2, #64	@ 0x40
 800693c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2203      	movs	r2, #3
 8006942:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e0b7      	b.n	8006aba <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a5f      	ldr	r2, [pc, #380]	@ (8006acc <HAL_DMA_Init+0x650>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d072      	beq.n	8006a3a <HAL_DMA_Init+0x5be>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a5d      	ldr	r2, [pc, #372]	@ (8006ad0 <HAL_DMA_Init+0x654>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d06d      	beq.n	8006a3a <HAL_DMA_Init+0x5be>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a5c      	ldr	r2, [pc, #368]	@ (8006ad4 <HAL_DMA_Init+0x658>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d068      	beq.n	8006a3a <HAL_DMA_Init+0x5be>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a5a      	ldr	r2, [pc, #360]	@ (8006ad8 <HAL_DMA_Init+0x65c>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d063      	beq.n	8006a3a <HAL_DMA_Init+0x5be>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a59      	ldr	r2, [pc, #356]	@ (8006adc <HAL_DMA_Init+0x660>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d05e      	beq.n	8006a3a <HAL_DMA_Init+0x5be>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a57      	ldr	r2, [pc, #348]	@ (8006ae0 <HAL_DMA_Init+0x664>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d059      	beq.n	8006a3a <HAL_DMA_Init+0x5be>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a56      	ldr	r2, [pc, #344]	@ (8006ae4 <HAL_DMA_Init+0x668>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d054      	beq.n	8006a3a <HAL_DMA_Init+0x5be>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a54      	ldr	r2, [pc, #336]	@ (8006ae8 <HAL_DMA_Init+0x66c>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d04f      	beq.n	8006a3a <HAL_DMA_Init+0x5be>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a53      	ldr	r2, [pc, #332]	@ (8006aec <HAL_DMA_Init+0x670>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d04a      	beq.n	8006a3a <HAL_DMA_Init+0x5be>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a51      	ldr	r2, [pc, #324]	@ (8006af0 <HAL_DMA_Init+0x674>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d045      	beq.n	8006a3a <HAL_DMA_Init+0x5be>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a50      	ldr	r2, [pc, #320]	@ (8006af4 <HAL_DMA_Init+0x678>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d040      	beq.n	8006a3a <HAL_DMA_Init+0x5be>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a4e      	ldr	r2, [pc, #312]	@ (8006af8 <HAL_DMA_Init+0x67c>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d03b      	beq.n	8006a3a <HAL_DMA_Init+0x5be>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a4d      	ldr	r2, [pc, #308]	@ (8006afc <HAL_DMA_Init+0x680>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d036      	beq.n	8006a3a <HAL_DMA_Init+0x5be>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a4b      	ldr	r2, [pc, #300]	@ (8006b00 <HAL_DMA_Init+0x684>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d031      	beq.n	8006a3a <HAL_DMA_Init+0x5be>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a4a      	ldr	r2, [pc, #296]	@ (8006b04 <HAL_DMA_Init+0x688>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d02c      	beq.n	8006a3a <HAL_DMA_Init+0x5be>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a48      	ldr	r2, [pc, #288]	@ (8006b08 <HAL_DMA_Init+0x68c>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d027      	beq.n	8006a3a <HAL_DMA_Init+0x5be>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a47      	ldr	r2, [pc, #284]	@ (8006b0c <HAL_DMA_Init+0x690>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d022      	beq.n	8006a3a <HAL_DMA_Init+0x5be>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a45      	ldr	r2, [pc, #276]	@ (8006b10 <HAL_DMA_Init+0x694>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d01d      	beq.n	8006a3a <HAL_DMA_Init+0x5be>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a44      	ldr	r2, [pc, #272]	@ (8006b14 <HAL_DMA_Init+0x698>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d018      	beq.n	8006a3a <HAL_DMA_Init+0x5be>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a42      	ldr	r2, [pc, #264]	@ (8006b18 <HAL_DMA_Init+0x69c>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d013      	beq.n	8006a3a <HAL_DMA_Init+0x5be>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a41      	ldr	r2, [pc, #260]	@ (8006b1c <HAL_DMA_Init+0x6a0>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d00e      	beq.n	8006a3a <HAL_DMA_Init+0x5be>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a3f      	ldr	r2, [pc, #252]	@ (8006b20 <HAL_DMA_Init+0x6a4>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d009      	beq.n	8006a3a <HAL_DMA_Init+0x5be>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a3e      	ldr	r2, [pc, #248]	@ (8006b24 <HAL_DMA_Init+0x6a8>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d004      	beq.n	8006a3a <HAL_DMA_Init+0x5be>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a3c      	ldr	r2, [pc, #240]	@ (8006b28 <HAL_DMA_Init+0x6ac>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d101      	bne.n	8006a3e <HAL_DMA_Init+0x5c2>
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e000      	b.n	8006a40 <HAL_DMA_Init+0x5c4>
 8006a3e:	2300      	movs	r3, #0
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d032      	beq.n	8006aaa <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f001 fcdf 	bl	8008408 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	2b80      	cmp	r3, #128	@ 0x80
 8006a50:	d102      	bne.n	8006a58 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	685a      	ldr	r2, [r3, #4]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a60:	b2d2      	uxtb	r2, r2
 8006a62:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006a6c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d010      	beq.n	8006a98 <HAL_DMA_Init+0x61c>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	2b08      	cmp	r3, #8
 8006a7c:	d80c      	bhi.n	8006a98 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f001 fd5c 	bl	800853c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a88:	2200      	movs	r2, #0
 8006a8a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006a94:	605a      	str	r2, [r3, #4]
 8006a96:	e008      	b.n	8006aaa <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3718      	adds	r7, #24
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	bf00      	nop
 8006ac4:	a7fdabf8 	.word	0xa7fdabf8
 8006ac8:	cccccccd 	.word	0xcccccccd
 8006acc:	40020010 	.word	0x40020010
 8006ad0:	40020028 	.word	0x40020028
 8006ad4:	40020040 	.word	0x40020040
 8006ad8:	40020058 	.word	0x40020058
 8006adc:	40020070 	.word	0x40020070
 8006ae0:	40020088 	.word	0x40020088
 8006ae4:	400200a0 	.word	0x400200a0
 8006ae8:	400200b8 	.word	0x400200b8
 8006aec:	40020410 	.word	0x40020410
 8006af0:	40020428 	.word	0x40020428
 8006af4:	40020440 	.word	0x40020440
 8006af8:	40020458 	.word	0x40020458
 8006afc:	40020470 	.word	0x40020470
 8006b00:	40020488 	.word	0x40020488
 8006b04:	400204a0 	.word	0x400204a0
 8006b08:	400204b8 	.word	0x400204b8
 8006b0c:	58025408 	.word	0x58025408
 8006b10:	5802541c 	.word	0x5802541c
 8006b14:	58025430 	.word	0x58025430
 8006b18:	58025444 	.word	0x58025444
 8006b1c:	58025458 	.word	0x58025458
 8006b20:	5802546c 	.word	0x5802546c
 8006b24:	58025480 	.word	0x58025480
 8006b28:	58025494 	.word	0x58025494

08006b2c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b086      	sub	sp, #24
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	607a      	str	r2, [r7, #4]
 8006b38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d101      	bne.n	8006b48 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	e226      	b.n	8006f96 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d101      	bne.n	8006b56 <HAL_DMA_Start_IT+0x2a>
 8006b52:	2302      	movs	r3, #2
 8006b54:	e21f      	b.n	8006f96 <HAL_DMA_Start_IT+0x46a>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	f040 820a 	bne.w	8006f80 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2202      	movs	r2, #2
 8006b70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2200      	movs	r2, #0
 8006b78:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a68      	ldr	r2, [pc, #416]	@ (8006d20 <HAL_DMA_Start_IT+0x1f4>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d04a      	beq.n	8006c1a <HAL_DMA_Start_IT+0xee>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a66      	ldr	r2, [pc, #408]	@ (8006d24 <HAL_DMA_Start_IT+0x1f8>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d045      	beq.n	8006c1a <HAL_DMA_Start_IT+0xee>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a65      	ldr	r2, [pc, #404]	@ (8006d28 <HAL_DMA_Start_IT+0x1fc>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d040      	beq.n	8006c1a <HAL_DMA_Start_IT+0xee>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a63      	ldr	r2, [pc, #396]	@ (8006d2c <HAL_DMA_Start_IT+0x200>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d03b      	beq.n	8006c1a <HAL_DMA_Start_IT+0xee>
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a62      	ldr	r2, [pc, #392]	@ (8006d30 <HAL_DMA_Start_IT+0x204>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d036      	beq.n	8006c1a <HAL_DMA_Start_IT+0xee>
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a60      	ldr	r2, [pc, #384]	@ (8006d34 <HAL_DMA_Start_IT+0x208>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d031      	beq.n	8006c1a <HAL_DMA_Start_IT+0xee>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a5f      	ldr	r2, [pc, #380]	@ (8006d38 <HAL_DMA_Start_IT+0x20c>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d02c      	beq.n	8006c1a <HAL_DMA_Start_IT+0xee>
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a5d      	ldr	r2, [pc, #372]	@ (8006d3c <HAL_DMA_Start_IT+0x210>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d027      	beq.n	8006c1a <HAL_DMA_Start_IT+0xee>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a5c      	ldr	r2, [pc, #368]	@ (8006d40 <HAL_DMA_Start_IT+0x214>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d022      	beq.n	8006c1a <HAL_DMA_Start_IT+0xee>
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a5a      	ldr	r2, [pc, #360]	@ (8006d44 <HAL_DMA_Start_IT+0x218>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d01d      	beq.n	8006c1a <HAL_DMA_Start_IT+0xee>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a59      	ldr	r2, [pc, #356]	@ (8006d48 <HAL_DMA_Start_IT+0x21c>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d018      	beq.n	8006c1a <HAL_DMA_Start_IT+0xee>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a57      	ldr	r2, [pc, #348]	@ (8006d4c <HAL_DMA_Start_IT+0x220>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d013      	beq.n	8006c1a <HAL_DMA_Start_IT+0xee>
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a56      	ldr	r2, [pc, #344]	@ (8006d50 <HAL_DMA_Start_IT+0x224>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d00e      	beq.n	8006c1a <HAL_DMA_Start_IT+0xee>
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a54      	ldr	r2, [pc, #336]	@ (8006d54 <HAL_DMA_Start_IT+0x228>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d009      	beq.n	8006c1a <HAL_DMA_Start_IT+0xee>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a53      	ldr	r2, [pc, #332]	@ (8006d58 <HAL_DMA_Start_IT+0x22c>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d004      	beq.n	8006c1a <HAL_DMA_Start_IT+0xee>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a51      	ldr	r2, [pc, #324]	@ (8006d5c <HAL_DMA_Start_IT+0x230>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d108      	bne.n	8006c2c <HAL_DMA_Start_IT+0x100>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f022 0201 	bic.w	r2, r2, #1
 8006c28:	601a      	str	r2, [r3, #0]
 8006c2a:	e007      	b.n	8006c3c <HAL_DMA_Start_IT+0x110>
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f022 0201 	bic.w	r2, r2, #1
 8006c3a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	68b9      	ldr	r1, [r7, #8]
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f001 f906 	bl	8007e54 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a34      	ldr	r2, [pc, #208]	@ (8006d20 <HAL_DMA_Start_IT+0x1f4>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d04a      	beq.n	8006ce8 <HAL_DMA_Start_IT+0x1bc>
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a33      	ldr	r2, [pc, #204]	@ (8006d24 <HAL_DMA_Start_IT+0x1f8>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d045      	beq.n	8006ce8 <HAL_DMA_Start_IT+0x1bc>
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a31      	ldr	r2, [pc, #196]	@ (8006d28 <HAL_DMA_Start_IT+0x1fc>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d040      	beq.n	8006ce8 <HAL_DMA_Start_IT+0x1bc>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a30      	ldr	r2, [pc, #192]	@ (8006d2c <HAL_DMA_Start_IT+0x200>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d03b      	beq.n	8006ce8 <HAL_DMA_Start_IT+0x1bc>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a2e      	ldr	r2, [pc, #184]	@ (8006d30 <HAL_DMA_Start_IT+0x204>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d036      	beq.n	8006ce8 <HAL_DMA_Start_IT+0x1bc>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a2d      	ldr	r2, [pc, #180]	@ (8006d34 <HAL_DMA_Start_IT+0x208>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d031      	beq.n	8006ce8 <HAL_DMA_Start_IT+0x1bc>
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a2b      	ldr	r2, [pc, #172]	@ (8006d38 <HAL_DMA_Start_IT+0x20c>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d02c      	beq.n	8006ce8 <HAL_DMA_Start_IT+0x1bc>
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a2a      	ldr	r2, [pc, #168]	@ (8006d3c <HAL_DMA_Start_IT+0x210>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d027      	beq.n	8006ce8 <HAL_DMA_Start_IT+0x1bc>
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a28      	ldr	r2, [pc, #160]	@ (8006d40 <HAL_DMA_Start_IT+0x214>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d022      	beq.n	8006ce8 <HAL_DMA_Start_IT+0x1bc>
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a27      	ldr	r2, [pc, #156]	@ (8006d44 <HAL_DMA_Start_IT+0x218>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d01d      	beq.n	8006ce8 <HAL_DMA_Start_IT+0x1bc>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a25      	ldr	r2, [pc, #148]	@ (8006d48 <HAL_DMA_Start_IT+0x21c>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d018      	beq.n	8006ce8 <HAL_DMA_Start_IT+0x1bc>
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a24      	ldr	r2, [pc, #144]	@ (8006d4c <HAL_DMA_Start_IT+0x220>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d013      	beq.n	8006ce8 <HAL_DMA_Start_IT+0x1bc>
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a22      	ldr	r2, [pc, #136]	@ (8006d50 <HAL_DMA_Start_IT+0x224>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d00e      	beq.n	8006ce8 <HAL_DMA_Start_IT+0x1bc>
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a21      	ldr	r2, [pc, #132]	@ (8006d54 <HAL_DMA_Start_IT+0x228>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d009      	beq.n	8006ce8 <HAL_DMA_Start_IT+0x1bc>
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a1f      	ldr	r2, [pc, #124]	@ (8006d58 <HAL_DMA_Start_IT+0x22c>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d004      	beq.n	8006ce8 <HAL_DMA_Start_IT+0x1bc>
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a1e      	ldr	r2, [pc, #120]	@ (8006d5c <HAL_DMA_Start_IT+0x230>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d101      	bne.n	8006cec <HAL_DMA_Start_IT+0x1c0>
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e000      	b.n	8006cee <HAL_DMA_Start_IT+0x1c2>
 8006cec:	2300      	movs	r3, #0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d036      	beq.n	8006d60 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f023 021e 	bic.w	r2, r3, #30
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f042 0216 	orr.w	r2, r2, #22
 8006d04:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d03e      	beq.n	8006d8c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f042 0208 	orr.w	r2, r2, #8
 8006d1c:	601a      	str	r2, [r3, #0]
 8006d1e:	e035      	b.n	8006d8c <HAL_DMA_Start_IT+0x260>
 8006d20:	40020010 	.word	0x40020010
 8006d24:	40020028 	.word	0x40020028
 8006d28:	40020040 	.word	0x40020040
 8006d2c:	40020058 	.word	0x40020058
 8006d30:	40020070 	.word	0x40020070
 8006d34:	40020088 	.word	0x40020088
 8006d38:	400200a0 	.word	0x400200a0
 8006d3c:	400200b8 	.word	0x400200b8
 8006d40:	40020410 	.word	0x40020410
 8006d44:	40020428 	.word	0x40020428
 8006d48:	40020440 	.word	0x40020440
 8006d4c:	40020458 	.word	0x40020458
 8006d50:	40020470 	.word	0x40020470
 8006d54:	40020488 	.word	0x40020488
 8006d58:	400204a0 	.word	0x400204a0
 8006d5c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f023 020e 	bic.w	r2, r3, #14
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f042 020a 	orr.w	r2, r2, #10
 8006d72:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d007      	beq.n	8006d8c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f042 0204 	orr.w	r2, r2, #4
 8006d8a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a83      	ldr	r2, [pc, #524]	@ (8006fa0 <HAL_DMA_Start_IT+0x474>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d072      	beq.n	8006e7c <HAL_DMA_Start_IT+0x350>
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a82      	ldr	r2, [pc, #520]	@ (8006fa4 <HAL_DMA_Start_IT+0x478>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d06d      	beq.n	8006e7c <HAL_DMA_Start_IT+0x350>
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a80      	ldr	r2, [pc, #512]	@ (8006fa8 <HAL_DMA_Start_IT+0x47c>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d068      	beq.n	8006e7c <HAL_DMA_Start_IT+0x350>
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a7f      	ldr	r2, [pc, #508]	@ (8006fac <HAL_DMA_Start_IT+0x480>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d063      	beq.n	8006e7c <HAL_DMA_Start_IT+0x350>
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a7d      	ldr	r2, [pc, #500]	@ (8006fb0 <HAL_DMA_Start_IT+0x484>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d05e      	beq.n	8006e7c <HAL_DMA_Start_IT+0x350>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a7c      	ldr	r2, [pc, #496]	@ (8006fb4 <HAL_DMA_Start_IT+0x488>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d059      	beq.n	8006e7c <HAL_DMA_Start_IT+0x350>
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a7a      	ldr	r2, [pc, #488]	@ (8006fb8 <HAL_DMA_Start_IT+0x48c>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d054      	beq.n	8006e7c <HAL_DMA_Start_IT+0x350>
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a79      	ldr	r2, [pc, #484]	@ (8006fbc <HAL_DMA_Start_IT+0x490>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d04f      	beq.n	8006e7c <HAL_DMA_Start_IT+0x350>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a77      	ldr	r2, [pc, #476]	@ (8006fc0 <HAL_DMA_Start_IT+0x494>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d04a      	beq.n	8006e7c <HAL_DMA_Start_IT+0x350>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a76      	ldr	r2, [pc, #472]	@ (8006fc4 <HAL_DMA_Start_IT+0x498>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d045      	beq.n	8006e7c <HAL_DMA_Start_IT+0x350>
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a74      	ldr	r2, [pc, #464]	@ (8006fc8 <HAL_DMA_Start_IT+0x49c>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d040      	beq.n	8006e7c <HAL_DMA_Start_IT+0x350>
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a73      	ldr	r2, [pc, #460]	@ (8006fcc <HAL_DMA_Start_IT+0x4a0>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d03b      	beq.n	8006e7c <HAL_DMA_Start_IT+0x350>
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a71      	ldr	r2, [pc, #452]	@ (8006fd0 <HAL_DMA_Start_IT+0x4a4>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d036      	beq.n	8006e7c <HAL_DMA_Start_IT+0x350>
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a70      	ldr	r2, [pc, #448]	@ (8006fd4 <HAL_DMA_Start_IT+0x4a8>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d031      	beq.n	8006e7c <HAL_DMA_Start_IT+0x350>
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a6e      	ldr	r2, [pc, #440]	@ (8006fd8 <HAL_DMA_Start_IT+0x4ac>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d02c      	beq.n	8006e7c <HAL_DMA_Start_IT+0x350>
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a6d      	ldr	r2, [pc, #436]	@ (8006fdc <HAL_DMA_Start_IT+0x4b0>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d027      	beq.n	8006e7c <HAL_DMA_Start_IT+0x350>
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a6b      	ldr	r2, [pc, #428]	@ (8006fe0 <HAL_DMA_Start_IT+0x4b4>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d022      	beq.n	8006e7c <HAL_DMA_Start_IT+0x350>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a6a      	ldr	r2, [pc, #424]	@ (8006fe4 <HAL_DMA_Start_IT+0x4b8>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d01d      	beq.n	8006e7c <HAL_DMA_Start_IT+0x350>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a68      	ldr	r2, [pc, #416]	@ (8006fe8 <HAL_DMA_Start_IT+0x4bc>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d018      	beq.n	8006e7c <HAL_DMA_Start_IT+0x350>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a67      	ldr	r2, [pc, #412]	@ (8006fec <HAL_DMA_Start_IT+0x4c0>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d013      	beq.n	8006e7c <HAL_DMA_Start_IT+0x350>
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a65      	ldr	r2, [pc, #404]	@ (8006ff0 <HAL_DMA_Start_IT+0x4c4>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d00e      	beq.n	8006e7c <HAL_DMA_Start_IT+0x350>
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a64      	ldr	r2, [pc, #400]	@ (8006ff4 <HAL_DMA_Start_IT+0x4c8>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d009      	beq.n	8006e7c <HAL_DMA_Start_IT+0x350>
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a62      	ldr	r2, [pc, #392]	@ (8006ff8 <HAL_DMA_Start_IT+0x4cc>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d004      	beq.n	8006e7c <HAL_DMA_Start_IT+0x350>
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a61      	ldr	r2, [pc, #388]	@ (8006ffc <HAL_DMA_Start_IT+0x4d0>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d101      	bne.n	8006e80 <HAL_DMA_Start_IT+0x354>
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e000      	b.n	8006e82 <HAL_DMA_Start_IT+0x356>
 8006e80:	2300      	movs	r3, #0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d01a      	beq.n	8006ebc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d007      	beq.n	8006ea4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006ea2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d007      	beq.n	8006ebc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006eb6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006eba:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a37      	ldr	r2, [pc, #220]	@ (8006fa0 <HAL_DMA_Start_IT+0x474>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d04a      	beq.n	8006f5c <HAL_DMA_Start_IT+0x430>
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a36      	ldr	r2, [pc, #216]	@ (8006fa4 <HAL_DMA_Start_IT+0x478>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d045      	beq.n	8006f5c <HAL_DMA_Start_IT+0x430>
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a34      	ldr	r2, [pc, #208]	@ (8006fa8 <HAL_DMA_Start_IT+0x47c>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d040      	beq.n	8006f5c <HAL_DMA_Start_IT+0x430>
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a33      	ldr	r2, [pc, #204]	@ (8006fac <HAL_DMA_Start_IT+0x480>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d03b      	beq.n	8006f5c <HAL_DMA_Start_IT+0x430>
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a31      	ldr	r2, [pc, #196]	@ (8006fb0 <HAL_DMA_Start_IT+0x484>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d036      	beq.n	8006f5c <HAL_DMA_Start_IT+0x430>
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a30      	ldr	r2, [pc, #192]	@ (8006fb4 <HAL_DMA_Start_IT+0x488>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d031      	beq.n	8006f5c <HAL_DMA_Start_IT+0x430>
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a2e      	ldr	r2, [pc, #184]	@ (8006fb8 <HAL_DMA_Start_IT+0x48c>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d02c      	beq.n	8006f5c <HAL_DMA_Start_IT+0x430>
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a2d      	ldr	r2, [pc, #180]	@ (8006fbc <HAL_DMA_Start_IT+0x490>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d027      	beq.n	8006f5c <HAL_DMA_Start_IT+0x430>
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a2b      	ldr	r2, [pc, #172]	@ (8006fc0 <HAL_DMA_Start_IT+0x494>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d022      	beq.n	8006f5c <HAL_DMA_Start_IT+0x430>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a2a      	ldr	r2, [pc, #168]	@ (8006fc4 <HAL_DMA_Start_IT+0x498>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d01d      	beq.n	8006f5c <HAL_DMA_Start_IT+0x430>
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a28      	ldr	r2, [pc, #160]	@ (8006fc8 <HAL_DMA_Start_IT+0x49c>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d018      	beq.n	8006f5c <HAL_DMA_Start_IT+0x430>
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a27      	ldr	r2, [pc, #156]	@ (8006fcc <HAL_DMA_Start_IT+0x4a0>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d013      	beq.n	8006f5c <HAL_DMA_Start_IT+0x430>
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a25      	ldr	r2, [pc, #148]	@ (8006fd0 <HAL_DMA_Start_IT+0x4a4>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d00e      	beq.n	8006f5c <HAL_DMA_Start_IT+0x430>
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a24      	ldr	r2, [pc, #144]	@ (8006fd4 <HAL_DMA_Start_IT+0x4a8>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d009      	beq.n	8006f5c <HAL_DMA_Start_IT+0x430>
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a22      	ldr	r2, [pc, #136]	@ (8006fd8 <HAL_DMA_Start_IT+0x4ac>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d004      	beq.n	8006f5c <HAL_DMA_Start_IT+0x430>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a21      	ldr	r2, [pc, #132]	@ (8006fdc <HAL_DMA_Start_IT+0x4b0>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d108      	bne.n	8006f6e <HAL_DMA_Start_IT+0x442>
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f042 0201 	orr.w	r2, r2, #1
 8006f6a:	601a      	str	r2, [r3, #0]
 8006f6c:	e012      	b.n	8006f94 <HAL_DMA_Start_IT+0x468>
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f042 0201 	orr.w	r2, r2, #1
 8006f7c:	601a      	str	r2, [r3, #0]
 8006f7e:	e009      	b.n	8006f94 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006f86:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006f94:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3718      	adds	r7, #24
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	40020010 	.word	0x40020010
 8006fa4:	40020028 	.word	0x40020028
 8006fa8:	40020040 	.word	0x40020040
 8006fac:	40020058 	.word	0x40020058
 8006fb0:	40020070 	.word	0x40020070
 8006fb4:	40020088 	.word	0x40020088
 8006fb8:	400200a0 	.word	0x400200a0
 8006fbc:	400200b8 	.word	0x400200b8
 8006fc0:	40020410 	.word	0x40020410
 8006fc4:	40020428 	.word	0x40020428
 8006fc8:	40020440 	.word	0x40020440
 8006fcc:	40020458 	.word	0x40020458
 8006fd0:	40020470 	.word	0x40020470
 8006fd4:	40020488 	.word	0x40020488
 8006fd8:	400204a0 	.word	0x400204a0
 8006fdc:	400204b8 	.word	0x400204b8
 8006fe0:	58025408 	.word	0x58025408
 8006fe4:	5802541c 	.word	0x5802541c
 8006fe8:	58025430 	.word	0x58025430
 8006fec:	58025444 	.word	0x58025444
 8006ff0:	58025458 	.word	0x58025458
 8006ff4:	5802546c 	.word	0x5802546c
 8006ff8:	58025480 	.word	0x58025480
 8006ffc:	58025494 	.word	0x58025494

08007000 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b08a      	sub	sp, #40	@ 0x28
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007008:	2300      	movs	r3, #0
 800700a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800700c:	4b67      	ldr	r3, [pc, #412]	@ (80071ac <HAL_DMA_IRQHandler+0x1ac>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a67      	ldr	r2, [pc, #412]	@ (80071b0 <HAL_DMA_IRQHandler+0x1b0>)
 8007012:	fba2 2303 	umull	r2, r3, r2, r3
 8007016:	0a9b      	lsrs	r3, r3, #10
 8007018:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800701e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007024:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007026:	6a3b      	ldr	r3, [r7, #32]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a5f      	ldr	r2, [pc, #380]	@ (80071b4 <HAL_DMA_IRQHandler+0x1b4>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d04a      	beq.n	80070d2 <HAL_DMA_IRQHandler+0xd2>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a5d      	ldr	r2, [pc, #372]	@ (80071b8 <HAL_DMA_IRQHandler+0x1b8>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d045      	beq.n	80070d2 <HAL_DMA_IRQHandler+0xd2>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a5c      	ldr	r2, [pc, #368]	@ (80071bc <HAL_DMA_IRQHandler+0x1bc>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d040      	beq.n	80070d2 <HAL_DMA_IRQHandler+0xd2>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a5a      	ldr	r2, [pc, #360]	@ (80071c0 <HAL_DMA_IRQHandler+0x1c0>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d03b      	beq.n	80070d2 <HAL_DMA_IRQHandler+0xd2>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a59      	ldr	r2, [pc, #356]	@ (80071c4 <HAL_DMA_IRQHandler+0x1c4>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d036      	beq.n	80070d2 <HAL_DMA_IRQHandler+0xd2>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a57      	ldr	r2, [pc, #348]	@ (80071c8 <HAL_DMA_IRQHandler+0x1c8>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d031      	beq.n	80070d2 <HAL_DMA_IRQHandler+0xd2>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a56      	ldr	r2, [pc, #344]	@ (80071cc <HAL_DMA_IRQHandler+0x1cc>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d02c      	beq.n	80070d2 <HAL_DMA_IRQHandler+0xd2>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a54      	ldr	r2, [pc, #336]	@ (80071d0 <HAL_DMA_IRQHandler+0x1d0>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d027      	beq.n	80070d2 <HAL_DMA_IRQHandler+0xd2>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a53      	ldr	r2, [pc, #332]	@ (80071d4 <HAL_DMA_IRQHandler+0x1d4>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d022      	beq.n	80070d2 <HAL_DMA_IRQHandler+0xd2>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a51      	ldr	r2, [pc, #324]	@ (80071d8 <HAL_DMA_IRQHandler+0x1d8>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d01d      	beq.n	80070d2 <HAL_DMA_IRQHandler+0xd2>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a50      	ldr	r2, [pc, #320]	@ (80071dc <HAL_DMA_IRQHandler+0x1dc>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d018      	beq.n	80070d2 <HAL_DMA_IRQHandler+0xd2>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a4e      	ldr	r2, [pc, #312]	@ (80071e0 <HAL_DMA_IRQHandler+0x1e0>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d013      	beq.n	80070d2 <HAL_DMA_IRQHandler+0xd2>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a4d      	ldr	r2, [pc, #308]	@ (80071e4 <HAL_DMA_IRQHandler+0x1e4>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d00e      	beq.n	80070d2 <HAL_DMA_IRQHandler+0xd2>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a4b      	ldr	r2, [pc, #300]	@ (80071e8 <HAL_DMA_IRQHandler+0x1e8>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d009      	beq.n	80070d2 <HAL_DMA_IRQHandler+0xd2>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a4a      	ldr	r2, [pc, #296]	@ (80071ec <HAL_DMA_IRQHandler+0x1ec>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d004      	beq.n	80070d2 <HAL_DMA_IRQHandler+0xd2>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a48      	ldr	r2, [pc, #288]	@ (80071f0 <HAL_DMA_IRQHandler+0x1f0>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d101      	bne.n	80070d6 <HAL_DMA_IRQHandler+0xd6>
 80070d2:	2301      	movs	r3, #1
 80070d4:	e000      	b.n	80070d8 <HAL_DMA_IRQHandler+0xd8>
 80070d6:	2300      	movs	r3, #0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	f000 842b 	beq.w	8007934 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070e2:	f003 031f 	and.w	r3, r3, #31
 80070e6:	2208      	movs	r2, #8
 80070e8:	409a      	lsls	r2, r3
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	4013      	ands	r3, r2
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	f000 80a2 	beq.w	8007238 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a2e      	ldr	r2, [pc, #184]	@ (80071b4 <HAL_DMA_IRQHandler+0x1b4>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d04a      	beq.n	8007194 <HAL_DMA_IRQHandler+0x194>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a2d      	ldr	r2, [pc, #180]	@ (80071b8 <HAL_DMA_IRQHandler+0x1b8>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d045      	beq.n	8007194 <HAL_DMA_IRQHandler+0x194>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a2b      	ldr	r2, [pc, #172]	@ (80071bc <HAL_DMA_IRQHandler+0x1bc>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d040      	beq.n	8007194 <HAL_DMA_IRQHandler+0x194>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a2a      	ldr	r2, [pc, #168]	@ (80071c0 <HAL_DMA_IRQHandler+0x1c0>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d03b      	beq.n	8007194 <HAL_DMA_IRQHandler+0x194>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a28      	ldr	r2, [pc, #160]	@ (80071c4 <HAL_DMA_IRQHandler+0x1c4>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d036      	beq.n	8007194 <HAL_DMA_IRQHandler+0x194>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a27      	ldr	r2, [pc, #156]	@ (80071c8 <HAL_DMA_IRQHandler+0x1c8>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d031      	beq.n	8007194 <HAL_DMA_IRQHandler+0x194>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a25      	ldr	r2, [pc, #148]	@ (80071cc <HAL_DMA_IRQHandler+0x1cc>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d02c      	beq.n	8007194 <HAL_DMA_IRQHandler+0x194>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a24      	ldr	r2, [pc, #144]	@ (80071d0 <HAL_DMA_IRQHandler+0x1d0>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d027      	beq.n	8007194 <HAL_DMA_IRQHandler+0x194>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a22      	ldr	r2, [pc, #136]	@ (80071d4 <HAL_DMA_IRQHandler+0x1d4>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d022      	beq.n	8007194 <HAL_DMA_IRQHandler+0x194>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a21      	ldr	r2, [pc, #132]	@ (80071d8 <HAL_DMA_IRQHandler+0x1d8>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d01d      	beq.n	8007194 <HAL_DMA_IRQHandler+0x194>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a1f      	ldr	r2, [pc, #124]	@ (80071dc <HAL_DMA_IRQHandler+0x1dc>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d018      	beq.n	8007194 <HAL_DMA_IRQHandler+0x194>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a1e      	ldr	r2, [pc, #120]	@ (80071e0 <HAL_DMA_IRQHandler+0x1e0>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d013      	beq.n	8007194 <HAL_DMA_IRQHandler+0x194>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a1c      	ldr	r2, [pc, #112]	@ (80071e4 <HAL_DMA_IRQHandler+0x1e4>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d00e      	beq.n	8007194 <HAL_DMA_IRQHandler+0x194>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a1b      	ldr	r2, [pc, #108]	@ (80071e8 <HAL_DMA_IRQHandler+0x1e8>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d009      	beq.n	8007194 <HAL_DMA_IRQHandler+0x194>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a19      	ldr	r2, [pc, #100]	@ (80071ec <HAL_DMA_IRQHandler+0x1ec>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d004      	beq.n	8007194 <HAL_DMA_IRQHandler+0x194>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a18      	ldr	r2, [pc, #96]	@ (80071f0 <HAL_DMA_IRQHandler+0x1f0>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d12f      	bne.n	80071f4 <HAL_DMA_IRQHandler+0x1f4>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 0304 	and.w	r3, r3, #4
 800719e:	2b00      	cmp	r3, #0
 80071a0:	bf14      	ite	ne
 80071a2:	2301      	movne	r3, #1
 80071a4:	2300      	moveq	r3, #0
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	e02e      	b.n	8007208 <HAL_DMA_IRQHandler+0x208>
 80071aa:	bf00      	nop
 80071ac:	24000024 	.word	0x24000024
 80071b0:	1b4e81b5 	.word	0x1b4e81b5
 80071b4:	40020010 	.word	0x40020010
 80071b8:	40020028 	.word	0x40020028
 80071bc:	40020040 	.word	0x40020040
 80071c0:	40020058 	.word	0x40020058
 80071c4:	40020070 	.word	0x40020070
 80071c8:	40020088 	.word	0x40020088
 80071cc:	400200a0 	.word	0x400200a0
 80071d0:	400200b8 	.word	0x400200b8
 80071d4:	40020410 	.word	0x40020410
 80071d8:	40020428 	.word	0x40020428
 80071dc:	40020440 	.word	0x40020440
 80071e0:	40020458 	.word	0x40020458
 80071e4:	40020470 	.word	0x40020470
 80071e8:	40020488 	.word	0x40020488
 80071ec:	400204a0 	.word	0x400204a0
 80071f0:	400204b8 	.word	0x400204b8
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f003 0308 	and.w	r3, r3, #8
 80071fe:	2b00      	cmp	r3, #0
 8007200:	bf14      	ite	ne
 8007202:	2301      	movne	r3, #1
 8007204:	2300      	moveq	r3, #0
 8007206:	b2db      	uxtb	r3, r3
 8007208:	2b00      	cmp	r3, #0
 800720a:	d015      	beq.n	8007238 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f022 0204 	bic.w	r2, r2, #4
 800721a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007220:	f003 031f 	and.w	r3, r3, #31
 8007224:	2208      	movs	r2, #8
 8007226:	409a      	lsls	r2, r3
 8007228:	6a3b      	ldr	r3, [r7, #32]
 800722a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007230:	f043 0201 	orr.w	r2, r3, #1
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800723c:	f003 031f 	and.w	r3, r3, #31
 8007240:	69ba      	ldr	r2, [r7, #24]
 8007242:	fa22 f303 	lsr.w	r3, r2, r3
 8007246:	f003 0301 	and.w	r3, r3, #1
 800724a:	2b00      	cmp	r3, #0
 800724c:	d06e      	beq.n	800732c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a69      	ldr	r2, [pc, #420]	@ (80073f8 <HAL_DMA_IRQHandler+0x3f8>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d04a      	beq.n	80072ee <HAL_DMA_IRQHandler+0x2ee>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a67      	ldr	r2, [pc, #412]	@ (80073fc <HAL_DMA_IRQHandler+0x3fc>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d045      	beq.n	80072ee <HAL_DMA_IRQHandler+0x2ee>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a66      	ldr	r2, [pc, #408]	@ (8007400 <HAL_DMA_IRQHandler+0x400>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d040      	beq.n	80072ee <HAL_DMA_IRQHandler+0x2ee>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a64      	ldr	r2, [pc, #400]	@ (8007404 <HAL_DMA_IRQHandler+0x404>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d03b      	beq.n	80072ee <HAL_DMA_IRQHandler+0x2ee>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a63      	ldr	r2, [pc, #396]	@ (8007408 <HAL_DMA_IRQHandler+0x408>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d036      	beq.n	80072ee <HAL_DMA_IRQHandler+0x2ee>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a61      	ldr	r2, [pc, #388]	@ (800740c <HAL_DMA_IRQHandler+0x40c>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d031      	beq.n	80072ee <HAL_DMA_IRQHandler+0x2ee>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a60      	ldr	r2, [pc, #384]	@ (8007410 <HAL_DMA_IRQHandler+0x410>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d02c      	beq.n	80072ee <HAL_DMA_IRQHandler+0x2ee>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a5e      	ldr	r2, [pc, #376]	@ (8007414 <HAL_DMA_IRQHandler+0x414>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d027      	beq.n	80072ee <HAL_DMA_IRQHandler+0x2ee>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a5d      	ldr	r2, [pc, #372]	@ (8007418 <HAL_DMA_IRQHandler+0x418>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d022      	beq.n	80072ee <HAL_DMA_IRQHandler+0x2ee>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a5b      	ldr	r2, [pc, #364]	@ (800741c <HAL_DMA_IRQHandler+0x41c>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d01d      	beq.n	80072ee <HAL_DMA_IRQHandler+0x2ee>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a5a      	ldr	r2, [pc, #360]	@ (8007420 <HAL_DMA_IRQHandler+0x420>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d018      	beq.n	80072ee <HAL_DMA_IRQHandler+0x2ee>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a58      	ldr	r2, [pc, #352]	@ (8007424 <HAL_DMA_IRQHandler+0x424>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d013      	beq.n	80072ee <HAL_DMA_IRQHandler+0x2ee>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a57      	ldr	r2, [pc, #348]	@ (8007428 <HAL_DMA_IRQHandler+0x428>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d00e      	beq.n	80072ee <HAL_DMA_IRQHandler+0x2ee>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a55      	ldr	r2, [pc, #340]	@ (800742c <HAL_DMA_IRQHandler+0x42c>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d009      	beq.n	80072ee <HAL_DMA_IRQHandler+0x2ee>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a54      	ldr	r2, [pc, #336]	@ (8007430 <HAL_DMA_IRQHandler+0x430>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d004      	beq.n	80072ee <HAL_DMA_IRQHandler+0x2ee>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a52      	ldr	r2, [pc, #328]	@ (8007434 <HAL_DMA_IRQHandler+0x434>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d10a      	bne.n	8007304 <HAL_DMA_IRQHandler+0x304>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	695b      	ldr	r3, [r3, #20]
 80072f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	bf14      	ite	ne
 80072fc:	2301      	movne	r3, #1
 80072fe:	2300      	moveq	r3, #0
 8007300:	b2db      	uxtb	r3, r3
 8007302:	e003      	b.n	800730c <HAL_DMA_IRQHandler+0x30c>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	2300      	movs	r3, #0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d00d      	beq.n	800732c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007314:	f003 031f 	and.w	r3, r3, #31
 8007318:	2201      	movs	r2, #1
 800731a:	409a      	lsls	r2, r3
 800731c:	6a3b      	ldr	r3, [r7, #32]
 800731e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007324:	f043 0202 	orr.w	r2, r3, #2
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007330:	f003 031f 	and.w	r3, r3, #31
 8007334:	2204      	movs	r2, #4
 8007336:	409a      	lsls	r2, r3
 8007338:	69bb      	ldr	r3, [r7, #24]
 800733a:	4013      	ands	r3, r2
 800733c:	2b00      	cmp	r3, #0
 800733e:	f000 808f 	beq.w	8007460 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a2c      	ldr	r2, [pc, #176]	@ (80073f8 <HAL_DMA_IRQHandler+0x3f8>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d04a      	beq.n	80073e2 <HAL_DMA_IRQHandler+0x3e2>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a2a      	ldr	r2, [pc, #168]	@ (80073fc <HAL_DMA_IRQHandler+0x3fc>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d045      	beq.n	80073e2 <HAL_DMA_IRQHandler+0x3e2>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a29      	ldr	r2, [pc, #164]	@ (8007400 <HAL_DMA_IRQHandler+0x400>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d040      	beq.n	80073e2 <HAL_DMA_IRQHandler+0x3e2>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a27      	ldr	r2, [pc, #156]	@ (8007404 <HAL_DMA_IRQHandler+0x404>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d03b      	beq.n	80073e2 <HAL_DMA_IRQHandler+0x3e2>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a26      	ldr	r2, [pc, #152]	@ (8007408 <HAL_DMA_IRQHandler+0x408>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d036      	beq.n	80073e2 <HAL_DMA_IRQHandler+0x3e2>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a24      	ldr	r2, [pc, #144]	@ (800740c <HAL_DMA_IRQHandler+0x40c>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d031      	beq.n	80073e2 <HAL_DMA_IRQHandler+0x3e2>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a23      	ldr	r2, [pc, #140]	@ (8007410 <HAL_DMA_IRQHandler+0x410>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d02c      	beq.n	80073e2 <HAL_DMA_IRQHandler+0x3e2>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a21      	ldr	r2, [pc, #132]	@ (8007414 <HAL_DMA_IRQHandler+0x414>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d027      	beq.n	80073e2 <HAL_DMA_IRQHandler+0x3e2>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a20      	ldr	r2, [pc, #128]	@ (8007418 <HAL_DMA_IRQHandler+0x418>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d022      	beq.n	80073e2 <HAL_DMA_IRQHandler+0x3e2>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a1e      	ldr	r2, [pc, #120]	@ (800741c <HAL_DMA_IRQHandler+0x41c>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d01d      	beq.n	80073e2 <HAL_DMA_IRQHandler+0x3e2>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a1d      	ldr	r2, [pc, #116]	@ (8007420 <HAL_DMA_IRQHandler+0x420>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d018      	beq.n	80073e2 <HAL_DMA_IRQHandler+0x3e2>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a1b      	ldr	r2, [pc, #108]	@ (8007424 <HAL_DMA_IRQHandler+0x424>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d013      	beq.n	80073e2 <HAL_DMA_IRQHandler+0x3e2>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a1a      	ldr	r2, [pc, #104]	@ (8007428 <HAL_DMA_IRQHandler+0x428>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d00e      	beq.n	80073e2 <HAL_DMA_IRQHandler+0x3e2>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a18      	ldr	r2, [pc, #96]	@ (800742c <HAL_DMA_IRQHandler+0x42c>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d009      	beq.n	80073e2 <HAL_DMA_IRQHandler+0x3e2>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a17      	ldr	r2, [pc, #92]	@ (8007430 <HAL_DMA_IRQHandler+0x430>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d004      	beq.n	80073e2 <HAL_DMA_IRQHandler+0x3e2>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a15      	ldr	r2, [pc, #84]	@ (8007434 <HAL_DMA_IRQHandler+0x434>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d12a      	bne.n	8007438 <HAL_DMA_IRQHandler+0x438>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f003 0302 	and.w	r3, r3, #2
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	bf14      	ite	ne
 80073f0:	2301      	movne	r3, #1
 80073f2:	2300      	moveq	r3, #0
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	e023      	b.n	8007440 <HAL_DMA_IRQHandler+0x440>
 80073f8:	40020010 	.word	0x40020010
 80073fc:	40020028 	.word	0x40020028
 8007400:	40020040 	.word	0x40020040
 8007404:	40020058 	.word	0x40020058
 8007408:	40020070 	.word	0x40020070
 800740c:	40020088 	.word	0x40020088
 8007410:	400200a0 	.word	0x400200a0
 8007414:	400200b8 	.word	0x400200b8
 8007418:	40020410 	.word	0x40020410
 800741c:	40020428 	.word	0x40020428
 8007420:	40020440 	.word	0x40020440
 8007424:	40020458 	.word	0x40020458
 8007428:	40020470 	.word	0x40020470
 800742c:	40020488 	.word	0x40020488
 8007430:	400204a0 	.word	0x400204a0
 8007434:	400204b8 	.word	0x400204b8
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	2300      	movs	r3, #0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00d      	beq.n	8007460 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007448:	f003 031f 	and.w	r3, r3, #31
 800744c:	2204      	movs	r2, #4
 800744e:	409a      	lsls	r2, r3
 8007450:	6a3b      	ldr	r3, [r7, #32]
 8007452:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007458:	f043 0204 	orr.w	r2, r3, #4
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007464:	f003 031f 	and.w	r3, r3, #31
 8007468:	2210      	movs	r2, #16
 800746a:	409a      	lsls	r2, r3
 800746c:	69bb      	ldr	r3, [r7, #24]
 800746e:	4013      	ands	r3, r2
 8007470:	2b00      	cmp	r3, #0
 8007472:	f000 80a6 	beq.w	80075c2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a85      	ldr	r2, [pc, #532]	@ (8007690 <HAL_DMA_IRQHandler+0x690>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d04a      	beq.n	8007516 <HAL_DMA_IRQHandler+0x516>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a83      	ldr	r2, [pc, #524]	@ (8007694 <HAL_DMA_IRQHandler+0x694>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d045      	beq.n	8007516 <HAL_DMA_IRQHandler+0x516>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a82      	ldr	r2, [pc, #520]	@ (8007698 <HAL_DMA_IRQHandler+0x698>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d040      	beq.n	8007516 <HAL_DMA_IRQHandler+0x516>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a80      	ldr	r2, [pc, #512]	@ (800769c <HAL_DMA_IRQHandler+0x69c>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d03b      	beq.n	8007516 <HAL_DMA_IRQHandler+0x516>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a7f      	ldr	r2, [pc, #508]	@ (80076a0 <HAL_DMA_IRQHandler+0x6a0>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d036      	beq.n	8007516 <HAL_DMA_IRQHandler+0x516>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a7d      	ldr	r2, [pc, #500]	@ (80076a4 <HAL_DMA_IRQHandler+0x6a4>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d031      	beq.n	8007516 <HAL_DMA_IRQHandler+0x516>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a7c      	ldr	r2, [pc, #496]	@ (80076a8 <HAL_DMA_IRQHandler+0x6a8>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d02c      	beq.n	8007516 <HAL_DMA_IRQHandler+0x516>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a7a      	ldr	r2, [pc, #488]	@ (80076ac <HAL_DMA_IRQHandler+0x6ac>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d027      	beq.n	8007516 <HAL_DMA_IRQHandler+0x516>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a79      	ldr	r2, [pc, #484]	@ (80076b0 <HAL_DMA_IRQHandler+0x6b0>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d022      	beq.n	8007516 <HAL_DMA_IRQHandler+0x516>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a77      	ldr	r2, [pc, #476]	@ (80076b4 <HAL_DMA_IRQHandler+0x6b4>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d01d      	beq.n	8007516 <HAL_DMA_IRQHandler+0x516>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a76      	ldr	r2, [pc, #472]	@ (80076b8 <HAL_DMA_IRQHandler+0x6b8>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d018      	beq.n	8007516 <HAL_DMA_IRQHandler+0x516>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a74      	ldr	r2, [pc, #464]	@ (80076bc <HAL_DMA_IRQHandler+0x6bc>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d013      	beq.n	8007516 <HAL_DMA_IRQHandler+0x516>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a73      	ldr	r2, [pc, #460]	@ (80076c0 <HAL_DMA_IRQHandler+0x6c0>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d00e      	beq.n	8007516 <HAL_DMA_IRQHandler+0x516>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a71      	ldr	r2, [pc, #452]	@ (80076c4 <HAL_DMA_IRQHandler+0x6c4>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d009      	beq.n	8007516 <HAL_DMA_IRQHandler+0x516>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a70      	ldr	r2, [pc, #448]	@ (80076c8 <HAL_DMA_IRQHandler+0x6c8>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d004      	beq.n	8007516 <HAL_DMA_IRQHandler+0x516>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a6e      	ldr	r2, [pc, #440]	@ (80076cc <HAL_DMA_IRQHandler+0x6cc>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d10a      	bne.n	800752c <HAL_DMA_IRQHandler+0x52c>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 0308 	and.w	r3, r3, #8
 8007520:	2b00      	cmp	r3, #0
 8007522:	bf14      	ite	ne
 8007524:	2301      	movne	r3, #1
 8007526:	2300      	moveq	r3, #0
 8007528:	b2db      	uxtb	r3, r3
 800752a:	e009      	b.n	8007540 <HAL_DMA_IRQHandler+0x540>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f003 0304 	and.w	r3, r3, #4
 8007536:	2b00      	cmp	r3, #0
 8007538:	bf14      	ite	ne
 800753a:	2301      	movne	r3, #1
 800753c:	2300      	moveq	r3, #0
 800753e:	b2db      	uxtb	r3, r3
 8007540:	2b00      	cmp	r3, #0
 8007542:	d03e      	beq.n	80075c2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007548:	f003 031f 	and.w	r3, r3, #31
 800754c:	2210      	movs	r2, #16
 800754e:	409a      	lsls	r2, r3
 8007550:	6a3b      	ldr	r3, [r7, #32]
 8007552:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800755e:	2b00      	cmp	r3, #0
 8007560:	d018      	beq.n	8007594 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800756c:	2b00      	cmp	r3, #0
 800756e:	d108      	bne.n	8007582 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007574:	2b00      	cmp	r3, #0
 8007576:	d024      	beq.n	80075c2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	4798      	blx	r3
 8007580:	e01f      	b.n	80075c2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007586:	2b00      	cmp	r3, #0
 8007588:	d01b      	beq.n	80075c2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	4798      	blx	r3
 8007592:	e016      	b.n	80075c2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d107      	bne.n	80075b2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f022 0208 	bic.w	r2, r2, #8
 80075b0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d003      	beq.n	80075c2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075c6:	f003 031f 	and.w	r3, r3, #31
 80075ca:	2220      	movs	r2, #32
 80075cc:	409a      	lsls	r2, r3
 80075ce:	69bb      	ldr	r3, [r7, #24]
 80075d0:	4013      	ands	r3, r2
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f000 8110 	beq.w	80077f8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a2c      	ldr	r2, [pc, #176]	@ (8007690 <HAL_DMA_IRQHandler+0x690>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d04a      	beq.n	8007678 <HAL_DMA_IRQHandler+0x678>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a2b      	ldr	r2, [pc, #172]	@ (8007694 <HAL_DMA_IRQHandler+0x694>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d045      	beq.n	8007678 <HAL_DMA_IRQHandler+0x678>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a29      	ldr	r2, [pc, #164]	@ (8007698 <HAL_DMA_IRQHandler+0x698>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d040      	beq.n	8007678 <HAL_DMA_IRQHandler+0x678>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a28      	ldr	r2, [pc, #160]	@ (800769c <HAL_DMA_IRQHandler+0x69c>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d03b      	beq.n	8007678 <HAL_DMA_IRQHandler+0x678>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a26      	ldr	r2, [pc, #152]	@ (80076a0 <HAL_DMA_IRQHandler+0x6a0>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d036      	beq.n	8007678 <HAL_DMA_IRQHandler+0x678>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a25      	ldr	r2, [pc, #148]	@ (80076a4 <HAL_DMA_IRQHandler+0x6a4>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d031      	beq.n	8007678 <HAL_DMA_IRQHandler+0x678>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a23      	ldr	r2, [pc, #140]	@ (80076a8 <HAL_DMA_IRQHandler+0x6a8>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d02c      	beq.n	8007678 <HAL_DMA_IRQHandler+0x678>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a22      	ldr	r2, [pc, #136]	@ (80076ac <HAL_DMA_IRQHandler+0x6ac>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d027      	beq.n	8007678 <HAL_DMA_IRQHandler+0x678>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a20      	ldr	r2, [pc, #128]	@ (80076b0 <HAL_DMA_IRQHandler+0x6b0>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d022      	beq.n	8007678 <HAL_DMA_IRQHandler+0x678>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a1f      	ldr	r2, [pc, #124]	@ (80076b4 <HAL_DMA_IRQHandler+0x6b4>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d01d      	beq.n	8007678 <HAL_DMA_IRQHandler+0x678>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a1d      	ldr	r2, [pc, #116]	@ (80076b8 <HAL_DMA_IRQHandler+0x6b8>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d018      	beq.n	8007678 <HAL_DMA_IRQHandler+0x678>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a1c      	ldr	r2, [pc, #112]	@ (80076bc <HAL_DMA_IRQHandler+0x6bc>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d013      	beq.n	8007678 <HAL_DMA_IRQHandler+0x678>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a1a      	ldr	r2, [pc, #104]	@ (80076c0 <HAL_DMA_IRQHandler+0x6c0>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d00e      	beq.n	8007678 <HAL_DMA_IRQHandler+0x678>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a19      	ldr	r2, [pc, #100]	@ (80076c4 <HAL_DMA_IRQHandler+0x6c4>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d009      	beq.n	8007678 <HAL_DMA_IRQHandler+0x678>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a17      	ldr	r2, [pc, #92]	@ (80076c8 <HAL_DMA_IRQHandler+0x6c8>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d004      	beq.n	8007678 <HAL_DMA_IRQHandler+0x678>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a16      	ldr	r2, [pc, #88]	@ (80076cc <HAL_DMA_IRQHandler+0x6cc>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d12b      	bne.n	80076d0 <HAL_DMA_IRQHandler+0x6d0>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f003 0310 	and.w	r3, r3, #16
 8007682:	2b00      	cmp	r3, #0
 8007684:	bf14      	ite	ne
 8007686:	2301      	movne	r3, #1
 8007688:	2300      	moveq	r3, #0
 800768a:	b2db      	uxtb	r3, r3
 800768c:	e02a      	b.n	80076e4 <HAL_DMA_IRQHandler+0x6e4>
 800768e:	bf00      	nop
 8007690:	40020010 	.word	0x40020010
 8007694:	40020028 	.word	0x40020028
 8007698:	40020040 	.word	0x40020040
 800769c:	40020058 	.word	0x40020058
 80076a0:	40020070 	.word	0x40020070
 80076a4:	40020088 	.word	0x40020088
 80076a8:	400200a0 	.word	0x400200a0
 80076ac:	400200b8 	.word	0x400200b8
 80076b0:	40020410 	.word	0x40020410
 80076b4:	40020428 	.word	0x40020428
 80076b8:	40020440 	.word	0x40020440
 80076bc:	40020458 	.word	0x40020458
 80076c0:	40020470 	.word	0x40020470
 80076c4:	40020488 	.word	0x40020488
 80076c8:	400204a0 	.word	0x400204a0
 80076cc:	400204b8 	.word	0x400204b8
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 0302 	and.w	r3, r3, #2
 80076da:	2b00      	cmp	r3, #0
 80076dc:	bf14      	ite	ne
 80076de:	2301      	movne	r3, #1
 80076e0:	2300      	moveq	r3, #0
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	f000 8087 	beq.w	80077f8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076ee:	f003 031f 	and.w	r3, r3, #31
 80076f2:	2220      	movs	r2, #32
 80076f4:	409a      	lsls	r2, r3
 80076f6:	6a3b      	ldr	r3, [r7, #32]
 80076f8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007700:	b2db      	uxtb	r3, r3
 8007702:	2b04      	cmp	r3, #4
 8007704:	d139      	bne.n	800777a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f022 0216 	bic.w	r2, r2, #22
 8007714:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	695a      	ldr	r2, [r3, #20]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007724:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800772a:	2b00      	cmp	r3, #0
 800772c:	d103      	bne.n	8007736 <HAL_DMA_IRQHandler+0x736>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007732:	2b00      	cmp	r3, #0
 8007734:	d007      	beq.n	8007746 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f022 0208 	bic.w	r2, r2, #8
 8007744:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800774a:	f003 031f 	and.w	r3, r3, #31
 800774e:	223f      	movs	r2, #63	@ 0x3f
 8007750:	409a      	lsls	r2, r3
 8007752:	6a3b      	ldr	r3, [r7, #32]
 8007754:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2201      	movs	r2, #1
 800775a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800776a:	2b00      	cmp	r3, #0
 800776c:	f000 834a 	beq.w	8007e04 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	4798      	blx	r3
          }
          return;
 8007778:	e344      	b.n	8007e04 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007784:	2b00      	cmp	r3, #0
 8007786:	d018      	beq.n	80077ba <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007792:	2b00      	cmp	r3, #0
 8007794:	d108      	bne.n	80077a8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800779a:	2b00      	cmp	r3, #0
 800779c:	d02c      	beq.n	80077f8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	4798      	blx	r3
 80077a6:	e027      	b.n	80077f8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d023      	beq.n	80077f8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	4798      	blx	r3
 80077b8:	e01e      	b.n	80077f8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d10f      	bne.n	80077e8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f022 0210 	bic.w	r2, r2, #16
 80077d6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d003      	beq.n	80077f8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f000 8306 	beq.w	8007e0e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007806:	f003 0301 	and.w	r3, r3, #1
 800780a:	2b00      	cmp	r3, #0
 800780c:	f000 8088 	beq.w	8007920 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2204      	movs	r2, #4
 8007814:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a7a      	ldr	r2, [pc, #488]	@ (8007a08 <HAL_DMA_IRQHandler+0xa08>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d04a      	beq.n	80078b8 <HAL_DMA_IRQHandler+0x8b8>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a79      	ldr	r2, [pc, #484]	@ (8007a0c <HAL_DMA_IRQHandler+0xa0c>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d045      	beq.n	80078b8 <HAL_DMA_IRQHandler+0x8b8>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a77      	ldr	r2, [pc, #476]	@ (8007a10 <HAL_DMA_IRQHandler+0xa10>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d040      	beq.n	80078b8 <HAL_DMA_IRQHandler+0x8b8>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a76      	ldr	r2, [pc, #472]	@ (8007a14 <HAL_DMA_IRQHandler+0xa14>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d03b      	beq.n	80078b8 <HAL_DMA_IRQHandler+0x8b8>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a74      	ldr	r2, [pc, #464]	@ (8007a18 <HAL_DMA_IRQHandler+0xa18>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d036      	beq.n	80078b8 <HAL_DMA_IRQHandler+0x8b8>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a73      	ldr	r2, [pc, #460]	@ (8007a1c <HAL_DMA_IRQHandler+0xa1c>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d031      	beq.n	80078b8 <HAL_DMA_IRQHandler+0x8b8>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a71      	ldr	r2, [pc, #452]	@ (8007a20 <HAL_DMA_IRQHandler+0xa20>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d02c      	beq.n	80078b8 <HAL_DMA_IRQHandler+0x8b8>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a70      	ldr	r2, [pc, #448]	@ (8007a24 <HAL_DMA_IRQHandler+0xa24>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d027      	beq.n	80078b8 <HAL_DMA_IRQHandler+0x8b8>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a6e      	ldr	r2, [pc, #440]	@ (8007a28 <HAL_DMA_IRQHandler+0xa28>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d022      	beq.n	80078b8 <HAL_DMA_IRQHandler+0x8b8>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a6d      	ldr	r2, [pc, #436]	@ (8007a2c <HAL_DMA_IRQHandler+0xa2c>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d01d      	beq.n	80078b8 <HAL_DMA_IRQHandler+0x8b8>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a6b      	ldr	r2, [pc, #428]	@ (8007a30 <HAL_DMA_IRQHandler+0xa30>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d018      	beq.n	80078b8 <HAL_DMA_IRQHandler+0x8b8>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a6a      	ldr	r2, [pc, #424]	@ (8007a34 <HAL_DMA_IRQHandler+0xa34>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d013      	beq.n	80078b8 <HAL_DMA_IRQHandler+0x8b8>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a68      	ldr	r2, [pc, #416]	@ (8007a38 <HAL_DMA_IRQHandler+0xa38>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d00e      	beq.n	80078b8 <HAL_DMA_IRQHandler+0x8b8>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a67      	ldr	r2, [pc, #412]	@ (8007a3c <HAL_DMA_IRQHandler+0xa3c>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d009      	beq.n	80078b8 <HAL_DMA_IRQHandler+0x8b8>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a65      	ldr	r2, [pc, #404]	@ (8007a40 <HAL_DMA_IRQHandler+0xa40>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d004      	beq.n	80078b8 <HAL_DMA_IRQHandler+0x8b8>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a64      	ldr	r2, [pc, #400]	@ (8007a44 <HAL_DMA_IRQHandler+0xa44>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d108      	bne.n	80078ca <HAL_DMA_IRQHandler+0x8ca>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f022 0201 	bic.w	r2, r2, #1
 80078c6:	601a      	str	r2, [r3, #0]
 80078c8:	e007      	b.n	80078da <HAL_DMA_IRQHandler+0x8da>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f022 0201 	bic.w	r2, r2, #1
 80078d8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	3301      	adds	r3, #1
 80078de:	60fb      	str	r3, [r7, #12]
 80078e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d307      	bcc.n	80078f6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f003 0301 	and.w	r3, r3, #1
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d1f2      	bne.n	80078da <HAL_DMA_IRQHandler+0x8da>
 80078f4:	e000      	b.n	80078f8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80078f6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f003 0301 	and.w	r3, r3, #1
 8007902:	2b00      	cmp	r3, #0
 8007904:	d004      	beq.n	8007910 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2203      	movs	r2, #3
 800790a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800790e:	e003      	b.n	8007918 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2201      	movs	r2, #1
 8007914:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007924:	2b00      	cmp	r3, #0
 8007926:	f000 8272 	beq.w	8007e0e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	4798      	blx	r3
 8007932:	e26c      	b.n	8007e0e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a43      	ldr	r2, [pc, #268]	@ (8007a48 <HAL_DMA_IRQHandler+0xa48>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d022      	beq.n	8007984 <HAL_DMA_IRQHandler+0x984>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a42      	ldr	r2, [pc, #264]	@ (8007a4c <HAL_DMA_IRQHandler+0xa4c>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d01d      	beq.n	8007984 <HAL_DMA_IRQHandler+0x984>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a40      	ldr	r2, [pc, #256]	@ (8007a50 <HAL_DMA_IRQHandler+0xa50>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d018      	beq.n	8007984 <HAL_DMA_IRQHandler+0x984>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a3f      	ldr	r2, [pc, #252]	@ (8007a54 <HAL_DMA_IRQHandler+0xa54>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d013      	beq.n	8007984 <HAL_DMA_IRQHandler+0x984>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a3d      	ldr	r2, [pc, #244]	@ (8007a58 <HAL_DMA_IRQHandler+0xa58>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d00e      	beq.n	8007984 <HAL_DMA_IRQHandler+0x984>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a3c      	ldr	r2, [pc, #240]	@ (8007a5c <HAL_DMA_IRQHandler+0xa5c>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d009      	beq.n	8007984 <HAL_DMA_IRQHandler+0x984>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a3a      	ldr	r2, [pc, #232]	@ (8007a60 <HAL_DMA_IRQHandler+0xa60>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d004      	beq.n	8007984 <HAL_DMA_IRQHandler+0x984>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a39      	ldr	r2, [pc, #228]	@ (8007a64 <HAL_DMA_IRQHandler+0xa64>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d101      	bne.n	8007988 <HAL_DMA_IRQHandler+0x988>
 8007984:	2301      	movs	r3, #1
 8007986:	e000      	b.n	800798a <HAL_DMA_IRQHandler+0x98a>
 8007988:	2300      	movs	r3, #0
 800798a:	2b00      	cmp	r3, #0
 800798c:	f000 823f 	beq.w	8007e0e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800799c:	f003 031f 	and.w	r3, r3, #31
 80079a0:	2204      	movs	r2, #4
 80079a2:	409a      	lsls	r2, r3
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	4013      	ands	r3, r2
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	f000 80cd 	beq.w	8007b48 <HAL_DMA_IRQHandler+0xb48>
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	f003 0304 	and.w	r3, r3, #4
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	f000 80c7 	beq.w	8007b48 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079be:	f003 031f 	and.w	r3, r3, #31
 80079c2:	2204      	movs	r2, #4
 80079c4:	409a      	lsls	r2, r3
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d049      	beq.n	8007a68 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d109      	bne.n	80079f2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	f000 8210 	beq.w	8007e08 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079f0:	e20a      	b.n	8007e08 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	f000 8206 	beq.w	8007e08 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a04:	e200      	b.n	8007e08 <HAL_DMA_IRQHandler+0xe08>
 8007a06:	bf00      	nop
 8007a08:	40020010 	.word	0x40020010
 8007a0c:	40020028 	.word	0x40020028
 8007a10:	40020040 	.word	0x40020040
 8007a14:	40020058 	.word	0x40020058
 8007a18:	40020070 	.word	0x40020070
 8007a1c:	40020088 	.word	0x40020088
 8007a20:	400200a0 	.word	0x400200a0
 8007a24:	400200b8 	.word	0x400200b8
 8007a28:	40020410 	.word	0x40020410
 8007a2c:	40020428 	.word	0x40020428
 8007a30:	40020440 	.word	0x40020440
 8007a34:	40020458 	.word	0x40020458
 8007a38:	40020470 	.word	0x40020470
 8007a3c:	40020488 	.word	0x40020488
 8007a40:	400204a0 	.word	0x400204a0
 8007a44:	400204b8 	.word	0x400204b8
 8007a48:	58025408 	.word	0x58025408
 8007a4c:	5802541c 	.word	0x5802541c
 8007a50:	58025430 	.word	0x58025430
 8007a54:	58025444 	.word	0x58025444
 8007a58:	58025458 	.word	0x58025458
 8007a5c:	5802546c 	.word	0x5802546c
 8007a60:	58025480 	.word	0x58025480
 8007a64:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	f003 0320 	and.w	r3, r3, #32
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d160      	bne.n	8007b34 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a7f      	ldr	r2, [pc, #508]	@ (8007c74 <HAL_DMA_IRQHandler+0xc74>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d04a      	beq.n	8007b12 <HAL_DMA_IRQHandler+0xb12>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a7d      	ldr	r2, [pc, #500]	@ (8007c78 <HAL_DMA_IRQHandler+0xc78>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d045      	beq.n	8007b12 <HAL_DMA_IRQHandler+0xb12>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a7c      	ldr	r2, [pc, #496]	@ (8007c7c <HAL_DMA_IRQHandler+0xc7c>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d040      	beq.n	8007b12 <HAL_DMA_IRQHandler+0xb12>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a7a      	ldr	r2, [pc, #488]	@ (8007c80 <HAL_DMA_IRQHandler+0xc80>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d03b      	beq.n	8007b12 <HAL_DMA_IRQHandler+0xb12>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a79      	ldr	r2, [pc, #484]	@ (8007c84 <HAL_DMA_IRQHandler+0xc84>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d036      	beq.n	8007b12 <HAL_DMA_IRQHandler+0xb12>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a77      	ldr	r2, [pc, #476]	@ (8007c88 <HAL_DMA_IRQHandler+0xc88>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d031      	beq.n	8007b12 <HAL_DMA_IRQHandler+0xb12>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a76      	ldr	r2, [pc, #472]	@ (8007c8c <HAL_DMA_IRQHandler+0xc8c>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d02c      	beq.n	8007b12 <HAL_DMA_IRQHandler+0xb12>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a74      	ldr	r2, [pc, #464]	@ (8007c90 <HAL_DMA_IRQHandler+0xc90>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d027      	beq.n	8007b12 <HAL_DMA_IRQHandler+0xb12>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a73      	ldr	r2, [pc, #460]	@ (8007c94 <HAL_DMA_IRQHandler+0xc94>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d022      	beq.n	8007b12 <HAL_DMA_IRQHandler+0xb12>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a71      	ldr	r2, [pc, #452]	@ (8007c98 <HAL_DMA_IRQHandler+0xc98>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d01d      	beq.n	8007b12 <HAL_DMA_IRQHandler+0xb12>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a70      	ldr	r2, [pc, #448]	@ (8007c9c <HAL_DMA_IRQHandler+0xc9c>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d018      	beq.n	8007b12 <HAL_DMA_IRQHandler+0xb12>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a6e      	ldr	r2, [pc, #440]	@ (8007ca0 <HAL_DMA_IRQHandler+0xca0>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d013      	beq.n	8007b12 <HAL_DMA_IRQHandler+0xb12>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a6d      	ldr	r2, [pc, #436]	@ (8007ca4 <HAL_DMA_IRQHandler+0xca4>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d00e      	beq.n	8007b12 <HAL_DMA_IRQHandler+0xb12>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a6b      	ldr	r2, [pc, #428]	@ (8007ca8 <HAL_DMA_IRQHandler+0xca8>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d009      	beq.n	8007b12 <HAL_DMA_IRQHandler+0xb12>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a6a      	ldr	r2, [pc, #424]	@ (8007cac <HAL_DMA_IRQHandler+0xcac>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d004      	beq.n	8007b12 <HAL_DMA_IRQHandler+0xb12>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a68      	ldr	r2, [pc, #416]	@ (8007cb0 <HAL_DMA_IRQHandler+0xcb0>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d108      	bne.n	8007b24 <HAL_DMA_IRQHandler+0xb24>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f022 0208 	bic.w	r2, r2, #8
 8007b20:	601a      	str	r2, [r3, #0]
 8007b22:	e007      	b.n	8007b34 <HAL_DMA_IRQHandler+0xb34>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f022 0204 	bic.w	r2, r2, #4
 8007b32:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	f000 8165 	beq.w	8007e08 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b46:	e15f      	b.n	8007e08 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b4c:	f003 031f 	and.w	r3, r3, #31
 8007b50:	2202      	movs	r2, #2
 8007b52:	409a      	lsls	r2, r3
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	4013      	ands	r3, r2
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	f000 80c5 	beq.w	8007ce8 <HAL_DMA_IRQHandler+0xce8>
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	f003 0302 	and.w	r3, r3, #2
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f000 80bf 	beq.w	8007ce8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b6e:	f003 031f 	and.w	r3, r3, #31
 8007b72:	2202      	movs	r2, #2
 8007b74:	409a      	lsls	r2, r3
 8007b76:	69fb      	ldr	r3, [r7, #28]
 8007b78:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d018      	beq.n	8007bb6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d109      	bne.n	8007ba2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	f000 813a 	beq.w	8007e0c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ba0:	e134      	b.n	8007e0c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	f000 8130 	beq.w	8007e0c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007bb4:	e12a      	b.n	8007e0c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	f003 0320 	and.w	r3, r3, #32
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	f040 8089 	bne.w	8007cd4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a2b      	ldr	r2, [pc, #172]	@ (8007c74 <HAL_DMA_IRQHandler+0xc74>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d04a      	beq.n	8007c62 <HAL_DMA_IRQHandler+0xc62>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a29      	ldr	r2, [pc, #164]	@ (8007c78 <HAL_DMA_IRQHandler+0xc78>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d045      	beq.n	8007c62 <HAL_DMA_IRQHandler+0xc62>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a28      	ldr	r2, [pc, #160]	@ (8007c7c <HAL_DMA_IRQHandler+0xc7c>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d040      	beq.n	8007c62 <HAL_DMA_IRQHandler+0xc62>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a26      	ldr	r2, [pc, #152]	@ (8007c80 <HAL_DMA_IRQHandler+0xc80>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d03b      	beq.n	8007c62 <HAL_DMA_IRQHandler+0xc62>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a25      	ldr	r2, [pc, #148]	@ (8007c84 <HAL_DMA_IRQHandler+0xc84>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d036      	beq.n	8007c62 <HAL_DMA_IRQHandler+0xc62>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a23      	ldr	r2, [pc, #140]	@ (8007c88 <HAL_DMA_IRQHandler+0xc88>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d031      	beq.n	8007c62 <HAL_DMA_IRQHandler+0xc62>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a22      	ldr	r2, [pc, #136]	@ (8007c8c <HAL_DMA_IRQHandler+0xc8c>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d02c      	beq.n	8007c62 <HAL_DMA_IRQHandler+0xc62>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a20      	ldr	r2, [pc, #128]	@ (8007c90 <HAL_DMA_IRQHandler+0xc90>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d027      	beq.n	8007c62 <HAL_DMA_IRQHandler+0xc62>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a1f      	ldr	r2, [pc, #124]	@ (8007c94 <HAL_DMA_IRQHandler+0xc94>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d022      	beq.n	8007c62 <HAL_DMA_IRQHandler+0xc62>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a1d      	ldr	r2, [pc, #116]	@ (8007c98 <HAL_DMA_IRQHandler+0xc98>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d01d      	beq.n	8007c62 <HAL_DMA_IRQHandler+0xc62>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a1c      	ldr	r2, [pc, #112]	@ (8007c9c <HAL_DMA_IRQHandler+0xc9c>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d018      	beq.n	8007c62 <HAL_DMA_IRQHandler+0xc62>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a1a      	ldr	r2, [pc, #104]	@ (8007ca0 <HAL_DMA_IRQHandler+0xca0>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d013      	beq.n	8007c62 <HAL_DMA_IRQHandler+0xc62>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a19      	ldr	r2, [pc, #100]	@ (8007ca4 <HAL_DMA_IRQHandler+0xca4>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d00e      	beq.n	8007c62 <HAL_DMA_IRQHandler+0xc62>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a17      	ldr	r2, [pc, #92]	@ (8007ca8 <HAL_DMA_IRQHandler+0xca8>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d009      	beq.n	8007c62 <HAL_DMA_IRQHandler+0xc62>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a16      	ldr	r2, [pc, #88]	@ (8007cac <HAL_DMA_IRQHandler+0xcac>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d004      	beq.n	8007c62 <HAL_DMA_IRQHandler+0xc62>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a14      	ldr	r2, [pc, #80]	@ (8007cb0 <HAL_DMA_IRQHandler+0xcb0>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d128      	bne.n	8007cb4 <HAL_DMA_IRQHandler+0xcb4>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f022 0214 	bic.w	r2, r2, #20
 8007c70:	601a      	str	r2, [r3, #0]
 8007c72:	e027      	b.n	8007cc4 <HAL_DMA_IRQHandler+0xcc4>
 8007c74:	40020010 	.word	0x40020010
 8007c78:	40020028 	.word	0x40020028
 8007c7c:	40020040 	.word	0x40020040
 8007c80:	40020058 	.word	0x40020058
 8007c84:	40020070 	.word	0x40020070
 8007c88:	40020088 	.word	0x40020088
 8007c8c:	400200a0 	.word	0x400200a0
 8007c90:	400200b8 	.word	0x400200b8
 8007c94:	40020410 	.word	0x40020410
 8007c98:	40020428 	.word	0x40020428
 8007c9c:	40020440 	.word	0x40020440
 8007ca0:	40020458 	.word	0x40020458
 8007ca4:	40020470 	.word	0x40020470
 8007ca8:	40020488 	.word	0x40020488
 8007cac:	400204a0 	.word	0x400204a0
 8007cb0:	400204b8 	.word	0x400204b8
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f022 020a 	bic.w	r2, r2, #10
 8007cc2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	f000 8097 	beq.w	8007e0c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ce6:	e091      	b.n	8007e0c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cec:	f003 031f 	and.w	r3, r3, #31
 8007cf0:	2208      	movs	r2, #8
 8007cf2:	409a      	lsls	r2, r3
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	4013      	ands	r3, r2
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	f000 8088 	beq.w	8007e0e <HAL_DMA_IRQHandler+0xe0e>
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	f003 0308 	and.w	r3, r3, #8
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	f000 8082 	beq.w	8007e0e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a41      	ldr	r2, [pc, #260]	@ (8007e14 <HAL_DMA_IRQHandler+0xe14>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d04a      	beq.n	8007daa <HAL_DMA_IRQHandler+0xdaa>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a3f      	ldr	r2, [pc, #252]	@ (8007e18 <HAL_DMA_IRQHandler+0xe18>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d045      	beq.n	8007daa <HAL_DMA_IRQHandler+0xdaa>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a3e      	ldr	r2, [pc, #248]	@ (8007e1c <HAL_DMA_IRQHandler+0xe1c>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d040      	beq.n	8007daa <HAL_DMA_IRQHandler+0xdaa>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a3c      	ldr	r2, [pc, #240]	@ (8007e20 <HAL_DMA_IRQHandler+0xe20>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d03b      	beq.n	8007daa <HAL_DMA_IRQHandler+0xdaa>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a3b      	ldr	r2, [pc, #236]	@ (8007e24 <HAL_DMA_IRQHandler+0xe24>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d036      	beq.n	8007daa <HAL_DMA_IRQHandler+0xdaa>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a39      	ldr	r2, [pc, #228]	@ (8007e28 <HAL_DMA_IRQHandler+0xe28>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d031      	beq.n	8007daa <HAL_DMA_IRQHandler+0xdaa>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a38      	ldr	r2, [pc, #224]	@ (8007e2c <HAL_DMA_IRQHandler+0xe2c>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d02c      	beq.n	8007daa <HAL_DMA_IRQHandler+0xdaa>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a36      	ldr	r2, [pc, #216]	@ (8007e30 <HAL_DMA_IRQHandler+0xe30>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d027      	beq.n	8007daa <HAL_DMA_IRQHandler+0xdaa>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a35      	ldr	r2, [pc, #212]	@ (8007e34 <HAL_DMA_IRQHandler+0xe34>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d022      	beq.n	8007daa <HAL_DMA_IRQHandler+0xdaa>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a33      	ldr	r2, [pc, #204]	@ (8007e38 <HAL_DMA_IRQHandler+0xe38>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d01d      	beq.n	8007daa <HAL_DMA_IRQHandler+0xdaa>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a32      	ldr	r2, [pc, #200]	@ (8007e3c <HAL_DMA_IRQHandler+0xe3c>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d018      	beq.n	8007daa <HAL_DMA_IRQHandler+0xdaa>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a30      	ldr	r2, [pc, #192]	@ (8007e40 <HAL_DMA_IRQHandler+0xe40>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d013      	beq.n	8007daa <HAL_DMA_IRQHandler+0xdaa>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a2f      	ldr	r2, [pc, #188]	@ (8007e44 <HAL_DMA_IRQHandler+0xe44>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d00e      	beq.n	8007daa <HAL_DMA_IRQHandler+0xdaa>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a2d      	ldr	r2, [pc, #180]	@ (8007e48 <HAL_DMA_IRQHandler+0xe48>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d009      	beq.n	8007daa <HAL_DMA_IRQHandler+0xdaa>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a2c      	ldr	r2, [pc, #176]	@ (8007e4c <HAL_DMA_IRQHandler+0xe4c>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d004      	beq.n	8007daa <HAL_DMA_IRQHandler+0xdaa>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a2a      	ldr	r2, [pc, #168]	@ (8007e50 <HAL_DMA_IRQHandler+0xe50>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d108      	bne.n	8007dbc <HAL_DMA_IRQHandler+0xdbc>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f022 021c 	bic.w	r2, r2, #28
 8007db8:	601a      	str	r2, [r3, #0]
 8007dba:	e007      	b.n	8007dcc <HAL_DMA_IRQHandler+0xdcc>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f022 020e 	bic.w	r2, r2, #14
 8007dca:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007dd0:	f003 031f 	and.w	r3, r3, #31
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	409a      	lsls	r2, r3
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2201      	movs	r2, #1
 8007de0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2201      	movs	r2, #1
 8007de6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d009      	beq.n	8007e0e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	4798      	blx	r3
 8007e02:	e004      	b.n	8007e0e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007e04:	bf00      	nop
 8007e06:	e002      	b.n	8007e0e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e08:	bf00      	nop
 8007e0a:	e000      	b.n	8007e0e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e0c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007e0e:	3728      	adds	r7, #40	@ 0x28
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	40020010 	.word	0x40020010
 8007e18:	40020028 	.word	0x40020028
 8007e1c:	40020040 	.word	0x40020040
 8007e20:	40020058 	.word	0x40020058
 8007e24:	40020070 	.word	0x40020070
 8007e28:	40020088 	.word	0x40020088
 8007e2c:	400200a0 	.word	0x400200a0
 8007e30:	400200b8 	.word	0x400200b8
 8007e34:	40020410 	.word	0x40020410
 8007e38:	40020428 	.word	0x40020428
 8007e3c:	40020440 	.word	0x40020440
 8007e40:	40020458 	.word	0x40020458
 8007e44:	40020470 	.word	0x40020470
 8007e48:	40020488 	.word	0x40020488
 8007e4c:	400204a0 	.word	0x400204a0
 8007e50:	400204b8 	.word	0x400204b8

08007e54 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b087      	sub	sp, #28
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	60f8      	str	r0, [r7, #12]
 8007e5c:	60b9      	str	r1, [r7, #8]
 8007e5e:	607a      	str	r2, [r7, #4]
 8007e60:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e66:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e6c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a7f      	ldr	r2, [pc, #508]	@ (8008070 <DMA_SetConfig+0x21c>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d072      	beq.n	8007f5e <DMA_SetConfig+0x10a>
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a7d      	ldr	r2, [pc, #500]	@ (8008074 <DMA_SetConfig+0x220>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d06d      	beq.n	8007f5e <DMA_SetConfig+0x10a>
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a7c      	ldr	r2, [pc, #496]	@ (8008078 <DMA_SetConfig+0x224>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d068      	beq.n	8007f5e <DMA_SetConfig+0x10a>
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a7a      	ldr	r2, [pc, #488]	@ (800807c <DMA_SetConfig+0x228>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d063      	beq.n	8007f5e <DMA_SetConfig+0x10a>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a79      	ldr	r2, [pc, #484]	@ (8008080 <DMA_SetConfig+0x22c>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d05e      	beq.n	8007f5e <DMA_SetConfig+0x10a>
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a77      	ldr	r2, [pc, #476]	@ (8008084 <DMA_SetConfig+0x230>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d059      	beq.n	8007f5e <DMA_SetConfig+0x10a>
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a76      	ldr	r2, [pc, #472]	@ (8008088 <DMA_SetConfig+0x234>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d054      	beq.n	8007f5e <DMA_SetConfig+0x10a>
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a74      	ldr	r2, [pc, #464]	@ (800808c <DMA_SetConfig+0x238>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d04f      	beq.n	8007f5e <DMA_SetConfig+0x10a>
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a73      	ldr	r2, [pc, #460]	@ (8008090 <DMA_SetConfig+0x23c>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d04a      	beq.n	8007f5e <DMA_SetConfig+0x10a>
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a71      	ldr	r2, [pc, #452]	@ (8008094 <DMA_SetConfig+0x240>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d045      	beq.n	8007f5e <DMA_SetConfig+0x10a>
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a70      	ldr	r2, [pc, #448]	@ (8008098 <DMA_SetConfig+0x244>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d040      	beq.n	8007f5e <DMA_SetConfig+0x10a>
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a6e      	ldr	r2, [pc, #440]	@ (800809c <DMA_SetConfig+0x248>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d03b      	beq.n	8007f5e <DMA_SetConfig+0x10a>
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a6d      	ldr	r2, [pc, #436]	@ (80080a0 <DMA_SetConfig+0x24c>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d036      	beq.n	8007f5e <DMA_SetConfig+0x10a>
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a6b      	ldr	r2, [pc, #428]	@ (80080a4 <DMA_SetConfig+0x250>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d031      	beq.n	8007f5e <DMA_SetConfig+0x10a>
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a6a      	ldr	r2, [pc, #424]	@ (80080a8 <DMA_SetConfig+0x254>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d02c      	beq.n	8007f5e <DMA_SetConfig+0x10a>
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a68      	ldr	r2, [pc, #416]	@ (80080ac <DMA_SetConfig+0x258>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d027      	beq.n	8007f5e <DMA_SetConfig+0x10a>
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a67      	ldr	r2, [pc, #412]	@ (80080b0 <DMA_SetConfig+0x25c>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d022      	beq.n	8007f5e <DMA_SetConfig+0x10a>
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a65      	ldr	r2, [pc, #404]	@ (80080b4 <DMA_SetConfig+0x260>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d01d      	beq.n	8007f5e <DMA_SetConfig+0x10a>
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a64      	ldr	r2, [pc, #400]	@ (80080b8 <DMA_SetConfig+0x264>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d018      	beq.n	8007f5e <DMA_SetConfig+0x10a>
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a62      	ldr	r2, [pc, #392]	@ (80080bc <DMA_SetConfig+0x268>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d013      	beq.n	8007f5e <DMA_SetConfig+0x10a>
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a61      	ldr	r2, [pc, #388]	@ (80080c0 <DMA_SetConfig+0x26c>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d00e      	beq.n	8007f5e <DMA_SetConfig+0x10a>
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a5f      	ldr	r2, [pc, #380]	@ (80080c4 <DMA_SetConfig+0x270>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d009      	beq.n	8007f5e <DMA_SetConfig+0x10a>
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a5e      	ldr	r2, [pc, #376]	@ (80080c8 <DMA_SetConfig+0x274>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d004      	beq.n	8007f5e <DMA_SetConfig+0x10a>
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a5c      	ldr	r2, [pc, #368]	@ (80080cc <DMA_SetConfig+0x278>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d101      	bne.n	8007f62 <DMA_SetConfig+0x10e>
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e000      	b.n	8007f64 <DMA_SetConfig+0x110>
 8007f62:	2300      	movs	r3, #0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d00d      	beq.n	8007f84 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f6c:	68fa      	ldr	r2, [r7, #12]
 8007f6e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007f70:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d004      	beq.n	8007f84 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f7e:	68fa      	ldr	r2, [r7, #12]
 8007f80:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007f82:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a39      	ldr	r2, [pc, #228]	@ (8008070 <DMA_SetConfig+0x21c>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d04a      	beq.n	8008024 <DMA_SetConfig+0x1d0>
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a38      	ldr	r2, [pc, #224]	@ (8008074 <DMA_SetConfig+0x220>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d045      	beq.n	8008024 <DMA_SetConfig+0x1d0>
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a36      	ldr	r2, [pc, #216]	@ (8008078 <DMA_SetConfig+0x224>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d040      	beq.n	8008024 <DMA_SetConfig+0x1d0>
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a35      	ldr	r2, [pc, #212]	@ (800807c <DMA_SetConfig+0x228>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d03b      	beq.n	8008024 <DMA_SetConfig+0x1d0>
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a33      	ldr	r2, [pc, #204]	@ (8008080 <DMA_SetConfig+0x22c>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d036      	beq.n	8008024 <DMA_SetConfig+0x1d0>
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a32      	ldr	r2, [pc, #200]	@ (8008084 <DMA_SetConfig+0x230>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d031      	beq.n	8008024 <DMA_SetConfig+0x1d0>
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a30      	ldr	r2, [pc, #192]	@ (8008088 <DMA_SetConfig+0x234>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d02c      	beq.n	8008024 <DMA_SetConfig+0x1d0>
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a2f      	ldr	r2, [pc, #188]	@ (800808c <DMA_SetConfig+0x238>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d027      	beq.n	8008024 <DMA_SetConfig+0x1d0>
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a2d      	ldr	r2, [pc, #180]	@ (8008090 <DMA_SetConfig+0x23c>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d022      	beq.n	8008024 <DMA_SetConfig+0x1d0>
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a2c      	ldr	r2, [pc, #176]	@ (8008094 <DMA_SetConfig+0x240>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d01d      	beq.n	8008024 <DMA_SetConfig+0x1d0>
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a2a      	ldr	r2, [pc, #168]	@ (8008098 <DMA_SetConfig+0x244>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d018      	beq.n	8008024 <DMA_SetConfig+0x1d0>
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a29      	ldr	r2, [pc, #164]	@ (800809c <DMA_SetConfig+0x248>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d013      	beq.n	8008024 <DMA_SetConfig+0x1d0>
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a27      	ldr	r2, [pc, #156]	@ (80080a0 <DMA_SetConfig+0x24c>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d00e      	beq.n	8008024 <DMA_SetConfig+0x1d0>
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a26      	ldr	r2, [pc, #152]	@ (80080a4 <DMA_SetConfig+0x250>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d009      	beq.n	8008024 <DMA_SetConfig+0x1d0>
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a24      	ldr	r2, [pc, #144]	@ (80080a8 <DMA_SetConfig+0x254>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d004      	beq.n	8008024 <DMA_SetConfig+0x1d0>
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a23      	ldr	r2, [pc, #140]	@ (80080ac <DMA_SetConfig+0x258>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d101      	bne.n	8008028 <DMA_SetConfig+0x1d4>
 8008024:	2301      	movs	r3, #1
 8008026:	e000      	b.n	800802a <DMA_SetConfig+0x1d6>
 8008028:	2300      	movs	r3, #0
 800802a:	2b00      	cmp	r3, #0
 800802c:	d059      	beq.n	80080e2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008032:	f003 031f 	and.w	r3, r3, #31
 8008036:	223f      	movs	r2, #63	@ 0x3f
 8008038:	409a      	lsls	r2, r3
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800804c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	683a      	ldr	r2, [r7, #0]
 8008054:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	2b40      	cmp	r3, #64	@ 0x40
 800805c:	d138      	bne.n	80080d0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	68ba      	ldr	r2, [r7, #8]
 800806c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800806e:	e086      	b.n	800817e <DMA_SetConfig+0x32a>
 8008070:	40020010 	.word	0x40020010
 8008074:	40020028 	.word	0x40020028
 8008078:	40020040 	.word	0x40020040
 800807c:	40020058 	.word	0x40020058
 8008080:	40020070 	.word	0x40020070
 8008084:	40020088 	.word	0x40020088
 8008088:	400200a0 	.word	0x400200a0
 800808c:	400200b8 	.word	0x400200b8
 8008090:	40020410 	.word	0x40020410
 8008094:	40020428 	.word	0x40020428
 8008098:	40020440 	.word	0x40020440
 800809c:	40020458 	.word	0x40020458
 80080a0:	40020470 	.word	0x40020470
 80080a4:	40020488 	.word	0x40020488
 80080a8:	400204a0 	.word	0x400204a0
 80080ac:	400204b8 	.word	0x400204b8
 80080b0:	58025408 	.word	0x58025408
 80080b4:	5802541c 	.word	0x5802541c
 80080b8:	58025430 	.word	0x58025430
 80080bc:	58025444 	.word	0x58025444
 80080c0:	58025458 	.word	0x58025458
 80080c4:	5802546c 	.word	0x5802546c
 80080c8:	58025480 	.word	0x58025480
 80080cc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	68ba      	ldr	r2, [r7, #8]
 80080d6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	60da      	str	r2, [r3, #12]
}
 80080e0:	e04d      	b.n	800817e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a29      	ldr	r2, [pc, #164]	@ (800818c <DMA_SetConfig+0x338>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d022      	beq.n	8008132 <DMA_SetConfig+0x2de>
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a27      	ldr	r2, [pc, #156]	@ (8008190 <DMA_SetConfig+0x33c>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d01d      	beq.n	8008132 <DMA_SetConfig+0x2de>
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a26      	ldr	r2, [pc, #152]	@ (8008194 <DMA_SetConfig+0x340>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d018      	beq.n	8008132 <DMA_SetConfig+0x2de>
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a24      	ldr	r2, [pc, #144]	@ (8008198 <DMA_SetConfig+0x344>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d013      	beq.n	8008132 <DMA_SetConfig+0x2de>
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a23      	ldr	r2, [pc, #140]	@ (800819c <DMA_SetConfig+0x348>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d00e      	beq.n	8008132 <DMA_SetConfig+0x2de>
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a21      	ldr	r2, [pc, #132]	@ (80081a0 <DMA_SetConfig+0x34c>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d009      	beq.n	8008132 <DMA_SetConfig+0x2de>
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a20      	ldr	r2, [pc, #128]	@ (80081a4 <DMA_SetConfig+0x350>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d004      	beq.n	8008132 <DMA_SetConfig+0x2de>
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a1e      	ldr	r2, [pc, #120]	@ (80081a8 <DMA_SetConfig+0x354>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d101      	bne.n	8008136 <DMA_SetConfig+0x2e2>
 8008132:	2301      	movs	r3, #1
 8008134:	e000      	b.n	8008138 <DMA_SetConfig+0x2e4>
 8008136:	2300      	movs	r3, #0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d020      	beq.n	800817e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008140:	f003 031f 	and.w	r3, r3, #31
 8008144:	2201      	movs	r2, #1
 8008146:	409a      	lsls	r2, r3
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	683a      	ldr	r2, [r7, #0]
 8008152:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	2b40      	cmp	r3, #64	@ 0x40
 800815a:	d108      	bne.n	800816e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	68ba      	ldr	r2, [r7, #8]
 800816a:	60da      	str	r2, [r3, #12]
}
 800816c:	e007      	b.n	800817e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	68ba      	ldr	r2, [r7, #8]
 8008174:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	60da      	str	r2, [r3, #12]
}
 800817e:	bf00      	nop
 8008180:	371c      	adds	r7, #28
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr
 800818a:	bf00      	nop
 800818c:	58025408 	.word	0x58025408
 8008190:	5802541c 	.word	0x5802541c
 8008194:	58025430 	.word	0x58025430
 8008198:	58025444 	.word	0x58025444
 800819c:	58025458 	.word	0x58025458
 80081a0:	5802546c 	.word	0x5802546c
 80081a4:	58025480 	.word	0x58025480
 80081a8:	58025494 	.word	0x58025494

080081ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b085      	sub	sp, #20
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a42      	ldr	r2, [pc, #264]	@ (80082c4 <DMA_CalcBaseAndBitshift+0x118>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d04a      	beq.n	8008254 <DMA_CalcBaseAndBitshift+0xa8>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a41      	ldr	r2, [pc, #260]	@ (80082c8 <DMA_CalcBaseAndBitshift+0x11c>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d045      	beq.n	8008254 <DMA_CalcBaseAndBitshift+0xa8>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a3f      	ldr	r2, [pc, #252]	@ (80082cc <DMA_CalcBaseAndBitshift+0x120>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d040      	beq.n	8008254 <DMA_CalcBaseAndBitshift+0xa8>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a3e      	ldr	r2, [pc, #248]	@ (80082d0 <DMA_CalcBaseAndBitshift+0x124>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d03b      	beq.n	8008254 <DMA_CalcBaseAndBitshift+0xa8>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a3c      	ldr	r2, [pc, #240]	@ (80082d4 <DMA_CalcBaseAndBitshift+0x128>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d036      	beq.n	8008254 <DMA_CalcBaseAndBitshift+0xa8>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a3b      	ldr	r2, [pc, #236]	@ (80082d8 <DMA_CalcBaseAndBitshift+0x12c>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d031      	beq.n	8008254 <DMA_CalcBaseAndBitshift+0xa8>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a39      	ldr	r2, [pc, #228]	@ (80082dc <DMA_CalcBaseAndBitshift+0x130>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d02c      	beq.n	8008254 <DMA_CalcBaseAndBitshift+0xa8>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a38      	ldr	r2, [pc, #224]	@ (80082e0 <DMA_CalcBaseAndBitshift+0x134>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d027      	beq.n	8008254 <DMA_CalcBaseAndBitshift+0xa8>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a36      	ldr	r2, [pc, #216]	@ (80082e4 <DMA_CalcBaseAndBitshift+0x138>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d022      	beq.n	8008254 <DMA_CalcBaseAndBitshift+0xa8>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a35      	ldr	r2, [pc, #212]	@ (80082e8 <DMA_CalcBaseAndBitshift+0x13c>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d01d      	beq.n	8008254 <DMA_CalcBaseAndBitshift+0xa8>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a33      	ldr	r2, [pc, #204]	@ (80082ec <DMA_CalcBaseAndBitshift+0x140>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d018      	beq.n	8008254 <DMA_CalcBaseAndBitshift+0xa8>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a32      	ldr	r2, [pc, #200]	@ (80082f0 <DMA_CalcBaseAndBitshift+0x144>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d013      	beq.n	8008254 <DMA_CalcBaseAndBitshift+0xa8>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a30      	ldr	r2, [pc, #192]	@ (80082f4 <DMA_CalcBaseAndBitshift+0x148>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d00e      	beq.n	8008254 <DMA_CalcBaseAndBitshift+0xa8>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a2f      	ldr	r2, [pc, #188]	@ (80082f8 <DMA_CalcBaseAndBitshift+0x14c>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d009      	beq.n	8008254 <DMA_CalcBaseAndBitshift+0xa8>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a2d      	ldr	r2, [pc, #180]	@ (80082fc <DMA_CalcBaseAndBitshift+0x150>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d004      	beq.n	8008254 <DMA_CalcBaseAndBitshift+0xa8>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a2c      	ldr	r2, [pc, #176]	@ (8008300 <DMA_CalcBaseAndBitshift+0x154>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d101      	bne.n	8008258 <DMA_CalcBaseAndBitshift+0xac>
 8008254:	2301      	movs	r3, #1
 8008256:	e000      	b.n	800825a <DMA_CalcBaseAndBitshift+0xae>
 8008258:	2300      	movs	r3, #0
 800825a:	2b00      	cmp	r3, #0
 800825c:	d024      	beq.n	80082a8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	b2db      	uxtb	r3, r3
 8008264:	3b10      	subs	r3, #16
 8008266:	4a27      	ldr	r2, [pc, #156]	@ (8008304 <DMA_CalcBaseAndBitshift+0x158>)
 8008268:	fba2 2303 	umull	r2, r3, r2, r3
 800826c:	091b      	lsrs	r3, r3, #4
 800826e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f003 0307 	and.w	r3, r3, #7
 8008276:	4a24      	ldr	r2, [pc, #144]	@ (8008308 <DMA_CalcBaseAndBitshift+0x15c>)
 8008278:	5cd3      	ldrb	r3, [r2, r3]
 800827a:	461a      	mov	r2, r3
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2b03      	cmp	r3, #3
 8008284:	d908      	bls.n	8008298 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	461a      	mov	r2, r3
 800828c:	4b1f      	ldr	r3, [pc, #124]	@ (800830c <DMA_CalcBaseAndBitshift+0x160>)
 800828e:	4013      	ands	r3, r2
 8008290:	1d1a      	adds	r2, r3, #4
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	659a      	str	r2, [r3, #88]	@ 0x58
 8008296:	e00d      	b.n	80082b4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	461a      	mov	r2, r3
 800829e:	4b1b      	ldr	r3, [pc, #108]	@ (800830c <DMA_CalcBaseAndBitshift+0x160>)
 80082a0:	4013      	ands	r3, r2
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80082a6:	e005      	b.n	80082b4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3714      	adds	r7, #20
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr
 80082c4:	40020010 	.word	0x40020010
 80082c8:	40020028 	.word	0x40020028
 80082cc:	40020040 	.word	0x40020040
 80082d0:	40020058 	.word	0x40020058
 80082d4:	40020070 	.word	0x40020070
 80082d8:	40020088 	.word	0x40020088
 80082dc:	400200a0 	.word	0x400200a0
 80082e0:	400200b8 	.word	0x400200b8
 80082e4:	40020410 	.word	0x40020410
 80082e8:	40020428 	.word	0x40020428
 80082ec:	40020440 	.word	0x40020440
 80082f0:	40020458 	.word	0x40020458
 80082f4:	40020470 	.word	0x40020470
 80082f8:	40020488 	.word	0x40020488
 80082fc:	400204a0 	.word	0x400204a0
 8008300:	400204b8 	.word	0x400204b8
 8008304:	aaaaaaab 	.word	0xaaaaaaab
 8008308:	08014880 	.word	0x08014880
 800830c:	fffffc00 	.word	0xfffffc00

08008310 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008310:	b480      	push	{r7}
 8008312:	b085      	sub	sp, #20
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008318:	2300      	movs	r3, #0
 800831a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	699b      	ldr	r3, [r3, #24]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d120      	bne.n	8008366 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008328:	2b03      	cmp	r3, #3
 800832a:	d858      	bhi.n	80083de <DMA_CheckFifoParam+0xce>
 800832c:	a201      	add	r2, pc, #4	@ (adr r2, 8008334 <DMA_CheckFifoParam+0x24>)
 800832e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008332:	bf00      	nop
 8008334:	08008345 	.word	0x08008345
 8008338:	08008357 	.word	0x08008357
 800833c:	08008345 	.word	0x08008345
 8008340:	080083df 	.word	0x080083df
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008348:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800834c:	2b00      	cmp	r3, #0
 800834e:	d048      	beq.n	80083e2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008350:	2301      	movs	r3, #1
 8008352:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008354:	e045      	b.n	80083e2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800835a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800835e:	d142      	bne.n	80083e6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008360:	2301      	movs	r3, #1
 8008362:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008364:	e03f      	b.n	80083e6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	699b      	ldr	r3, [r3, #24]
 800836a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800836e:	d123      	bne.n	80083b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008374:	2b03      	cmp	r3, #3
 8008376:	d838      	bhi.n	80083ea <DMA_CheckFifoParam+0xda>
 8008378:	a201      	add	r2, pc, #4	@ (adr r2, 8008380 <DMA_CheckFifoParam+0x70>)
 800837a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800837e:	bf00      	nop
 8008380:	08008391 	.word	0x08008391
 8008384:	08008397 	.word	0x08008397
 8008388:	08008391 	.word	0x08008391
 800838c:	080083a9 	.word	0x080083a9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008390:	2301      	movs	r3, #1
 8008392:	73fb      	strb	r3, [r7, #15]
        break;
 8008394:	e030      	b.n	80083f8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800839a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d025      	beq.n	80083ee <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80083a2:	2301      	movs	r3, #1
 80083a4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80083a6:	e022      	b.n	80083ee <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80083b0:	d11f      	bne.n	80083f2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80083b6:	e01c      	b.n	80083f2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083bc:	2b02      	cmp	r3, #2
 80083be:	d902      	bls.n	80083c6 <DMA_CheckFifoParam+0xb6>
 80083c0:	2b03      	cmp	r3, #3
 80083c2:	d003      	beq.n	80083cc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80083c4:	e018      	b.n	80083f8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80083c6:	2301      	movs	r3, #1
 80083c8:	73fb      	strb	r3, [r7, #15]
        break;
 80083ca:	e015      	b.n	80083f8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d00e      	beq.n	80083f6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	73fb      	strb	r3, [r7, #15]
    break;
 80083dc:	e00b      	b.n	80083f6 <DMA_CheckFifoParam+0xe6>
        break;
 80083de:	bf00      	nop
 80083e0:	e00a      	b.n	80083f8 <DMA_CheckFifoParam+0xe8>
        break;
 80083e2:	bf00      	nop
 80083e4:	e008      	b.n	80083f8 <DMA_CheckFifoParam+0xe8>
        break;
 80083e6:	bf00      	nop
 80083e8:	e006      	b.n	80083f8 <DMA_CheckFifoParam+0xe8>
        break;
 80083ea:	bf00      	nop
 80083ec:	e004      	b.n	80083f8 <DMA_CheckFifoParam+0xe8>
        break;
 80083ee:	bf00      	nop
 80083f0:	e002      	b.n	80083f8 <DMA_CheckFifoParam+0xe8>
        break;
 80083f2:	bf00      	nop
 80083f4:	e000      	b.n	80083f8 <DMA_CheckFifoParam+0xe8>
    break;
 80083f6:	bf00      	nop
    }
  }

  return status;
 80083f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3714      	adds	r7, #20
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr
 8008406:	bf00      	nop

08008408 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008408:	b480      	push	{r7}
 800840a:	b085      	sub	sp, #20
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a38      	ldr	r2, [pc, #224]	@ (80084fc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d022      	beq.n	8008466 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a36      	ldr	r2, [pc, #216]	@ (8008500 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d01d      	beq.n	8008466 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a35      	ldr	r2, [pc, #212]	@ (8008504 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d018      	beq.n	8008466 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a33      	ldr	r2, [pc, #204]	@ (8008508 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d013      	beq.n	8008466 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a32      	ldr	r2, [pc, #200]	@ (800850c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d00e      	beq.n	8008466 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a30      	ldr	r2, [pc, #192]	@ (8008510 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d009      	beq.n	8008466 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a2f      	ldr	r2, [pc, #188]	@ (8008514 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d004      	beq.n	8008466 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a2d      	ldr	r2, [pc, #180]	@ (8008518 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d101      	bne.n	800846a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008466:	2301      	movs	r3, #1
 8008468:	e000      	b.n	800846c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800846a:	2300      	movs	r3, #0
 800846c:	2b00      	cmp	r3, #0
 800846e:	d01a      	beq.n	80084a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	b2db      	uxtb	r3, r3
 8008476:	3b08      	subs	r3, #8
 8008478:	4a28      	ldr	r2, [pc, #160]	@ (800851c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800847a:	fba2 2303 	umull	r2, r3, r2, r3
 800847e:	091b      	lsrs	r3, r3, #4
 8008480:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008482:	68fa      	ldr	r2, [r7, #12]
 8008484:	4b26      	ldr	r3, [pc, #152]	@ (8008520 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008486:	4413      	add	r3, r2
 8008488:	009b      	lsls	r3, r3, #2
 800848a:	461a      	mov	r2, r3
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	4a24      	ldr	r2, [pc, #144]	@ (8008524 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008494:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f003 031f 	and.w	r3, r3, #31
 800849c:	2201      	movs	r2, #1
 800849e:	409a      	lsls	r2, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80084a4:	e024      	b.n	80084f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	3b10      	subs	r3, #16
 80084ae:	4a1e      	ldr	r2, [pc, #120]	@ (8008528 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80084b0:	fba2 2303 	umull	r2, r3, r2, r3
 80084b4:	091b      	lsrs	r3, r3, #4
 80084b6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	4a1c      	ldr	r2, [pc, #112]	@ (800852c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d806      	bhi.n	80084ce <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	4a1b      	ldr	r2, [pc, #108]	@ (8008530 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d902      	bls.n	80084ce <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	3308      	adds	r3, #8
 80084cc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80084ce:	68fa      	ldr	r2, [r7, #12]
 80084d0:	4b18      	ldr	r3, [pc, #96]	@ (8008534 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80084d2:	4413      	add	r3, r2
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	461a      	mov	r2, r3
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	4a16      	ldr	r2, [pc, #88]	@ (8008538 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80084e0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f003 031f 	and.w	r3, r3, #31
 80084e8:	2201      	movs	r2, #1
 80084ea:	409a      	lsls	r2, r3
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80084f0:	bf00      	nop
 80084f2:	3714      	adds	r7, #20
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr
 80084fc:	58025408 	.word	0x58025408
 8008500:	5802541c 	.word	0x5802541c
 8008504:	58025430 	.word	0x58025430
 8008508:	58025444 	.word	0x58025444
 800850c:	58025458 	.word	0x58025458
 8008510:	5802546c 	.word	0x5802546c
 8008514:	58025480 	.word	0x58025480
 8008518:	58025494 	.word	0x58025494
 800851c:	cccccccd 	.word	0xcccccccd
 8008520:	16009600 	.word	0x16009600
 8008524:	58025880 	.word	0x58025880
 8008528:	aaaaaaab 	.word	0xaaaaaaab
 800852c:	400204b8 	.word	0x400204b8
 8008530:	4002040f 	.word	0x4002040f
 8008534:	10008200 	.word	0x10008200
 8008538:	40020880 	.word	0x40020880

0800853c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800853c:	b480      	push	{r7}
 800853e:	b085      	sub	sp, #20
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	b2db      	uxtb	r3, r3
 800854a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d04a      	beq.n	80085e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2b08      	cmp	r3, #8
 8008556:	d847      	bhi.n	80085e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a25      	ldr	r2, [pc, #148]	@ (80085f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d022      	beq.n	80085a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a24      	ldr	r2, [pc, #144]	@ (80085f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d01d      	beq.n	80085a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a22      	ldr	r2, [pc, #136]	@ (80085fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d018      	beq.n	80085a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a21      	ldr	r2, [pc, #132]	@ (8008600 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d013      	beq.n	80085a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a1f      	ldr	r2, [pc, #124]	@ (8008604 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d00e      	beq.n	80085a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a1e      	ldr	r2, [pc, #120]	@ (8008608 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d009      	beq.n	80085a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a1c      	ldr	r2, [pc, #112]	@ (800860c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d004      	beq.n	80085a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4a1b      	ldr	r2, [pc, #108]	@ (8008610 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d101      	bne.n	80085ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80085a8:	2301      	movs	r3, #1
 80085aa:	e000      	b.n	80085ae <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80085ac:	2300      	movs	r3, #0
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d00a      	beq.n	80085c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80085b2:	68fa      	ldr	r2, [r7, #12]
 80085b4:	4b17      	ldr	r3, [pc, #92]	@ (8008614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80085b6:	4413      	add	r3, r2
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	461a      	mov	r2, r3
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	4a15      	ldr	r2, [pc, #84]	@ (8008618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80085c4:	671a      	str	r2, [r3, #112]	@ 0x70
 80085c6:	e009      	b.n	80085dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80085c8:	68fa      	ldr	r2, [r7, #12]
 80085ca:	4b14      	ldr	r3, [pc, #80]	@ (800861c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80085cc:	4413      	add	r3, r2
 80085ce:	009b      	lsls	r3, r3, #2
 80085d0:	461a      	mov	r2, r3
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	4a11      	ldr	r2, [pc, #68]	@ (8008620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80085da:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	3b01      	subs	r3, #1
 80085e0:	2201      	movs	r2, #1
 80085e2:	409a      	lsls	r2, r3
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80085e8:	bf00      	nop
 80085ea:	3714      	adds	r7, #20
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr
 80085f4:	58025408 	.word	0x58025408
 80085f8:	5802541c 	.word	0x5802541c
 80085fc:	58025430 	.word	0x58025430
 8008600:	58025444 	.word	0x58025444
 8008604:	58025458 	.word	0x58025458
 8008608:	5802546c 	.word	0x5802546c
 800860c:	58025480 	.word	0x58025480
 8008610:	58025494 	.word	0x58025494
 8008614:	1600963f 	.word	0x1600963f
 8008618:	58025940 	.word	0x58025940
 800861c:	1000823f 	.word	0x1000823f
 8008620:	40020940 	.word	0x40020940

08008624 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b098      	sub	sp, #96	@ 0x60
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800862c:	4a84      	ldr	r2, [pc, #528]	@ (8008840 <HAL_FDCAN_Init+0x21c>)
 800862e:	f107 030c 	add.w	r3, r7, #12
 8008632:	4611      	mov	r1, r2
 8008634:	224c      	movs	r2, #76	@ 0x4c
 8008636:	4618      	mov	r0, r3
 8008638:	f00b fa6e 	bl	8013b18 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d101      	bne.n	8008646 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8008642:	2301      	movs	r3, #1
 8008644:	e1c6      	b.n	80089d4 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a7e      	ldr	r2, [pc, #504]	@ (8008844 <HAL_FDCAN_Init+0x220>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d106      	bne.n	800865e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8008658:	461a      	mov	r2, r3
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008664:	b2db      	uxtb	r3, r3
 8008666:	2b00      	cmp	r3, #0
 8008668:	d106      	bne.n	8008678 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2200      	movs	r2, #0
 800866e:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f7fa fc46 	bl	8002f04 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	699a      	ldr	r2, [r3, #24]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f022 0210 	bic.w	r2, r2, #16
 8008686:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008688:	f7fb f9ae 	bl	80039e8 <HAL_GetTick>
 800868c:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800868e:	e014      	b.n	80086ba <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008690:	f7fb f9aa 	bl	80039e8 <HAL_GetTick>
 8008694:	4602      	mov	r2, r0
 8008696:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008698:	1ad3      	subs	r3, r2, r3
 800869a:	2b0a      	cmp	r3, #10
 800869c:	d90d      	bls.n	80086ba <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80086a4:	f043 0201 	orr.w	r2, r3, #1
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2203      	movs	r2, #3
 80086b2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80086b6:	2301      	movs	r3, #1
 80086b8:	e18c      	b.n	80089d4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	699b      	ldr	r3, [r3, #24]
 80086c0:	f003 0308 	and.w	r3, r3, #8
 80086c4:	2b08      	cmp	r3, #8
 80086c6:	d0e3      	beq.n	8008690 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	699a      	ldr	r2, [r3, #24]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f042 0201 	orr.w	r2, r2, #1
 80086d6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80086d8:	f7fb f986 	bl	80039e8 <HAL_GetTick>
 80086dc:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80086de:	e014      	b.n	800870a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80086e0:	f7fb f982 	bl	80039e8 <HAL_GetTick>
 80086e4:	4602      	mov	r2, r0
 80086e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80086e8:	1ad3      	subs	r3, r2, r3
 80086ea:	2b0a      	cmp	r3, #10
 80086ec:	d90d      	bls.n	800870a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80086f4:	f043 0201 	orr.w	r2, r3, #1
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2203      	movs	r2, #3
 8008702:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8008706:	2301      	movs	r3, #1
 8008708:	e164      	b.n	80089d4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	699b      	ldr	r3, [r3, #24]
 8008710:	f003 0301 	and.w	r3, r3, #1
 8008714:	2b00      	cmp	r3, #0
 8008716:	d0e3      	beq.n	80086e0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	699a      	ldr	r2, [r3, #24]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f042 0202 	orr.w	r2, r2, #2
 8008726:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	7c1b      	ldrb	r3, [r3, #16]
 800872c:	2b01      	cmp	r3, #1
 800872e:	d108      	bne.n	8008742 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	699a      	ldr	r2, [r3, #24]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800873e:	619a      	str	r2, [r3, #24]
 8008740:	e007      	b.n	8008752 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	699a      	ldr	r2, [r3, #24]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008750:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	7c5b      	ldrb	r3, [r3, #17]
 8008756:	2b01      	cmp	r3, #1
 8008758:	d108      	bne.n	800876c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	699a      	ldr	r2, [r3, #24]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008768:	619a      	str	r2, [r3, #24]
 800876a:	e007      	b.n	800877c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	699a      	ldr	r2, [r3, #24]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800877a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	7c9b      	ldrb	r3, [r3, #18]
 8008780:	2b01      	cmp	r3, #1
 8008782:	d108      	bne.n	8008796 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	699a      	ldr	r2, [r3, #24]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008792:	619a      	str	r2, [r3, #24]
 8008794:	e007      	b.n	80087a6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	699a      	ldr	r2, [r3, #24]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80087a4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	699b      	ldr	r3, [r3, #24]
 80087ac:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	689a      	ldr	r2, [r3, #8]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	430a      	orrs	r2, r1
 80087ba:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	699a      	ldr	r2, [r3, #24]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80087ca:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	691a      	ldr	r2, [r3, #16]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f022 0210 	bic.w	r2, r2, #16
 80087da:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	68db      	ldr	r3, [r3, #12]
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d108      	bne.n	80087f6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	699a      	ldr	r2, [r3, #24]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f042 0204 	orr.w	r2, r2, #4
 80087f2:	619a      	str	r2, [r3, #24]
 80087f4:	e030      	b.n	8008858 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	68db      	ldr	r3, [r3, #12]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d02c      	beq.n	8008858 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	68db      	ldr	r3, [r3, #12]
 8008802:	2b02      	cmp	r3, #2
 8008804:	d020      	beq.n	8008848 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	699a      	ldr	r2, [r3, #24]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008814:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	691a      	ldr	r2, [r3, #16]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f042 0210 	orr.w	r2, r2, #16
 8008824:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	68db      	ldr	r3, [r3, #12]
 800882a:	2b03      	cmp	r3, #3
 800882c:	d114      	bne.n	8008858 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	699a      	ldr	r2, [r3, #24]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f042 0220 	orr.w	r2, r2, #32
 800883c:	619a      	str	r2, [r3, #24]
 800883e:	e00b      	b.n	8008858 <HAL_FDCAN_Init+0x234>
 8008840:	08014824 	.word	0x08014824
 8008844:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	699a      	ldr	r2, [r3, #24]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f042 0220 	orr.w	r2, r2, #32
 8008856:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	699b      	ldr	r3, [r3, #24]
 800885c:	3b01      	subs	r3, #1
 800885e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	69db      	ldr	r3, [r3, #28]
 8008864:	3b01      	subs	r3, #1
 8008866:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008868:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6a1b      	ldr	r3, [r3, #32]
 800886e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008870:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	695b      	ldr	r3, [r3, #20]
 8008878:	3b01      	subs	r3, #1
 800887a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8008880:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008882:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	689b      	ldr	r3, [r3, #8]
 8008888:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800888c:	d115      	bne.n	80088ba <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008892:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008898:	3b01      	subs	r3, #1
 800889a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800889c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088a2:	3b01      	subs	r3, #1
 80088a4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80088a6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088ae:	3b01      	subs	r3, #1
 80088b0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80088b6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80088b8:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d00a      	beq.n	80088d8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	430a      	orrs	r2, r1
 80088d4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80088e0:	4413      	add	r3, r2
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d011      	beq.n	800890a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80088ee:	f023 0107 	bic.w	r1, r3, #7
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80088f6:	009b      	lsls	r3, r3, #2
 80088f8:	3360      	adds	r3, #96	@ 0x60
 80088fa:	443b      	add	r3, r7
 80088fc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	430a      	orrs	r2, r1
 8008906:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800890e:	2b00      	cmp	r3, #0
 8008910:	d011      	beq.n	8008936 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800891a:	f023 0107 	bic.w	r1, r3, #7
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	3360      	adds	r3, #96	@ 0x60
 8008926:	443b      	add	r3, r7
 8008928:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	430a      	orrs	r2, r1
 8008932:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800893a:	2b00      	cmp	r3, #0
 800893c:	d012      	beq.n	8008964 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008946:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	3360      	adds	r3, #96	@ 0x60
 8008952:	443b      	add	r3, r7
 8008954:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8008958:	011a      	lsls	r2, r3, #4
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	430a      	orrs	r2, r1
 8008960:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008968:	2b00      	cmp	r3, #0
 800896a:	d012      	beq.n	8008992 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008974:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	3360      	adds	r3, #96	@ 0x60
 8008980:	443b      	add	r3, r7
 8008982:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8008986:	021a      	lsls	r2, r3, #8
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	430a      	orrs	r2, r1
 800898e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a11      	ldr	r2, [pc, #68]	@ (80089dc <HAL_FDCAN_Init+0x3b8>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d107      	bne.n	80089ac <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	689a      	ldr	r2, [r3, #8]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	f022 0203 	bic.w	r2, r2, #3
 80089aa:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2200      	movs	r2, #0
 80089b0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2200      	movs	r2, #0
 80089b8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2201      	movs	r2, #1
 80089c0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 fdeb 	bl	80095a0 <FDCAN_CalcultateRamBlockAddresses>
 80089ca:	4603      	mov	r3, r0
 80089cc:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 80089d0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3760      	adds	r7, #96	@ 0x60
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}
 80089dc:	4000a000 	.word	0x4000a000

080089e0 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b087      	sub	sp, #28
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80089f0:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80089f2:	7bfb      	ldrb	r3, [r7, #15]
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d002      	beq.n	80089fe <HAL_FDCAN_ConfigFilter+0x1e>
 80089f8:	7bfb      	ldrb	r3, [r7, #15]
 80089fa:	2b02      	cmp	r3, #2
 80089fc:	d157      	bne.n	8008aae <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d12b      	bne.n	8008a5e <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	68db      	ldr	r3, [r3, #12]
 8008a0a:	2b07      	cmp	r3, #7
 8008a0c:	d10d      	bne.n	8008a2a <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	691b      	ldr	r3, [r3, #16]
 8008a12:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	69db      	ldr	r3, [r3, #28]
 8008a18:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8008a1a:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8008a20:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8008a22:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 8008a26:	617b      	str	r3, [r7, #20]
 8008a28:	e00e      	b.n	8008a48 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	68db      	ldr	r3, [r3, #12]
 8008a34:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8008a36:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	691b      	ldr	r3, [r3, #16]
 8008a3c:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8008a3e:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8008a44:	4313      	orrs	r3, r2
 8008a46:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	4413      	add	r3, r2
 8008a54:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	697a      	ldr	r2, [r7, #20]
 8008a5a:	601a      	str	r2, [r3, #0]
 8008a5c:	e025      	b.n	8008aaa <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	68db      	ldr	r3, [r3, #12]
 8008a62:	075a      	lsls	r2, r3, #29
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	691b      	ldr	r3, [r3, #16]
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	68db      	ldr	r3, [r3, #12]
 8008a70:	2b07      	cmp	r3, #7
 8008a72:	d103      	bne.n	8008a7c <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	699b      	ldr	r3, [r3, #24]
 8008a78:	613b      	str	r3, [r7, #16]
 8008a7a:	e006      	b.n	8008a8a <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	689b      	ldr	r3, [r3, #8]
 8008a80:	079a      	lsls	r2, r3, #30
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	695b      	ldr	r3, [r3, #20]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	00db      	lsls	r3, r3, #3
 8008a94:	4413      	add	r3, r2
 8008a96:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	697a      	ldr	r2, [r7, #20]
 8008a9c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	3304      	adds	r3, #4
 8008aa2:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	693a      	ldr	r2, [r7, #16]
 8008aa8:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	e008      	b.n	8008ac0 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008ab4:	f043 0202 	orr.w	r2, r3, #2
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8008abe:	2301      	movs	r3, #1
  }
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	371c      	adds	r7, #28
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr

08008acc <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d111      	bne.n	8008b04 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2202      	movs	r2, #2
 8008ae4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	699a      	ldr	r2, [r3, #24]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f022 0201 	bic.w	r2, r2, #1
 8008af6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2200      	movs	r2, #0
 8008afc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8008b00:	2300      	movs	r3, #0
 8008b02:	e008      	b.n	8008b16 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008b0a:	f043 0204 	orr.w	r2, r3, #4
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8008b14:	2301      	movs	r3, #1
  }
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	370c      	adds	r7, #12
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b20:	4770      	bx	lr

08008b22 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8008b22:	b580      	push	{r7, lr}
 8008b24:	b086      	sub	sp, #24
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	60f8      	str	r0, [r7, #12]
 8008b2a:	60b9      	str	r1, [r7, #8]
 8008b2c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008b34:	b2db      	uxtb	r3, r3
 8008b36:	2b02      	cmp	r3, #2
 8008b38:	d141      	bne.n	8008bbe <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008b42:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d109      	bne.n	8008b5e <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008b50:	f043 0220 	orr.w	r2, r3, #32
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	e038      	b.n	8008bd0 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008b66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d009      	beq.n	8008b82 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008b74:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	e026      	b.n	8008bd0 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008b8a:	0c1b      	lsrs	r3, r3, #16
 8008b8c:	f003 031f 	and.w	r3, r3, #31
 8008b90:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	687a      	ldr	r2, [r7, #4]
 8008b96:	68b9      	ldr	r1, [r7, #8]
 8008b98:	68f8      	ldr	r0, [r7, #12]
 8008b9a:	f000 fe87 	bl	80098ac <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	2101      	movs	r1, #1
 8008ba4:	697a      	ldr	r2, [r7, #20]
 8008ba6:	fa01 f202 	lsl.w	r2, r1, r2
 8008baa:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8008bae:	2201      	movs	r2, #1
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	409a      	lsls	r2, r3
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	e008      	b.n	8008bd0 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008bc4:	f043 0208 	orr.w	r2, r3, #8
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8008bce:	2301      	movs	r3, #1
  }
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3718      	adds	r7, #24
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b08b      	sub	sp, #44	@ 0x2c
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	60f8      	str	r0, [r7, #12]
 8008be0:	60b9      	str	r1, [r7, #8]
 8008be2:	607a      	str	r2, [r7, #4]
 8008be4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8008be6:	2300      	movs	r3, #0
 8008be8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008bf0:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8008bf2:	7efb      	ldrb	r3, [r7, #27]
 8008bf4:	2b02      	cmp	r3, #2
 8008bf6:	f040 8149 	bne.w	8008e8c <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	2b40      	cmp	r3, #64	@ 0x40
 8008bfe:	d14c      	bne.n	8008c9a <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008c08:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d109      	bne.n	8008c24 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008c16:	f043 0220 	orr.w	r2, r3, #32
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	e13c      	b.n	8008e9e <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008c2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d109      	bne.n	8008c48 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008c3a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8008c44:	2301      	movs	r3, #1
 8008c46:	e12a      	b.n	8008e9e <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008c50:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008c54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008c58:	d10a      	bne.n	8008c70 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008c62:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c6a:	d101      	bne.n	8008c70 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008c78:	0a1b      	lsrs	r3, r3, #8
 8008c7a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008c7e:	69fa      	ldr	r2, [r7, #28]
 8008c80:	4413      	add	r3, r2
 8008c82:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c8c:	69f9      	ldr	r1, [r7, #28]
 8008c8e:	fb01 f303 	mul.w	r3, r1, r3
 8008c92:	009b      	lsls	r3, r3, #2
 8008c94:	4413      	add	r3, r2
 8008c96:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c98:	e068      	b.n	8008d6c <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	2b41      	cmp	r3, #65	@ 0x41
 8008c9e:	d14c      	bne.n	8008d3a <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008ca8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d109      	bne.n	8008cc4 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008cb6:	f043 0220 	orr.w	r2, r3, #32
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	e0ec      	b.n	8008e9e <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008ccc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d109      	bne.n	8008ce8 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008cda:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	e0da      	b.n	8008e9e <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008cf0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008cf4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008cf8:	d10a      	bne.n	8008d10 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008d02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008d06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d0a:	d101      	bne.n	8008d10 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008d18:	0a1b      	lsrs	r3, r3, #8
 8008d1a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008d1e:	69fa      	ldr	r2, [r7, #28]
 8008d20:	4413      	add	r3, r2
 8008d22:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d2c:	69f9      	ldr	r1, [r7, #28]
 8008d2e:	fb01 f303 	mul.w	r3, r1, r3
 8008d32:	009b      	lsls	r3, r3, #2
 8008d34:	4413      	add	r3, r2
 8008d36:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d38:	e018      	b.n	8008d6c <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d3e:	68ba      	ldr	r2, [r7, #8]
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d309      	bcc.n	8008d58 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008d4a:	f043 0220 	orr.w	r2, r3, #32
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8008d54:	2301      	movs	r3, #1
 8008d56:	e0a2      	b.n	8008e9e <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d60:	68b9      	ldr	r1, [r7, #8]
 8008d62:	fb01 f303 	mul.w	r3, r1, r3
 8008d66:	009b      	lsls	r3, r3, #2
 8008d68:	4413      	add	r3, r2
 8008d6a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8008d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d107      	bne.n	8008d90 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8008d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	0c9b      	lsrs	r3, r3, #18
 8008d86:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	601a      	str	r2, [r3, #0]
 8008d8e:	e005      	b.n	8008d9c <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8008d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8008d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8008da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8008db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008db6:	3304      	adds	r3, #4
 8008db8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8008dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	b29a      	uxth	r2, r3
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8008dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	0c1b      	lsrs	r3, r3, #16
 8008dca:	f003 020f 	and.w	r2, r3, #15
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8008dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8008dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8008dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	0e1b      	lsrs	r3, r3, #24
 8008df0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8008df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	0fda      	lsrs	r2, r3, #31
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8008e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e04:	3304      	adds	r3, #4
 8008e06:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8008e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e0a:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	623b      	str	r3, [r7, #32]
 8008e10:	e00a      	b.n	8008e28 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8008e12:	697a      	ldr	r2, [r7, #20]
 8008e14:	6a3b      	ldr	r3, [r7, #32]
 8008e16:	441a      	add	r2, r3
 8008e18:	6839      	ldr	r1, [r7, #0]
 8008e1a:	6a3b      	ldr	r3, [r7, #32]
 8008e1c:	440b      	add	r3, r1
 8008e1e:	7812      	ldrb	r2, [r2, #0]
 8008e20:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8008e22:	6a3b      	ldr	r3, [r7, #32]
 8008e24:	3301      	adds	r3, #1
 8008e26:	623b      	str	r3, [r7, #32]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	4a1f      	ldr	r2, [pc, #124]	@ (8008eac <HAL_FDCAN_GetRxMessage+0x2d4>)
 8008e2e:	5cd3      	ldrb	r3, [r2, r3]
 8008e30:	461a      	mov	r2, r3
 8008e32:	6a3b      	ldr	r3, [r7, #32]
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d3ec      	bcc.n	8008e12 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	2b40      	cmp	r3, #64	@ 0x40
 8008e3c:	d105      	bne.n	8008e4a <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	69fa      	ldr	r2, [r7, #28]
 8008e44:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8008e48:	e01e      	b.n	8008e88 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	2b41      	cmp	r3, #65	@ 0x41
 8008e4e:	d105      	bne.n	8008e5c <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	69fa      	ldr	r2, [r7, #28]
 8008e56:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8008e5a:	e015      	b.n	8008e88 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	2b1f      	cmp	r3, #31
 8008e60:	d808      	bhi.n	8008e74 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	2101      	movs	r1, #1
 8008e68:	68ba      	ldr	r2, [r7, #8]
 8008e6a:	fa01 f202 	lsl.w	r2, r1, r2
 8008e6e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8008e72:	e009      	b.n	8008e88 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	f003 021f 	and.w	r2, r3, #31
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	2101      	movs	r1, #1
 8008e80:	fa01 f202 	lsl.w	r2, r1, r2
 8008e84:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	e008      	b.n	8008e9e <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008e92:	f043 0208 	orr.w	r2, r3, #8
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8008e9c:	2301      	movs	r3, #1
  }
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	372c      	adds	r7, #44	@ 0x2c
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea8:	4770      	bx	lr
 8008eaa:	bf00      	nop
 8008eac:	08014888 	.word	0x08014888

08008eb0 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b087      	sub	sp, #28
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	60f8      	str	r0, [r7, #12]
 8008eb8:	60b9      	str	r1, [r7, #8]
 8008eba:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008ec2:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8008ec4:	7dfb      	ldrb	r3, [r7, #23]
 8008ec6:	2b01      	cmp	r3, #1
 8008ec8:	d002      	beq.n	8008ed0 <HAL_FDCAN_ActivateNotification+0x20>
 8008eca:	7dfb      	ldrb	r3, [r7, #23]
 8008ecc:	2b02      	cmp	r3, #2
 8008ece:	d155      	bne.n	8008f7c <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	4013      	ands	r3, r2
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d108      	bne.n	8008ef0 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f042 0201 	orr.w	r2, r2, #1
 8008eec:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008eee:	e014      	b.n	8008f1a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	4013      	ands	r3, r2
 8008efa:	68ba      	ldr	r2, [r7, #8]
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d108      	bne.n	8008f12 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f042 0202 	orr.w	r2, r2, #2
 8008f0e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008f10:	e003      	b.n	8008f1a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	2203      	movs	r2, #3
 8008f18:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d009      	beq.n	8008f38 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	430a      	orrs	r2, r1
 8008f34:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d009      	beq.n	8008f56 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	430a      	orrs	r2, r1
 8008f52:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008f5c:	68ba      	ldr	r2, [r7, #8]
 8008f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8008f9c <HAL_FDCAN_ActivateNotification+0xec>)
 8008f60:	4013      	ands	r3, r2
 8008f62:	68fa      	ldr	r2, [r7, #12]
 8008f64:	6812      	ldr	r2, [r2, #0]
 8008f66:	430b      	orrs	r3, r1
 8008f68:	6553      	str	r3, [r2, #84]	@ 0x54
 8008f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8008fa0 <HAL_FDCAN_ActivateNotification+0xf0>)
 8008f6c:	695a      	ldr	r2, [r3, #20]
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	0f9b      	lsrs	r3, r3, #30
 8008f72:	490b      	ldr	r1, [pc, #44]	@ (8008fa0 <HAL_FDCAN_ActivateNotification+0xf0>)
 8008f74:	4313      	orrs	r3, r2
 8008f76:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	e008      	b.n	8008f8e <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008f82:	f043 0202 	orr.w	r2, r3, #2
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8008f8c:	2301      	movs	r3, #1
  }
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	371c      	adds	r7, #28
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr
 8008f9a:	bf00      	nop
 8008f9c:	3fcfffff 	.word	0x3fcfffff
 8008fa0:	4000a800 	.word	0x4000a800

08008fa4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b096      	sub	sp, #88	@ 0x58
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8008fac:	4b9a      	ldr	r3, [pc, #616]	@ (8009218 <HAL_FDCAN_IRQHandler+0x274>)
 8008fae:	691b      	ldr	r3, [r3, #16]
 8008fb0:	079b      	lsls	r3, r3, #30
 8008fb2:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8008fb4:	4b98      	ldr	r3, [pc, #608]	@ (8009218 <HAL_FDCAN_IRQHandler+0x274>)
 8008fb6:	695b      	ldr	r3, [r3, #20]
 8008fb8:	079b      	lsls	r3, r3, #30
 8008fba:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008fbc:	4013      	ands	r3, r2
 8008fbe:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fc6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8008fca:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fd2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008fd4:	4013      	ands	r3, r2
 8008fd6:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fde:	f003 030f 	and.w	r3, r3, #15
 8008fe2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008fec:	4013      	ands	r3, r2
 8008fee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ff6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008ffa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009002:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009004:	4013      	ands	r3, r2
 8009006:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800900e:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8009012:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800901a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800901c:	4013      	ands	r3, r2
 800901e:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009026:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 800902a:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009032:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009034:	4013      	ands	r3, r2
 8009036:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800903e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009046:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8009048:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800904a:	0a1b      	lsrs	r3, r3, #8
 800904c:	f003 0301 	and.w	r3, r3, #1
 8009050:	2b00      	cmp	r3, #0
 8009052:	d010      	beq.n	8009076 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8009054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009056:	0a1b      	lsrs	r3, r3, #8
 8009058:	f003 0301 	and.w	r3, r3, #1
 800905c:	2b00      	cmp	r3, #0
 800905e:	d00a      	beq.n	8009076 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009068:	651a      	str	r2, [r3, #80]	@ 0x50
 800906a:	4b6b      	ldr	r3, [pc, #428]	@ (8009218 <HAL_FDCAN_IRQHandler+0x274>)
 800906c:	2200      	movs	r2, #0
 800906e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 fa54 	bl	800951e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8009076:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009078:	0a9b      	lsrs	r3, r3, #10
 800907a:	f003 0301 	and.w	r3, r3, #1
 800907e:	2b00      	cmp	r3, #0
 8009080:	d01d      	beq.n	80090be <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8009082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009084:	0a9b      	lsrs	r3, r3, #10
 8009086:	f003 0301 	and.w	r3, r3, #1
 800908a:	2b00      	cmp	r3, #0
 800908c:	d017      	beq.n	80090be <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009096:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80090a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80090a2:	4013      	ands	r3, r2
 80090a4:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80090ae:	651a      	str	r2, [r3, #80]	@ 0x50
 80090b0:	4b59      	ldr	r3, [pc, #356]	@ (8009218 <HAL_FDCAN_IRQHandler+0x274>)
 80090b2:	2200      	movs	r2, #0
 80090b4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80090b6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f000 fa07 	bl	80094cc <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80090be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d00d      	beq.n	80090e0 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681a      	ldr	r2, [r3, #0]
 80090c8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80090ca:	4b54      	ldr	r3, [pc, #336]	@ (800921c <HAL_FDCAN_IRQHandler+0x278>)
 80090cc:	400b      	ands	r3, r1
 80090ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80090d0:	4a51      	ldr	r2, [pc, #324]	@ (8009218 <HAL_FDCAN_IRQHandler+0x274>)
 80090d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090d4:	0f9b      	lsrs	r3, r3, #30
 80090d6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80090d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 f9c0 	bl	8009460 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80090e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d00d      	beq.n	8009102 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681a      	ldr	r2, [r3, #0]
 80090ea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80090ec:	4b4b      	ldr	r3, [pc, #300]	@ (800921c <HAL_FDCAN_IRQHandler+0x278>)
 80090ee:	400b      	ands	r3, r1
 80090f0:	6513      	str	r3, [r2, #80]	@ 0x50
 80090f2:	4a49      	ldr	r2, [pc, #292]	@ (8009218 <HAL_FDCAN_IRQHandler+0x274>)
 80090f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80090f6:	0f9b      	lsrs	r3, r3, #30
 80090f8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80090fa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 f9ba 	bl	8009476 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8009102:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009104:	2b00      	cmp	r3, #0
 8009106:	d00d      	beq.n	8009124 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681a      	ldr	r2, [r3, #0]
 800910c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800910e:	4b43      	ldr	r3, [pc, #268]	@ (800921c <HAL_FDCAN_IRQHandler+0x278>)
 8009110:	400b      	ands	r3, r1
 8009112:	6513      	str	r3, [r2, #80]	@ 0x50
 8009114:	4a40      	ldr	r2, [pc, #256]	@ (8009218 <HAL_FDCAN_IRQHandler+0x274>)
 8009116:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009118:	0f9b      	lsrs	r3, r3, #30
 800911a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800911c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f7f8 fc6a 	bl	80019f8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8009124:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009126:	2b00      	cmp	r3, #0
 8009128:	d00d      	beq.n	8009146 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681a      	ldr	r2, [r3, #0]
 800912e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009130:	4b3a      	ldr	r3, [pc, #232]	@ (800921c <HAL_FDCAN_IRQHandler+0x278>)
 8009132:	400b      	ands	r3, r1
 8009134:	6513      	str	r3, [r2, #80]	@ 0x50
 8009136:	4a38      	ldr	r2, [pc, #224]	@ (8009218 <HAL_FDCAN_IRQHandler+0x274>)
 8009138:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800913a:	0f9b      	lsrs	r3, r3, #30
 800913c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800913e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f000 f9a3 	bl	800948c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8009146:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009148:	0adb      	lsrs	r3, r3, #11
 800914a:	f003 0301 	and.w	r3, r3, #1
 800914e:	2b00      	cmp	r3, #0
 8009150:	d010      	beq.n	8009174 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8009152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009154:	0adb      	lsrs	r3, r3, #11
 8009156:	f003 0301 	and.w	r3, r3, #1
 800915a:	2b00      	cmp	r3, #0
 800915c:	d00a      	beq.n	8009174 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009166:	651a      	str	r2, [r3, #80]	@ 0x50
 8009168:	4b2b      	ldr	r3, [pc, #172]	@ (8009218 <HAL_FDCAN_IRQHandler+0x274>)
 800916a:	2200      	movs	r2, #0
 800916c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 f997 	bl	80094a2 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8009174:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009176:	0a5b      	lsrs	r3, r3, #9
 8009178:	f003 0301 	and.w	r3, r3, #1
 800917c:	2b00      	cmp	r3, #0
 800917e:	d01d      	beq.n	80091bc <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8009180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009182:	0a5b      	lsrs	r3, r3, #9
 8009184:	f003 0301 	and.w	r3, r3, #1
 8009188:	2b00      	cmp	r3, #0
 800918a:	d017      	beq.n	80091bc <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009194:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800919e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091a0:	4013      	ands	r3, r2
 80091a2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80091ac:	651a      	str	r2, [r3, #80]	@ 0x50
 80091ae:	4b1a      	ldr	r3, [pc, #104]	@ (8009218 <HAL_FDCAN_IRQHandler+0x274>)
 80091b0:	2200      	movs	r2, #0
 80091b2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80091b4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 f97d 	bl	80094b6 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 80091bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091be:	0cdb      	lsrs	r3, r3, #19
 80091c0:	f003 0301 	and.w	r3, r3, #1
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d010      	beq.n	80091ea <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 80091c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ca:	0cdb      	lsrs	r3, r3, #19
 80091cc:	f003 0301 	and.w	r3, r3, #1
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d00a      	beq.n	80091ea <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80091dc:	651a      	str	r2, [r3, #80]	@ 0x50
 80091de:	4b0e      	ldr	r3, [pc, #56]	@ (8009218 <HAL_FDCAN_IRQHandler+0x274>)
 80091e0:	2200      	movs	r2, #0
 80091e2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f000 f97c 	bl	80094e2 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80091ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091ec:	0c1b      	lsrs	r3, r3, #16
 80091ee:	f003 0301 	and.w	r3, r3, #1
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d016      	beq.n	8009224 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80091f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091f8:	0c1b      	lsrs	r3, r3, #16
 80091fa:	f003 0301 	and.w	r3, r3, #1
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d010      	beq.n	8009224 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800920a:	651a      	str	r2, [r3, #80]	@ 0x50
 800920c:	4b02      	ldr	r3, [pc, #8]	@ (8009218 <HAL_FDCAN_IRQHandler+0x274>)
 800920e:	2200      	movs	r2, #0
 8009210:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	e004      	b.n	8009220 <HAL_FDCAN_IRQHandler+0x27c>
 8009216:	bf00      	nop
 8009218:	4000a800 	.word	0x4000a800
 800921c:	3fcfffff 	.word	0x3fcfffff
 8009220:	f000 f969 	bl	80094f6 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8009224:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009226:	0c9b      	lsrs	r3, r3, #18
 8009228:	f003 0301 	and.w	r3, r3, #1
 800922c:	2b00      	cmp	r3, #0
 800922e:	d010      	beq.n	8009252 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8009230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009232:	0c9b      	lsrs	r3, r3, #18
 8009234:	f003 0301 	and.w	r3, r3, #1
 8009238:	2b00      	cmp	r3, #0
 800923a:	d00a      	beq.n	8009252 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8009244:	651a      	str	r2, [r3, #80]	@ 0x50
 8009246:	4b83      	ldr	r3, [pc, #524]	@ (8009454 <HAL_FDCAN_IRQHandler+0x4b0>)
 8009248:	2200      	movs	r2, #0
 800924a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 f95c 	bl	800950a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8009252:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009254:	0c5b      	lsrs	r3, r3, #17
 8009256:	f003 0301 	and.w	r3, r3, #1
 800925a:	2b00      	cmp	r3, #0
 800925c:	d015      	beq.n	800928a <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800925e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009260:	0c5b      	lsrs	r3, r3, #17
 8009262:	f003 0301 	and.w	r3, r3, #1
 8009266:	2b00      	cmp	r3, #0
 8009268:	d00f      	beq.n	800928a <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8009272:	651a      	str	r2, [r3, #80]	@ 0x50
 8009274:	4b77      	ldr	r3, [pc, #476]	@ (8009454 <HAL_FDCAN_IRQHandler+0x4b0>)
 8009276:	2200      	movs	r2, #0
 8009278:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009280:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800928a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800928c:	2b00      	cmp	r3, #0
 800928e:	d00d      	beq.n	80092ac <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009296:	4b70      	ldr	r3, [pc, #448]	@ (8009458 <HAL_FDCAN_IRQHandler+0x4b4>)
 8009298:	400b      	ands	r3, r1
 800929a:	6513      	str	r3, [r2, #80]	@ 0x50
 800929c:	4a6d      	ldr	r2, [pc, #436]	@ (8009454 <HAL_FDCAN_IRQHandler+0x4b0>)
 800929e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092a0:	0f9b      	lsrs	r3, r3, #30
 80092a2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80092a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f7f8 fcaa 	bl	8001c00 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80092ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d011      	beq.n	80092d6 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80092b8:	4b67      	ldr	r3, [pc, #412]	@ (8009458 <HAL_FDCAN_IRQHandler+0x4b4>)
 80092ba:	400b      	ands	r3, r1
 80092bc:	6513      	str	r3, [r2, #80]	@ 0x50
 80092be:	4a65      	ldr	r2, [pc, #404]	@ (8009454 <HAL_FDCAN_IRQHandler+0x4b0>)
 80092c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80092c2:	0f9b      	lsrs	r3, r3, #30
 80092c4:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80092cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80092ce:	431a      	orrs	r2, r3
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4a60      	ldr	r2, [pc, #384]	@ (800945c <HAL_FDCAN_IRQHandler+0x4b8>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	f040 80ac 	bne.w	800943a <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	689b      	ldr	r3, [r3, #8]
 80092e8:	f003 0303 	and.w	r3, r3, #3
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	f000 80a4 	beq.w	800943a <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	685b      	ldr	r3, [r3, #4]
 80092f6:	6a1b      	ldr	r3, [r3, #32]
 80092f8:	f003 030f 	and.w	r3, r3, #15
 80092fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009304:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009306:	4013      	ands	r3, r2
 8009308:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	6a1b      	ldr	r3, [r3, #32]
 8009310:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009314:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800931c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800931e:	4013      	ands	r3, r2
 8009320:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	6a1b      	ldr	r3, [r3, #32]
 8009328:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800932c:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009334:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009336:	4013      	ands	r3, r2
 8009338:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	6a1b      	ldr	r3, [r3, #32]
 8009340:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8009344:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	685b      	ldr	r3, [r3, #4]
 800934a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800934c:	6a3a      	ldr	r2, [r7, #32]
 800934e:	4013      	ands	r3, r2
 8009350:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	685b      	ldr	r3, [r3, #4]
 8009356:	6a1b      	ldr	r3, [r3, #32]
 8009358:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 800935c:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	685b      	ldr	r3, [r3, #4]
 8009362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009364:	69fa      	ldr	r2, [r7, #28]
 8009366:	4013      	ands	r3, r2
 8009368:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009370:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	6a1b      	ldr	r3, [r3, #32]
 8009378:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 800937a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800937c:	2b00      	cmp	r3, #0
 800937e:	d007      	beq.n	8009390 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009386:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8009388:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 f8db 	bl	8009546 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8009390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009392:	2b00      	cmp	r3, #0
 8009394:	d007      	beq.n	80093a6 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800939c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 800939e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f000 f8db 	bl	800955c <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 80093a6:	69bb      	ldr	r3, [r7, #24]
 80093a8:	099b      	lsrs	r3, r3, #6
 80093aa:	f003 0301 	and.w	r3, r3, #1
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d01a      	beq.n	80093e8 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	099b      	lsrs	r3, r3, #6
 80093b6:	f003 0301 	and.w	r3, r3, #1
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d014      	beq.n	80093e8 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093c4:	0c1b      	lsrs	r3, r3, #16
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80093d4:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	685b      	ldr	r3, [r3, #4]
 80093da:	2240      	movs	r2, #64	@ 0x40
 80093dc:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80093de:	68fa      	ldr	r2, [r7, #12]
 80093e0:	6939      	ldr	r1, [r7, #16]
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 f8c5 	bl	8009572 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 80093e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d007      	beq.n	80093fe <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093f4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80093f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 f8c6 	bl	800958a <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80093fe:	6a3b      	ldr	r3, [r7, #32]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d00b      	beq.n	800941c <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	6a3a      	ldr	r2, [r7, #32]
 800940a:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8009412:	6a3b      	ldr	r3, [r7, #32]
 8009414:	431a      	orrs	r2, r3
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 800941c:	69fb      	ldr	r3, [r7, #28]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d00b      	beq.n	800943a <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	69fa      	ldr	r2, [r7, #28]
 8009428:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8009430:	69fb      	ldr	r3, [r7, #28]
 8009432:	431a      	orrs	r2, r3
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009440:	2b00      	cmp	r3, #0
 8009442:	d002      	beq.n	800944a <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f000 f874 	bl	8009532 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800944a:	bf00      	nop
 800944c:	3758      	adds	r7, #88	@ 0x58
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	4000a800 	.word	0x4000a800
 8009458:	3fcfffff 	.word	0x3fcfffff
 800945c:	4000a000 	.word	0x4000a000

08009460 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8009460:	b480      	push	{r7}
 8009462:	b083      	sub	sp, #12
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800946a:	bf00      	nop
 800946c:	370c      	adds	r7, #12
 800946e:	46bd      	mov	sp, r7
 8009470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009474:	4770      	bx	lr

08009476 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8009476:	b480      	push	{r7}
 8009478:	b083      	sub	sp, #12
 800947a:	af00      	add	r7, sp, #0
 800947c:	6078      	str	r0, [r7, #4]
 800947e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8009480:	bf00      	nop
 8009482:	370c      	adds	r7, #12
 8009484:	46bd      	mov	sp, r7
 8009486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948a:	4770      	bx	lr

0800948c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8009496:	bf00      	nop
 8009498:	370c      	adds	r7, #12
 800949a:	46bd      	mov	sp, r7
 800949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a0:	4770      	bx	lr

080094a2 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80094a2:	b480      	push	{r7}
 80094a4:	b083      	sub	sp, #12
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80094aa:	bf00      	nop
 80094ac:	370c      	adds	r7, #12
 80094ae:	46bd      	mov	sp, r7
 80094b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b4:	4770      	bx	lr

080094b6 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80094b6:	b480      	push	{r7}
 80094b8:	b083      	sub	sp, #12
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	6078      	str	r0, [r7, #4]
 80094be:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80094c0:	bf00      	nop
 80094c2:	370c      	adds	r7, #12
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr

080094cc <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80094d6:	bf00      	nop
 80094d8:	370c      	adds	r7, #12
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr

080094e2 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80094e2:	b480      	push	{r7}
 80094e4:	b083      	sub	sp, #12
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80094ea:	bf00      	nop
 80094ec:	370c      	adds	r7, #12
 80094ee:	46bd      	mov	sp, r7
 80094f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f4:	4770      	bx	lr

080094f6 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80094f6:	b480      	push	{r7}
 80094f8:	b083      	sub	sp, #12
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80094fe:	bf00      	nop
 8009500:	370c      	adds	r7, #12
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr

0800950a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800950a:	b480      	push	{r7}
 800950c:	b083      	sub	sp, #12
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8009512:	bf00      	nop
 8009514:	370c      	adds	r7, #12
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr

0800951e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800951e:	b480      	push	{r7}
 8009520:	b083      	sub	sp, #12
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8009526:	bf00      	nop
 8009528:	370c      	adds	r7, #12
 800952a:	46bd      	mov	sp, r7
 800952c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009530:	4770      	bx	lr

08009532 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8009532:	b480      	push	{r7}
 8009534:	b083      	sub	sp, #12
 8009536:	af00      	add	r7, sp, #0
 8009538:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800953a:	bf00      	nop
 800953c:	370c      	adds	r7, #12
 800953e:	46bd      	mov	sp, r7
 8009540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009544:	4770      	bx	lr

08009546 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8009546:	b480      	push	{r7}
 8009548:	b083      	sub	sp, #12
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
 800954e:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8009550:	bf00      	nop
 8009552:	370c      	adds	r7, #12
 8009554:	46bd      	mov	sp, r7
 8009556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955a:	4770      	bx	lr

0800955c <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800955c:	b480      	push	{r7}
 800955e:	b083      	sub	sp, #12
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8009566:	bf00      	nop
 8009568:	370c      	adds	r7, #12
 800956a:	46bd      	mov	sp, r7
 800956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009570:	4770      	bx	lr

08009572 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8009572:	b480      	push	{r7}
 8009574:	b085      	sub	sp, #20
 8009576:	af00      	add	r7, sp, #0
 8009578:	60f8      	str	r0, [r7, #12]
 800957a:	60b9      	str	r1, [r7, #8]
 800957c:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 800957e:	bf00      	nop
 8009580:	3714      	adds	r7, #20
 8009582:	46bd      	mov	sp, r7
 8009584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009588:	4770      	bx	lr

0800958a <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 800958a:	b480      	push	{r7}
 800958c:	b083      	sub	sp, #12
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
 8009592:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8009594:	bf00      	nop
 8009596:	370c      	adds	r7, #12
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr

080095a0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b085      	sub	sp, #20
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095ac:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80095b6:	4ba7      	ldr	r3, [pc, #668]	@ (8009854 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80095b8:	4013      	ands	r3, r2
 80095ba:	68ba      	ldr	r2, [r7, #8]
 80095bc:	0091      	lsls	r1, r2, #2
 80095be:	687a      	ldr	r2, [r7, #4]
 80095c0:	6812      	ldr	r2, [r2, #0]
 80095c2:	430b      	orrs	r3, r1
 80095c4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80095d0:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095d8:	041a      	lsls	r2, r3, #16
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	430a      	orrs	r2, r1
 80095e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095e8:	68ba      	ldr	r2, [r7, #8]
 80095ea:	4413      	add	r3, r2
 80095ec:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80095f6:	4b97      	ldr	r3, [pc, #604]	@ (8009854 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80095f8:	4013      	ands	r3, r2
 80095fa:	68ba      	ldr	r2, [r7, #8]
 80095fc:	0091      	lsls	r1, r2, #2
 80095fe:	687a      	ldr	r2, [r7, #4]
 8009600:	6812      	ldr	r2, [r2, #0]
 8009602:	430b      	orrs	r3, r1
 8009604:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009610:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009618:	041a      	lsls	r2, r3, #16
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	430a      	orrs	r2, r1
 8009620:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009628:	005b      	lsls	r3, r3, #1
 800962a:	68ba      	ldr	r2, [r7, #8]
 800962c:	4413      	add	r3, r2
 800962e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8009638:	4b86      	ldr	r3, [pc, #536]	@ (8009854 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800963a:	4013      	ands	r3, r2
 800963c:	68ba      	ldr	r2, [r7, #8]
 800963e:	0091      	lsls	r1, r2, #2
 8009640:	687a      	ldr	r2, [r7, #4]
 8009642:	6812      	ldr	r2, [r2, #0]
 8009644:	430b      	orrs	r3, r1
 8009646:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009652:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800965a:	041a      	lsls	r2, r3, #16
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	430a      	orrs	r2, r1
 8009662:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800966a:	687a      	ldr	r2, [r7, #4]
 800966c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800966e:	fb02 f303 	mul.w	r3, r2, r3
 8009672:	68ba      	ldr	r2, [r7, #8]
 8009674:	4413      	add	r3, r2
 8009676:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8009680:	4b74      	ldr	r3, [pc, #464]	@ (8009854 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009682:	4013      	ands	r3, r2
 8009684:	68ba      	ldr	r2, [r7, #8]
 8009686:	0091      	lsls	r1, r2, #2
 8009688:	687a      	ldr	r2, [r7, #4]
 800968a:	6812      	ldr	r2, [r2, #0]
 800968c:	430b      	orrs	r3, r1
 800968e:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800969a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80096a2:	041a      	lsls	r2, r3, #16
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	430a      	orrs	r2, r1
 80096aa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80096b2:	687a      	ldr	r2, [r7, #4]
 80096b4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80096b6:	fb02 f303 	mul.w	r3, r2, r3
 80096ba:	68ba      	ldr	r2, [r7, #8]
 80096bc:	4413      	add	r3, r2
 80096be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 80096c8:	4b62      	ldr	r3, [pc, #392]	@ (8009854 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80096ca:	4013      	ands	r3, r2
 80096cc:	68ba      	ldr	r2, [r7, #8]
 80096ce:	0091      	lsls	r1, r2, #2
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	6812      	ldr	r2, [r2, #0]
 80096d4:	430b      	orrs	r3, r1
 80096d6:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096de:	687a      	ldr	r2, [r7, #4]
 80096e0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80096e2:	fb02 f303 	mul.w	r3, r2, r3
 80096e6:	68ba      	ldr	r2, [r7, #8]
 80096e8:	4413      	add	r3, r2
 80096ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80096f4:	4b57      	ldr	r3, [pc, #348]	@ (8009854 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80096f6:	4013      	ands	r3, r2
 80096f8:	68ba      	ldr	r2, [r7, #8]
 80096fa:	0091      	lsls	r1, r2, #2
 80096fc:	687a      	ldr	r2, [r7, #4]
 80096fe:	6812      	ldr	r2, [r2, #0]
 8009700:	430b      	orrs	r3, r1
 8009702:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800970e:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009716:	041a      	lsls	r2, r3, #16
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	430a      	orrs	r2, r1
 800971e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009726:	005b      	lsls	r3, r3, #1
 8009728:	68ba      	ldr	r2, [r7, #8]
 800972a:	4413      	add	r3, r2
 800972c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8009736:	4b47      	ldr	r3, [pc, #284]	@ (8009854 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009738:	4013      	ands	r3, r2
 800973a:	68ba      	ldr	r2, [r7, #8]
 800973c:	0091      	lsls	r1, r2, #2
 800973e:	687a      	ldr	r2, [r7, #4]
 8009740:	6812      	ldr	r2, [r2, #0]
 8009742:	430b      	orrs	r3, r1
 8009744:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009750:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009758:	041a      	lsls	r2, r3, #16
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	430a      	orrs	r2, r1
 8009760:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800976c:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009774:	061a      	lsls	r2, r3, #24
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	430a      	orrs	r2, r1
 800977c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009784:	4b34      	ldr	r3, [pc, #208]	@ (8009858 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8009786:	4413      	add	r3, r2
 8009788:	009a      	lsls	r2, r3, #2
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009796:	009b      	lsls	r3, r3, #2
 8009798:	441a      	add	r2, r3
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097a6:	00db      	lsls	r3, r3, #3
 80097a8:	441a      	add	r2, r3
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097b6:	6879      	ldr	r1, [r7, #4]
 80097b8:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 80097ba:	fb01 f303 	mul.w	r3, r1, r3
 80097be:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80097c0:	441a      	add	r2, r3
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097ce:	6879      	ldr	r1, [r7, #4]
 80097d0:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 80097d2:	fb01 f303 	mul.w	r3, r1, r3
 80097d6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80097d8:	441a      	add	r2, r3
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097e6:	6879      	ldr	r1, [r7, #4]
 80097e8:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 80097ea:	fb01 f303 	mul.w	r3, r1, r3
 80097ee:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80097f0:	441a      	add	r2, r3
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009802:	00db      	lsls	r3, r3, #3
 8009804:	441a      	add	r2, r3
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009816:	6879      	ldr	r1, [r7, #4]
 8009818:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800981a:	fb01 f303 	mul.w	r3, r1, r3
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	441a      	add	r2, r3
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009832:	6879      	ldr	r1, [r7, #4]
 8009834:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8009836:	fb01 f303 	mul.w	r3, r1, r3
 800983a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800983c:	441a      	add	r2, r3
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800984a:	4a04      	ldr	r2, [pc, #16]	@ (800985c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d915      	bls.n	800987c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8009850:	e006      	b.n	8009860 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8009852:	bf00      	nop
 8009854:	ffff0003 	.word	0xffff0003
 8009858:	10002b00 	.word	0x10002b00
 800985c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009866:	f043 0220 	orr.w	r2, r3, #32
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2203      	movs	r2, #3
 8009874:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8009878:	2301      	movs	r3, #1
 800987a:	e010      	b.n	800989e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009880:	60fb      	str	r3, [r7, #12]
 8009882:	e005      	b.n	8009890 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2200      	movs	r2, #0
 8009888:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	3304      	adds	r3, #4
 800988e:	60fb      	str	r3, [r7, #12]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009896:	68fa      	ldr	r2, [r7, #12]
 8009898:	429a      	cmp	r2, r3
 800989a:	d3f3      	bcc.n	8009884 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800989c:	2300      	movs	r3, #0
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3714      	adds	r7, #20
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr
 80098aa:	bf00      	nop

080098ac <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b089      	sub	sp, #36	@ 0x24
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	60f8      	str	r0, [r7, #12]
 80098b4:	60b9      	str	r1, [r7, #8]
 80098b6:	607a      	str	r2, [r7, #4]
 80098b8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	685b      	ldr	r3, [r3, #4]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d10a      	bne.n	80098d8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80098ca:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80098d2:	4313      	orrs	r3, r2
 80098d4:	61fb      	str	r3, [r7, #28]
 80098d6:	e00a      	b.n	80098ee <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80098e0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80098e6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80098e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80098ec:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	6a1b      	ldr	r3, [r3, #32]
 80098f2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80098f8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80098fe:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8009904:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	68db      	ldr	r3, [r3, #12]
 800990a:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800990c:	4313      	orrs	r3, r2
 800990e:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800991a:	6839      	ldr	r1, [r7, #0]
 800991c:	fb01 f303 	mul.w	r3, r1, r3
 8009920:	009b      	lsls	r3, r3, #2
 8009922:	4413      	add	r3, r2
 8009924:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8009926:	69bb      	ldr	r3, [r7, #24]
 8009928:	69fa      	ldr	r2, [r7, #28]
 800992a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800992c:	69bb      	ldr	r3, [r7, #24]
 800992e:	3304      	adds	r3, #4
 8009930:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8009932:	69bb      	ldr	r3, [r7, #24]
 8009934:	693a      	ldr	r2, [r7, #16]
 8009936:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8009938:	69bb      	ldr	r3, [r7, #24]
 800993a:	3304      	adds	r3, #4
 800993c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800993e:	2300      	movs	r3, #0
 8009940:	617b      	str	r3, [r7, #20]
 8009942:	e020      	b.n	8009986 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	3303      	adds	r3, #3
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	4413      	add	r3, r2
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	3302      	adds	r3, #2
 8009954:	6879      	ldr	r1, [r7, #4]
 8009956:	440b      	add	r3, r1
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800995c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	3301      	adds	r3, #1
 8009962:	6879      	ldr	r1, [r7, #4]
 8009964:	440b      	add	r3, r1
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800996a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800996c:	6879      	ldr	r1, [r7, #4]
 800996e:	697a      	ldr	r2, [r7, #20]
 8009970:	440a      	add	r2, r1
 8009972:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8009974:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8009976:	69bb      	ldr	r3, [r7, #24]
 8009978:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800997a:	69bb      	ldr	r3, [r7, #24]
 800997c:	3304      	adds	r3, #4
 800997e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	3304      	adds	r3, #4
 8009984:	617b      	str	r3, [r7, #20]
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	68db      	ldr	r3, [r3, #12]
 800998a:	4a06      	ldr	r2, [pc, #24]	@ (80099a4 <FDCAN_CopyMessageToRAM+0xf8>)
 800998c:	5cd3      	ldrb	r3, [r2, r3]
 800998e:	461a      	mov	r2, r3
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	4293      	cmp	r3, r2
 8009994:	d3d6      	bcc.n	8009944 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8009996:	bf00      	nop
 8009998:	bf00      	nop
 800999a:	3724      	adds	r7, #36	@ 0x24
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr
 80099a4:	08014888 	.word	0x08014888

080099a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b089      	sub	sp, #36	@ 0x24
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80099b2:	2300      	movs	r3, #0
 80099b4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80099b6:	4b86      	ldr	r3, [pc, #536]	@ (8009bd0 <HAL_GPIO_Init+0x228>)
 80099b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80099ba:	e18c      	b.n	8009cd6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	681a      	ldr	r2, [r3, #0]
 80099c0:	2101      	movs	r1, #1
 80099c2:	69fb      	ldr	r3, [r7, #28]
 80099c4:	fa01 f303 	lsl.w	r3, r1, r3
 80099c8:	4013      	ands	r3, r2
 80099ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	f000 817e 	beq.w	8009cd0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	f003 0303 	and.w	r3, r3, #3
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d005      	beq.n	80099ec <HAL_GPIO_Init+0x44>
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	f003 0303 	and.w	r3, r3, #3
 80099e8:	2b02      	cmp	r3, #2
 80099ea:	d130      	bne.n	8009a4e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	689b      	ldr	r3, [r3, #8]
 80099f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80099f2:	69fb      	ldr	r3, [r7, #28]
 80099f4:	005b      	lsls	r3, r3, #1
 80099f6:	2203      	movs	r2, #3
 80099f8:	fa02 f303 	lsl.w	r3, r2, r3
 80099fc:	43db      	mvns	r3, r3
 80099fe:	69ba      	ldr	r2, [r7, #24]
 8009a00:	4013      	ands	r3, r2
 8009a02:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	68da      	ldr	r2, [r3, #12]
 8009a08:	69fb      	ldr	r3, [r7, #28]
 8009a0a:	005b      	lsls	r3, r3, #1
 8009a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a10:	69ba      	ldr	r2, [r7, #24]
 8009a12:	4313      	orrs	r3, r2
 8009a14:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	69ba      	ldr	r2, [r7, #24]
 8009a1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009a22:	2201      	movs	r2, #1
 8009a24:	69fb      	ldr	r3, [r7, #28]
 8009a26:	fa02 f303 	lsl.w	r3, r2, r3
 8009a2a:	43db      	mvns	r3, r3
 8009a2c:	69ba      	ldr	r2, [r7, #24]
 8009a2e:	4013      	ands	r3, r2
 8009a30:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	091b      	lsrs	r3, r3, #4
 8009a38:	f003 0201 	and.w	r2, r3, #1
 8009a3c:	69fb      	ldr	r3, [r7, #28]
 8009a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8009a42:	69ba      	ldr	r2, [r7, #24]
 8009a44:	4313      	orrs	r3, r2
 8009a46:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	69ba      	ldr	r2, [r7, #24]
 8009a4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	685b      	ldr	r3, [r3, #4]
 8009a52:	f003 0303 	and.w	r3, r3, #3
 8009a56:	2b03      	cmp	r3, #3
 8009a58:	d017      	beq.n	8009a8a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	68db      	ldr	r3, [r3, #12]
 8009a5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009a60:	69fb      	ldr	r3, [r7, #28]
 8009a62:	005b      	lsls	r3, r3, #1
 8009a64:	2203      	movs	r2, #3
 8009a66:	fa02 f303 	lsl.w	r3, r2, r3
 8009a6a:	43db      	mvns	r3, r3
 8009a6c:	69ba      	ldr	r2, [r7, #24]
 8009a6e:	4013      	ands	r3, r2
 8009a70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	689a      	ldr	r2, [r3, #8]
 8009a76:	69fb      	ldr	r3, [r7, #28]
 8009a78:	005b      	lsls	r3, r3, #1
 8009a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8009a7e:	69ba      	ldr	r2, [r7, #24]
 8009a80:	4313      	orrs	r3, r2
 8009a82:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	69ba      	ldr	r2, [r7, #24]
 8009a88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	f003 0303 	and.w	r3, r3, #3
 8009a92:	2b02      	cmp	r3, #2
 8009a94:	d123      	bne.n	8009ade <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009a96:	69fb      	ldr	r3, [r7, #28]
 8009a98:	08da      	lsrs	r2, r3, #3
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	3208      	adds	r2, #8
 8009a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009aa4:	69fb      	ldr	r3, [r7, #28]
 8009aa6:	f003 0307 	and.w	r3, r3, #7
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	220f      	movs	r2, #15
 8009aae:	fa02 f303 	lsl.w	r3, r2, r3
 8009ab2:	43db      	mvns	r3, r3
 8009ab4:	69ba      	ldr	r2, [r7, #24]
 8009ab6:	4013      	ands	r3, r2
 8009ab8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	691a      	ldr	r2, [r3, #16]
 8009abe:	69fb      	ldr	r3, [r7, #28]
 8009ac0:	f003 0307 	and.w	r3, r3, #7
 8009ac4:	009b      	lsls	r3, r3, #2
 8009ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8009aca:	69ba      	ldr	r2, [r7, #24]
 8009acc:	4313      	orrs	r3, r2
 8009ace:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009ad0:	69fb      	ldr	r3, [r7, #28]
 8009ad2:	08da      	lsrs	r2, r3, #3
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	3208      	adds	r2, #8
 8009ad8:	69b9      	ldr	r1, [r7, #24]
 8009ada:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009ae4:	69fb      	ldr	r3, [r7, #28]
 8009ae6:	005b      	lsls	r3, r3, #1
 8009ae8:	2203      	movs	r2, #3
 8009aea:	fa02 f303 	lsl.w	r3, r2, r3
 8009aee:	43db      	mvns	r3, r3
 8009af0:	69ba      	ldr	r2, [r7, #24]
 8009af2:	4013      	ands	r3, r2
 8009af4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	f003 0203 	and.w	r2, r3, #3
 8009afe:	69fb      	ldr	r3, [r7, #28]
 8009b00:	005b      	lsls	r3, r3, #1
 8009b02:	fa02 f303 	lsl.w	r3, r2, r3
 8009b06:	69ba      	ldr	r2, [r7, #24]
 8009b08:	4313      	orrs	r3, r2
 8009b0a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	69ba      	ldr	r2, [r7, #24]
 8009b10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	685b      	ldr	r3, [r3, #4]
 8009b16:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	f000 80d8 	beq.w	8009cd0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009b20:	4b2c      	ldr	r3, [pc, #176]	@ (8009bd4 <HAL_GPIO_Init+0x22c>)
 8009b22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009b26:	4a2b      	ldr	r2, [pc, #172]	@ (8009bd4 <HAL_GPIO_Init+0x22c>)
 8009b28:	f043 0302 	orr.w	r3, r3, #2
 8009b2c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8009b30:	4b28      	ldr	r3, [pc, #160]	@ (8009bd4 <HAL_GPIO_Init+0x22c>)
 8009b32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009b36:	f003 0302 	and.w	r3, r3, #2
 8009b3a:	60fb      	str	r3, [r7, #12]
 8009b3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009b3e:	4a26      	ldr	r2, [pc, #152]	@ (8009bd8 <HAL_GPIO_Init+0x230>)
 8009b40:	69fb      	ldr	r3, [r7, #28]
 8009b42:	089b      	lsrs	r3, r3, #2
 8009b44:	3302      	adds	r3, #2
 8009b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009b4c:	69fb      	ldr	r3, [r7, #28]
 8009b4e:	f003 0303 	and.w	r3, r3, #3
 8009b52:	009b      	lsls	r3, r3, #2
 8009b54:	220f      	movs	r2, #15
 8009b56:	fa02 f303 	lsl.w	r3, r2, r3
 8009b5a:	43db      	mvns	r3, r3
 8009b5c:	69ba      	ldr	r2, [r7, #24]
 8009b5e:	4013      	ands	r3, r2
 8009b60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	4a1d      	ldr	r2, [pc, #116]	@ (8009bdc <HAL_GPIO_Init+0x234>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d04a      	beq.n	8009c00 <HAL_GPIO_Init+0x258>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	4a1c      	ldr	r2, [pc, #112]	@ (8009be0 <HAL_GPIO_Init+0x238>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d02b      	beq.n	8009bca <HAL_GPIO_Init+0x222>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	4a1b      	ldr	r2, [pc, #108]	@ (8009be4 <HAL_GPIO_Init+0x23c>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d025      	beq.n	8009bc6 <HAL_GPIO_Init+0x21e>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	4a1a      	ldr	r2, [pc, #104]	@ (8009be8 <HAL_GPIO_Init+0x240>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d01f      	beq.n	8009bc2 <HAL_GPIO_Init+0x21a>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	4a19      	ldr	r2, [pc, #100]	@ (8009bec <HAL_GPIO_Init+0x244>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d019      	beq.n	8009bbe <HAL_GPIO_Init+0x216>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	4a18      	ldr	r2, [pc, #96]	@ (8009bf0 <HAL_GPIO_Init+0x248>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d013      	beq.n	8009bba <HAL_GPIO_Init+0x212>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	4a17      	ldr	r2, [pc, #92]	@ (8009bf4 <HAL_GPIO_Init+0x24c>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d00d      	beq.n	8009bb6 <HAL_GPIO_Init+0x20e>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	4a16      	ldr	r2, [pc, #88]	@ (8009bf8 <HAL_GPIO_Init+0x250>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d007      	beq.n	8009bb2 <HAL_GPIO_Init+0x20a>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	4a15      	ldr	r2, [pc, #84]	@ (8009bfc <HAL_GPIO_Init+0x254>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d101      	bne.n	8009bae <HAL_GPIO_Init+0x206>
 8009baa:	2309      	movs	r3, #9
 8009bac:	e029      	b.n	8009c02 <HAL_GPIO_Init+0x25a>
 8009bae:	230a      	movs	r3, #10
 8009bb0:	e027      	b.n	8009c02 <HAL_GPIO_Init+0x25a>
 8009bb2:	2307      	movs	r3, #7
 8009bb4:	e025      	b.n	8009c02 <HAL_GPIO_Init+0x25a>
 8009bb6:	2306      	movs	r3, #6
 8009bb8:	e023      	b.n	8009c02 <HAL_GPIO_Init+0x25a>
 8009bba:	2305      	movs	r3, #5
 8009bbc:	e021      	b.n	8009c02 <HAL_GPIO_Init+0x25a>
 8009bbe:	2304      	movs	r3, #4
 8009bc0:	e01f      	b.n	8009c02 <HAL_GPIO_Init+0x25a>
 8009bc2:	2303      	movs	r3, #3
 8009bc4:	e01d      	b.n	8009c02 <HAL_GPIO_Init+0x25a>
 8009bc6:	2302      	movs	r3, #2
 8009bc8:	e01b      	b.n	8009c02 <HAL_GPIO_Init+0x25a>
 8009bca:	2301      	movs	r3, #1
 8009bcc:	e019      	b.n	8009c02 <HAL_GPIO_Init+0x25a>
 8009bce:	bf00      	nop
 8009bd0:	58000080 	.word	0x58000080
 8009bd4:	58024400 	.word	0x58024400
 8009bd8:	58000400 	.word	0x58000400
 8009bdc:	58020000 	.word	0x58020000
 8009be0:	58020400 	.word	0x58020400
 8009be4:	58020800 	.word	0x58020800
 8009be8:	58020c00 	.word	0x58020c00
 8009bec:	58021000 	.word	0x58021000
 8009bf0:	58021400 	.word	0x58021400
 8009bf4:	58021800 	.word	0x58021800
 8009bf8:	58021c00 	.word	0x58021c00
 8009bfc:	58022400 	.word	0x58022400
 8009c00:	2300      	movs	r3, #0
 8009c02:	69fa      	ldr	r2, [r7, #28]
 8009c04:	f002 0203 	and.w	r2, r2, #3
 8009c08:	0092      	lsls	r2, r2, #2
 8009c0a:	4093      	lsls	r3, r2
 8009c0c:	69ba      	ldr	r2, [r7, #24]
 8009c0e:	4313      	orrs	r3, r2
 8009c10:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009c12:	4938      	ldr	r1, [pc, #224]	@ (8009cf4 <HAL_GPIO_Init+0x34c>)
 8009c14:	69fb      	ldr	r3, [r7, #28]
 8009c16:	089b      	lsrs	r3, r3, #2
 8009c18:	3302      	adds	r3, #2
 8009c1a:	69ba      	ldr	r2, [r7, #24]
 8009c1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009c20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	43db      	mvns	r3, r3
 8009c2c:	69ba      	ldr	r2, [r7, #24]
 8009c2e:	4013      	ands	r3, r2
 8009c30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	685b      	ldr	r3, [r3, #4]
 8009c36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d003      	beq.n	8009c46 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8009c3e:	69ba      	ldr	r2, [r7, #24]
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	4313      	orrs	r3, r2
 8009c44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8009c46:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009c4a:	69bb      	ldr	r3, [r7, #24]
 8009c4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009c4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009c52:	685b      	ldr	r3, [r3, #4]
 8009c54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	43db      	mvns	r3, r3
 8009c5a:	69ba      	ldr	r2, [r7, #24]
 8009c5c:	4013      	ands	r3, r2
 8009c5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	685b      	ldr	r3, [r3, #4]
 8009c64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d003      	beq.n	8009c74 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8009c6c:	69ba      	ldr	r2, [r7, #24]
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	4313      	orrs	r3, r2
 8009c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009c74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009c78:	69bb      	ldr	r3, [r7, #24]
 8009c7a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	43db      	mvns	r3, r3
 8009c86:	69ba      	ldr	r2, [r7, #24]
 8009c88:	4013      	ands	r3, r2
 8009c8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d003      	beq.n	8009ca0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8009c98:	69ba      	ldr	r2, [r7, #24]
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	4313      	orrs	r3, r2
 8009c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	69ba      	ldr	r2, [r7, #24]
 8009ca4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	43db      	mvns	r3, r3
 8009cb0:	69ba      	ldr	r2, [r7, #24]
 8009cb2:	4013      	ands	r3, r2
 8009cb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d003      	beq.n	8009cca <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8009cc2:	69ba      	ldr	r2, [r7, #24]
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	69ba      	ldr	r2, [r7, #24]
 8009cce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009cd0:	69fb      	ldr	r3, [r7, #28]
 8009cd2:	3301      	adds	r3, #1
 8009cd4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	681a      	ldr	r2, [r3, #0]
 8009cda:	69fb      	ldr	r3, [r7, #28]
 8009cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	f47f ae6b 	bne.w	80099bc <HAL_GPIO_Init+0x14>
  }
}
 8009ce6:	bf00      	nop
 8009ce8:	bf00      	nop
 8009cea:	3724      	adds	r7, #36	@ 0x24
 8009cec:	46bd      	mov	sp, r7
 8009cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf2:	4770      	bx	lr
 8009cf4:	58000400 	.word	0x58000400

08009cf8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b085      	sub	sp, #20
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	460b      	mov	r3, r1
 8009d02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	691a      	ldr	r2, [r3, #16]
 8009d08:	887b      	ldrh	r3, [r7, #2]
 8009d0a:	4013      	ands	r3, r2
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d002      	beq.n	8009d16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009d10:	2301      	movs	r3, #1
 8009d12:	73fb      	strb	r3, [r7, #15]
 8009d14:	e001      	b.n	8009d1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009d16:	2300      	movs	r3, #0
 8009d18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3714      	adds	r7, #20
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr

08009d28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b083      	sub	sp, #12
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	460b      	mov	r3, r1
 8009d32:	807b      	strh	r3, [r7, #2]
 8009d34:	4613      	mov	r3, r2
 8009d36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009d38:	787b      	ldrb	r3, [r7, #1]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d003      	beq.n	8009d46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009d3e:	887a      	ldrh	r2, [r7, #2]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009d44:	e003      	b.n	8009d4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009d46:	887b      	ldrh	r3, [r7, #2]
 8009d48:	041a      	lsls	r2, r3, #16
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	619a      	str	r2, [r3, #24]
}
 8009d4e:	bf00      	nop
 8009d50:	370c      	adds	r7, #12
 8009d52:	46bd      	mov	sp, r7
 8009d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d58:	4770      	bx	lr
	...

08009d5c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009d64:	4b19      	ldr	r3, [pc, #100]	@ (8009dcc <HAL_PWREx_ConfigSupply+0x70>)
 8009d66:	68db      	ldr	r3, [r3, #12]
 8009d68:	f003 0304 	and.w	r3, r3, #4
 8009d6c:	2b04      	cmp	r3, #4
 8009d6e:	d00a      	beq.n	8009d86 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009d70:	4b16      	ldr	r3, [pc, #88]	@ (8009dcc <HAL_PWREx_ConfigSupply+0x70>)
 8009d72:	68db      	ldr	r3, [r3, #12]
 8009d74:	f003 0307 	and.w	r3, r3, #7
 8009d78:	687a      	ldr	r2, [r7, #4]
 8009d7a:	429a      	cmp	r2, r3
 8009d7c:	d001      	beq.n	8009d82 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009d7e:	2301      	movs	r3, #1
 8009d80:	e01f      	b.n	8009dc2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009d82:	2300      	movs	r3, #0
 8009d84:	e01d      	b.n	8009dc2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009d86:	4b11      	ldr	r3, [pc, #68]	@ (8009dcc <HAL_PWREx_ConfigSupply+0x70>)
 8009d88:	68db      	ldr	r3, [r3, #12]
 8009d8a:	f023 0207 	bic.w	r2, r3, #7
 8009d8e:	490f      	ldr	r1, [pc, #60]	@ (8009dcc <HAL_PWREx_ConfigSupply+0x70>)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	4313      	orrs	r3, r2
 8009d94:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009d96:	f7f9 fe27 	bl	80039e8 <HAL_GetTick>
 8009d9a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009d9c:	e009      	b.n	8009db2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009d9e:	f7f9 fe23 	bl	80039e8 <HAL_GetTick>
 8009da2:	4602      	mov	r2, r0
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	1ad3      	subs	r3, r2, r3
 8009da8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009dac:	d901      	bls.n	8009db2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009dae:	2301      	movs	r3, #1
 8009db0:	e007      	b.n	8009dc2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009db2:	4b06      	ldr	r3, [pc, #24]	@ (8009dcc <HAL_PWREx_ConfigSupply+0x70>)
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009dba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009dbe:	d1ee      	bne.n	8009d9e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009dc0:	2300      	movs	r3, #0
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3710      	adds	r7, #16
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	58024800 	.word	0x58024800

08009dd0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b08c      	sub	sp, #48	@ 0x30
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d101      	bne.n	8009de2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009dde:	2301      	movs	r3, #1
 8009de0:	e3c8      	b.n	800a574 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f003 0301 	and.w	r3, r3, #1
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	f000 8087 	beq.w	8009efe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009df0:	4b88      	ldr	r3, [pc, #544]	@ (800a014 <HAL_RCC_OscConfig+0x244>)
 8009df2:	691b      	ldr	r3, [r3, #16]
 8009df4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009dfa:	4b86      	ldr	r3, [pc, #536]	@ (800a014 <HAL_RCC_OscConfig+0x244>)
 8009dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e02:	2b10      	cmp	r3, #16
 8009e04:	d007      	beq.n	8009e16 <HAL_RCC_OscConfig+0x46>
 8009e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e08:	2b18      	cmp	r3, #24
 8009e0a:	d110      	bne.n	8009e2e <HAL_RCC_OscConfig+0x5e>
 8009e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e0e:	f003 0303 	and.w	r3, r3, #3
 8009e12:	2b02      	cmp	r3, #2
 8009e14:	d10b      	bne.n	8009e2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e16:	4b7f      	ldr	r3, [pc, #508]	@ (800a014 <HAL_RCC_OscConfig+0x244>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d06c      	beq.n	8009efc <HAL_RCC_OscConfig+0x12c>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	685b      	ldr	r3, [r3, #4]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d168      	bne.n	8009efc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	e3a2      	b.n	800a574 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e36:	d106      	bne.n	8009e46 <HAL_RCC_OscConfig+0x76>
 8009e38:	4b76      	ldr	r3, [pc, #472]	@ (800a014 <HAL_RCC_OscConfig+0x244>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	4a75      	ldr	r2, [pc, #468]	@ (800a014 <HAL_RCC_OscConfig+0x244>)
 8009e3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009e42:	6013      	str	r3, [r2, #0]
 8009e44:	e02e      	b.n	8009ea4 <HAL_RCC_OscConfig+0xd4>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	685b      	ldr	r3, [r3, #4]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d10c      	bne.n	8009e68 <HAL_RCC_OscConfig+0x98>
 8009e4e:	4b71      	ldr	r3, [pc, #452]	@ (800a014 <HAL_RCC_OscConfig+0x244>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	4a70      	ldr	r2, [pc, #448]	@ (800a014 <HAL_RCC_OscConfig+0x244>)
 8009e54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009e58:	6013      	str	r3, [r2, #0]
 8009e5a:	4b6e      	ldr	r3, [pc, #440]	@ (800a014 <HAL_RCC_OscConfig+0x244>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4a6d      	ldr	r2, [pc, #436]	@ (800a014 <HAL_RCC_OscConfig+0x244>)
 8009e60:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009e64:	6013      	str	r3, [r2, #0]
 8009e66:	e01d      	b.n	8009ea4 <HAL_RCC_OscConfig+0xd4>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009e70:	d10c      	bne.n	8009e8c <HAL_RCC_OscConfig+0xbc>
 8009e72:	4b68      	ldr	r3, [pc, #416]	@ (800a014 <HAL_RCC_OscConfig+0x244>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a67      	ldr	r2, [pc, #412]	@ (800a014 <HAL_RCC_OscConfig+0x244>)
 8009e78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009e7c:	6013      	str	r3, [r2, #0]
 8009e7e:	4b65      	ldr	r3, [pc, #404]	@ (800a014 <HAL_RCC_OscConfig+0x244>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4a64      	ldr	r2, [pc, #400]	@ (800a014 <HAL_RCC_OscConfig+0x244>)
 8009e84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009e88:	6013      	str	r3, [r2, #0]
 8009e8a:	e00b      	b.n	8009ea4 <HAL_RCC_OscConfig+0xd4>
 8009e8c:	4b61      	ldr	r3, [pc, #388]	@ (800a014 <HAL_RCC_OscConfig+0x244>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4a60      	ldr	r2, [pc, #384]	@ (800a014 <HAL_RCC_OscConfig+0x244>)
 8009e92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009e96:	6013      	str	r3, [r2, #0]
 8009e98:	4b5e      	ldr	r3, [pc, #376]	@ (800a014 <HAL_RCC_OscConfig+0x244>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	4a5d      	ldr	r2, [pc, #372]	@ (800a014 <HAL_RCC_OscConfig+0x244>)
 8009e9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009ea2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	685b      	ldr	r3, [r3, #4]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d013      	beq.n	8009ed4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009eac:	f7f9 fd9c 	bl	80039e8 <HAL_GetTick>
 8009eb0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009eb2:	e008      	b.n	8009ec6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009eb4:	f7f9 fd98 	bl	80039e8 <HAL_GetTick>
 8009eb8:	4602      	mov	r2, r0
 8009eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ebc:	1ad3      	subs	r3, r2, r3
 8009ebe:	2b64      	cmp	r3, #100	@ 0x64
 8009ec0:	d901      	bls.n	8009ec6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009ec2:	2303      	movs	r3, #3
 8009ec4:	e356      	b.n	800a574 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009ec6:	4b53      	ldr	r3, [pc, #332]	@ (800a014 <HAL_RCC_OscConfig+0x244>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d0f0      	beq.n	8009eb4 <HAL_RCC_OscConfig+0xe4>
 8009ed2:	e014      	b.n	8009efe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ed4:	f7f9 fd88 	bl	80039e8 <HAL_GetTick>
 8009ed8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009eda:	e008      	b.n	8009eee <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009edc:	f7f9 fd84 	bl	80039e8 <HAL_GetTick>
 8009ee0:	4602      	mov	r2, r0
 8009ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ee4:	1ad3      	subs	r3, r2, r3
 8009ee6:	2b64      	cmp	r3, #100	@ 0x64
 8009ee8:	d901      	bls.n	8009eee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009eea:	2303      	movs	r3, #3
 8009eec:	e342      	b.n	800a574 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009eee:	4b49      	ldr	r3, [pc, #292]	@ (800a014 <HAL_RCC_OscConfig+0x244>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d1f0      	bne.n	8009edc <HAL_RCC_OscConfig+0x10c>
 8009efa:	e000      	b.n	8009efe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009efc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f003 0302 	and.w	r3, r3, #2
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	f000 808c 	beq.w	800a024 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009f0c:	4b41      	ldr	r3, [pc, #260]	@ (800a014 <HAL_RCC_OscConfig+0x244>)
 8009f0e:	691b      	ldr	r3, [r3, #16]
 8009f10:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009f14:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009f16:	4b3f      	ldr	r3, [pc, #252]	@ (800a014 <HAL_RCC_OscConfig+0x244>)
 8009f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f1a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009f1c:	6a3b      	ldr	r3, [r7, #32]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d007      	beq.n	8009f32 <HAL_RCC_OscConfig+0x162>
 8009f22:	6a3b      	ldr	r3, [r7, #32]
 8009f24:	2b18      	cmp	r3, #24
 8009f26:	d137      	bne.n	8009f98 <HAL_RCC_OscConfig+0x1c8>
 8009f28:	69fb      	ldr	r3, [r7, #28]
 8009f2a:	f003 0303 	and.w	r3, r3, #3
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d132      	bne.n	8009f98 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009f32:	4b38      	ldr	r3, [pc, #224]	@ (800a014 <HAL_RCC_OscConfig+0x244>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f003 0304 	and.w	r3, r3, #4
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d005      	beq.n	8009f4a <HAL_RCC_OscConfig+0x17a>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	68db      	ldr	r3, [r3, #12]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d101      	bne.n	8009f4a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009f46:	2301      	movs	r3, #1
 8009f48:	e314      	b.n	800a574 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009f4a:	4b32      	ldr	r3, [pc, #200]	@ (800a014 <HAL_RCC_OscConfig+0x244>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f023 0219 	bic.w	r2, r3, #25
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	68db      	ldr	r3, [r3, #12]
 8009f56:	492f      	ldr	r1, [pc, #188]	@ (800a014 <HAL_RCC_OscConfig+0x244>)
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f5c:	f7f9 fd44 	bl	80039e8 <HAL_GetTick>
 8009f60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009f62:	e008      	b.n	8009f76 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009f64:	f7f9 fd40 	bl	80039e8 <HAL_GetTick>
 8009f68:	4602      	mov	r2, r0
 8009f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f6c:	1ad3      	subs	r3, r2, r3
 8009f6e:	2b02      	cmp	r3, #2
 8009f70:	d901      	bls.n	8009f76 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8009f72:	2303      	movs	r3, #3
 8009f74:	e2fe      	b.n	800a574 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009f76:	4b27      	ldr	r3, [pc, #156]	@ (800a014 <HAL_RCC_OscConfig+0x244>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f003 0304 	and.w	r3, r3, #4
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d0f0      	beq.n	8009f64 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f82:	4b24      	ldr	r3, [pc, #144]	@ (800a014 <HAL_RCC_OscConfig+0x244>)
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	691b      	ldr	r3, [r3, #16]
 8009f8e:	061b      	lsls	r3, r3, #24
 8009f90:	4920      	ldr	r1, [pc, #128]	@ (800a014 <HAL_RCC_OscConfig+0x244>)
 8009f92:	4313      	orrs	r3, r2
 8009f94:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009f96:	e045      	b.n	800a024 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	68db      	ldr	r3, [r3, #12]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d026      	beq.n	8009fee <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009fa0:	4b1c      	ldr	r3, [pc, #112]	@ (800a014 <HAL_RCC_OscConfig+0x244>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f023 0219 	bic.w	r2, r3, #25
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	68db      	ldr	r3, [r3, #12]
 8009fac:	4919      	ldr	r1, [pc, #100]	@ (800a014 <HAL_RCC_OscConfig+0x244>)
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fb2:	f7f9 fd19 	bl	80039e8 <HAL_GetTick>
 8009fb6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009fb8:	e008      	b.n	8009fcc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009fba:	f7f9 fd15 	bl	80039e8 <HAL_GetTick>
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fc2:	1ad3      	subs	r3, r2, r3
 8009fc4:	2b02      	cmp	r3, #2
 8009fc6:	d901      	bls.n	8009fcc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009fc8:	2303      	movs	r3, #3
 8009fca:	e2d3      	b.n	800a574 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009fcc:	4b11      	ldr	r3, [pc, #68]	@ (800a014 <HAL_RCC_OscConfig+0x244>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f003 0304 	and.w	r3, r3, #4
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d0f0      	beq.n	8009fba <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009fd8:	4b0e      	ldr	r3, [pc, #56]	@ (800a014 <HAL_RCC_OscConfig+0x244>)
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	691b      	ldr	r3, [r3, #16]
 8009fe4:	061b      	lsls	r3, r3, #24
 8009fe6:	490b      	ldr	r1, [pc, #44]	@ (800a014 <HAL_RCC_OscConfig+0x244>)
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	604b      	str	r3, [r1, #4]
 8009fec:	e01a      	b.n	800a024 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009fee:	4b09      	ldr	r3, [pc, #36]	@ (800a014 <HAL_RCC_OscConfig+0x244>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	4a08      	ldr	r2, [pc, #32]	@ (800a014 <HAL_RCC_OscConfig+0x244>)
 8009ff4:	f023 0301 	bic.w	r3, r3, #1
 8009ff8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ffa:	f7f9 fcf5 	bl	80039e8 <HAL_GetTick>
 8009ffe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a000:	e00a      	b.n	800a018 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a002:	f7f9 fcf1 	bl	80039e8 <HAL_GetTick>
 800a006:	4602      	mov	r2, r0
 800a008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a00a:	1ad3      	subs	r3, r2, r3
 800a00c:	2b02      	cmp	r3, #2
 800a00e:	d903      	bls.n	800a018 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800a010:	2303      	movs	r3, #3
 800a012:	e2af      	b.n	800a574 <HAL_RCC_OscConfig+0x7a4>
 800a014:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a018:	4b96      	ldr	r3, [pc, #600]	@ (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f003 0304 	and.w	r3, r3, #4
 800a020:	2b00      	cmp	r3, #0
 800a022:	d1ee      	bne.n	800a002 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f003 0310 	and.w	r3, r3, #16
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d06a      	beq.n	800a106 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a030:	4b90      	ldr	r3, [pc, #576]	@ (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a032:	691b      	ldr	r3, [r3, #16]
 800a034:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a038:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a03a:	4b8e      	ldr	r3, [pc, #568]	@ (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a03c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a03e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a040:	69bb      	ldr	r3, [r7, #24]
 800a042:	2b08      	cmp	r3, #8
 800a044:	d007      	beq.n	800a056 <HAL_RCC_OscConfig+0x286>
 800a046:	69bb      	ldr	r3, [r7, #24]
 800a048:	2b18      	cmp	r3, #24
 800a04a:	d11b      	bne.n	800a084 <HAL_RCC_OscConfig+0x2b4>
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	f003 0303 	and.w	r3, r3, #3
 800a052:	2b01      	cmp	r3, #1
 800a054:	d116      	bne.n	800a084 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a056:	4b87      	ldr	r3, [pc, #540]	@ (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d005      	beq.n	800a06e <HAL_RCC_OscConfig+0x29e>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	69db      	ldr	r3, [r3, #28]
 800a066:	2b80      	cmp	r3, #128	@ 0x80
 800a068:	d001      	beq.n	800a06e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800a06a:	2301      	movs	r3, #1
 800a06c:	e282      	b.n	800a574 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a06e:	4b81      	ldr	r3, [pc, #516]	@ (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a070:	68db      	ldr	r3, [r3, #12]
 800a072:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6a1b      	ldr	r3, [r3, #32]
 800a07a:	061b      	lsls	r3, r3, #24
 800a07c:	497d      	ldr	r1, [pc, #500]	@ (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a07e:	4313      	orrs	r3, r2
 800a080:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a082:	e040      	b.n	800a106 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	69db      	ldr	r3, [r3, #28]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d023      	beq.n	800a0d4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a08c:	4b79      	ldr	r3, [pc, #484]	@ (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4a78      	ldr	r2, [pc, #480]	@ (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a092:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a096:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a098:	f7f9 fca6 	bl	80039e8 <HAL_GetTick>
 800a09c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a09e:	e008      	b.n	800a0b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a0a0:	f7f9 fca2 	bl	80039e8 <HAL_GetTick>
 800a0a4:	4602      	mov	r2, r0
 800a0a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0a8:	1ad3      	subs	r3, r2, r3
 800a0aa:	2b02      	cmp	r3, #2
 800a0ac:	d901      	bls.n	800a0b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800a0ae:	2303      	movs	r3, #3
 800a0b0:	e260      	b.n	800a574 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a0b2:	4b70      	ldr	r3, [pc, #448]	@ (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d0f0      	beq.n	800a0a0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a0be:	4b6d      	ldr	r3, [pc, #436]	@ (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a0c0:	68db      	ldr	r3, [r3, #12]
 800a0c2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6a1b      	ldr	r3, [r3, #32]
 800a0ca:	061b      	lsls	r3, r3, #24
 800a0cc:	4969      	ldr	r1, [pc, #420]	@ (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	60cb      	str	r3, [r1, #12]
 800a0d2:	e018      	b.n	800a106 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a0d4:	4b67      	ldr	r3, [pc, #412]	@ (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	4a66      	ldr	r2, [pc, #408]	@ (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a0da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a0de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0e0:	f7f9 fc82 	bl	80039e8 <HAL_GetTick>
 800a0e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a0e6:	e008      	b.n	800a0fa <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a0e8:	f7f9 fc7e 	bl	80039e8 <HAL_GetTick>
 800a0ec:	4602      	mov	r2, r0
 800a0ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0f0:	1ad3      	subs	r3, r2, r3
 800a0f2:	2b02      	cmp	r3, #2
 800a0f4:	d901      	bls.n	800a0fa <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800a0f6:	2303      	movs	r3, #3
 800a0f8:	e23c      	b.n	800a574 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a0fa:	4b5e      	ldr	r3, [pc, #376]	@ (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a102:	2b00      	cmp	r3, #0
 800a104:	d1f0      	bne.n	800a0e8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f003 0308 	and.w	r3, r3, #8
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d036      	beq.n	800a180 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	695b      	ldr	r3, [r3, #20]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d019      	beq.n	800a14e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a11a:	4b56      	ldr	r3, [pc, #344]	@ (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a11c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a11e:	4a55      	ldr	r2, [pc, #340]	@ (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a120:	f043 0301 	orr.w	r3, r3, #1
 800a124:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a126:	f7f9 fc5f 	bl	80039e8 <HAL_GetTick>
 800a12a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a12c:	e008      	b.n	800a140 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a12e:	f7f9 fc5b 	bl	80039e8 <HAL_GetTick>
 800a132:	4602      	mov	r2, r0
 800a134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a136:	1ad3      	subs	r3, r2, r3
 800a138:	2b02      	cmp	r3, #2
 800a13a:	d901      	bls.n	800a140 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800a13c:	2303      	movs	r3, #3
 800a13e:	e219      	b.n	800a574 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a140:	4b4c      	ldr	r3, [pc, #304]	@ (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a142:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a144:	f003 0302 	and.w	r3, r3, #2
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d0f0      	beq.n	800a12e <HAL_RCC_OscConfig+0x35e>
 800a14c:	e018      	b.n	800a180 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a14e:	4b49      	ldr	r3, [pc, #292]	@ (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a150:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a152:	4a48      	ldr	r2, [pc, #288]	@ (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a154:	f023 0301 	bic.w	r3, r3, #1
 800a158:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a15a:	f7f9 fc45 	bl	80039e8 <HAL_GetTick>
 800a15e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a160:	e008      	b.n	800a174 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a162:	f7f9 fc41 	bl	80039e8 <HAL_GetTick>
 800a166:	4602      	mov	r2, r0
 800a168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a16a:	1ad3      	subs	r3, r2, r3
 800a16c:	2b02      	cmp	r3, #2
 800a16e:	d901      	bls.n	800a174 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800a170:	2303      	movs	r3, #3
 800a172:	e1ff      	b.n	800a574 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a174:	4b3f      	ldr	r3, [pc, #252]	@ (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a176:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a178:	f003 0302 	and.w	r3, r3, #2
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d1f0      	bne.n	800a162 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f003 0320 	and.w	r3, r3, #32
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d036      	beq.n	800a1fa <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	699b      	ldr	r3, [r3, #24]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d019      	beq.n	800a1c8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a194:	4b37      	ldr	r3, [pc, #220]	@ (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	4a36      	ldr	r2, [pc, #216]	@ (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a19a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a19e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a1a0:	f7f9 fc22 	bl	80039e8 <HAL_GetTick>
 800a1a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a1a6:	e008      	b.n	800a1ba <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a1a8:	f7f9 fc1e 	bl	80039e8 <HAL_GetTick>
 800a1ac:	4602      	mov	r2, r0
 800a1ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1b0:	1ad3      	subs	r3, r2, r3
 800a1b2:	2b02      	cmp	r3, #2
 800a1b4:	d901      	bls.n	800a1ba <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800a1b6:	2303      	movs	r3, #3
 800a1b8:	e1dc      	b.n	800a574 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a1ba:	4b2e      	ldr	r3, [pc, #184]	@ (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d0f0      	beq.n	800a1a8 <HAL_RCC_OscConfig+0x3d8>
 800a1c6:	e018      	b.n	800a1fa <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a1c8:	4b2a      	ldr	r3, [pc, #168]	@ (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	4a29      	ldr	r2, [pc, #164]	@ (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a1ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a1d2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a1d4:	f7f9 fc08 	bl	80039e8 <HAL_GetTick>
 800a1d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a1da:	e008      	b.n	800a1ee <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a1dc:	f7f9 fc04 	bl	80039e8 <HAL_GetTick>
 800a1e0:	4602      	mov	r2, r0
 800a1e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1e4:	1ad3      	subs	r3, r2, r3
 800a1e6:	2b02      	cmp	r3, #2
 800a1e8:	d901      	bls.n	800a1ee <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800a1ea:	2303      	movs	r3, #3
 800a1ec:	e1c2      	b.n	800a574 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a1ee:	4b21      	ldr	r3, [pc, #132]	@ (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d1f0      	bne.n	800a1dc <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f003 0304 	and.w	r3, r3, #4
 800a202:	2b00      	cmp	r3, #0
 800a204:	f000 8086 	beq.w	800a314 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a208:	4b1b      	ldr	r3, [pc, #108]	@ (800a278 <HAL_RCC_OscConfig+0x4a8>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4a1a      	ldr	r2, [pc, #104]	@ (800a278 <HAL_RCC_OscConfig+0x4a8>)
 800a20e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a212:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a214:	f7f9 fbe8 	bl	80039e8 <HAL_GetTick>
 800a218:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a21a:	e008      	b.n	800a22e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a21c:	f7f9 fbe4 	bl	80039e8 <HAL_GetTick>
 800a220:	4602      	mov	r2, r0
 800a222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a224:	1ad3      	subs	r3, r2, r3
 800a226:	2b64      	cmp	r3, #100	@ 0x64
 800a228:	d901      	bls.n	800a22e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800a22a:	2303      	movs	r3, #3
 800a22c:	e1a2      	b.n	800a574 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a22e:	4b12      	ldr	r3, [pc, #72]	@ (800a278 <HAL_RCC_OscConfig+0x4a8>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a236:	2b00      	cmp	r3, #0
 800a238:	d0f0      	beq.n	800a21c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	689b      	ldr	r3, [r3, #8]
 800a23e:	2b01      	cmp	r3, #1
 800a240:	d106      	bne.n	800a250 <HAL_RCC_OscConfig+0x480>
 800a242:	4b0c      	ldr	r3, [pc, #48]	@ (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a246:	4a0b      	ldr	r2, [pc, #44]	@ (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a248:	f043 0301 	orr.w	r3, r3, #1
 800a24c:	6713      	str	r3, [r2, #112]	@ 0x70
 800a24e:	e032      	b.n	800a2b6 <HAL_RCC_OscConfig+0x4e6>
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	689b      	ldr	r3, [r3, #8]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d111      	bne.n	800a27c <HAL_RCC_OscConfig+0x4ac>
 800a258:	4b06      	ldr	r3, [pc, #24]	@ (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a25a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a25c:	4a05      	ldr	r2, [pc, #20]	@ (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a25e:	f023 0301 	bic.w	r3, r3, #1
 800a262:	6713      	str	r3, [r2, #112]	@ 0x70
 800a264:	4b03      	ldr	r3, [pc, #12]	@ (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a266:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a268:	4a02      	ldr	r2, [pc, #8]	@ (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a26a:	f023 0304 	bic.w	r3, r3, #4
 800a26e:	6713      	str	r3, [r2, #112]	@ 0x70
 800a270:	e021      	b.n	800a2b6 <HAL_RCC_OscConfig+0x4e6>
 800a272:	bf00      	nop
 800a274:	58024400 	.word	0x58024400
 800a278:	58024800 	.word	0x58024800
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	689b      	ldr	r3, [r3, #8]
 800a280:	2b05      	cmp	r3, #5
 800a282:	d10c      	bne.n	800a29e <HAL_RCC_OscConfig+0x4ce>
 800a284:	4b83      	ldr	r3, [pc, #524]	@ (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a286:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a288:	4a82      	ldr	r2, [pc, #520]	@ (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a28a:	f043 0304 	orr.w	r3, r3, #4
 800a28e:	6713      	str	r3, [r2, #112]	@ 0x70
 800a290:	4b80      	ldr	r3, [pc, #512]	@ (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a294:	4a7f      	ldr	r2, [pc, #508]	@ (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a296:	f043 0301 	orr.w	r3, r3, #1
 800a29a:	6713      	str	r3, [r2, #112]	@ 0x70
 800a29c:	e00b      	b.n	800a2b6 <HAL_RCC_OscConfig+0x4e6>
 800a29e:	4b7d      	ldr	r3, [pc, #500]	@ (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a2a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2a2:	4a7c      	ldr	r2, [pc, #496]	@ (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a2a4:	f023 0301 	bic.w	r3, r3, #1
 800a2a8:	6713      	str	r3, [r2, #112]	@ 0x70
 800a2aa:	4b7a      	ldr	r3, [pc, #488]	@ (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a2ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2ae:	4a79      	ldr	r2, [pc, #484]	@ (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a2b0:	f023 0304 	bic.w	r3, r3, #4
 800a2b4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	689b      	ldr	r3, [r3, #8]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d015      	beq.n	800a2ea <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2be:	f7f9 fb93 	bl	80039e8 <HAL_GetTick>
 800a2c2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a2c4:	e00a      	b.n	800a2dc <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a2c6:	f7f9 fb8f 	bl	80039e8 <HAL_GetTick>
 800a2ca:	4602      	mov	r2, r0
 800a2cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ce:	1ad3      	subs	r3, r2, r3
 800a2d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d901      	bls.n	800a2dc <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800a2d8:	2303      	movs	r3, #3
 800a2da:	e14b      	b.n	800a574 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a2dc:	4b6d      	ldr	r3, [pc, #436]	@ (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a2de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2e0:	f003 0302 	and.w	r3, r3, #2
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d0ee      	beq.n	800a2c6 <HAL_RCC_OscConfig+0x4f6>
 800a2e8:	e014      	b.n	800a314 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2ea:	f7f9 fb7d 	bl	80039e8 <HAL_GetTick>
 800a2ee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a2f0:	e00a      	b.n	800a308 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a2f2:	f7f9 fb79 	bl	80039e8 <HAL_GetTick>
 800a2f6:	4602      	mov	r2, r0
 800a2f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2fa:	1ad3      	subs	r3, r2, r3
 800a2fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a300:	4293      	cmp	r3, r2
 800a302:	d901      	bls.n	800a308 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800a304:	2303      	movs	r3, #3
 800a306:	e135      	b.n	800a574 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a308:	4b62      	ldr	r3, [pc, #392]	@ (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a30a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a30c:	f003 0302 	and.w	r3, r3, #2
 800a310:	2b00      	cmp	r3, #0
 800a312:	d1ee      	bne.n	800a2f2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a318:	2b00      	cmp	r3, #0
 800a31a:	f000 812a 	beq.w	800a572 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a31e:	4b5d      	ldr	r3, [pc, #372]	@ (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a320:	691b      	ldr	r3, [r3, #16]
 800a322:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a326:	2b18      	cmp	r3, #24
 800a328:	f000 80ba 	beq.w	800a4a0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a330:	2b02      	cmp	r3, #2
 800a332:	f040 8095 	bne.w	800a460 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a336:	4b57      	ldr	r3, [pc, #348]	@ (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4a56      	ldr	r2, [pc, #344]	@ (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a33c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a340:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a342:	f7f9 fb51 	bl	80039e8 <HAL_GetTick>
 800a346:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a348:	e008      	b.n	800a35c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a34a:	f7f9 fb4d 	bl	80039e8 <HAL_GetTick>
 800a34e:	4602      	mov	r2, r0
 800a350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a352:	1ad3      	subs	r3, r2, r3
 800a354:	2b02      	cmp	r3, #2
 800a356:	d901      	bls.n	800a35c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800a358:	2303      	movs	r3, #3
 800a35a:	e10b      	b.n	800a574 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a35c:	4b4d      	ldr	r3, [pc, #308]	@ (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a364:	2b00      	cmp	r3, #0
 800a366:	d1f0      	bne.n	800a34a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a368:	4b4a      	ldr	r3, [pc, #296]	@ (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a36a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a36c:	4b4a      	ldr	r3, [pc, #296]	@ (800a498 <HAL_RCC_OscConfig+0x6c8>)
 800a36e:	4013      	ands	r3, r2
 800a370:	687a      	ldr	r2, [r7, #4]
 800a372:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800a378:	0112      	lsls	r2, r2, #4
 800a37a:	430a      	orrs	r2, r1
 800a37c:	4945      	ldr	r1, [pc, #276]	@ (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a37e:	4313      	orrs	r3, r2
 800a380:	628b      	str	r3, [r1, #40]	@ 0x28
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a386:	3b01      	subs	r3, #1
 800a388:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a390:	3b01      	subs	r3, #1
 800a392:	025b      	lsls	r3, r3, #9
 800a394:	b29b      	uxth	r3, r3
 800a396:	431a      	orrs	r2, r3
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a39c:	3b01      	subs	r3, #1
 800a39e:	041b      	lsls	r3, r3, #16
 800a3a0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a3a4:	431a      	orrs	r2, r3
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3aa:	3b01      	subs	r3, #1
 800a3ac:	061b      	lsls	r3, r3, #24
 800a3ae:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a3b2:	4938      	ldr	r1, [pc, #224]	@ (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a3b8:	4b36      	ldr	r3, [pc, #216]	@ (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a3ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3bc:	4a35      	ldr	r2, [pc, #212]	@ (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a3be:	f023 0301 	bic.w	r3, r3, #1
 800a3c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a3c4:	4b33      	ldr	r3, [pc, #204]	@ (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a3c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a3c8:	4b34      	ldr	r3, [pc, #208]	@ (800a49c <HAL_RCC_OscConfig+0x6cc>)
 800a3ca:	4013      	ands	r3, r2
 800a3cc:	687a      	ldr	r2, [r7, #4]
 800a3ce:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a3d0:	00d2      	lsls	r2, r2, #3
 800a3d2:	4930      	ldr	r1, [pc, #192]	@ (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a3d4:	4313      	orrs	r3, r2
 800a3d6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a3d8:	4b2e      	ldr	r3, [pc, #184]	@ (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a3da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3dc:	f023 020c 	bic.w	r2, r3, #12
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3e4:	492b      	ldr	r1, [pc, #172]	@ (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a3ea:	4b2a      	ldr	r3, [pc, #168]	@ (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a3ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3ee:	f023 0202 	bic.w	r2, r3, #2
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3f6:	4927      	ldr	r1, [pc, #156]	@ (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a3fc:	4b25      	ldr	r3, [pc, #148]	@ (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a3fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a400:	4a24      	ldr	r2, [pc, #144]	@ (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a402:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a406:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a408:	4b22      	ldr	r3, [pc, #136]	@ (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a40a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a40c:	4a21      	ldr	r2, [pc, #132]	@ (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a40e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a412:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a414:	4b1f      	ldr	r3, [pc, #124]	@ (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a418:	4a1e      	ldr	r2, [pc, #120]	@ (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a41a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a41e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a420:	4b1c      	ldr	r3, [pc, #112]	@ (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a424:	4a1b      	ldr	r2, [pc, #108]	@ (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a426:	f043 0301 	orr.w	r3, r3, #1
 800a42a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a42c:	4b19      	ldr	r3, [pc, #100]	@ (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	4a18      	ldr	r2, [pc, #96]	@ (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a432:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a436:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a438:	f7f9 fad6 	bl	80039e8 <HAL_GetTick>
 800a43c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a43e:	e008      	b.n	800a452 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a440:	f7f9 fad2 	bl	80039e8 <HAL_GetTick>
 800a444:	4602      	mov	r2, r0
 800a446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a448:	1ad3      	subs	r3, r2, r3
 800a44a:	2b02      	cmp	r3, #2
 800a44c:	d901      	bls.n	800a452 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800a44e:	2303      	movs	r3, #3
 800a450:	e090      	b.n	800a574 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a452:	4b10      	ldr	r3, [pc, #64]	@ (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d0f0      	beq.n	800a440 <HAL_RCC_OscConfig+0x670>
 800a45e:	e088      	b.n	800a572 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a460:	4b0c      	ldr	r3, [pc, #48]	@ (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	4a0b      	ldr	r2, [pc, #44]	@ (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a466:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a46a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a46c:	f7f9 fabc 	bl	80039e8 <HAL_GetTick>
 800a470:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a472:	e008      	b.n	800a486 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a474:	f7f9 fab8 	bl	80039e8 <HAL_GetTick>
 800a478:	4602      	mov	r2, r0
 800a47a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a47c:	1ad3      	subs	r3, r2, r3
 800a47e:	2b02      	cmp	r3, #2
 800a480:	d901      	bls.n	800a486 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800a482:	2303      	movs	r3, #3
 800a484:	e076      	b.n	800a574 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a486:	4b03      	ldr	r3, [pc, #12]	@ (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d1f0      	bne.n	800a474 <HAL_RCC_OscConfig+0x6a4>
 800a492:	e06e      	b.n	800a572 <HAL_RCC_OscConfig+0x7a2>
 800a494:	58024400 	.word	0x58024400
 800a498:	fffffc0c 	.word	0xfffffc0c
 800a49c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a4a0:	4b36      	ldr	r3, [pc, #216]	@ (800a57c <HAL_RCC_OscConfig+0x7ac>)
 800a4a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4a4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a4a6:	4b35      	ldr	r3, [pc, #212]	@ (800a57c <HAL_RCC_OscConfig+0x7ac>)
 800a4a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4aa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	d031      	beq.n	800a518 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	f003 0203 	and.w	r2, r3, #3
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	d12a      	bne.n	800a518 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a4c2:	693b      	ldr	r3, [r7, #16]
 800a4c4:	091b      	lsrs	r3, r3, #4
 800a4c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a4ce:	429a      	cmp	r2, r3
 800a4d0:	d122      	bne.n	800a518 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4dc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a4de:	429a      	cmp	r2, r3
 800a4e0:	d11a      	bne.n	800a518 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	0a5b      	lsrs	r3, r3, #9
 800a4e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4ee:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	d111      	bne.n	800a518 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	0c1b      	lsrs	r3, r3, #16
 800a4f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a500:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a502:	429a      	cmp	r2, r3
 800a504:	d108      	bne.n	800a518 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	0e1b      	lsrs	r3, r3, #24
 800a50a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a512:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a514:	429a      	cmp	r2, r3
 800a516:	d001      	beq.n	800a51c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800a518:	2301      	movs	r3, #1
 800a51a:	e02b      	b.n	800a574 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a51c:	4b17      	ldr	r3, [pc, #92]	@ (800a57c <HAL_RCC_OscConfig+0x7ac>)
 800a51e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a520:	08db      	lsrs	r3, r3, #3
 800a522:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a526:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a52c:	693a      	ldr	r2, [r7, #16]
 800a52e:	429a      	cmp	r2, r3
 800a530:	d01f      	beq.n	800a572 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a532:	4b12      	ldr	r3, [pc, #72]	@ (800a57c <HAL_RCC_OscConfig+0x7ac>)
 800a534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a536:	4a11      	ldr	r2, [pc, #68]	@ (800a57c <HAL_RCC_OscConfig+0x7ac>)
 800a538:	f023 0301 	bic.w	r3, r3, #1
 800a53c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a53e:	f7f9 fa53 	bl	80039e8 <HAL_GetTick>
 800a542:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a544:	bf00      	nop
 800a546:	f7f9 fa4f 	bl	80039e8 <HAL_GetTick>
 800a54a:	4602      	mov	r2, r0
 800a54c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a54e:	4293      	cmp	r3, r2
 800a550:	d0f9      	beq.n	800a546 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a552:	4b0a      	ldr	r3, [pc, #40]	@ (800a57c <HAL_RCC_OscConfig+0x7ac>)
 800a554:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a556:	4b0a      	ldr	r3, [pc, #40]	@ (800a580 <HAL_RCC_OscConfig+0x7b0>)
 800a558:	4013      	ands	r3, r2
 800a55a:	687a      	ldr	r2, [r7, #4]
 800a55c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a55e:	00d2      	lsls	r2, r2, #3
 800a560:	4906      	ldr	r1, [pc, #24]	@ (800a57c <HAL_RCC_OscConfig+0x7ac>)
 800a562:	4313      	orrs	r3, r2
 800a564:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a566:	4b05      	ldr	r3, [pc, #20]	@ (800a57c <HAL_RCC_OscConfig+0x7ac>)
 800a568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a56a:	4a04      	ldr	r2, [pc, #16]	@ (800a57c <HAL_RCC_OscConfig+0x7ac>)
 800a56c:	f043 0301 	orr.w	r3, r3, #1
 800a570:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a572:	2300      	movs	r3, #0
}
 800a574:	4618      	mov	r0, r3
 800a576:	3730      	adds	r7, #48	@ 0x30
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}
 800a57c:	58024400 	.word	0x58024400
 800a580:	ffff0007 	.word	0xffff0007

0800a584 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b086      	sub	sp, #24
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
 800a58c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d101      	bne.n	800a598 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a594:	2301      	movs	r3, #1
 800a596:	e19c      	b.n	800a8d2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a598:	4b8a      	ldr	r3, [pc, #552]	@ (800a7c4 <HAL_RCC_ClockConfig+0x240>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f003 030f 	and.w	r3, r3, #15
 800a5a0:	683a      	ldr	r2, [r7, #0]
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d910      	bls.n	800a5c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a5a6:	4b87      	ldr	r3, [pc, #540]	@ (800a7c4 <HAL_RCC_ClockConfig+0x240>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f023 020f 	bic.w	r2, r3, #15
 800a5ae:	4985      	ldr	r1, [pc, #532]	@ (800a7c4 <HAL_RCC_ClockConfig+0x240>)
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	4313      	orrs	r3, r2
 800a5b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a5b6:	4b83      	ldr	r3, [pc, #524]	@ (800a7c4 <HAL_RCC_ClockConfig+0x240>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f003 030f 	and.w	r3, r3, #15
 800a5be:	683a      	ldr	r2, [r7, #0]
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	d001      	beq.n	800a5c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	e184      	b.n	800a8d2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f003 0304 	and.w	r3, r3, #4
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d010      	beq.n	800a5f6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	691a      	ldr	r2, [r3, #16]
 800a5d8:	4b7b      	ldr	r3, [pc, #492]	@ (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a5da:	699b      	ldr	r3, [r3, #24]
 800a5dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	d908      	bls.n	800a5f6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a5e4:	4b78      	ldr	r3, [pc, #480]	@ (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a5e6:	699b      	ldr	r3, [r3, #24]
 800a5e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	691b      	ldr	r3, [r3, #16]
 800a5f0:	4975      	ldr	r1, [pc, #468]	@ (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a5f2:	4313      	orrs	r3, r2
 800a5f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f003 0308 	and.w	r3, r3, #8
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d010      	beq.n	800a624 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	695a      	ldr	r2, [r3, #20]
 800a606:	4b70      	ldr	r3, [pc, #448]	@ (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a608:	69db      	ldr	r3, [r3, #28]
 800a60a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a60e:	429a      	cmp	r2, r3
 800a610:	d908      	bls.n	800a624 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a612:	4b6d      	ldr	r3, [pc, #436]	@ (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a614:	69db      	ldr	r3, [r3, #28]
 800a616:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	695b      	ldr	r3, [r3, #20]
 800a61e:	496a      	ldr	r1, [pc, #424]	@ (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a620:	4313      	orrs	r3, r2
 800a622:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f003 0310 	and.w	r3, r3, #16
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d010      	beq.n	800a652 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	699a      	ldr	r2, [r3, #24]
 800a634:	4b64      	ldr	r3, [pc, #400]	@ (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a636:	69db      	ldr	r3, [r3, #28]
 800a638:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d908      	bls.n	800a652 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a640:	4b61      	ldr	r3, [pc, #388]	@ (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a642:	69db      	ldr	r3, [r3, #28]
 800a644:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	699b      	ldr	r3, [r3, #24]
 800a64c:	495e      	ldr	r1, [pc, #376]	@ (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a64e:	4313      	orrs	r3, r2
 800a650:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f003 0320 	and.w	r3, r3, #32
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d010      	beq.n	800a680 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	69da      	ldr	r2, [r3, #28]
 800a662:	4b59      	ldr	r3, [pc, #356]	@ (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a664:	6a1b      	ldr	r3, [r3, #32]
 800a666:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d908      	bls.n	800a680 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a66e:	4b56      	ldr	r3, [pc, #344]	@ (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a670:	6a1b      	ldr	r3, [r3, #32]
 800a672:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	69db      	ldr	r3, [r3, #28]
 800a67a:	4953      	ldr	r1, [pc, #332]	@ (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a67c:	4313      	orrs	r3, r2
 800a67e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f003 0302 	and.w	r3, r3, #2
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d010      	beq.n	800a6ae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	68da      	ldr	r2, [r3, #12]
 800a690:	4b4d      	ldr	r3, [pc, #308]	@ (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a692:	699b      	ldr	r3, [r3, #24]
 800a694:	f003 030f 	and.w	r3, r3, #15
 800a698:	429a      	cmp	r2, r3
 800a69a:	d908      	bls.n	800a6ae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a69c:	4b4a      	ldr	r3, [pc, #296]	@ (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a69e:	699b      	ldr	r3, [r3, #24]
 800a6a0:	f023 020f 	bic.w	r2, r3, #15
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	4947      	ldr	r1, [pc, #284]	@ (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a6aa:	4313      	orrs	r3, r2
 800a6ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f003 0301 	and.w	r3, r3, #1
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d055      	beq.n	800a766 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a6ba:	4b43      	ldr	r3, [pc, #268]	@ (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a6bc:	699b      	ldr	r3, [r3, #24]
 800a6be:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	689b      	ldr	r3, [r3, #8]
 800a6c6:	4940      	ldr	r1, [pc, #256]	@ (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a6c8:	4313      	orrs	r3, r2
 800a6ca:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	685b      	ldr	r3, [r3, #4]
 800a6d0:	2b02      	cmp	r3, #2
 800a6d2:	d107      	bne.n	800a6e4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a6d4:	4b3c      	ldr	r3, [pc, #240]	@ (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d121      	bne.n	800a724 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	e0f6      	b.n	800a8d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	685b      	ldr	r3, [r3, #4]
 800a6e8:	2b03      	cmp	r3, #3
 800a6ea:	d107      	bne.n	800a6fc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a6ec:	4b36      	ldr	r3, [pc, #216]	@ (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d115      	bne.n	800a724 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	e0ea      	b.n	800a8d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	685b      	ldr	r3, [r3, #4]
 800a700:	2b01      	cmp	r3, #1
 800a702:	d107      	bne.n	800a714 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a704:	4b30      	ldr	r3, [pc, #192]	@ (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d109      	bne.n	800a724 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a710:	2301      	movs	r3, #1
 800a712:	e0de      	b.n	800a8d2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a714:	4b2c      	ldr	r3, [pc, #176]	@ (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f003 0304 	and.w	r3, r3, #4
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d101      	bne.n	800a724 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a720:	2301      	movs	r3, #1
 800a722:	e0d6      	b.n	800a8d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a724:	4b28      	ldr	r3, [pc, #160]	@ (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a726:	691b      	ldr	r3, [r3, #16]
 800a728:	f023 0207 	bic.w	r2, r3, #7
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	685b      	ldr	r3, [r3, #4]
 800a730:	4925      	ldr	r1, [pc, #148]	@ (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a732:	4313      	orrs	r3, r2
 800a734:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a736:	f7f9 f957 	bl	80039e8 <HAL_GetTick>
 800a73a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a73c:	e00a      	b.n	800a754 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a73e:	f7f9 f953 	bl	80039e8 <HAL_GetTick>
 800a742:	4602      	mov	r2, r0
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	1ad3      	subs	r3, r2, r3
 800a748:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d901      	bls.n	800a754 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a750:	2303      	movs	r3, #3
 800a752:	e0be      	b.n	800a8d2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a754:	4b1c      	ldr	r3, [pc, #112]	@ (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a756:	691b      	ldr	r3, [r3, #16]
 800a758:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	685b      	ldr	r3, [r3, #4]
 800a760:	00db      	lsls	r3, r3, #3
 800a762:	429a      	cmp	r2, r3
 800a764:	d1eb      	bne.n	800a73e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f003 0302 	and.w	r3, r3, #2
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d010      	beq.n	800a794 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	68da      	ldr	r2, [r3, #12]
 800a776:	4b14      	ldr	r3, [pc, #80]	@ (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a778:	699b      	ldr	r3, [r3, #24]
 800a77a:	f003 030f 	and.w	r3, r3, #15
 800a77e:	429a      	cmp	r2, r3
 800a780:	d208      	bcs.n	800a794 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a782:	4b11      	ldr	r3, [pc, #68]	@ (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a784:	699b      	ldr	r3, [r3, #24]
 800a786:	f023 020f 	bic.w	r2, r3, #15
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	68db      	ldr	r3, [r3, #12]
 800a78e:	490e      	ldr	r1, [pc, #56]	@ (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a790:	4313      	orrs	r3, r2
 800a792:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a794:	4b0b      	ldr	r3, [pc, #44]	@ (800a7c4 <HAL_RCC_ClockConfig+0x240>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f003 030f 	and.w	r3, r3, #15
 800a79c:	683a      	ldr	r2, [r7, #0]
 800a79e:	429a      	cmp	r2, r3
 800a7a0:	d214      	bcs.n	800a7cc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a7a2:	4b08      	ldr	r3, [pc, #32]	@ (800a7c4 <HAL_RCC_ClockConfig+0x240>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f023 020f 	bic.w	r2, r3, #15
 800a7aa:	4906      	ldr	r1, [pc, #24]	@ (800a7c4 <HAL_RCC_ClockConfig+0x240>)
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	4313      	orrs	r3, r2
 800a7b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a7b2:	4b04      	ldr	r3, [pc, #16]	@ (800a7c4 <HAL_RCC_ClockConfig+0x240>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f003 030f 	and.w	r3, r3, #15
 800a7ba:	683a      	ldr	r2, [r7, #0]
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	d005      	beq.n	800a7cc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	e086      	b.n	800a8d2 <HAL_RCC_ClockConfig+0x34e>
 800a7c4:	52002000 	.word	0x52002000
 800a7c8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f003 0304 	and.w	r3, r3, #4
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d010      	beq.n	800a7fa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	691a      	ldr	r2, [r3, #16]
 800a7dc:	4b3f      	ldr	r3, [pc, #252]	@ (800a8dc <HAL_RCC_ClockConfig+0x358>)
 800a7de:	699b      	ldr	r3, [r3, #24]
 800a7e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d208      	bcs.n	800a7fa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a7e8:	4b3c      	ldr	r3, [pc, #240]	@ (800a8dc <HAL_RCC_ClockConfig+0x358>)
 800a7ea:	699b      	ldr	r3, [r3, #24]
 800a7ec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	691b      	ldr	r3, [r3, #16]
 800a7f4:	4939      	ldr	r1, [pc, #228]	@ (800a8dc <HAL_RCC_ClockConfig+0x358>)
 800a7f6:	4313      	orrs	r3, r2
 800a7f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f003 0308 	and.w	r3, r3, #8
 800a802:	2b00      	cmp	r3, #0
 800a804:	d010      	beq.n	800a828 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	695a      	ldr	r2, [r3, #20]
 800a80a:	4b34      	ldr	r3, [pc, #208]	@ (800a8dc <HAL_RCC_ClockConfig+0x358>)
 800a80c:	69db      	ldr	r3, [r3, #28]
 800a80e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a812:	429a      	cmp	r2, r3
 800a814:	d208      	bcs.n	800a828 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a816:	4b31      	ldr	r3, [pc, #196]	@ (800a8dc <HAL_RCC_ClockConfig+0x358>)
 800a818:	69db      	ldr	r3, [r3, #28]
 800a81a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	695b      	ldr	r3, [r3, #20]
 800a822:	492e      	ldr	r1, [pc, #184]	@ (800a8dc <HAL_RCC_ClockConfig+0x358>)
 800a824:	4313      	orrs	r3, r2
 800a826:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f003 0310 	and.w	r3, r3, #16
 800a830:	2b00      	cmp	r3, #0
 800a832:	d010      	beq.n	800a856 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	699a      	ldr	r2, [r3, #24]
 800a838:	4b28      	ldr	r3, [pc, #160]	@ (800a8dc <HAL_RCC_ClockConfig+0x358>)
 800a83a:	69db      	ldr	r3, [r3, #28]
 800a83c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a840:	429a      	cmp	r2, r3
 800a842:	d208      	bcs.n	800a856 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a844:	4b25      	ldr	r3, [pc, #148]	@ (800a8dc <HAL_RCC_ClockConfig+0x358>)
 800a846:	69db      	ldr	r3, [r3, #28]
 800a848:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	699b      	ldr	r3, [r3, #24]
 800a850:	4922      	ldr	r1, [pc, #136]	@ (800a8dc <HAL_RCC_ClockConfig+0x358>)
 800a852:	4313      	orrs	r3, r2
 800a854:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f003 0320 	and.w	r3, r3, #32
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d010      	beq.n	800a884 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	69da      	ldr	r2, [r3, #28]
 800a866:	4b1d      	ldr	r3, [pc, #116]	@ (800a8dc <HAL_RCC_ClockConfig+0x358>)
 800a868:	6a1b      	ldr	r3, [r3, #32]
 800a86a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a86e:	429a      	cmp	r2, r3
 800a870:	d208      	bcs.n	800a884 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a872:	4b1a      	ldr	r3, [pc, #104]	@ (800a8dc <HAL_RCC_ClockConfig+0x358>)
 800a874:	6a1b      	ldr	r3, [r3, #32]
 800a876:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	69db      	ldr	r3, [r3, #28]
 800a87e:	4917      	ldr	r1, [pc, #92]	@ (800a8dc <HAL_RCC_ClockConfig+0x358>)
 800a880:	4313      	orrs	r3, r2
 800a882:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a884:	f000 f834 	bl	800a8f0 <HAL_RCC_GetSysClockFreq>
 800a888:	4602      	mov	r2, r0
 800a88a:	4b14      	ldr	r3, [pc, #80]	@ (800a8dc <HAL_RCC_ClockConfig+0x358>)
 800a88c:	699b      	ldr	r3, [r3, #24]
 800a88e:	0a1b      	lsrs	r3, r3, #8
 800a890:	f003 030f 	and.w	r3, r3, #15
 800a894:	4912      	ldr	r1, [pc, #72]	@ (800a8e0 <HAL_RCC_ClockConfig+0x35c>)
 800a896:	5ccb      	ldrb	r3, [r1, r3]
 800a898:	f003 031f 	and.w	r3, r3, #31
 800a89c:	fa22 f303 	lsr.w	r3, r2, r3
 800a8a0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a8a2:	4b0e      	ldr	r3, [pc, #56]	@ (800a8dc <HAL_RCC_ClockConfig+0x358>)
 800a8a4:	699b      	ldr	r3, [r3, #24]
 800a8a6:	f003 030f 	and.w	r3, r3, #15
 800a8aa:	4a0d      	ldr	r2, [pc, #52]	@ (800a8e0 <HAL_RCC_ClockConfig+0x35c>)
 800a8ac:	5cd3      	ldrb	r3, [r2, r3]
 800a8ae:	f003 031f 	and.w	r3, r3, #31
 800a8b2:	693a      	ldr	r2, [r7, #16]
 800a8b4:	fa22 f303 	lsr.w	r3, r2, r3
 800a8b8:	4a0a      	ldr	r2, [pc, #40]	@ (800a8e4 <HAL_RCC_ClockConfig+0x360>)
 800a8ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a8bc:	4a0a      	ldr	r2, [pc, #40]	@ (800a8e8 <HAL_RCC_ClockConfig+0x364>)
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a8c2:	4b0a      	ldr	r3, [pc, #40]	@ (800a8ec <HAL_RCC_ClockConfig+0x368>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f7f9 f844 	bl	8003954 <HAL_InitTick>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a8d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3718      	adds	r7, #24
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
 800a8da:	bf00      	nop
 800a8dc:	58024400 	.word	0x58024400
 800a8e0:	08014870 	.word	0x08014870
 800a8e4:	24000028 	.word	0x24000028
 800a8e8:	24000024 	.word	0x24000024
 800a8ec:	2400002c 	.word	0x2400002c

0800a8f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b089      	sub	sp, #36	@ 0x24
 800a8f4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a8f6:	4bb3      	ldr	r3, [pc, #716]	@ (800abc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8f8:	691b      	ldr	r3, [r3, #16]
 800a8fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a8fe:	2b18      	cmp	r3, #24
 800a900:	f200 8155 	bhi.w	800abae <HAL_RCC_GetSysClockFreq+0x2be>
 800a904:	a201      	add	r2, pc, #4	@ (adr r2, 800a90c <HAL_RCC_GetSysClockFreq+0x1c>)
 800a906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a90a:	bf00      	nop
 800a90c:	0800a971 	.word	0x0800a971
 800a910:	0800abaf 	.word	0x0800abaf
 800a914:	0800abaf 	.word	0x0800abaf
 800a918:	0800abaf 	.word	0x0800abaf
 800a91c:	0800abaf 	.word	0x0800abaf
 800a920:	0800abaf 	.word	0x0800abaf
 800a924:	0800abaf 	.word	0x0800abaf
 800a928:	0800abaf 	.word	0x0800abaf
 800a92c:	0800a997 	.word	0x0800a997
 800a930:	0800abaf 	.word	0x0800abaf
 800a934:	0800abaf 	.word	0x0800abaf
 800a938:	0800abaf 	.word	0x0800abaf
 800a93c:	0800abaf 	.word	0x0800abaf
 800a940:	0800abaf 	.word	0x0800abaf
 800a944:	0800abaf 	.word	0x0800abaf
 800a948:	0800abaf 	.word	0x0800abaf
 800a94c:	0800a99d 	.word	0x0800a99d
 800a950:	0800abaf 	.word	0x0800abaf
 800a954:	0800abaf 	.word	0x0800abaf
 800a958:	0800abaf 	.word	0x0800abaf
 800a95c:	0800abaf 	.word	0x0800abaf
 800a960:	0800abaf 	.word	0x0800abaf
 800a964:	0800abaf 	.word	0x0800abaf
 800a968:	0800abaf 	.word	0x0800abaf
 800a96c:	0800a9a3 	.word	0x0800a9a3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a970:	4b94      	ldr	r3, [pc, #592]	@ (800abc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f003 0320 	and.w	r3, r3, #32
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d009      	beq.n	800a990 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a97c:	4b91      	ldr	r3, [pc, #580]	@ (800abc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	08db      	lsrs	r3, r3, #3
 800a982:	f003 0303 	and.w	r3, r3, #3
 800a986:	4a90      	ldr	r2, [pc, #576]	@ (800abc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a988:	fa22 f303 	lsr.w	r3, r2, r3
 800a98c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a98e:	e111      	b.n	800abb4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a990:	4b8d      	ldr	r3, [pc, #564]	@ (800abc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a992:	61bb      	str	r3, [r7, #24]
      break;
 800a994:	e10e      	b.n	800abb4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a996:	4b8d      	ldr	r3, [pc, #564]	@ (800abcc <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a998:	61bb      	str	r3, [r7, #24]
      break;
 800a99a:	e10b      	b.n	800abb4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a99c:	4b8c      	ldr	r3, [pc, #560]	@ (800abd0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a99e:	61bb      	str	r3, [r7, #24]
      break;
 800a9a0:	e108      	b.n	800abb4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a9a2:	4b88      	ldr	r3, [pc, #544]	@ (800abc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9a6:	f003 0303 	and.w	r3, r3, #3
 800a9aa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a9ac:	4b85      	ldr	r3, [pc, #532]	@ (800abc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9b0:	091b      	lsrs	r3, r3, #4
 800a9b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a9b6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a9b8:	4b82      	ldr	r3, [pc, #520]	@ (800abc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9bc:	f003 0301 	and.w	r3, r3, #1
 800a9c0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a9c2:	4b80      	ldr	r3, [pc, #512]	@ (800abc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9c6:	08db      	lsrs	r3, r3, #3
 800a9c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a9cc:	68fa      	ldr	r2, [r7, #12]
 800a9ce:	fb02 f303 	mul.w	r3, r2, r3
 800a9d2:	ee07 3a90 	vmov	s15, r3
 800a9d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9da:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	f000 80e1 	beq.w	800aba8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	2b02      	cmp	r3, #2
 800a9ea:	f000 8083 	beq.w	800aaf4 <HAL_RCC_GetSysClockFreq+0x204>
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	2b02      	cmp	r3, #2
 800a9f2:	f200 80a1 	bhi.w	800ab38 <HAL_RCC_GetSysClockFreq+0x248>
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d003      	beq.n	800aa04 <HAL_RCC_GetSysClockFreq+0x114>
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	2b01      	cmp	r3, #1
 800aa00:	d056      	beq.n	800aab0 <HAL_RCC_GetSysClockFreq+0x1c0>
 800aa02:	e099      	b.n	800ab38 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa04:	4b6f      	ldr	r3, [pc, #444]	@ (800abc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f003 0320 	and.w	r3, r3, #32
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d02d      	beq.n	800aa6c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa10:	4b6c      	ldr	r3, [pc, #432]	@ (800abc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	08db      	lsrs	r3, r3, #3
 800aa16:	f003 0303 	and.w	r3, r3, #3
 800aa1a:	4a6b      	ldr	r2, [pc, #428]	@ (800abc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aa1c:	fa22 f303 	lsr.w	r3, r2, r3
 800aa20:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	ee07 3a90 	vmov	s15, r3
 800aa28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	ee07 3a90 	vmov	s15, r3
 800aa32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa3a:	4b62      	ldr	r3, [pc, #392]	@ (800abc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa42:	ee07 3a90 	vmov	s15, r3
 800aa46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa4a:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa4e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800abd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aa52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa66:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800aa6a:	e087      	b.n	800ab7c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	ee07 3a90 	vmov	s15, r3
 800aa72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa76:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800abd8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800aa7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa7e:	4b51      	ldr	r3, [pc, #324]	@ (800abc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa86:	ee07 3a90 	vmov	s15, r3
 800aa8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa8e:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa92:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800abd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aa96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aaa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aaa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaaa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800aaae:	e065      	b.n	800ab7c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	ee07 3a90 	vmov	s15, r3
 800aab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaba:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800abdc <HAL_RCC_GetSysClockFreq+0x2ec>
 800aabe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aac2:	4b40      	ldr	r3, [pc, #256]	@ (800abc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaca:	ee07 3a90 	vmov	s15, r3
 800aace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aad2:	ed97 6a02 	vldr	s12, [r7, #8]
 800aad6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800abd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aae2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aaea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800aaf2:	e043      	b.n	800ab7c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	ee07 3a90 	vmov	s15, r3
 800aafa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aafe:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800abe0 <HAL_RCC_GetSysClockFreq+0x2f0>
 800ab02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab06:	4b2f      	ldr	r3, [pc, #188]	@ (800abc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab0e:	ee07 3a90 	vmov	s15, r3
 800ab12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab16:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab1a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800abd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ab1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab32:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ab36:	e021      	b.n	800ab7c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ab38:	693b      	ldr	r3, [r7, #16]
 800ab3a:	ee07 3a90 	vmov	s15, r3
 800ab3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab42:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800abdc <HAL_RCC_GetSysClockFreq+0x2ec>
 800ab46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab4a:	4b1e      	ldr	r3, [pc, #120]	@ (800abc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab52:	ee07 3a90 	vmov	s15, r3
 800ab56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab5a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab5e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800abd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ab62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ab7a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800ab7c:	4b11      	ldr	r3, [pc, #68]	@ (800abc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab80:	0a5b      	lsrs	r3, r3, #9
 800ab82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab86:	3301      	adds	r3, #1
 800ab88:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	ee07 3a90 	vmov	s15, r3
 800ab90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ab94:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aba0:	ee17 3a90 	vmov	r3, s15
 800aba4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800aba6:	e005      	b.n	800abb4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800aba8:	2300      	movs	r3, #0
 800abaa:	61bb      	str	r3, [r7, #24]
      break;
 800abac:	e002      	b.n	800abb4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800abae:	4b07      	ldr	r3, [pc, #28]	@ (800abcc <HAL_RCC_GetSysClockFreq+0x2dc>)
 800abb0:	61bb      	str	r3, [r7, #24]
      break;
 800abb2:	bf00      	nop
  }

  return sysclockfreq;
 800abb4:	69bb      	ldr	r3, [r7, #24]
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3724      	adds	r7, #36	@ 0x24
 800abba:	46bd      	mov	sp, r7
 800abbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc0:	4770      	bx	lr
 800abc2:	bf00      	nop
 800abc4:	58024400 	.word	0x58024400
 800abc8:	03d09000 	.word	0x03d09000
 800abcc:	003d0900 	.word	0x003d0900
 800abd0:	016e3600 	.word	0x016e3600
 800abd4:	46000000 	.word	0x46000000
 800abd8:	4c742400 	.word	0x4c742400
 800abdc:	4a742400 	.word	0x4a742400
 800abe0:	4bb71b00 	.word	0x4bb71b00

0800abe4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b082      	sub	sp, #8
 800abe8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800abea:	f7ff fe81 	bl	800a8f0 <HAL_RCC_GetSysClockFreq>
 800abee:	4602      	mov	r2, r0
 800abf0:	4b10      	ldr	r3, [pc, #64]	@ (800ac34 <HAL_RCC_GetHCLKFreq+0x50>)
 800abf2:	699b      	ldr	r3, [r3, #24]
 800abf4:	0a1b      	lsrs	r3, r3, #8
 800abf6:	f003 030f 	and.w	r3, r3, #15
 800abfa:	490f      	ldr	r1, [pc, #60]	@ (800ac38 <HAL_RCC_GetHCLKFreq+0x54>)
 800abfc:	5ccb      	ldrb	r3, [r1, r3]
 800abfe:	f003 031f 	and.w	r3, r3, #31
 800ac02:	fa22 f303 	lsr.w	r3, r2, r3
 800ac06:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ac08:	4b0a      	ldr	r3, [pc, #40]	@ (800ac34 <HAL_RCC_GetHCLKFreq+0x50>)
 800ac0a:	699b      	ldr	r3, [r3, #24]
 800ac0c:	f003 030f 	and.w	r3, r3, #15
 800ac10:	4a09      	ldr	r2, [pc, #36]	@ (800ac38 <HAL_RCC_GetHCLKFreq+0x54>)
 800ac12:	5cd3      	ldrb	r3, [r2, r3]
 800ac14:	f003 031f 	and.w	r3, r3, #31
 800ac18:	687a      	ldr	r2, [r7, #4]
 800ac1a:	fa22 f303 	lsr.w	r3, r2, r3
 800ac1e:	4a07      	ldr	r2, [pc, #28]	@ (800ac3c <HAL_RCC_GetHCLKFreq+0x58>)
 800ac20:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ac22:	4a07      	ldr	r2, [pc, #28]	@ (800ac40 <HAL_RCC_GetHCLKFreq+0x5c>)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800ac28:	4b04      	ldr	r3, [pc, #16]	@ (800ac3c <HAL_RCC_GetHCLKFreq+0x58>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	3708      	adds	r7, #8
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd80      	pop	{r7, pc}
 800ac34:	58024400 	.word	0x58024400
 800ac38:	08014870 	.word	0x08014870
 800ac3c:	24000028 	.word	0x24000028
 800ac40:	24000024 	.word	0x24000024

0800ac44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ac48:	f7ff ffcc 	bl	800abe4 <HAL_RCC_GetHCLKFreq>
 800ac4c:	4602      	mov	r2, r0
 800ac4e:	4b06      	ldr	r3, [pc, #24]	@ (800ac68 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ac50:	69db      	ldr	r3, [r3, #28]
 800ac52:	091b      	lsrs	r3, r3, #4
 800ac54:	f003 0307 	and.w	r3, r3, #7
 800ac58:	4904      	ldr	r1, [pc, #16]	@ (800ac6c <HAL_RCC_GetPCLK1Freq+0x28>)
 800ac5a:	5ccb      	ldrb	r3, [r1, r3]
 800ac5c:	f003 031f 	and.w	r3, r3, #31
 800ac60:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	bd80      	pop	{r7, pc}
 800ac68:	58024400 	.word	0x58024400
 800ac6c:	08014870 	.word	0x08014870

0800ac70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ac74:	f7ff ffb6 	bl	800abe4 <HAL_RCC_GetHCLKFreq>
 800ac78:	4602      	mov	r2, r0
 800ac7a:	4b06      	ldr	r3, [pc, #24]	@ (800ac94 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ac7c:	69db      	ldr	r3, [r3, #28]
 800ac7e:	0a1b      	lsrs	r3, r3, #8
 800ac80:	f003 0307 	and.w	r3, r3, #7
 800ac84:	4904      	ldr	r1, [pc, #16]	@ (800ac98 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ac86:	5ccb      	ldrb	r3, [r1, r3]
 800ac88:	f003 031f 	and.w	r3, r3, #31
 800ac8c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	bd80      	pop	{r7, pc}
 800ac94:	58024400 	.word	0x58024400
 800ac98:	08014870 	.word	0x08014870

0800ac9c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ac9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aca0:	b0c6      	sub	sp, #280	@ 0x118
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800aca8:	2300      	movs	r3, #0
 800acaa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800acae:	2300      	movs	r3, #0
 800acb0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800acb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acbc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800acc0:	2500      	movs	r5, #0
 800acc2:	ea54 0305 	orrs.w	r3, r4, r5
 800acc6:	d049      	beq.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800acc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800accc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800acce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800acd2:	d02f      	beq.n	800ad34 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800acd4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800acd8:	d828      	bhi.n	800ad2c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800acda:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800acde:	d01a      	beq.n	800ad16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800ace0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ace4:	d822      	bhi.n	800ad2c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d003      	beq.n	800acf2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800acea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800acee:	d007      	beq.n	800ad00 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800acf0:	e01c      	b.n	800ad2c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800acf2:	4bab      	ldr	r3, [pc, #684]	@ (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800acf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acf6:	4aaa      	ldr	r2, [pc, #680]	@ (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800acf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800acfc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800acfe:	e01a      	b.n	800ad36 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ad00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad04:	3308      	adds	r3, #8
 800ad06:	2102      	movs	r1, #2
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f002 fa49 	bl	800d1a0 <RCCEx_PLL2_Config>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ad14:	e00f      	b.n	800ad36 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ad16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad1a:	3328      	adds	r3, #40	@ 0x28
 800ad1c:	2102      	movs	r1, #2
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f002 faf0 	bl	800d304 <RCCEx_PLL3_Config>
 800ad24:	4603      	mov	r3, r0
 800ad26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ad2a:	e004      	b.n	800ad36 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ad32:	e000      	b.n	800ad36 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800ad34:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d10a      	bne.n	800ad54 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ad3e:	4b98      	ldr	r3, [pc, #608]	@ (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ad40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad42:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800ad46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ad4c:	4a94      	ldr	r2, [pc, #592]	@ (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ad4e:	430b      	orrs	r3, r1
 800ad50:	6513      	str	r3, [r2, #80]	@ 0x50
 800ad52:	e003      	b.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ad58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ad5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad64:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800ad68:	f04f 0900 	mov.w	r9, #0
 800ad6c:	ea58 0309 	orrs.w	r3, r8, r9
 800ad70:	d047      	beq.n	800ae02 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800ad72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad78:	2b04      	cmp	r3, #4
 800ad7a:	d82a      	bhi.n	800add2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800ad7c:	a201      	add	r2, pc, #4	@ (adr r2, 800ad84 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800ad7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad82:	bf00      	nop
 800ad84:	0800ad99 	.word	0x0800ad99
 800ad88:	0800ada7 	.word	0x0800ada7
 800ad8c:	0800adbd 	.word	0x0800adbd
 800ad90:	0800addb 	.word	0x0800addb
 800ad94:	0800addb 	.word	0x0800addb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad98:	4b81      	ldr	r3, [pc, #516]	@ (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ad9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad9c:	4a80      	ldr	r2, [pc, #512]	@ (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ad9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ada2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ada4:	e01a      	b.n	800addc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ada6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adaa:	3308      	adds	r3, #8
 800adac:	2100      	movs	r1, #0
 800adae:	4618      	mov	r0, r3
 800adb0:	f002 f9f6 	bl	800d1a0 <RCCEx_PLL2_Config>
 800adb4:	4603      	mov	r3, r0
 800adb6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800adba:	e00f      	b.n	800addc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800adbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adc0:	3328      	adds	r3, #40	@ 0x28
 800adc2:	2100      	movs	r1, #0
 800adc4:	4618      	mov	r0, r3
 800adc6:	f002 fa9d 	bl	800d304 <RCCEx_PLL3_Config>
 800adca:	4603      	mov	r3, r0
 800adcc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800add0:	e004      	b.n	800addc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800add2:	2301      	movs	r3, #1
 800add4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800add8:	e000      	b.n	800addc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800adda:	bf00      	nop
    }

    if (ret == HAL_OK)
 800addc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d10a      	bne.n	800adfa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ade4:	4b6e      	ldr	r3, [pc, #440]	@ (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ade6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ade8:	f023 0107 	bic.w	r1, r3, #7
 800adec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800adf2:	4a6b      	ldr	r2, [pc, #428]	@ (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800adf4:	430b      	orrs	r3, r1
 800adf6:	6513      	str	r3, [r2, #80]	@ 0x50
 800adf8:	e003      	b.n	800ae02 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adfa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800adfe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ae02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae0a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800ae0e:	f04f 0b00 	mov.w	fp, #0
 800ae12:	ea5a 030b 	orrs.w	r3, sl, fp
 800ae16:	d05b      	beq.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800ae18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ae20:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800ae24:	d03b      	beq.n	800ae9e <HAL_RCCEx_PeriphCLKConfig+0x202>
 800ae26:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800ae2a:	d834      	bhi.n	800ae96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ae2c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ae30:	d037      	beq.n	800aea2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800ae32:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ae36:	d82e      	bhi.n	800ae96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ae38:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ae3c:	d033      	beq.n	800aea6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800ae3e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ae42:	d828      	bhi.n	800ae96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ae44:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ae48:	d01a      	beq.n	800ae80 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800ae4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ae4e:	d822      	bhi.n	800ae96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d003      	beq.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800ae54:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ae58:	d007      	beq.n	800ae6a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800ae5a:	e01c      	b.n	800ae96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae5c:	4b50      	ldr	r3, [pc, #320]	@ (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ae5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae60:	4a4f      	ldr	r2, [pc, #316]	@ (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ae62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ae66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ae68:	e01e      	b.n	800aea8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ae6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae6e:	3308      	adds	r3, #8
 800ae70:	2100      	movs	r1, #0
 800ae72:	4618      	mov	r0, r3
 800ae74:	f002 f994 	bl	800d1a0 <RCCEx_PLL2_Config>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ae7e:	e013      	b.n	800aea8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ae80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae84:	3328      	adds	r3, #40	@ 0x28
 800ae86:	2100      	movs	r1, #0
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f002 fa3b 	bl	800d304 <RCCEx_PLL3_Config>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ae94:	e008      	b.n	800aea8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ae96:	2301      	movs	r3, #1
 800ae98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ae9c:	e004      	b.n	800aea8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800ae9e:	bf00      	nop
 800aea0:	e002      	b.n	800aea8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800aea2:	bf00      	nop
 800aea4:	e000      	b.n	800aea8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800aea6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aea8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d10b      	bne.n	800aec8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800aeb0:	4b3b      	ldr	r3, [pc, #236]	@ (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aeb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aeb4:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800aeb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aebc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800aec0:	4a37      	ldr	r2, [pc, #220]	@ (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aec2:	430b      	orrs	r3, r1
 800aec4:	6593      	str	r3, [r2, #88]	@ 0x58
 800aec6:	e003      	b.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aec8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aecc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800aed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800aedc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800aee0:	2300      	movs	r3, #0
 800aee2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800aee6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800aeea:	460b      	mov	r3, r1
 800aeec:	4313      	orrs	r3, r2
 800aeee:	d05d      	beq.n	800afac <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800aef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aef4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800aef8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800aefc:	d03b      	beq.n	800af76 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800aefe:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800af02:	d834      	bhi.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800af04:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800af08:	d037      	beq.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800af0a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800af0e:	d82e      	bhi.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800af10:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800af14:	d033      	beq.n	800af7e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800af16:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800af1a:	d828      	bhi.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800af1c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800af20:	d01a      	beq.n	800af58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800af22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800af26:	d822      	bhi.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d003      	beq.n	800af34 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800af2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800af30:	d007      	beq.n	800af42 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800af32:	e01c      	b.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af34:	4b1a      	ldr	r3, [pc, #104]	@ (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800af36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af38:	4a19      	ldr	r2, [pc, #100]	@ (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800af3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800af3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800af40:	e01e      	b.n	800af80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af46:	3308      	adds	r3, #8
 800af48:	2100      	movs	r1, #0
 800af4a:	4618      	mov	r0, r3
 800af4c:	f002 f928 	bl	800d1a0 <RCCEx_PLL2_Config>
 800af50:	4603      	mov	r3, r0
 800af52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800af56:	e013      	b.n	800af80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800af58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af5c:	3328      	adds	r3, #40	@ 0x28
 800af5e:	2100      	movs	r1, #0
 800af60:	4618      	mov	r0, r3
 800af62:	f002 f9cf 	bl	800d304 <RCCEx_PLL3_Config>
 800af66:	4603      	mov	r3, r0
 800af68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800af6c:	e008      	b.n	800af80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800af6e:	2301      	movs	r3, #1
 800af70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800af74:	e004      	b.n	800af80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800af76:	bf00      	nop
 800af78:	e002      	b.n	800af80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800af7a:	bf00      	nop
 800af7c:	e000      	b.n	800af80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800af7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800af84:	2b00      	cmp	r3, #0
 800af86:	d10d      	bne.n	800afa4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800af88:	4b05      	ldr	r3, [pc, #20]	@ (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800af8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af8c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800af90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af94:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800af98:	4a01      	ldr	r2, [pc, #4]	@ (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800af9a:	430b      	orrs	r3, r1
 800af9c:	6593      	str	r3, [r2, #88]	@ 0x58
 800af9e:	e005      	b.n	800afac <HAL_RCCEx_PeriphCLKConfig+0x310>
 800afa0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afa4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800afa8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800afac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800afb8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800afbc:	2300      	movs	r3, #0
 800afbe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800afc2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800afc6:	460b      	mov	r3, r1
 800afc8:	4313      	orrs	r3, r2
 800afca:	d03a      	beq.n	800b042 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800afcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800afd2:	2b30      	cmp	r3, #48	@ 0x30
 800afd4:	d01f      	beq.n	800b016 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800afd6:	2b30      	cmp	r3, #48	@ 0x30
 800afd8:	d819      	bhi.n	800b00e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800afda:	2b20      	cmp	r3, #32
 800afdc:	d00c      	beq.n	800aff8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800afde:	2b20      	cmp	r3, #32
 800afe0:	d815      	bhi.n	800b00e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d019      	beq.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800afe6:	2b10      	cmp	r3, #16
 800afe8:	d111      	bne.n	800b00e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800afea:	4baa      	ldr	r3, [pc, #680]	@ (800b294 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800afec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afee:	4aa9      	ldr	r2, [pc, #676]	@ (800b294 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aff0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aff4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800aff6:	e011      	b.n	800b01c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800affc:	3308      	adds	r3, #8
 800affe:	2102      	movs	r1, #2
 800b000:	4618      	mov	r0, r3
 800b002:	f002 f8cd 	bl	800d1a0 <RCCEx_PLL2_Config>
 800b006:	4603      	mov	r3, r0
 800b008:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b00c:	e006      	b.n	800b01c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b00e:	2301      	movs	r3, #1
 800b010:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b014:	e002      	b.n	800b01c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800b016:	bf00      	nop
 800b018:	e000      	b.n	800b01c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800b01a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b01c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b020:	2b00      	cmp	r3, #0
 800b022:	d10a      	bne.n	800b03a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b024:	4b9b      	ldr	r3, [pc, #620]	@ (800b294 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b026:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b028:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800b02c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b032:	4a98      	ldr	r2, [pc, #608]	@ (800b294 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b034:	430b      	orrs	r3, r1
 800b036:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b038:	e003      	b.n	800b042 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b03a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b03e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b042:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b04a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800b04e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b052:	2300      	movs	r3, #0
 800b054:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b058:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800b05c:	460b      	mov	r3, r1
 800b05e:	4313      	orrs	r3, r2
 800b060:	d051      	beq.n	800b106 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b062:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b066:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b068:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b06c:	d035      	beq.n	800b0da <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800b06e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b072:	d82e      	bhi.n	800b0d2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b074:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b078:	d031      	beq.n	800b0de <HAL_RCCEx_PeriphCLKConfig+0x442>
 800b07a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b07e:	d828      	bhi.n	800b0d2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b080:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b084:	d01a      	beq.n	800b0bc <HAL_RCCEx_PeriphCLKConfig+0x420>
 800b086:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b08a:	d822      	bhi.n	800b0d2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d003      	beq.n	800b098 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800b090:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b094:	d007      	beq.n	800b0a6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800b096:	e01c      	b.n	800b0d2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b098:	4b7e      	ldr	r3, [pc, #504]	@ (800b294 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b09a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b09c:	4a7d      	ldr	r2, [pc, #500]	@ (800b294 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b09e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b0a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b0a4:	e01c      	b.n	800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b0a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0aa:	3308      	adds	r3, #8
 800b0ac:	2100      	movs	r1, #0
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f002 f876 	bl	800d1a0 <RCCEx_PLL2_Config>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b0ba:	e011      	b.n	800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b0bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0c0:	3328      	adds	r3, #40	@ 0x28
 800b0c2:	2100      	movs	r1, #0
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f002 f91d 	bl	800d304 <RCCEx_PLL3_Config>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b0d0:	e006      	b.n	800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b0d8:	e002      	b.n	800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800b0da:	bf00      	nop
 800b0dc:	e000      	b.n	800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800b0de:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d10a      	bne.n	800b0fe <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b0e8:	4b6a      	ldr	r3, [pc, #424]	@ (800b294 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b0ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b0ec:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800b0f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b0f6:	4a67      	ldr	r2, [pc, #412]	@ (800b294 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b0f8:	430b      	orrs	r3, r1
 800b0fa:	6513      	str	r3, [r2, #80]	@ 0x50
 800b0fc:	e003      	b.n	800b106 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b102:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b106:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b10e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800b112:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b116:	2300      	movs	r3, #0
 800b118:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b11c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800b120:	460b      	mov	r3, r1
 800b122:	4313      	orrs	r3, r2
 800b124:	d053      	beq.n	800b1ce <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b126:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b12a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b12c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b130:	d033      	beq.n	800b19a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800b132:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b136:	d82c      	bhi.n	800b192 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b138:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b13c:	d02f      	beq.n	800b19e <HAL_RCCEx_PeriphCLKConfig+0x502>
 800b13e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b142:	d826      	bhi.n	800b192 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b144:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b148:	d02b      	beq.n	800b1a2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800b14a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b14e:	d820      	bhi.n	800b192 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b150:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b154:	d012      	beq.n	800b17c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800b156:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b15a:	d81a      	bhi.n	800b192 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d022      	beq.n	800b1a6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800b160:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b164:	d115      	bne.n	800b192 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b166:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b16a:	3308      	adds	r3, #8
 800b16c:	2101      	movs	r1, #1
 800b16e:	4618      	mov	r0, r3
 800b170:	f002 f816 	bl	800d1a0 <RCCEx_PLL2_Config>
 800b174:	4603      	mov	r3, r0
 800b176:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b17a:	e015      	b.n	800b1a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b17c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b180:	3328      	adds	r3, #40	@ 0x28
 800b182:	2101      	movs	r1, #1
 800b184:	4618      	mov	r0, r3
 800b186:	f002 f8bd 	bl	800d304 <RCCEx_PLL3_Config>
 800b18a:	4603      	mov	r3, r0
 800b18c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b190:	e00a      	b.n	800b1a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b192:	2301      	movs	r3, #1
 800b194:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b198:	e006      	b.n	800b1a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b19a:	bf00      	nop
 800b19c:	e004      	b.n	800b1a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b19e:	bf00      	nop
 800b1a0:	e002      	b.n	800b1a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b1a2:	bf00      	nop
 800b1a4:	e000      	b.n	800b1a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b1a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d10a      	bne.n	800b1c6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b1b0:	4b38      	ldr	r3, [pc, #224]	@ (800b294 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b1b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b1b4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800b1b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b1be:	4a35      	ldr	r2, [pc, #212]	@ (800b294 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b1c0:	430b      	orrs	r3, r1
 800b1c2:	6513      	str	r3, [r2, #80]	@ 0x50
 800b1c4:	e003      	b.n	800b1ce <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b1ca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b1ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1d6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800b1da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b1de:	2300      	movs	r3, #0
 800b1e0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b1e4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b1e8:	460b      	mov	r3, r1
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	d058      	beq.n	800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b1ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b1f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b1fa:	d033      	beq.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800b1fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b200:	d82c      	bhi.n	800b25c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b202:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b206:	d02f      	beq.n	800b268 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800b208:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b20c:	d826      	bhi.n	800b25c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b20e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b212:	d02b      	beq.n	800b26c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800b214:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b218:	d820      	bhi.n	800b25c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b21a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b21e:	d012      	beq.n	800b246 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800b220:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b224:	d81a      	bhi.n	800b25c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b226:	2b00      	cmp	r3, #0
 800b228:	d022      	beq.n	800b270 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b22a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b22e:	d115      	bne.n	800b25c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b230:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b234:	3308      	adds	r3, #8
 800b236:	2101      	movs	r1, #1
 800b238:	4618      	mov	r0, r3
 800b23a:	f001 ffb1 	bl	800d1a0 <RCCEx_PLL2_Config>
 800b23e:	4603      	mov	r3, r0
 800b240:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b244:	e015      	b.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b246:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b24a:	3328      	adds	r3, #40	@ 0x28
 800b24c:	2101      	movs	r1, #1
 800b24e:	4618      	mov	r0, r3
 800b250:	f002 f858 	bl	800d304 <RCCEx_PLL3_Config>
 800b254:	4603      	mov	r3, r0
 800b256:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b25a:	e00a      	b.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b25c:	2301      	movs	r3, #1
 800b25e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b262:	e006      	b.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b264:	bf00      	nop
 800b266:	e004      	b.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b268:	bf00      	nop
 800b26a:	e002      	b.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b26c:	bf00      	nop
 800b26e:	e000      	b.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b270:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b272:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b276:	2b00      	cmp	r3, #0
 800b278:	d10e      	bne.n	800b298 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b27a:	4b06      	ldr	r3, [pc, #24]	@ (800b294 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b27c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b27e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800b282:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b286:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b28a:	4a02      	ldr	r2, [pc, #8]	@ (800b294 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b28c:	430b      	orrs	r3, r1
 800b28e:	6593      	str	r3, [r2, #88]	@ 0x58
 800b290:	e006      	b.n	800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800b292:	bf00      	nop
 800b294:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b298:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b29c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b2a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800b2ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b2b6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800b2ba:	460b      	mov	r3, r1
 800b2bc:	4313      	orrs	r3, r2
 800b2be:	d037      	beq.n	800b330 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b2c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b2ca:	d00e      	beq.n	800b2ea <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800b2cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b2d0:	d816      	bhi.n	800b300 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d018      	beq.n	800b308 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800b2d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b2da:	d111      	bne.n	800b300 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2dc:	4bc4      	ldr	r3, [pc, #784]	@ (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b2de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2e0:	4ac3      	ldr	r2, [pc, #780]	@ (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b2e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b2e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b2e8:	e00f      	b.n	800b30a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b2ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2ee:	3308      	adds	r3, #8
 800b2f0:	2101      	movs	r1, #1
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f001 ff54 	bl	800d1a0 <RCCEx_PLL2_Config>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b2fe:	e004      	b.n	800b30a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b300:	2301      	movs	r3, #1
 800b302:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b306:	e000      	b.n	800b30a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800b308:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b30a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d10a      	bne.n	800b328 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b312:	4bb7      	ldr	r3, [pc, #732]	@ (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b314:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b316:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800b31a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b31e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b320:	4ab3      	ldr	r2, [pc, #716]	@ (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b322:	430b      	orrs	r3, r1
 800b324:	6513      	str	r3, [r2, #80]	@ 0x50
 800b326:	e003      	b.n	800b330 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b328:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b32c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b330:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b338:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800b33c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b340:	2300      	movs	r3, #0
 800b342:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b346:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800b34a:	460b      	mov	r3, r1
 800b34c:	4313      	orrs	r3, r2
 800b34e:	d039      	beq.n	800b3c4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b350:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b354:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b356:	2b03      	cmp	r3, #3
 800b358:	d81c      	bhi.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800b35a:	a201      	add	r2, pc, #4	@ (adr r2, 800b360 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800b35c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b360:	0800b39d 	.word	0x0800b39d
 800b364:	0800b371 	.word	0x0800b371
 800b368:	0800b37f 	.word	0x0800b37f
 800b36c:	0800b39d 	.word	0x0800b39d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b370:	4b9f      	ldr	r3, [pc, #636]	@ (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b374:	4a9e      	ldr	r2, [pc, #632]	@ (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b376:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b37a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b37c:	e00f      	b.n	800b39e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b37e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b382:	3308      	adds	r3, #8
 800b384:	2102      	movs	r1, #2
 800b386:	4618      	mov	r0, r3
 800b388:	f001 ff0a 	bl	800d1a0 <RCCEx_PLL2_Config>
 800b38c:	4603      	mov	r3, r0
 800b38e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b392:	e004      	b.n	800b39e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b394:	2301      	movs	r3, #1
 800b396:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b39a:	e000      	b.n	800b39e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800b39c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b39e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d10a      	bne.n	800b3bc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b3a6:	4b92      	ldr	r3, [pc, #584]	@ (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b3a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b3aa:	f023 0103 	bic.w	r1, r3, #3
 800b3ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b3b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b3b4:	4a8e      	ldr	r2, [pc, #568]	@ (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b3b6:	430b      	orrs	r3, r1
 800b3b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b3ba:	e003      	b.n	800b3c4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b3c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b3c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3cc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800b3d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b3da:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b3de:	460b      	mov	r3, r1
 800b3e0:	4313      	orrs	r3, r2
 800b3e2:	f000 8099 	beq.w	800b518 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b3e6:	4b83      	ldr	r3, [pc, #524]	@ (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	4a82      	ldr	r2, [pc, #520]	@ (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b3ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b3f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b3f2:	f7f8 faf9 	bl	80039e8 <HAL_GetTick>
 800b3f6:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b3fa:	e00b      	b.n	800b414 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b3fc:	f7f8 faf4 	bl	80039e8 <HAL_GetTick>
 800b400:	4602      	mov	r2, r0
 800b402:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800b406:	1ad3      	subs	r3, r2, r3
 800b408:	2b64      	cmp	r3, #100	@ 0x64
 800b40a:	d903      	bls.n	800b414 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800b40c:	2303      	movs	r3, #3
 800b40e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b412:	e005      	b.n	800b420 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b414:	4b77      	ldr	r3, [pc, #476]	@ (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d0ed      	beq.n	800b3fc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800b420:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b424:	2b00      	cmp	r3, #0
 800b426:	d173      	bne.n	800b510 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b428:	4b71      	ldr	r3, [pc, #452]	@ (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b42a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800b42c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b430:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b434:	4053      	eors	r3, r2
 800b436:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d015      	beq.n	800b46a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b43e:	4b6c      	ldr	r3, [pc, #432]	@ (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b440:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b442:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b446:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b44a:	4b69      	ldr	r3, [pc, #420]	@ (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b44c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b44e:	4a68      	ldr	r2, [pc, #416]	@ (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b450:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b454:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b456:	4b66      	ldr	r3, [pc, #408]	@ (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b45a:	4a65      	ldr	r2, [pc, #404]	@ (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b45c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b460:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b462:	4a63      	ldr	r2, [pc, #396]	@ (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b464:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b468:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b46a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b46e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b472:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b476:	d118      	bne.n	800b4aa <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b478:	f7f8 fab6 	bl	80039e8 <HAL_GetTick>
 800b47c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b480:	e00d      	b.n	800b49e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b482:	f7f8 fab1 	bl	80039e8 <HAL_GetTick>
 800b486:	4602      	mov	r2, r0
 800b488:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800b48c:	1ad2      	subs	r2, r2, r3
 800b48e:	f241 3388 	movw	r3, #5000	@ 0x1388
 800b492:	429a      	cmp	r2, r3
 800b494:	d903      	bls.n	800b49e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800b496:	2303      	movs	r3, #3
 800b498:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800b49c:	e005      	b.n	800b4aa <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b49e:	4b54      	ldr	r3, [pc, #336]	@ (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b4a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b4a2:	f003 0302 	and.w	r3, r3, #2
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d0eb      	beq.n	800b482 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800b4aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d129      	bne.n	800b506 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b4b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b4ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b4be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b4c2:	d10e      	bne.n	800b4e2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800b4c4:	4b4a      	ldr	r3, [pc, #296]	@ (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b4c6:	691b      	ldr	r3, [r3, #16]
 800b4c8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800b4cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b4d4:	091a      	lsrs	r2, r3, #4
 800b4d6:	4b48      	ldr	r3, [pc, #288]	@ (800b5f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800b4d8:	4013      	ands	r3, r2
 800b4da:	4a45      	ldr	r2, [pc, #276]	@ (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b4dc:	430b      	orrs	r3, r1
 800b4de:	6113      	str	r3, [r2, #16]
 800b4e0:	e005      	b.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0x852>
 800b4e2:	4b43      	ldr	r3, [pc, #268]	@ (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b4e4:	691b      	ldr	r3, [r3, #16]
 800b4e6:	4a42      	ldr	r2, [pc, #264]	@ (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b4e8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b4ec:	6113      	str	r3, [r2, #16]
 800b4ee:	4b40      	ldr	r3, [pc, #256]	@ (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b4f0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800b4f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b4fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b4fe:	4a3c      	ldr	r2, [pc, #240]	@ (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b500:	430b      	orrs	r3, r1
 800b502:	6713      	str	r3, [r2, #112]	@ 0x70
 800b504:	e008      	b.n	800b518 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b506:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b50a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800b50e:	e003      	b.n	800b518 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b510:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b514:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b520:	f002 0301 	and.w	r3, r2, #1
 800b524:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b528:	2300      	movs	r3, #0
 800b52a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b52e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800b532:	460b      	mov	r3, r1
 800b534:	4313      	orrs	r3, r2
 800b536:	f000 808f 	beq.w	800b658 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b53a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b53e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b540:	2b28      	cmp	r3, #40	@ 0x28
 800b542:	d871      	bhi.n	800b628 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800b544:	a201      	add	r2, pc, #4	@ (adr r2, 800b54c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800b546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b54a:	bf00      	nop
 800b54c:	0800b631 	.word	0x0800b631
 800b550:	0800b629 	.word	0x0800b629
 800b554:	0800b629 	.word	0x0800b629
 800b558:	0800b629 	.word	0x0800b629
 800b55c:	0800b629 	.word	0x0800b629
 800b560:	0800b629 	.word	0x0800b629
 800b564:	0800b629 	.word	0x0800b629
 800b568:	0800b629 	.word	0x0800b629
 800b56c:	0800b5fd 	.word	0x0800b5fd
 800b570:	0800b629 	.word	0x0800b629
 800b574:	0800b629 	.word	0x0800b629
 800b578:	0800b629 	.word	0x0800b629
 800b57c:	0800b629 	.word	0x0800b629
 800b580:	0800b629 	.word	0x0800b629
 800b584:	0800b629 	.word	0x0800b629
 800b588:	0800b629 	.word	0x0800b629
 800b58c:	0800b613 	.word	0x0800b613
 800b590:	0800b629 	.word	0x0800b629
 800b594:	0800b629 	.word	0x0800b629
 800b598:	0800b629 	.word	0x0800b629
 800b59c:	0800b629 	.word	0x0800b629
 800b5a0:	0800b629 	.word	0x0800b629
 800b5a4:	0800b629 	.word	0x0800b629
 800b5a8:	0800b629 	.word	0x0800b629
 800b5ac:	0800b631 	.word	0x0800b631
 800b5b0:	0800b629 	.word	0x0800b629
 800b5b4:	0800b629 	.word	0x0800b629
 800b5b8:	0800b629 	.word	0x0800b629
 800b5bc:	0800b629 	.word	0x0800b629
 800b5c0:	0800b629 	.word	0x0800b629
 800b5c4:	0800b629 	.word	0x0800b629
 800b5c8:	0800b629 	.word	0x0800b629
 800b5cc:	0800b631 	.word	0x0800b631
 800b5d0:	0800b629 	.word	0x0800b629
 800b5d4:	0800b629 	.word	0x0800b629
 800b5d8:	0800b629 	.word	0x0800b629
 800b5dc:	0800b629 	.word	0x0800b629
 800b5e0:	0800b629 	.word	0x0800b629
 800b5e4:	0800b629 	.word	0x0800b629
 800b5e8:	0800b629 	.word	0x0800b629
 800b5ec:	0800b631 	.word	0x0800b631
 800b5f0:	58024400 	.word	0x58024400
 800b5f4:	58024800 	.word	0x58024800
 800b5f8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b5fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b600:	3308      	adds	r3, #8
 800b602:	2101      	movs	r1, #1
 800b604:	4618      	mov	r0, r3
 800b606:	f001 fdcb 	bl	800d1a0 <RCCEx_PLL2_Config>
 800b60a:	4603      	mov	r3, r0
 800b60c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b610:	e00f      	b.n	800b632 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b612:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b616:	3328      	adds	r3, #40	@ 0x28
 800b618:	2101      	movs	r1, #1
 800b61a:	4618      	mov	r0, r3
 800b61c:	f001 fe72 	bl	800d304 <RCCEx_PLL3_Config>
 800b620:	4603      	mov	r3, r0
 800b622:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b626:	e004      	b.n	800b632 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b628:	2301      	movs	r3, #1
 800b62a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b62e:	e000      	b.n	800b632 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800b630:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b632:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b636:	2b00      	cmp	r3, #0
 800b638:	d10a      	bne.n	800b650 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b63a:	4bbf      	ldr	r3, [pc, #764]	@ (800b938 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b63c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b63e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800b642:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b646:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b648:	4abb      	ldr	r2, [pc, #748]	@ (800b938 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b64a:	430b      	orrs	r3, r1
 800b64c:	6553      	str	r3, [r2, #84]	@ 0x54
 800b64e:	e003      	b.n	800b658 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b650:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b654:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b658:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b660:	f002 0302 	and.w	r3, r2, #2
 800b664:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b668:	2300      	movs	r3, #0
 800b66a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b66e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800b672:	460b      	mov	r3, r1
 800b674:	4313      	orrs	r3, r2
 800b676:	d041      	beq.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b678:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b67c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b67e:	2b05      	cmp	r3, #5
 800b680:	d824      	bhi.n	800b6cc <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800b682:	a201      	add	r2, pc, #4	@ (adr r2, 800b688 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800b684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b688:	0800b6d5 	.word	0x0800b6d5
 800b68c:	0800b6a1 	.word	0x0800b6a1
 800b690:	0800b6b7 	.word	0x0800b6b7
 800b694:	0800b6d5 	.word	0x0800b6d5
 800b698:	0800b6d5 	.word	0x0800b6d5
 800b69c:	0800b6d5 	.word	0x0800b6d5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b6a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6a4:	3308      	adds	r3, #8
 800b6a6:	2101      	movs	r1, #1
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	f001 fd79 	bl	800d1a0 <RCCEx_PLL2_Config>
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b6b4:	e00f      	b.n	800b6d6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b6b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6ba:	3328      	adds	r3, #40	@ 0x28
 800b6bc:	2101      	movs	r1, #1
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f001 fe20 	bl	800d304 <RCCEx_PLL3_Config>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b6ca:	e004      	b.n	800b6d6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b6d2:	e000      	b.n	800b6d6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800b6d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d10a      	bne.n	800b6f4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b6de:	4b96      	ldr	r3, [pc, #600]	@ (800b938 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b6e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6e2:	f023 0107 	bic.w	r1, r3, #7
 800b6e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b6ec:	4a92      	ldr	r2, [pc, #584]	@ (800b938 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b6ee:	430b      	orrs	r3, r1
 800b6f0:	6553      	str	r3, [r2, #84]	@ 0x54
 800b6f2:	e003      	b.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b6f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b6fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b704:	f002 0304 	and.w	r3, r2, #4
 800b708:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b70c:	2300      	movs	r3, #0
 800b70e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b712:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b716:	460b      	mov	r3, r1
 800b718:	4313      	orrs	r3, r2
 800b71a:	d044      	beq.n	800b7a6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b71c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b720:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b724:	2b05      	cmp	r3, #5
 800b726:	d825      	bhi.n	800b774 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800b728:	a201      	add	r2, pc, #4	@ (adr r2, 800b730 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800b72a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b72e:	bf00      	nop
 800b730:	0800b77d 	.word	0x0800b77d
 800b734:	0800b749 	.word	0x0800b749
 800b738:	0800b75f 	.word	0x0800b75f
 800b73c:	0800b77d 	.word	0x0800b77d
 800b740:	0800b77d 	.word	0x0800b77d
 800b744:	0800b77d 	.word	0x0800b77d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b748:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b74c:	3308      	adds	r3, #8
 800b74e:	2101      	movs	r1, #1
 800b750:	4618      	mov	r0, r3
 800b752:	f001 fd25 	bl	800d1a0 <RCCEx_PLL2_Config>
 800b756:	4603      	mov	r3, r0
 800b758:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b75c:	e00f      	b.n	800b77e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b75e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b762:	3328      	adds	r3, #40	@ 0x28
 800b764:	2101      	movs	r1, #1
 800b766:	4618      	mov	r0, r3
 800b768:	f001 fdcc 	bl	800d304 <RCCEx_PLL3_Config>
 800b76c:	4603      	mov	r3, r0
 800b76e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b772:	e004      	b.n	800b77e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b774:	2301      	movs	r3, #1
 800b776:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b77a:	e000      	b.n	800b77e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800b77c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b77e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b782:	2b00      	cmp	r3, #0
 800b784:	d10b      	bne.n	800b79e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b786:	4b6c      	ldr	r3, [pc, #432]	@ (800b938 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b78a:	f023 0107 	bic.w	r1, r3, #7
 800b78e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b796:	4a68      	ldr	r2, [pc, #416]	@ (800b938 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b798:	430b      	orrs	r3, r1
 800b79a:	6593      	str	r3, [r2, #88]	@ 0x58
 800b79c:	e003      	b.n	800b7a6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b79e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b7a2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b7a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ae:	f002 0320 	and.w	r3, r2, #32
 800b7b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b7bc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800b7c0:	460b      	mov	r3, r1
 800b7c2:	4313      	orrs	r3, r2
 800b7c4:	d055      	beq.n	800b872 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b7c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b7ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b7d2:	d033      	beq.n	800b83c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800b7d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b7d8:	d82c      	bhi.n	800b834 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b7da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b7de:	d02f      	beq.n	800b840 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800b7e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b7e4:	d826      	bhi.n	800b834 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b7e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b7ea:	d02b      	beq.n	800b844 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800b7ec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b7f0:	d820      	bhi.n	800b834 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b7f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b7f6:	d012      	beq.n	800b81e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800b7f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b7fc:	d81a      	bhi.n	800b834 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d022      	beq.n	800b848 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800b802:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b806:	d115      	bne.n	800b834 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b808:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b80c:	3308      	adds	r3, #8
 800b80e:	2100      	movs	r1, #0
 800b810:	4618      	mov	r0, r3
 800b812:	f001 fcc5 	bl	800d1a0 <RCCEx_PLL2_Config>
 800b816:	4603      	mov	r3, r0
 800b818:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b81c:	e015      	b.n	800b84a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b81e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b822:	3328      	adds	r3, #40	@ 0x28
 800b824:	2102      	movs	r1, #2
 800b826:	4618      	mov	r0, r3
 800b828:	f001 fd6c 	bl	800d304 <RCCEx_PLL3_Config>
 800b82c:	4603      	mov	r3, r0
 800b82e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b832:	e00a      	b.n	800b84a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b834:	2301      	movs	r3, #1
 800b836:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b83a:	e006      	b.n	800b84a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b83c:	bf00      	nop
 800b83e:	e004      	b.n	800b84a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b840:	bf00      	nop
 800b842:	e002      	b.n	800b84a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b844:	bf00      	nop
 800b846:	e000      	b.n	800b84a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b848:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b84a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d10b      	bne.n	800b86a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b852:	4b39      	ldr	r3, [pc, #228]	@ (800b938 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b856:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800b85a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b85e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b862:	4a35      	ldr	r2, [pc, #212]	@ (800b938 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b864:	430b      	orrs	r3, r1
 800b866:	6553      	str	r3, [r2, #84]	@ 0x54
 800b868:	e003      	b.n	800b872 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b86a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b86e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b872:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b87a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800b87e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b882:	2300      	movs	r3, #0
 800b884:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b888:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800b88c:	460b      	mov	r3, r1
 800b88e:	4313      	orrs	r3, r2
 800b890:	d058      	beq.n	800b944 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b892:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b896:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b89a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800b89e:	d033      	beq.n	800b908 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800b8a0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800b8a4:	d82c      	bhi.n	800b900 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b8a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b8aa:	d02f      	beq.n	800b90c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b8ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b8b0:	d826      	bhi.n	800b900 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b8b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b8b6:	d02b      	beq.n	800b910 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b8b8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b8bc:	d820      	bhi.n	800b900 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b8be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b8c2:	d012      	beq.n	800b8ea <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800b8c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b8c8:	d81a      	bhi.n	800b900 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d022      	beq.n	800b914 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b8ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b8d2:	d115      	bne.n	800b900 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b8d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8d8:	3308      	adds	r3, #8
 800b8da:	2100      	movs	r1, #0
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f001 fc5f 	bl	800d1a0 <RCCEx_PLL2_Config>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b8e8:	e015      	b.n	800b916 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b8ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8ee:	3328      	adds	r3, #40	@ 0x28
 800b8f0:	2102      	movs	r1, #2
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f001 fd06 	bl	800d304 <RCCEx_PLL3_Config>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b8fe:	e00a      	b.n	800b916 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b900:	2301      	movs	r3, #1
 800b902:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b906:	e006      	b.n	800b916 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b908:	bf00      	nop
 800b90a:	e004      	b.n	800b916 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b90c:	bf00      	nop
 800b90e:	e002      	b.n	800b916 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b910:	bf00      	nop
 800b912:	e000      	b.n	800b916 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b914:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b916:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d10e      	bne.n	800b93c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b91e:	4b06      	ldr	r3, [pc, #24]	@ (800b938 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b922:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800b926:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b92a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b92e:	4a02      	ldr	r2, [pc, #8]	@ (800b938 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b930:	430b      	orrs	r3, r1
 800b932:	6593      	str	r3, [r2, #88]	@ 0x58
 800b934:	e006      	b.n	800b944 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800b936:	bf00      	nop
 800b938:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b93c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b940:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b944:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b94c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800b950:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b954:	2300      	movs	r3, #0
 800b956:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b95a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800b95e:	460b      	mov	r3, r1
 800b960:	4313      	orrs	r3, r2
 800b962:	d055      	beq.n	800ba10 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b964:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b968:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b96c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800b970:	d033      	beq.n	800b9da <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800b972:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800b976:	d82c      	bhi.n	800b9d2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b978:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b97c:	d02f      	beq.n	800b9de <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800b97e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b982:	d826      	bhi.n	800b9d2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b984:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800b988:	d02b      	beq.n	800b9e2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800b98a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800b98e:	d820      	bhi.n	800b9d2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b990:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b994:	d012      	beq.n	800b9bc <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800b996:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b99a:	d81a      	bhi.n	800b9d2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d022      	beq.n	800b9e6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800b9a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b9a4:	d115      	bne.n	800b9d2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b9a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9aa:	3308      	adds	r3, #8
 800b9ac:	2100      	movs	r1, #0
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f001 fbf6 	bl	800d1a0 <RCCEx_PLL2_Config>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b9ba:	e015      	b.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b9bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9c0:	3328      	adds	r3, #40	@ 0x28
 800b9c2:	2102      	movs	r1, #2
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f001 fc9d 	bl	800d304 <RCCEx_PLL3_Config>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b9d0:	e00a      	b.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b9d8:	e006      	b.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b9da:	bf00      	nop
 800b9dc:	e004      	b.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b9de:	bf00      	nop
 800b9e0:	e002      	b.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b9e2:	bf00      	nop
 800b9e4:	e000      	b.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b9e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d10b      	bne.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b9f0:	4ba0      	ldr	r3, [pc, #640]	@ (800bc74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b9f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b9f4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800b9f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ba00:	4a9c      	ldr	r2, [pc, #624]	@ (800bc74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ba02:	430b      	orrs	r3, r1
 800ba04:	6593      	str	r3, [r2, #88]	@ 0x58
 800ba06:	e003      	b.n	800ba10 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ba0c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800ba10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba18:	f002 0308 	and.w	r3, r2, #8
 800ba1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ba20:	2300      	movs	r3, #0
 800ba22:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ba26:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800ba2a:	460b      	mov	r3, r1
 800ba2c:	4313      	orrs	r3, r2
 800ba2e:	d01e      	beq.n	800ba6e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800ba30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ba3c:	d10c      	bne.n	800ba58 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ba3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba42:	3328      	adds	r3, #40	@ 0x28
 800ba44:	2102      	movs	r1, #2
 800ba46:	4618      	mov	r0, r3
 800ba48:	f001 fc5c 	bl	800d304 <RCCEx_PLL3_Config>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d002      	beq.n	800ba58 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800ba52:	2301      	movs	r3, #1
 800ba54:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800ba58:	4b86      	ldr	r3, [pc, #536]	@ (800bc74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ba5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba5c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ba60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba68:	4a82      	ldr	r2, [pc, #520]	@ (800bc74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ba6a:	430b      	orrs	r3, r1
 800ba6c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ba6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba76:	f002 0310 	and.w	r3, r2, #16
 800ba7a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ba7e:	2300      	movs	r3, #0
 800ba80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ba84:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800ba88:	460b      	mov	r3, r1
 800ba8a:	4313      	orrs	r3, r2
 800ba8c:	d01e      	beq.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800ba8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ba96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ba9a:	d10c      	bne.n	800bab6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ba9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800baa0:	3328      	adds	r3, #40	@ 0x28
 800baa2:	2102      	movs	r1, #2
 800baa4:	4618      	mov	r0, r3
 800baa6:	f001 fc2d 	bl	800d304 <RCCEx_PLL3_Config>
 800baaa:	4603      	mov	r3, r0
 800baac:	2b00      	cmp	r3, #0
 800baae:	d002      	beq.n	800bab6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800bab0:	2301      	movs	r3, #1
 800bab2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bab6:	4b6f      	ldr	r3, [pc, #444]	@ (800bc74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800baba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800babe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bac6:	4a6b      	ldr	r2, [pc, #428]	@ (800bc74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bac8:	430b      	orrs	r3, r1
 800baca:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bacc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800bad8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bada:	2300      	movs	r3, #0
 800badc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800bade:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800bae2:	460b      	mov	r3, r1
 800bae4:	4313      	orrs	r3, r2
 800bae6:	d03e      	beq.n	800bb66 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800bae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800baec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800baf0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800baf4:	d022      	beq.n	800bb3c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800baf6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bafa:	d81b      	bhi.n	800bb34 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d003      	beq.n	800bb08 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800bb00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bb04:	d00b      	beq.n	800bb1e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800bb06:	e015      	b.n	800bb34 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bb08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb0c:	3308      	adds	r3, #8
 800bb0e:	2100      	movs	r1, #0
 800bb10:	4618      	mov	r0, r3
 800bb12:	f001 fb45 	bl	800d1a0 <RCCEx_PLL2_Config>
 800bb16:	4603      	mov	r3, r0
 800bb18:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bb1c:	e00f      	b.n	800bb3e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bb1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb22:	3328      	adds	r3, #40	@ 0x28
 800bb24:	2102      	movs	r1, #2
 800bb26:	4618      	mov	r0, r3
 800bb28:	f001 fbec 	bl	800d304 <RCCEx_PLL3_Config>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bb32:	e004      	b.n	800bb3e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb34:	2301      	movs	r3, #1
 800bb36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bb3a:	e000      	b.n	800bb3e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800bb3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb3e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d10b      	bne.n	800bb5e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bb46:	4b4b      	ldr	r3, [pc, #300]	@ (800bc74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bb48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb4a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800bb4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bb56:	4a47      	ldr	r2, [pc, #284]	@ (800bc74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bb58:	430b      	orrs	r3, r1
 800bb5a:	6593      	str	r3, [r2, #88]	@ 0x58
 800bb5c:	e003      	b.n	800bb66 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb5e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bb62:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bb66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb6e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800bb72:	673b      	str	r3, [r7, #112]	@ 0x70
 800bb74:	2300      	movs	r3, #0
 800bb76:	677b      	str	r3, [r7, #116]	@ 0x74
 800bb78:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800bb7c:	460b      	mov	r3, r1
 800bb7e:	4313      	orrs	r3, r2
 800bb80:	d03b      	beq.n	800bbfa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800bb82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bb8a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800bb8e:	d01f      	beq.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800bb90:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800bb94:	d818      	bhi.n	800bbc8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800bb96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bb9a:	d003      	beq.n	800bba4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800bb9c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bba0:	d007      	beq.n	800bbb2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800bba2:	e011      	b.n	800bbc8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bba4:	4b33      	ldr	r3, [pc, #204]	@ (800bc74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bba8:	4a32      	ldr	r2, [pc, #200]	@ (800bc74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bbaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bbae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800bbb0:	e00f      	b.n	800bbd2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bbb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbb6:	3328      	adds	r3, #40	@ 0x28
 800bbb8:	2101      	movs	r1, #1
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f001 fba2 	bl	800d304 <RCCEx_PLL3_Config>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800bbc6:	e004      	b.n	800bbd2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bbc8:	2301      	movs	r3, #1
 800bbca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bbce:	e000      	b.n	800bbd2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800bbd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbd2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d10b      	bne.n	800bbf2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bbda:	4b26      	ldr	r3, [pc, #152]	@ (800bc74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bbdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bbde:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800bbe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bbea:	4a22      	ldr	r2, [pc, #136]	@ (800bc74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bbec:	430b      	orrs	r3, r1
 800bbee:	6553      	str	r3, [r2, #84]	@ 0x54
 800bbf0:	e003      	b.n	800bbfa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbf2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bbf6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bbfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc02:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800bc06:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bc08:	2300      	movs	r3, #0
 800bc0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bc0c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800bc10:	460b      	mov	r3, r1
 800bc12:	4313      	orrs	r3, r2
 800bc14:	d034      	beq.n	800bc80 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800bc16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d003      	beq.n	800bc28 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800bc20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bc24:	d007      	beq.n	800bc36 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800bc26:	e011      	b.n	800bc4c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc28:	4b12      	ldr	r3, [pc, #72]	@ (800bc74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bc2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc2c:	4a11      	ldr	r2, [pc, #68]	@ (800bc74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bc2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bc32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bc34:	e00e      	b.n	800bc54 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bc36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc3a:	3308      	adds	r3, #8
 800bc3c:	2102      	movs	r1, #2
 800bc3e:	4618      	mov	r0, r3
 800bc40:	f001 faae 	bl	800d1a0 <RCCEx_PLL2_Config>
 800bc44:	4603      	mov	r3, r0
 800bc46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bc4a:	e003      	b.n	800bc54 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bc52:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d10d      	bne.n	800bc78 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800bc5c:	4b05      	ldr	r3, [pc, #20]	@ (800bc74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bc5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc60:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bc64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc6a:	4a02      	ldr	r2, [pc, #8]	@ (800bc74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bc6c:	430b      	orrs	r3, r1
 800bc6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800bc70:	e006      	b.n	800bc80 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800bc72:	bf00      	nop
 800bc74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bc7c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bc80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc88:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800bc8c:	663b      	str	r3, [r7, #96]	@ 0x60
 800bc8e:	2300      	movs	r3, #0
 800bc90:	667b      	str	r3, [r7, #100]	@ 0x64
 800bc92:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800bc96:	460b      	mov	r3, r1
 800bc98:	4313      	orrs	r3, r2
 800bc9a:	d00c      	beq.n	800bcb6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bc9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bca0:	3328      	adds	r3, #40	@ 0x28
 800bca2:	2102      	movs	r1, #2
 800bca4:	4618      	mov	r0, r3
 800bca6:	f001 fb2d 	bl	800d304 <RCCEx_PLL3_Config>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d002      	beq.n	800bcb6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bcb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcbe:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800bcc2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bcc8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800bccc:	460b      	mov	r3, r1
 800bcce:	4313      	orrs	r3, r2
 800bcd0:	d036      	beq.n	800bd40 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800bcd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcd6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bcd8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bcdc:	d018      	beq.n	800bd10 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800bcde:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bce2:	d811      	bhi.n	800bd08 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800bce4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bce8:	d014      	beq.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800bcea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bcee:	d80b      	bhi.n	800bd08 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d011      	beq.n	800bd18 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800bcf4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bcf8:	d106      	bne.n	800bd08 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bcfa:	4bb7      	ldr	r3, [pc, #732]	@ (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bcfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcfe:	4ab6      	ldr	r2, [pc, #728]	@ (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bd00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bd04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800bd06:	e008      	b.n	800bd1a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd08:	2301      	movs	r3, #1
 800bd0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bd0e:	e004      	b.n	800bd1a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800bd10:	bf00      	nop
 800bd12:	e002      	b.n	800bd1a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800bd14:	bf00      	nop
 800bd16:	e000      	b.n	800bd1a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800bd18:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd1a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d10a      	bne.n	800bd38 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bd22:	4bad      	ldr	r3, [pc, #692]	@ (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bd24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd26:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800bd2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bd30:	4aa9      	ldr	r2, [pc, #676]	@ (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bd32:	430b      	orrs	r3, r1
 800bd34:	6553      	str	r3, [r2, #84]	@ 0x54
 800bd36:	e003      	b.n	800bd40 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bd3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bd40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd48:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800bd4c:	653b      	str	r3, [r7, #80]	@ 0x50
 800bd4e:	2300      	movs	r3, #0
 800bd50:	657b      	str	r3, [r7, #84]	@ 0x54
 800bd52:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800bd56:	460b      	mov	r3, r1
 800bd58:	4313      	orrs	r3, r2
 800bd5a:	d009      	beq.n	800bd70 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bd5c:	4b9e      	ldr	r3, [pc, #632]	@ (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bd5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd60:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bd64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd6a:	4a9b      	ldr	r2, [pc, #620]	@ (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bd6c:	430b      	orrs	r3, r1
 800bd6e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bd70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd78:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800bd7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bd7e:	2300      	movs	r3, #0
 800bd80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bd82:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800bd86:	460b      	mov	r3, r1
 800bd88:	4313      	orrs	r3, r2
 800bd8a:	d009      	beq.n	800bda0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bd8c:	4b92      	ldr	r3, [pc, #584]	@ (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bd8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd90:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800bd94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bd9a:	4a8f      	ldr	r2, [pc, #572]	@ (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bd9c:	430b      	orrs	r3, r1
 800bd9e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bda0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800bdac:	643b      	str	r3, [r7, #64]	@ 0x40
 800bdae:	2300      	movs	r3, #0
 800bdb0:	647b      	str	r3, [r7, #68]	@ 0x44
 800bdb2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800bdb6:	460b      	mov	r3, r1
 800bdb8:	4313      	orrs	r3, r2
 800bdba:	d00e      	beq.n	800bdda <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bdbc:	4b86      	ldr	r3, [pc, #536]	@ (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bdbe:	691b      	ldr	r3, [r3, #16]
 800bdc0:	4a85      	ldr	r2, [pc, #532]	@ (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bdc2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bdc6:	6113      	str	r3, [r2, #16]
 800bdc8:	4b83      	ldr	r3, [pc, #524]	@ (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bdca:	6919      	ldr	r1, [r3, #16]
 800bdcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdd0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800bdd4:	4a80      	ldr	r2, [pc, #512]	@ (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bdd6:	430b      	orrs	r3, r1
 800bdd8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bdda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800bde6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bde8:	2300      	movs	r3, #0
 800bdea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bdec:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800bdf0:	460b      	mov	r3, r1
 800bdf2:	4313      	orrs	r3, r2
 800bdf4:	d009      	beq.n	800be0a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bdf6:	4b78      	ldr	r3, [pc, #480]	@ (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bdf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bdfa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800bdfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be04:	4a74      	ldr	r2, [pc, #464]	@ (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800be06:	430b      	orrs	r3, r1
 800be08:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800be0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be12:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800be16:	633b      	str	r3, [r7, #48]	@ 0x30
 800be18:	2300      	movs	r3, #0
 800be1a:	637b      	str	r3, [r7, #52]	@ 0x34
 800be1c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800be20:	460b      	mov	r3, r1
 800be22:	4313      	orrs	r3, r2
 800be24:	d00a      	beq.n	800be3c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800be26:	4b6c      	ldr	r3, [pc, #432]	@ (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800be28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be2a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800be2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be36:	4a68      	ldr	r2, [pc, #416]	@ (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800be38:	430b      	orrs	r3, r1
 800be3a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800be3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be44:	2100      	movs	r1, #0
 800be46:	62b9      	str	r1, [r7, #40]	@ 0x28
 800be48:	f003 0301 	and.w	r3, r3, #1
 800be4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800be4e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800be52:	460b      	mov	r3, r1
 800be54:	4313      	orrs	r3, r2
 800be56:	d011      	beq.n	800be7c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800be58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be5c:	3308      	adds	r3, #8
 800be5e:	2100      	movs	r1, #0
 800be60:	4618      	mov	r0, r3
 800be62:	f001 f99d 	bl	800d1a0 <RCCEx_PLL2_Config>
 800be66:	4603      	mov	r3, r0
 800be68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800be6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800be70:	2b00      	cmp	r3, #0
 800be72:	d003      	beq.n	800be7c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800be78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800be7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be84:	2100      	movs	r1, #0
 800be86:	6239      	str	r1, [r7, #32]
 800be88:	f003 0302 	and.w	r3, r3, #2
 800be8c:	627b      	str	r3, [r7, #36]	@ 0x24
 800be8e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800be92:	460b      	mov	r3, r1
 800be94:	4313      	orrs	r3, r2
 800be96:	d011      	beq.n	800bebc <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800be98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be9c:	3308      	adds	r3, #8
 800be9e:	2101      	movs	r1, #1
 800bea0:	4618      	mov	r0, r3
 800bea2:	f001 f97d 	bl	800d1a0 <RCCEx_PLL2_Config>
 800bea6:	4603      	mov	r3, r0
 800bea8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800beac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d003      	beq.n	800bebc <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800beb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800beb8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800bebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec4:	2100      	movs	r1, #0
 800bec6:	61b9      	str	r1, [r7, #24]
 800bec8:	f003 0304 	and.w	r3, r3, #4
 800becc:	61fb      	str	r3, [r7, #28]
 800bece:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bed2:	460b      	mov	r3, r1
 800bed4:	4313      	orrs	r3, r2
 800bed6:	d011      	beq.n	800befc <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bedc:	3308      	adds	r3, #8
 800bede:	2102      	movs	r1, #2
 800bee0:	4618      	mov	r0, r3
 800bee2:	f001 f95d 	bl	800d1a0 <RCCEx_PLL2_Config>
 800bee6:	4603      	mov	r3, r0
 800bee8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800beec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d003      	beq.n	800befc <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bef4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bef8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800befc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf04:	2100      	movs	r1, #0
 800bf06:	6139      	str	r1, [r7, #16]
 800bf08:	f003 0308 	and.w	r3, r3, #8
 800bf0c:	617b      	str	r3, [r7, #20]
 800bf0e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bf12:	460b      	mov	r3, r1
 800bf14:	4313      	orrs	r3, r2
 800bf16:	d011      	beq.n	800bf3c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bf18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf1c:	3328      	adds	r3, #40	@ 0x28
 800bf1e:	2100      	movs	r1, #0
 800bf20:	4618      	mov	r0, r3
 800bf22:	f001 f9ef 	bl	800d304 <RCCEx_PLL3_Config>
 800bf26:	4603      	mov	r3, r0
 800bf28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800bf2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d003      	beq.n	800bf3c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bf38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800bf3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf44:	2100      	movs	r1, #0
 800bf46:	60b9      	str	r1, [r7, #8]
 800bf48:	f003 0310 	and.w	r3, r3, #16
 800bf4c:	60fb      	str	r3, [r7, #12]
 800bf4e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bf52:	460b      	mov	r3, r1
 800bf54:	4313      	orrs	r3, r2
 800bf56:	d011      	beq.n	800bf7c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bf58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf5c:	3328      	adds	r3, #40	@ 0x28
 800bf5e:	2101      	movs	r1, #1
 800bf60:	4618      	mov	r0, r3
 800bf62:	f001 f9cf 	bl	800d304 <RCCEx_PLL3_Config>
 800bf66:	4603      	mov	r3, r0
 800bf68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800bf6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d003      	beq.n	800bf7c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bf78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800bf7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf84:	2100      	movs	r1, #0
 800bf86:	6039      	str	r1, [r7, #0]
 800bf88:	f003 0320 	and.w	r3, r3, #32
 800bf8c:	607b      	str	r3, [r7, #4]
 800bf8e:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bf92:	460b      	mov	r3, r1
 800bf94:	4313      	orrs	r3, r2
 800bf96:	d011      	beq.n	800bfbc <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bf98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf9c:	3328      	adds	r3, #40	@ 0x28
 800bf9e:	2102      	movs	r1, #2
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	f001 f9af 	bl	800d304 <RCCEx_PLL3_Config>
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800bfac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d003      	beq.n	800bfbc <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bfb8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800bfbc:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d101      	bne.n	800bfc8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	e000      	b.n	800bfca <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800bfc8:	2301      	movs	r3, #1
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bfd6:	bf00      	nop
 800bfd8:	58024400 	.word	0x58024400

0800bfdc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b090      	sub	sp, #64	@ 0x40
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bfe6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bfea:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800bfee:	430b      	orrs	r3, r1
 800bff0:	f040 8094 	bne.w	800c11c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800bff4:	4b9b      	ldr	r3, [pc, #620]	@ (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bff6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bff8:	f003 0307 	and.w	r3, r3, #7
 800bffc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800bffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c000:	2b04      	cmp	r3, #4
 800c002:	f200 8087 	bhi.w	800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c006:	a201      	add	r2, pc, #4	@ (adr r2, 800c00c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c00c:	0800c021 	.word	0x0800c021
 800c010:	0800c049 	.word	0x0800c049
 800c014:	0800c071 	.word	0x0800c071
 800c018:	0800c10d 	.word	0x0800c10d
 800c01c:	0800c099 	.word	0x0800c099
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c020:	4b90      	ldr	r3, [pc, #576]	@ (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c028:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c02c:	d108      	bne.n	800c040 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c02e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c032:	4618      	mov	r0, r3
 800c034:	f000 ff62 	bl	800cefc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c03a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c03c:	f000 bc93 	b.w	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c040:	2300      	movs	r3, #0
 800c042:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c044:	f000 bc8f 	b.w	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c048:	4b86      	ldr	r3, [pc, #536]	@ (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c050:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c054:	d108      	bne.n	800c068 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c056:	f107 0318 	add.w	r3, r7, #24
 800c05a:	4618      	mov	r0, r3
 800c05c:	f000 fca6 	bl	800c9ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c060:	69bb      	ldr	r3, [r7, #24]
 800c062:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c064:	f000 bc7f 	b.w	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c068:	2300      	movs	r3, #0
 800c06a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c06c:	f000 bc7b 	b.w	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c070:	4b7c      	ldr	r3, [pc, #496]	@ (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c078:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c07c:	d108      	bne.n	800c090 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c07e:	f107 030c 	add.w	r3, r7, #12
 800c082:	4618      	mov	r0, r3
 800c084:	f000 fde6 	bl	800cc54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c08c:	f000 bc6b 	b.w	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c090:	2300      	movs	r3, #0
 800c092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c094:	f000 bc67 	b.w	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c098:	4b72      	ldr	r3, [pc, #456]	@ (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c09a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c09c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c0a0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c0a2:	4b70      	ldr	r3, [pc, #448]	@ (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	f003 0304 	and.w	r3, r3, #4
 800c0aa:	2b04      	cmp	r3, #4
 800c0ac:	d10c      	bne.n	800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c0ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d109      	bne.n	800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c0b4:	4b6b      	ldr	r3, [pc, #428]	@ (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	08db      	lsrs	r3, r3, #3
 800c0ba:	f003 0303 	and.w	r3, r3, #3
 800c0be:	4a6a      	ldr	r2, [pc, #424]	@ (800c268 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800c0c0:	fa22 f303 	lsr.w	r3, r2, r3
 800c0c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c0c6:	e01f      	b.n	800c108 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c0c8:	4b66      	ldr	r3, [pc, #408]	@ (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c0d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c0d4:	d106      	bne.n	800c0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c0d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c0dc:	d102      	bne.n	800c0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c0de:	4b63      	ldr	r3, [pc, #396]	@ (800c26c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800c0e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c0e2:	e011      	b.n	800c108 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c0e4:	4b5f      	ldr	r3, [pc, #380]	@ (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c0ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c0f0:	d106      	bne.n	800c100 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c0f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c0f8:	d102      	bne.n	800c100 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c0fa:	4b5d      	ldr	r3, [pc, #372]	@ (800c270 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c0fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c0fe:	e003      	b.n	800c108 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c100:	2300      	movs	r3, #0
 800c102:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c104:	f000 bc2f 	b.w	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c108:	f000 bc2d 	b.w	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c10c:	4b59      	ldr	r3, [pc, #356]	@ (800c274 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c10e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c110:	f000 bc29 	b.w	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c114:	2300      	movs	r3, #0
 800c116:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c118:	f000 bc25 	b.w	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c11c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c120:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800c124:	430b      	orrs	r3, r1
 800c126:	f040 80a7 	bne.w	800c278 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c12a:	4b4e      	ldr	r3, [pc, #312]	@ (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c12c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c12e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800c132:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800c134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c136:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c13a:	d054      	beq.n	800c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800c13c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c13e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c142:	f200 808b 	bhi.w	800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c148:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c14c:	f000 8083 	beq.w	800c256 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800c150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c152:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c156:	f200 8081 	bhi.w	800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c15a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c15c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c160:	d02f      	beq.n	800c1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c164:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c168:	d878      	bhi.n	800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c16a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d004      	beq.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800c170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c172:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c176:	d012      	beq.n	800c19e <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800c178:	e070      	b.n	800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c17a:	4b3a      	ldr	r3, [pc, #232]	@ (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c182:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c186:	d107      	bne.n	800c198 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c188:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c18c:	4618      	mov	r0, r3
 800c18e:	f000 feb5 	bl	800cefc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c194:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c196:	e3e6      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c198:	2300      	movs	r3, #0
 800c19a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c19c:	e3e3      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c19e:	4b31      	ldr	r3, [pc, #196]	@ (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c1a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c1aa:	d107      	bne.n	800c1bc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c1ac:	f107 0318 	add.w	r3, r7, #24
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	f000 fbfb 	bl	800c9ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c1b6:	69bb      	ldr	r3, [r7, #24]
 800c1b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1ba:	e3d4      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c1bc:	2300      	movs	r3, #0
 800c1be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c1c0:	e3d1      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c1c2:	4b28      	ldr	r3, [pc, #160]	@ (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c1ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c1ce:	d107      	bne.n	800c1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c1d0:	f107 030c 	add.w	r3, r7, #12
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f000 fd3d 	bl	800cc54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1de:	e3c2      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c1e4:	e3bf      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c1e6:	4b1f      	ldr	r3, [pc, #124]	@ (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c1e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c1ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c1ee:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c1f0:	4b1c      	ldr	r3, [pc, #112]	@ (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	f003 0304 	and.w	r3, r3, #4
 800c1f8:	2b04      	cmp	r3, #4
 800c1fa:	d10c      	bne.n	800c216 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800c1fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d109      	bne.n	800c216 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c202:	4b18      	ldr	r3, [pc, #96]	@ (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	08db      	lsrs	r3, r3, #3
 800c208:	f003 0303 	and.w	r3, r3, #3
 800c20c:	4a16      	ldr	r2, [pc, #88]	@ (800c268 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800c20e:	fa22 f303 	lsr.w	r3, r2, r3
 800c212:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c214:	e01e      	b.n	800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c216:	4b13      	ldr	r3, [pc, #76]	@ (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c21e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c222:	d106      	bne.n	800c232 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800c224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c226:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c22a:	d102      	bne.n	800c232 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c22c:	4b0f      	ldr	r3, [pc, #60]	@ (800c26c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800c22e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c230:	e010      	b.n	800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c232:	4b0c      	ldr	r3, [pc, #48]	@ (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c23a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c23e:	d106      	bne.n	800c24e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800c240:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c242:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c246:	d102      	bne.n	800c24e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c248:	4b09      	ldr	r3, [pc, #36]	@ (800c270 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c24a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c24c:	e002      	b.n	800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c24e:	2300      	movs	r3, #0
 800c250:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c252:	e388      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c254:	e387      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c256:	4b07      	ldr	r3, [pc, #28]	@ (800c274 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c258:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c25a:	e384      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c25c:	2300      	movs	r3, #0
 800c25e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c260:	e381      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c262:	bf00      	nop
 800c264:	58024400 	.word	0x58024400
 800c268:	03d09000 	.word	0x03d09000
 800c26c:	003d0900 	.word	0x003d0900
 800c270:	016e3600 	.word	0x016e3600
 800c274:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c278:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c27c:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800c280:	430b      	orrs	r3, r1
 800c282:	f040 809c 	bne.w	800c3be <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c286:	4b9e      	ldr	r3, [pc, #632]	@ (800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c28a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800c28e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800c290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c292:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c296:	d054      	beq.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800c298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c29a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c29e:	f200 808b 	bhi.w	800c3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c2a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2a4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c2a8:	f000 8083 	beq.w	800c3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800c2ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2ae:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c2b2:	f200 8081 	bhi.w	800c3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c2b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c2bc:	d02f      	beq.n	800c31e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800c2be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c2c4:	d878      	bhi.n	800c3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c2c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d004      	beq.n	800c2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800c2cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c2d2:	d012      	beq.n	800c2fa <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800c2d4:	e070      	b.n	800c3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c2d6:	4b8a      	ldr	r3, [pc, #552]	@ (800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c2de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c2e2:	d107      	bne.n	800c2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c2e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f000 fe07 	bl	800cefc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c2ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2f2:	e338      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c2f8:	e335      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c2fa:	4b81      	ldr	r3, [pc, #516]	@ (800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c302:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c306:	d107      	bne.n	800c318 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c308:	f107 0318 	add.w	r3, r7, #24
 800c30c:	4618      	mov	r0, r3
 800c30e:	f000 fb4d 	bl	800c9ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c312:	69bb      	ldr	r3, [r7, #24]
 800c314:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c316:	e326      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c318:	2300      	movs	r3, #0
 800c31a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c31c:	e323      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c31e:	4b78      	ldr	r3, [pc, #480]	@ (800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c326:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c32a:	d107      	bne.n	800c33c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c32c:	f107 030c 	add.w	r3, r7, #12
 800c330:	4618      	mov	r0, r3
 800c332:	f000 fc8f 	bl	800cc54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c33a:	e314      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c33c:	2300      	movs	r3, #0
 800c33e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c340:	e311      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c342:	4b6f      	ldr	r3, [pc, #444]	@ (800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c346:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c34a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c34c:	4b6c      	ldr	r3, [pc, #432]	@ (800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	f003 0304 	and.w	r3, r3, #4
 800c354:	2b04      	cmp	r3, #4
 800c356:	d10c      	bne.n	800c372 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800c358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d109      	bne.n	800c372 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c35e:	4b68      	ldr	r3, [pc, #416]	@ (800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	08db      	lsrs	r3, r3, #3
 800c364:	f003 0303 	and.w	r3, r3, #3
 800c368:	4a66      	ldr	r2, [pc, #408]	@ (800c504 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800c36a:	fa22 f303 	lsr.w	r3, r2, r3
 800c36e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c370:	e01e      	b.n	800c3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c372:	4b63      	ldr	r3, [pc, #396]	@ (800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c37a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c37e:	d106      	bne.n	800c38e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800c380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c382:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c386:	d102      	bne.n	800c38e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c388:	4b5f      	ldr	r3, [pc, #380]	@ (800c508 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800c38a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c38c:	e010      	b.n	800c3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c38e:	4b5c      	ldr	r3, [pc, #368]	@ (800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c396:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c39a:	d106      	bne.n	800c3aa <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800c39c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c39e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c3a2:	d102      	bne.n	800c3aa <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c3a4:	4b59      	ldr	r3, [pc, #356]	@ (800c50c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c3a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c3a8:	e002      	b.n	800c3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c3ae:	e2da      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c3b0:	e2d9      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c3b2:	4b57      	ldr	r3, [pc, #348]	@ (800c510 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c3b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c3b6:	e2d6      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c3bc:	e2d3      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c3be:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3c2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800c3c6:	430b      	orrs	r3, r1
 800c3c8:	f040 80a7 	bne.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c3cc:	4b4c      	ldr	r3, [pc, #304]	@ (800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c3ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c3d0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800c3d4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c3d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c3dc:	d055      	beq.n	800c48a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800c3de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c3e4:	f200 8096 	bhi.w	800c514 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c3e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3ea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c3ee:	f000 8084 	beq.w	800c4fa <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800c3f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3f4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c3f8:	f200 808c 	bhi.w	800c514 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c3fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c402:	d030      	beq.n	800c466 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800c404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c406:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c40a:	f200 8083 	bhi.w	800c514 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c40e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c410:	2b00      	cmp	r3, #0
 800c412:	d004      	beq.n	800c41e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800c414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c416:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c41a:	d012      	beq.n	800c442 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800c41c:	e07a      	b.n	800c514 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c41e:	4b38      	ldr	r3, [pc, #224]	@ (800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c426:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c42a:	d107      	bne.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c42c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c430:	4618      	mov	r0, r3
 800c432:	f000 fd63 	bl	800cefc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c438:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c43a:	e294      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c43c:	2300      	movs	r3, #0
 800c43e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c440:	e291      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c442:	4b2f      	ldr	r3, [pc, #188]	@ (800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c44a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c44e:	d107      	bne.n	800c460 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c450:	f107 0318 	add.w	r3, r7, #24
 800c454:	4618      	mov	r0, r3
 800c456:	f000 faa9 	bl	800c9ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c45a:	69bb      	ldr	r3, [r7, #24]
 800c45c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c45e:	e282      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c460:	2300      	movs	r3, #0
 800c462:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c464:	e27f      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c466:	4b26      	ldr	r3, [pc, #152]	@ (800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c46e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c472:	d107      	bne.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c474:	f107 030c 	add.w	r3, r7, #12
 800c478:	4618      	mov	r0, r3
 800c47a:	f000 fbeb 	bl	800cc54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c482:	e270      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c484:	2300      	movs	r3, #0
 800c486:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c488:	e26d      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c48a:	4b1d      	ldr	r3, [pc, #116]	@ (800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c48c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c48e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c492:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c494:	4b1a      	ldr	r3, [pc, #104]	@ (800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	f003 0304 	and.w	r3, r3, #4
 800c49c:	2b04      	cmp	r3, #4
 800c49e:	d10c      	bne.n	800c4ba <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800c4a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d109      	bne.n	800c4ba <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c4a6:	4b16      	ldr	r3, [pc, #88]	@ (800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	08db      	lsrs	r3, r3, #3
 800c4ac:	f003 0303 	and.w	r3, r3, #3
 800c4b0:	4a14      	ldr	r2, [pc, #80]	@ (800c504 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800c4b2:	fa22 f303 	lsr.w	r3, r2, r3
 800c4b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c4b8:	e01e      	b.n	800c4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c4ba:	4b11      	ldr	r3, [pc, #68]	@ (800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c4c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c4c6:	d106      	bne.n	800c4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800c4c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c4ce:	d102      	bne.n	800c4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c4d0:	4b0d      	ldr	r3, [pc, #52]	@ (800c508 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800c4d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c4d4:	e010      	b.n	800c4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c4d6:	4b0a      	ldr	r3, [pc, #40]	@ (800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c4de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c4e2:	d106      	bne.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800c4e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c4ea:	d102      	bne.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c4ec:	4b07      	ldr	r3, [pc, #28]	@ (800c50c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c4ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c4f0:	e002      	b.n	800c4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c4f6:	e236      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c4f8:	e235      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c4fa:	4b05      	ldr	r3, [pc, #20]	@ (800c510 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c4fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c4fe:	e232      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c500:	58024400 	.word	0x58024400
 800c504:	03d09000 	.word	0x03d09000
 800c508:	003d0900 	.word	0x003d0900
 800c50c:	016e3600 	.word	0x016e3600
 800c510:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800c514:	2300      	movs	r3, #0
 800c516:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c518:	e225      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c51a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c51e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800c522:	430b      	orrs	r3, r1
 800c524:	f040 8085 	bne.w	800c632 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c528:	4b9c      	ldr	r3, [pc, #624]	@ (800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c52a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c52c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800c530:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800c532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c534:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c538:	d06b      	beq.n	800c612 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800c53a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c53c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c540:	d874      	bhi.n	800c62c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c544:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c548:	d056      	beq.n	800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800c54a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c54c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c550:	d86c      	bhi.n	800c62c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c554:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c558:	d03b      	beq.n	800c5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800c55a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c55c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c560:	d864      	bhi.n	800c62c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c564:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c568:	d021      	beq.n	800c5ae <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800c56a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c56c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c570:	d85c      	bhi.n	800c62c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c574:	2b00      	cmp	r3, #0
 800c576:	d004      	beq.n	800c582 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800c578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c57a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c57e:	d004      	beq.n	800c58a <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800c580:	e054      	b.n	800c62c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c582:	f7fe fb5f 	bl	800ac44 <HAL_RCC_GetPCLK1Freq>
 800c586:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c588:	e1ed      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c58a:	4b84      	ldr	r3, [pc, #528]	@ (800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c592:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c596:	d107      	bne.n	800c5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c598:	f107 0318 	add.w	r3, r7, #24
 800c59c:	4618      	mov	r0, r3
 800c59e:	f000 fa05 	bl	800c9ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c5a2:	69fb      	ldr	r3, [r7, #28]
 800c5a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5a6:	e1de      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c5ac:	e1db      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c5ae:	4b7b      	ldr	r3, [pc, #492]	@ (800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c5b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c5ba:	d107      	bne.n	800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5bc:	f107 030c 	add.w	r3, r7, #12
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	f000 fb47 	bl	800cc54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c5c6:	693b      	ldr	r3, [r7, #16]
 800c5c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5ca:	e1cc      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c5d0:	e1c9      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c5d2:	4b72      	ldr	r3, [pc, #456]	@ (800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f003 0304 	and.w	r3, r3, #4
 800c5da:	2b04      	cmp	r3, #4
 800c5dc:	d109      	bne.n	800c5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c5de:	4b6f      	ldr	r3, [pc, #444]	@ (800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	08db      	lsrs	r3, r3, #3
 800c5e4:	f003 0303 	and.w	r3, r3, #3
 800c5e8:	4a6d      	ldr	r2, [pc, #436]	@ (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c5ea:	fa22 f303 	lsr.w	r3, r2, r3
 800c5ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5f0:	e1b9      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c5f6:	e1b6      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c5f8:	4b68      	ldr	r3, [pc, #416]	@ (800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c600:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c604:	d102      	bne.n	800c60c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800c606:	4b67      	ldr	r3, [pc, #412]	@ (800c7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c608:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c60a:	e1ac      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c60c:	2300      	movs	r3, #0
 800c60e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c610:	e1a9      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c612:	4b62      	ldr	r3, [pc, #392]	@ (800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c61a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c61e:	d102      	bne.n	800c626 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800c620:	4b61      	ldr	r3, [pc, #388]	@ (800c7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c622:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c624:	e19f      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c626:	2300      	movs	r3, #0
 800c628:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c62a:	e19c      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c62c:	2300      	movs	r3, #0
 800c62e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c630:	e199      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c632:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c636:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800c63a:	430b      	orrs	r3, r1
 800c63c:	d173      	bne.n	800c726 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c63e:	4b57      	ldr	r3, [pc, #348]	@ (800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c642:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c646:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c64a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c64e:	d02f      	beq.n	800c6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800c650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c652:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c656:	d863      	bhi.n	800c720 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800c658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d004      	beq.n	800c668 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800c65e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c660:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c664:	d012      	beq.n	800c68c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800c666:	e05b      	b.n	800c720 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c668:	4b4c      	ldr	r3, [pc, #304]	@ (800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c670:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c674:	d107      	bne.n	800c686 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c676:	f107 0318 	add.w	r3, r7, #24
 800c67a:	4618      	mov	r0, r3
 800c67c:	f000 f996 	bl	800c9ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c680:	69bb      	ldr	r3, [r7, #24]
 800c682:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c684:	e16f      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c686:	2300      	movs	r3, #0
 800c688:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c68a:	e16c      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c68c:	4b43      	ldr	r3, [pc, #268]	@ (800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c694:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c698:	d107      	bne.n	800c6aa <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c69a:	f107 030c 	add.w	r3, r7, #12
 800c69e:	4618      	mov	r0, r3
 800c6a0:	f000 fad8 	bl	800cc54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c6a4:	697b      	ldr	r3, [r7, #20]
 800c6a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6a8:	e15d      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c6ae:	e15a      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c6b0:	4b3a      	ldr	r3, [pc, #232]	@ (800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c6b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c6b4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c6b8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c6ba:	4b38      	ldr	r3, [pc, #224]	@ (800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	f003 0304 	and.w	r3, r3, #4
 800c6c2:	2b04      	cmp	r3, #4
 800c6c4:	d10c      	bne.n	800c6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800c6c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d109      	bne.n	800c6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c6cc:	4b33      	ldr	r3, [pc, #204]	@ (800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	08db      	lsrs	r3, r3, #3
 800c6d2:	f003 0303 	and.w	r3, r3, #3
 800c6d6:	4a32      	ldr	r2, [pc, #200]	@ (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c6d8:	fa22 f303 	lsr.w	r3, r2, r3
 800c6dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c6de:	e01e      	b.n	800c71e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c6e0:	4b2e      	ldr	r3, [pc, #184]	@ (800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c6e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c6ec:	d106      	bne.n	800c6fc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800c6ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c6f4:	d102      	bne.n	800c6fc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c6f6:	4b2b      	ldr	r3, [pc, #172]	@ (800c7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c6f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c6fa:	e010      	b.n	800c71e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c6fc:	4b27      	ldr	r3, [pc, #156]	@ (800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c704:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c708:	d106      	bne.n	800c718 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800c70a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c70c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c710:	d102      	bne.n	800c718 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c712:	4b25      	ldr	r3, [pc, #148]	@ (800c7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c714:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c716:	e002      	b.n	800c71e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c718:	2300      	movs	r3, #0
 800c71a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c71c:	e123      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c71e:	e122      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c720:	2300      	movs	r3, #0
 800c722:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c724:	e11f      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c726:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c72a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800c72e:	430b      	orrs	r3, r1
 800c730:	d13c      	bne.n	800c7ac <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c732:	4b1a      	ldr	r3, [pc, #104]	@ (800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c736:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c73a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c73c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d004      	beq.n	800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800c742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c744:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c748:	d012      	beq.n	800c770 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800c74a:	e023      	b.n	800c794 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c74c:	4b13      	ldr	r3, [pc, #76]	@ (800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c754:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c758:	d107      	bne.n	800c76a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c75a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c75e:	4618      	mov	r0, r3
 800c760:	f000 fbcc 	bl	800cefc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c766:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c768:	e0fd      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c76a:	2300      	movs	r3, #0
 800c76c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c76e:	e0fa      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c770:	4b0a      	ldr	r3, [pc, #40]	@ (800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c778:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c77c:	d107      	bne.n	800c78e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c77e:	f107 0318 	add.w	r3, r7, #24
 800c782:	4618      	mov	r0, r3
 800c784:	f000 f912 	bl	800c9ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c788:	6a3b      	ldr	r3, [r7, #32]
 800c78a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c78c:	e0eb      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c78e:	2300      	movs	r3, #0
 800c790:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c792:	e0e8      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c794:	2300      	movs	r3, #0
 800c796:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c798:	e0e5      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c79a:	bf00      	nop
 800c79c:	58024400 	.word	0x58024400
 800c7a0:	03d09000 	.word	0x03d09000
 800c7a4:	003d0900 	.word	0x003d0900
 800c7a8:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c7ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7b0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800c7b4:	430b      	orrs	r3, r1
 800c7b6:	f040 8085 	bne.w	800c8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c7ba:	4b6d      	ldr	r3, [pc, #436]	@ (800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c7bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c7be:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800c7c2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c7c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c7ca:	d06b      	beq.n	800c8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800c7cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c7d2:	d874      	bhi.n	800c8be <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c7d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c7da:	d056      	beq.n	800c88a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800c7dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c7e2:	d86c      	bhi.n	800c8be <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c7e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c7ea:	d03b      	beq.n	800c864 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800c7ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c7f2:	d864      	bhi.n	800c8be <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c7f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c7fa:	d021      	beq.n	800c840 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800c7fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c802:	d85c      	bhi.n	800c8be <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c806:	2b00      	cmp	r3, #0
 800c808:	d004      	beq.n	800c814 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800c80a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c80c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c810:	d004      	beq.n	800c81c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800c812:	e054      	b.n	800c8be <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c814:	f000 f8b4 	bl	800c980 <HAL_RCCEx_GetD3PCLK1Freq>
 800c818:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c81a:	e0a4      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c81c:	4b54      	ldr	r3, [pc, #336]	@ (800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c824:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c828:	d107      	bne.n	800c83a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c82a:	f107 0318 	add.w	r3, r7, #24
 800c82e:	4618      	mov	r0, r3
 800c830:	f000 f8bc 	bl	800c9ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c834:	69fb      	ldr	r3, [r7, #28]
 800c836:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c838:	e095      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c83a:	2300      	movs	r3, #0
 800c83c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c83e:	e092      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c840:	4b4b      	ldr	r3, [pc, #300]	@ (800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c848:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c84c:	d107      	bne.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c84e:	f107 030c 	add.w	r3, r7, #12
 800c852:	4618      	mov	r0, r3
 800c854:	f000 f9fe 	bl	800cc54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c858:	693b      	ldr	r3, [r7, #16]
 800c85a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c85c:	e083      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c85e:	2300      	movs	r3, #0
 800c860:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c862:	e080      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c864:	4b42      	ldr	r3, [pc, #264]	@ (800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	f003 0304 	and.w	r3, r3, #4
 800c86c:	2b04      	cmp	r3, #4
 800c86e:	d109      	bne.n	800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c870:	4b3f      	ldr	r3, [pc, #252]	@ (800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	08db      	lsrs	r3, r3, #3
 800c876:	f003 0303 	and.w	r3, r3, #3
 800c87a:	4a3e      	ldr	r2, [pc, #248]	@ (800c974 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800c87c:	fa22 f303 	lsr.w	r3, r2, r3
 800c880:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c882:	e070      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c884:	2300      	movs	r3, #0
 800c886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c888:	e06d      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c88a:	4b39      	ldr	r3, [pc, #228]	@ (800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c892:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c896:	d102      	bne.n	800c89e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800c898:	4b37      	ldr	r3, [pc, #220]	@ (800c978 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c89a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c89c:	e063      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c89e:	2300      	movs	r3, #0
 800c8a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c8a2:	e060      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c8a4:	4b32      	ldr	r3, [pc, #200]	@ (800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c8ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c8b0:	d102      	bne.n	800c8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800c8b2:	4b32      	ldr	r3, [pc, #200]	@ (800c97c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c8b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8b6:	e056      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c8bc:	e053      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c8be:	2300      	movs	r3, #0
 800c8c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c8c2:	e050      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c8c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8c8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800c8cc:	430b      	orrs	r3, r1
 800c8ce:	d148      	bne.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c8d0:	4b27      	ldr	r3, [pc, #156]	@ (800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c8d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c8d4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c8d8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c8da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c8e0:	d02a      	beq.n	800c938 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800c8e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c8e8:	d838      	bhi.n	800c95c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800c8ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d004      	beq.n	800c8fa <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800c8f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c8f6:	d00d      	beq.n	800c914 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800c8f8:	e030      	b.n	800c95c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c8fa:	4b1d      	ldr	r3, [pc, #116]	@ (800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c902:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c906:	d102      	bne.n	800c90e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800c908:	4b1c      	ldr	r3, [pc, #112]	@ (800c97c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c90a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c90c:	e02b      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c90e:	2300      	movs	r3, #0
 800c910:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c912:	e028      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c914:	4b16      	ldr	r3, [pc, #88]	@ (800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c91c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c920:	d107      	bne.n	800c932 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c922:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c926:	4618      	mov	r0, r3
 800c928:	f000 fae8 	bl	800cefc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c92c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c92e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c930:	e019      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c932:	2300      	movs	r3, #0
 800c934:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c936:	e016      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c938:	4b0d      	ldr	r3, [pc, #52]	@ (800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c940:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c944:	d107      	bne.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c946:	f107 0318 	add.w	r3, r7, #24
 800c94a:	4618      	mov	r0, r3
 800c94c:	f000 f82e 	bl	800c9ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c950:	69fb      	ldr	r3, [r7, #28]
 800c952:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c954:	e007      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c956:	2300      	movs	r3, #0
 800c958:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c95a:	e004      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c95c:	2300      	movs	r3, #0
 800c95e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c960:	e001      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800c962:	2300      	movs	r3, #0
 800c964:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800c966:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c968:	4618      	mov	r0, r3
 800c96a:	3740      	adds	r7, #64	@ 0x40
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}
 800c970:	58024400 	.word	0x58024400
 800c974:	03d09000 	.word	0x03d09000
 800c978:	003d0900 	.word	0x003d0900
 800c97c:	016e3600 	.word	0x016e3600

0800c980 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c984:	f7fe f92e 	bl	800abe4 <HAL_RCC_GetHCLKFreq>
 800c988:	4602      	mov	r2, r0
 800c98a:	4b06      	ldr	r3, [pc, #24]	@ (800c9a4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c98c:	6a1b      	ldr	r3, [r3, #32]
 800c98e:	091b      	lsrs	r3, r3, #4
 800c990:	f003 0307 	and.w	r3, r3, #7
 800c994:	4904      	ldr	r1, [pc, #16]	@ (800c9a8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c996:	5ccb      	ldrb	r3, [r1, r3]
 800c998:	f003 031f 	and.w	r3, r3, #31
 800c99c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	bd80      	pop	{r7, pc}
 800c9a4:	58024400 	.word	0x58024400
 800c9a8:	08014870 	.word	0x08014870

0800c9ac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c9ac:	b480      	push	{r7}
 800c9ae:	b089      	sub	sp, #36	@ 0x24
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c9b4:	4ba1      	ldr	r3, [pc, #644]	@ (800cc3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9b8:	f003 0303 	and.w	r3, r3, #3
 800c9bc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c9be:	4b9f      	ldr	r3, [pc, #636]	@ (800cc3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9c2:	0b1b      	lsrs	r3, r3, #12
 800c9c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c9c8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c9ca:	4b9c      	ldr	r3, [pc, #624]	@ (800cc3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9ce:	091b      	lsrs	r3, r3, #4
 800c9d0:	f003 0301 	and.w	r3, r3, #1
 800c9d4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c9d6:	4b99      	ldr	r3, [pc, #612]	@ (800cc3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c9da:	08db      	lsrs	r3, r3, #3
 800c9dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c9e0:	693a      	ldr	r2, [r7, #16]
 800c9e2:	fb02 f303 	mul.w	r3, r2, r3
 800c9e6:	ee07 3a90 	vmov	s15, r3
 800c9ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c9f2:	697b      	ldr	r3, [r7, #20]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	f000 8111 	beq.w	800cc1c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c9fa:	69bb      	ldr	r3, [r7, #24]
 800c9fc:	2b02      	cmp	r3, #2
 800c9fe:	f000 8083 	beq.w	800cb08 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ca02:	69bb      	ldr	r3, [r7, #24]
 800ca04:	2b02      	cmp	r3, #2
 800ca06:	f200 80a1 	bhi.w	800cb4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ca0a:	69bb      	ldr	r3, [r7, #24]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d003      	beq.n	800ca18 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ca10:	69bb      	ldr	r3, [r7, #24]
 800ca12:	2b01      	cmp	r3, #1
 800ca14:	d056      	beq.n	800cac4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ca16:	e099      	b.n	800cb4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca18:	4b88      	ldr	r3, [pc, #544]	@ (800cc3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	f003 0320 	and.w	r3, r3, #32
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d02d      	beq.n	800ca80 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca24:	4b85      	ldr	r3, [pc, #532]	@ (800cc3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	08db      	lsrs	r3, r3, #3
 800ca2a:	f003 0303 	and.w	r3, r3, #3
 800ca2e:	4a84      	ldr	r2, [pc, #528]	@ (800cc40 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ca30:	fa22 f303 	lsr.w	r3, r2, r3
 800ca34:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca36:	68bb      	ldr	r3, [r7, #8]
 800ca38:	ee07 3a90 	vmov	s15, r3
 800ca3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca40:	697b      	ldr	r3, [r7, #20]
 800ca42:	ee07 3a90 	vmov	s15, r3
 800ca46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca4e:	4b7b      	ldr	r3, [pc, #492]	@ (800cc3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca56:	ee07 3a90 	vmov	s15, r3
 800ca5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca5e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca62:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800cc44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ca66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ca72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca7a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ca7e:	e087      	b.n	800cb90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca80:	697b      	ldr	r3, [r7, #20]
 800ca82:	ee07 3a90 	vmov	s15, r3
 800ca86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca8a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800cc48 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ca8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca92:	4b6a      	ldr	r3, [pc, #424]	@ (800cc3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca9a:	ee07 3a90 	vmov	s15, r3
 800ca9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800caa2:	ed97 6a03 	vldr	s12, [r7, #12]
 800caa6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800cc44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800caaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800caae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cab2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800caba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cabe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cac2:	e065      	b.n	800cb90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cac4:	697b      	ldr	r3, [r7, #20]
 800cac6:	ee07 3a90 	vmov	s15, r3
 800caca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cace:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800cc4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cad6:	4b59      	ldr	r3, [pc, #356]	@ (800cc3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cade:	ee07 3a90 	vmov	s15, r3
 800cae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cae6:	ed97 6a03 	vldr	s12, [r7, #12]
 800caea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800cc44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800caee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800caf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800caf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cafa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cafe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb06:	e043      	b.n	800cb90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	ee07 3a90 	vmov	s15, r3
 800cb0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb12:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800cc50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800cb16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb1a:	4b48      	ldr	r3, [pc, #288]	@ (800cc3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb22:	ee07 3a90 	vmov	s15, r3
 800cb26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb2a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb2e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800cc44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cb32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cb3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb4a:	e021      	b.n	800cb90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cb4c:	697b      	ldr	r3, [r7, #20]
 800cb4e:	ee07 3a90 	vmov	s15, r3
 800cb52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb56:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800cc4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cb5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb5e:	4b37      	ldr	r3, [pc, #220]	@ (800cc3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb66:	ee07 3a90 	vmov	s15, r3
 800cb6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb72:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800cc44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cb76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cb82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb8e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800cb90:	4b2a      	ldr	r3, [pc, #168]	@ (800cc3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb94:	0a5b      	lsrs	r3, r3, #9
 800cb96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb9a:	ee07 3a90 	vmov	s15, r3
 800cb9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cba2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cba6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cbaa:	edd7 6a07 	vldr	s13, [r7, #28]
 800cbae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cbb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbb6:	ee17 2a90 	vmov	r2, s15
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800cbbe:	4b1f      	ldr	r3, [pc, #124]	@ (800cc3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cbc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbc2:	0c1b      	lsrs	r3, r3, #16
 800cbc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cbc8:	ee07 3a90 	vmov	s15, r3
 800cbcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbd0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cbd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cbd8:	edd7 6a07 	vldr	s13, [r7, #28]
 800cbdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cbe0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbe4:	ee17 2a90 	vmov	r2, s15
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800cbec:	4b13      	ldr	r3, [pc, #76]	@ (800cc3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cbee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbf0:	0e1b      	lsrs	r3, r3, #24
 800cbf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cbf6:	ee07 3a90 	vmov	s15, r3
 800cbfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbfe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cc02:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc06:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc12:	ee17 2a90 	vmov	r2, s15
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cc1a:	e008      	b.n	800cc2e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2200      	movs	r2, #0
 800cc20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	2200      	movs	r2, #0
 800cc26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	609a      	str	r2, [r3, #8]
}
 800cc2e:	bf00      	nop
 800cc30:	3724      	adds	r7, #36	@ 0x24
 800cc32:	46bd      	mov	sp, r7
 800cc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc38:	4770      	bx	lr
 800cc3a:	bf00      	nop
 800cc3c:	58024400 	.word	0x58024400
 800cc40:	03d09000 	.word	0x03d09000
 800cc44:	46000000 	.word	0x46000000
 800cc48:	4c742400 	.word	0x4c742400
 800cc4c:	4a742400 	.word	0x4a742400
 800cc50:	4bb71b00 	.word	0x4bb71b00

0800cc54 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800cc54:	b480      	push	{r7}
 800cc56:	b089      	sub	sp, #36	@ 0x24
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cc5c:	4ba1      	ldr	r3, [pc, #644]	@ (800cee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc60:	f003 0303 	and.w	r3, r3, #3
 800cc64:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800cc66:	4b9f      	ldr	r3, [pc, #636]	@ (800cee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc6a:	0d1b      	lsrs	r3, r3, #20
 800cc6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cc70:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cc72:	4b9c      	ldr	r3, [pc, #624]	@ (800cee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc76:	0a1b      	lsrs	r3, r3, #8
 800cc78:	f003 0301 	and.w	r3, r3, #1
 800cc7c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800cc7e:	4b99      	ldr	r3, [pc, #612]	@ (800cee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc82:	08db      	lsrs	r3, r3, #3
 800cc84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cc88:	693a      	ldr	r2, [r7, #16]
 800cc8a:	fb02 f303 	mul.w	r3, r2, r3
 800cc8e:	ee07 3a90 	vmov	s15, r3
 800cc92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800cc9a:	697b      	ldr	r3, [r7, #20]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	f000 8111 	beq.w	800cec4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800cca2:	69bb      	ldr	r3, [r7, #24]
 800cca4:	2b02      	cmp	r3, #2
 800cca6:	f000 8083 	beq.w	800cdb0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ccaa:	69bb      	ldr	r3, [r7, #24]
 800ccac:	2b02      	cmp	r3, #2
 800ccae:	f200 80a1 	bhi.w	800cdf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ccb2:	69bb      	ldr	r3, [r7, #24]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d003      	beq.n	800ccc0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ccb8:	69bb      	ldr	r3, [r7, #24]
 800ccba:	2b01      	cmp	r3, #1
 800ccbc:	d056      	beq.n	800cd6c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ccbe:	e099      	b.n	800cdf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ccc0:	4b88      	ldr	r3, [pc, #544]	@ (800cee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	f003 0320 	and.w	r3, r3, #32
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d02d      	beq.n	800cd28 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cccc:	4b85      	ldr	r3, [pc, #532]	@ (800cee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	08db      	lsrs	r3, r3, #3
 800ccd2:	f003 0303 	and.w	r3, r3, #3
 800ccd6:	4a84      	ldr	r2, [pc, #528]	@ (800cee8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ccd8:	fa22 f303 	lsr.w	r3, r2, r3
 800ccdc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	ee07 3a90 	vmov	s15, r3
 800cce4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cce8:	697b      	ldr	r3, [r7, #20]
 800ccea:	ee07 3a90 	vmov	s15, r3
 800ccee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccf6:	4b7b      	ldr	r3, [pc, #492]	@ (800cee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ccfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccfe:	ee07 3a90 	vmov	s15, r3
 800cd02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd06:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd0a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ceec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cd1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd22:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cd26:	e087      	b.n	800ce38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cd28:	697b      	ldr	r3, [r7, #20]
 800cd2a:	ee07 3a90 	vmov	s15, r3
 800cd2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd32:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800cef0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800cd36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd3a:	4b6a      	ldr	r3, [pc, #424]	@ (800cee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd42:	ee07 3a90 	vmov	s15, r3
 800cd46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd4a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd4e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ceec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cd5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd6a:	e065      	b.n	800ce38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cd6c:	697b      	ldr	r3, [r7, #20]
 800cd6e:	ee07 3a90 	vmov	s15, r3
 800cd72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd76:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800cef4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cd7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd7e:	4b59      	ldr	r3, [pc, #356]	@ (800cee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd86:	ee07 3a90 	vmov	s15, r3
 800cd8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd8e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd92:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ceec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cda2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cda6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cdae:	e043      	b.n	800ce38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cdb0:	697b      	ldr	r3, [r7, #20]
 800cdb2:	ee07 3a90 	vmov	s15, r3
 800cdb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800cef8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800cdbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cdc2:	4b48      	ldr	r3, [pc, #288]	@ (800cee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cdc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdca:	ee07 3a90 	vmov	s15, r3
 800cdce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdd2:	ed97 6a03 	vldr	s12, [r7, #12]
 800cdd6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ceec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cdda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cdde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cde2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cde6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cdea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cdf2:	e021      	b.n	800ce38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cdf4:	697b      	ldr	r3, [r7, #20]
 800cdf6:	ee07 3a90 	vmov	s15, r3
 800cdfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdfe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800cef4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ce02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce06:	4b37      	ldr	r3, [pc, #220]	@ (800cee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce0e:	ee07 3a90 	vmov	s15, r3
 800ce12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce16:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce1a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ceec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ce1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ce2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce36:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ce38:	4b2a      	ldr	r3, [pc, #168]	@ (800cee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce3c:	0a5b      	lsrs	r3, r3, #9
 800ce3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ce42:	ee07 3a90 	vmov	s15, r3
 800ce46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ce4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce52:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce5e:	ee17 2a90 	vmov	r2, s15
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ce66:	4b1f      	ldr	r3, [pc, #124]	@ (800cee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce6a:	0c1b      	lsrs	r3, r3, #16
 800ce6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ce70:	ee07 3a90 	vmov	s15, r3
 800ce74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce78:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ce7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce80:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce8c:	ee17 2a90 	vmov	r2, s15
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ce94:	4b13      	ldr	r3, [pc, #76]	@ (800cee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce98:	0e1b      	lsrs	r3, r3, #24
 800ce9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ce9e:	ee07 3a90 	vmov	s15, r3
 800cea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cea6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ceaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ceae:	edd7 6a07 	vldr	s13, [r7, #28]
 800ceb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ceb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ceba:	ee17 2a90 	vmov	r2, s15
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cec2:	e008      	b.n	800ced6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2200      	movs	r2, #0
 800cec8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2200      	movs	r2, #0
 800cece:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2200      	movs	r2, #0
 800ced4:	609a      	str	r2, [r3, #8]
}
 800ced6:	bf00      	nop
 800ced8:	3724      	adds	r7, #36	@ 0x24
 800ceda:	46bd      	mov	sp, r7
 800cedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee0:	4770      	bx	lr
 800cee2:	bf00      	nop
 800cee4:	58024400 	.word	0x58024400
 800cee8:	03d09000 	.word	0x03d09000
 800ceec:	46000000 	.word	0x46000000
 800cef0:	4c742400 	.word	0x4c742400
 800cef4:	4a742400 	.word	0x4a742400
 800cef8:	4bb71b00 	.word	0x4bb71b00

0800cefc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800cefc:	b480      	push	{r7}
 800cefe:	b089      	sub	sp, #36	@ 0x24
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cf04:	4ba0      	ldr	r3, [pc, #640]	@ (800d188 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf08:	f003 0303 	and.w	r3, r3, #3
 800cf0c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800cf0e:	4b9e      	ldr	r3, [pc, #632]	@ (800d188 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf12:	091b      	lsrs	r3, r3, #4
 800cf14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cf18:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800cf1a:	4b9b      	ldr	r3, [pc, #620]	@ (800d188 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf1e:	f003 0301 	and.w	r3, r3, #1
 800cf22:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800cf24:	4b98      	ldr	r3, [pc, #608]	@ (800d188 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf28:	08db      	lsrs	r3, r3, #3
 800cf2a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cf2e:	693a      	ldr	r2, [r7, #16]
 800cf30:	fb02 f303 	mul.w	r3, r2, r3
 800cf34:	ee07 3a90 	vmov	s15, r3
 800cf38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf3c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	f000 8111 	beq.w	800d16a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800cf48:	69bb      	ldr	r3, [r7, #24]
 800cf4a:	2b02      	cmp	r3, #2
 800cf4c:	f000 8083 	beq.w	800d056 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800cf50:	69bb      	ldr	r3, [r7, #24]
 800cf52:	2b02      	cmp	r3, #2
 800cf54:	f200 80a1 	bhi.w	800d09a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800cf58:	69bb      	ldr	r3, [r7, #24]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d003      	beq.n	800cf66 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800cf5e:	69bb      	ldr	r3, [r7, #24]
 800cf60:	2b01      	cmp	r3, #1
 800cf62:	d056      	beq.n	800d012 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800cf64:	e099      	b.n	800d09a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cf66:	4b88      	ldr	r3, [pc, #544]	@ (800d188 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	f003 0320 	and.w	r3, r3, #32
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d02d      	beq.n	800cfce <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cf72:	4b85      	ldr	r3, [pc, #532]	@ (800d188 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	08db      	lsrs	r3, r3, #3
 800cf78:	f003 0303 	and.w	r3, r3, #3
 800cf7c:	4a83      	ldr	r2, [pc, #524]	@ (800d18c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800cf7e:	fa22 f303 	lsr.w	r3, r2, r3
 800cf82:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cf84:	68bb      	ldr	r3, [r7, #8]
 800cf86:	ee07 3a90 	vmov	s15, r3
 800cf8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf8e:	697b      	ldr	r3, [r7, #20]
 800cf90:	ee07 3a90 	vmov	s15, r3
 800cf94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf9c:	4b7a      	ldr	r3, [pc, #488]	@ (800d188 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cfa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfa4:	ee07 3a90 	vmov	s15, r3
 800cfa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfac:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfb0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800d190 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cfb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfbc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cfc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfc8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cfcc:	e087      	b.n	800d0de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cfce:	697b      	ldr	r3, [r7, #20]
 800cfd0:	ee07 3a90 	vmov	s15, r3
 800cfd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfd8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800d194 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cfdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfe0:	4b69      	ldr	r3, [pc, #420]	@ (800d188 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cfe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cfe4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfe8:	ee07 3a90 	vmov	s15, r3
 800cfec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cff0:	ed97 6a03 	vldr	s12, [r7, #12]
 800cff4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800d190 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cff8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cffc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d000:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d004:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d008:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d00c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d010:	e065      	b.n	800d0de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d012:	697b      	ldr	r3, [r7, #20]
 800d014:	ee07 3a90 	vmov	s15, r3
 800d018:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d01c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800d198 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d020:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d024:	4b58      	ldr	r3, [pc, #352]	@ (800d188 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d02c:	ee07 3a90 	vmov	s15, r3
 800d030:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d034:	ed97 6a03 	vldr	s12, [r7, #12]
 800d038:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800d190 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d03c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d040:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d044:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d048:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d04c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d050:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d054:	e043      	b.n	800d0de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d056:	697b      	ldr	r3, [r7, #20]
 800d058:	ee07 3a90 	vmov	s15, r3
 800d05c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d060:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800d19c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d064:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d068:	4b47      	ldr	r3, [pc, #284]	@ (800d188 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d06a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d06c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d070:	ee07 3a90 	vmov	s15, r3
 800d074:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d078:	ed97 6a03 	vldr	s12, [r7, #12]
 800d07c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800d190 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d080:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d084:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d088:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d08c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d090:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d094:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d098:	e021      	b.n	800d0de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d09a:	697b      	ldr	r3, [r7, #20]
 800d09c:	ee07 3a90 	vmov	s15, r3
 800d0a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0a4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800d194 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d0a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0ac:	4b36      	ldr	r3, [pc, #216]	@ (800d188 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d0ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d0b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0b4:	ee07 3a90 	vmov	s15, r3
 800d0b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0bc:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0c0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800d190 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d0c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d0d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d0dc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d0de:	4b2a      	ldr	r3, [pc, #168]	@ (800d188 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d0e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d0e2:	0a5b      	lsrs	r3, r3, #9
 800d0e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d0e8:	ee07 3a90 	vmov	s15, r3
 800d0ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d0f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d0f8:	edd7 6a07 	vldr	s13, [r7, #28]
 800d0fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d100:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d104:	ee17 2a90 	vmov	r2, s15
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d10c:	4b1e      	ldr	r3, [pc, #120]	@ (800d188 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d10e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d110:	0c1b      	lsrs	r3, r3, #16
 800d112:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d116:	ee07 3a90 	vmov	s15, r3
 800d11a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d11e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d122:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d126:	edd7 6a07 	vldr	s13, [r7, #28]
 800d12a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d12e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d132:	ee17 2a90 	vmov	r2, s15
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d13a:	4b13      	ldr	r3, [pc, #76]	@ (800d188 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d13c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d13e:	0e1b      	lsrs	r3, r3, #24
 800d140:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d144:	ee07 3a90 	vmov	s15, r3
 800d148:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d14c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d150:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d154:	edd7 6a07 	vldr	s13, [r7, #28]
 800d158:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d15c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d160:	ee17 2a90 	vmov	r2, s15
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d168:	e008      	b.n	800d17c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2200      	movs	r2, #0
 800d16e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2200      	movs	r2, #0
 800d174:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2200      	movs	r2, #0
 800d17a:	609a      	str	r2, [r3, #8]
}
 800d17c:	bf00      	nop
 800d17e:	3724      	adds	r7, #36	@ 0x24
 800d180:	46bd      	mov	sp, r7
 800d182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d186:	4770      	bx	lr
 800d188:	58024400 	.word	0x58024400
 800d18c:	03d09000 	.word	0x03d09000
 800d190:	46000000 	.word	0x46000000
 800d194:	4c742400 	.word	0x4c742400
 800d198:	4a742400 	.word	0x4a742400
 800d19c:	4bb71b00 	.word	0x4bb71b00

0800d1a0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b084      	sub	sp, #16
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]
 800d1a8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d1ae:	4b53      	ldr	r3, [pc, #332]	@ (800d2fc <RCCEx_PLL2_Config+0x15c>)
 800d1b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1b2:	f003 0303 	and.w	r3, r3, #3
 800d1b6:	2b03      	cmp	r3, #3
 800d1b8:	d101      	bne.n	800d1be <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	e099      	b.n	800d2f2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d1be:	4b4f      	ldr	r3, [pc, #316]	@ (800d2fc <RCCEx_PLL2_Config+0x15c>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	4a4e      	ldr	r2, [pc, #312]	@ (800d2fc <RCCEx_PLL2_Config+0x15c>)
 800d1c4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d1c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d1ca:	f7f6 fc0d 	bl	80039e8 <HAL_GetTick>
 800d1ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d1d0:	e008      	b.n	800d1e4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d1d2:	f7f6 fc09 	bl	80039e8 <HAL_GetTick>
 800d1d6:	4602      	mov	r2, r0
 800d1d8:	68bb      	ldr	r3, [r7, #8]
 800d1da:	1ad3      	subs	r3, r2, r3
 800d1dc:	2b02      	cmp	r3, #2
 800d1de:	d901      	bls.n	800d1e4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d1e0:	2303      	movs	r3, #3
 800d1e2:	e086      	b.n	800d2f2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d1e4:	4b45      	ldr	r3, [pc, #276]	@ (800d2fc <RCCEx_PLL2_Config+0x15c>)
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d1f0      	bne.n	800d1d2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d1f0:	4b42      	ldr	r3, [pc, #264]	@ (800d2fc <RCCEx_PLL2_Config+0x15c>)
 800d1f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1f4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	031b      	lsls	r3, r3, #12
 800d1fe:	493f      	ldr	r1, [pc, #252]	@ (800d2fc <RCCEx_PLL2_Config+0x15c>)
 800d200:	4313      	orrs	r3, r2
 800d202:	628b      	str	r3, [r1, #40]	@ 0x28
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	685b      	ldr	r3, [r3, #4]
 800d208:	3b01      	subs	r3, #1
 800d20a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	689b      	ldr	r3, [r3, #8]
 800d212:	3b01      	subs	r3, #1
 800d214:	025b      	lsls	r3, r3, #9
 800d216:	b29b      	uxth	r3, r3
 800d218:	431a      	orrs	r2, r3
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	68db      	ldr	r3, [r3, #12]
 800d21e:	3b01      	subs	r3, #1
 800d220:	041b      	lsls	r3, r3, #16
 800d222:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d226:	431a      	orrs	r2, r3
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	691b      	ldr	r3, [r3, #16]
 800d22c:	3b01      	subs	r3, #1
 800d22e:	061b      	lsls	r3, r3, #24
 800d230:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d234:	4931      	ldr	r1, [pc, #196]	@ (800d2fc <RCCEx_PLL2_Config+0x15c>)
 800d236:	4313      	orrs	r3, r2
 800d238:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d23a:	4b30      	ldr	r3, [pc, #192]	@ (800d2fc <RCCEx_PLL2_Config+0x15c>)
 800d23c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d23e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	695b      	ldr	r3, [r3, #20]
 800d246:	492d      	ldr	r1, [pc, #180]	@ (800d2fc <RCCEx_PLL2_Config+0x15c>)
 800d248:	4313      	orrs	r3, r2
 800d24a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d24c:	4b2b      	ldr	r3, [pc, #172]	@ (800d2fc <RCCEx_PLL2_Config+0x15c>)
 800d24e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d250:	f023 0220 	bic.w	r2, r3, #32
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	699b      	ldr	r3, [r3, #24]
 800d258:	4928      	ldr	r1, [pc, #160]	@ (800d2fc <RCCEx_PLL2_Config+0x15c>)
 800d25a:	4313      	orrs	r3, r2
 800d25c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d25e:	4b27      	ldr	r3, [pc, #156]	@ (800d2fc <RCCEx_PLL2_Config+0x15c>)
 800d260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d262:	4a26      	ldr	r2, [pc, #152]	@ (800d2fc <RCCEx_PLL2_Config+0x15c>)
 800d264:	f023 0310 	bic.w	r3, r3, #16
 800d268:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d26a:	4b24      	ldr	r3, [pc, #144]	@ (800d2fc <RCCEx_PLL2_Config+0x15c>)
 800d26c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d26e:	4b24      	ldr	r3, [pc, #144]	@ (800d300 <RCCEx_PLL2_Config+0x160>)
 800d270:	4013      	ands	r3, r2
 800d272:	687a      	ldr	r2, [r7, #4]
 800d274:	69d2      	ldr	r2, [r2, #28]
 800d276:	00d2      	lsls	r2, r2, #3
 800d278:	4920      	ldr	r1, [pc, #128]	@ (800d2fc <RCCEx_PLL2_Config+0x15c>)
 800d27a:	4313      	orrs	r3, r2
 800d27c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d27e:	4b1f      	ldr	r3, [pc, #124]	@ (800d2fc <RCCEx_PLL2_Config+0x15c>)
 800d280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d282:	4a1e      	ldr	r2, [pc, #120]	@ (800d2fc <RCCEx_PLL2_Config+0x15c>)
 800d284:	f043 0310 	orr.w	r3, r3, #16
 800d288:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d106      	bne.n	800d29e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d290:	4b1a      	ldr	r3, [pc, #104]	@ (800d2fc <RCCEx_PLL2_Config+0x15c>)
 800d292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d294:	4a19      	ldr	r2, [pc, #100]	@ (800d2fc <RCCEx_PLL2_Config+0x15c>)
 800d296:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d29a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d29c:	e00f      	b.n	800d2be <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	2b01      	cmp	r3, #1
 800d2a2:	d106      	bne.n	800d2b2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d2a4:	4b15      	ldr	r3, [pc, #84]	@ (800d2fc <RCCEx_PLL2_Config+0x15c>)
 800d2a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2a8:	4a14      	ldr	r2, [pc, #80]	@ (800d2fc <RCCEx_PLL2_Config+0x15c>)
 800d2aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d2ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d2b0:	e005      	b.n	800d2be <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d2b2:	4b12      	ldr	r3, [pc, #72]	@ (800d2fc <RCCEx_PLL2_Config+0x15c>)
 800d2b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2b6:	4a11      	ldr	r2, [pc, #68]	@ (800d2fc <RCCEx_PLL2_Config+0x15c>)
 800d2b8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d2bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d2be:	4b0f      	ldr	r3, [pc, #60]	@ (800d2fc <RCCEx_PLL2_Config+0x15c>)
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	4a0e      	ldr	r2, [pc, #56]	@ (800d2fc <RCCEx_PLL2_Config+0x15c>)
 800d2c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d2c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d2ca:	f7f6 fb8d 	bl	80039e8 <HAL_GetTick>
 800d2ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d2d0:	e008      	b.n	800d2e4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d2d2:	f7f6 fb89 	bl	80039e8 <HAL_GetTick>
 800d2d6:	4602      	mov	r2, r0
 800d2d8:	68bb      	ldr	r3, [r7, #8]
 800d2da:	1ad3      	subs	r3, r2, r3
 800d2dc:	2b02      	cmp	r3, #2
 800d2de:	d901      	bls.n	800d2e4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d2e0:	2303      	movs	r3, #3
 800d2e2:	e006      	b.n	800d2f2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d2e4:	4b05      	ldr	r3, [pc, #20]	@ (800d2fc <RCCEx_PLL2_Config+0x15c>)
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d0f0      	beq.n	800d2d2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d2f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	3710      	adds	r7, #16
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}
 800d2fa:	bf00      	nop
 800d2fc:	58024400 	.word	0x58024400
 800d300:	ffff0007 	.word	0xffff0007

0800d304 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b084      	sub	sp, #16
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
 800d30c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d30e:	2300      	movs	r3, #0
 800d310:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d312:	4b53      	ldr	r3, [pc, #332]	@ (800d460 <RCCEx_PLL3_Config+0x15c>)
 800d314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d316:	f003 0303 	and.w	r3, r3, #3
 800d31a:	2b03      	cmp	r3, #3
 800d31c:	d101      	bne.n	800d322 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d31e:	2301      	movs	r3, #1
 800d320:	e099      	b.n	800d456 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d322:	4b4f      	ldr	r3, [pc, #316]	@ (800d460 <RCCEx_PLL3_Config+0x15c>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	4a4e      	ldr	r2, [pc, #312]	@ (800d460 <RCCEx_PLL3_Config+0x15c>)
 800d328:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d32c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d32e:	f7f6 fb5b 	bl	80039e8 <HAL_GetTick>
 800d332:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d334:	e008      	b.n	800d348 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d336:	f7f6 fb57 	bl	80039e8 <HAL_GetTick>
 800d33a:	4602      	mov	r2, r0
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	1ad3      	subs	r3, r2, r3
 800d340:	2b02      	cmp	r3, #2
 800d342:	d901      	bls.n	800d348 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d344:	2303      	movs	r3, #3
 800d346:	e086      	b.n	800d456 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d348:	4b45      	ldr	r3, [pc, #276]	@ (800d460 <RCCEx_PLL3_Config+0x15c>)
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d350:	2b00      	cmp	r3, #0
 800d352:	d1f0      	bne.n	800d336 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d354:	4b42      	ldr	r3, [pc, #264]	@ (800d460 <RCCEx_PLL3_Config+0x15c>)
 800d356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d358:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	051b      	lsls	r3, r3, #20
 800d362:	493f      	ldr	r1, [pc, #252]	@ (800d460 <RCCEx_PLL3_Config+0x15c>)
 800d364:	4313      	orrs	r3, r2
 800d366:	628b      	str	r3, [r1, #40]	@ 0x28
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	685b      	ldr	r3, [r3, #4]
 800d36c:	3b01      	subs	r3, #1
 800d36e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	689b      	ldr	r3, [r3, #8]
 800d376:	3b01      	subs	r3, #1
 800d378:	025b      	lsls	r3, r3, #9
 800d37a:	b29b      	uxth	r3, r3
 800d37c:	431a      	orrs	r2, r3
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	68db      	ldr	r3, [r3, #12]
 800d382:	3b01      	subs	r3, #1
 800d384:	041b      	lsls	r3, r3, #16
 800d386:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d38a:	431a      	orrs	r2, r3
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	691b      	ldr	r3, [r3, #16]
 800d390:	3b01      	subs	r3, #1
 800d392:	061b      	lsls	r3, r3, #24
 800d394:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d398:	4931      	ldr	r1, [pc, #196]	@ (800d460 <RCCEx_PLL3_Config+0x15c>)
 800d39a:	4313      	orrs	r3, r2
 800d39c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d39e:	4b30      	ldr	r3, [pc, #192]	@ (800d460 <RCCEx_PLL3_Config+0x15c>)
 800d3a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3a2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	695b      	ldr	r3, [r3, #20]
 800d3aa:	492d      	ldr	r1, [pc, #180]	@ (800d460 <RCCEx_PLL3_Config+0x15c>)
 800d3ac:	4313      	orrs	r3, r2
 800d3ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d3b0:	4b2b      	ldr	r3, [pc, #172]	@ (800d460 <RCCEx_PLL3_Config+0x15c>)
 800d3b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3b4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	699b      	ldr	r3, [r3, #24]
 800d3bc:	4928      	ldr	r1, [pc, #160]	@ (800d460 <RCCEx_PLL3_Config+0x15c>)
 800d3be:	4313      	orrs	r3, r2
 800d3c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d3c2:	4b27      	ldr	r3, [pc, #156]	@ (800d460 <RCCEx_PLL3_Config+0x15c>)
 800d3c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3c6:	4a26      	ldr	r2, [pc, #152]	@ (800d460 <RCCEx_PLL3_Config+0x15c>)
 800d3c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d3cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d3ce:	4b24      	ldr	r3, [pc, #144]	@ (800d460 <RCCEx_PLL3_Config+0x15c>)
 800d3d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d3d2:	4b24      	ldr	r3, [pc, #144]	@ (800d464 <RCCEx_PLL3_Config+0x160>)
 800d3d4:	4013      	ands	r3, r2
 800d3d6:	687a      	ldr	r2, [r7, #4]
 800d3d8:	69d2      	ldr	r2, [r2, #28]
 800d3da:	00d2      	lsls	r2, r2, #3
 800d3dc:	4920      	ldr	r1, [pc, #128]	@ (800d460 <RCCEx_PLL3_Config+0x15c>)
 800d3de:	4313      	orrs	r3, r2
 800d3e0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d3e2:	4b1f      	ldr	r3, [pc, #124]	@ (800d460 <RCCEx_PLL3_Config+0x15c>)
 800d3e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3e6:	4a1e      	ldr	r2, [pc, #120]	@ (800d460 <RCCEx_PLL3_Config+0x15c>)
 800d3e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d3ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d3ee:	683b      	ldr	r3, [r7, #0]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d106      	bne.n	800d402 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d3f4:	4b1a      	ldr	r3, [pc, #104]	@ (800d460 <RCCEx_PLL3_Config+0x15c>)
 800d3f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3f8:	4a19      	ldr	r2, [pc, #100]	@ (800d460 <RCCEx_PLL3_Config+0x15c>)
 800d3fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800d3fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d400:	e00f      	b.n	800d422 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	2b01      	cmp	r3, #1
 800d406:	d106      	bne.n	800d416 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d408:	4b15      	ldr	r3, [pc, #84]	@ (800d460 <RCCEx_PLL3_Config+0x15c>)
 800d40a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d40c:	4a14      	ldr	r2, [pc, #80]	@ (800d460 <RCCEx_PLL3_Config+0x15c>)
 800d40e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800d412:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d414:	e005      	b.n	800d422 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d416:	4b12      	ldr	r3, [pc, #72]	@ (800d460 <RCCEx_PLL3_Config+0x15c>)
 800d418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d41a:	4a11      	ldr	r2, [pc, #68]	@ (800d460 <RCCEx_PLL3_Config+0x15c>)
 800d41c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d420:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d422:	4b0f      	ldr	r3, [pc, #60]	@ (800d460 <RCCEx_PLL3_Config+0x15c>)
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	4a0e      	ldr	r2, [pc, #56]	@ (800d460 <RCCEx_PLL3_Config+0x15c>)
 800d428:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d42c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d42e:	f7f6 fadb 	bl	80039e8 <HAL_GetTick>
 800d432:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d434:	e008      	b.n	800d448 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d436:	f7f6 fad7 	bl	80039e8 <HAL_GetTick>
 800d43a:	4602      	mov	r2, r0
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	1ad3      	subs	r3, r2, r3
 800d440:	2b02      	cmp	r3, #2
 800d442:	d901      	bls.n	800d448 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d444:	2303      	movs	r3, #3
 800d446:	e006      	b.n	800d456 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d448:	4b05      	ldr	r3, [pc, #20]	@ (800d460 <RCCEx_PLL3_Config+0x15c>)
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d450:	2b00      	cmp	r3, #0
 800d452:	d0f0      	beq.n	800d436 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d454:	7bfb      	ldrb	r3, [r7, #15]
}
 800d456:	4618      	mov	r0, r3
 800d458:	3710      	adds	r7, #16
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}
 800d45e:	bf00      	nop
 800d460:	58024400 	.word	0x58024400
 800d464:	ffff0007 	.word	0xffff0007

0800d468 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b08a      	sub	sp, #40	@ 0x28
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d101      	bne.n	800d47a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d476:	2301      	movs	r3, #1
 800d478:	e075      	b.n	800d566 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d480:	b2db      	uxtb	r3, r3
 800d482:	2b00      	cmp	r3, #0
 800d484:	d105      	bne.n	800d492 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	2200      	movs	r2, #0
 800d48a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d48c:	6878      	ldr	r0, [r7, #4]
 800d48e:	f7f5 fe79 	bl	8003184 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	2204      	movs	r2, #4
 800d496:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d49a:	6878      	ldr	r0, [r7, #4]
 800d49c:	f000 f868 	bl	800d570 <HAL_SD_InitCard>
 800d4a0:	4603      	mov	r3, r0
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d001      	beq.n	800d4aa <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d4a6:	2301      	movs	r3, #1
 800d4a8:	e05d      	b.n	800d566 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800d4aa:	f107 0308 	add.w	r3, r7, #8
 800d4ae:	4619      	mov	r1, r3
 800d4b0:	6878      	ldr	r0, [r7, #4]
 800d4b2:	f000 fdaf 	bl	800e014 <HAL_SD_GetCardStatus>
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d001      	beq.n	800d4c0 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800d4bc:	2301      	movs	r3, #1
 800d4be:	e052      	b.n	800d566 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800d4c0:	7e3b      	ldrb	r3, [r7, #24]
 800d4c2:	b2db      	uxtb	r3, r3
 800d4c4:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800d4c6:	7e7b      	ldrb	r3, [r7, #25]
 800d4c8:	b2db      	uxtb	r3, r3
 800d4ca:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4d0:	2b01      	cmp	r3, #1
 800d4d2:	d10a      	bne.n	800d4ea <HAL_SD_Init+0x82>
 800d4d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d102      	bne.n	800d4e0 <HAL_SD_Init+0x78>
 800d4da:	6a3b      	ldr	r3, [r7, #32]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d004      	beq.n	800d4ea <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d4e6:	659a      	str	r2, [r3, #88]	@ 0x58
 800d4e8:	e00b      	b.n	800d502 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4ee:	2b01      	cmp	r3, #1
 800d4f0:	d104      	bne.n	800d4fc <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d4f8:	659a      	str	r2, [r3, #88]	@ 0x58
 800d4fa:	e002      	b.n	800d502 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2200      	movs	r2, #0
 800d500:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	68db      	ldr	r3, [r3, #12]
 800d506:	4619      	mov	r1, r3
 800d508:	6878      	ldr	r0, [r7, #4]
 800d50a:	f000 fe6d 	bl	800e1e8 <HAL_SD_ConfigWideBusOperation>
 800d50e:	4603      	mov	r3, r0
 800d510:	2b00      	cmp	r3, #0
 800d512:	d001      	beq.n	800d518 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800d514:	2301      	movs	r3, #1
 800d516:	e026      	b.n	800d566 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800d518:	f7f6 fa66 	bl	80039e8 <HAL_GetTick>
 800d51c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d51e:	e011      	b.n	800d544 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d520:	f7f6 fa62 	bl	80039e8 <HAL_GetTick>
 800d524:	4602      	mov	r2, r0
 800d526:	69fb      	ldr	r3, [r7, #28]
 800d528:	1ad3      	subs	r3, r2, r3
 800d52a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d52e:	d109      	bne.n	800d544 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d536:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2201      	movs	r2, #1
 800d53c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800d540:	2303      	movs	r3, #3
 800d542:	e010      	b.n	800d566 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d544:	6878      	ldr	r0, [r7, #4]
 800d546:	f000 ff61 	bl	800e40c <HAL_SD_GetCardState>
 800d54a:	4603      	mov	r3, r0
 800d54c:	2b04      	cmp	r3, #4
 800d54e:	d1e7      	bne.n	800d520 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2200      	movs	r2, #0
 800d554:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2200      	movs	r2, #0
 800d55a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2201      	movs	r2, #1
 800d560:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800d564:	2300      	movs	r3, #0
}
 800d566:	4618      	mov	r0, r3
 800d568:	3728      	adds	r7, #40	@ 0x28
 800d56a:	46bd      	mov	sp, r7
 800d56c:	bd80      	pop	{r7, pc}
	...

0800d570 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d570:	b590      	push	{r4, r7, lr}
 800d572:	b08d      	sub	sp, #52	@ 0x34
 800d574:	af02      	add	r7, sp, #8
 800d576:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d578:	2300      	movs	r3, #0
 800d57a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d57c:	2300      	movs	r3, #0
 800d57e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800d580:	2300      	movs	r3, #0
 800d582:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d584:	2300      	movs	r3, #0
 800d586:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d588:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800d58c:	f04f 0100 	mov.w	r1, #0
 800d590:	f7fe fd24 	bl	800bfdc <HAL_RCCEx_GetPeriphCLKFreq>
 800d594:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800d596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d109      	bne.n	800d5b0 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2201      	movs	r2, #1
 800d5a0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800d5aa:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800d5ac:	2301      	movs	r3, #1
 800d5ae:	e070      	b.n	800d692 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800d5b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5b2:	0a1b      	lsrs	r3, r3, #8
 800d5b4:	4a39      	ldr	r2, [pc, #228]	@ (800d69c <HAL_SD_InitCard+0x12c>)
 800d5b6:	fba2 2303 	umull	r2, r3, r2, r3
 800d5ba:	091b      	lsrs	r3, r3, #4
 800d5bc:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681c      	ldr	r4, [r3, #0]
 800d5c2:	466a      	mov	r2, sp
 800d5c4:	f107 0318 	add.w	r3, r7, #24
 800d5c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d5cc:	e882 0003 	stmia.w	r2, {r0, r1}
 800d5d0:	f107 030c 	add.w	r3, r7, #12
 800d5d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d5d6:	4620      	mov	r0, r4
 800d5d8:	f005 f9a4 	bl	8012924 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f005 f9e7 	bl	80129b4 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800d5e6:	69fb      	ldr	r3, [r7, #28]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d005      	beq.n	800d5f8 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800d5ec:	69fb      	ldr	r3, [r7, #28]
 800d5ee:	005b      	lsls	r3, r3, #1
 800d5f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d5f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d5f6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800d5f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d007      	beq.n	800d60e <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800d5fe:	4a28      	ldr	r2, [pc, #160]	@ (800d6a0 <HAL_SD_InitCard+0x130>)
 800d600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d602:	fbb2 f3f3 	udiv	r3, r2, r3
 800d606:	3301      	adds	r3, #1
 800d608:	4618      	mov	r0, r3
 800d60a:	f7f6 f9f9 	bl	8003a00 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d60e:	6878      	ldr	r0, [r7, #4]
 800d610:	f000 ffea 	bl	800e5e8 <SD_PowerON>
 800d614:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d616:	6a3b      	ldr	r3, [r7, #32]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d00b      	beq.n	800d634 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	2201      	movs	r2, #1
 800d620:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d628:	6a3b      	ldr	r3, [r7, #32]
 800d62a:	431a      	orrs	r2, r3
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800d630:	2301      	movs	r3, #1
 800d632:	e02e      	b.n	800d692 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d634:	6878      	ldr	r0, [r7, #4]
 800d636:	f000 ff09 	bl	800e44c <SD_InitCard>
 800d63a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d63c:	6a3b      	ldr	r3, [r7, #32]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d00b      	beq.n	800d65a <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	2201      	movs	r2, #1
 800d646:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d64e:	6a3b      	ldr	r3, [r7, #32]
 800d650:	431a      	orrs	r2, r3
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800d656:	2301      	movs	r3, #1
 800d658:	e01b      	b.n	800d692 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d662:	4618      	mov	r0, r3
 800d664:	f005 fa3c 	bl	8012ae0 <SDMMC_CmdBlockLength>
 800d668:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d66a:	6a3b      	ldr	r3, [r7, #32]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d00f      	beq.n	800d690 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	4a0b      	ldr	r2, [pc, #44]	@ (800d6a4 <HAL_SD_InitCard+0x134>)
 800d676:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d67c:	6a3b      	ldr	r3, [r7, #32]
 800d67e:	431a      	orrs	r2, r3
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2201      	movs	r2, #1
 800d688:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800d68c:	2301      	movs	r3, #1
 800d68e:	e000      	b.n	800d692 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800d690:	2300      	movs	r3, #0
}
 800d692:	4618      	mov	r0, r3
 800d694:	372c      	adds	r7, #44	@ 0x2c
 800d696:	46bd      	mov	sp, r7
 800d698:	bd90      	pop	{r4, r7, pc}
 800d69a:	bf00      	nop
 800d69c:	014f8b59 	.word	0x014f8b59
 800d6a0:	00012110 	.word	0x00012110
 800d6a4:	1fe00fff 	.word	0x1fe00fff

0800d6a8 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b08c      	sub	sp, #48	@ 0x30
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	60f8      	str	r0, [r7, #12]
 800d6b0:	60b9      	str	r1, [r7, #8]
 800d6b2:	607a      	str	r2, [r7, #4]
 800d6b4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800d6ba:	68bb      	ldr	r3, [r7, #8]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d107      	bne.n	800d6d0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d6c4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800d6cc:	2301      	movs	r3, #1
 800d6ce:	e08d      	b.n	800d7ec <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d6d6:	b2db      	uxtb	r3, r3
 800d6d8:	2b01      	cmp	r3, #1
 800d6da:	f040 8086 	bne.w	800d7ea <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d6e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	441a      	add	r2, r3
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d6ee:	429a      	cmp	r2, r3
 800d6f0:	d907      	bls.n	800d702 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d6f6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800d6fe:	2301      	movs	r3, #1
 800d700:	e074      	b.n	800d7ec <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	2203      	movs	r2, #3
 800d706:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	2200      	movs	r2, #0
 800d710:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	68ba      	ldr	r2, [r7, #8]
 800d716:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d718:	683b      	ldr	r3, [r7, #0]
 800d71a:	025a      	lsls	r2, r3, #9
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d724:	2b01      	cmp	r3, #1
 800d726:	d002      	beq.n	800d72e <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800d728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d72a:	025b      	lsls	r3, r3, #9
 800d72c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d72e:	f04f 33ff 	mov.w	r3, #4294967295
 800d732:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d734:	683b      	ldr	r3, [r7, #0]
 800d736:	025b      	lsls	r3, r3, #9
 800d738:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d73a:	2390      	movs	r3, #144	@ 0x90
 800d73c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d73e:	2302      	movs	r3, #2
 800d740:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d742:	2300      	movs	r3, #0
 800d744:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d746:	2300      	movs	r3, #0
 800d748:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	f107 0210 	add.w	r2, r7, #16
 800d752:	4611      	mov	r1, r2
 800d754:	4618      	mov	r0, r3
 800d756:	f005 f997 	bl	8012a88 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	68da      	ldr	r2, [r3, #12]
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d768:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	68ba      	ldr	r2, [r7, #8]
 800d770:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	2201      	movs	r2, #1
 800d778:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800d77a:	683b      	ldr	r3, [r7, #0]
 800d77c:	2b01      	cmp	r3, #1
 800d77e:	d90a      	bls.n	800d796 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	2282      	movs	r2, #130	@ 0x82
 800d784:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d78c:	4618      	mov	r0, r3
 800d78e:	f005 f9ed 	bl	8012b6c <SDMMC_CmdReadMultiBlock>
 800d792:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800d794:	e009      	b.n	800d7aa <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	2281      	movs	r2, #129	@ 0x81
 800d79a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	f005 f9bf 	bl	8012b26 <SDMMC_CmdReadSingleBlock>
 800d7a8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d7aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d012      	beq.n	800d7d6 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	4a0f      	ldr	r2, [pc, #60]	@ (800d7f4 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800d7b6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d7bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7be:	431a      	orrs	r2, r3
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	2201      	movs	r2, #1
 800d7c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800d7d2:	2301      	movs	r3, #1
 800d7d4:	e00a      	b.n	800d7ec <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800d7e4:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	e000      	b.n	800d7ec <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d7ea:	2302      	movs	r3, #2
  }
}
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	3730      	adds	r7, #48	@ 0x30
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	bd80      	pop	{r7, pc}
 800d7f4:	1fe00fff 	.word	0x1fe00fff

0800d7f8 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b08c      	sub	sp, #48	@ 0x30
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	60f8      	str	r0, [r7, #12]
 800d800:	60b9      	str	r1, [r7, #8]
 800d802:	607a      	str	r2, [r7, #4]
 800d804:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800d80a:	68bb      	ldr	r3, [r7, #8]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d107      	bne.n	800d820 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d814:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800d81c:	2301      	movs	r3, #1
 800d81e:	e08d      	b.n	800d93c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d826:	b2db      	uxtb	r3, r3
 800d828:	2b01      	cmp	r3, #1
 800d82a:	f040 8086 	bne.w	800d93a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	2200      	movs	r2, #0
 800d832:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d834:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d836:	683b      	ldr	r3, [r7, #0]
 800d838:	441a      	add	r2, r3
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d83e:	429a      	cmp	r2, r3
 800d840:	d907      	bls.n	800d852 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d846:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800d84e:	2301      	movs	r3, #1
 800d850:	e074      	b.n	800d93c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	2203      	movs	r2, #3
 800d856:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	2200      	movs	r2, #0
 800d860:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	68ba      	ldr	r2, [r7, #8]
 800d866:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	025a      	lsls	r2, r3, #9
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d874:	2b01      	cmp	r3, #1
 800d876:	d002      	beq.n	800d87e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800d878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d87a:	025b      	lsls	r3, r3, #9
 800d87c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d87e:	f04f 33ff 	mov.w	r3, #4294967295
 800d882:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	025b      	lsls	r3, r3, #9
 800d888:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d88a:	2390      	movs	r3, #144	@ 0x90
 800d88c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d88e:	2300      	movs	r3, #0
 800d890:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d892:	2300      	movs	r3, #0
 800d894:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d896:	2300      	movs	r3, #0
 800d898:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	f107 0210 	add.w	r2, r7, #16
 800d8a2:	4611      	mov	r1, r2
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	f005 f8ef 	bl	8012a88 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	68da      	ldr	r2, [r3, #12]
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d8b8:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	68ba      	ldr	r2, [r7, #8]
 800d8c0:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	2201      	movs	r2, #1
 800d8c8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	2b01      	cmp	r3, #1
 800d8ce:	d90a      	bls.n	800d8e6 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	22a0      	movs	r2, #160	@ 0xa0
 800d8d4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d8dc:	4618      	mov	r0, r3
 800d8de:	f005 f98b 	bl	8012bf8 <SDMMC_CmdWriteMultiBlock>
 800d8e2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800d8e4:	e009      	b.n	800d8fa <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	2290      	movs	r2, #144	@ 0x90
 800d8ea:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	f005 f95d 	bl	8012bb2 <SDMMC_CmdWriteSingleBlock>
 800d8f8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d8fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d012      	beq.n	800d926 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	4a0f      	ldr	r2, [pc, #60]	@ (800d944 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800d906:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d90c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d90e:	431a      	orrs	r2, r3
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	2201      	movs	r2, #1
 800d918:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	2200      	movs	r2, #0
 800d920:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800d922:	2301      	movs	r3, #1
 800d924:	e00a      	b.n	800d93c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 800d934:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800d936:	2300      	movs	r3, #0
 800d938:	e000      	b.n	800d93c <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d93a:	2302      	movs	r3, #2
  }
}
 800d93c:	4618      	mov	r0, r3
 800d93e:	3730      	adds	r7, #48	@ 0x30
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}
 800d944:	1fe00fff 	.word	0x1fe00fff

0800d948 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b084      	sub	sp, #16
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d954:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d95c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d960:	2b00      	cmp	r3, #0
 800d962:	d008      	beq.n	800d976 <HAL_SD_IRQHandler+0x2e>
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	f003 0308 	and.w	r3, r3, #8
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d003      	beq.n	800d976 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d96e:	6878      	ldr	r0, [r7, #4]
 800d970:	f001 f926 	bl	800ebc0 <SD_Read_IT>
 800d974:	e19a      	b.n	800dcac <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d97c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d980:	2b00      	cmp	r3, #0
 800d982:	f000 80ac 	beq.w	800dade <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d98e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681a      	ldr	r2, [r3, #0]
 800d99a:	4b59      	ldr	r3, [pc, #356]	@ (800db00 <HAL_SD_IRQHandler+0x1b8>)
 800d99c:	400b      	ands	r3, r1
 800d99e:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800d9ae:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	68da      	ldr	r2, [r3, #12]
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d9be:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	f003 0308 	and.w	r3, r3, #8
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d038      	beq.n	800da3c <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	f003 0302 	and.w	r3, r3, #2
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d104      	bne.n	800d9de <HAL_SD_IRQHandler+0x96>
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	f003 0320 	and.w	r3, r3, #32
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d011      	beq.n	800da02 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	f005 f92c 	bl	8012c40 <SDMMC_CmdStopTransfer>
 800d9e8:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d9ea:	68bb      	ldr	r3, [r7, #8]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d008      	beq.n	800da02 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d9f4:	68bb      	ldr	r3, [r7, #8]
 800d9f6:	431a      	orrs	r2, r3
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d9fc:	6878      	ldr	r0, [r7, #4]
 800d9fe:	f000 f95b 	bl	800dcb8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	4a3f      	ldr	r2, [pc, #252]	@ (800db04 <HAL_SD_IRQHandler+0x1bc>)
 800da08:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	2201      	movs	r2, #1
 800da0e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	2200      	movs	r2, #0
 800da16:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	f003 0301 	and.w	r3, r3, #1
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d104      	bne.n	800da2c <HAL_SD_IRQHandler+0xe4>
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	f003 0302 	and.w	r3, r3, #2
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d003      	beq.n	800da34 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800da2c:	6878      	ldr	r0, [r7, #4]
 800da2e:	f005 fdd7 	bl	80135e0 <HAL_SD_RxCpltCallback>
 800da32:	e13b      	b.n	800dcac <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800da34:	6878      	ldr	r0, [r7, #4]
 800da36:	f005 fdc9 	bl	80135cc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800da3a:	e137      	b.n	800dcac <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800da42:	2b00      	cmp	r3, #0
 800da44:	f000 8132 	beq.w	800dcac <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	2200      	movs	r2, #0
 800da4e:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	2200      	movs	r2, #0
 800da56:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	2200      	movs	r2, #0
 800da5e:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	f003 0302 	and.w	r3, r3, #2
 800da66:	2b00      	cmp	r3, #0
 800da68:	d104      	bne.n	800da74 <HAL_SD_IRQHandler+0x12c>
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	f003 0320 	and.w	r3, r3, #32
 800da70:	2b00      	cmp	r3, #0
 800da72:	d011      	beq.n	800da98 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	4618      	mov	r0, r3
 800da7a:	f005 f8e1 	bl	8012c40 <SDMMC_CmdStopTransfer>
 800da7e:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800da80:	68bb      	ldr	r3, [r7, #8]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d008      	beq.n	800da98 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800da8a:	68bb      	ldr	r3, [r7, #8]
 800da8c:	431a      	orrs	r2, r3
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 800da92:	6878      	ldr	r0, [r7, #4]
 800da94:	f000 f910 	bl	800dcb8 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2201      	movs	r2, #1
 800da9c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	2200      	movs	r2, #0
 800daa4:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	f003 0310 	and.w	r3, r3, #16
 800daac:	2b00      	cmp	r3, #0
 800daae:	d104      	bne.n	800daba <HAL_SD_IRQHandler+0x172>
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	f003 0320 	and.w	r3, r3, #32
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d002      	beq.n	800dac0 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800daba:	6878      	ldr	r0, [r7, #4]
 800dabc:	f005 fd86 	bl	80135cc <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	f003 0301 	and.w	r3, r3, #1
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d105      	bne.n	800dad6 <HAL_SD_IRQHandler+0x18e>
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	f003 0302 	and.w	r3, r3, #2
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	f000 80eb 	beq.w	800dcac <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800dad6:	6878      	ldr	r0, [r7, #4]
 800dad8:	f005 fd82 	bl	80135e0 <HAL_SD_RxCpltCallback>
}
 800dadc:	e0e6      	b.n	800dcac <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dae4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d00d      	beq.n	800db08 <HAL_SD_IRQHandler+0x1c0>
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	f003 0308 	and.w	r3, r3, #8
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d008      	beq.n	800db08 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800daf6:	6878      	ldr	r0, [r7, #4]
 800daf8:	f001 f8a8 	bl	800ec4c <SD_Write_IT>
 800dafc:	e0d6      	b.n	800dcac <HAL_SD_IRQHandler+0x364>
 800dafe:	bf00      	nop
 800db00:	ffff3ec5 	.word	0xffff3ec5
 800db04:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db0e:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800db12:	2b00      	cmp	r3, #0
 800db14:	f000 809d 	beq.w	800dc52 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db1e:	f003 0302 	and.w	r3, r3, #2
 800db22:	2b00      	cmp	r3, #0
 800db24:	d005      	beq.n	800db32 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db2a:	f043 0202 	orr.w	r2, r3, #2
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db38:	f003 0308 	and.w	r3, r3, #8
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d005      	beq.n	800db4c <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db44:	f043 0208 	orr.w	r2, r3, #8
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db52:	f003 0320 	and.w	r3, r3, #32
 800db56:	2b00      	cmp	r3, #0
 800db58:	d005      	beq.n	800db66 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db5e:	f043 0220 	orr.w	r2, r3, #32
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db6c:	f003 0310 	and.w	r3, r3, #16
 800db70:	2b00      	cmp	r3, #0
 800db72:	d005      	beq.n	800db80 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db78:	f043 0210 	orr.w	r2, r3, #16
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	4a4b      	ldr	r2, [pc, #300]	@ (800dcb4 <HAL_SD_IRQHandler+0x36c>)
 800db86:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800db96:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	68da      	ldr	r2, [r3, #12]
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800dba6:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800dbb6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	68da      	ldr	r2, [r3, #12]
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800dbc6:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	4618      	mov	r0, r3
 800dbce:	f005 f837 	bl	8012c40 <SDMMC_CmdStopTransfer>
 800dbd2:	4602      	mov	r2, r0
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbd8:	431a      	orrs	r2, r3
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	68da      	ldr	r2, [r3, #12]
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800dbec:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800dbf6:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	f003 0308 	and.w	r3, r3, #8
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d00a      	beq.n	800dc18 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	2201      	movs	r2, #1
 800dc06:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 800dc10:	6878      	ldr	r0, [r7, #4]
 800dc12:	f000 f851 	bl	800dcb8 <HAL_SD_ErrorCallback>
}
 800dc16:	e049      	b.n	800dcac <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d044      	beq.n	800dcac <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d040      	beq.n	800dcac <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800dc38:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	2200      	movs	r2, #0
 800dc40:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	2201      	movs	r2, #1
 800dc46:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	f000 f834 	bl	800dcb8 <HAL_SD_ErrorCallback>
}
 800dc50:	e02c      	b.n	800dcac <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d025      	beq.n	800dcac <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc68:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dc70:	f003 0304 	and.w	r3, r3, #4
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d10c      	bne.n	800dc92 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	f003 0320 	and.w	r3, r3, #32
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d003      	beq.n	800dc8a <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800dc82:	6878      	ldr	r0, [r7, #4]
 800dc84:	f001 f84a 	bl	800ed1c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800dc88:	e010      	b.n	800dcac <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800dc8a:	6878      	ldr	r0, [r7, #4]
 800dc8c:	f001 f832 	bl	800ecf4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800dc90:	e00c      	b.n	800dcac <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	f003 0320 	and.w	r3, r3, #32
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d003      	beq.n	800dca4 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800dc9c:	6878      	ldr	r0, [r7, #4]
 800dc9e:	f001 f833 	bl	800ed08 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800dca2:	e003      	b.n	800dcac <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800dca4:	6878      	ldr	r0, [r7, #4]
 800dca6:	f001 f81b 	bl	800ece0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800dcaa:	e7ff      	b.n	800dcac <HAL_SD_IRQHandler+0x364>
 800dcac:	bf00      	nop
 800dcae:	3710      	adds	r7, #16
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	bd80      	pop	{r7, pc}
 800dcb4:	18000f3a 	.word	0x18000f3a

0800dcb8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800dcb8:	b480      	push	{r7}
 800dcba:	b083      	sub	sp, #12
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800dcc0:	bf00      	nop
 800dcc2:	370c      	adds	r7, #12
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcca:	4770      	bx	lr

0800dccc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800dccc:	b480      	push	{r7}
 800dcce:	b083      	sub	sp, #12
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
 800dcd4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dcda:	0f9b      	lsrs	r3, r3, #30
 800dcdc:	b2da      	uxtb	r2, r3
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dce6:	0e9b      	lsrs	r3, r3, #26
 800dce8:	b2db      	uxtb	r3, r3
 800dcea:	f003 030f 	and.w	r3, r3, #15
 800dcee:	b2da      	uxtb	r2, r3
 800dcf0:	683b      	ldr	r3, [r7, #0]
 800dcf2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dcf8:	0e1b      	lsrs	r3, r3, #24
 800dcfa:	b2db      	uxtb	r3, r3
 800dcfc:	f003 0303 	and.w	r3, r3, #3
 800dd00:	b2da      	uxtb	r2, r3
 800dd02:	683b      	ldr	r3, [r7, #0]
 800dd04:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dd0a:	0c1b      	lsrs	r3, r3, #16
 800dd0c:	b2da      	uxtb	r2, r3
 800dd0e:	683b      	ldr	r3, [r7, #0]
 800dd10:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dd16:	0a1b      	lsrs	r3, r3, #8
 800dd18:	b2da      	uxtb	r2, r3
 800dd1a:	683b      	ldr	r3, [r7, #0]
 800dd1c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dd22:	b2da      	uxtb	r2, r3
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dd2c:	0d1b      	lsrs	r3, r3, #20
 800dd2e:	b29a      	uxth	r2, r3
 800dd30:	683b      	ldr	r3, [r7, #0]
 800dd32:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dd38:	0c1b      	lsrs	r3, r3, #16
 800dd3a:	b2db      	uxtb	r3, r3
 800dd3c:	f003 030f 	and.w	r3, r3, #15
 800dd40:	b2da      	uxtb	r2, r3
 800dd42:	683b      	ldr	r3, [r7, #0]
 800dd44:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dd4a:	0bdb      	lsrs	r3, r3, #15
 800dd4c:	b2db      	uxtb	r3, r3
 800dd4e:	f003 0301 	and.w	r3, r3, #1
 800dd52:	b2da      	uxtb	r2, r3
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dd5c:	0b9b      	lsrs	r3, r3, #14
 800dd5e:	b2db      	uxtb	r3, r3
 800dd60:	f003 0301 	and.w	r3, r3, #1
 800dd64:	b2da      	uxtb	r2, r3
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dd6e:	0b5b      	lsrs	r3, r3, #13
 800dd70:	b2db      	uxtb	r3, r3
 800dd72:	f003 0301 	and.w	r3, r3, #1
 800dd76:	b2da      	uxtb	r2, r3
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dd80:	0b1b      	lsrs	r3, r3, #12
 800dd82:	b2db      	uxtb	r3, r3
 800dd84:	f003 0301 	and.w	r3, r3, #1
 800dd88:	b2da      	uxtb	r2, r3
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800dd8e:	683b      	ldr	r3, [r7, #0]
 800dd90:	2200      	movs	r2, #0
 800dd92:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d163      	bne.n	800de64 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dda0:	009a      	lsls	r2, r3, #2
 800dda2:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800dda6:	4013      	ands	r3, r2
 800dda8:	687a      	ldr	r2, [r7, #4]
 800ddaa:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800ddac:	0f92      	lsrs	r2, r2, #30
 800ddae:	431a      	orrs	r2, r3
 800ddb0:	683b      	ldr	r3, [r7, #0]
 800ddb2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ddb8:	0edb      	lsrs	r3, r3, #27
 800ddba:	b2db      	uxtb	r3, r3
 800ddbc:	f003 0307 	and.w	r3, r3, #7
 800ddc0:	b2da      	uxtb	r2, r3
 800ddc2:	683b      	ldr	r3, [r7, #0]
 800ddc4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ddca:	0e1b      	lsrs	r3, r3, #24
 800ddcc:	b2db      	uxtb	r3, r3
 800ddce:	f003 0307 	and.w	r3, r3, #7
 800ddd2:	b2da      	uxtb	r2, r3
 800ddd4:	683b      	ldr	r3, [r7, #0]
 800ddd6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dddc:	0d5b      	lsrs	r3, r3, #21
 800ddde:	b2db      	uxtb	r3, r3
 800dde0:	f003 0307 	and.w	r3, r3, #7
 800dde4:	b2da      	uxtb	r2, r3
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ddee:	0c9b      	lsrs	r3, r3, #18
 800ddf0:	b2db      	uxtb	r3, r3
 800ddf2:	f003 0307 	and.w	r3, r3, #7
 800ddf6:	b2da      	uxtb	r2, r3
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800de00:	0bdb      	lsrs	r3, r3, #15
 800de02:	b2db      	uxtb	r3, r3
 800de04:	f003 0307 	and.w	r3, r3, #7
 800de08:	b2da      	uxtb	r2, r3
 800de0a:	683b      	ldr	r3, [r7, #0]
 800de0c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800de0e:	683b      	ldr	r3, [r7, #0]
 800de10:	691b      	ldr	r3, [r3, #16]
 800de12:	1c5a      	adds	r2, r3, #1
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800de18:	683b      	ldr	r3, [r7, #0]
 800de1a:	7e1b      	ldrb	r3, [r3, #24]
 800de1c:	b2db      	uxtb	r3, r3
 800de1e:	f003 0307 	and.w	r3, r3, #7
 800de22:	3302      	adds	r3, #2
 800de24:	2201      	movs	r2, #1
 800de26:	fa02 f303 	lsl.w	r3, r2, r3
 800de2a:	687a      	ldr	r2, [r7, #4]
 800de2c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800de2e:	fb03 f202 	mul.w	r2, r3, r2
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800de36:	683b      	ldr	r3, [r7, #0]
 800de38:	7a1b      	ldrb	r3, [r3, #8]
 800de3a:	b2db      	uxtb	r3, r3
 800de3c:	f003 030f 	and.w	r3, r3, #15
 800de40:	2201      	movs	r2, #1
 800de42:	409a      	lsls	r2, r3
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800de4c:	687a      	ldr	r2, [r7, #4]
 800de4e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800de50:	0a52      	lsrs	r2, r2, #9
 800de52:	fb03 f202 	mul.w	r2, r3, r2
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800de60:	655a      	str	r2, [r3, #84]	@ 0x54
 800de62:	e031      	b.n	800dec8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de68:	2b01      	cmp	r3, #1
 800de6a:	d11d      	bne.n	800dea8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800de70:	041b      	lsls	r3, r3, #16
 800de72:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800de7a:	0c1b      	lsrs	r3, r3, #16
 800de7c:	431a      	orrs	r2, r3
 800de7e:	683b      	ldr	r3, [r7, #0]
 800de80:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800de82:	683b      	ldr	r3, [r7, #0]
 800de84:	691b      	ldr	r3, [r3, #16]
 800de86:	3301      	adds	r3, #1
 800de88:	029a      	lsls	r2, r3, #10
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800de9c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	655a      	str	r2, [r3, #84]	@ 0x54
 800dea6:	e00f      	b.n	800dec8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	4a58      	ldr	r2, [pc, #352]	@ (800e010 <HAL_SD_GetCardCSD+0x344>)
 800deae:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800deb4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2201      	movs	r2, #1
 800dec0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800dec4:	2301      	movs	r3, #1
 800dec6:	e09d      	b.n	800e004 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800decc:	0b9b      	lsrs	r3, r3, #14
 800dece:	b2db      	uxtb	r3, r3
 800ded0:	f003 0301 	and.w	r3, r3, #1
 800ded4:	b2da      	uxtb	r2, r3
 800ded6:	683b      	ldr	r3, [r7, #0]
 800ded8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dede:	09db      	lsrs	r3, r3, #7
 800dee0:	b2db      	uxtb	r3, r3
 800dee2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dee6:	b2da      	uxtb	r2, r3
 800dee8:	683b      	ldr	r3, [r7, #0]
 800deea:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800def0:	b2db      	uxtb	r3, r3
 800def2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800def6:	b2da      	uxtb	r2, r3
 800def8:	683b      	ldr	r3, [r7, #0]
 800defa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800df00:	0fdb      	lsrs	r3, r3, #31
 800df02:	b2da      	uxtb	r2, r3
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800df0c:	0f5b      	lsrs	r3, r3, #29
 800df0e:	b2db      	uxtb	r3, r3
 800df10:	f003 0303 	and.w	r3, r3, #3
 800df14:	b2da      	uxtb	r2, r3
 800df16:	683b      	ldr	r3, [r7, #0]
 800df18:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800df1e:	0e9b      	lsrs	r3, r3, #26
 800df20:	b2db      	uxtb	r3, r3
 800df22:	f003 0307 	and.w	r3, r3, #7
 800df26:	b2da      	uxtb	r2, r3
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800df30:	0d9b      	lsrs	r3, r3, #22
 800df32:	b2db      	uxtb	r3, r3
 800df34:	f003 030f 	and.w	r3, r3, #15
 800df38:	b2da      	uxtb	r2, r3
 800df3a:	683b      	ldr	r3, [r7, #0]
 800df3c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800df42:	0d5b      	lsrs	r3, r3, #21
 800df44:	b2db      	uxtb	r3, r3
 800df46:	f003 0301 	and.w	r3, r3, #1
 800df4a:	b2da      	uxtb	r2, r3
 800df4c:	683b      	ldr	r3, [r7, #0]
 800df4e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800df52:	683b      	ldr	r3, [r7, #0]
 800df54:	2200      	movs	r2, #0
 800df56:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800df5e:	0c1b      	lsrs	r3, r3, #16
 800df60:	b2db      	uxtb	r3, r3
 800df62:	f003 0301 	and.w	r3, r3, #1
 800df66:	b2da      	uxtb	r2, r3
 800df68:	683b      	ldr	r3, [r7, #0]
 800df6a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800df72:	0bdb      	lsrs	r3, r3, #15
 800df74:	b2db      	uxtb	r3, r3
 800df76:	f003 0301 	and.w	r3, r3, #1
 800df7a:	b2da      	uxtb	r2, r3
 800df7c:	683b      	ldr	r3, [r7, #0]
 800df7e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800df86:	0b9b      	lsrs	r3, r3, #14
 800df88:	b2db      	uxtb	r3, r3
 800df8a:	f003 0301 	and.w	r3, r3, #1
 800df8e:	b2da      	uxtb	r2, r3
 800df90:	683b      	ldr	r3, [r7, #0]
 800df92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800df9a:	0b5b      	lsrs	r3, r3, #13
 800df9c:	b2db      	uxtb	r3, r3
 800df9e:	f003 0301 	and.w	r3, r3, #1
 800dfa2:	b2da      	uxtb	r2, r3
 800dfa4:	683b      	ldr	r3, [r7, #0]
 800dfa6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dfae:	0b1b      	lsrs	r3, r3, #12
 800dfb0:	b2db      	uxtb	r3, r3
 800dfb2:	f003 0301 	and.w	r3, r3, #1
 800dfb6:	b2da      	uxtb	r2, r3
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dfc2:	0a9b      	lsrs	r3, r3, #10
 800dfc4:	b2db      	uxtb	r3, r3
 800dfc6:	f003 0303 	and.w	r3, r3, #3
 800dfca:	b2da      	uxtb	r2, r3
 800dfcc:	683b      	ldr	r3, [r7, #0]
 800dfce:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dfd6:	0a1b      	lsrs	r3, r3, #8
 800dfd8:	b2db      	uxtb	r3, r3
 800dfda:	f003 0303 	and.w	r3, r3, #3
 800dfde:	b2da      	uxtb	r2, r3
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dfea:	085b      	lsrs	r3, r3, #1
 800dfec:	b2db      	uxtb	r3, r3
 800dfee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dff2:	b2da      	uxtb	r2, r3
 800dff4:	683b      	ldr	r3, [r7, #0]
 800dff6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800dffa:	683b      	ldr	r3, [r7, #0]
 800dffc:	2201      	movs	r2, #1
 800dffe:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800e002:	2300      	movs	r3, #0
}
 800e004:	4618      	mov	r0, r3
 800e006:	370c      	adds	r7, #12
 800e008:	46bd      	mov	sp, r7
 800e00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00e:	4770      	bx	lr
 800e010:	1fe00fff 	.word	0x1fe00fff

0800e014 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b094      	sub	sp, #80	@ 0x50
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
 800e01c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800e01e:	2300      	movs	r3, #0
 800e020:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e02a:	b2db      	uxtb	r3, r3
 800e02c:	2b03      	cmp	r3, #3
 800e02e:	d101      	bne.n	800e034 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800e030:	2301      	movs	r3, #1
 800e032:	e0a7      	b.n	800e184 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800e034:	f107 0308 	add.w	r3, r7, #8
 800e038:	4619      	mov	r1, r3
 800e03a:	6878      	ldr	r0, [r7, #4]
 800e03c:	f000 fb62 	bl	800e704 <SD_SendSDStatus>
 800e040:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800e042:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e044:	2b00      	cmp	r3, #0
 800e046:	d011      	beq.n	800e06c <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	4a4f      	ldr	r2, [pc, #316]	@ (800e18c <HAL_SD_GetCardStatus+0x178>)
 800e04e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e054:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e056:	431a      	orrs	r2, r3
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	2201      	movs	r2, #1
 800e060:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800e064:	2301      	movs	r3, #1
 800e066:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800e06a:	e070      	b.n	800e14e <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800e06c:	68bb      	ldr	r3, [r7, #8]
 800e06e:	099b      	lsrs	r3, r3, #6
 800e070:	b2db      	uxtb	r3, r3
 800e072:	f003 0303 	and.w	r3, r3, #3
 800e076:	b2da      	uxtb	r2, r3
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800e07c:	68bb      	ldr	r3, [r7, #8]
 800e07e:	095b      	lsrs	r3, r3, #5
 800e080:	b2db      	uxtb	r3, r3
 800e082:	f003 0301 	and.w	r3, r3, #1
 800e086:	b2da      	uxtb	r2, r3
 800e088:	683b      	ldr	r3, [r7, #0]
 800e08a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800e08c:	68bb      	ldr	r3, [r7, #8]
 800e08e:	0a1b      	lsrs	r3, r3, #8
 800e090:	b29b      	uxth	r3, r3
 800e092:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800e096:	b29a      	uxth	r2, r3
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	0e1b      	lsrs	r3, r3, #24
 800e09c:	b29b      	uxth	r3, r3
 800e09e:	4313      	orrs	r3, r2
 800e0a0:	b29a      	uxth	r2, r3
 800e0a2:	683b      	ldr	r3, [r7, #0]
 800e0a4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	061a      	lsls	r2, r3, #24
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	021b      	lsls	r3, r3, #8
 800e0ae:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e0b2:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	0a1b      	lsrs	r3, r3, #8
 800e0b8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e0bc:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	0e1b      	lsrs	r3, r3, #24
 800e0c2:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800e0c8:	693b      	ldr	r3, [r7, #16]
 800e0ca:	b2da      	uxtb	r2, r3
 800e0cc:	683b      	ldr	r3, [r7, #0]
 800e0ce:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800e0d0:	693b      	ldr	r3, [r7, #16]
 800e0d2:	0a1b      	lsrs	r3, r3, #8
 800e0d4:	b2da      	uxtb	r2, r3
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800e0da:	693b      	ldr	r3, [r7, #16]
 800e0dc:	0d1b      	lsrs	r3, r3, #20
 800e0de:	b2db      	uxtb	r3, r3
 800e0e0:	f003 030f 	and.w	r3, r3, #15
 800e0e4:	b2da      	uxtb	r2, r3
 800e0e6:	683b      	ldr	r3, [r7, #0]
 800e0e8:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800e0ea:	693b      	ldr	r3, [r7, #16]
 800e0ec:	0c1b      	lsrs	r3, r3, #16
 800e0ee:	b29b      	uxth	r3, r3
 800e0f0:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800e0f4:	b29a      	uxth	r2, r3
 800e0f6:	697b      	ldr	r3, [r7, #20]
 800e0f8:	b29b      	uxth	r3, r3
 800e0fa:	b2db      	uxtb	r3, r3
 800e0fc:	b29b      	uxth	r3, r3
 800e0fe:	4313      	orrs	r3, r2
 800e100:	b29a      	uxth	r2, r3
 800e102:	683b      	ldr	r3, [r7, #0]
 800e104:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800e106:	697b      	ldr	r3, [r7, #20]
 800e108:	0a9b      	lsrs	r3, r3, #10
 800e10a:	b2db      	uxtb	r3, r3
 800e10c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e110:	b2da      	uxtb	r2, r3
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800e116:	697b      	ldr	r3, [r7, #20]
 800e118:	0a1b      	lsrs	r3, r3, #8
 800e11a:	b2db      	uxtb	r3, r3
 800e11c:	f003 0303 	and.w	r3, r3, #3
 800e120:	b2da      	uxtb	r2, r3
 800e122:	683b      	ldr	r3, [r7, #0]
 800e124:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800e126:	697b      	ldr	r3, [r7, #20]
 800e128:	091b      	lsrs	r3, r3, #4
 800e12a:	b2db      	uxtb	r3, r3
 800e12c:	f003 030f 	and.w	r3, r3, #15
 800e130:	b2da      	uxtb	r2, r3
 800e132:	683b      	ldr	r3, [r7, #0]
 800e134:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800e136:	697b      	ldr	r3, [r7, #20]
 800e138:	b2db      	uxtb	r3, r3
 800e13a:	f003 030f 	and.w	r3, r3, #15
 800e13e:	b2da      	uxtb	r2, r3
 800e140:	683b      	ldr	r3, [r7, #0]
 800e142:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800e144:	69bb      	ldr	r3, [r7, #24]
 800e146:	0e1b      	lsrs	r3, r3, #24
 800e148:	b2da      	uxtb	r2, r3
 800e14a:	683b      	ldr	r3, [r7, #0]
 800e14c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e156:	4618      	mov	r0, r3
 800e158:	f004 fcc2 	bl	8012ae0 <SDMMC_CmdBlockLength>
 800e15c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800e15e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e160:	2b00      	cmp	r3, #0
 800e162:	d00d      	beq.n	800e180 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	4a08      	ldr	r2, [pc, #32]	@ (800e18c <HAL_SD_GetCardStatus+0x178>)
 800e16a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e170:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	2201      	movs	r2, #1
 800e176:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800e17a:	2301      	movs	r3, #1
 800e17c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 800e180:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800e184:	4618      	mov	r0, r3
 800e186:	3750      	adds	r7, #80	@ 0x50
 800e188:	46bd      	mov	sp, r7
 800e18a:	bd80      	pop	{r7, pc}
 800e18c:	1fe00fff 	.word	0x1fe00fff

0800e190 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800e190:	b480      	push	{r7}
 800e192:	b083      	sub	sp, #12
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
 800e198:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e1b6:	683b      	ldr	r3, [r7, #0]
 800e1b8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e1be:	683b      	ldr	r3, [r7, #0]
 800e1c0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e1c6:	683b      	ldr	r3, [r7, #0]
 800e1c8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e1d6:	683b      	ldr	r3, [r7, #0]
 800e1d8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800e1da:	2300      	movs	r3, #0
}
 800e1dc:	4618      	mov	r0, r3
 800e1de:	370c      	adds	r7, #12
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e6:	4770      	bx	lr

0800e1e8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800e1e8:	b590      	push	{r4, r7, lr}
 800e1ea:	b08d      	sub	sp, #52	@ 0x34
 800e1ec:	af02      	add	r7, sp, #8
 800e1ee:	6078      	str	r0, [r7, #4]
 800e1f0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	2203      	movs	r2, #3
 800e1fc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e204:	2b03      	cmp	r3, #3
 800e206:	d02e      	beq.n	800e266 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800e208:	683b      	ldr	r3, [r7, #0]
 800e20a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e20e:	d106      	bne.n	800e21e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e214:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	635a      	str	r2, [r3, #52]	@ 0x34
 800e21c:	e029      	b.n	800e272 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800e21e:	683b      	ldr	r3, [r7, #0]
 800e220:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e224:	d10a      	bne.n	800e23c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800e226:	6878      	ldr	r0, [r7, #4]
 800e228:	f000 fb64 	bl	800e8f4 <SD_WideBus_Enable>
 800e22c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e232:	6a3b      	ldr	r3, [r7, #32]
 800e234:	431a      	orrs	r2, r3
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	635a      	str	r2, [r3, #52]	@ 0x34
 800e23a:	e01a      	b.n	800e272 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d10a      	bne.n	800e258 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800e242:	6878      	ldr	r0, [r7, #4]
 800e244:	f000 fba1 	bl	800e98a <SD_WideBus_Disable>
 800e248:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e24e:	6a3b      	ldr	r3, [r7, #32]
 800e250:	431a      	orrs	r2, r3
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	635a      	str	r2, [r3, #52]	@ 0x34
 800e256:	e00c      	b.n	800e272 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e25c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	635a      	str	r2, [r3, #52]	@ 0x34
 800e264:	e005      	b.n	800e272 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e26a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e276:	2b00      	cmp	r3, #0
 800e278:	d007      	beq.n	800e28a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	4a5f      	ldr	r2, [pc, #380]	@ (800e3fc <HAL_SD_ConfigWideBusOperation+0x214>)
 800e280:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800e282:	2301      	movs	r3, #1
 800e284:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e288:	e096      	b.n	800e3b8 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800e28a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800e28e:	f04f 0100 	mov.w	r1, #0
 800e292:	f7fd fea3 	bl	800bfdc <HAL_RCCEx_GetPeriphCLKFreq>
 800e296:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800e298:	69fb      	ldr	r3, [r7, #28]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	f000 8083 	beq.w	800e3a6 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	685b      	ldr	r3, [r3, #4]
 800e2a4:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	689b      	ldr	r3, [r3, #8]
 800e2aa:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800e2ac:	683b      	ldr	r3, [r7, #0]
 800e2ae:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	691b      	ldr	r3, [r3, #16]
 800e2b4:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	695a      	ldr	r2, [r3, #20]
 800e2ba:	69fb      	ldr	r3, [r7, #28]
 800e2bc:	4950      	ldr	r1, [pc, #320]	@ (800e400 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e2be:	fba1 1303 	umull	r1, r3, r1, r3
 800e2c2:	0e1b      	lsrs	r3, r3, #24
 800e2c4:	429a      	cmp	r2, r3
 800e2c6:	d303      	bcc.n	800e2d0 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	695b      	ldr	r3, [r3, #20]
 800e2cc:	61bb      	str	r3, [r7, #24]
 800e2ce:	e05a      	b.n	800e386 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e2d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e2d8:	d103      	bne.n	800e2e2 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	695b      	ldr	r3, [r3, #20]
 800e2de:	61bb      	str	r3, [r7, #24]
 800e2e0:	e051      	b.n	800e386 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e2e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e2ea:	d126      	bne.n	800e33a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	695b      	ldr	r3, [r3, #20]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d10e      	bne.n	800e312 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800e2f4:	69fb      	ldr	r3, [r7, #28]
 800e2f6:	4a43      	ldr	r2, [pc, #268]	@ (800e404 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e2f8:	4293      	cmp	r3, r2
 800e2fa:	d906      	bls.n	800e30a <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e2fc:	69fb      	ldr	r3, [r7, #28]
 800e2fe:	4a40      	ldr	r2, [pc, #256]	@ (800e400 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e300:	fba2 2303 	umull	r2, r3, r2, r3
 800e304:	0e5b      	lsrs	r3, r3, #25
 800e306:	61bb      	str	r3, [r7, #24]
 800e308:	e03d      	b.n	800e386 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	695b      	ldr	r3, [r3, #20]
 800e30e:	61bb      	str	r3, [r7, #24]
 800e310:	e039      	b.n	800e386 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	695b      	ldr	r3, [r3, #20]
 800e316:	005b      	lsls	r3, r3, #1
 800e318:	69fa      	ldr	r2, [r7, #28]
 800e31a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e31e:	4a39      	ldr	r2, [pc, #228]	@ (800e404 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e320:	4293      	cmp	r3, r2
 800e322:	d906      	bls.n	800e332 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e324:	69fb      	ldr	r3, [r7, #28]
 800e326:	4a36      	ldr	r2, [pc, #216]	@ (800e400 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e328:	fba2 2303 	umull	r2, r3, r2, r3
 800e32c:	0e5b      	lsrs	r3, r3, #25
 800e32e:	61bb      	str	r3, [r7, #24]
 800e330:	e029      	b.n	800e386 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	695b      	ldr	r3, [r3, #20]
 800e336:	61bb      	str	r3, [r7, #24]
 800e338:	e025      	b.n	800e386 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	695b      	ldr	r3, [r3, #20]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d10e      	bne.n	800e360 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800e342:	69fb      	ldr	r3, [r7, #28]
 800e344:	4a30      	ldr	r2, [pc, #192]	@ (800e408 <HAL_SD_ConfigWideBusOperation+0x220>)
 800e346:	4293      	cmp	r3, r2
 800e348:	d906      	bls.n	800e358 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e34a:	69fb      	ldr	r3, [r7, #28]
 800e34c:	4a2c      	ldr	r2, [pc, #176]	@ (800e400 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e34e:	fba2 2303 	umull	r2, r3, r2, r3
 800e352:	0e1b      	lsrs	r3, r3, #24
 800e354:	61bb      	str	r3, [r7, #24]
 800e356:	e016      	b.n	800e386 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	695b      	ldr	r3, [r3, #20]
 800e35c:	61bb      	str	r3, [r7, #24]
 800e35e:	e012      	b.n	800e386 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	695b      	ldr	r3, [r3, #20]
 800e364:	005b      	lsls	r3, r3, #1
 800e366:	69fa      	ldr	r2, [r7, #28]
 800e368:	fbb2 f3f3 	udiv	r3, r2, r3
 800e36c:	4a26      	ldr	r2, [pc, #152]	@ (800e408 <HAL_SD_ConfigWideBusOperation+0x220>)
 800e36e:	4293      	cmp	r3, r2
 800e370:	d906      	bls.n	800e380 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e372:	69fb      	ldr	r3, [r7, #28]
 800e374:	4a22      	ldr	r2, [pc, #136]	@ (800e400 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e376:	fba2 2303 	umull	r2, r3, r2, r3
 800e37a:	0e1b      	lsrs	r3, r3, #24
 800e37c:	61bb      	str	r3, [r7, #24]
 800e37e:	e002      	b.n	800e386 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	695b      	ldr	r3, [r3, #20]
 800e384:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681c      	ldr	r4, [r3, #0]
 800e38a:	466a      	mov	r2, sp
 800e38c:	f107 0314 	add.w	r3, r7, #20
 800e390:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e394:	e882 0003 	stmia.w	r2, {r0, r1}
 800e398:	f107 0308 	add.w	r3, r7, #8
 800e39c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e39e:	4620      	mov	r0, r4
 800e3a0:	f004 fac0 	bl	8012924 <SDMMC_Init>
 800e3a4:	e008      	b.n	800e3b8 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e3aa:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800e3b2:	2301      	movs	r3, #1
 800e3b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	f004 fb8d 	bl	8012ae0 <SDMMC_CmdBlockLength>
 800e3c6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e3c8:	6a3b      	ldr	r3, [r7, #32]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d00c      	beq.n	800e3e8 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	4a0a      	ldr	r2, [pc, #40]	@ (800e3fc <HAL_SD_ConfigWideBusOperation+0x214>)
 800e3d4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e3da:	6a3b      	ldr	r3, [r7, #32]
 800e3dc:	431a      	orrs	r2, r3
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800e3e2:	2301      	movs	r3, #1
 800e3e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	2201      	movs	r2, #1
 800e3ec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800e3f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	372c      	adds	r7, #44	@ 0x2c
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	bd90      	pop	{r4, r7, pc}
 800e3fc:	1fe00fff 	.word	0x1fe00fff
 800e400:	55e63b89 	.word	0x55e63b89
 800e404:	02faf080 	.word	0x02faf080
 800e408:	017d7840 	.word	0x017d7840

0800e40c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b086      	sub	sp, #24
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800e414:	2300      	movs	r3, #0
 800e416:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800e418:	f107 030c 	add.w	r3, r7, #12
 800e41c:	4619      	mov	r1, r3
 800e41e:	6878      	ldr	r0, [r7, #4]
 800e420:	f000 fa40 	bl	800e8a4 <SD_SendStatus>
 800e424:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e426:	697b      	ldr	r3, [r7, #20]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d005      	beq.n	800e438 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e430:	697b      	ldr	r3, [r7, #20]
 800e432:	431a      	orrs	r2, r3
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	0a5b      	lsrs	r3, r3, #9
 800e43c:	f003 030f 	and.w	r3, r3, #15
 800e440:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800e442:	693b      	ldr	r3, [r7, #16]
}
 800e444:	4618      	mov	r0, r3
 800e446:	3718      	adds	r7, #24
 800e448:	46bd      	mov	sp, r7
 800e44a:	bd80      	pop	{r7, pc}

0800e44c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b090      	sub	sp, #64	@ 0x40
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800e454:	2300      	movs	r3, #0
 800e456:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800e458:	f7f5 fac6 	bl	80039e8 <HAL_GetTick>
 800e45c:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	4618      	mov	r0, r3
 800e464:	f004 fab7 	bl	80129d6 <SDMMC_GetPowerState>
 800e468:	4603      	mov	r3, r0
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d102      	bne.n	800e474 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e46e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800e472:	e0b5      	b.n	800e5e0 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e478:	2b03      	cmp	r3, #3
 800e47a:	d02e      	beq.n	800e4da <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	4618      	mov	r0, r3
 800e482:	f004 fd02 	bl	8012e8a <SDMMC_CmdSendCID>
 800e486:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d001      	beq.n	800e492 <SD_InitCard+0x46>
    {
      return errorstate;
 800e48e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e490:	e0a6      	b.n	800e5e0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	2100      	movs	r1, #0
 800e498:	4618      	mov	r0, r3
 800e49a:	f004 fae2 	bl	8012a62 <SDMMC_GetResponse>
 800e49e:	4602      	mov	r2, r0
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	2104      	movs	r1, #4
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	f004 fad9 	bl	8012a62 <SDMMC_GetResponse>
 800e4b0:	4602      	mov	r2, r0
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	2108      	movs	r1, #8
 800e4bc:	4618      	mov	r0, r3
 800e4be:	f004 fad0 	bl	8012a62 <SDMMC_GetResponse>
 800e4c2:	4602      	mov	r2, r0
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	210c      	movs	r1, #12
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	f004 fac7 	bl	8012a62 <SDMMC_GetResponse>
 800e4d4:	4602      	mov	r2, r0
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e4de:	2b03      	cmp	r3, #3
 800e4e0:	d01d      	beq.n	800e51e <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800e4e2:	e019      	b.n	800e518 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	f107 020a 	add.w	r2, r7, #10
 800e4ec:	4611      	mov	r1, r2
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f004 fd0a 	bl	8012f08 <SDMMC_CmdSetRelAdd>
 800e4f4:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800e4f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d001      	beq.n	800e500 <SD_InitCard+0xb4>
      {
        return errorstate;
 800e4fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4fe:	e06f      	b.n	800e5e0 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800e500:	f7f5 fa72 	bl	80039e8 <HAL_GetTick>
 800e504:	4602      	mov	r2, r0
 800e506:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e508:	1ad3      	subs	r3, r2, r3
 800e50a:	f241 3287 	movw	r2, #4999	@ 0x1387
 800e50e:	4293      	cmp	r3, r2
 800e510:	d902      	bls.n	800e518 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800e512:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e516:	e063      	b.n	800e5e0 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800e518:	897b      	ldrh	r3, [r7, #10]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d0e2      	beq.n	800e4e4 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e522:	2b03      	cmp	r3, #3
 800e524:	d036      	beq.n	800e594 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e526:	897b      	ldrh	r3, [r7, #10]
 800e528:	461a      	mov	r2, r3
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	681a      	ldr	r2, [r3, #0]
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e536:	041b      	lsls	r3, r3, #16
 800e538:	4619      	mov	r1, r3
 800e53a:	4610      	mov	r0, r2
 800e53c:	f004 fcc4 	bl	8012ec8 <SDMMC_CmdSendCSD>
 800e540:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e544:	2b00      	cmp	r3, #0
 800e546:	d001      	beq.n	800e54c <SD_InitCard+0x100>
    {
      return errorstate;
 800e548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e54a:	e049      	b.n	800e5e0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	2100      	movs	r1, #0
 800e552:	4618      	mov	r0, r3
 800e554:	f004 fa85 	bl	8012a62 <SDMMC_GetResponse>
 800e558:	4602      	mov	r2, r0
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	2104      	movs	r1, #4
 800e564:	4618      	mov	r0, r3
 800e566:	f004 fa7c 	bl	8012a62 <SDMMC_GetResponse>
 800e56a:	4602      	mov	r2, r0
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	2108      	movs	r1, #8
 800e576:	4618      	mov	r0, r3
 800e578:	f004 fa73 	bl	8012a62 <SDMMC_GetResponse>
 800e57c:	4602      	mov	r2, r0
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	210c      	movs	r1, #12
 800e588:	4618      	mov	r0, r3
 800e58a:	f004 fa6a 	bl	8012a62 <SDMMC_GetResponse>
 800e58e:	4602      	mov	r2, r0
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	2104      	movs	r1, #4
 800e59a:	4618      	mov	r0, r3
 800e59c:	f004 fa61 	bl	8012a62 <SDMMC_GetResponse>
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	0d1a      	lsrs	r2, r3, #20
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e5a8:	f107 030c 	add.w	r3, r7, #12
 800e5ac:	4619      	mov	r1, r3
 800e5ae:	6878      	ldr	r0, [r7, #4]
 800e5b0:	f7ff fb8c 	bl	800dccc <HAL_SD_GetCardCSD>
 800e5b4:	4603      	mov	r3, r0
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d002      	beq.n	800e5c0 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e5ba:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800e5be:	e00f      	b.n	800e5e0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681a      	ldr	r2, [r3, #0]
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e5c8:	041b      	lsls	r3, r3, #16
 800e5ca:	4619      	mov	r1, r3
 800e5cc:	4610      	mov	r0, r2
 800e5ce:	f004 fb73 	bl	8012cb8 <SDMMC_CmdSelDesel>
 800e5d2:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800e5d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d001      	beq.n	800e5de <SD_InitCard+0x192>
  {
    return errorstate;
 800e5da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5dc:	e000      	b.n	800e5e0 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e5de:	2300      	movs	r3, #0
}
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	3740      	adds	r7, #64	@ 0x40
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	bd80      	pop	{r7, pc}

0800e5e8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	b086      	sub	sp, #24
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	4618      	mov	r0, r3
 800e602:	f004 fb7c 	bl	8012cfe <SDMMC_CmdGoIdleState>
 800e606:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d001      	beq.n	800e612 <SD_PowerON+0x2a>
  {
    return errorstate;
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	e072      	b.n	800e6f8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	4618      	mov	r0, r3
 800e618:	f004 fb8f 	bl	8012d3a <SDMMC_CmdOperCond>
 800e61c:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e624:	d10d      	bne.n	800e642 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	2200      	movs	r2, #0
 800e62a:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	4618      	mov	r0, r3
 800e632:	f004 fb64 	bl	8012cfe <SDMMC_CmdGoIdleState>
 800e636:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d004      	beq.n	800e648 <SD_PowerON+0x60>
    {
      return errorstate;
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	e05a      	b.n	800e6f8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	2201      	movs	r2, #1
 800e646:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e64c:	2b01      	cmp	r3, #1
 800e64e:	d137      	bne.n	800e6c0 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	2100      	movs	r1, #0
 800e656:	4618      	mov	r0, r3
 800e658:	f004 fb8f 	bl	8012d7a <SDMMC_CmdAppCommand>
 800e65c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d02d      	beq.n	800e6c0 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e664:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800e668:	e046      	b.n	800e6f8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	2100      	movs	r1, #0
 800e670:	4618      	mov	r0, r3
 800e672:	f004 fb82 	bl	8012d7a <SDMMC_CmdAppCommand>
 800e676:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d001      	beq.n	800e682 <SD_PowerON+0x9a>
    {
      return errorstate;
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	e03a      	b.n	800e6f8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	491e      	ldr	r1, [pc, #120]	@ (800e700 <SD_PowerON+0x118>)
 800e688:	4618      	mov	r0, r3
 800e68a:	f004 fb99 	bl	8012dc0 <SDMMC_CmdAppOperCommand>
 800e68e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d002      	beq.n	800e69c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e696:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800e69a:	e02d      	b.n	800e6f8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	2100      	movs	r1, #0
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	f004 f9dd 	bl	8012a62 <SDMMC_GetResponse>
 800e6a8:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e6aa:	697b      	ldr	r3, [r7, #20]
 800e6ac:	0fdb      	lsrs	r3, r3, #31
 800e6ae:	2b01      	cmp	r3, #1
 800e6b0:	d101      	bne.n	800e6b6 <SD_PowerON+0xce>
 800e6b2:	2301      	movs	r3, #1
 800e6b4:	e000      	b.n	800e6b8 <SD_PowerON+0xd0>
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	613b      	str	r3, [r7, #16]

    count++;
 800e6ba:	68bb      	ldr	r3, [r7, #8]
 800e6bc:	3301      	adds	r3, #1
 800e6be:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e6c0:	68bb      	ldr	r3, [r7, #8]
 800e6c2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800e6c6:	4293      	cmp	r3, r2
 800e6c8:	d802      	bhi.n	800e6d0 <SD_PowerON+0xe8>
 800e6ca:	693b      	ldr	r3, [r7, #16]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d0cc      	beq.n	800e66a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800e6d0:	68bb      	ldr	r3, [r7, #8]
 800e6d2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800e6d6:	4293      	cmp	r3, r2
 800e6d8:	d902      	bls.n	800e6e0 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e6da:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e6de:	e00b      	b.n	800e6f8 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800e6e6:	697b      	ldr	r3, [r7, #20]
 800e6e8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d002      	beq.n	800e6f6 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	2201      	movs	r2, #1
 800e6f4:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800e6f6:	2300      	movs	r3, #0
}
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	3718      	adds	r7, #24
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	bd80      	pop	{r7, pc}
 800e700:	c1100000 	.word	0xc1100000

0800e704 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800e704:	b580      	push	{r7, lr}
 800e706:	b08c      	sub	sp, #48	@ 0x30
 800e708:	af00      	add	r7, sp, #0
 800e70a:	6078      	str	r0, [r7, #4]
 800e70c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e70e:	f7f5 f96b 	bl	80039e8 <HAL_GetTick>
 800e712:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800e714:	683b      	ldr	r3, [r7, #0]
 800e716:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	2100      	movs	r1, #0
 800e71e:	4618      	mov	r0, r3
 800e720:	f004 f99f 	bl	8012a62 <SDMMC_GetResponse>
 800e724:	4603      	mov	r3, r0
 800e726:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e72a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e72e:	d102      	bne.n	800e736 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e730:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e734:	e0b0      	b.n	800e898 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	2140      	movs	r1, #64	@ 0x40
 800e73c:	4618      	mov	r0, r3
 800e73e:	f004 f9cf 	bl	8012ae0 <SDMMC_CmdBlockLength>
 800e742:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e744:	6a3b      	ldr	r3, [r7, #32]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d005      	beq.n	800e756 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800e752:	6a3b      	ldr	r3, [r7, #32]
 800e754:	e0a0      	b.n	800e898 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681a      	ldr	r2, [r3, #0]
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e75e:	041b      	lsls	r3, r3, #16
 800e760:	4619      	mov	r1, r3
 800e762:	4610      	mov	r0, r2
 800e764:	f004 fb09 	bl	8012d7a <SDMMC_CmdAppCommand>
 800e768:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e76a:	6a3b      	ldr	r3, [r7, #32]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d005      	beq.n	800e77c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800e778:	6a3b      	ldr	r3, [r7, #32]
 800e77a:	e08d      	b.n	800e898 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e77c:	f04f 33ff 	mov.w	r3, #4294967295
 800e780:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800e782:	2340      	movs	r3, #64	@ 0x40
 800e784:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800e786:	2360      	movs	r3, #96	@ 0x60
 800e788:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e78a:	2302      	movs	r3, #2
 800e78c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e78e:	2300      	movs	r3, #0
 800e790:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e792:	2301      	movs	r3, #1
 800e794:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	f107 0208 	add.w	r2, r7, #8
 800e79e:	4611      	mov	r1, r2
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	f004 f971 	bl	8012a88 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	f004 fbf1 	bl	8012f92 <SDMMC_CmdStatusRegister>
 800e7b0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e7b2:	6a3b      	ldr	r3, [r7, #32]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d02b      	beq.n	800e810 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800e7c0:	6a3b      	ldr	r3, [r7, #32]
 800e7c2:	e069      	b.n	800e898 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e7ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d013      	beq.n	800e7fa <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e7d6:	e00d      	b.n	800e7f4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	4618      	mov	r0, r3
 800e7de:	f004 f8cb 	bl	8012978 <SDMMC_ReadFIFO>
 800e7e2:	4602      	mov	r2, r0
 800e7e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7e6:	601a      	str	r2, [r3, #0]
        pData++;
 800e7e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7ea:	3304      	adds	r3, #4
 800e7ec:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800e7ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7f0:	3301      	adds	r3, #1
 800e7f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e7f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7f6:	2b07      	cmp	r3, #7
 800e7f8:	d9ee      	bls.n	800e7d8 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e7fa:	f7f5 f8f5 	bl	80039e8 <HAL_GetTick>
 800e7fe:	4602      	mov	r2, r0
 800e800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e802:	1ad3      	subs	r3, r2, r3
 800e804:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e808:	d102      	bne.n	800e810 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e80a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e80e:	e043      	b.n	800e898 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e816:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d0d2      	beq.n	800e7c4 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e824:	f003 0308 	and.w	r3, r3, #8
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d001      	beq.n	800e830 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e82c:	2308      	movs	r3, #8
 800e82e:	e033      	b.n	800e898 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e836:	f003 0302 	and.w	r3, r3, #2
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d001      	beq.n	800e842 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e83e:	2302      	movs	r3, #2
 800e840:	e02a      	b.n	800e898 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e848:	f003 0320 	and.w	r3, r3, #32
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d017      	beq.n	800e880 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800e850:	2320      	movs	r3, #32
 800e852:	e021      	b.n	800e898 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	4618      	mov	r0, r3
 800e85a:	f004 f88d 	bl	8012978 <SDMMC_ReadFIFO>
 800e85e:	4602      	mov	r2, r0
 800e860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e862:	601a      	str	r2, [r3, #0]
    pData++;
 800e864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e866:	3304      	adds	r3, #4
 800e868:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e86a:	f7f5 f8bd 	bl	80039e8 <HAL_GetTick>
 800e86e:	4602      	mov	r2, r0
 800e870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e872:	1ad3      	subs	r3, r2, r3
 800e874:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e878:	d102      	bne.n	800e880 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e87a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e87e:	e00b      	b.n	800e898 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e886:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d1e2      	bne.n	800e854 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	4a03      	ldr	r2, [pc, #12]	@ (800e8a0 <SD_SendSDStatus+0x19c>)
 800e894:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800e896:	2300      	movs	r3, #0
}
 800e898:	4618      	mov	r0, r3
 800e89a:	3730      	adds	r7, #48	@ 0x30
 800e89c:	46bd      	mov	sp, r7
 800e89e:	bd80      	pop	{r7, pc}
 800e8a0:	18000f3a 	.word	0x18000f3a

0800e8a4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b084      	sub	sp, #16
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
 800e8ac:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800e8ae:	683b      	ldr	r3, [r7, #0]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d102      	bne.n	800e8ba <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e8b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e8b8:	e018      	b.n	800e8ec <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	681a      	ldr	r2, [r3, #0]
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e8c2:	041b      	lsls	r3, r3, #16
 800e8c4:	4619      	mov	r1, r3
 800e8c6:	4610      	mov	r0, r2
 800e8c8:	f004 fb40 	bl	8012f4c <SDMMC_CmdSendStatus>
 800e8cc:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d001      	beq.n	800e8d8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	e009      	b.n	800e8ec <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	2100      	movs	r1, #0
 800e8de:	4618      	mov	r0, r3
 800e8e0:	f004 f8bf 	bl	8012a62 <SDMMC_GetResponse>
 800e8e4:	4602      	mov	r2, r0
 800e8e6:	683b      	ldr	r3, [r7, #0]
 800e8e8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e8ea:	2300      	movs	r3, #0
}
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	3710      	adds	r7, #16
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bd80      	pop	{r7, pc}

0800e8f4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b086      	sub	sp, #24
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	60fb      	str	r3, [r7, #12]
 800e900:	2300      	movs	r3, #0
 800e902:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	2100      	movs	r1, #0
 800e90a:	4618      	mov	r0, r3
 800e90c:	f004 f8a9 	bl	8012a62 <SDMMC_GetResponse>
 800e910:	4603      	mov	r3, r0
 800e912:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e916:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e91a:	d102      	bne.n	800e922 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e91c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e920:	e02f      	b.n	800e982 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e922:	f107 030c 	add.w	r3, r7, #12
 800e926:	4619      	mov	r1, r3
 800e928:	6878      	ldr	r0, [r7, #4]
 800e92a:	f000 f879 	bl	800ea20 <SD_FindSCR>
 800e92e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e930:	697b      	ldr	r3, [r7, #20]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d001      	beq.n	800e93a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e936:	697b      	ldr	r3, [r7, #20]
 800e938:	e023      	b.n	800e982 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e93a:	693b      	ldr	r3, [r7, #16]
 800e93c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e940:	2b00      	cmp	r3, #0
 800e942:	d01c      	beq.n	800e97e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	681a      	ldr	r2, [r3, #0]
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e94c:	041b      	lsls	r3, r3, #16
 800e94e:	4619      	mov	r1, r3
 800e950:	4610      	mov	r0, r2
 800e952:	f004 fa12 	bl	8012d7a <SDMMC_CmdAppCommand>
 800e956:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e958:	697b      	ldr	r3, [r7, #20]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d001      	beq.n	800e962 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e95e:	697b      	ldr	r3, [r7, #20]
 800e960:	e00f      	b.n	800e982 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	2102      	movs	r1, #2
 800e968:	4618      	mov	r0, r3
 800e96a:	f004 fa49 	bl	8012e00 <SDMMC_CmdBusWidth>
 800e96e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e970:	697b      	ldr	r3, [r7, #20]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d001      	beq.n	800e97a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e976:	697b      	ldr	r3, [r7, #20]
 800e978:	e003      	b.n	800e982 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e97a:	2300      	movs	r3, #0
 800e97c:	e001      	b.n	800e982 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e97e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800e982:	4618      	mov	r0, r3
 800e984:	3718      	adds	r7, #24
 800e986:	46bd      	mov	sp, r7
 800e988:	bd80      	pop	{r7, pc}

0800e98a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e98a:	b580      	push	{r7, lr}
 800e98c:	b086      	sub	sp, #24
 800e98e:	af00      	add	r7, sp, #0
 800e990:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e992:	2300      	movs	r3, #0
 800e994:	60fb      	str	r3, [r7, #12]
 800e996:	2300      	movs	r3, #0
 800e998:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	2100      	movs	r1, #0
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	f004 f85e 	bl	8012a62 <SDMMC_GetResponse>
 800e9a6:	4603      	mov	r3, r0
 800e9a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e9ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e9b0:	d102      	bne.n	800e9b8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e9b2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e9b6:	e02f      	b.n	800ea18 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e9b8:	f107 030c 	add.w	r3, r7, #12
 800e9bc:	4619      	mov	r1, r3
 800e9be:	6878      	ldr	r0, [r7, #4]
 800e9c0:	f000 f82e 	bl	800ea20 <SD_FindSCR>
 800e9c4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e9c6:	697b      	ldr	r3, [r7, #20]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d001      	beq.n	800e9d0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e9cc:	697b      	ldr	r3, [r7, #20]
 800e9ce:	e023      	b.n	800ea18 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e9d0:	693b      	ldr	r3, [r7, #16]
 800e9d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d01c      	beq.n	800ea14 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	681a      	ldr	r2, [r3, #0]
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e9e2:	041b      	lsls	r3, r3, #16
 800e9e4:	4619      	mov	r1, r3
 800e9e6:	4610      	mov	r0, r2
 800e9e8:	f004 f9c7 	bl	8012d7a <SDMMC_CmdAppCommand>
 800e9ec:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e9ee:	697b      	ldr	r3, [r7, #20]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d001      	beq.n	800e9f8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e9f4:	697b      	ldr	r3, [r7, #20]
 800e9f6:	e00f      	b.n	800ea18 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	2100      	movs	r1, #0
 800e9fe:	4618      	mov	r0, r3
 800ea00:	f004 f9fe 	bl	8012e00 <SDMMC_CmdBusWidth>
 800ea04:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ea06:	697b      	ldr	r3, [r7, #20]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d001      	beq.n	800ea10 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800ea0c:	697b      	ldr	r3, [r7, #20]
 800ea0e:	e003      	b.n	800ea18 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ea10:	2300      	movs	r3, #0
 800ea12:	e001      	b.n	800ea18 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ea14:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800ea18:	4618      	mov	r0, r3
 800ea1a:	3718      	adds	r7, #24
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd80      	pop	{r7, pc}

0800ea20 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b08e      	sub	sp, #56	@ 0x38
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
 800ea28:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ea2a:	f7f4 ffdd 	bl	80039e8 <HAL_GetTick>
 800ea2e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800ea30:	2300      	movs	r3, #0
 800ea32:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800ea34:	2300      	movs	r3, #0
 800ea36:	60bb      	str	r3, [r7, #8]
 800ea38:	2300      	movs	r3, #0
 800ea3a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800ea3c:	683b      	ldr	r3, [r7, #0]
 800ea3e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	2108      	movs	r1, #8
 800ea46:	4618      	mov	r0, r3
 800ea48:	f004 f84a 	bl	8012ae0 <SDMMC_CmdBlockLength>
 800ea4c:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ea4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d001      	beq.n	800ea58 <SD_FindSCR+0x38>
  {
    return errorstate;
 800ea54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea56:	e0ad      	b.n	800ebb4 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681a      	ldr	r2, [r3, #0]
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ea60:	041b      	lsls	r3, r3, #16
 800ea62:	4619      	mov	r1, r3
 800ea64:	4610      	mov	r0, r2
 800ea66:	f004 f988 	bl	8012d7a <SDMMC_CmdAppCommand>
 800ea6a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ea6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d001      	beq.n	800ea76 <SD_FindSCR+0x56>
  {
    return errorstate;
 800ea72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea74:	e09e      	b.n	800ebb4 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ea76:	f04f 33ff 	mov.w	r3, #4294967295
 800ea7a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800ea7c:	2308      	movs	r3, #8
 800ea7e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800ea80:	2330      	movs	r3, #48	@ 0x30
 800ea82:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ea84:	2302      	movs	r3, #2
 800ea86:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ea88:	2300      	movs	r3, #0
 800ea8a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ea8c:	2301      	movs	r3, #1
 800ea8e:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	f107 0210 	add.w	r2, r7, #16
 800ea98:	4611      	mov	r1, r2
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	f003 fff4 	bl	8012a88 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	f004 f9ce 	bl	8012e46 <SDMMC_CmdSendSCR>
 800eaaa:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800eaac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d027      	beq.n	800eb02 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800eab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eab4:	e07e      	b.n	800ebb4 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eabc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d113      	bne.n	800eaec <SD_FindSCR+0xcc>
 800eac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d110      	bne.n	800eaec <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	4618      	mov	r0, r3
 800ead0:	f003 ff52 	bl	8012978 <SDMMC_ReadFIFO>
 800ead4:	4603      	mov	r3, r0
 800ead6:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	4618      	mov	r0, r3
 800eade:	f003 ff4b 	bl	8012978 <SDMMC_ReadFIFO>
 800eae2:	4603      	mov	r3, r0
 800eae4:	60fb      	str	r3, [r7, #12]
      index++;
 800eae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eae8:	3301      	adds	r3, #1
 800eaea:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800eaec:	f7f4 ff7c 	bl	80039e8 <HAL_GetTick>
 800eaf0:	4602      	mov	r2, r0
 800eaf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaf4:	1ad3      	subs	r3, r2, r3
 800eaf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eafa:	d102      	bne.n	800eb02 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800eafc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800eb00:	e058      	b.n	800ebb4 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800eb08:	f240 532a 	movw	r3, #1322	@ 0x52a
 800eb0c:	4013      	ands	r3, r2
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d0d1      	beq.n	800eab6 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eb18:	f003 0308 	and.w	r3, r3, #8
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d005      	beq.n	800eb2c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	2208      	movs	r2, #8
 800eb26:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800eb28:	2308      	movs	r3, #8
 800eb2a:	e043      	b.n	800ebb4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eb32:	f003 0302 	and.w	r3, r3, #2
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d005      	beq.n	800eb46 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	2202      	movs	r2, #2
 800eb40:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800eb42:	2302      	movs	r3, #2
 800eb44:	e036      	b.n	800ebb4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eb4c:	f003 0320 	and.w	r3, r3, #32
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d005      	beq.n	800eb60 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	2220      	movs	r2, #32
 800eb5a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800eb5c:	2320      	movs	r3, #32
 800eb5e:	e029      	b.n	800ebb4 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	4a15      	ldr	r2, [pc, #84]	@ (800ebbc <SD_FindSCR+0x19c>)
 800eb66:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	061a      	lsls	r2, r3, #24
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	021b      	lsls	r3, r3, #8
 800eb70:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800eb74:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	0a1b      	lsrs	r3, r3, #8
 800eb7a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800eb7e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	0e1b      	lsrs	r3, r3, #24
 800eb84:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800eb86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb88:	601a      	str	r2, [r3, #0]
    scr++;
 800eb8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb8c:	3304      	adds	r3, #4
 800eb8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800eb90:	68bb      	ldr	r3, [r7, #8]
 800eb92:	061a      	lsls	r2, r3, #24
 800eb94:	68bb      	ldr	r3, [r7, #8]
 800eb96:	021b      	lsls	r3, r3, #8
 800eb98:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800eb9c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800eb9e:	68bb      	ldr	r3, [r7, #8]
 800eba0:	0a1b      	lsrs	r3, r3, #8
 800eba2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800eba6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800eba8:	68bb      	ldr	r3, [r7, #8]
 800ebaa:	0e1b      	lsrs	r3, r3, #24
 800ebac:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ebae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebb0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800ebb2:	2300      	movs	r3, #0
}
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	3738      	adds	r7, #56	@ 0x38
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	bd80      	pop	{r7, pc}
 800ebbc:	18000f3a 	.word	0x18000f3a

0800ebc0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b086      	sub	sp, #24
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ebcc:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ebd2:	2b1f      	cmp	r3, #31
 800ebd4:	d936      	bls.n	800ec44 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	617b      	str	r3, [r7, #20]
 800ebda:	e027      	b.n	800ec2c <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	f003 fec9 	bl	8012978 <SDMMC_ReadFIFO>
 800ebe6:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	b2da      	uxtb	r2, r3
 800ebec:	693b      	ldr	r3, [r7, #16]
 800ebee:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ebf0:	693b      	ldr	r3, [r7, #16]
 800ebf2:	3301      	adds	r3, #1
 800ebf4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	0a1b      	lsrs	r3, r3, #8
 800ebfa:	b2da      	uxtb	r2, r3
 800ebfc:	693b      	ldr	r3, [r7, #16]
 800ebfe:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ec00:	693b      	ldr	r3, [r7, #16]
 800ec02:	3301      	adds	r3, #1
 800ec04:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	0c1b      	lsrs	r3, r3, #16
 800ec0a:	b2da      	uxtb	r2, r3
 800ec0c:	693b      	ldr	r3, [r7, #16]
 800ec0e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ec10:	693b      	ldr	r3, [r7, #16]
 800ec12:	3301      	adds	r3, #1
 800ec14:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	0e1b      	lsrs	r3, r3, #24
 800ec1a:	b2da      	uxtb	r2, r3
 800ec1c:	693b      	ldr	r3, [r7, #16]
 800ec1e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ec20:	693b      	ldr	r3, [r7, #16]
 800ec22:	3301      	adds	r3, #1
 800ec24:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800ec26:	697b      	ldr	r3, [r7, #20]
 800ec28:	3301      	adds	r3, #1
 800ec2a:	617b      	str	r3, [r7, #20]
 800ec2c:	697b      	ldr	r3, [r7, #20]
 800ec2e:	2b07      	cmp	r3, #7
 800ec30:	d9d4      	bls.n	800ebdc <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	693a      	ldr	r2, [r7, #16]
 800ec36:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec3c:	f1a3 0220 	sub.w	r2, r3, #32
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800ec44:	bf00      	nop
 800ec46:	3718      	adds	r7, #24
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	bd80      	pop	{r7, pc}

0800ec4c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b086      	sub	sp, #24
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	69db      	ldr	r3, [r3, #28]
 800ec58:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	6a1b      	ldr	r3, [r3, #32]
 800ec5e:	2b1f      	cmp	r3, #31
 800ec60:	d93a      	bls.n	800ecd8 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800ec62:	2300      	movs	r3, #0
 800ec64:	617b      	str	r3, [r7, #20]
 800ec66:	e02b      	b.n	800ecc0 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800ec68:	693b      	ldr	r3, [r7, #16]
 800ec6a:	781b      	ldrb	r3, [r3, #0]
 800ec6c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ec6e:	693b      	ldr	r3, [r7, #16]
 800ec70:	3301      	adds	r3, #1
 800ec72:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800ec74:	693b      	ldr	r3, [r7, #16]
 800ec76:	781b      	ldrb	r3, [r3, #0]
 800ec78:	021a      	lsls	r2, r3, #8
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	4313      	orrs	r3, r2
 800ec7e:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ec80:	693b      	ldr	r3, [r7, #16]
 800ec82:	3301      	adds	r3, #1
 800ec84:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800ec86:	693b      	ldr	r3, [r7, #16]
 800ec88:	781b      	ldrb	r3, [r3, #0]
 800ec8a:	041a      	lsls	r2, r3, #16
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	4313      	orrs	r3, r2
 800ec90:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ec92:	693b      	ldr	r3, [r7, #16]
 800ec94:	3301      	adds	r3, #1
 800ec96:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800ec98:	693b      	ldr	r3, [r7, #16]
 800ec9a:	781b      	ldrb	r3, [r3, #0]
 800ec9c:	061a      	lsls	r2, r3, #24
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	4313      	orrs	r3, r2
 800eca2:	60fb      	str	r3, [r7, #12]
      tmp++;
 800eca4:	693b      	ldr	r3, [r7, #16]
 800eca6:	3301      	adds	r3, #1
 800eca8:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	f107 020c 	add.w	r2, r7, #12
 800ecb2:	4611      	mov	r1, r2
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	f003 fe6c 	bl	8012992 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800ecba:	697b      	ldr	r3, [r7, #20]
 800ecbc:	3301      	adds	r3, #1
 800ecbe:	617b      	str	r3, [r7, #20]
 800ecc0:	697b      	ldr	r3, [r7, #20]
 800ecc2:	2b07      	cmp	r3, #7
 800ecc4:	d9d0      	bls.n	800ec68 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	693a      	ldr	r2, [r7, #16]
 800ecca:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	6a1b      	ldr	r3, [r3, #32]
 800ecd0:	f1a3 0220 	sub.w	r2, r3, #32
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	621a      	str	r2, [r3, #32]
  }
}
 800ecd8:	bf00      	nop
 800ecda:	3718      	adds	r7, #24
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	bd80      	pop	{r7, pc}

0800ece0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800ece0:	b480      	push	{r7}
 800ece2:	b083      	sub	sp, #12
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800ece8:	bf00      	nop
 800ecea:	370c      	adds	r7, #12
 800ecec:	46bd      	mov	sp, r7
 800ecee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf2:	4770      	bx	lr

0800ecf4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800ecf4:	b480      	push	{r7}
 800ecf6:	b083      	sub	sp, #12
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800ecfc:	bf00      	nop
 800ecfe:	370c      	adds	r7, #12
 800ed00:	46bd      	mov	sp, r7
 800ed02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed06:	4770      	bx	lr

0800ed08 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800ed08:	b480      	push	{r7}
 800ed0a:	b083      	sub	sp, #12
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800ed10:	bf00      	nop
 800ed12:	370c      	adds	r7, #12
 800ed14:	46bd      	mov	sp, r7
 800ed16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1a:	4770      	bx	lr

0800ed1c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800ed1c:	b480      	push	{r7}
 800ed1e:	b083      	sub	sp, #12
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800ed24:	bf00      	nop
 800ed26:	370c      	adds	r7, #12
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2e:	4770      	bx	lr

0800ed30 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b084      	sub	sp, #16
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d101      	bne.n	800ed42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ed3e:	2301      	movs	r3, #1
 800ed40:	e10f      	b.n	800ef62 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	2200      	movs	r2, #0
 800ed46:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	4a87      	ldr	r2, [pc, #540]	@ (800ef6c <HAL_SPI_Init+0x23c>)
 800ed4e:	4293      	cmp	r3, r2
 800ed50:	d00f      	beq.n	800ed72 <HAL_SPI_Init+0x42>
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	4a86      	ldr	r2, [pc, #536]	@ (800ef70 <HAL_SPI_Init+0x240>)
 800ed58:	4293      	cmp	r3, r2
 800ed5a:	d00a      	beq.n	800ed72 <HAL_SPI_Init+0x42>
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	4a84      	ldr	r2, [pc, #528]	@ (800ef74 <HAL_SPI_Init+0x244>)
 800ed62:	4293      	cmp	r3, r2
 800ed64:	d005      	beq.n	800ed72 <HAL_SPI_Init+0x42>
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	68db      	ldr	r3, [r3, #12]
 800ed6a:	2b0f      	cmp	r3, #15
 800ed6c:	d901      	bls.n	800ed72 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ed6e:	2301      	movs	r3, #1
 800ed70:	e0f7      	b.n	800ef62 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ed72:	6878      	ldr	r0, [r7, #4]
 800ed74:	f001 f968 	bl	8010048 <SPI_GetPacketSize>
 800ed78:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	4a7b      	ldr	r2, [pc, #492]	@ (800ef6c <HAL_SPI_Init+0x23c>)
 800ed80:	4293      	cmp	r3, r2
 800ed82:	d00c      	beq.n	800ed9e <HAL_SPI_Init+0x6e>
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	4a79      	ldr	r2, [pc, #484]	@ (800ef70 <HAL_SPI_Init+0x240>)
 800ed8a:	4293      	cmp	r3, r2
 800ed8c:	d007      	beq.n	800ed9e <HAL_SPI_Init+0x6e>
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	4a78      	ldr	r2, [pc, #480]	@ (800ef74 <HAL_SPI_Init+0x244>)
 800ed94:	4293      	cmp	r3, r2
 800ed96:	d002      	beq.n	800ed9e <HAL_SPI_Init+0x6e>
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	2b08      	cmp	r3, #8
 800ed9c:	d811      	bhi.n	800edc2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800eda2:	4a72      	ldr	r2, [pc, #456]	@ (800ef6c <HAL_SPI_Init+0x23c>)
 800eda4:	4293      	cmp	r3, r2
 800eda6:	d009      	beq.n	800edbc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	4a70      	ldr	r2, [pc, #448]	@ (800ef70 <HAL_SPI_Init+0x240>)
 800edae:	4293      	cmp	r3, r2
 800edb0:	d004      	beq.n	800edbc <HAL_SPI_Init+0x8c>
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	4a6f      	ldr	r2, [pc, #444]	@ (800ef74 <HAL_SPI_Init+0x244>)
 800edb8:	4293      	cmp	r3, r2
 800edba:	d104      	bne.n	800edc6 <HAL_SPI_Init+0x96>
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	2b10      	cmp	r3, #16
 800edc0:	d901      	bls.n	800edc6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800edc2:	2301      	movs	r3, #1
 800edc4:	e0cd      	b.n	800ef62 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800edcc:	b2db      	uxtb	r3, r3
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d106      	bne.n	800ede0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	2200      	movs	r2, #0
 800edd6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800edda:	6878      	ldr	r0, [r7, #4]
 800eddc:	f7f4 fa68 	bl	80032b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	2202      	movs	r2, #2
 800ede4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	681a      	ldr	r2, [r3, #0]
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	f022 0201 	bic.w	r2, r2, #1
 800edf6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	689b      	ldr	r3, [r3, #8]
 800edfe:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800ee02:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	699b      	ldr	r3, [r3, #24]
 800ee08:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ee0c:	d119      	bne.n	800ee42 <HAL_SPI_Init+0x112>
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	685b      	ldr	r3, [r3, #4]
 800ee12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ee16:	d103      	bne.n	800ee20 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d008      	beq.n	800ee32 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d10c      	bne.n	800ee42 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ee2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ee30:	d107      	bne.n	800ee42 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	681a      	ldr	r2, [r3, #0]
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ee40:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	685b      	ldr	r3, [r3, #4]
 800ee46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d00f      	beq.n	800ee6e <HAL_SPI_Init+0x13e>
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	68db      	ldr	r3, [r3, #12]
 800ee52:	2b06      	cmp	r3, #6
 800ee54:	d90b      	bls.n	800ee6e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	430a      	orrs	r2, r1
 800ee6a:	601a      	str	r2, [r3, #0]
 800ee6c:	e007      	b.n	800ee7e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	681a      	ldr	r2, [r3, #0]
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ee7c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	69da      	ldr	r2, [r3, #28]
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee86:	431a      	orrs	r2, r3
 800ee88:	68bb      	ldr	r3, [r7, #8]
 800ee8a:	431a      	orrs	r2, r3
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ee90:	ea42 0103 	orr.w	r1, r2, r3
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	68da      	ldr	r2, [r3, #12]
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	430a      	orrs	r2, r1
 800ee9e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eea8:	431a      	orrs	r2, r3
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eeae:	431a      	orrs	r2, r3
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	699b      	ldr	r3, [r3, #24]
 800eeb4:	431a      	orrs	r2, r3
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	691b      	ldr	r3, [r3, #16]
 800eeba:	431a      	orrs	r2, r3
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	695b      	ldr	r3, [r3, #20]
 800eec0:	431a      	orrs	r2, r3
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	6a1b      	ldr	r3, [r3, #32]
 800eec6:	431a      	orrs	r2, r3
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	685b      	ldr	r3, [r3, #4]
 800eecc:	431a      	orrs	r2, r3
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eed2:	431a      	orrs	r2, r3
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	689b      	ldr	r3, [r3, #8]
 800eed8:	431a      	orrs	r2, r3
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800eede:	ea42 0103 	orr.w	r1, r2, r3
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	430a      	orrs	r2, r1
 800eeec:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	685b      	ldr	r3, [r3, #4]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d113      	bne.n	800ef1e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	689b      	ldr	r3, [r3, #8]
 800eefc:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ef08:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	689b      	ldr	r3, [r3, #8]
 800ef10:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ef1c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	f022 0201 	bic.w	r2, r2, #1
 800ef2c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	685b      	ldr	r3, [r3, #4]
 800ef32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d00a      	beq.n	800ef50 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	68db      	ldr	r3, [r3, #12]
 800ef40:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	430a      	orrs	r2, r1
 800ef4e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	2200      	movs	r2, #0
 800ef54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	2201      	movs	r2, #1
 800ef5c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800ef60:	2300      	movs	r3, #0
}
 800ef62:	4618      	mov	r0, r3
 800ef64:	3710      	adds	r7, #16
 800ef66:	46bd      	mov	sp, r7
 800ef68:	bd80      	pop	{r7, pc}
 800ef6a:	bf00      	nop
 800ef6c:	40013000 	.word	0x40013000
 800ef70:	40003800 	.word	0x40003800
 800ef74:	40003c00 	.word	0x40003c00

0800ef78 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b088      	sub	sp, #32
 800ef7c:	af02      	add	r7, sp, #8
 800ef7e:	60f8      	str	r0, [r7, #12]
 800ef80:	60b9      	str	r1, [r7, #8]
 800ef82:	603b      	str	r3, [r7, #0]
 800ef84:	4613      	mov	r3, r2
 800ef86:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	3320      	adds	r3, #32
 800ef8e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ef90:	f7f4 fd2a 	bl	80039e8 <HAL_GetTick>
 800ef94:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ef9c:	b2db      	uxtb	r3, r3
 800ef9e:	2b01      	cmp	r3, #1
 800efa0:	d001      	beq.n	800efa6 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800efa2:	2302      	movs	r3, #2
 800efa4:	e1d1      	b.n	800f34a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800efa6:	68bb      	ldr	r3, [r7, #8]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d002      	beq.n	800efb2 <HAL_SPI_Transmit+0x3a>
 800efac:	88fb      	ldrh	r3, [r7, #6]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d101      	bne.n	800efb6 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800efb2:	2301      	movs	r3, #1
 800efb4:	e1c9      	b.n	800f34a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800efbc:	2b01      	cmp	r3, #1
 800efbe:	d101      	bne.n	800efc4 <HAL_SPI_Transmit+0x4c>
 800efc0:	2302      	movs	r3, #2
 800efc2:	e1c2      	b.n	800f34a <HAL_SPI_Transmit+0x3d2>
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	2201      	movs	r2, #1
 800efc8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	2203      	movs	r2, #3
 800efd0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	2200      	movs	r2, #0
 800efd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	68ba      	ldr	r2, [r7, #8]
 800efe0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	88fa      	ldrh	r2, [r7, #6]
 800efe6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	88fa      	ldrh	r2, [r7, #6]
 800efee:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	2200      	movs	r2, #0
 800eff6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	2200      	movs	r2, #0
 800effc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	2200      	movs	r2, #0
 800f004:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	2200      	movs	r2, #0
 800f00c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	2200      	movs	r2, #0
 800f012:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	689b      	ldr	r3, [r3, #8]
 800f018:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800f01c:	d108      	bne.n	800f030 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	681a      	ldr	r2, [r3, #0]
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f02c:	601a      	str	r2, [r3, #0]
 800f02e:	e009      	b.n	800f044 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	68db      	ldr	r3, [r3, #12]
 800f036:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800f042:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	685a      	ldr	r2, [r3, #4]
 800f04a:	4b96      	ldr	r3, [pc, #600]	@ (800f2a4 <HAL_SPI_Transmit+0x32c>)
 800f04c:	4013      	ands	r3, r2
 800f04e:	88f9      	ldrh	r1, [r7, #6]
 800f050:	68fa      	ldr	r2, [r7, #12]
 800f052:	6812      	ldr	r2, [r2, #0]
 800f054:	430b      	orrs	r3, r1
 800f056:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	681a      	ldr	r2, [r3, #0]
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	f042 0201 	orr.w	r2, r2, #1
 800f066:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	685b      	ldr	r3, [r3, #4]
 800f06c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f070:	d107      	bne.n	800f082 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	681a      	ldr	r2, [r3, #0]
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f080:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	68db      	ldr	r3, [r3, #12]
 800f086:	2b0f      	cmp	r3, #15
 800f088:	d947      	bls.n	800f11a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f08a:	e03f      	b.n	800f10c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	695b      	ldr	r3, [r3, #20]
 800f092:	f003 0302 	and.w	r3, r3, #2
 800f096:	2b02      	cmp	r3, #2
 800f098:	d114      	bne.n	800f0c4 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	6812      	ldr	r2, [r2, #0]
 800f0a4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f0aa:	1d1a      	adds	r2, r3, #4
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f0b6:	b29b      	uxth	r3, r3
 800f0b8:	3b01      	subs	r3, #1
 800f0ba:	b29a      	uxth	r2, r3
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800f0c2:	e023      	b.n	800f10c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f0c4:	f7f4 fc90 	bl	80039e8 <HAL_GetTick>
 800f0c8:	4602      	mov	r2, r0
 800f0ca:	693b      	ldr	r3, [r7, #16]
 800f0cc:	1ad3      	subs	r3, r2, r3
 800f0ce:	683a      	ldr	r2, [r7, #0]
 800f0d0:	429a      	cmp	r2, r3
 800f0d2:	d803      	bhi.n	800f0dc <HAL_SPI_Transmit+0x164>
 800f0d4:	683b      	ldr	r3, [r7, #0]
 800f0d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0da:	d102      	bne.n	800f0e2 <HAL_SPI_Transmit+0x16a>
 800f0dc:	683b      	ldr	r3, [r7, #0]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d114      	bne.n	800f10c <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f0e2:	68f8      	ldr	r0, [r7, #12]
 800f0e4:	f000 fee2 	bl	800feac <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f0ee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	2201      	movs	r2, #1
 800f0fc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	2200      	movs	r2, #0
 800f104:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800f108:	2303      	movs	r3, #3
 800f10a:	e11e      	b.n	800f34a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f112:	b29b      	uxth	r3, r3
 800f114:	2b00      	cmp	r3, #0
 800f116:	d1b9      	bne.n	800f08c <HAL_SPI_Transmit+0x114>
 800f118:	e0f1      	b.n	800f2fe <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	68db      	ldr	r3, [r3, #12]
 800f11e:	2b07      	cmp	r3, #7
 800f120:	f240 80e6 	bls.w	800f2f0 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f124:	e05d      	b.n	800f1e2 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	695b      	ldr	r3, [r3, #20]
 800f12c:	f003 0302 	and.w	r3, r3, #2
 800f130:	2b02      	cmp	r3, #2
 800f132:	d132      	bne.n	800f19a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f13a:	b29b      	uxth	r3, r3
 800f13c:	2b01      	cmp	r3, #1
 800f13e:	d918      	bls.n	800f172 <HAL_SPI_Transmit+0x1fa>
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f144:	2b00      	cmp	r3, #0
 800f146:	d014      	beq.n	800f172 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	6812      	ldr	r2, [r2, #0]
 800f152:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f158:	1d1a      	adds	r2, r3, #4
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f164:	b29b      	uxth	r3, r3
 800f166:	3b02      	subs	r3, #2
 800f168:	b29a      	uxth	r2, r3
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800f170:	e037      	b.n	800f1e2 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f176:	881a      	ldrh	r2, [r3, #0]
 800f178:	697b      	ldr	r3, [r7, #20]
 800f17a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f180:	1c9a      	adds	r2, r3, #2
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f18c:	b29b      	uxth	r3, r3
 800f18e:	3b01      	subs	r3, #1
 800f190:	b29a      	uxth	r2, r3
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800f198:	e023      	b.n	800f1e2 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f19a:	f7f4 fc25 	bl	80039e8 <HAL_GetTick>
 800f19e:	4602      	mov	r2, r0
 800f1a0:	693b      	ldr	r3, [r7, #16]
 800f1a2:	1ad3      	subs	r3, r2, r3
 800f1a4:	683a      	ldr	r2, [r7, #0]
 800f1a6:	429a      	cmp	r2, r3
 800f1a8:	d803      	bhi.n	800f1b2 <HAL_SPI_Transmit+0x23a>
 800f1aa:	683b      	ldr	r3, [r7, #0]
 800f1ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1b0:	d102      	bne.n	800f1b8 <HAL_SPI_Transmit+0x240>
 800f1b2:	683b      	ldr	r3, [r7, #0]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d114      	bne.n	800f1e2 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f1b8:	68f8      	ldr	r0, [r7, #12]
 800f1ba:	f000 fe77 	bl	800feac <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f1c4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	2201      	movs	r2, #1
 800f1d2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	2200      	movs	r2, #0
 800f1da:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800f1de:	2303      	movs	r3, #3
 800f1e0:	e0b3      	b.n	800f34a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f1e8:	b29b      	uxth	r3, r3
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d19b      	bne.n	800f126 <HAL_SPI_Transmit+0x1ae>
 800f1ee:	e086      	b.n	800f2fe <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	695b      	ldr	r3, [r3, #20]
 800f1f6:	f003 0302 	and.w	r3, r3, #2
 800f1fa:	2b02      	cmp	r3, #2
 800f1fc:	d154      	bne.n	800f2a8 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f204:	b29b      	uxth	r3, r3
 800f206:	2b03      	cmp	r3, #3
 800f208:	d918      	bls.n	800f23c <HAL_SPI_Transmit+0x2c4>
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f20e:	2b40      	cmp	r3, #64	@ 0x40
 800f210:	d914      	bls.n	800f23c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	6812      	ldr	r2, [r2, #0]
 800f21c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f222:	1d1a      	adds	r2, r3, #4
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f22e:	b29b      	uxth	r3, r3
 800f230:	3b04      	subs	r3, #4
 800f232:	b29a      	uxth	r2, r3
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800f23a:	e059      	b.n	800f2f0 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f242:	b29b      	uxth	r3, r3
 800f244:	2b01      	cmp	r3, #1
 800f246:	d917      	bls.n	800f278 <HAL_SPI_Transmit+0x300>
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d013      	beq.n	800f278 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f254:	881a      	ldrh	r2, [r3, #0]
 800f256:	697b      	ldr	r3, [r7, #20]
 800f258:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f25e:	1c9a      	adds	r2, r3, #2
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f26a:	b29b      	uxth	r3, r3
 800f26c:	3b02      	subs	r3, #2
 800f26e:	b29a      	uxth	r2, r3
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800f276:	e03b      	b.n	800f2f0 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	3320      	adds	r3, #32
 800f282:	7812      	ldrb	r2, [r2, #0]
 800f284:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f28a:	1c5a      	adds	r2, r3, #1
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f296:	b29b      	uxth	r3, r3
 800f298:	3b01      	subs	r3, #1
 800f29a:	b29a      	uxth	r2, r3
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800f2a2:	e025      	b.n	800f2f0 <HAL_SPI_Transmit+0x378>
 800f2a4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f2a8:	f7f4 fb9e 	bl	80039e8 <HAL_GetTick>
 800f2ac:	4602      	mov	r2, r0
 800f2ae:	693b      	ldr	r3, [r7, #16]
 800f2b0:	1ad3      	subs	r3, r2, r3
 800f2b2:	683a      	ldr	r2, [r7, #0]
 800f2b4:	429a      	cmp	r2, r3
 800f2b6:	d803      	bhi.n	800f2c0 <HAL_SPI_Transmit+0x348>
 800f2b8:	683b      	ldr	r3, [r7, #0]
 800f2ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2be:	d102      	bne.n	800f2c6 <HAL_SPI_Transmit+0x34e>
 800f2c0:	683b      	ldr	r3, [r7, #0]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d114      	bne.n	800f2f0 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f2c6:	68f8      	ldr	r0, [r7, #12]
 800f2c8:	f000 fdf0 	bl	800feac <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f2d2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	2201      	movs	r2, #1
 800f2e0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800f2ec:	2303      	movs	r3, #3
 800f2ee:	e02c      	b.n	800f34a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f2f6:	b29b      	uxth	r3, r3
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	f47f af79 	bne.w	800f1f0 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800f2fe:	693b      	ldr	r3, [r7, #16]
 800f300:	9300      	str	r3, [sp, #0]
 800f302:	683b      	ldr	r3, [r7, #0]
 800f304:	2200      	movs	r2, #0
 800f306:	2108      	movs	r1, #8
 800f308:	68f8      	ldr	r0, [r7, #12]
 800f30a:	f000 fe6f 	bl	800ffec <SPI_WaitOnFlagUntilTimeout>
 800f30e:	4603      	mov	r3, r0
 800f310:	2b00      	cmp	r3, #0
 800f312:	d007      	beq.n	800f324 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f31a:	f043 0220 	orr.w	r2, r3, #32
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f324:	68f8      	ldr	r0, [r7, #12]
 800f326:	f000 fdc1 	bl	800feac <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	2201      	movs	r2, #1
 800f32e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	2200      	movs	r2, #0
 800f336:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f340:	2b00      	cmp	r3, #0
 800f342:	d001      	beq.n	800f348 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800f344:	2301      	movs	r3, #1
 800f346:	e000      	b.n	800f34a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800f348:	2300      	movs	r3, #0
  }
}
 800f34a:	4618      	mov	r0, r3
 800f34c:	3718      	adds	r7, #24
 800f34e:	46bd      	mov	sp, r7
 800f350:	bd80      	pop	{r7, pc}
 800f352:	bf00      	nop

0800f354 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b088      	sub	sp, #32
 800f358:	af00      	add	r7, sp, #0
 800f35a:	60f8      	str	r0, [r7, #12]
 800f35c:	60b9      	str	r1, [r7, #8]
 800f35e:	603b      	str	r3, [r7, #0]
 800f360:	4613      	mov	r3, r2
 800f362:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f368:	095b      	lsrs	r3, r3, #5
 800f36a:	b29b      	uxth	r3, r3
 800f36c:	3301      	adds	r3, #1
 800f36e:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	3330      	adds	r3, #48	@ 0x30
 800f376:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f378:	f7f4 fb36 	bl	80039e8 <HAL_GetTick>
 800f37c:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800f384:	b2db      	uxtb	r3, r3
 800f386:	2b01      	cmp	r3, #1
 800f388:	d001      	beq.n	800f38e <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800f38a:	2302      	movs	r3, #2
 800f38c:	e250      	b.n	800f830 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f38e:	68bb      	ldr	r3, [r7, #8]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d002      	beq.n	800f39a <HAL_SPI_Receive+0x46>
 800f394:	88fb      	ldrh	r3, [r7, #6]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d101      	bne.n	800f39e <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800f39a:	2301      	movs	r3, #1
 800f39c:	e248      	b.n	800f830 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800f3a4:	2b01      	cmp	r3, #1
 800f3a6:	d101      	bne.n	800f3ac <HAL_SPI_Receive+0x58>
 800f3a8:	2302      	movs	r3, #2
 800f3aa:	e241      	b.n	800f830 <HAL_SPI_Receive+0x4dc>
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	2201      	movs	r2, #1
 800f3b0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	2204      	movs	r2, #4
 800f3b8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	2200      	movs	r2, #0
 800f3c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	68ba      	ldr	r2, [r7, #8]
 800f3c8:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	88fa      	ldrh	r2, [r7, #6]
 800f3ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	88fa      	ldrh	r2, [r7, #6]
 800f3d6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	2200      	movs	r2, #0
 800f3de:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	2200      	movs	r2, #0
 800f3e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	689b      	ldr	r3, [r3, #8]
 800f400:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800f404:	d108      	bne.n	800f418 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	681a      	ldr	r2, [r3, #0]
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800f414:	601a      	str	r2, [r3, #0]
 800f416:	e009      	b.n	800f42c <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	68db      	ldr	r3, [r3, #12]
 800f41e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800f42a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	685a      	ldr	r2, [r3, #4]
 800f432:	4b95      	ldr	r3, [pc, #596]	@ (800f688 <HAL_SPI_Receive+0x334>)
 800f434:	4013      	ands	r3, r2
 800f436:	88f9      	ldrh	r1, [r7, #6]
 800f438:	68fa      	ldr	r2, [r7, #12]
 800f43a:	6812      	ldr	r2, [r2, #0]
 800f43c:	430b      	orrs	r3, r1
 800f43e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	681a      	ldr	r2, [r3, #0]
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	f042 0201 	orr.w	r2, r2, #1
 800f44e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	685b      	ldr	r3, [r3, #4]
 800f454:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f458:	d107      	bne.n	800f46a <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	681a      	ldr	r2, [r3, #0]
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f468:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	68db      	ldr	r3, [r3, #12]
 800f46e:	2b0f      	cmp	r3, #15
 800f470:	d96c      	bls.n	800f54c <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f472:	e064      	b.n	800f53e <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	695b      	ldr	r3, [r3, #20]
 800f47a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	695b      	ldr	r3, [r3, #20]
 800f482:	f003 0301 	and.w	r3, r3, #1
 800f486:	2b01      	cmp	r3, #1
 800f488:	d114      	bne.n	800f4b4 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	681a      	ldr	r2, [r3, #0]
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f492:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800f494:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f49a:	1d1a      	adds	r2, r3, #4
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f4a6:	b29b      	uxth	r3, r3
 800f4a8:	3b01      	subs	r3, #1
 800f4aa:	b29a      	uxth	r2, r3
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f4b2:	e044      	b.n	800f53e <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f4ba:	b29b      	uxth	r3, r3
 800f4bc:	8bfa      	ldrh	r2, [r7, #30]
 800f4be:	429a      	cmp	r2, r3
 800f4c0:	d919      	bls.n	800f4f6 <HAL_SPI_Receive+0x1a2>
 800f4c2:	693b      	ldr	r3, [r7, #16]
 800f4c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d014      	beq.n	800f4f6 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	681a      	ldr	r2, [r3, #0]
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f4d4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800f4d6:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f4dc:	1d1a      	adds	r2, r3, #4
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f4e8:	b29b      	uxth	r3, r3
 800f4ea:	3b01      	subs	r3, #1
 800f4ec:	b29a      	uxth	r2, r3
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f4f4:	e023      	b.n	800f53e <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f4f6:	f7f4 fa77 	bl	80039e8 <HAL_GetTick>
 800f4fa:	4602      	mov	r2, r0
 800f4fc:	697b      	ldr	r3, [r7, #20]
 800f4fe:	1ad3      	subs	r3, r2, r3
 800f500:	683a      	ldr	r2, [r7, #0]
 800f502:	429a      	cmp	r2, r3
 800f504:	d803      	bhi.n	800f50e <HAL_SPI_Receive+0x1ba>
 800f506:	683b      	ldr	r3, [r7, #0]
 800f508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f50c:	d102      	bne.n	800f514 <HAL_SPI_Receive+0x1c0>
 800f50e:	683b      	ldr	r3, [r7, #0]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d114      	bne.n	800f53e <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f514:	68f8      	ldr	r0, [r7, #12]
 800f516:	f000 fcc9 	bl	800feac <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f520:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	2201      	movs	r2, #1
 800f52e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	2200      	movs	r2, #0
 800f536:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800f53a:	2303      	movs	r3, #3
 800f53c:	e178      	b.n	800f830 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f544:	b29b      	uxth	r3, r3
 800f546:	2b00      	cmp	r3, #0
 800f548:	d194      	bne.n	800f474 <HAL_SPI_Receive+0x120>
 800f54a:	e15e      	b.n	800f80a <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	68db      	ldr	r3, [r3, #12]
 800f550:	2b07      	cmp	r3, #7
 800f552:	f240 8153 	bls.w	800f7fc <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f556:	e08f      	b.n	800f678 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	695b      	ldr	r3, [r3, #20]
 800f55e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	695b      	ldr	r3, [r3, #20]
 800f566:	f003 0301 	and.w	r3, r3, #1
 800f56a:	2b01      	cmp	r3, #1
 800f56c:	d114      	bne.n	800f598 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f572:	69ba      	ldr	r2, [r7, #24]
 800f574:	8812      	ldrh	r2, [r2, #0]
 800f576:	b292      	uxth	r2, r2
 800f578:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f57e:	1c9a      	adds	r2, r3, #2
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f58a:	b29b      	uxth	r3, r3
 800f58c:	3b01      	subs	r3, #1
 800f58e:	b29a      	uxth	r2, r3
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f596:	e06f      	b.n	800f678 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f59e:	b29b      	uxth	r3, r3
 800f5a0:	8bfa      	ldrh	r2, [r7, #30]
 800f5a2:	429a      	cmp	r2, r3
 800f5a4:	d924      	bls.n	800f5f0 <HAL_SPI_Receive+0x29c>
 800f5a6:	693b      	ldr	r3, [r7, #16]
 800f5a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d01f      	beq.n	800f5f0 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f5b4:	69ba      	ldr	r2, [r7, #24]
 800f5b6:	8812      	ldrh	r2, [r2, #0]
 800f5b8:	b292      	uxth	r2, r2
 800f5ba:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f5c0:	1c9a      	adds	r2, r3, #2
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f5ca:	69ba      	ldr	r2, [r7, #24]
 800f5cc:	8812      	ldrh	r2, [r2, #0]
 800f5ce:	b292      	uxth	r2, r2
 800f5d0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f5d6:	1c9a      	adds	r2, r3, #2
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f5e2:	b29b      	uxth	r3, r3
 800f5e4:	3b02      	subs	r3, #2
 800f5e6:	b29a      	uxth	r2, r3
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f5ee:	e043      	b.n	800f678 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f5f6:	b29b      	uxth	r3, r3
 800f5f8:	2b01      	cmp	r3, #1
 800f5fa:	d119      	bne.n	800f630 <HAL_SPI_Receive+0x2dc>
 800f5fc:	693b      	ldr	r3, [r7, #16]
 800f5fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800f602:	2b00      	cmp	r3, #0
 800f604:	d014      	beq.n	800f630 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f60a:	69ba      	ldr	r2, [r7, #24]
 800f60c:	8812      	ldrh	r2, [r2, #0]
 800f60e:	b292      	uxth	r2, r2
 800f610:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f616:	1c9a      	adds	r2, r3, #2
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f622:	b29b      	uxth	r3, r3
 800f624:	3b01      	subs	r3, #1
 800f626:	b29a      	uxth	r2, r3
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f62e:	e023      	b.n	800f678 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f630:	f7f4 f9da 	bl	80039e8 <HAL_GetTick>
 800f634:	4602      	mov	r2, r0
 800f636:	697b      	ldr	r3, [r7, #20]
 800f638:	1ad3      	subs	r3, r2, r3
 800f63a:	683a      	ldr	r2, [r7, #0]
 800f63c:	429a      	cmp	r2, r3
 800f63e:	d803      	bhi.n	800f648 <HAL_SPI_Receive+0x2f4>
 800f640:	683b      	ldr	r3, [r7, #0]
 800f642:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f646:	d102      	bne.n	800f64e <HAL_SPI_Receive+0x2fa>
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d114      	bne.n	800f678 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f64e:	68f8      	ldr	r0, [r7, #12]
 800f650:	f000 fc2c 	bl	800feac <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f65a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	2201      	movs	r2, #1
 800f668:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	2200      	movs	r2, #0
 800f670:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800f674:	2303      	movs	r3, #3
 800f676:	e0db      	b.n	800f830 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f67e:	b29b      	uxth	r3, r3
 800f680:	2b00      	cmp	r3, #0
 800f682:	f47f af69 	bne.w	800f558 <HAL_SPI_Receive+0x204>
 800f686:	e0c0      	b.n	800f80a <HAL_SPI_Receive+0x4b6>
 800f688:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	695b      	ldr	r3, [r3, #20]
 800f692:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	695b      	ldr	r3, [r3, #20]
 800f69a:	f003 0301 	and.w	r3, r3, #1
 800f69e:	2b01      	cmp	r3, #1
 800f6a0:	d117      	bne.n	800f6d2 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f6ae:	7812      	ldrb	r2, [r2, #0]
 800f6b0:	b2d2      	uxtb	r2, r2
 800f6b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f6b8:	1c5a      	adds	r2, r3, #1
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f6c4:	b29b      	uxth	r3, r3
 800f6c6:	3b01      	subs	r3, #1
 800f6c8:	b29a      	uxth	r2, r3
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f6d0:	e094      	b.n	800f7fc <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f6d8:	b29b      	uxth	r3, r3
 800f6da:	8bfa      	ldrh	r2, [r7, #30]
 800f6dc:	429a      	cmp	r2, r3
 800f6de:	d946      	bls.n	800f76e <HAL_SPI_Receive+0x41a>
 800f6e0:	693b      	ldr	r3, [r7, #16]
 800f6e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d041      	beq.n	800f76e <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f6f6:	7812      	ldrb	r2, [r2, #0]
 800f6f8:	b2d2      	uxtb	r2, r2
 800f6fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f700:	1c5a      	adds	r2, r3, #1
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f712:	7812      	ldrb	r2, [r2, #0]
 800f714:	b2d2      	uxtb	r2, r2
 800f716:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f71c:	1c5a      	adds	r2, r3, #1
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f72e:	7812      	ldrb	r2, [r2, #0]
 800f730:	b2d2      	uxtb	r2, r2
 800f732:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f738:	1c5a      	adds	r2, r3, #1
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f74a:	7812      	ldrb	r2, [r2, #0]
 800f74c:	b2d2      	uxtb	r2, r2
 800f74e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f754:	1c5a      	adds	r2, r3, #1
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f760:	b29b      	uxth	r3, r3
 800f762:	3b04      	subs	r3, #4
 800f764:	b29a      	uxth	r2, r3
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f76c:	e046      	b.n	800f7fc <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f774:	b29b      	uxth	r3, r3
 800f776:	2b03      	cmp	r3, #3
 800f778:	d81c      	bhi.n	800f7b4 <HAL_SPI_Receive+0x460>
 800f77a:	693b      	ldr	r3, [r7, #16]
 800f77c:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800f780:	2b00      	cmp	r3, #0
 800f782:	d017      	beq.n	800f7b4 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f790:	7812      	ldrb	r2, [r2, #0]
 800f792:	b2d2      	uxtb	r2, r2
 800f794:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f79a:	1c5a      	adds	r2, r3, #1
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f7a6:	b29b      	uxth	r3, r3
 800f7a8:	3b01      	subs	r3, #1
 800f7aa:	b29a      	uxth	r2, r3
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f7b2:	e023      	b.n	800f7fc <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f7b4:	f7f4 f918 	bl	80039e8 <HAL_GetTick>
 800f7b8:	4602      	mov	r2, r0
 800f7ba:	697b      	ldr	r3, [r7, #20]
 800f7bc:	1ad3      	subs	r3, r2, r3
 800f7be:	683a      	ldr	r2, [r7, #0]
 800f7c0:	429a      	cmp	r2, r3
 800f7c2:	d803      	bhi.n	800f7cc <HAL_SPI_Receive+0x478>
 800f7c4:	683b      	ldr	r3, [r7, #0]
 800f7c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7ca:	d102      	bne.n	800f7d2 <HAL_SPI_Receive+0x47e>
 800f7cc:	683b      	ldr	r3, [r7, #0]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d114      	bne.n	800f7fc <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f7d2:	68f8      	ldr	r0, [r7, #12]
 800f7d4:	f000 fb6a 	bl	800feac <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f7de:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	2201      	movs	r2, #1
 800f7ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	2200      	movs	r2, #0
 800f7f4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800f7f8:	2303      	movs	r3, #3
 800f7fa:	e019      	b.n	800f830 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f802:	b29b      	uxth	r3, r3
 800f804:	2b00      	cmp	r3, #0
 800f806:	f47f af41 	bne.w	800f68c <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f80a:	68f8      	ldr	r0, [r7, #12]
 800f80c:	f000 fb4e 	bl	800feac <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	2201      	movs	r2, #1
 800f814:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	2200      	movs	r2, #0
 800f81c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f826:	2b00      	cmp	r3, #0
 800f828:	d001      	beq.n	800f82e <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800f82a:	2301      	movs	r3, #1
 800f82c:	e000      	b.n	800f830 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800f82e:	2300      	movs	r3, #0
  }
}
 800f830:	4618      	mov	r0, r3
 800f832:	3720      	adds	r7, #32
 800f834:	46bd      	mov	sp, r7
 800f836:	bd80      	pop	{r7, pc}

0800f838 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b08e      	sub	sp, #56	@ 0x38
 800f83c:	af02      	add	r7, sp, #8
 800f83e:	60f8      	str	r0, [r7, #12]
 800f840:	60b9      	str	r1, [r7, #8]
 800f842:	607a      	str	r2, [r7, #4]
 800f844:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	3320      	adds	r3, #32
 800f84c:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	3330      	adds	r3, #48	@ 0x30
 800f854:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f85a:	095b      	lsrs	r3, r3, #5
 800f85c:	b29b      	uxth	r3, r3
 800f85e:	3301      	adds	r3, #1
 800f860:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f862:	f7f4 f8c1 	bl	80039e8 <HAL_GetTick>
 800f866:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800f868:	887b      	ldrh	r3, [r7, #2]
 800f86a:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800f86c:	887b      	ldrh	r3, [r7, #2]
 800f86e:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800f876:	b2db      	uxtb	r3, r3
 800f878:	2b01      	cmp	r3, #1
 800f87a:	d001      	beq.n	800f880 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800f87c:	2302      	movs	r3, #2
 800f87e:	e310      	b.n	800fea2 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800f880:	68bb      	ldr	r3, [r7, #8]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d005      	beq.n	800f892 <HAL_SPI_TransmitReceive+0x5a>
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d002      	beq.n	800f892 <HAL_SPI_TransmitReceive+0x5a>
 800f88c:	887b      	ldrh	r3, [r7, #2]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d101      	bne.n	800f896 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800f892:	2301      	movs	r3, #1
 800f894:	e305      	b.n	800fea2 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800f89c:	2b01      	cmp	r3, #1
 800f89e:	d101      	bne.n	800f8a4 <HAL_SPI_TransmitReceive+0x6c>
 800f8a0:	2302      	movs	r3, #2
 800f8a2:	e2fe      	b.n	800fea2 <HAL_SPI_TransmitReceive+0x66a>
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	2201      	movs	r2, #1
 800f8a8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	2205      	movs	r2, #5
 800f8b0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	687a      	ldr	r2, [r7, #4]
 800f8c0:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	887a      	ldrh	r2, [r7, #2]
 800f8c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	887a      	ldrh	r2, [r7, #2]
 800f8ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	68ba      	ldr	r2, [r7, #8]
 800f8d6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	887a      	ldrh	r2, [r7, #2]
 800f8dc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	887a      	ldrh	r2, [r7, #2]
 800f8e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	2200      	movs	r2, #0
 800f8ec:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	68da      	ldr	r2, [r3, #12]
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800f902:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	4a70      	ldr	r2, [pc, #448]	@ (800facc <HAL_SPI_TransmitReceive+0x294>)
 800f90a:	4293      	cmp	r3, r2
 800f90c:	d009      	beq.n	800f922 <HAL_SPI_TransmitReceive+0xea>
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	4a6f      	ldr	r2, [pc, #444]	@ (800fad0 <HAL_SPI_TransmitReceive+0x298>)
 800f914:	4293      	cmp	r3, r2
 800f916:	d004      	beq.n	800f922 <HAL_SPI_TransmitReceive+0xea>
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	4a6d      	ldr	r2, [pc, #436]	@ (800fad4 <HAL_SPI_TransmitReceive+0x29c>)
 800f91e:	4293      	cmp	r3, r2
 800f920:	d102      	bne.n	800f928 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800f922:	2310      	movs	r3, #16
 800f924:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f926:	e001      	b.n	800f92c <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800f928:	2308      	movs	r3, #8
 800f92a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	685a      	ldr	r2, [r3, #4]
 800f932:	4b69      	ldr	r3, [pc, #420]	@ (800fad8 <HAL_SPI_TransmitReceive+0x2a0>)
 800f934:	4013      	ands	r3, r2
 800f936:	8879      	ldrh	r1, [r7, #2]
 800f938:	68fa      	ldr	r2, [r7, #12]
 800f93a:	6812      	ldr	r2, [r2, #0]
 800f93c:	430b      	orrs	r3, r1
 800f93e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	681a      	ldr	r2, [r3, #0]
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	f042 0201 	orr.w	r2, r2, #1
 800f94e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	685b      	ldr	r3, [r3, #4]
 800f954:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f958:	d107      	bne.n	800f96a <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	681a      	ldr	r2, [r3, #0]
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f968:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	68db      	ldr	r3, [r3, #12]
 800f96e:	2b0f      	cmp	r3, #15
 800f970:	f240 80a2 	bls.w	800fab8 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800f974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f976:	089b      	lsrs	r3, r3, #2
 800f978:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f97a:	e094      	b.n	800faa6 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	695b      	ldr	r3, [r3, #20]
 800f982:	f003 0302 	and.w	r3, r3, #2
 800f986:	2b02      	cmp	r3, #2
 800f988:	d120      	bne.n	800f9cc <HAL_SPI_TransmitReceive+0x194>
 800f98a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d01d      	beq.n	800f9cc <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800f990:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800f992:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800f994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f996:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800f998:	429a      	cmp	r2, r3
 800f99a:	d217      	bcs.n	800f9cc <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	6812      	ldr	r2, [r2, #0]
 800f9a6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f9ac:	1d1a      	adds	r2, r3, #4
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f9b8:	b29b      	uxth	r3, r3
 800f9ba:	3b01      	subs	r3, #1
 800f9bc:	b29a      	uxth	r2, r3
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f9ca:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	695b      	ldr	r3, [r3, #20]
 800f9d2:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800f9d4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d065      	beq.n	800faa6 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	695b      	ldr	r3, [r3, #20]
 800f9e0:	f003 0301 	and.w	r3, r3, #1
 800f9e4:	2b01      	cmp	r3, #1
 800f9e6:	d118      	bne.n	800fa1a <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	681a      	ldr	r2, [r3, #0]
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f9f0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800f9f2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f9f8:	1d1a      	adds	r2, r3, #4
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fa04:	b29b      	uxth	r3, r3
 800fa06:	3b01      	subs	r3, #1
 800fa08:	b29a      	uxth	r2, r3
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fa16:	853b      	strh	r3, [r7, #40]	@ 0x28
 800fa18:	e045      	b.n	800faa6 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800fa1a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800fa1c:	8bfb      	ldrh	r3, [r7, #30]
 800fa1e:	429a      	cmp	r2, r3
 800fa20:	d21d      	bcs.n	800fa5e <HAL_SPI_TransmitReceive+0x226>
 800fa22:	697b      	ldr	r3, [r7, #20]
 800fa24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d018      	beq.n	800fa5e <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	681a      	ldr	r2, [r3, #0]
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fa34:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800fa36:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fa3c:	1d1a      	adds	r2, r3, #4
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fa48:	b29b      	uxth	r3, r3
 800fa4a:	3b01      	subs	r3, #1
 800fa4c:	b29a      	uxth	r2, r3
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fa5a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800fa5c:	e023      	b.n	800faa6 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fa5e:	f7f3 ffc3 	bl	80039e8 <HAL_GetTick>
 800fa62:	4602      	mov	r2, r0
 800fa64:	69bb      	ldr	r3, [r7, #24]
 800fa66:	1ad3      	subs	r3, r2, r3
 800fa68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fa6a:	429a      	cmp	r2, r3
 800fa6c:	d803      	bhi.n	800fa76 <HAL_SPI_TransmitReceive+0x23e>
 800fa6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa74:	d102      	bne.n	800fa7c <HAL_SPI_TransmitReceive+0x244>
 800fa76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d114      	bne.n	800faa6 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800fa7c:	68f8      	ldr	r0, [r7, #12]
 800fa7e:	f000 fa15 	bl	800feac <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fa88:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	2201      	movs	r2, #1
 800fa96:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800faa2:	2303      	movs	r3, #3
 800faa4:	e1fd      	b.n	800fea2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800faa6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	f47f af67 	bne.w	800f97c <HAL_SPI_TransmitReceive+0x144>
 800faae:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	f47f af63 	bne.w	800f97c <HAL_SPI_TransmitReceive+0x144>
 800fab6:	e1ce      	b.n	800fe56 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	68db      	ldr	r3, [r3, #12]
 800fabc:	2b07      	cmp	r3, #7
 800fabe:	f240 81c2 	bls.w	800fe46 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800fac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fac4:	085b      	lsrs	r3, r3, #1
 800fac6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800fac8:	e0c9      	b.n	800fc5e <HAL_SPI_TransmitReceive+0x426>
 800faca:	bf00      	nop
 800facc:	40013000 	.word	0x40013000
 800fad0:	40003800 	.word	0x40003800
 800fad4:	40003c00 	.word	0x40003c00
 800fad8:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	695b      	ldr	r3, [r3, #20]
 800fae2:	f003 0302 	and.w	r3, r3, #2
 800fae6:	2b02      	cmp	r3, #2
 800fae8:	d11f      	bne.n	800fb2a <HAL_SPI_TransmitReceive+0x2f2>
 800faea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800faec:	2b00      	cmp	r3, #0
 800faee:	d01c      	beq.n	800fb2a <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800faf0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800faf2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800faf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800faf6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800faf8:	429a      	cmp	r2, r3
 800fafa:	d216      	bcs.n	800fb2a <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fb00:	881a      	ldrh	r2, [r3, #0]
 800fb02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb04:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fb0a:	1c9a      	adds	r2, r3, #2
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800fb16:	b29b      	uxth	r3, r3
 800fb18:	3b01      	subs	r3, #1
 800fb1a:	b29a      	uxth	r2, r3
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800fb28:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	695b      	ldr	r3, [r3, #20]
 800fb30:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800fb32:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	f000 8092 	beq.w	800fc5e <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	695b      	ldr	r3, [r3, #20]
 800fb40:	f003 0301 	and.w	r3, r3, #1
 800fb44:	2b01      	cmp	r3, #1
 800fb46:	d118      	bne.n	800fb7a <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fb4c:	6a3a      	ldr	r2, [r7, #32]
 800fb4e:	8812      	ldrh	r2, [r2, #0]
 800fb50:	b292      	uxth	r2, r2
 800fb52:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fb58:	1c9a      	adds	r2, r3, #2
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fb64:	b29b      	uxth	r3, r3
 800fb66:	3b01      	subs	r3, #1
 800fb68:	b29a      	uxth	r2, r3
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fb76:	853b      	strh	r3, [r7, #40]	@ 0x28
 800fb78:	e071      	b.n	800fc5e <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800fb7a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800fb7c:	8bfb      	ldrh	r3, [r7, #30]
 800fb7e:	429a      	cmp	r2, r3
 800fb80:	d228      	bcs.n	800fbd4 <HAL_SPI_TransmitReceive+0x39c>
 800fb82:	697b      	ldr	r3, [r7, #20]
 800fb84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d023      	beq.n	800fbd4 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fb90:	6a3a      	ldr	r2, [r7, #32]
 800fb92:	8812      	ldrh	r2, [r2, #0]
 800fb94:	b292      	uxth	r2, r2
 800fb96:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fb9c:	1c9a      	adds	r2, r3, #2
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fba6:	6a3a      	ldr	r2, [r7, #32]
 800fba8:	8812      	ldrh	r2, [r2, #0]
 800fbaa:	b292      	uxth	r2, r2
 800fbac:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fbb2:	1c9a      	adds	r2, r3, #2
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fbbe:	b29b      	uxth	r3, r3
 800fbc0:	3b02      	subs	r3, #2
 800fbc2:	b29a      	uxth	r2, r3
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fbd0:	853b      	strh	r3, [r7, #40]	@ 0x28
 800fbd2:	e044      	b.n	800fc5e <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800fbd4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fbd6:	2b01      	cmp	r3, #1
 800fbd8:	d11d      	bne.n	800fc16 <HAL_SPI_TransmitReceive+0x3de>
 800fbda:	697b      	ldr	r3, [r7, #20]
 800fbdc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d018      	beq.n	800fc16 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fbe8:	6a3a      	ldr	r2, [r7, #32]
 800fbea:	8812      	ldrh	r2, [r2, #0]
 800fbec:	b292      	uxth	r2, r2
 800fbee:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fbf4:	1c9a      	adds	r2, r3, #2
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fc00:	b29b      	uxth	r3, r3
 800fc02:	3b01      	subs	r3, #1
 800fc04:	b29a      	uxth	r2, r3
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fc12:	853b      	strh	r3, [r7, #40]	@ 0x28
 800fc14:	e023      	b.n	800fc5e <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fc16:	f7f3 fee7 	bl	80039e8 <HAL_GetTick>
 800fc1a:	4602      	mov	r2, r0
 800fc1c:	69bb      	ldr	r3, [r7, #24]
 800fc1e:	1ad3      	subs	r3, r2, r3
 800fc20:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fc22:	429a      	cmp	r2, r3
 800fc24:	d803      	bhi.n	800fc2e <HAL_SPI_TransmitReceive+0x3f6>
 800fc26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc2c:	d102      	bne.n	800fc34 <HAL_SPI_TransmitReceive+0x3fc>
 800fc2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d114      	bne.n	800fc5e <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800fc34:	68f8      	ldr	r0, [r7, #12]
 800fc36:	f000 f939 	bl	800feac <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fc40:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	2201      	movs	r2, #1
 800fc4e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	2200      	movs	r2, #0
 800fc56:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800fc5a:	2303      	movs	r3, #3
 800fc5c:	e121      	b.n	800fea2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800fc5e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	f47f af3b 	bne.w	800fadc <HAL_SPI_TransmitReceive+0x2a4>
 800fc66:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	f47f af37 	bne.w	800fadc <HAL_SPI_TransmitReceive+0x2a4>
 800fc6e:	e0f2      	b.n	800fe56 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	695b      	ldr	r3, [r3, #20]
 800fc76:	f003 0302 	and.w	r3, r3, #2
 800fc7a:	2b02      	cmp	r3, #2
 800fc7c:	d121      	bne.n	800fcc2 <HAL_SPI_TransmitReceive+0x48a>
 800fc7e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d01e      	beq.n	800fcc2 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800fc84:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800fc86:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800fc88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc8a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800fc8c:	429a      	cmp	r2, r3
 800fc8e:	d218      	bcs.n	800fcc2 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	3320      	adds	r3, #32
 800fc9a:	7812      	ldrb	r2, [r2, #0]
 800fc9c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fca2:	1c5a      	adds	r2, r3, #1
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800fcae:	b29b      	uxth	r3, r3
 800fcb0:	3b01      	subs	r3, #1
 800fcb2:	b29a      	uxth	r2, r3
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800fcc0:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	695b      	ldr	r3, [r3, #20]
 800fcc8:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800fcca:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	f000 80ba 	beq.w	800fe46 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	695b      	ldr	r3, [r3, #20]
 800fcd8:	f003 0301 	and.w	r3, r3, #1
 800fcdc:	2b01      	cmp	r3, #1
 800fcde:	d11b      	bne.n	800fd18 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fcec:	7812      	ldrb	r2, [r2, #0]
 800fcee:	b2d2      	uxtb	r2, r2
 800fcf0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fcf6:	1c5a      	adds	r2, r3, #1
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fd02:	b29b      	uxth	r3, r3
 800fd04:	3b01      	subs	r3, #1
 800fd06:	b29a      	uxth	r2, r3
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fd14:	853b      	strh	r3, [r7, #40]	@ 0x28
 800fd16:	e096      	b.n	800fe46 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800fd18:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800fd1a:	8bfb      	ldrh	r3, [r7, #30]
 800fd1c:	429a      	cmp	r2, r3
 800fd1e:	d24a      	bcs.n	800fdb6 <HAL_SPI_TransmitReceive+0x57e>
 800fd20:	697b      	ldr	r3, [r7, #20]
 800fd22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d045      	beq.n	800fdb6 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fd36:	7812      	ldrb	r2, [r2, #0]
 800fd38:	b2d2      	uxtb	r2, r2
 800fd3a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fd40:	1c5a      	adds	r2, r3, #1
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fd52:	7812      	ldrb	r2, [r2, #0]
 800fd54:	b2d2      	uxtb	r2, r2
 800fd56:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fd5c:	1c5a      	adds	r2, r3, #1
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fd6e:	7812      	ldrb	r2, [r2, #0]
 800fd70:	b2d2      	uxtb	r2, r2
 800fd72:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fd78:	1c5a      	adds	r2, r3, #1
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fd8a:	7812      	ldrb	r2, [r2, #0]
 800fd8c:	b2d2      	uxtb	r2, r2
 800fd8e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fd94:	1c5a      	adds	r2, r3, #1
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fda0:	b29b      	uxth	r3, r3
 800fda2:	3b04      	subs	r3, #4
 800fda4:	b29a      	uxth	r2, r3
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fdb2:	853b      	strh	r3, [r7, #40]	@ 0x28
 800fdb4:	e047      	b.n	800fe46 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800fdb6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fdb8:	2b03      	cmp	r3, #3
 800fdba:	d820      	bhi.n	800fdfe <HAL_SPI_TransmitReceive+0x5c6>
 800fdbc:	697b      	ldr	r3, [r7, #20]
 800fdbe:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d01b      	beq.n	800fdfe <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fdd2:	7812      	ldrb	r2, [r2, #0]
 800fdd4:	b2d2      	uxtb	r2, r2
 800fdd6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fddc:	1c5a      	adds	r2, r3, #1
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fde8:	b29b      	uxth	r3, r3
 800fdea:	3b01      	subs	r3, #1
 800fdec:	b29a      	uxth	r2, r3
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fdfa:	853b      	strh	r3, [r7, #40]	@ 0x28
 800fdfc:	e023      	b.n	800fe46 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fdfe:	f7f3 fdf3 	bl	80039e8 <HAL_GetTick>
 800fe02:	4602      	mov	r2, r0
 800fe04:	69bb      	ldr	r3, [r7, #24]
 800fe06:	1ad3      	subs	r3, r2, r3
 800fe08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fe0a:	429a      	cmp	r2, r3
 800fe0c:	d803      	bhi.n	800fe16 <HAL_SPI_TransmitReceive+0x5de>
 800fe0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe14:	d102      	bne.n	800fe1c <HAL_SPI_TransmitReceive+0x5e4>
 800fe16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d114      	bne.n	800fe46 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800fe1c:	68f8      	ldr	r0, [r7, #12]
 800fe1e:	f000 f845 	bl	800feac <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fe28:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	2201      	movs	r2, #1
 800fe36:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	2200      	movs	r2, #0
 800fe3e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800fe42:	2303      	movs	r3, #3
 800fe44:	e02d      	b.n	800fea2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800fe46:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	f47f af11 	bne.w	800fc70 <HAL_SPI_TransmitReceive+0x438>
 800fe4e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	f47f af0d 	bne.w	800fc70 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800fe56:	69bb      	ldr	r3, [r7, #24]
 800fe58:	9300      	str	r3, [sp, #0]
 800fe5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe5c:	2200      	movs	r2, #0
 800fe5e:	2108      	movs	r1, #8
 800fe60:	68f8      	ldr	r0, [r7, #12]
 800fe62:	f000 f8c3 	bl	800ffec <SPI_WaitOnFlagUntilTimeout>
 800fe66:	4603      	mov	r3, r0
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d007      	beq.n	800fe7c <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fe72:	f043 0220 	orr.w	r2, r3, #32
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800fe7c:	68f8      	ldr	r0, [r7, #12]
 800fe7e:	f000 f815 	bl	800feac <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	2201      	movs	r2, #1
 800fe86:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	2200      	movs	r2, #0
 800fe8e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d001      	beq.n	800fea0 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800fe9c:	2301      	movs	r3, #1
 800fe9e:	e000      	b.n	800fea2 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800fea0:	2300      	movs	r3, #0
  }
}
 800fea2:	4618      	mov	r0, r3
 800fea4:	3730      	adds	r7, #48	@ 0x30
 800fea6:	46bd      	mov	sp, r7
 800fea8:	bd80      	pop	{r7, pc}
 800feaa:	bf00      	nop

0800feac <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800feac:	b480      	push	{r7}
 800feae:	b085      	sub	sp, #20
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	695b      	ldr	r3, [r3, #20]
 800feba:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	699a      	ldr	r2, [r3, #24]
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	f042 0208 	orr.w	r2, r2, #8
 800feca:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	699a      	ldr	r2, [r3, #24]
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	f042 0210 	orr.w	r2, r2, #16
 800feda:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	681a      	ldr	r2, [r3, #0]
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	f022 0201 	bic.w	r2, r2, #1
 800feea:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	6919      	ldr	r1, [r3, #16]
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	681a      	ldr	r2, [r3, #0]
 800fef6:	4b3c      	ldr	r3, [pc, #240]	@ (800ffe8 <SPI_CloseTransfer+0x13c>)
 800fef8:	400b      	ands	r3, r1
 800fefa:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	689a      	ldr	r2, [r3, #8]
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800ff0a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ff12:	b2db      	uxtb	r3, r3
 800ff14:	2b04      	cmp	r3, #4
 800ff16:	d014      	beq.n	800ff42 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	f003 0320 	and.w	r3, r3, #32
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d00f      	beq.n	800ff42 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ff28:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	699a      	ldr	r2, [r3, #24]
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	f042 0220 	orr.w	r2, r2, #32
 800ff40:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ff48:	b2db      	uxtb	r3, r3
 800ff4a:	2b03      	cmp	r3, #3
 800ff4c:	d014      	beq.n	800ff78 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d00f      	beq.n	800ff78 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ff5e:	f043 0204 	orr.w	r2, r3, #4
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	699a      	ldr	r2, [r3, #24]
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ff76:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d00f      	beq.n	800ffa2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ff88:	f043 0201 	orr.w	r2, r3, #1
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	699a      	ldr	r2, [r3, #24]
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ffa0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d00f      	beq.n	800ffcc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ffb2:	f043 0208 	orr.w	r2, r3, #8
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	699a      	ldr	r2, [r3, #24]
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ffca:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	2200      	movs	r2, #0
 800ffd0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	2200      	movs	r2, #0
 800ffd8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800ffdc:	bf00      	nop
 800ffde:	3714      	adds	r7, #20
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe6:	4770      	bx	lr
 800ffe8:	fffffc90 	.word	0xfffffc90

0800ffec <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800ffec:	b580      	push	{r7, lr}
 800ffee:	b084      	sub	sp, #16
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	60f8      	str	r0, [r7, #12]
 800fff4:	60b9      	str	r1, [r7, #8]
 800fff6:	603b      	str	r3, [r7, #0]
 800fff8:	4613      	mov	r3, r2
 800fffa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800fffc:	e010      	b.n	8010020 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fffe:	f7f3 fcf3 	bl	80039e8 <HAL_GetTick>
 8010002:	4602      	mov	r2, r0
 8010004:	69bb      	ldr	r3, [r7, #24]
 8010006:	1ad3      	subs	r3, r2, r3
 8010008:	683a      	ldr	r2, [r7, #0]
 801000a:	429a      	cmp	r2, r3
 801000c:	d803      	bhi.n	8010016 <SPI_WaitOnFlagUntilTimeout+0x2a>
 801000e:	683b      	ldr	r3, [r7, #0]
 8010010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010014:	d102      	bne.n	801001c <SPI_WaitOnFlagUntilTimeout+0x30>
 8010016:	683b      	ldr	r3, [r7, #0]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d101      	bne.n	8010020 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 801001c:	2303      	movs	r3, #3
 801001e:	e00f      	b.n	8010040 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	695a      	ldr	r2, [r3, #20]
 8010026:	68bb      	ldr	r3, [r7, #8]
 8010028:	4013      	ands	r3, r2
 801002a:	68ba      	ldr	r2, [r7, #8]
 801002c:	429a      	cmp	r2, r3
 801002e:	bf0c      	ite	eq
 8010030:	2301      	moveq	r3, #1
 8010032:	2300      	movne	r3, #0
 8010034:	b2db      	uxtb	r3, r3
 8010036:	461a      	mov	r2, r3
 8010038:	79fb      	ldrb	r3, [r7, #7]
 801003a:	429a      	cmp	r2, r3
 801003c:	d0df      	beq.n	800fffe <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 801003e:	2300      	movs	r3, #0
}
 8010040:	4618      	mov	r0, r3
 8010042:	3710      	adds	r7, #16
 8010044:	46bd      	mov	sp, r7
 8010046:	bd80      	pop	{r7, pc}

08010048 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8010048:	b480      	push	{r7}
 801004a:	b085      	sub	sp, #20
 801004c:	af00      	add	r7, sp, #0
 801004e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010054:	095b      	lsrs	r3, r3, #5
 8010056:	3301      	adds	r3, #1
 8010058:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	68db      	ldr	r3, [r3, #12]
 801005e:	3301      	adds	r3, #1
 8010060:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8010062:	68bb      	ldr	r3, [r7, #8]
 8010064:	3307      	adds	r3, #7
 8010066:	08db      	lsrs	r3, r3, #3
 8010068:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 801006a:	68bb      	ldr	r3, [r7, #8]
 801006c:	68fa      	ldr	r2, [r7, #12]
 801006e:	fb02 f303 	mul.w	r3, r2, r3
}
 8010072:	4618      	mov	r0, r3
 8010074:	3714      	adds	r7, #20
 8010076:	46bd      	mov	sp, r7
 8010078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801007c:	4770      	bx	lr

0801007e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801007e:	b580      	push	{r7, lr}
 8010080:	b082      	sub	sp, #8
 8010082:	af00      	add	r7, sp, #0
 8010084:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	2b00      	cmp	r3, #0
 801008a:	d101      	bne.n	8010090 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801008c:	2301      	movs	r3, #1
 801008e:	e049      	b.n	8010124 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010096:	b2db      	uxtb	r3, r3
 8010098:	2b00      	cmp	r3, #0
 801009a:	d106      	bne.n	80100aa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	2200      	movs	r2, #0
 80100a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80100a4:	6878      	ldr	r0, [r7, #4]
 80100a6:	f7f3 f993 	bl	80033d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	2202      	movs	r2, #2
 80100ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	681a      	ldr	r2, [r3, #0]
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	3304      	adds	r3, #4
 80100ba:	4619      	mov	r1, r3
 80100bc:	4610      	mov	r0, r2
 80100be:	f000 fc57 	bl	8010970 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	2201      	movs	r2, #1
 80100c6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	2201      	movs	r2, #1
 80100ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	2201      	movs	r2, #1
 80100d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	2201      	movs	r2, #1
 80100de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	2201      	movs	r2, #1
 80100e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	2201      	movs	r2, #1
 80100ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	2201      	movs	r2, #1
 80100f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	2201      	movs	r2, #1
 80100fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	2201      	movs	r2, #1
 8010106:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	2201      	movs	r2, #1
 801010e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	2201      	movs	r2, #1
 8010116:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	2201      	movs	r2, #1
 801011e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8010122:	2300      	movs	r3, #0
}
 8010124:	4618      	mov	r0, r3
 8010126:	3708      	adds	r7, #8
 8010128:	46bd      	mov	sp, r7
 801012a:	bd80      	pop	{r7, pc}

0801012c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801012c:	b480      	push	{r7}
 801012e:	b085      	sub	sp, #20
 8010130:	af00      	add	r7, sp, #0
 8010132:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801013a:	b2db      	uxtb	r3, r3
 801013c:	2b01      	cmp	r3, #1
 801013e:	d001      	beq.n	8010144 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010140:	2301      	movs	r3, #1
 8010142:	e05e      	b.n	8010202 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	2202      	movs	r2, #2
 8010148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	68da      	ldr	r2, [r3, #12]
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	f042 0201 	orr.w	r2, r2, #1
 801015a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	4a2b      	ldr	r2, [pc, #172]	@ (8010210 <HAL_TIM_Base_Start_IT+0xe4>)
 8010162:	4293      	cmp	r3, r2
 8010164:	d02c      	beq.n	80101c0 <HAL_TIM_Base_Start_IT+0x94>
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801016e:	d027      	beq.n	80101c0 <HAL_TIM_Base_Start_IT+0x94>
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	4a27      	ldr	r2, [pc, #156]	@ (8010214 <HAL_TIM_Base_Start_IT+0xe8>)
 8010176:	4293      	cmp	r3, r2
 8010178:	d022      	beq.n	80101c0 <HAL_TIM_Base_Start_IT+0x94>
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	4a26      	ldr	r2, [pc, #152]	@ (8010218 <HAL_TIM_Base_Start_IT+0xec>)
 8010180:	4293      	cmp	r3, r2
 8010182:	d01d      	beq.n	80101c0 <HAL_TIM_Base_Start_IT+0x94>
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	4a24      	ldr	r2, [pc, #144]	@ (801021c <HAL_TIM_Base_Start_IT+0xf0>)
 801018a:	4293      	cmp	r3, r2
 801018c:	d018      	beq.n	80101c0 <HAL_TIM_Base_Start_IT+0x94>
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	4a23      	ldr	r2, [pc, #140]	@ (8010220 <HAL_TIM_Base_Start_IT+0xf4>)
 8010194:	4293      	cmp	r3, r2
 8010196:	d013      	beq.n	80101c0 <HAL_TIM_Base_Start_IT+0x94>
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	4a21      	ldr	r2, [pc, #132]	@ (8010224 <HAL_TIM_Base_Start_IT+0xf8>)
 801019e:	4293      	cmp	r3, r2
 80101a0:	d00e      	beq.n	80101c0 <HAL_TIM_Base_Start_IT+0x94>
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	4a20      	ldr	r2, [pc, #128]	@ (8010228 <HAL_TIM_Base_Start_IT+0xfc>)
 80101a8:	4293      	cmp	r3, r2
 80101aa:	d009      	beq.n	80101c0 <HAL_TIM_Base_Start_IT+0x94>
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	4a1e      	ldr	r2, [pc, #120]	@ (801022c <HAL_TIM_Base_Start_IT+0x100>)
 80101b2:	4293      	cmp	r3, r2
 80101b4:	d004      	beq.n	80101c0 <HAL_TIM_Base_Start_IT+0x94>
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	4a1d      	ldr	r2, [pc, #116]	@ (8010230 <HAL_TIM_Base_Start_IT+0x104>)
 80101bc:	4293      	cmp	r3, r2
 80101be:	d115      	bne.n	80101ec <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	689a      	ldr	r2, [r3, #8]
 80101c6:	4b1b      	ldr	r3, [pc, #108]	@ (8010234 <HAL_TIM_Base_Start_IT+0x108>)
 80101c8:	4013      	ands	r3, r2
 80101ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	2b06      	cmp	r3, #6
 80101d0:	d015      	beq.n	80101fe <HAL_TIM_Base_Start_IT+0xd2>
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80101d8:	d011      	beq.n	80101fe <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	681a      	ldr	r2, [r3, #0]
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	f042 0201 	orr.w	r2, r2, #1
 80101e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80101ea:	e008      	b.n	80101fe <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	681a      	ldr	r2, [r3, #0]
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	f042 0201 	orr.w	r2, r2, #1
 80101fa:	601a      	str	r2, [r3, #0]
 80101fc:	e000      	b.n	8010200 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80101fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010200:	2300      	movs	r3, #0
}
 8010202:	4618      	mov	r0, r3
 8010204:	3714      	adds	r7, #20
 8010206:	46bd      	mov	sp, r7
 8010208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801020c:	4770      	bx	lr
 801020e:	bf00      	nop
 8010210:	40010000 	.word	0x40010000
 8010214:	40000400 	.word	0x40000400
 8010218:	40000800 	.word	0x40000800
 801021c:	40000c00 	.word	0x40000c00
 8010220:	40010400 	.word	0x40010400
 8010224:	40001800 	.word	0x40001800
 8010228:	40014000 	.word	0x40014000
 801022c:	4000e000 	.word	0x4000e000
 8010230:	4000e400 	.word	0x4000e400
 8010234:	00010007 	.word	0x00010007

08010238 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010238:	b580      	push	{r7, lr}
 801023a:	b082      	sub	sp, #8
 801023c:	af00      	add	r7, sp, #0
 801023e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	2b00      	cmp	r3, #0
 8010244:	d101      	bne.n	801024a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010246:	2301      	movs	r3, #1
 8010248:	e049      	b.n	80102de <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010250:	b2db      	uxtb	r3, r3
 8010252:	2b00      	cmp	r3, #0
 8010254:	d106      	bne.n	8010264 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	2200      	movs	r2, #0
 801025a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801025e:	6878      	ldr	r0, [r7, #4]
 8010260:	f000 f841 	bl	80102e6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	2202      	movs	r2, #2
 8010268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	681a      	ldr	r2, [r3, #0]
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	3304      	adds	r3, #4
 8010274:	4619      	mov	r1, r3
 8010276:	4610      	mov	r0, r2
 8010278:	f000 fb7a 	bl	8010970 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	2201      	movs	r2, #1
 8010280:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	2201      	movs	r2, #1
 8010288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	2201      	movs	r2, #1
 8010290:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	2201      	movs	r2, #1
 8010298:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	2201      	movs	r2, #1
 80102a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	2201      	movs	r2, #1
 80102a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	2201      	movs	r2, #1
 80102b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	2201      	movs	r2, #1
 80102b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	2201      	movs	r2, #1
 80102c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	2201      	movs	r2, #1
 80102c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	2201      	movs	r2, #1
 80102d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	2201      	movs	r2, #1
 80102d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80102dc:	2300      	movs	r3, #0
}
 80102de:	4618      	mov	r0, r3
 80102e0:	3708      	adds	r7, #8
 80102e2:	46bd      	mov	sp, r7
 80102e4:	bd80      	pop	{r7, pc}

080102e6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80102e6:	b480      	push	{r7}
 80102e8:	b083      	sub	sp, #12
 80102ea:	af00      	add	r7, sp, #0
 80102ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80102ee:	bf00      	nop
 80102f0:	370c      	adds	r7, #12
 80102f2:	46bd      	mov	sp, r7
 80102f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f8:	4770      	bx	lr

080102fa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80102fa:	b580      	push	{r7, lr}
 80102fc:	b084      	sub	sp, #16
 80102fe:	af00      	add	r7, sp, #0
 8010300:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	68db      	ldr	r3, [r3, #12]
 8010308:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	691b      	ldr	r3, [r3, #16]
 8010310:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8010312:	68bb      	ldr	r3, [r7, #8]
 8010314:	f003 0302 	and.w	r3, r3, #2
 8010318:	2b00      	cmp	r3, #0
 801031a:	d020      	beq.n	801035e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	f003 0302 	and.w	r3, r3, #2
 8010322:	2b00      	cmp	r3, #0
 8010324:	d01b      	beq.n	801035e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	f06f 0202 	mvn.w	r2, #2
 801032e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	2201      	movs	r2, #1
 8010334:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	699b      	ldr	r3, [r3, #24]
 801033c:	f003 0303 	and.w	r3, r3, #3
 8010340:	2b00      	cmp	r3, #0
 8010342:	d003      	beq.n	801034c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010344:	6878      	ldr	r0, [r7, #4]
 8010346:	f000 faf5 	bl	8010934 <HAL_TIM_IC_CaptureCallback>
 801034a:	e005      	b.n	8010358 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801034c:	6878      	ldr	r0, [r7, #4]
 801034e:	f000 fae7 	bl	8010920 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010352:	6878      	ldr	r0, [r7, #4]
 8010354:	f000 faf8 	bl	8010948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	2200      	movs	r2, #0
 801035c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 801035e:	68bb      	ldr	r3, [r7, #8]
 8010360:	f003 0304 	and.w	r3, r3, #4
 8010364:	2b00      	cmp	r3, #0
 8010366:	d020      	beq.n	80103aa <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	f003 0304 	and.w	r3, r3, #4
 801036e:	2b00      	cmp	r3, #0
 8010370:	d01b      	beq.n	80103aa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	f06f 0204 	mvn.w	r2, #4
 801037a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	2202      	movs	r2, #2
 8010380:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	699b      	ldr	r3, [r3, #24]
 8010388:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801038c:	2b00      	cmp	r3, #0
 801038e:	d003      	beq.n	8010398 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010390:	6878      	ldr	r0, [r7, #4]
 8010392:	f000 facf 	bl	8010934 <HAL_TIM_IC_CaptureCallback>
 8010396:	e005      	b.n	80103a4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010398:	6878      	ldr	r0, [r7, #4]
 801039a:	f000 fac1 	bl	8010920 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801039e:	6878      	ldr	r0, [r7, #4]
 80103a0:	f000 fad2 	bl	8010948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	2200      	movs	r2, #0
 80103a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80103aa:	68bb      	ldr	r3, [r7, #8]
 80103ac:	f003 0308 	and.w	r3, r3, #8
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d020      	beq.n	80103f6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	f003 0308 	and.w	r3, r3, #8
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d01b      	beq.n	80103f6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	f06f 0208 	mvn.w	r2, #8
 80103c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	2204      	movs	r2, #4
 80103cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	69db      	ldr	r3, [r3, #28]
 80103d4:	f003 0303 	and.w	r3, r3, #3
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d003      	beq.n	80103e4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80103dc:	6878      	ldr	r0, [r7, #4]
 80103de:	f000 faa9 	bl	8010934 <HAL_TIM_IC_CaptureCallback>
 80103e2:	e005      	b.n	80103f0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80103e4:	6878      	ldr	r0, [r7, #4]
 80103e6:	f000 fa9b 	bl	8010920 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80103ea:	6878      	ldr	r0, [r7, #4]
 80103ec:	f000 faac 	bl	8010948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	2200      	movs	r2, #0
 80103f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80103f6:	68bb      	ldr	r3, [r7, #8]
 80103f8:	f003 0310 	and.w	r3, r3, #16
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d020      	beq.n	8010442 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	f003 0310 	and.w	r3, r3, #16
 8010406:	2b00      	cmp	r3, #0
 8010408:	d01b      	beq.n	8010442 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	f06f 0210 	mvn.w	r2, #16
 8010412:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	2208      	movs	r2, #8
 8010418:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	69db      	ldr	r3, [r3, #28]
 8010420:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010424:	2b00      	cmp	r3, #0
 8010426:	d003      	beq.n	8010430 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010428:	6878      	ldr	r0, [r7, #4]
 801042a:	f000 fa83 	bl	8010934 <HAL_TIM_IC_CaptureCallback>
 801042e:	e005      	b.n	801043c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010430:	6878      	ldr	r0, [r7, #4]
 8010432:	f000 fa75 	bl	8010920 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010436:	6878      	ldr	r0, [r7, #4]
 8010438:	f000 fa86 	bl	8010948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	2200      	movs	r2, #0
 8010440:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8010442:	68bb      	ldr	r3, [r7, #8]
 8010444:	f003 0301 	and.w	r3, r3, #1
 8010448:	2b00      	cmp	r3, #0
 801044a:	d00c      	beq.n	8010466 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	f003 0301 	and.w	r3, r3, #1
 8010452:	2b00      	cmp	r3, #0
 8010454:	d007      	beq.n	8010466 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	f06f 0201 	mvn.w	r2, #1
 801045e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010460:	6878      	ldr	r0, [r7, #4]
 8010462:	f7f1 fd21 	bl	8001ea8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8010466:	68bb      	ldr	r3, [r7, #8]
 8010468:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801046c:	2b00      	cmp	r3, #0
 801046e:	d104      	bne.n	801047a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8010470:	68bb      	ldr	r3, [r7, #8]
 8010472:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8010476:	2b00      	cmp	r3, #0
 8010478:	d00c      	beq.n	8010494 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010480:	2b00      	cmp	r3, #0
 8010482:	d007      	beq.n	8010494 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 801048c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801048e:	6878      	ldr	r0, [r7, #4]
 8010490:	f000 ffc6 	bl	8011420 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8010494:	68bb      	ldr	r3, [r7, #8]
 8010496:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801049a:	2b00      	cmp	r3, #0
 801049c:	d00c      	beq.n	80104b8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d007      	beq.n	80104b8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80104b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80104b2:	6878      	ldr	r0, [r7, #4]
 80104b4:	f000 ffbe 	bl	8011434 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80104b8:	68bb      	ldr	r3, [r7, #8]
 80104ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d00c      	beq.n	80104dc <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d007      	beq.n	80104dc <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80104d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80104d6:	6878      	ldr	r0, [r7, #4]
 80104d8:	f000 fa40 	bl	801095c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80104dc:	68bb      	ldr	r3, [r7, #8]
 80104de:	f003 0320 	and.w	r3, r3, #32
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d00c      	beq.n	8010500 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	f003 0320 	and.w	r3, r3, #32
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d007      	beq.n	8010500 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	f06f 0220 	mvn.w	r2, #32
 80104f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80104fa:	6878      	ldr	r0, [r7, #4]
 80104fc:	f000 ff86 	bl	801140c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010500:	bf00      	nop
 8010502:	3710      	adds	r7, #16
 8010504:	46bd      	mov	sp, r7
 8010506:	bd80      	pop	{r7, pc}

08010508 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010508:	b580      	push	{r7, lr}
 801050a:	b086      	sub	sp, #24
 801050c:	af00      	add	r7, sp, #0
 801050e:	60f8      	str	r0, [r7, #12]
 8010510:	60b9      	str	r1, [r7, #8]
 8010512:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010514:	2300      	movs	r3, #0
 8010516:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801051e:	2b01      	cmp	r3, #1
 8010520:	d101      	bne.n	8010526 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8010522:	2302      	movs	r3, #2
 8010524:	e0ff      	b.n	8010726 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	2201      	movs	r2, #1
 801052a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	2b14      	cmp	r3, #20
 8010532:	f200 80f0 	bhi.w	8010716 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8010536:	a201      	add	r2, pc, #4	@ (adr r2, 801053c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8010538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801053c:	08010591 	.word	0x08010591
 8010540:	08010717 	.word	0x08010717
 8010544:	08010717 	.word	0x08010717
 8010548:	08010717 	.word	0x08010717
 801054c:	080105d1 	.word	0x080105d1
 8010550:	08010717 	.word	0x08010717
 8010554:	08010717 	.word	0x08010717
 8010558:	08010717 	.word	0x08010717
 801055c:	08010613 	.word	0x08010613
 8010560:	08010717 	.word	0x08010717
 8010564:	08010717 	.word	0x08010717
 8010568:	08010717 	.word	0x08010717
 801056c:	08010653 	.word	0x08010653
 8010570:	08010717 	.word	0x08010717
 8010574:	08010717 	.word	0x08010717
 8010578:	08010717 	.word	0x08010717
 801057c:	08010695 	.word	0x08010695
 8010580:	08010717 	.word	0x08010717
 8010584:	08010717 	.word	0x08010717
 8010588:	08010717 	.word	0x08010717
 801058c:	080106d5 	.word	0x080106d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	68b9      	ldr	r1, [r7, #8]
 8010596:	4618      	mov	r0, r3
 8010598:	f000 fa9c 	bl	8010ad4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	699a      	ldr	r2, [r3, #24]
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	f042 0208 	orr.w	r2, r2, #8
 80105aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	699a      	ldr	r2, [r3, #24]
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	f022 0204 	bic.w	r2, r2, #4
 80105ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	6999      	ldr	r1, [r3, #24]
 80105c2:	68bb      	ldr	r3, [r7, #8]
 80105c4:	691a      	ldr	r2, [r3, #16]
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	430a      	orrs	r2, r1
 80105cc:	619a      	str	r2, [r3, #24]
      break;
 80105ce:	e0a5      	b.n	801071c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	68b9      	ldr	r1, [r7, #8]
 80105d6:	4618      	mov	r0, r3
 80105d8:	f000 fb0c 	bl	8010bf4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	699a      	ldr	r2, [r3, #24]
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80105ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	699a      	ldr	r2, [r3, #24]
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80105fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	6999      	ldr	r1, [r3, #24]
 8010602:	68bb      	ldr	r3, [r7, #8]
 8010604:	691b      	ldr	r3, [r3, #16]
 8010606:	021a      	lsls	r2, r3, #8
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	430a      	orrs	r2, r1
 801060e:	619a      	str	r2, [r3, #24]
      break;
 8010610:	e084      	b.n	801071c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	68b9      	ldr	r1, [r7, #8]
 8010618:	4618      	mov	r0, r3
 801061a:	f000 fb75 	bl	8010d08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	69da      	ldr	r2, [r3, #28]
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	f042 0208 	orr.w	r2, r2, #8
 801062c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	69da      	ldr	r2, [r3, #28]
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	f022 0204 	bic.w	r2, r2, #4
 801063c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	69d9      	ldr	r1, [r3, #28]
 8010644:	68bb      	ldr	r3, [r7, #8]
 8010646:	691a      	ldr	r2, [r3, #16]
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	430a      	orrs	r2, r1
 801064e:	61da      	str	r2, [r3, #28]
      break;
 8010650:	e064      	b.n	801071c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	68b9      	ldr	r1, [r7, #8]
 8010658:	4618      	mov	r0, r3
 801065a:	f000 fbdd 	bl	8010e18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	69da      	ldr	r2, [r3, #28]
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801066c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	69da      	ldr	r2, [r3, #28]
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801067c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	69d9      	ldr	r1, [r3, #28]
 8010684:	68bb      	ldr	r3, [r7, #8]
 8010686:	691b      	ldr	r3, [r3, #16]
 8010688:	021a      	lsls	r2, r3, #8
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	430a      	orrs	r2, r1
 8010690:	61da      	str	r2, [r3, #28]
      break;
 8010692:	e043      	b.n	801071c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	68b9      	ldr	r1, [r7, #8]
 801069a:	4618      	mov	r0, r3
 801069c:	f000 fc26 	bl	8010eec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	f042 0208 	orr.w	r2, r2, #8
 80106ae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	f022 0204 	bic.w	r2, r2, #4
 80106be:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80106c6:	68bb      	ldr	r3, [r7, #8]
 80106c8:	691a      	ldr	r2, [r3, #16]
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	430a      	orrs	r2, r1
 80106d0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80106d2:	e023      	b.n	801071c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	68b9      	ldr	r1, [r7, #8]
 80106da:	4618      	mov	r0, r3
 80106dc:	f000 fc6a 	bl	8010fb4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80106ee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80106fe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8010706:	68bb      	ldr	r3, [r7, #8]
 8010708:	691b      	ldr	r3, [r3, #16]
 801070a:	021a      	lsls	r2, r3, #8
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	430a      	orrs	r2, r1
 8010712:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8010714:	e002      	b.n	801071c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8010716:	2301      	movs	r3, #1
 8010718:	75fb      	strb	r3, [r7, #23]
      break;
 801071a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	2200      	movs	r2, #0
 8010720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8010724:	7dfb      	ldrb	r3, [r7, #23]
}
 8010726:	4618      	mov	r0, r3
 8010728:	3718      	adds	r7, #24
 801072a:	46bd      	mov	sp, r7
 801072c:	bd80      	pop	{r7, pc}
 801072e:	bf00      	nop

08010730 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8010730:	b580      	push	{r7, lr}
 8010732:	b084      	sub	sp, #16
 8010734:	af00      	add	r7, sp, #0
 8010736:	6078      	str	r0, [r7, #4]
 8010738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801073a:	2300      	movs	r3, #0
 801073c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010744:	2b01      	cmp	r3, #1
 8010746:	d101      	bne.n	801074c <HAL_TIM_ConfigClockSource+0x1c>
 8010748:	2302      	movs	r3, #2
 801074a:	e0dc      	b.n	8010906 <HAL_TIM_ConfigClockSource+0x1d6>
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	2201      	movs	r2, #1
 8010750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	2202      	movs	r2, #2
 8010758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	689b      	ldr	r3, [r3, #8]
 8010762:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8010764:	68ba      	ldr	r2, [r7, #8]
 8010766:	4b6a      	ldr	r3, [pc, #424]	@ (8010910 <HAL_TIM_ConfigClockSource+0x1e0>)
 8010768:	4013      	ands	r3, r2
 801076a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801076c:	68bb      	ldr	r3, [r7, #8]
 801076e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8010772:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	68ba      	ldr	r2, [r7, #8]
 801077a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801077c:	683b      	ldr	r3, [r7, #0]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	4a64      	ldr	r2, [pc, #400]	@ (8010914 <HAL_TIM_ConfigClockSource+0x1e4>)
 8010782:	4293      	cmp	r3, r2
 8010784:	f000 80a9 	beq.w	80108da <HAL_TIM_ConfigClockSource+0x1aa>
 8010788:	4a62      	ldr	r2, [pc, #392]	@ (8010914 <HAL_TIM_ConfigClockSource+0x1e4>)
 801078a:	4293      	cmp	r3, r2
 801078c:	f200 80ae 	bhi.w	80108ec <HAL_TIM_ConfigClockSource+0x1bc>
 8010790:	4a61      	ldr	r2, [pc, #388]	@ (8010918 <HAL_TIM_ConfigClockSource+0x1e8>)
 8010792:	4293      	cmp	r3, r2
 8010794:	f000 80a1 	beq.w	80108da <HAL_TIM_ConfigClockSource+0x1aa>
 8010798:	4a5f      	ldr	r2, [pc, #380]	@ (8010918 <HAL_TIM_ConfigClockSource+0x1e8>)
 801079a:	4293      	cmp	r3, r2
 801079c:	f200 80a6 	bhi.w	80108ec <HAL_TIM_ConfigClockSource+0x1bc>
 80107a0:	4a5e      	ldr	r2, [pc, #376]	@ (801091c <HAL_TIM_ConfigClockSource+0x1ec>)
 80107a2:	4293      	cmp	r3, r2
 80107a4:	f000 8099 	beq.w	80108da <HAL_TIM_ConfigClockSource+0x1aa>
 80107a8:	4a5c      	ldr	r2, [pc, #368]	@ (801091c <HAL_TIM_ConfigClockSource+0x1ec>)
 80107aa:	4293      	cmp	r3, r2
 80107ac:	f200 809e 	bhi.w	80108ec <HAL_TIM_ConfigClockSource+0x1bc>
 80107b0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80107b4:	f000 8091 	beq.w	80108da <HAL_TIM_ConfigClockSource+0x1aa>
 80107b8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80107bc:	f200 8096 	bhi.w	80108ec <HAL_TIM_ConfigClockSource+0x1bc>
 80107c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80107c4:	f000 8089 	beq.w	80108da <HAL_TIM_ConfigClockSource+0x1aa>
 80107c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80107cc:	f200 808e 	bhi.w	80108ec <HAL_TIM_ConfigClockSource+0x1bc>
 80107d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80107d4:	d03e      	beq.n	8010854 <HAL_TIM_ConfigClockSource+0x124>
 80107d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80107da:	f200 8087 	bhi.w	80108ec <HAL_TIM_ConfigClockSource+0x1bc>
 80107de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80107e2:	f000 8086 	beq.w	80108f2 <HAL_TIM_ConfigClockSource+0x1c2>
 80107e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80107ea:	d87f      	bhi.n	80108ec <HAL_TIM_ConfigClockSource+0x1bc>
 80107ec:	2b70      	cmp	r3, #112	@ 0x70
 80107ee:	d01a      	beq.n	8010826 <HAL_TIM_ConfigClockSource+0xf6>
 80107f0:	2b70      	cmp	r3, #112	@ 0x70
 80107f2:	d87b      	bhi.n	80108ec <HAL_TIM_ConfigClockSource+0x1bc>
 80107f4:	2b60      	cmp	r3, #96	@ 0x60
 80107f6:	d050      	beq.n	801089a <HAL_TIM_ConfigClockSource+0x16a>
 80107f8:	2b60      	cmp	r3, #96	@ 0x60
 80107fa:	d877      	bhi.n	80108ec <HAL_TIM_ConfigClockSource+0x1bc>
 80107fc:	2b50      	cmp	r3, #80	@ 0x50
 80107fe:	d03c      	beq.n	801087a <HAL_TIM_ConfigClockSource+0x14a>
 8010800:	2b50      	cmp	r3, #80	@ 0x50
 8010802:	d873      	bhi.n	80108ec <HAL_TIM_ConfigClockSource+0x1bc>
 8010804:	2b40      	cmp	r3, #64	@ 0x40
 8010806:	d058      	beq.n	80108ba <HAL_TIM_ConfigClockSource+0x18a>
 8010808:	2b40      	cmp	r3, #64	@ 0x40
 801080a:	d86f      	bhi.n	80108ec <HAL_TIM_ConfigClockSource+0x1bc>
 801080c:	2b30      	cmp	r3, #48	@ 0x30
 801080e:	d064      	beq.n	80108da <HAL_TIM_ConfigClockSource+0x1aa>
 8010810:	2b30      	cmp	r3, #48	@ 0x30
 8010812:	d86b      	bhi.n	80108ec <HAL_TIM_ConfigClockSource+0x1bc>
 8010814:	2b20      	cmp	r3, #32
 8010816:	d060      	beq.n	80108da <HAL_TIM_ConfigClockSource+0x1aa>
 8010818:	2b20      	cmp	r3, #32
 801081a:	d867      	bhi.n	80108ec <HAL_TIM_ConfigClockSource+0x1bc>
 801081c:	2b00      	cmp	r3, #0
 801081e:	d05c      	beq.n	80108da <HAL_TIM_ConfigClockSource+0x1aa>
 8010820:	2b10      	cmp	r3, #16
 8010822:	d05a      	beq.n	80108da <HAL_TIM_ConfigClockSource+0x1aa>
 8010824:	e062      	b.n	80108ec <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801082a:	683b      	ldr	r3, [r7, #0]
 801082c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801082e:	683b      	ldr	r3, [r7, #0]
 8010830:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8010832:	683b      	ldr	r3, [r7, #0]
 8010834:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8010836:	f000 fca1 	bl	801117c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	689b      	ldr	r3, [r3, #8]
 8010840:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010842:	68bb      	ldr	r3, [r7, #8]
 8010844:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8010848:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	68ba      	ldr	r2, [r7, #8]
 8010850:	609a      	str	r2, [r3, #8]
      break;
 8010852:	e04f      	b.n	80108f4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8010858:	683b      	ldr	r3, [r7, #0]
 801085a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801085c:	683b      	ldr	r3, [r7, #0]
 801085e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8010860:	683b      	ldr	r3, [r7, #0]
 8010862:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8010864:	f000 fc8a 	bl	801117c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	689a      	ldr	r2, [r3, #8]
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8010876:	609a      	str	r2, [r3, #8]
      break;
 8010878:	e03c      	b.n	80108f4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801087e:	683b      	ldr	r3, [r7, #0]
 8010880:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8010882:	683b      	ldr	r3, [r7, #0]
 8010884:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010886:	461a      	mov	r2, r3
 8010888:	f000 fbfa 	bl	8011080 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	2150      	movs	r1, #80	@ 0x50
 8010892:	4618      	mov	r0, r3
 8010894:	f000 fc54 	bl	8011140 <TIM_ITRx_SetConfig>
      break;
 8010898:	e02c      	b.n	80108f4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801089e:	683b      	ldr	r3, [r7, #0]
 80108a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80108a2:	683b      	ldr	r3, [r7, #0]
 80108a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80108a6:	461a      	mov	r2, r3
 80108a8:	f000 fc19 	bl	80110de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	2160      	movs	r1, #96	@ 0x60
 80108b2:	4618      	mov	r0, r3
 80108b4:	f000 fc44 	bl	8011140 <TIM_ITRx_SetConfig>
      break;
 80108b8:	e01c      	b.n	80108f4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80108be:	683b      	ldr	r3, [r7, #0]
 80108c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80108c2:	683b      	ldr	r3, [r7, #0]
 80108c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80108c6:	461a      	mov	r2, r3
 80108c8:	f000 fbda 	bl	8011080 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	2140      	movs	r1, #64	@ 0x40
 80108d2:	4618      	mov	r0, r3
 80108d4:	f000 fc34 	bl	8011140 <TIM_ITRx_SetConfig>
      break;
 80108d8:	e00c      	b.n	80108f4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	681a      	ldr	r2, [r3, #0]
 80108de:	683b      	ldr	r3, [r7, #0]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	4619      	mov	r1, r3
 80108e4:	4610      	mov	r0, r2
 80108e6:	f000 fc2b 	bl	8011140 <TIM_ITRx_SetConfig>
      break;
 80108ea:	e003      	b.n	80108f4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80108ec:	2301      	movs	r3, #1
 80108ee:	73fb      	strb	r3, [r7, #15]
      break;
 80108f0:	e000      	b.n	80108f4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80108f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	2201      	movs	r2, #1
 80108f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	2200      	movs	r2, #0
 8010900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8010904:	7bfb      	ldrb	r3, [r7, #15]
}
 8010906:	4618      	mov	r0, r3
 8010908:	3710      	adds	r7, #16
 801090a:	46bd      	mov	sp, r7
 801090c:	bd80      	pop	{r7, pc}
 801090e:	bf00      	nop
 8010910:	ffceff88 	.word	0xffceff88
 8010914:	00100040 	.word	0x00100040
 8010918:	00100030 	.word	0x00100030
 801091c:	00100020 	.word	0x00100020

08010920 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010920:	b480      	push	{r7}
 8010922:	b083      	sub	sp, #12
 8010924:	af00      	add	r7, sp, #0
 8010926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010928:	bf00      	nop
 801092a:	370c      	adds	r7, #12
 801092c:	46bd      	mov	sp, r7
 801092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010932:	4770      	bx	lr

08010934 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010934:	b480      	push	{r7}
 8010936:	b083      	sub	sp, #12
 8010938:	af00      	add	r7, sp, #0
 801093a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801093c:	bf00      	nop
 801093e:	370c      	adds	r7, #12
 8010940:	46bd      	mov	sp, r7
 8010942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010946:	4770      	bx	lr

08010948 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010948:	b480      	push	{r7}
 801094a:	b083      	sub	sp, #12
 801094c:	af00      	add	r7, sp, #0
 801094e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010950:	bf00      	nop
 8010952:	370c      	adds	r7, #12
 8010954:	46bd      	mov	sp, r7
 8010956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801095a:	4770      	bx	lr

0801095c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801095c:	b480      	push	{r7}
 801095e:	b083      	sub	sp, #12
 8010960:	af00      	add	r7, sp, #0
 8010962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010964:	bf00      	nop
 8010966:	370c      	adds	r7, #12
 8010968:	46bd      	mov	sp, r7
 801096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801096e:	4770      	bx	lr

08010970 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010970:	b480      	push	{r7}
 8010972:	b085      	sub	sp, #20
 8010974:	af00      	add	r7, sp, #0
 8010976:	6078      	str	r0, [r7, #4]
 8010978:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	4a4a      	ldr	r2, [pc, #296]	@ (8010aac <TIM_Base_SetConfig+0x13c>)
 8010984:	4293      	cmp	r3, r2
 8010986:	d013      	beq.n	80109b0 <TIM_Base_SetConfig+0x40>
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801098e:	d00f      	beq.n	80109b0 <TIM_Base_SetConfig+0x40>
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	4a47      	ldr	r2, [pc, #284]	@ (8010ab0 <TIM_Base_SetConfig+0x140>)
 8010994:	4293      	cmp	r3, r2
 8010996:	d00b      	beq.n	80109b0 <TIM_Base_SetConfig+0x40>
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	4a46      	ldr	r2, [pc, #280]	@ (8010ab4 <TIM_Base_SetConfig+0x144>)
 801099c:	4293      	cmp	r3, r2
 801099e:	d007      	beq.n	80109b0 <TIM_Base_SetConfig+0x40>
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	4a45      	ldr	r2, [pc, #276]	@ (8010ab8 <TIM_Base_SetConfig+0x148>)
 80109a4:	4293      	cmp	r3, r2
 80109a6:	d003      	beq.n	80109b0 <TIM_Base_SetConfig+0x40>
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	4a44      	ldr	r2, [pc, #272]	@ (8010abc <TIM_Base_SetConfig+0x14c>)
 80109ac:	4293      	cmp	r3, r2
 80109ae:	d108      	bne.n	80109c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80109b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80109b8:	683b      	ldr	r3, [r7, #0]
 80109ba:	685b      	ldr	r3, [r3, #4]
 80109bc:	68fa      	ldr	r2, [r7, #12]
 80109be:	4313      	orrs	r3, r2
 80109c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	4a39      	ldr	r2, [pc, #228]	@ (8010aac <TIM_Base_SetConfig+0x13c>)
 80109c6:	4293      	cmp	r3, r2
 80109c8:	d027      	beq.n	8010a1a <TIM_Base_SetConfig+0xaa>
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80109d0:	d023      	beq.n	8010a1a <TIM_Base_SetConfig+0xaa>
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	4a36      	ldr	r2, [pc, #216]	@ (8010ab0 <TIM_Base_SetConfig+0x140>)
 80109d6:	4293      	cmp	r3, r2
 80109d8:	d01f      	beq.n	8010a1a <TIM_Base_SetConfig+0xaa>
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	4a35      	ldr	r2, [pc, #212]	@ (8010ab4 <TIM_Base_SetConfig+0x144>)
 80109de:	4293      	cmp	r3, r2
 80109e0:	d01b      	beq.n	8010a1a <TIM_Base_SetConfig+0xaa>
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	4a34      	ldr	r2, [pc, #208]	@ (8010ab8 <TIM_Base_SetConfig+0x148>)
 80109e6:	4293      	cmp	r3, r2
 80109e8:	d017      	beq.n	8010a1a <TIM_Base_SetConfig+0xaa>
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	4a33      	ldr	r2, [pc, #204]	@ (8010abc <TIM_Base_SetConfig+0x14c>)
 80109ee:	4293      	cmp	r3, r2
 80109f0:	d013      	beq.n	8010a1a <TIM_Base_SetConfig+0xaa>
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	4a32      	ldr	r2, [pc, #200]	@ (8010ac0 <TIM_Base_SetConfig+0x150>)
 80109f6:	4293      	cmp	r3, r2
 80109f8:	d00f      	beq.n	8010a1a <TIM_Base_SetConfig+0xaa>
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	4a31      	ldr	r2, [pc, #196]	@ (8010ac4 <TIM_Base_SetConfig+0x154>)
 80109fe:	4293      	cmp	r3, r2
 8010a00:	d00b      	beq.n	8010a1a <TIM_Base_SetConfig+0xaa>
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	4a30      	ldr	r2, [pc, #192]	@ (8010ac8 <TIM_Base_SetConfig+0x158>)
 8010a06:	4293      	cmp	r3, r2
 8010a08:	d007      	beq.n	8010a1a <TIM_Base_SetConfig+0xaa>
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	4a2f      	ldr	r2, [pc, #188]	@ (8010acc <TIM_Base_SetConfig+0x15c>)
 8010a0e:	4293      	cmp	r3, r2
 8010a10:	d003      	beq.n	8010a1a <TIM_Base_SetConfig+0xaa>
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	4a2e      	ldr	r2, [pc, #184]	@ (8010ad0 <TIM_Base_SetConfig+0x160>)
 8010a16:	4293      	cmp	r3, r2
 8010a18:	d108      	bne.n	8010a2c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010a20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010a22:	683b      	ldr	r3, [r7, #0]
 8010a24:	68db      	ldr	r3, [r3, #12]
 8010a26:	68fa      	ldr	r2, [r7, #12]
 8010a28:	4313      	orrs	r3, r2
 8010a2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8010a32:	683b      	ldr	r3, [r7, #0]
 8010a34:	695b      	ldr	r3, [r3, #20]
 8010a36:	4313      	orrs	r3, r2
 8010a38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	68fa      	ldr	r2, [r7, #12]
 8010a3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010a40:	683b      	ldr	r3, [r7, #0]
 8010a42:	689a      	ldr	r2, [r3, #8]
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010a48:	683b      	ldr	r3, [r7, #0]
 8010a4a:	681a      	ldr	r2, [r3, #0]
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	4a16      	ldr	r2, [pc, #88]	@ (8010aac <TIM_Base_SetConfig+0x13c>)
 8010a54:	4293      	cmp	r3, r2
 8010a56:	d00f      	beq.n	8010a78 <TIM_Base_SetConfig+0x108>
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	4a18      	ldr	r2, [pc, #96]	@ (8010abc <TIM_Base_SetConfig+0x14c>)
 8010a5c:	4293      	cmp	r3, r2
 8010a5e:	d00b      	beq.n	8010a78 <TIM_Base_SetConfig+0x108>
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	4a17      	ldr	r2, [pc, #92]	@ (8010ac0 <TIM_Base_SetConfig+0x150>)
 8010a64:	4293      	cmp	r3, r2
 8010a66:	d007      	beq.n	8010a78 <TIM_Base_SetConfig+0x108>
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	4a16      	ldr	r2, [pc, #88]	@ (8010ac4 <TIM_Base_SetConfig+0x154>)
 8010a6c:	4293      	cmp	r3, r2
 8010a6e:	d003      	beq.n	8010a78 <TIM_Base_SetConfig+0x108>
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	4a15      	ldr	r2, [pc, #84]	@ (8010ac8 <TIM_Base_SetConfig+0x158>)
 8010a74:	4293      	cmp	r3, r2
 8010a76:	d103      	bne.n	8010a80 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010a78:	683b      	ldr	r3, [r7, #0]
 8010a7a:	691a      	ldr	r2, [r3, #16]
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	2201      	movs	r2, #1
 8010a84:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	691b      	ldr	r3, [r3, #16]
 8010a8a:	f003 0301 	and.w	r3, r3, #1
 8010a8e:	2b01      	cmp	r3, #1
 8010a90:	d105      	bne.n	8010a9e <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	691b      	ldr	r3, [r3, #16]
 8010a96:	f023 0201 	bic.w	r2, r3, #1
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	611a      	str	r2, [r3, #16]
  }
}
 8010a9e:	bf00      	nop
 8010aa0:	3714      	adds	r7, #20
 8010aa2:	46bd      	mov	sp, r7
 8010aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa8:	4770      	bx	lr
 8010aaa:	bf00      	nop
 8010aac:	40010000 	.word	0x40010000
 8010ab0:	40000400 	.word	0x40000400
 8010ab4:	40000800 	.word	0x40000800
 8010ab8:	40000c00 	.word	0x40000c00
 8010abc:	40010400 	.word	0x40010400
 8010ac0:	40014000 	.word	0x40014000
 8010ac4:	40014400 	.word	0x40014400
 8010ac8:	40014800 	.word	0x40014800
 8010acc:	4000e000 	.word	0x4000e000
 8010ad0:	4000e400 	.word	0x4000e400

08010ad4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010ad4:	b480      	push	{r7}
 8010ad6:	b087      	sub	sp, #28
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	6078      	str	r0, [r7, #4]
 8010adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	6a1b      	ldr	r3, [r3, #32]
 8010ae2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	6a1b      	ldr	r3, [r3, #32]
 8010ae8:	f023 0201 	bic.w	r2, r3, #1
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	685b      	ldr	r3, [r3, #4]
 8010af4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	699b      	ldr	r3, [r3, #24]
 8010afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010afc:	68fa      	ldr	r2, [r7, #12]
 8010afe:	4b37      	ldr	r3, [pc, #220]	@ (8010bdc <TIM_OC1_SetConfig+0x108>)
 8010b00:	4013      	ands	r3, r2
 8010b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	f023 0303 	bic.w	r3, r3, #3
 8010b0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010b0c:	683b      	ldr	r3, [r7, #0]
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	68fa      	ldr	r2, [r7, #12]
 8010b12:	4313      	orrs	r3, r2
 8010b14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010b16:	697b      	ldr	r3, [r7, #20]
 8010b18:	f023 0302 	bic.w	r3, r3, #2
 8010b1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010b1e:	683b      	ldr	r3, [r7, #0]
 8010b20:	689b      	ldr	r3, [r3, #8]
 8010b22:	697a      	ldr	r2, [r7, #20]
 8010b24:	4313      	orrs	r3, r2
 8010b26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	4a2d      	ldr	r2, [pc, #180]	@ (8010be0 <TIM_OC1_SetConfig+0x10c>)
 8010b2c:	4293      	cmp	r3, r2
 8010b2e:	d00f      	beq.n	8010b50 <TIM_OC1_SetConfig+0x7c>
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	4a2c      	ldr	r2, [pc, #176]	@ (8010be4 <TIM_OC1_SetConfig+0x110>)
 8010b34:	4293      	cmp	r3, r2
 8010b36:	d00b      	beq.n	8010b50 <TIM_OC1_SetConfig+0x7c>
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	4a2b      	ldr	r2, [pc, #172]	@ (8010be8 <TIM_OC1_SetConfig+0x114>)
 8010b3c:	4293      	cmp	r3, r2
 8010b3e:	d007      	beq.n	8010b50 <TIM_OC1_SetConfig+0x7c>
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	4a2a      	ldr	r2, [pc, #168]	@ (8010bec <TIM_OC1_SetConfig+0x118>)
 8010b44:	4293      	cmp	r3, r2
 8010b46:	d003      	beq.n	8010b50 <TIM_OC1_SetConfig+0x7c>
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	4a29      	ldr	r2, [pc, #164]	@ (8010bf0 <TIM_OC1_SetConfig+0x11c>)
 8010b4c:	4293      	cmp	r3, r2
 8010b4e:	d10c      	bne.n	8010b6a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010b50:	697b      	ldr	r3, [r7, #20]
 8010b52:	f023 0308 	bic.w	r3, r3, #8
 8010b56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010b58:	683b      	ldr	r3, [r7, #0]
 8010b5a:	68db      	ldr	r3, [r3, #12]
 8010b5c:	697a      	ldr	r2, [r7, #20]
 8010b5e:	4313      	orrs	r3, r2
 8010b60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010b62:	697b      	ldr	r3, [r7, #20]
 8010b64:	f023 0304 	bic.w	r3, r3, #4
 8010b68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	4a1c      	ldr	r2, [pc, #112]	@ (8010be0 <TIM_OC1_SetConfig+0x10c>)
 8010b6e:	4293      	cmp	r3, r2
 8010b70:	d00f      	beq.n	8010b92 <TIM_OC1_SetConfig+0xbe>
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	4a1b      	ldr	r2, [pc, #108]	@ (8010be4 <TIM_OC1_SetConfig+0x110>)
 8010b76:	4293      	cmp	r3, r2
 8010b78:	d00b      	beq.n	8010b92 <TIM_OC1_SetConfig+0xbe>
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	4a1a      	ldr	r2, [pc, #104]	@ (8010be8 <TIM_OC1_SetConfig+0x114>)
 8010b7e:	4293      	cmp	r3, r2
 8010b80:	d007      	beq.n	8010b92 <TIM_OC1_SetConfig+0xbe>
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	4a19      	ldr	r2, [pc, #100]	@ (8010bec <TIM_OC1_SetConfig+0x118>)
 8010b86:	4293      	cmp	r3, r2
 8010b88:	d003      	beq.n	8010b92 <TIM_OC1_SetConfig+0xbe>
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	4a18      	ldr	r2, [pc, #96]	@ (8010bf0 <TIM_OC1_SetConfig+0x11c>)
 8010b8e:	4293      	cmp	r3, r2
 8010b90:	d111      	bne.n	8010bb6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010b92:	693b      	ldr	r3, [r7, #16]
 8010b94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010b98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010b9a:	693b      	ldr	r3, [r7, #16]
 8010b9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010ba0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010ba2:	683b      	ldr	r3, [r7, #0]
 8010ba4:	695b      	ldr	r3, [r3, #20]
 8010ba6:	693a      	ldr	r2, [r7, #16]
 8010ba8:	4313      	orrs	r3, r2
 8010baa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010bac:	683b      	ldr	r3, [r7, #0]
 8010bae:	699b      	ldr	r3, [r3, #24]
 8010bb0:	693a      	ldr	r2, [r7, #16]
 8010bb2:	4313      	orrs	r3, r2
 8010bb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	693a      	ldr	r2, [r7, #16]
 8010bba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	68fa      	ldr	r2, [r7, #12]
 8010bc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010bc2:	683b      	ldr	r3, [r7, #0]
 8010bc4:	685a      	ldr	r2, [r3, #4]
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	697a      	ldr	r2, [r7, #20]
 8010bce:	621a      	str	r2, [r3, #32]
}
 8010bd0:	bf00      	nop
 8010bd2:	371c      	adds	r7, #28
 8010bd4:	46bd      	mov	sp, r7
 8010bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bda:	4770      	bx	lr
 8010bdc:	fffeff8f 	.word	0xfffeff8f
 8010be0:	40010000 	.word	0x40010000
 8010be4:	40010400 	.word	0x40010400
 8010be8:	40014000 	.word	0x40014000
 8010bec:	40014400 	.word	0x40014400
 8010bf0:	40014800 	.word	0x40014800

08010bf4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010bf4:	b480      	push	{r7}
 8010bf6:	b087      	sub	sp, #28
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	6078      	str	r0, [r7, #4]
 8010bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	6a1b      	ldr	r3, [r3, #32]
 8010c02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	6a1b      	ldr	r3, [r3, #32]
 8010c08:	f023 0210 	bic.w	r2, r3, #16
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	685b      	ldr	r3, [r3, #4]
 8010c14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	699b      	ldr	r3, [r3, #24]
 8010c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010c1c:	68fa      	ldr	r2, [r7, #12]
 8010c1e:	4b34      	ldr	r3, [pc, #208]	@ (8010cf0 <TIM_OC2_SetConfig+0xfc>)
 8010c20:	4013      	ands	r3, r2
 8010c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010c2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010c2c:	683b      	ldr	r3, [r7, #0]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	021b      	lsls	r3, r3, #8
 8010c32:	68fa      	ldr	r2, [r7, #12]
 8010c34:	4313      	orrs	r3, r2
 8010c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010c38:	697b      	ldr	r3, [r7, #20]
 8010c3a:	f023 0320 	bic.w	r3, r3, #32
 8010c3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010c40:	683b      	ldr	r3, [r7, #0]
 8010c42:	689b      	ldr	r3, [r3, #8]
 8010c44:	011b      	lsls	r3, r3, #4
 8010c46:	697a      	ldr	r2, [r7, #20]
 8010c48:	4313      	orrs	r3, r2
 8010c4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	4a29      	ldr	r2, [pc, #164]	@ (8010cf4 <TIM_OC2_SetConfig+0x100>)
 8010c50:	4293      	cmp	r3, r2
 8010c52:	d003      	beq.n	8010c5c <TIM_OC2_SetConfig+0x68>
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	4a28      	ldr	r2, [pc, #160]	@ (8010cf8 <TIM_OC2_SetConfig+0x104>)
 8010c58:	4293      	cmp	r3, r2
 8010c5a:	d10d      	bne.n	8010c78 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010c5c:	697b      	ldr	r3, [r7, #20]
 8010c5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010c62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010c64:	683b      	ldr	r3, [r7, #0]
 8010c66:	68db      	ldr	r3, [r3, #12]
 8010c68:	011b      	lsls	r3, r3, #4
 8010c6a:	697a      	ldr	r2, [r7, #20]
 8010c6c:	4313      	orrs	r3, r2
 8010c6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010c70:	697b      	ldr	r3, [r7, #20]
 8010c72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010c76:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	4a1e      	ldr	r2, [pc, #120]	@ (8010cf4 <TIM_OC2_SetConfig+0x100>)
 8010c7c:	4293      	cmp	r3, r2
 8010c7e:	d00f      	beq.n	8010ca0 <TIM_OC2_SetConfig+0xac>
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	4a1d      	ldr	r2, [pc, #116]	@ (8010cf8 <TIM_OC2_SetConfig+0x104>)
 8010c84:	4293      	cmp	r3, r2
 8010c86:	d00b      	beq.n	8010ca0 <TIM_OC2_SetConfig+0xac>
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	4a1c      	ldr	r2, [pc, #112]	@ (8010cfc <TIM_OC2_SetConfig+0x108>)
 8010c8c:	4293      	cmp	r3, r2
 8010c8e:	d007      	beq.n	8010ca0 <TIM_OC2_SetConfig+0xac>
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	4a1b      	ldr	r2, [pc, #108]	@ (8010d00 <TIM_OC2_SetConfig+0x10c>)
 8010c94:	4293      	cmp	r3, r2
 8010c96:	d003      	beq.n	8010ca0 <TIM_OC2_SetConfig+0xac>
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	4a1a      	ldr	r2, [pc, #104]	@ (8010d04 <TIM_OC2_SetConfig+0x110>)
 8010c9c:	4293      	cmp	r3, r2
 8010c9e:	d113      	bne.n	8010cc8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010ca0:	693b      	ldr	r3, [r7, #16]
 8010ca2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8010ca6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010ca8:	693b      	ldr	r3, [r7, #16]
 8010caa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010cae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010cb0:	683b      	ldr	r3, [r7, #0]
 8010cb2:	695b      	ldr	r3, [r3, #20]
 8010cb4:	009b      	lsls	r3, r3, #2
 8010cb6:	693a      	ldr	r2, [r7, #16]
 8010cb8:	4313      	orrs	r3, r2
 8010cba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010cbc:	683b      	ldr	r3, [r7, #0]
 8010cbe:	699b      	ldr	r3, [r3, #24]
 8010cc0:	009b      	lsls	r3, r3, #2
 8010cc2:	693a      	ldr	r2, [r7, #16]
 8010cc4:	4313      	orrs	r3, r2
 8010cc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	693a      	ldr	r2, [r7, #16]
 8010ccc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	68fa      	ldr	r2, [r7, #12]
 8010cd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010cd4:	683b      	ldr	r3, [r7, #0]
 8010cd6:	685a      	ldr	r2, [r3, #4]
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	697a      	ldr	r2, [r7, #20]
 8010ce0:	621a      	str	r2, [r3, #32]
}
 8010ce2:	bf00      	nop
 8010ce4:	371c      	adds	r7, #28
 8010ce6:	46bd      	mov	sp, r7
 8010ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cec:	4770      	bx	lr
 8010cee:	bf00      	nop
 8010cf0:	feff8fff 	.word	0xfeff8fff
 8010cf4:	40010000 	.word	0x40010000
 8010cf8:	40010400 	.word	0x40010400
 8010cfc:	40014000 	.word	0x40014000
 8010d00:	40014400 	.word	0x40014400
 8010d04:	40014800 	.word	0x40014800

08010d08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010d08:	b480      	push	{r7}
 8010d0a:	b087      	sub	sp, #28
 8010d0c:	af00      	add	r7, sp, #0
 8010d0e:	6078      	str	r0, [r7, #4]
 8010d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	6a1b      	ldr	r3, [r3, #32]
 8010d16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	6a1b      	ldr	r3, [r3, #32]
 8010d1c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	685b      	ldr	r3, [r3, #4]
 8010d28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	69db      	ldr	r3, [r3, #28]
 8010d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010d30:	68fa      	ldr	r2, [r7, #12]
 8010d32:	4b33      	ldr	r3, [pc, #204]	@ (8010e00 <TIM_OC3_SetConfig+0xf8>)
 8010d34:	4013      	ands	r3, r2
 8010d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	f023 0303 	bic.w	r3, r3, #3
 8010d3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010d40:	683b      	ldr	r3, [r7, #0]
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	68fa      	ldr	r2, [r7, #12]
 8010d46:	4313      	orrs	r3, r2
 8010d48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010d4a:	697b      	ldr	r3, [r7, #20]
 8010d4c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010d50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010d52:	683b      	ldr	r3, [r7, #0]
 8010d54:	689b      	ldr	r3, [r3, #8]
 8010d56:	021b      	lsls	r3, r3, #8
 8010d58:	697a      	ldr	r2, [r7, #20]
 8010d5a:	4313      	orrs	r3, r2
 8010d5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	4a28      	ldr	r2, [pc, #160]	@ (8010e04 <TIM_OC3_SetConfig+0xfc>)
 8010d62:	4293      	cmp	r3, r2
 8010d64:	d003      	beq.n	8010d6e <TIM_OC3_SetConfig+0x66>
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	4a27      	ldr	r2, [pc, #156]	@ (8010e08 <TIM_OC3_SetConfig+0x100>)
 8010d6a:	4293      	cmp	r3, r2
 8010d6c:	d10d      	bne.n	8010d8a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010d6e:	697b      	ldr	r3, [r7, #20]
 8010d70:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010d74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010d76:	683b      	ldr	r3, [r7, #0]
 8010d78:	68db      	ldr	r3, [r3, #12]
 8010d7a:	021b      	lsls	r3, r3, #8
 8010d7c:	697a      	ldr	r2, [r7, #20]
 8010d7e:	4313      	orrs	r3, r2
 8010d80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010d82:	697b      	ldr	r3, [r7, #20]
 8010d84:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8010d88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	4a1d      	ldr	r2, [pc, #116]	@ (8010e04 <TIM_OC3_SetConfig+0xfc>)
 8010d8e:	4293      	cmp	r3, r2
 8010d90:	d00f      	beq.n	8010db2 <TIM_OC3_SetConfig+0xaa>
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	4a1c      	ldr	r2, [pc, #112]	@ (8010e08 <TIM_OC3_SetConfig+0x100>)
 8010d96:	4293      	cmp	r3, r2
 8010d98:	d00b      	beq.n	8010db2 <TIM_OC3_SetConfig+0xaa>
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	4a1b      	ldr	r2, [pc, #108]	@ (8010e0c <TIM_OC3_SetConfig+0x104>)
 8010d9e:	4293      	cmp	r3, r2
 8010da0:	d007      	beq.n	8010db2 <TIM_OC3_SetConfig+0xaa>
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	4a1a      	ldr	r2, [pc, #104]	@ (8010e10 <TIM_OC3_SetConfig+0x108>)
 8010da6:	4293      	cmp	r3, r2
 8010da8:	d003      	beq.n	8010db2 <TIM_OC3_SetConfig+0xaa>
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	4a19      	ldr	r2, [pc, #100]	@ (8010e14 <TIM_OC3_SetConfig+0x10c>)
 8010dae:	4293      	cmp	r3, r2
 8010db0:	d113      	bne.n	8010dda <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010db2:	693b      	ldr	r3, [r7, #16]
 8010db4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010db8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010dba:	693b      	ldr	r3, [r7, #16]
 8010dbc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8010dc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010dc2:	683b      	ldr	r3, [r7, #0]
 8010dc4:	695b      	ldr	r3, [r3, #20]
 8010dc6:	011b      	lsls	r3, r3, #4
 8010dc8:	693a      	ldr	r2, [r7, #16]
 8010dca:	4313      	orrs	r3, r2
 8010dcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010dce:	683b      	ldr	r3, [r7, #0]
 8010dd0:	699b      	ldr	r3, [r3, #24]
 8010dd2:	011b      	lsls	r3, r3, #4
 8010dd4:	693a      	ldr	r2, [r7, #16]
 8010dd6:	4313      	orrs	r3, r2
 8010dd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	693a      	ldr	r2, [r7, #16]
 8010dde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	68fa      	ldr	r2, [r7, #12]
 8010de4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010de6:	683b      	ldr	r3, [r7, #0]
 8010de8:	685a      	ldr	r2, [r3, #4]
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	697a      	ldr	r2, [r7, #20]
 8010df2:	621a      	str	r2, [r3, #32]
}
 8010df4:	bf00      	nop
 8010df6:	371c      	adds	r7, #28
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dfe:	4770      	bx	lr
 8010e00:	fffeff8f 	.word	0xfffeff8f
 8010e04:	40010000 	.word	0x40010000
 8010e08:	40010400 	.word	0x40010400
 8010e0c:	40014000 	.word	0x40014000
 8010e10:	40014400 	.word	0x40014400
 8010e14:	40014800 	.word	0x40014800

08010e18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010e18:	b480      	push	{r7}
 8010e1a:	b087      	sub	sp, #28
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	6078      	str	r0, [r7, #4]
 8010e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	6a1b      	ldr	r3, [r3, #32]
 8010e26:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	6a1b      	ldr	r3, [r3, #32]
 8010e2c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	685b      	ldr	r3, [r3, #4]
 8010e38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	69db      	ldr	r3, [r3, #28]
 8010e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010e40:	68fa      	ldr	r2, [r7, #12]
 8010e42:	4b24      	ldr	r3, [pc, #144]	@ (8010ed4 <TIM_OC4_SetConfig+0xbc>)
 8010e44:	4013      	ands	r3, r2
 8010e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010e4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010e50:	683b      	ldr	r3, [r7, #0]
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	021b      	lsls	r3, r3, #8
 8010e56:	68fa      	ldr	r2, [r7, #12]
 8010e58:	4313      	orrs	r3, r2
 8010e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010e5c:	693b      	ldr	r3, [r7, #16]
 8010e5e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8010e62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010e64:	683b      	ldr	r3, [r7, #0]
 8010e66:	689b      	ldr	r3, [r3, #8]
 8010e68:	031b      	lsls	r3, r3, #12
 8010e6a:	693a      	ldr	r2, [r7, #16]
 8010e6c:	4313      	orrs	r3, r2
 8010e6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	4a19      	ldr	r2, [pc, #100]	@ (8010ed8 <TIM_OC4_SetConfig+0xc0>)
 8010e74:	4293      	cmp	r3, r2
 8010e76:	d00f      	beq.n	8010e98 <TIM_OC4_SetConfig+0x80>
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	4a18      	ldr	r2, [pc, #96]	@ (8010edc <TIM_OC4_SetConfig+0xc4>)
 8010e7c:	4293      	cmp	r3, r2
 8010e7e:	d00b      	beq.n	8010e98 <TIM_OC4_SetConfig+0x80>
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	4a17      	ldr	r2, [pc, #92]	@ (8010ee0 <TIM_OC4_SetConfig+0xc8>)
 8010e84:	4293      	cmp	r3, r2
 8010e86:	d007      	beq.n	8010e98 <TIM_OC4_SetConfig+0x80>
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	4a16      	ldr	r2, [pc, #88]	@ (8010ee4 <TIM_OC4_SetConfig+0xcc>)
 8010e8c:	4293      	cmp	r3, r2
 8010e8e:	d003      	beq.n	8010e98 <TIM_OC4_SetConfig+0x80>
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	4a15      	ldr	r2, [pc, #84]	@ (8010ee8 <TIM_OC4_SetConfig+0xd0>)
 8010e94:	4293      	cmp	r3, r2
 8010e96:	d109      	bne.n	8010eac <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010e98:	697b      	ldr	r3, [r7, #20]
 8010e9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010e9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010ea0:	683b      	ldr	r3, [r7, #0]
 8010ea2:	695b      	ldr	r3, [r3, #20]
 8010ea4:	019b      	lsls	r3, r3, #6
 8010ea6:	697a      	ldr	r2, [r7, #20]
 8010ea8:	4313      	orrs	r3, r2
 8010eaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	697a      	ldr	r2, [r7, #20]
 8010eb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	68fa      	ldr	r2, [r7, #12]
 8010eb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010eb8:	683b      	ldr	r3, [r7, #0]
 8010eba:	685a      	ldr	r2, [r3, #4]
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	693a      	ldr	r2, [r7, #16]
 8010ec4:	621a      	str	r2, [r3, #32]
}
 8010ec6:	bf00      	nop
 8010ec8:	371c      	adds	r7, #28
 8010eca:	46bd      	mov	sp, r7
 8010ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed0:	4770      	bx	lr
 8010ed2:	bf00      	nop
 8010ed4:	feff8fff 	.word	0xfeff8fff
 8010ed8:	40010000 	.word	0x40010000
 8010edc:	40010400 	.word	0x40010400
 8010ee0:	40014000 	.word	0x40014000
 8010ee4:	40014400 	.word	0x40014400
 8010ee8:	40014800 	.word	0x40014800

08010eec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010eec:	b480      	push	{r7}
 8010eee:	b087      	sub	sp, #28
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	6078      	str	r0, [r7, #4]
 8010ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	6a1b      	ldr	r3, [r3, #32]
 8010efa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	6a1b      	ldr	r3, [r3, #32]
 8010f00:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	685b      	ldr	r3, [r3, #4]
 8010f0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010f14:	68fa      	ldr	r2, [r7, #12]
 8010f16:	4b21      	ldr	r3, [pc, #132]	@ (8010f9c <TIM_OC5_SetConfig+0xb0>)
 8010f18:	4013      	ands	r3, r2
 8010f1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010f1c:	683b      	ldr	r3, [r7, #0]
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	68fa      	ldr	r2, [r7, #12]
 8010f22:	4313      	orrs	r3, r2
 8010f24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8010f26:	693b      	ldr	r3, [r7, #16]
 8010f28:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8010f2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8010f2e:	683b      	ldr	r3, [r7, #0]
 8010f30:	689b      	ldr	r3, [r3, #8]
 8010f32:	041b      	lsls	r3, r3, #16
 8010f34:	693a      	ldr	r2, [r7, #16]
 8010f36:	4313      	orrs	r3, r2
 8010f38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	4a18      	ldr	r2, [pc, #96]	@ (8010fa0 <TIM_OC5_SetConfig+0xb4>)
 8010f3e:	4293      	cmp	r3, r2
 8010f40:	d00f      	beq.n	8010f62 <TIM_OC5_SetConfig+0x76>
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	4a17      	ldr	r2, [pc, #92]	@ (8010fa4 <TIM_OC5_SetConfig+0xb8>)
 8010f46:	4293      	cmp	r3, r2
 8010f48:	d00b      	beq.n	8010f62 <TIM_OC5_SetConfig+0x76>
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	4a16      	ldr	r2, [pc, #88]	@ (8010fa8 <TIM_OC5_SetConfig+0xbc>)
 8010f4e:	4293      	cmp	r3, r2
 8010f50:	d007      	beq.n	8010f62 <TIM_OC5_SetConfig+0x76>
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	4a15      	ldr	r2, [pc, #84]	@ (8010fac <TIM_OC5_SetConfig+0xc0>)
 8010f56:	4293      	cmp	r3, r2
 8010f58:	d003      	beq.n	8010f62 <TIM_OC5_SetConfig+0x76>
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	4a14      	ldr	r2, [pc, #80]	@ (8010fb0 <TIM_OC5_SetConfig+0xc4>)
 8010f5e:	4293      	cmp	r3, r2
 8010f60:	d109      	bne.n	8010f76 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8010f62:	697b      	ldr	r3, [r7, #20]
 8010f64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010f68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8010f6a:	683b      	ldr	r3, [r7, #0]
 8010f6c:	695b      	ldr	r3, [r3, #20]
 8010f6e:	021b      	lsls	r3, r3, #8
 8010f70:	697a      	ldr	r2, [r7, #20]
 8010f72:	4313      	orrs	r3, r2
 8010f74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	697a      	ldr	r2, [r7, #20]
 8010f7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	68fa      	ldr	r2, [r7, #12]
 8010f80:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8010f82:	683b      	ldr	r3, [r7, #0]
 8010f84:	685a      	ldr	r2, [r3, #4]
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	693a      	ldr	r2, [r7, #16]
 8010f8e:	621a      	str	r2, [r3, #32]
}
 8010f90:	bf00      	nop
 8010f92:	371c      	adds	r7, #28
 8010f94:	46bd      	mov	sp, r7
 8010f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f9a:	4770      	bx	lr
 8010f9c:	fffeff8f 	.word	0xfffeff8f
 8010fa0:	40010000 	.word	0x40010000
 8010fa4:	40010400 	.word	0x40010400
 8010fa8:	40014000 	.word	0x40014000
 8010fac:	40014400 	.word	0x40014400
 8010fb0:	40014800 	.word	0x40014800

08010fb4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010fb4:	b480      	push	{r7}
 8010fb6:	b087      	sub	sp, #28
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	6078      	str	r0, [r7, #4]
 8010fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	6a1b      	ldr	r3, [r3, #32]
 8010fc2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	6a1b      	ldr	r3, [r3, #32]
 8010fc8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	685b      	ldr	r3, [r3, #4]
 8010fd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010fdc:	68fa      	ldr	r2, [r7, #12]
 8010fde:	4b22      	ldr	r3, [pc, #136]	@ (8011068 <TIM_OC6_SetConfig+0xb4>)
 8010fe0:	4013      	ands	r3, r2
 8010fe2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010fe4:	683b      	ldr	r3, [r7, #0]
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	021b      	lsls	r3, r3, #8
 8010fea:	68fa      	ldr	r2, [r7, #12]
 8010fec:	4313      	orrs	r3, r2
 8010fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010ff0:	693b      	ldr	r3, [r7, #16]
 8010ff2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8010ff6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010ff8:	683b      	ldr	r3, [r7, #0]
 8010ffa:	689b      	ldr	r3, [r3, #8]
 8010ffc:	051b      	lsls	r3, r3, #20
 8010ffe:	693a      	ldr	r2, [r7, #16]
 8011000:	4313      	orrs	r3, r2
 8011002:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	4a19      	ldr	r2, [pc, #100]	@ (801106c <TIM_OC6_SetConfig+0xb8>)
 8011008:	4293      	cmp	r3, r2
 801100a:	d00f      	beq.n	801102c <TIM_OC6_SetConfig+0x78>
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	4a18      	ldr	r2, [pc, #96]	@ (8011070 <TIM_OC6_SetConfig+0xbc>)
 8011010:	4293      	cmp	r3, r2
 8011012:	d00b      	beq.n	801102c <TIM_OC6_SetConfig+0x78>
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	4a17      	ldr	r2, [pc, #92]	@ (8011074 <TIM_OC6_SetConfig+0xc0>)
 8011018:	4293      	cmp	r3, r2
 801101a:	d007      	beq.n	801102c <TIM_OC6_SetConfig+0x78>
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	4a16      	ldr	r2, [pc, #88]	@ (8011078 <TIM_OC6_SetConfig+0xc4>)
 8011020:	4293      	cmp	r3, r2
 8011022:	d003      	beq.n	801102c <TIM_OC6_SetConfig+0x78>
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	4a15      	ldr	r2, [pc, #84]	@ (801107c <TIM_OC6_SetConfig+0xc8>)
 8011028:	4293      	cmp	r3, r2
 801102a:	d109      	bne.n	8011040 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801102c:	697b      	ldr	r3, [r7, #20]
 801102e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8011032:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8011034:	683b      	ldr	r3, [r7, #0]
 8011036:	695b      	ldr	r3, [r3, #20]
 8011038:	029b      	lsls	r3, r3, #10
 801103a:	697a      	ldr	r2, [r7, #20]
 801103c:	4313      	orrs	r3, r2
 801103e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	697a      	ldr	r2, [r7, #20]
 8011044:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	68fa      	ldr	r2, [r7, #12]
 801104a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801104c:	683b      	ldr	r3, [r7, #0]
 801104e:	685a      	ldr	r2, [r3, #4]
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	693a      	ldr	r2, [r7, #16]
 8011058:	621a      	str	r2, [r3, #32]
}
 801105a:	bf00      	nop
 801105c:	371c      	adds	r7, #28
 801105e:	46bd      	mov	sp, r7
 8011060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011064:	4770      	bx	lr
 8011066:	bf00      	nop
 8011068:	feff8fff 	.word	0xfeff8fff
 801106c:	40010000 	.word	0x40010000
 8011070:	40010400 	.word	0x40010400
 8011074:	40014000 	.word	0x40014000
 8011078:	40014400 	.word	0x40014400
 801107c:	40014800 	.word	0x40014800

08011080 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011080:	b480      	push	{r7}
 8011082:	b087      	sub	sp, #28
 8011084:	af00      	add	r7, sp, #0
 8011086:	60f8      	str	r0, [r7, #12]
 8011088:	60b9      	str	r1, [r7, #8]
 801108a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	6a1b      	ldr	r3, [r3, #32]
 8011090:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	6a1b      	ldr	r3, [r3, #32]
 8011096:	f023 0201 	bic.w	r2, r3, #1
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	699b      	ldr	r3, [r3, #24]
 80110a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80110a4:	693b      	ldr	r3, [r7, #16]
 80110a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80110aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	011b      	lsls	r3, r3, #4
 80110b0:	693a      	ldr	r2, [r7, #16]
 80110b2:	4313      	orrs	r3, r2
 80110b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80110b6:	697b      	ldr	r3, [r7, #20]
 80110b8:	f023 030a 	bic.w	r3, r3, #10
 80110bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80110be:	697a      	ldr	r2, [r7, #20]
 80110c0:	68bb      	ldr	r3, [r7, #8]
 80110c2:	4313      	orrs	r3, r2
 80110c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	693a      	ldr	r2, [r7, #16]
 80110ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	697a      	ldr	r2, [r7, #20]
 80110d0:	621a      	str	r2, [r3, #32]
}
 80110d2:	bf00      	nop
 80110d4:	371c      	adds	r7, #28
 80110d6:	46bd      	mov	sp, r7
 80110d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110dc:	4770      	bx	lr

080110de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80110de:	b480      	push	{r7}
 80110e0:	b087      	sub	sp, #28
 80110e2:	af00      	add	r7, sp, #0
 80110e4:	60f8      	str	r0, [r7, #12]
 80110e6:	60b9      	str	r1, [r7, #8]
 80110e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	6a1b      	ldr	r3, [r3, #32]
 80110ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	6a1b      	ldr	r3, [r3, #32]
 80110f4:	f023 0210 	bic.w	r2, r3, #16
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	699b      	ldr	r3, [r3, #24]
 8011100:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011102:	693b      	ldr	r3, [r7, #16]
 8011104:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8011108:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	031b      	lsls	r3, r3, #12
 801110e:	693a      	ldr	r2, [r7, #16]
 8011110:	4313      	orrs	r3, r2
 8011112:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011114:	697b      	ldr	r3, [r7, #20]
 8011116:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 801111a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 801111c:	68bb      	ldr	r3, [r7, #8]
 801111e:	011b      	lsls	r3, r3, #4
 8011120:	697a      	ldr	r2, [r7, #20]
 8011122:	4313      	orrs	r3, r2
 8011124:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	693a      	ldr	r2, [r7, #16]
 801112a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	697a      	ldr	r2, [r7, #20]
 8011130:	621a      	str	r2, [r3, #32]
}
 8011132:	bf00      	nop
 8011134:	371c      	adds	r7, #28
 8011136:	46bd      	mov	sp, r7
 8011138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801113c:	4770      	bx	lr
	...

08011140 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8011140:	b480      	push	{r7}
 8011142:	b085      	sub	sp, #20
 8011144:	af00      	add	r7, sp, #0
 8011146:	6078      	str	r0, [r7, #4]
 8011148:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	689b      	ldr	r3, [r3, #8]
 801114e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8011150:	68fa      	ldr	r2, [r7, #12]
 8011152:	4b09      	ldr	r3, [pc, #36]	@ (8011178 <TIM_ITRx_SetConfig+0x38>)
 8011154:	4013      	ands	r3, r2
 8011156:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8011158:	683a      	ldr	r2, [r7, #0]
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	4313      	orrs	r3, r2
 801115e:	f043 0307 	orr.w	r3, r3, #7
 8011162:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	68fa      	ldr	r2, [r7, #12]
 8011168:	609a      	str	r2, [r3, #8]
}
 801116a:	bf00      	nop
 801116c:	3714      	adds	r7, #20
 801116e:	46bd      	mov	sp, r7
 8011170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011174:	4770      	bx	lr
 8011176:	bf00      	nop
 8011178:	ffcfff8f 	.word	0xffcfff8f

0801117c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801117c:	b480      	push	{r7}
 801117e:	b087      	sub	sp, #28
 8011180:	af00      	add	r7, sp, #0
 8011182:	60f8      	str	r0, [r7, #12]
 8011184:	60b9      	str	r1, [r7, #8]
 8011186:	607a      	str	r2, [r7, #4]
 8011188:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	689b      	ldr	r3, [r3, #8]
 801118e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011190:	697b      	ldr	r3, [r7, #20]
 8011192:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8011196:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011198:	683b      	ldr	r3, [r7, #0]
 801119a:	021a      	lsls	r2, r3, #8
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	431a      	orrs	r2, r3
 80111a0:	68bb      	ldr	r3, [r7, #8]
 80111a2:	4313      	orrs	r3, r2
 80111a4:	697a      	ldr	r2, [r7, #20]
 80111a6:	4313      	orrs	r3, r2
 80111a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	697a      	ldr	r2, [r7, #20]
 80111ae:	609a      	str	r2, [r3, #8]
}
 80111b0:	bf00      	nop
 80111b2:	371c      	adds	r7, #28
 80111b4:	46bd      	mov	sp, r7
 80111b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ba:	4770      	bx	lr

080111bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80111bc:	b480      	push	{r7}
 80111be:	b085      	sub	sp, #20
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	6078      	str	r0, [r7, #4]
 80111c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80111cc:	2b01      	cmp	r3, #1
 80111ce:	d101      	bne.n	80111d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80111d0:	2302      	movs	r3, #2
 80111d2:	e077      	b.n	80112c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	2201      	movs	r2, #1
 80111d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	2202      	movs	r2, #2
 80111e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	685b      	ldr	r3, [r3, #4]
 80111ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	689b      	ldr	r3, [r3, #8]
 80111f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	4a35      	ldr	r2, [pc, #212]	@ (80112d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80111fa:	4293      	cmp	r3, r2
 80111fc:	d004      	beq.n	8011208 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	4a34      	ldr	r2, [pc, #208]	@ (80112d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8011204:	4293      	cmp	r3, r2
 8011206:	d108      	bne.n	801121a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 801120e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011210:	683b      	ldr	r3, [r7, #0]
 8011212:	685b      	ldr	r3, [r3, #4]
 8011214:	68fa      	ldr	r2, [r7, #12]
 8011216:	4313      	orrs	r3, r2
 8011218:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011220:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011222:	683b      	ldr	r3, [r7, #0]
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	68fa      	ldr	r2, [r7, #12]
 8011228:	4313      	orrs	r3, r2
 801122a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	68fa      	ldr	r2, [r7, #12]
 8011232:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	4a25      	ldr	r2, [pc, #148]	@ (80112d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801123a:	4293      	cmp	r3, r2
 801123c:	d02c      	beq.n	8011298 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011246:	d027      	beq.n	8011298 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	4a22      	ldr	r2, [pc, #136]	@ (80112d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 801124e:	4293      	cmp	r3, r2
 8011250:	d022      	beq.n	8011298 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	4a21      	ldr	r2, [pc, #132]	@ (80112dc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8011258:	4293      	cmp	r3, r2
 801125a:	d01d      	beq.n	8011298 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	4a1f      	ldr	r2, [pc, #124]	@ (80112e0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8011262:	4293      	cmp	r3, r2
 8011264:	d018      	beq.n	8011298 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	4a1a      	ldr	r2, [pc, #104]	@ (80112d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801126c:	4293      	cmp	r3, r2
 801126e:	d013      	beq.n	8011298 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	4a1b      	ldr	r2, [pc, #108]	@ (80112e4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8011276:	4293      	cmp	r3, r2
 8011278:	d00e      	beq.n	8011298 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	4a1a      	ldr	r2, [pc, #104]	@ (80112e8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8011280:	4293      	cmp	r3, r2
 8011282:	d009      	beq.n	8011298 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	4a18      	ldr	r2, [pc, #96]	@ (80112ec <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 801128a:	4293      	cmp	r3, r2
 801128c:	d004      	beq.n	8011298 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	4a17      	ldr	r2, [pc, #92]	@ (80112f0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8011294:	4293      	cmp	r3, r2
 8011296:	d10c      	bne.n	80112b2 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011298:	68bb      	ldr	r3, [r7, #8]
 801129a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801129e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80112a0:	683b      	ldr	r3, [r7, #0]
 80112a2:	689b      	ldr	r3, [r3, #8]
 80112a4:	68ba      	ldr	r2, [r7, #8]
 80112a6:	4313      	orrs	r3, r2
 80112a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	68ba      	ldr	r2, [r7, #8]
 80112b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	2201      	movs	r2, #1
 80112b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	2200      	movs	r2, #0
 80112be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80112c2:	2300      	movs	r3, #0
}
 80112c4:	4618      	mov	r0, r3
 80112c6:	3714      	adds	r7, #20
 80112c8:	46bd      	mov	sp, r7
 80112ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ce:	4770      	bx	lr
 80112d0:	40010000 	.word	0x40010000
 80112d4:	40010400 	.word	0x40010400
 80112d8:	40000400 	.word	0x40000400
 80112dc:	40000800 	.word	0x40000800
 80112e0:	40000c00 	.word	0x40000c00
 80112e4:	40001800 	.word	0x40001800
 80112e8:	40014000 	.word	0x40014000
 80112ec:	4000e000 	.word	0x4000e000
 80112f0:	4000e400 	.word	0x4000e400

080112f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80112f4:	b480      	push	{r7}
 80112f6:	b085      	sub	sp, #20
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	6078      	str	r0, [r7, #4]
 80112fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80112fe:	2300      	movs	r3, #0
 8011300:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011308:	2b01      	cmp	r3, #1
 801130a:	d101      	bne.n	8011310 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801130c:	2302      	movs	r3, #2
 801130e:	e073      	b.n	80113f8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	2201      	movs	r2, #1
 8011314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801131e:	683b      	ldr	r3, [r7, #0]
 8011320:	68db      	ldr	r3, [r3, #12]
 8011322:	4313      	orrs	r3, r2
 8011324:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 801132c:	683b      	ldr	r3, [r7, #0]
 801132e:	689b      	ldr	r3, [r3, #8]
 8011330:	4313      	orrs	r3, r2
 8011332:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 801133a:	683b      	ldr	r3, [r7, #0]
 801133c:	685b      	ldr	r3, [r3, #4]
 801133e:	4313      	orrs	r3, r2
 8011340:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8011348:	683b      	ldr	r3, [r7, #0]
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	4313      	orrs	r3, r2
 801134e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8011356:	683b      	ldr	r3, [r7, #0]
 8011358:	691b      	ldr	r3, [r3, #16]
 801135a:	4313      	orrs	r3, r2
 801135c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8011364:	683b      	ldr	r3, [r7, #0]
 8011366:	695b      	ldr	r3, [r3, #20]
 8011368:	4313      	orrs	r3, r2
 801136a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8011372:	683b      	ldr	r3, [r7, #0]
 8011374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011376:	4313      	orrs	r3, r2
 8011378:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8011380:	683b      	ldr	r3, [r7, #0]
 8011382:	699b      	ldr	r3, [r3, #24]
 8011384:	041b      	lsls	r3, r3, #16
 8011386:	4313      	orrs	r3, r2
 8011388:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8011390:	683b      	ldr	r3, [r7, #0]
 8011392:	69db      	ldr	r3, [r3, #28]
 8011394:	4313      	orrs	r3, r2
 8011396:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	4a19      	ldr	r2, [pc, #100]	@ (8011404 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 801139e:	4293      	cmp	r3, r2
 80113a0:	d004      	beq.n	80113ac <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	4a18      	ldr	r2, [pc, #96]	@ (8011408 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80113a8:	4293      	cmp	r3, r2
 80113aa:	d11c      	bne.n	80113e6 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80113b2:	683b      	ldr	r3, [r7, #0]
 80113b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80113b6:	051b      	lsls	r3, r3, #20
 80113b8:	4313      	orrs	r3, r2
 80113ba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80113c2:	683b      	ldr	r3, [r7, #0]
 80113c4:	6a1b      	ldr	r3, [r3, #32]
 80113c6:	4313      	orrs	r3, r2
 80113c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80113d0:	683b      	ldr	r3, [r7, #0]
 80113d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113d4:	4313      	orrs	r3, r2
 80113d6:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80113de:	683b      	ldr	r3, [r7, #0]
 80113e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113e2:	4313      	orrs	r3, r2
 80113e4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	68fa      	ldr	r2, [r7, #12]
 80113ec:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	2200      	movs	r2, #0
 80113f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80113f6:	2300      	movs	r3, #0
}
 80113f8:	4618      	mov	r0, r3
 80113fa:	3714      	adds	r7, #20
 80113fc:	46bd      	mov	sp, r7
 80113fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011402:	4770      	bx	lr
 8011404:	40010000 	.word	0x40010000
 8011408:	40010400 	.word	0x40010400

0801140c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801140c:	b480      	push	{r7}
 801140e:	b083      	sub	sp, #12
 8011410:	af00      	add	r7, sp, #0
 8011412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011414:	bf00      	nop
 8011416:	370c      	adds	r7, #12
 8011418:	46bd      	mov	sp, r7
 801141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801141e:	4770      	bx	lr

08011420 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011420:	b480      	push	{r7}
 8011422:	b083      	sub	sp, #12
 8011424:	af00      	add	r7, sp, #0
 8011426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011428:	bf00      	nop
 801142a:	370c      	adds	r7, #12
 801142c:	46bd      	mov	sp, r7
 801142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011432:	4770      	bx	lr

08011434 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8011434:	b480      	push	{r7}
 8011436:	b083      	sub	sp, #12
 8011438:	af00      	add	r7, sp, #0
 801143a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801143c:	bf00      	nop
 801143e:	370c      	adds	r7, #12
 8011440:	46bd      	mov	sp, r7
 8011442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011446:	4770      	bx	lr

08011448 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011448:	b580      	push	{r7, lr}
 801144a:	b082      	sub	sp, #8
 801144c:	af00      	add	r7, sp, #0
 801144e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d101      	bne.n	801145a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011456:	2301      	movs	r3, #1
 8011458:	e042      	b.n	80114e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011460:	2b00      	cmp	r3, #0
 8011462:	d106      	bne.n	8011472 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	2200      	movs	r2, #0
 8011468:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801146c:	6878      	ldr	r0, [r7, #4]
 801146e:	f7f2 f82b 	bl	80034c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	2224      	movs	r2, #36	@ 0x24
 8011476:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	681a      	ldr	r2, [r3, #0]
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	f022 0201 	bic.w	r2, r2, #1
 8011488:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801148e:	2b00      	cmp	r3, #0
 8011490:	d002      	beq.n	8011498 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8011492:	6878      	ldr	r0, [r7, #4]
 8011494:	f000 ff22 	bl	80122dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011498:	6878      	ldr	r0, [r7, #4]
 801149a:	f000 f8b3 	bl	8011604 <UART_SetConfig>
 801149e:	4603      	mov	r3, r0
 80114a0:	2b01      	cmp	r3, #1
 80114a2:	d101      	bne.n	80114a8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80114a4:	2301      	movs	r3, #1
 80114a6:	e01b      	b.n	80114e0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	685a      	ldr	r2, [r3, #4]
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80114b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	689a      	ldr	r2, [r3, #8]
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80114c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	681a      	ldr	r2, [r3, #0]
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	f042 0201 	orr.w	r2, r2, #1
 80114d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80114d8:	6878      	ldr	r0, [r7, #4]
 80114da:	f000 ffa1 	bl	8012420 <UART_CheckIdleState>
 80114de:	4603      	mov	r3, r0
}
 80114e0:	4618      	mov	r0, r3
 80114e2:	3708      	adds	r7, #8
 80114e4:	46bd      	mov	sp, r7
 80114e6:	bd80      	pop	{r7, pc}

080114e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80114e8:	b580      	push	{r7, lr}
 80114ea:	b08a      	sub	sp, #40	@ 0x28
 80114ec:	af02      	add	r7, sp, #8
 80114ee:	60f8      	str	r0, [r7, #12]
 80114f0:	60b9      	str	r1, [r7, #8]
 80114f2:	603b      	str	r3, [r7, #0]
 80114f4:	4613      	mov	r3, r2
 80114f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80114fe:	2b20      	cmp	r3, #32
 8011500:	d17b      	bne.n	80115fa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8011502:	68bb      	ldr	r3, [r7, #8]
 8011504:	2b00      	cmp	r3, #0
 8011506:	d002      	beq.n	801150e <HAL_UART_Transmit+0x26>
 8011508:	88fb      	ldrh	r3, [r7, #6]
 801150a:	2b00      	cmp	r3, #0
 801150c:	d101      	bne.n	8011512 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801150e:	2301      	movs	r3, #1
 8011510:	e074      	b.n	80115fc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	2200      	movs	r2, #0
 8011516:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	2221      	movs	r2, #33	@ 0x21
 801151e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8011522:	f7f2 fa61 	bl	80039e8 <HAL_GetTick>
 8011526:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	88fa      	ldrh	r2, [r7, #6]
 801152c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	88fa      	ldrh	r2, [r7, #6]
 8011534:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	689b      	ldr	r3, [r3, #8]
 801153c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011540:	d108      	bne.n	8011554 <HAL_UART_Transmit+0x6c>
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	691b      	ldr	r3, [r3, #16]
 8011546:	2b00      	cmp	r3, #0
 8011548:	d104      	bne.n	8011554 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801154a:	2300      	movs	r3, #0
 801154c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801154e:	68bb      	ldr	r3, [r7, #8]
 8011550:	61bb      	str	r3, [r7, #24]
 8011552:	e003      	b.n	801155c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8011554:	68bb      	ldr	r3, [r7, #8]
 8011556:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011558:	2300      	movs	r3, #0
 801155a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801155c:	e030      	b.n	80115c0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801155e:	683b      	ldr	r3, [r7, #0]
 8011560:	9300      	str	r3, [sp, #0]
 8011562:	697b      	ldr	r3, [r7, #20]
 8011564:	2200      	movs	r2, #0
 8011566:	2180      	movs	r1, #128	@ 0x80
 8011568:	68f8      	ldr	r0, [r7, #12]
 801156a:	f001 f803 	bl	8012574 <UART_WaitOnFlagUntilTimeout>
 801156e:	4603      	mov	r3, r0
 8011570:	2b00      	cmp	r3, #0
 8011572:	d005      	beq.n	8011580 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	2220      	movs	r2, #32
 8011578:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 801157c:	2303      	movs	r3, #3
 801157e:	e03d      	b.n	80115fc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8011580:	69fb      	ldr	r3, [r7, #28]
 8011582:	2b00      	cmp	r3, #0
 8011584:	d10b      	bne.n	801159e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8011586:	69bb      	ldr	r3, [r7, #24]
 8011588:	881b      	ldrh	r3, [r3, #0]
 801158a:	461a      	mov	r2, r3
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011594:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8011596:	69bb      	ldr	r3, [r7, #24]
 8011598:	3302      	adds	r3, #2
 801159a:	61bb      	str	r3, [r7, #24]
 801159c:	e007      	b.n	80115ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801159e:	69fb      	ldr	r3, [r7, #28]
 80115a0:	781a      	ldrb	r2, [r3, #0]
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80115a8:	69fb      	ldr	r3, [r7, #28]
 80115aa:	3301      	adds	r3, #1
 80115ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80115b4:	b29b      	uxth	r3, r3
 80115b6:	3b01      	subs	r3, #1
 80115b8:	b29a      	uxth	r2, r3
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80115c6:	b29b      	uxth	r3, r3
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d1c8      	bne.n	801155e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80115cc:	683b      	ldr	r3, [r7, #0]
 80115ce:	9300      	str	r3, [sp, #0]
 80115d0:	697b      	ldr	r3, [r7, #20]
 80115d2:	2200      	movs	r2, #0
 80115d4:	2140      	movs	r1, #64	@ 0x40
 80115d6:	68f8      	ldr	r0, [r7, #12]
 80115d8:	f000 ffcc 	bl	8012574 <UART_WaitOnFlagUntilTimeout>
 80115dc:	4603      	mov	r3, r0
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d005      	beq.n	80115ee <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	2220      	movs	r2, #32
 80115e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80115ea:	2303      	movs	r3, #3
 80115ec:	e006      	b.n	80115fc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	2220      	movs	r2, #32
 80115f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80115f6:	2300      	movs	r3, #0
 80115f8:	e000      	b.n	80115fc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80115fa:	2302      	movs	r3, #2
  }
}
 80115fc:	4618      	mov	r0, r3
 80115fe:	3720      	adds	r7, #32
 8011600:	46bd      	mov	sp, r7
 8011602:	bd80      	pop	{r7, pc}

08011604 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011604:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011608:	b092      	sub	sp, #72	@ 0x48
 801160a:	af00      	add	r7, sp, #0
 801160c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801160e:	2300      	movs	r3, #0
 8011610:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011614:	697b      	ldr	r3, [r7, #20]
 8011616:	689a      	ldr	r2, [r3, #8]
 8011618:	697b      	ldr	r3, [r7, #20]
 801161a:	691b      	ldr	r3, [r3, #16]
 801161c:	431a      	orrs	r2, r3
 801161e:	697b      	ldr	r3, [r7, #20]
 8011620:	695b      	ldr	r3, [r3, #20]
 8011622:	431a      	orrs	r2, r3
 8011624:	697b      	ldr	r3, [r7, #20]
 8011626:	69db      	ldr	r3, [r3, #28]
 8011628:	4313      	orrs	r3, r2
 801162a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801162c:	697b      	ldr	r3, [r7, #20]
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	681a      	ldr	r2, [r3, #0]
 8011632:	4bbe      	ldr	r3, [pc, #760]	@ (801192c <UART_SetConfig+0x328>)
 8011634:	4013      	ands	r3, r2
 8011636:	697a      	ldr	r2, [r7, #20]
 8011638:	6812      	ldr	r2, [r2, #0]
 801163a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801163c:	430b      	orrs	r3, r1
 801163e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011640:	697b      	ldr	r3, [r7, #20]
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	685b      	ldr	r3, [r3, #4]
 8011646:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801164a:	697b      	ldr	r3, [r7, #20]
 801164c:	68da      	ldr	r2, [r3, #12]
 801164e:	697b      	ldr	r3, [r7, #20]
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	430a      	orrs	r2, r1
 8011654:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011656:	697b      	ldr	r3, [r7, #20]
 8011658:	699b      	ldr	r3, [r3, #24]
 801165a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801165c:	697b      	ldr	r3, [r7, #20]
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	4ab3      	ldr	r2, [pc, #716]	@ (8011930 <UART_SetConfig+0x32c>)
 8011662:	4293      	cmp	r3, r2
 8011664:	d004      	beq.n	8011670 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011666:	697b      	ldr	r3, [r7, #20]
 8011668:	6a1b      	ldr	r3, [r3, #32]
 801166a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801166c:	4313      	orrs	r3, r2
 801166e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011670:	697b      	ldr	r3, [r7, #20]
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	689a      	ldr	r2, [r3, #8]
 8011676:	4baf      	ldr	r3, [pc, #700]	@ (8011934 <UART_SetConfig+0x330>)
 8011678:	4013      	ands	r3, r2
 801167a:	697a      	ldr	r2, [r7, #20]
 801167c:	6812      	ldr	r2, [r2, #0]
 801167e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011680:	430b      	orrs	r3, r1
 8011682:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011684:	697b      	ldr	r3, [r7, #20]
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801168a:	f023 010f 	bic.w	r1, r3, #15
 801168e:	697b      	ldr	r3, [r7, #20]
 8011690:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011692:	697b      	ldr	r3, [r7, #20]
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	430a      	orrs	r2, r1
 8011698:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801169a:	697b      	ldr	r3, [r7, #20]
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	4aa6      	ldr	r2, [pc, #664]	@ (8011938 <UART_SetConfig+0x334>)
 80116a0:	4293      	cmp	r3, r2
 80116a2:	d177      	bne.n	8011794 <UART_SetConfig+0x190>
 80116a4:	4ba5      	ldr	r3, [pc, #660]	@ (801193c <UART_SetConfig+0x338>)
 80116a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80116a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80116ac:	2b28      	cmp	r3, #40	@ 0x28
 80116ae:	d86d      	bhi.n	801178c <UART_SetConfig+0x188>
 80116b0:	a201      	add	r2, pc, #4	@ (adr r2, 80116b8 <UART_SetConfig+0xb4>)
 80116b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116b6:	bf00      	nop
 80116b8:	0801175d 	.word	0x0801175d
 80116bc:	0801178d 	.word	0x0801178d
 80116c0:	0801178d 	.word	0x0801178d
 80116c4:	0801178d 	.word	0x0801178d
 80116c8:	0801178d 	.word	0x0801178d
 80116cc:	0801178d 	.word	0x0801178d
 80116d0:	0801178d 	.word	0x0801178d
 80116d4:	0801178d 	.word	0x0801178d
 80116d8:	08011765 	.word	0x08011765
 80116dc:	0801178d 	.word	0x0801178d
 80116e0:	0801178d 	.word	0x0801178d
 80116e4:	0801178d 	.word	0x0801178d
 80116e8:	0801178d 	.word	0x0801178d
 80116ec:	0801178d 	.word	0x0801178d
 80116f0:	0801178d 	.word	0x0801178d
 80116f4:	0801178d 	.word	0x0801178d
 80116f8:	0801176d 	.word	0x0801176d
 80116fc:	0801178d 	.word	0x0801178d
 8011700:	0801178d 	.word	0x0801178d
 8011704:	0801178d 	.word	0x0801178d
 8011708:	0801178d 	.word	0x0801178d
 801170c:	0801178d 	.word	0x0801178d
 8011710:	0801178d 	.word	0x0801178d
 8011714:	0801178d 	.word	0x0801178d
 8011718:	08011775 	.word	0x08011775
 801171c:	0801178d 	.word	0x0801178d
 8011720:	0801178d 	.word	0x0801178d
 8011724:	0801178d 	.word	0x0801178d
 8011728:	0801178d 	.word	0x0801178d
 801172c:	0801178d 	.word	0x0801178d
 8011730:	0801178d 	.word	0x0801178d
 8011734:	0801178d 	.word	0x0801178d
 8011738:	0801177d 	.word	0x0801177d
 801173c:	0801178d 	.word	0x0801178d
 8011740:	0801178d 	.word	0x0801178d
 8011744:	0801178d 	.word	0x0801178d
 8011748:	0801178d 	.word	0x0801178d
 801174c:	0801178d 	.word	0x0801178d
 8011750:	0801178d 	.word	0x0801178d
 8011754:	0801178d 	.word	0x0801178d
 8011758:	08011785 	.word	0x08011785
 801175c:	2301      	movs	r3, #1
 801175e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011762:	e326      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011764:	2304      	movs	r3, #4
 8011766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801176a:	e322      	b.n	8011db2 <UART_SetConfig+0x7ae>
 801176c:	2308      	movs	r3, #8
 801176e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011772:	e31e      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011774:	2310      	movs	r3, #16
 8011776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801177a:	e31a      	b.n	8011db2 <UART_SetConfig+0x7ae>
 801177c:	2320      	movs	r3, #32
 801177e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011782:	e316      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011784:	2340      	movs	r3, #64	@ 0x40
 8011786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801178a:	e312      	b.n	8011db2 <UART_SetConfig+0x7ae>
 801178c:	2380      	movs	r3, #128	@ 0x80
 801178e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011792:	e30e      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011794:	697b      	ldr	r3, [r7, #20]
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	4a69      	ldr	r2, [pc, #420]	@ (8011940 <UART_SetConfig+0x33c>)
 801179a:	4293      	cmp	r3, r2
 801179c:	d130      	bne.n	8011800 <UART_SetConfig+0x1fc>
 801179e:	4b67      	ldr	r3, [pc, #412]	@ (801193c <UART_SetConfig+0x338>)
 80117a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80117a2:	f003 0307 	and.w	r3, r3, #7
 80117a6:	2b05      	cmp	r3, #5
 80117a8:	d826      	bhi.n	80117f8 <UART_SetConfig+0x1f4>
 80117aa:	a201      	add	r2, pc, #4	@ (adr r2, 80117b0 <UART_SetConfig+0x1ac>)
 80117ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117b0:	080117c9 	.word	0x080117c9
 80117b4:	080117d1 	.word	0x080117d1
 80117b8:	080117d9 	.word	0x080117d9
 80117bc:	080117e1 	.word	0x080117e1
 80117c0:	080117e9 	.word	0x080117e9
 80117c4:	080117f1 	.word	0x080117f1
 80117c8:	2300      	movs	r3, #0
 80117ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80117ce:	e2f0      	b.n	8011db2 <UART_SetConfig+0x7ae>
 80117d0:	2304      	movs	r3, #4
 80117d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80117d6:	e2ec      	b.n	8011db2 <UART_SetConfig+0x7ae>
 80117d8:	2308      	movs	r3, #8
 80117da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80117de:	e2e8      	b.n	8011db2 <UART_SetConfig+0x7ae>
 80117e0:	2310      	movs	r3, #16
 80117e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80117e6:	e2e4      	b.n	8011db2 <UART_SetConfig+0x7ae>
 80117e8:	2320      	movs	r3, #32
 80117ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80117ee:	e2e0      	b.n	8011db2 <UART_SetConfig+0x7ae>
 80117f0:	2340      	movs	r3, #64	@ 0x40
 80117f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80117f6:	e2dc      	b.n	8011db2 <UART_SetConfig+0x7ae>
 80117f8:	2380      	movs	r3, #128	@ 0x80
 80117fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80117fe:	e2d8      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011800:	697b      	ldr	r3, [r7, #20]
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	4a4f      	ldr	r2, [pc, #316]	@ (8011944 <UART_SetConfig+0x340>)
 8011806:	4293      	cmp	r3, r2
 8011808:	d130      	bne.n	801186c <UART_SetConfig+0x268>
 801180a:	4b4c      	ldr	r3, [pc, #304]	@ (801193c <UART_SetConfig+0x338>)
 801180c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801180e:	f003 0307 	and.w	r3, r3, #7
 8011812:	2b05      	cmp	r3, #5
 8011814:	d826      	bhi.n	8011864 <UART_SetConfig+0x260>
 8011816:	a201      	add	r2, pc, #4	@ (adr r2, 801181c <UART_SetConfig+0x218>)
 8011818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801181c:	08011835 	.word	0x08011835
 8011820:	0801183d 	.word	0x0801183d
 8011824:	08011845 	.word	0x08011845
 8011828:	0801184d 	.word	0x0801184d
 801182c:	08011855 	.word	0x08011855
 8011830:	0801185d 	.word	0x0801185d
 8011834:	2300      	movs	r3, #0
 8011836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801183a:	e2ba      	b.n	8011db2 <UART_SetConfig+0x7ae>
 801183c:	2304      	movs	r3, #4
 801183e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011842:	e2b6      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011844:	2308      	movs	r3, #8
 8011846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801184a:	e2b2      	b.n	8011db2 <UART_SetConfig+0x7ae>
 801184c:	2310      	movs	r3, #16
 801184e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011852:	e2ae      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011854:	2320      	movs	r3, #32
 8011856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801185a:	e2aa      	b.n	8011db2 <UART_SetConfig+0x7ae>
 801185c:	2340      	movs	r3, #64	@ 0x40
 801185e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011862:	e2a6      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011864:	2380      	movs	r3, #128	@ 0x80
 8011866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801186a:	e2a2      	b.n	8011db2 <UART_SetConfig+0x7ae>
 801186c:	697b      	ldr	r3, [r7, #20]
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	4a35      	ldr	r2, [pc, #212]	@ (8011948 <UART_SetConfig+0x344>)
 8011872:	4293      	cmp	r3, r2
 8011874:	d130      	bne.n	80118d8 <UART_SetConfig+0x2d4>
 8011876:	4b31      	ldr	r3, [pc, #196]	@ (801193c <UART_SetConfig+0x338>)
 8011878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801187a:	f003 0307 	and.w	r3, r3, #7
 801187e:	2b05      	cmp	r3, #5
 8011880:	d826      	bhi.n	80118d0 <UART_SetConfig+0x2cc>
 8011882:	a201      	add	r2, pc, #4	@ (adr r2, 8011888 <UART_SetConfig+0x284>)
 8011884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011888:	080118a1 	.word	0x080118a1
 801188c:	080118a9 	.word	0x080118a9
 8011890:	080118b1 	.word	0x080118b1
 8011894:	080118b9 	.word	0x080118b9
 8011898:	080118c1 	.word	0x080118c1
 801189c:	080118c9 	.word	0x080118c9
 80118a0:	2300      	movs	r3, #0
 80118a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80118a6:	e284      	b.n	8011db2 <UART_SetConfig+0x7ae>
 80118a8:	2304      	movs	r3, #4
 80118aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80118ae:	e280      	b.n	8011db2 <UART_SetConfig+0x7ae>
 80118b0:	2308      	movs	r3, #8
 80118b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80118b6:	e27c      	b.n	8011db2 <UART_SetConfig+0x7ae>
 80118b8:	2310      	movs	r3, #16
 80118ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80118be:	e278      	b.n	8011db2 <UART_SetConfig+0x7ae>
 80118c0:	2320      	movs	r3, #32
 80118c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80118c6:	e274      	b.n	8011db2 <UART_SetConfig+0x7ae>
 80118c8:	2340      	movs	r3, #64	@ 0x40
 80118ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80118ce:	e270      	b.n	8011db2 <UART_SetConfig+0x7ae>
 80118d0:	2380      	movs	r3, #128	@ 0x80
 80118d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80118d6:	e26c      	b.n	8011db2 <UART_SetConfig+0x7ae>
 80118d8:	697b      	ldr	r3, [r7, #20]
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	4a1b      	ldr	r2, [pc, #108]	@ (801194c <UART_SetConfig+0x348>)
 80118de:	4293      	cmp	r3, r2
 80118e0:	d142      	bne.n	8011968 <UART_SetConfig+0x364>
 80118e2:	4b16      	ldr	r3, [pc, #88]	@ (801193c <UART_SetConfig+0x338>)
 80118e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80118e6:	f003 0307 	and.w	r3, r3, #7
 80118ea:	2b05      	cmp	r3, #5
 80118ec:	d838      	bhi.n	8011960 <UART_SetConfig+0x35c>
 80118ee:	a201      	add	r2, pc, #4	@ (adr r2, 80118f4 <UART_SetConfig+0x2f0>)
 80118f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118f4:	0801190d 	.word	0x0801190d
 80118f8:	08011915 	.word	0x08011915
 80118fc:	0801191d 	.word	0x0801191d
 8011900:	08011925 	.word	0x08011925
 8011904:	08011951 	.word	0x08011951
 8011908:	08011959 	.word	0x08011959
 801190c:	2300      	movs	r3, #0
 801190e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011912:	e24e      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011914:	2304      	movs	r3, #4
 8011916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801191a:	e24a      	b.n	8011db2 <UART_SetConfig+0x7ae>
 801191c:	2308      	movs	r3, #8
 801191e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011922:	e246      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011924:	2310      	movs	r3, #16
 8011926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801192a:	e242      	b.n	8011db2 <UART_SetConfig+0x7ae>
 801192c:	cfff69f3 	.word	0xcfff69f3
 8011930:	58000c00 	.word	0x58000c00
 8011934:	11fff4ff 	.word	0x11fff4ff
 8011938:	40011000 	.word	0x40011000
 801193c:	58024400 	.word	0x58024400
 8011940:	40004400 	.word	0x40004400
 8011944:	40004800 	.word	0x40004800
 8011948:	40004c00 	.word	0x40004c00
 801194c:	40005000 	.word	0x40005000
 8011950:	2320      	movs	r3, #32
 8011952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011956:	e22c      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011958:	2340      	movs	r3, #64	@ 0x40
 801195a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801195e:	e228      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011960:	2380      	movs	r3, #128	@ 0x80
 8011962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011966:	e224      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011968:	697b      	ldr	r3, [r7, #20]
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	4ab1      	ldr	r2, [pc, #708]	@ (8011c34 <UART_SetConfig+0x630>)
 801196e:	4293      	cmp	r3, r2
 8011970:	d176      	bne.n	8011a60 <UART_SetConfig+0x45c>
 8011972:	4bb1      	ldr	r3, [pc, #708]	@ (8011c38 <UART_SetConfig+0x634>)
 8011974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011976:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801197a:	2b28      	cmp	r3, #40	@ 0x28
 801197c:	d86c      	bhi.n	8011a58 <UART_SetConfig+0x454>
 801197e:	a201      	add	r2, pc, #4	@ (adr r2, 8011984 <UART_SetConfig+0x380>)
 8011980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011984:	08011a29 	.word	0x08011a29
 8011988:	08011a59 	.word	0x08011a59
 801198c:	08011a59 	.word	0x08011a59
 8011990:	08011a59 	.word	0x08011a59
 8011994:	08011a59 	.word	0x08011a59
 8011998:	08011a59 	.word	0x08011a59
 801199c:	08011a59 	.word	0x08011a59
 80119a0:	08011a59 	.word	0x08011a59
 80119a4:	08011a31 	.word	0x08011a31
 80119a8:	08011a59 	.word	0x08011a59
 80119ac:	08011a59 	.word	0x08011a59
 80119b0:	08011a59 	.word	0x08011a59
 80119b4:	08011a59 	.word	0x08011a59
 80119b8:	08011a59 	.word	0x08011a59
 80119bc:	08011a59 	.word	0x08011a59
 80119c0:	08011a59 	.word	0x08011a59
 80119c4:	08011a39 	.word	0x08011a39
 80119c8:	08011a59 	.word	0x08011a59
 80119cc:	08011a59 	.word	0x08011a59
 80119d0:	08011a59 	.word	0x08011a59
 80119d4:	08011a59 	.word	0x08011a59
 80119d8:	08011a59 	.word	0x08011a59
 80119dc:	08011a59 	.word	0x08011a59
 80119e0:	08011a59 	.word	0x08011a59
 80119e4:	08011a41 	.word	0x08011a41
 80119e8:	08011a59 	.word	0x08011a59
 80119ec:	08011a59 	.word	0x08011a59
 80119f0:	08011a59 	.word	0x08011a59
 80119f4:	08011a59 	.word	0x08011a59
 80119f8:	08011a59 	.word	0x08011a59
 80119fc:	08011a59 	.word	0x08011a59
 8011a00:	08011a59 	.word	0x08011a59
 8011a04:	08011a49 	.word	0x08011a49
 8011a08:	08011a59 	.word	0x08011a59
 8011a0c:	08011a59 	.word	0x08011a59
 8011a10:	08011a59 	.word	0x08011a59
 8011a14:	08011a59 	.word	0x08011a59
 8011a18:	08011a59 	.word	0x08011a59
 8011a1c:	08011a59 	.word	0x08011a59
 8011a20:	08011a59 	.word	0x08011a59
 8011a24:	08011a51 	.word	0x08011a51
 8011a28:	2301      	movs	r3, #1
 8011a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011a2e:	e1c0      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011a30:	2304      	movs	r3, #4
 8011a32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011a36:	e1bc      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011a38:	2308      	movs	r3, #8
 8011a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011a3e:	e1b8      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011a40:	2310      	movs	r3, #16
 8011a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011a46:	e1b4      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011a48:	2320      	movs	r3, #32
 8011a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011a4e:	e1b0      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011a50:	2340      	movs	r3, #64	@ 0x40
 8011a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011a56:	e1ac      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011a58:	2380      	movs	r3, #128	@ 0x80
 8011a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011a5e:	e1a8      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011a60:	697b      	ldr	r3, [r7, #20]
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	4a75      	ldr	r2, [pc, #468]	@ (8011c3c <UART_SetConfig+0x638>)
 8011a66:	4293      	cmp	r3, r2
 8011a68:	d130      	bne.n	8011acc <UART_SetConfig+0x4c8>
 8011a6a:	4b73      	ldr	r3, [pc, #460]	@ (8011c38 <UART_SetConfig+0x634>)
 8011a6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011a6e:	f003 0307 	and.w	r3, r3, #7
 8011a72:	2b05      	cmp	r3, #5
 8011a74:	d826      	bhi.n	8011ac4 <UART_SetConfig+0x4c0>
 8011a76:	a201      	add	r2, pc, #4	@ (adr r2, 8011a7c <UART_SetConfig+0x478>)
 8011a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a7c:	08011a95 	.word	0x08011a95
 8011a80:	08011a9d 	.word	0x08011a9d
 8011a84:	08011aa5 	.word	0x08011aa5
 8011a88:	08011aad 	.word	0x08011aad
 8011a8c:	08011ab5 	.word	0x08011ab5
 8011a90:	08011abd 	.word	0x08011abd
 8011a94:	2300      	movs	r3, #0
 8011a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011a9a:	e18a      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011a9c:	2304      	movs	r3, #4
 8011a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011aa2:	e186      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011aa4:	2308      	movs	r3, #8
 8011aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011aaa:	e182      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011aac:	2310      	movs	r3, #16
 8011aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011ab2:	e17e      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011ab4:	2320      	movs	r3, #32
 8011ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011aba:	e17a      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011abc:	2340      	movs	r3, #64	@ 0x40
 8011abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011ac2:	e176      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011ac4:	2380      	movs	r3, #128	@ 0x80
 8011ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011aca:	e172      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011acc:	697b      	ldr	r3, [r7, #20]
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	4a5b      	ldr	r2, [pc, #364]	@ (8011c40 <UART_SetConfig+0x63c>)
 8011ad2:	4293      	cmp	r3, r2
 8011ad4:	d130      	bne.n	8011b38 <UART_SetConfig+0x534>
 8011ad6:	4b58      	ldr	r3, [pc, #352]	@ (8011c38 <UART_SetConfig+0x634>)
 8011ad8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011ada:	f003 0307 	and.w	r3, r3, #7
 8011ade:	2b05      	cmp	r3, #5
 8011ae0:	d826      	bhi.n	8011b30 <UART_SetConfig+0x52c>
 8011ae2:	a201      	add	r2, pc, #4	@ (adr r2, 8011ae8 <UART_SetConfig+0x4e4>)
 8011ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ae8:	08011b01 	.word	0x08011b01
 8011aec:	08011b09 	.word	0x08011b09
 8011af0:	08011b11 	.word	0x08011b11
 8011af4:	08011b19 	.word	0x08011b19
 8011af8:	08011b21 	.word	0x08011b21
 8011afc:	08011b29 	.word	0x08011b29
 8011b00:	2300      	movs	r3, #0
 8011b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011b06:	e154      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011b08:	2304      	movs	r3, #4
 8011b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011b0e:	e150      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011b10:	2308      	movs	r3, #8
 8011b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011b16:	e14c      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011b18:	2310      	movs	r3, #16
 8011b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011b1e:	e148      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011b20:	2320      	movs	r3, #32
 8011b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011b26:	e144      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011b28:	2340      	movs	r3, #64	@ 0x40
 8011b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011b2e:	e140      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011b30:	2380      	movs	r3, #128	@ 0x80
 8011b32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011b36:	e13c      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011b38:	697b      	ldr	r3, [r7, #20]
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	4a41      	ldr	r2, [pc, #260]	@ (8011c44 <UART_SetConfig+0x640>)
 8011b3e:	4293      	cmp	r3, r2
 8011b40:	f040 8082 	bne.w	8011c48 <UART_SetConfig+0x644>
 8011b44:	4b3c      	ldr	r3, [pc, #240]	@ (8011c38 <UART_SetConfig+0x634>)
 8011b46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011b48:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011b4c:	2b28      	cmp	r3, #40	@ 0x28
 8011b4e:	d86d      	bhi.n	8011c2c <UART_SetConfig+0x628>
 8011b50:	a201      	add	r2, pc, #4	@ (adr r2, 8011b58 <UART_SetConfig+0x554>)
 8011b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b56:	bf00      	nop
 8011b58:	08011bfd 	.word	0x08011bfd
 8011b5c:	08011c2d 	.word	0x08011c2d
 8011b60:	08011c2d 	.word	0x08011c2d
 8011b64:	08011c2d 	.word	0x08011c2d
 8011b68:	08011c2d 	.word	0x08011c2d
 8011b6c:	08011c2d 	.word	0x08011c2d
 8011b70:	08011c2d 	.word	0x08011c2d
 8011b74:	08011c2d 	.word	0x08011c2d
 8011b78:	08011c05 	.word	0x08011c05
 8011b7c:	08011c2d 	.word	0x08011c2d
 8011b80:	08011c2d 	.word	0x08011c2d
 8011b84:	08011c2d 	.word	0x08011c2d
 8011b88:	08011c2d 	.word	0x08011c2d
 8011b8c:	08011c2d 	.word	0x08011c2d
 8011b90:	08011c2d 	.word	0x08011c2d
 8011b94:	08011c2d 	.word	0x08011c2d
 8011b98:	08011c0d 	.word	0x08011c0d
 8011b9c:	08011c2d 	.word	0x08011c2d
 8011ba0:	08011c2d 	.word	0x08011c2d
 8011ba4:	08011c2d 	.word	0x08011c2d
 8011ba8:	08011c2d 	.word	0x08011c2d
 8011bac:	08011c2d 	.word	0x08011c2d
 8011bb0:	08011c2d 	.word	0x08011c2d
 8011bb4:	08011c2d 	.word	0x08011c2d
 8011bb8:	08011c15 	.word	0x08011c15
 8011bbc:	08011c2d 	.word	0x08011c2d
 8011bc0:	08011c2d 	.word	0x08011c2d
 8011bc4:	08011c2d 	.word	0x08011c2d
 8011bc8:	08011c2d 	.word	0x08011c2d
 8011bcc:	08011c2d 	.word	0x08011c2d
 8011bd0:	08011c2d 	.word	0x08011c2d
 8011bd4:	08011c2d 	.word	0x08011c2d
 8011bd8:	08011c1d 	.word	0x08011c1d
 8011bdc:	08011c2d 	.word	0x08011c2d
 8011be0:	08011c2d 	.word	0x08011c2d
 8011be4:	08011c2d 	.word	0x08011c2d
 8011be8:	08011c2d 	.word	0x08011c2d
 8011bec:	08011c2d 	.word	0x08011c2d
 8011bf0:	08011c2d 	.word	0x08011c2d
 8011bf4:	08011c2d 	.word	0x08011c2d
 8011bf8:	08011c25 	.word	0x08011c25
 8011bfc:	2301      	movs	r3, #1
 8011bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011c02:	e0d6      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011c04:	2304      	movs	r3, #4
 8011c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011c0a:	e0d2      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011c0c:	2308      	movs	r3, #8
 8011c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011c12:	e0ce      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011c14:	2310      	movs	r3, #16
 8011c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011c1a:	e0ca      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011c1c:	2320      	movs	r3, #32
 8011c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011c22:	e0c6      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011c24:	2340      	movs	r3, #64	@ 0x40
 8011c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011c2a:	e0c2      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011c2c:	2380      	movs	r3, #128	@ 0x80
 8011c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011c32:	e0be      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011c34:	40011400 	.word	0x40011400
 8011c38:	58024400 	.word	0x58024400
 8011c3c:	40007800 	.word	0x40007800
 8011c40:	40007c00 	.word	0x40007c00
 8011c44:	40011800 	.word	0x40011800
 8011c48:	697b      	ldr	r3, [r7, #20]
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	4aad      	ldr	r2, [pc, #692]	@ (8011f04 <UART_SetConfig+0x900>)
 8011c4e:	4293      	cmp	r3, r2
 8011c50:	d176      	bne.n	8011d40 <UART_SetConfig+0x73c>
 8011c52:	4bad      	ldr	r3, [pc, #692]	@ (8011f08 <UART_SetConfig+0x904>)
 8011c54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011c56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011c5a:	2b28      	cmp	r3, #40	@ 0x28
 8011c5c:	d86c      	bhi.n	8011d38 <UART_SetConfig+0x734>
 8011c5e:	a201      	add	r2, pc, #4	@ (adr r2, 8011c64 <UART_SetConfig+0x660>)
 8011c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c64:	08011d09 	.word	0x08011d09
 8011c68:	08011d39 	.word	0x08011d39
 8011c6c:	08011d39 	.word	0x08011d39
 8011c70:	08011d39 	.word	0x08011d39
 8011c74:	08011d39 	.word	0x08011d39
 8011c78:	08011d39 	.word	0x08011d39
 8011c7c:	08011d39 	.word	0x08011d39
 8011c80:	08011d39 	.word	0x08011d39
 8011c84:	08011d11 	.word	0x08011d11
 8011c88:	08011d39 	.word	0x08011d39
 8011c8c:	08011d39 	.word	0x08011d39
 8011c90:	08011d39 	.word	0x08011d39
 8011c94:	08011d39 	.word	0x08011d39
 8011c98:	08011d39 	.word	0x08011d39
 8011c9c:	08011d39 	.word	0x08011d39
 8011ca0:	08011d39 	.word	0x08011d39
 8011ca4:	08011d19 	.word	0x08011d19
 8011ca8:	08011d39 	.word	0x08011d39
 8011cac:	08011d39 	.word	0x08011d39
 8011cb0:	08011d39 	.word	0x08011d39
 8011cb4:	08011d39 	.word	0x08011d39
 8011cb8:	08011d39 	.word	0x08011d39
 8011cbc:	08011d39 	.word	0x08011d39
 8011cc0:	08011d39 	.word	0x08011d39
 8011cc4:	08011d21 	.word	0x08011d21
 8011cc8:	08011d39 	.word	0x08011d39
 8011ccc:	08011d39 	.word	0x08011d39
 8011cd0:	08011d39 	.word	0x08011d39
 8011cd4:	08011d39 	.word	0x08011d39
 8011cd8:	08011d39 	.word	0x08011d39
 8011cdc:	08011d39 	.word	0x08011d39
 8011ce0:	08011d39 	.word	0x08011d39
 8011ce4:	08011d29 	.word	0x08011d29
 8011ce8:	08011d39 	.word	0x08011d39
 8011cec:	08011d39 	.word	0x08011d39
 8011cf0:	08011d39 	.word	0x08011d39
 8011cf4:	08011d39 	.word	0x08011d39
 8011cf8:	08011d39 	.word	0x08011d39
 8011cfc:	08011d39 	.word	0x08011d39
 8011d00:	08011d39 	.word	0x08011d39
 8011d04:	08011d31 	.word	0x08011d31
 8011d08:	2301      	movs	r3, #1
 8011d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d0e:	e050      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011d10:	2304      	movs	r3, #4
 8011d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d16:	e04c      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011d18:	2308      	movs	r3, #8
 8011d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d1e:	e048      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011d20:	2310      	movs	r3, #16
 8011d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d26:	e044      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011d28:	2320      	movs	r3, #32
 8011d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d2e:	e040      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011d30:	2340      	movs	r3, #64	@ 0x40
 8011d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d36:	e03c      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011d38:	2380      	movs	r3, #128	@ 0x80
 8011d3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d3e:	e038      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011d40:	697b      	ldr	r3, [r7, #20]
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	4a71      	ldr	r2, [pc, #452]	@ (8011f0c <UART_SetConfig+0x908>)
 8011d46:	4293      	cmp	r3, r2
 8011d48:	d130      	bne.n	8011dac <UART_SetConfig+0x7a8>
 8011d4a:	4b6f      	ldr	r3, [pc, #444]	@ (8011f08 <UART_SetConfig+0x904>)
 8011d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011d4e:	f003 0307 	and.w	r3, r3, #7
 8011d52:	2b05      	cmp	r3, #5
 8011d54:	d826      	bhi.n	8011da4 <UART_SetConfig+0x7a0>
 8011d56:	a201      	add	r2, pc, #4	@ (adr r2, 8011d5c <UART_SetConfig+0x758>)
 8011d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d5c:	08011d75 	.word	0x08011d75
 8011d60:	08011d7d 	.word	0x08011d7d
 8011d64:	08011d85 	.word	0x08011d85
 8011d68:	08011d8d 	.word	0x08011d8d
 8011d6c:	08011d95 	.word	0x08011d95
 8011d70:	08011d9d 	.word	0x08011d9d
 8011d74:	2302      	movs	r3, #2
 8011d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d7a:	e01a      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011d7c:	2304      	movs	r3, #4
 8011d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d82:	e016      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011d84:	2308      	movs	r3, #8
 8011d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d8a:	e012      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011d8c:	2310      	movs	r3, #16
 8011d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d92:	e00e      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011d94:	2320      	movs	r3, #32
 8011d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d9a:	e00a      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011d9c:	2340      	movs	r3, #64	@ 0x40
 8011d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011da2:	e006      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011da4:	2380      	movs	r3, #128	@ 0x80
 8011da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011daa:	e002      	b.n	8011db2 <UART_SetConfig+0x7ae>
 8011dac:	2380      	movs	r3, #128	@ 0x80
 8011dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011db2:	697b      	ldr	r3, [r7, #20]
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	4a55      	ldr	r2, [pc, #340]	@ (8011f0c <UART_SetConfig+0x908>)
 8011db8:	4293      	cmp	r3, r2
 8011dba:	f040 80f8 	bne.w	8011fae <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011dbe:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8011dc2:	2b20      	cmp	r3, #32
 8011dc4:	dc46      	bgt.n	8011e54 <UART_SetConfig+0x850>
 8011dc6:	2b02      	cmp	r3, #2
 8011dc8:	db75      	blt.n	8011eb6 <UART_SetConfig+0x8b2>
 8011dca:	3b02      	subs	r3, #2
 8011dcc:	2b1e      	cmp	r3, #30
 8011dce:	d872      	bhi.n	8011eb6 <UART_SetConfig+0x8b2>
 8011dd0:	a201      	add	r2, pc, #4	@ (adr r2, 8011dd8 <UART_SetConfig+0x7d4>)
 8011dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011dd6:	bf00      	nop
 8011dd8:	08011e5b 	.word	0x08011e5b
 8011ddc:	08011eb7 	.word	0x08011eb7
 8011de0:	08011e63 	.word	0x08011e63
 8011de4:	08011eb7 	.word	0x08011eb7
 8011de8:	08011eb7 	.word	0x08011eb7
 8011dec:	08011eb7 	.word	0x08011eb7
 8011df0:	08011e73 	.word	0x08011e73
 8011df4:	08011eb7 	.word	0x08011eb7
 8011df8:	08011eb7 	.word	0x08011eb7
 8011dfc:	08011eb7 	.word	0x08011eb7
 8011e00:	08011eb7 	.word	0x08011eb7
 8011e04:	08011eb7 	.word	0x08011eb7
 8011e08:	08011eb7 	.word	0x08011eb7
 8011e0c:	08011eb7 	.word	0x08011eb7
 8011e10:	08011e83 	.word	0x08011e83
 8011e14:	08011eb7 	.word	0x08011eb7
 8011e18:	08011eb7 	.word	0x08011eb7
 8011e1c:	08011eb7 	.word	0x08011eb7
 8011e20:	08011eb7 	.word	0x08011eb7
 8011e24:	08011eb7 	.word	0x08011eb7
 8011e28:	08011eb7 	.word	0x08011eb7
 8011e2c:	08011eb7 	.word	0x08011eb7
 8011e30:	08011eb7 	.word	0x08011eb7
 8011e34:	08011eb7 	.word	0x08011eb7
 8011e38:	08011eb7 	.word	0x08011eb7
 8011e3c:	08011eb7 	.word	0x08011eb7
 8011e40:	08011eb7 	.word	0x08011eb7
 8011e44:	08011eb7 	.word	0x08011eb7
 8011e48:	08011eb7 	.word	0x08011eb7
 8011e4c:	08011eb7 	.word	0x08011eb7
 8011e50:	08011ea9 	.word	0x08011ea9
 8011e54:	2b40      	cmp	r3, #64	@ 0x40
 8011e56:	d02a      	beq.n	8011eae <UART_SetConfig+0x8aa>
 8011e58:	e02d      	b.n	8011eb6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8011e5a:	f7fa fd91 	bl	800c980 <HAL_RCCEx_GetD3PCLK1Freq>
 8011e5e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011e60:	e02f      	b.n	8011ec2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011e62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011e66:	4618      	mov	r0, r3
 8011e68:	f7fa fda0 	bl	800c9ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011e70:	e027      	b.n	8011ec2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011e72:	f107 0318 	add.w	r3, r7, #24
 8011e76:	4618      	mov	r0, r3
 8011e78:	f7fa feec 	bl	800cc54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011e7c:	69fb      	ldr	r3, [r7, #28]
 8011e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011e80:	e01f      	b.n	8011ec2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011e82:	4b21      	ldr	r3, [pc, #132]	@ (8011f08 <UART_SetConfig+0x904>)
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	f003 0320 	and.w	r3, r3, #32
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d009      	beq.n	8011ea2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011e8e:	4b1e      	ldr	r3, [pc, #120]	@ (8011f08 <UART_SetConfig+0x904>)
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	08db      	lsrs	r3, r3, #3
 8011e94:	f003 0303 	and.w	r3, r3, #3
 8011e98:	4a1d      	ldr	r2, [pc, #116]	@ (8011f10 <UART_SetConfig+0x90c>)
 8011e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8011e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011ea0:	e00f      	b.n	8011ec2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8011ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8011f10 <UART_SetConfig+0x90c>)
 8011ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011ea6:	e00c      	b.n	8011ec2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8011f14 <UART_SetConfig+0x910>)
 8011eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011eac:	e009      	b.n	8011ec2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011eae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011eb4:	e005      	b.n	8011ec2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8011eba:	2301      	movs	r3, #1
 8011ebc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8011ec0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011ec2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	f000 81ee 	beq.w	80122a6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011eca:	697b      	ldr	r3, [r7, #20]
 8011ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ece:	4a12      	ldr	r2, [pc, #72]	@ (8011f18 <UART_SetConfig+0x914>)
 8011ed0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011ed4:	461a      	mov	r2, r3
 8011ed6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011ed8:	fbb3 f3f2 	udiv	r3, r3, r2
 8011edc:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011ede:	697b      	ldr	r3, [r7, #20]
 8011ee0:	685a      	ldr	r2, [r3, #4]
 8011ee2:	4613      	mov	r3, r2
 8011ee4:	005b      	lsls	r3, r3, #1
 8011ee6:	4413      	add	r3, r2
 8011ee8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011eea:	429a      	cmp	r2, r3
 8011eec:	d305      	bcc.n	8011efa <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011eee:	697b      	ldr	r3, [r7, #20]
 8011ef0:	685b      	ldr	r3, [r3, #4]
 8011ef2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011ef4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011ef6:	429a      	cmp	r2, r3
 8011ef8:	d910      	bls.n	8011f1c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8011efa:	2301      	movs	r3, #1
 8011efc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8011f00:	e1d1      	b.n	80122a6 <UART_SetConfig+0xca2>
 8011f02:	bf00      	nop
 8011f04:	40011c00 	.word	0x40011c00
 8011f08:	58024400 	.word	0x58024400
 8011f0c:	58000c00 	.word	0x58000c00
 8011f10:	03d09000 	.word	0x03d09000
 8011f14:	003d0900 	.word	0x003d0900
 8011f18:	08014898 	.word	0x08014898
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011f1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011f1e:	2200      	movs	r2, #0
 8011f20:	60bb      	str	r3, [r7, #8]
 8011f22:	60fa      	str	r2, [r7, #12]
 8011f24:	697b      	ldr	r3, [r7, #20]
 8011f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f28:	4ac0      	ldr	r2, [pc, #768]	@ (801222c <UART_SetConfig+0xc28>)
 8011f2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011f2e:	b29b      	uxth	r3, r3
 8011f30:	2200      	movs	r2, #0
 8011f32:	603b      	str	r3, [r7, #0]
 8011f34:	607a      	str	r2, [r7, #4]
 8011f36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011f3a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011f3e:	f7ee fa3f 	bl	80003c0 <__aeabi_uldivmod>
 8011f42:	4602      	mov	r2, r0
 8011f44:	460b      	mov	r3, r1
 8011f46:	4610      	mov	r0, r2
 8011f48:	4619      	mov	r1, r3
 8011f4a:	f04f 0200 	mov.w	r2, #0
 8011f4e:	f04f 0300 	mov.w	r3, #0
 8011f52:	020b      	lsls	r3, r1, #8
 8011f54:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011f58:	0202      	lsls	r2, r0, #8
 8011f5a:	6979      	ldr	r1, [r7, #20]
 8011f5c:	6849      	ldr	r1, [r1, #4]
 8011f5e:	0849      	lsrs	r1, r1, #1
 8011f60:	2000      	movs	r0, #0
 8011f62:	460c      	mov	r4, r1
 8011f64:	4605      	mov	r5, r0
 8011f66:	eb12 0804 	adds.w	r8, r2, r4
 8011f6a:	eb43 0905 	adc.w	r9, r3, r5
 8011f6e:	697b      	ldr	r3, [r7, #20]
 8011f70:	685b      	ldr	r3, [r3, #4]
 8011f72:	2200      	movs	r2, #0
 8011f74:	469a      	mov	sl, r3
 8011f76:	4693      	mov	fp, r2
 8011f78:	4652      	mov	r2, sl
 8011f7a:	465b      	mov	r3, fp
 8011f7c:	4640      	mov	r0, r8
 8011f7e:	4649      	mov	r1, r9
 8011f80:	f7ee fa1e 	bl	80003c0 <__aeabi_uldivmod>
 8011f84:	4602      	mov	r2, r0
 8011f86:	460b      	mov	r3, r1
 8011f88:	4613      	mov	r3, r2
 8011f8a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8011f92:	d308      	bcc.n	8011fa6 <UART_SetConfig+0x9a2>
 8011f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011f9a:	d204      	bcs.n	8011fa6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8011f9c:	697b      	ldr	r3, [r7, #20]
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011fa2:	60da      	str	r2, [r3, #12]
 8011fa4:	e17f      	b.n	80122a6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8011fa6:	2301      	movs	r3, #1
 8011fa8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8011fac:	e17b      	b.n	80122a6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011fae:	697b      	ldr	r3, [r7, #20]
 8011fb0:	69db      	ldr	r3, [r3, #28]
 8011fb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011fb6:	f040 80bd 	bne.w	8012134 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8011fba:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8011fbe:	2b20      	cmp	r3, #32
 8011fc0:	dc48      	bgt.n	8012054 <UART_SetConfig+0xa50>
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	db7b      	blt.n	80120be <UART_SetConfig+0xaba>
 8011fc6:	2b20      	cmp	r3, #32
 8011fc8:	d879      	bhi.n	80120be <UART_SetConfig+0xaba>
 8011fca:	a201      	add	r2, pc, #4	@ (adr r2, 8011fd0 <UART_SetConfig+0x9cc>)
 8011fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fd0:	0801205b 	.word	0x0801205b
 8011fd4:	08012063 	.word	0x08012063
 8011fd8:	080120bf 	.word	0x080120bf
 8011fdc:	080120bf 	.word	0x080120bf
 8011fe0:	0801206b 	.word	0x0801206b
 8011fe4:	080120bf 	.word	0x080120bf
 8011fe8:	080120bf 	.word	0x080120bf
 8011fec:	080120bf 	.word	0x080120bf
 8011ff0:	0801207b 	.word	0x0801207b
 8011ff4:	080120bf 	.word	0x080120bf
 8011ff8:	080120bf 	.word	0x080120bf
 8011ffc:	080120bf 	.word	0x080120bf
 8012000:	080120bf 	.word	0x080120bf
 8012004:	080120bf 	.word	0x080120bf
 8012008:	080120bf 	.word	0x080120bf
 801200c:	080120bf 	.word	0x080120bf
 8012010:	0801208b 	.word	0x0801208b
 8012014:	080120bf 	.word	0x080120bf
 8012018:	080120bf 	.word	0x080120bf
 801201c:	080120bf 	.word	0x080120bf
 8012020:	080120bf 	.word	0x080120bf
 8012024:	080120bf 	.word	0x080120bf
 8012028:	080120bf 	.word	0x080120bf
 801202c:	080120bf 	.word	0x080120bf
 8012030:	080120bf 	.word	0x080120bf
 8012034:	080120bf 	.word	0x080120bf
 8012038:	080120bf 	.word	0x080120bf
 801203c:	080120bf 	.word	0x080120bf
 8012040:	080120bf 	.word	0x080120bf
 8012044:	080120bf 	.word	0x080120bf
 8012048:	080120bf 	.word	0x080120bf
 801204c:	080120bf 	.word	0x080120bf
 8012050:	080120b1 	.word	0x080120b1
 8012054:	2b40      	cmp	r3, #64	@ 0x40
 8012056:	d02e      	beq.n	80120b6 <UART_SetConfig+0xab2>
 8012058:	e031      	b.n	80120be <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801205a:	f7f8 fdf3 	bl	800ac44 <HAL_RCC_GetPCLK1Freq>
 801205e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8012060:	e033      	b.n	80120ca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012062:	f7f8 fe05 	bl	800ac70 <HAL_RCC_GetPCLK2Freq>
 8012066:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8012068:	e02f      	b.n	80120ca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801206a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801206e:	4618      	mov	r0, r3
 8012070:	f7fa fc9c 	bl	800c9ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012076:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012078:	e027      	b.n	80120ca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801207a:	f107 0318 	add.w	r3, r7, #24
 801207e:	4618      	mov	r0, r3
 8012080:	f7fa fde8 	bl	800cc54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012084:	69fb      	ldr	r3, [r7, #28]
 8012086:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012088:	e01f      	b.n	80120ca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801208a:	4b69      	ldr	r3, [pc, #420]	@ (8012230 <UART_SetConfig+0xc2c>)
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	f003 0320 	and.w	r3, r3, #32
 8012092:	2b00      	cmp	r3, #0
 8012094:	d009      	beq.n	80120aa <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012096:	4b66      	ldr	r3, [pc, #408]	@ (8012230 <UART_SetConfig+0xc2c>)
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	08db      	lsrs	r3, r3, #3
 801209c:	f003 0303 	and.w	r3, r3, #3
 80120a0:	4a64      	ldr	r2, [pc, #400]	@ (8012234 <UART_SetConfig+0xc30>)
 80120a2:	fa22 f303 	lsr.w	r3, r2, r3
 80120a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80120a8:	e00f      	b.n	80120ca <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80120aa:	4b62      	ldr	r3, [pc, #392]	@ (8012234 <UART_SetConfig+0xc30>)
 80120ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80120ae:	e00c      	b.n	80120ca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80120b0:	4b61      	ldr	r3, [pc, #388]	@ (8012238 <UART_SetConfig+0xc34>)
 80120b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80120b4:	e009      	b.n	80120ca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80120b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80120ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80120bc:	e005      	b.n	80120ca <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80120be:	2300      	movs	r3, #0
 80120c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80120c2:	2301      	movs	r3, #1
 80120c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80120c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80120ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	f000 80ea 	beq.w	80122a6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80120d2:	697b      	ldr	r3, [r7, #20]
 80120d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120d6:	4a55      	ldr	r2, [pc, #340]	@ (801222c <UART_SetConfig+0xc28>)
 80120d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80120dc:	461a      	mov	r2, r3
 80120de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80120e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80120e4:	005a      	lsls	r2, r3, #1
 80120e6:	697b      	ldr	r3, [r7, #20]
 80120e8:	685b      	ldr	r3, [r3, #4]
 80120ea:	085b      	lsrs	r3, r3, #1
 80120ec:	441a      	add	r2, r3
 80120ee:	697b      	ldr	r3, [r7, #20]
 80120f0:	685b      	ldr	r3, [r3, #4]
 80120f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80120f6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80120f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120fa:	2b0f      	cmp	r3, #15
 80120fc:	d916      	bls.n	801212c <UART_SetConfig+0xb28>
 80120fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012100:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012104:	d212      	bcs.n	801212c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012108:	b29b      	uxth	r3, r3
 801210a:	f023 030f 	bic.w	r3, r3, #15
 801210e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012112:	085b      	lsrs	r3, r3, #1
 8012114:	b29b      	uxth	r3, r3
 8012116:	f003 0307 	and.w	r3, r3, #7
 801211a:	b29a      	uxth	r2, r3
 801211c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801211e:	4313      	orrs	r3, r2
 8012120:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8012122:	697b      	ldr	r3, [r7, #20]
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8012128:	60da      	str	r2, [r3, #12]
 801212a:	e0bc      	b.n	80122a6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 801212c:	2301      	movs	r3, #1
 801212e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8012132:	e0b8      	b.n	80122a6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8012134:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8012138:	2b20      	cmp	r3, #32
 801213a:	dc4b      	bgt.n	80121d4 <UART_SetConfig+0xbd0>
 801213c:	2b00      	cmp	r3, #0
 801213e:	f2c0 8087 	blt.w	8012250 <UART_SetConfig+0xc4c>
 8012142:	2b20      	cmp	r3, #32
 8012144:	f200 8084 	bhi.w	8012250 <UART_SetConfig+0xc4c>
 8012148:	a201      	add	r2, pc, #4	@ (adr r2, 8012150 <UART_SetConfig+0xb4c>)
 801214a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801214e:	bf00      	nop
 8012150:	080121db 	.word	0x080121db
 8012154:	080121e3 	.word	0x080121e3
 8012158:	08012251 	.word	0x08012251
 801215c:	08012251 	.word	0x08012251
 8012160:	080121eb 	.word	0x080121eb
 8012164:	08012251 	.word	0x08012251
 8012168:	08012251 	.word	0x08012251
 801216c:	08012251 	.word	0x08012251
 8012170:	080121fb 	.word	0x080121fb
 8012174:	08012251 	.word	0x08012251
 8012178:	08012251 	.word	0x08012251
 801217c:	08012251 	.word	0x08012251
 8012180:	08012251 	.word	0x08012251
 8012184:	08012251 	.word	0x08012251
 8012188:	08012251 	.word	0x08012251
 801218c:	08012251 	.word	0x08012251
 8012190:	0801220b 	.word	0x0801220b
 8012194:	08012251 	.word	0x08012251
 8012198:	08012251 	.word	0x08012251
 801219c:	08012251 	.word	0x08012251
 80121a0:	08012251 	.word	0x08012251
 80121a4:	08012251 	.word	0x08012251
 80121a8:	08012251 	.word	0x08012251
 80121ac:	08012251 	.word	0x08012251
 80121b0:	08012251 	.word	0x08012251
 80121b4:	08012251 	.word	0x08012251
 80121b8:	08012251 	.word	0x08012251
 80121bc:	08012251 	.word	0x08012251
 80121c0:	08012251 	.word	0x08012251
 80121c4:	08012251 	.word	0x08012251
 80121c8:	08012251 	.word	0x08012251
 80121cc:	08012251 	.word	0x08012251
 80121d0:	08012243 	.word	0x08012243
 80121d4:	2b40      	cmp	r3, #64	@ 0x40
 80121d6:	d037      	beq.n	8012248 <UART_SetConfig+0xc44>
 80121d8:	e03a      	b.n	8012250 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80121da:	f7f8 fd33 	bl	800ac44 <HAL_RCC_GetPCLK1Freq>
 80121de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80121e0:	e03c      	b.n	801225c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80121e2:	f7f8 fd45 	bl	800ac70 <HAL_RCC_GetPCLK2Freq>
 80121e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80121e8:	e038      	b.n	801225c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80121ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80121ee:	4618      	mov	r0, r3
 80121f0:	f7fa fbdc 	bl	800c9ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80121f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80121f8:	e030      	b.n	801225c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80121fa:	f107 0318 	add.w	r3, r7, #24
 80121fe:	4618      	mov	r0, r3
 8012200:	f7fa fd28 	bl	800cc54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012204:	69fb      	ldr	r3, [r7, #28]
 8012206:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012208:	e028      	b.n	801225c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801220a:	4b09      	ldr	r3, [pc, #36]	@ (8012230 <UART_SetConfig+0xc2c>)
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	f003 0320 	and.w	r3, r3, #32
 8012212:	2b00      	cmp	r3, #0
 8012214:	d012      	beq.n	801223c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012216:	4b06      	ldr	r3, [pc, #24]	@ (8012230 <UART_SetConfig+0xc2c>)
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	08db      	lsrs	r3, r3, #3
 801221c:	f003 0303 	and.w	r3, r3, #3
 8012220:	4a04      	ldr	r2, [pc, #16]	@ (8012234 <UART_SetConfig+0xc30>)
 8012222:	fa22 f303 	lsr.w	r3, r2, r3
 8012226:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012228:	e018      	b.n	801225c <UART_SetConfig+0xc58>
 801222a:	bf00      	nop
 801222c:	08014898 	.word	0x08014898
 8012230:	58024400 	.word	0x58024400
 8012234:	03d09000 	.word	0x03d09000
 8012238:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 801223c:	4b24      	ldr	r3, [pc, #144]	@ (80122d0 <UART_SetConfig+0xccc>)
 801223e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012240:	e00c      	b.n	801225c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012242:	4b24      	ldr	r3, [pc, #144]	@ (80122d4 <UART_SetConfig+0xcd0>)
 8012244:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012246:	e009      	b.n	801225c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012248:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801224c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801224e:	e005      	b.n	801225c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8012250:	2300      	movs	r3, #0
 8012252:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8012254:	2301      	movs	r3, #1
 8012256:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801225a:	bf00      	nop
    }

    if (pclk != 0U)
 801225c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801225e:	2b00      	cmp	r3, #0
 8012260:	d021      	beq.n	80122a6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012262:	697b      	ldr	r3, [r7, #20]
 8012264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012266:	4a1c      	ldr	r2, [pc, #112]	@ (80122d8 <UART_SetConfig+0xcd4>)
 8012268:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801226c:	461a      	mov	r2, r3
 801226e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012270:	fbb3 f2f2 	udiv	r2, r3, r2
 8012274:	697b      	ldr	r3, [r7, #20]
 8012276:	685b      	ldr	r3, [r3, #4]
 8012278:	085b      	lsrs	r3, r3, #1
 801227a:	441a      	add	r2, r3
 801227c:	697b      	ldr	r3, [r7, #20]
 801227e:	685b      	ldr	r3, [r3, #4]
 8012280:	fbb2 f3f3 	udiv	r3, r2, r3
 8012284:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012288:	2b0f      	cmp	r3, #15
 801228a:	d909      	bls.n	80122a0 <UART_SetConfig+0xc9c>
 801228c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801228e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012292:	d205      	bcs.n	80122a0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8012294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012296:	b29a      	uxth	r2, r3
 8012298:	697b      	ldr	r3, [r7, #20]
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	60da      	str	r2, [r3, #12]
 801229e:	e002      	b.n	80122a6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80122a0:	2301      	movs	r3, #1
 80122a2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80122a6:	697b      	ldr	r3, [r7, #20]
 80122a8:	2201      	movs	r2, #1
 80122aa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80122ae:	697b      	ldr	r3, [r7, #20]
 80122b0:	2201      	movs	r2, #1
 80122b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80122b6:	697b      	ldr	r3, [r7, #20]
 80122b8:	2200      	movs	r2, #0
 80122ba:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80122bc:	697b      	ldr	r3, [r7, #20]
 80122be:	2200      	movs	r2, #0
 80122c0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80122c2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80122c6:	4618      	mov	r0, r3
 80122c8:	3748      	adds	r7, #72	@ 0x48
 80122ca:	46bd      	mov	sp, r7
 80122cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80122d0:	03d09000 	.word	0x03d09000
 80122d4:	003d0900 	.word	0x003d0900
 80122d8:	08014898 	.word	0x08014898

080122dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80122dc:	b480      	push	{r7}
 80122de:	b083      	sub	sp, #12
 80122e0:	af00      	add	r7, sp, #0
 80122e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80122e8:	f003 0308 	and.w	r3, r3, #8
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d00a      	beq.n	8012306 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	685b      	ldr	r3, [r3, #4]
 80122f6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	430a      	orrs	r2, r1
 8012304:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801230a:	f003 0301 	and.w	r3, r3, #1
 801230e:	2b00      	cmp	r3, #0
 8012310:	d00a      	beq.n	8012328 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	685b      	ldr	r3, [r3, #4]
 8012318:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	430a      	orrs	r2, r1
 8012326:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801232c:	f003 0302 	and.w	r3, r3, #2
 8012330:	2b00      	cmp	r3, #0
 8012332:	d00a      	beq.n	801234a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	685b      	ldr	r3, [r3, #4]
 801233a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	430a      	orrs	r2, r1
 8012348:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801234e:	f003 0304 	and.w	r3, r3, #4
 8012352:	2b00      	cmp	r3, #0
 8012354:	d00a      	beq.n	801236c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	685b      	ldr	r3, [r3, #4]
 801235c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	430a      	orrs	r2, r1
 801236a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012370:	f003 0310 	and.w	r3, r3, #16
 8012374:	2b00      	cmp	r3, #0
 8012376:	d00a      	beq.n	801238e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	689b      	ldr	r3, [r3, #8]
 801237e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	430a      	orrs	r2, r1
 801238c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012392:	f003 0320 	and.w	r3, r3, #32
 8012396:	2b00      	cmp	r3, #0
 8012398:	d00a      	beq.n	80123b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	689b      	ldr	r3, [r3, #8]
 80123a0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	430a      	orrs	r2, r1
 80123ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80123b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d01a      	beq.n	80123f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	685b      	ldr	r3, [r3, #4]
 80123c2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	681b      	ldr	r3, [r3, #0]
 80123ce:	430a      	orrs	r2, r1
 80123d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80123d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80123da:	d10a      	bne.n	80123f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	685b      	ldr	r3, [r3, #4]
 80123e2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	430a      	orrs	r2, r1
 80123f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80123f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d00a      	beq.n	8012414 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	685b      	ldr	r3, [r3, #4]
 8012404:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	430a      	orrs	r2, r1
 8012412:	605a      	str	r2, [r3, #4]
  }
}
 8012414:	bf00      	nop
 8012416:	370c      	adds	r7, #12
 8012418:	46bd      	mov	sp, r7
 801241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801241e:	4770      	bx	lr

08012420 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8012420:	b580      	push	{r7, lr}
 8012422:	b098      	sub	sp, #96	@ 0x60
 8012424:	af02      	add	r7, sp, #8
 8012426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	2200      	movs	r2, #0
 801242c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8012430:	f7f1 fada 	bl	80039e8 <HAL_GetTick>
 8012434:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	f003 0308 	and.w	r3, r3, #8
 8012440:	2b08      	cmp	r3, #8
 8012442:	d12f      	bne.n	80124a4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012444:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8012448:	9300      	str	r3, [sp, #0]
 801244a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801244c:	2200      	movs	r2, #0
 801244e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8012452:	6878      	ldr	r0, [r7, #4]
 8012454:	f000 f88e 	bl	8012574 <UART_WaitOnFlagUntilTimeout>
 8012458:	4603      	mov	r3, r0
 801245a:	2b00      	cmp	r3, #0
 801245c:	d022      	beq.n	80124a4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012466:	e853 3f00 	ldrex	r3, [r3]
 801246a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801246c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801246e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012472:	653b      	str	r3, [r7, #80]	@ 0x50
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	461a      	mov	r2, r3
 801247a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801247c:	647b      	str	r3, [r7, #68]	@ 0x44
 801247e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012480:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8012482:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012484:	e841 2300 	strex	r3, r2, [r1]
 8012488:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801248a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801248c:	2b00      	cmp	r3, #0
 801248e:	d1e6      	bne.n	801245e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	2220      	movs	r2, #32
 8012494:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	2200      	movs	r2, #0
 801249c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80124a0:	2303      	movs	r3, #3
 80124a2:	e063      	b.n	801256c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	681b      	ldr	r3, [r3, #0]
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	f003 0304 	and.w	r3, r3, #4
 80124ae:	2b04      	cmp	r3, #4
 80124b0:	d149      	bne.n	8012546 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80124b2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80124b6:	9300      	str	r3, [sp, #0]
 80124b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80124ba:	2200      	movs	r2, #0
 80124bc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80124c0:	6878      	ldr	r0, [r7, #4]
 80124c2:	f000 f857 	bl	8012574 <UART_WaitOnFlagUntilTimeout>
 80124c6:	4603      	mov	r3, r0
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d03c      	beq.n	8012546 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124d4:	e853 3f00 	ldrex	r3, [r3]
 80124d8:	623b      	str	r3, [r7, #32]
   return(result);
 80124da:	6a3b      	ldr	r3, [r7, #32]
 80124dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80124e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	461a      	mov	r2, r3
 80124e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80124ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80124ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80124f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80124f2:	e841 2300 	strex	r3, r2, [r1]
 80124f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80124f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d1e6      	bne.n	80124cc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	3308      	adds	r3, #8
 8012504:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012506:	693b      	ldr	r3, [r7, #16]
 8012508:	e853 3f00 	ldrex	r3, [r3]
 801250c:	60fb      	str	r3, [r7, #12]
   return(result);
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	f023 0301 	bic.w	r3, r3, #1
 8012514:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	3308      	adds	r3, #8
 801251c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801251e:	61fa      	str	r2, [r7, #28]
 8012520:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012522:	69b9      	ldr	r1, [r7, #24]
 8012524:	69fa      	ldr	r2, [r7, #28]
 8012526:	e841 2300 	strex	r3, r2, [r1]
 801252a:	617b      	str	r3, [r7, #20]
   return(result);
 801252c:	697b      	ldr	r3, [r7, #20]
 801252e:	2b00      	cmp	r3, #0
 8012530:	d1e5      	bne.n	80124fe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	2220      	movs	r2, #32
 8012536:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	2200      	movs	r2, #0
 801253e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012542:	2303      	movs	r3, #3
 8012544:	e012      	b.n	801256c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	2220      	movs	r2, #32
 801254a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	2220      	movs	r2, #32
 8012552:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	2200      	movs	r2, #0
 801255a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	2200      	movs	r2, #0
 8012560:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	2200      	movs	r2, #0
 8012566:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801256a:	2300      	movs	r3, #0
}
 801256c:	4618      	mov	r0, r3
 801256e:	3758      	adds	r7, #88	@ 0x58
 8012570:	46bd      	mov	sp, r7
 8012572:	bd80      	pop	{r7, pc}

08012574 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8012574:	b580      	push	{r7, lr}
 8012576:	b084      	sub	sp, #16
 8012578:	af00      	add	r7, sp, #0
 801257a:	60f8      	str	r0, [r7, #12]
 801257c:	60b9      	str	r1, [r7, #8]
 801257e:	603b      	str	r3, [r7, #0]
 8012580:	4613      	mov	r3, r2
 8012582:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012584:	e04f      	b.n	8012626 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012586:	69bb      	ldr	r3, [r7, #24]
 8012588:	f1b3 3fff 	cmp.w	r3, #4294967295
 801258c:	d04b      	beq.n	8012626 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801258e:	f7f1 fa2b 	bl	80039e8 <HAL_GetTick>
 8012592:	4602      	mov	r2, r0
 8012594:	683b      	ldr	r3, [r7, #0]
 8012596:	1ad3      	subs	r3, r2, r3
 8012598:	69ba      	ldr	r2, [r7, #24]
 801259a:	429a      	cmp	r2, r3
 801259c:	d302      	bcc.n	80125a4 <UART_WaitOnFlagUntilTimeout+0x30>
 801259e:	69bb      	ldr	r3, [r7, #24]
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d101      	bne.n	80125a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80125a4:	2303      	movs	r3, #3
 80125a6:	e04e      	b.n	8012646 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	f003 0304 	and.w	r3, r3, #4
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d037      	beq.n	8012626 <UART_WaitOnFlagUntilTimeout+0xb2>
 80125b6:	68bb      	ldr	r3, [r7, #8]
 80125b8:	2b80      	cmp	r3, #128	@ 0x80
 80125ba:	d034      	beq.n	8012626 <UART_WaitOnFlagUntilTimeout+0xb2>
 80125bc:	68bb      	ldr	r3, [r7, #8]
 80125be:	2b40      	cmp	r3, #64	@ 0x40
 80125c0:	d031      	beq.n	8012626 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	69db      	ldr	r3, [r3, #28]
 80125c8:	f003 0308 	and.w	r3, r3, #8
 80125cc:	2b08      	cmp	r3, #8
 80125ce:	d110      	bne.n	80125f2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	2208      	movs	r2, #8
 80125d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80125d8:	68f8      	ldr	r0, [r7, #12]
 80125da:	f000 f839 	bl	8012650 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	2208      	movs	r2, #8
 80125e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	2200      	movs	r2, #0
 80125ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80125ee:	2301      	movs	r3, #1
 80125f0:	e029      	b.n	8012646 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	69db      	ldr	r3, [r3, #28]
 80125f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80125fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012600:	d111      	bne.n	8012626 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801260a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801260c:	68f8      	ldr	r0, [r7, #12]
 801260e:	f000 f81f 	bl	8012650 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	2220      	movs	r2, #32
 8012616:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	2200      	movs	r2, #0
 801261e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8012622:	2303      	movs	r3, #3
 8012624:	e00f      	b.n	8012646 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	69da      	ldr	r2, [r3, #28]
 801262c:	68bb      	ldr	r3, [r7, #8]
 801262e:	4013      	ands	r3, r2
 8012630:	68ba      	ldr	r2, [r7, #8]
 8012632:	429a      	cmp	r2, r3
 8012634:	bf0c      	ite	eq
 8012636:	2301      	moveq	r3, #1
 8012638:	2300      	movne	r3, #0
 801263a:	b2db      	uxtb	r3, r3
 801263c:	461a      	mov	r2, r3
 801263e:	79fb      	ldrb	r3, [r7, #7]
 8012640:	429a      	cmp	r2, r3
 8012642:	d0a0      	beq.n	8012586 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012644:	2300      	movs	r3, #0
}
 8012646:	4618      	mov	r0, r3
 8012648:	3710      	adds	r7, #16
 801264a:	46bd      	mov	sp, r7
 801264c:	bd80      	pop	{r7, pc}
	...

08012650 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012650:	b480      	push	{r7}
 8012652:	b095      	sub	sp, #84	@ 0x54
 8012654:	af00      	add	r7, sp, #0
 8012656:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801265e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012660:	e853 3f00 	ldrex	r3, [r3]
 8012664:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8012666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012668:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801266c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	461a      	mov	r2, r3
 8012674:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012676:	643b      	str	r3, [r7, #64]	@ 0x40
 8012678:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801267a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801267c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801267e:	e841 2300 	strex	r3, r2, [r1]
 8012682:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8012684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012686:	2b00      	cmp	r3, #0
 8012688:	d1e6      	bne.n	8012658 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	681b      	ldr	r3, [r3, #0]
 801268e:	3308      	adds	r3, #8
 8012690:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012692:	6a3b      	ldr	r3, [r7, #32]
 8012694:	e853 3f00 	ldrex	r3, [r3]
 8012698:	61fb      	str	r3, [r7, #28]
   return(result);
 801269a:	69fa      	ldr	r2, [r7, #28]
 801269c:	4b1e      	ldr	r3, [pc, #120]	@ (8012718 <UART_EndRxTransfer+0xc8>)
 801269e:	4013      	ands	r3, r2
 80126a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	3308      	adds	r3, #8
 80126a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80126aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80126ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80126b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80126b2:	e841 2300 	strex	r3, r2, [r1]
 80126b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80126b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d1e5      	bne.n	801268a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80126c2:	2b01      	cmp	r3, #1
 80126c4:	d118      	bne.n	80126f8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126cc:	68fb      	ldr	r3, [r7, #12]
 80126ce:	e853 3f00 	ldrex	r3, [r3]
 80126d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80126d4:	68bb      	ldr	r3, [r7, #8]
 80126d6:	f023 0310 	bic.w	r3, r3, #16
 80126da:	647b      	str	r3, [r7, #68]	@ 0x44
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	461a      	mov	r2, r3
 80126e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80126e4:	61bb      	str	r3, [r7, #24]
 80126e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126e8:	6979      	ldr	r1, [r7, #20]
 80126ea:	69ba      	ldr	r2, [r7, #24]
 80126ec:	e841 2300 	strex	r3, r2, [r1]
 80126f0:	613b      	str	r3, [r7, #16]
   return(result);
 80126f2:	693b      	ldr	r3, [r7, #16]
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d1e6      	bne.n	80126c6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	2220      	movs	r2, #32
 80126fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	2200      	movs	r2, #0
 8012704:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	2200      	movs	r2, #0
 801270a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 801270c:	bf00      	nop
 801270e:	3754      	adds	r7, #84	@ 0x54
 8012710:	46bd      	mov	sp, r7
 8012712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012716:	4770      	bx	lr
 8012718:	effffffe 	.word	0xeffffffe

0801271c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801271c:	b480      	push	{r7}
 801271e:	b085      	sub	sp, #20
 8012720:	af00      	add	r7, sp, #0
 8012722:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801272a:	2b01      	cmp	r3, #1
 801272c:	d101      	bne.n	8012732 <HAL_UARTEx_DisableFifoMode+0x16>
 801272e:	2302      	movs	r3, #2
 8012730:	e027      	b.n	8012782 <HAL_UARTEx_DisableFifoMode+0x66>
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	2201      	movs	r2, #1
 8012736:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	2224      	movs	r2, #36	@ 0x24
 801273e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	681b      	ldr	r3, [r3, #0]
 8012748:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	681a      	ldr	r2, [r3, #0]
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	681b      	ldr	r3, [r3, #0]
 8012754:	f022 0201 	bic.w	r2, r2, #1
 8012758:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8012760:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	2200      	movs	r2, #0
 8012766:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	68fa      	ldr	r2, [r7, #12]
 801276e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	2220      	movs	r2, #32
 8012774:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	2200      	movs	r2, #0
 801277c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012780:	2300      	movs	r3, #0
}
 8012782:	4618      	mov	r0, r3
 8012784:	3714      	adds	r7, #20
 8012786:	46bd      	mov	sp, r7
 8012788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801278c:	4770      	bx	lr

0801278e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801278e:	b580      	push	{r7, lr}
 8012790:	b084      	sub	sp, #16
 8012792:	af00      	add	r7, sp, #0
 8012794:	6078      	str	r0, [r7, #4]
 8012796:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801279e:	2b01      	cmp	r3, #1
 80127a0:	d101      	bne.n	80127a6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80127a2:	2302      	movs	r3, #2
 80127a4:	e02d      	b.n	8012802 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	2201      	movs	r2, #1
 80127aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	2224      	movs	r2, #36	@ 0x24
 80127b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	681a      	ldr	r2, [r3, #0]
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	681b      	ldr	r3, [r3, #0]
 80127c8:	f022 0201 	bic.w	r2, r2, #1
 80127cc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	689b      	ldr	r3, [r3, #8]
 80127d4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	683a      	ldr	r2, [r7, #0]
 80127de:	430a      	orrs	r2, r1
 80127e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80127e2:	6878      	ldr	r0, [r7, #4]
 80127e4:	f000 f850 	bl	8012888 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	68fa      	ldr	r2, [r7, #12]
 80127ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	2220      	movs	r2, #32
 80127f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	2200      	movs	r2, #0
 80127fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012800:	2300      	movs	r3, #0
}
 8012802:	4618      	mov	r0, r3
 8012804:	3710      	adds	r7, #16
 8012806:	46bd      	mov	sp, r7
 8012808:	bd80      	pop	{r7, pc}

0801280a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801280a:	b580      	push	{r7, lr}
 801280c:	b084      	sub	sp, #16
 801280e:	af00      	add	r7, sp, #0
 8012810:	6078      	str	r0, [r7, #4]
 8012812:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801281a:	2b01      	cmp	r3, #1
 801281c:	d101      	bne.n	8012822 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801281e:	2302      	movs	r3, #2
 8012820:	e02d      	b.n	801287e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	2201      	movs	r2, #1
 8012826:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	2224      	movs	r2, #36	@ 0x24
 801282e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	681a      	ldr	r2, [r3, #0]
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	f022 0201 	bic.w	r2, r2, #1
 8012848:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	689b      	ldr	r3, [r3, #8]
 8012850:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	683a      	ldr	r2, [r7, #0]
 801285a:	430a      	orrs	r2, r1
 801285c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801285e:	6878      	ldr	r0, [r7, #4]
 8012860:	f000 f812 	bl	8012888 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	681b      	ldr	r3, [r3, #0]
 8012868:	68fa      	ldr	r2, [r7, #12]
 801286a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	2220      	movs	r2, #32
 8012870:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	2200      	movs	r2, #0
 8012878:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801287c:	2300      	movs	r3, #0
}
 801287e:	4618      	mov	r0, r3
 8012880:	3710      	adds	r7, #16
 8012882:	46bd      	mov	sp, r7
 8012884:	bd80      	pop	{r7, pc}
	...

08012888 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012888:	b480      	push	{r7}
 801288a:	b085      	sub	sp, #20
 801288c:	af00      	add	r7, sp, #0
 801288e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012894:	2b00      	cmp	r3, #0
 8012896:	d108      	bne.n	80128aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	2201      	movs	r2, #1
 801289c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	2201      	movs	r2, #1
 80128a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80128a8:	e031      	b.n	801290e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80128aa:	2310      	movs	r3, #16
 80128ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80128ae:	2310      	movs	r3, #16
 80128b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	681b      	ldr	r3, [r3, #0]
 80128b6:	689b      	ldr	r3, [r3, #8]
 80128b8:	0e5b      	lsrs	r3, r3, #25
 80128ba:	b2db      	uxtb	r3, r3
 80128bc:	f003 0307 	and.w	r3, r3, #7
 80128c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	689b      	ldr	r3, [r3, #8]
 80128c8:	0f5b      	lsrs	r3, r3, #29
 80128ca:	b2db      	uxtb	r3, r3
 80128cc:	f003 0307 	and.w	r3, r3, #7
 80128d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80128d2:	7bbb      	ldrb	r3, [r7, #14]
 80128d4:	7b3a      	ldrb	r2, [r7, #12]
 80128d6:	4911      	ldr	r1, [pc, #68]	@ (801291c <UARTEx_SetNbDataToProcess+0x94>)
 80128d8:	5c8a      	ldrb	r2, [r1, r2]
 80128da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80128de:	7b3a      	ldrb	r2, [r7, #12]
 80128e0:	490f      	ldr	r1, [pc, #60]	@ (8012920 <UARTEx_SetNbDataToProcess+0x98>)
 80128e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80128e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80128e8:	b29a      	uxth	r2, r3
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80128f0:	7bfb      	ldrb	r3, [r7, #15]
 80128f2:	7b7a      	ldrb	r2, [r7, #13]
 80128f4:	4909      	ldr	r1, [pc, #36]	@ (801291c <UARTEx_SetNbDataToProcess+0x94>)
 80128f6:	5c8a      	ldrb	r2, [r1, r2]
 80128f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80128fc:	7b7a      	ldrb	r2, [r7, #13]
 80128fe:	4908      	ldr	r1, [pc, #32]	@ (8012920 <UARTEx_SetNbDataToProcess+0x98>)
 8012900:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012902:	fb93 f3f2 	sdiv	r3, r3, r2
 8012906:	b29a      	uxth	r2, r3
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801290e:	bf00      	nop
 8012910:	3714      	adds	r7, #20
 8012912:	46bd      	mov	sp, r7
 8012914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012918:	4770      	bx	lr
 801291a:	bf00      	nop
 801291c:	080148b0 	.word	0x080148b0
 8012920:	080148b8 	.word	0x080148b8

08012924 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8012924:	b084      	sub	sp, #16
 8012926:	b480      	push	{r7}
 8012928:	b085      	sub	sp, #20
 801292a:	af00      	add	r7, sp, #0
 801292c:	6078      	str	r0, [r7, #4]
 801292e:	f107 001c 	add.w	r0, r7, #28
 8012932:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8012936:	2300      	movs	r3, #0
 8012938:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 801293a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 801293c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 801293e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8012940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 8012942:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8012944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 8012946:	431a      	orrs	r2, r3
             Init.ClockDiv
 8012948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 801294a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 801294c:	68fa      	ldr	r2, [r7, #12]
 801294e:	4313      	orrs	r3, r2
 8012950:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	685a      	ldr	r2, [r3, #4]
 8012956:	4b07      	ldr	r3, [pc, #28]	@ (8012974 <SDMMC_Init+0x50>)
 8012958:	4013      	ands	r3, r2
 801295a:	68fa      	ldr	r2, [r7, #12]
 801295c:	431a      	orrs	r2, r3
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8012962:	2300      	movs	r3, #0
}
 8012964:	4618      	mov	r0, r3
 8012966:	3714      	adds	r7, #20
 8012968:	46bd      	mov	sp, r7
 801296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801296e:	b004      	add	sp, #16
 8012970:	4770      	bx	lr
 8012972:	bf00      	nop
 8012974:	ffc02c00 	.word	0xffc02c00

08012978 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8012978:	b480      	push	{r7}
 801297a:	b083      	sub	sp, #12
 801297c:	af00      	add	r7, sp, #0
 801297e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8012986:	4618      	mov	r0, r3
 8012988:	370c      	adds	r7, #12
 801298a:	46bd      	mov	sp, r7
 801298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012990:	4770      	bx	lr

08012992 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8012992:	b480      	push	{r7}
 8012994:	b083      	sub	sp, #12
 8012996:	af00      	add	r7, sp, #0
 8012998:	6078      	str	r0, [r7, #4]
 801299a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 801299c:	683b      	ldr	r3, [r7, #0]
 801299e:	681a      	ldr	r2, [r3, #0]
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80129a6:	2300      	movs	r3, #0
}
 80129a8:	4618      	mov	r0, r3
 80129aa:	370c      	adds	r7, #12
 80129ac:	46bd      	mov	sp, r7
 80129ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129b2:	4770      	bx	lr

080129b4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80129b4:	b480      	push	{r7}
 80129b6:	b083      	sub	sp, #12
 80129b8:	af00      	add	r7, sp, #0
 80129ba:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	f043 0203 	orr.w	r2, r3, #3
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80129c8:	2300      	movs	r3, #0
}
 80129ca:	4618      	mov	r0, r3
 80129cc:	370c      	adds	r7, #12
 80129ce:	46bd      	mov	sp, r7
 80129d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129d4:	4770      	bx	lr

080129d6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80129d6:	b480      	push	{r7}
 80129d8:	b083      	sub	sp, #12
 80129da:	af00      	add	r7, sp, #0
 80129dc:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	f003 0303 	and.w	r3, r3, #3
}
 80129e6:	4618      	mov	r0, r3
 80129e8:	370c      	adds	r7, #12
 80129ea:	46bd      	mov	sp, r7
 80129ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f0:	4770      	bx	lr
	...

080129f4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80129f4:	b480      	push	{r7}
 80129f6:	b085      	sub	sp, #20
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	6078      	str	r0, [r7, #4]
 80129fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80129fe:	2300      	movs	r3, #0
 8012a00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8012a02:	683b      	ldr	r3, [r7, #0]
 8012a04:	681a      	ldr	r2, [r3, #0]
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012a0a:	683b      	ldr	r3, [r7, #0]
 8012a0c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8012a0e:	683b      	ldr	r3, [r7, #0]
 8012a10:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012a12:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8012a14:	683b      	ldr	r3, [r7, #0]
 8012a16:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8012a18:	431a      	orrs	r2, r3
                       Command->CPSM);
 8012a1a:	683b      	ldr	r3, [r7, #0]
 8012a1c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8012a1e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012a20:	68fa      	ldr	r2, [r7, #12]
 8012a22:	4313      	orrs	r3, r2
 8012a24:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	68da      	ldr	r2, [r3, #12]
 8012a2a:	4b06      	ldr	r3, [pc, #24]	@ (8012a44 <SDMMC_SendCommand+0x50>)
 8012a2c:	4013      	ands	r3, r2
 8012a2e:	68fa      	ldr	r2, [r7, #12]
 8012a30:	431a      	orrs	r2, r3
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012a36:	2300      	movs	r3, #0
}
 8012a38:	4618      	mov	r0, r3
 8012a3a:	3714      	adds	r7, #20
 8012a3c:	46bd      	mov	sp, r7
 8012a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a42:	4770      	bx	lr
 8012a44:	fffee0c0 	.word	0xfffee0c0

08012a48 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8012a48:	b480      	push	{r7}
 8012a4a:	b083      	sub	sp, #12
 8012a4c:	af00      	add	r7, sp, #0
 8012a4e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	691b      	ldr	r3, [r3, #16]
 8012a54:	b2db      	uxtb	r3, r3
}
 8012a56:	4618      	mov	r0, r3
 8012a58:	370c      	adds	r7, #12
 8012a5a:	46bd      	mov	sp, r7
 8012a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a60:	4770      	bx	lr

08012a62 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8012a62:	b480      	push	{r7}
 8012a64:	b085      	sub	sp, #20
 8012a66:	af00      	add	r7, sp, #0
 8012a68:	6078      	str	r0, [r7, #4]
 8012a6a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	3314      	adds	r3, #20
 8012a70:	461a      	mov	r2, r3
 8012a72:	683b      	ldr	r3, [r7, #0]
 8012a74:	4413      	add	r3, r2
 8012a76:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8012a78:	68fb      	ldr	r3, [r7, #12]
 8012a7a:	681b      	ldr	r3, [r3, #0]
}
 8012a7c:	4618      	mov	r0, r3
 8012a7e:	3714      	adds	r7, #20
 8012a80:	46bd      	mov	sp, r7
 8012a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a86:	4770      	bx	lr

08012a88 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8012a88:	b480      	push	{r7}
 8012a8a:	b085      	sub	sp, #20
 8012a8c:	af00      	add	r7, sp, #0
 8012a8e:	6078      	str	r0, [r7, #4]
 8012a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012a92:	2300      	movs	r3, #0
 8012a94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8012a96:	683b      	ldr	r3, [r7, #0]
 8012a98:	681a      	ldr	r2, [r3, #0]
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8012a9e:	683b      	ldr	r3, [r7, #0]
 8012aa0:	685a      	ldr	r2, [r3, #4]
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012aa6:	683b      	ldr	r3, [r7, #0]
 8012aa8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8012aaa:	683b      	ldr	r3, [r7, #0]
 8012aac:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012aae:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8012ab0:	683b      	ldr	r3, [r7, #0]
 8012ab2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8012ab4:	431a      	orrs	r2, r3
                       Data->DPSM);
 8012ab6:	683b      	ldr	r3, [r7, #0]
 8012ab8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8012aba:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012abc:	68fa      	ldr	r2, [r7, #12]
 8012abe:	4313      	orrs	r3, r2
 8012ac0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012ac6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	431a      	orrs	r2, r3
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8012ad2:	2300      	movs	r3, #0

}
 8012ad4:	4618      	mov	r0, r3
 8012ad6:	3714      	adds	r7, #20
 8012ad8:	46bd      	mov	sp, r7
 8012ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ade:	4770      	bx	lr

08012ae0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8012ae0:	b580      	push	{r7, lr}
 8012ae2:	b088      	sub	sp, #32
 8012ae4:	af00      	add	r7, sp, #0
 8012ae6:	6078      	str	r0, [r7, #4]
 8012ae8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8012aea:	683b      	ldr	r3, [r7, #0]
 8012aec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8012aee:	2310      	movs	r3, #16
 8012af0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012af2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012af6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012af8:	2300      	movs	r3, #0
 8012afa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012afc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012b00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012b02:	f107 0308 	add.w	r3, r7, #8
 8012b06:	4619      	mov	r1, r3
 8012b08:	6878      	ldr	r0, [r7, #4]
 8012b0a:	f7ff ff73 	bl	80129f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8012b0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012b12:	2110      	movs	r1, #16
 8012b14:	6878      	ldr	r0, [r7, #4]
 8012b16:	f000 fa5f 	bl	8012fd8 <SDMMC_GetCmdResp1>
 8012b1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012b1c:	69fb      	ldr	r3, [r7, #28]
}
 8012b1e:	4618      	mov	r0, r3
 8012b20:	3720      	adds	r7, #32
 8012b22:	46bd      	mov	sp, r7
 8012b24:	bd80      	pop	{r7, pc}

08012b26 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012b26:	b580      	push	{r7, lr}
 8012b28:	b088      	sub	sp, #32
 8012b2a:	af00      	add	r7, sp, #0
 8012b2c:	6078      	str	r0, [r7, #4]
 8012b2e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012b30:	683b      	ldr	r3, [r7, #0]
 8012b32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8012b34:	2311      	movs	r3, #17
 8012b36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012b38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012b3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012b3e:	2300      	movs	r3, #0
 8012b40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012b42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012b46:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012b48:	f107 0308 	add.w	r3, r7, #8
 8012b4c:	4619      	mov	r1, r3
 8012b4e:	6878      	ldr	r0, [r7, #4]
 8012b50:	f7ff ff50 	bl	80129f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012b54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012b58:	2111      	movs	r1, #17
 8012b5a:	6878      	ldr	r0, [r7, #4]
 8012b5c:	f000 fa3c 	bl	8012fd8 <SDMMC_GetCmdResp1>
 8012b60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012b62:	69fb      	ldr	r3, [r7, #28]
}
 8012b64:	4618      	mov	r0, r3
 8012b66:	3720      	adds	r7, #32
 8012b68:	46bd      	mov	sp, r7
 8012b6a:	bd80      	pop	{r7, pc}

08012b6c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012b6c:	b580      	push	{r7, lr}
 8012b6e:	b088      	sub	sp, #32
 8012b70:	af00      	add	r7, sp, #0
 8012b72:	6078      	str	r0, [r7, #4]
 8012b74:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012b76:	683b      	ldr	r3, [r7, #0]
 8012b78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8012b7a:	2312      	movs	r3, #18
 8012b7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012b7e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012b82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012b84:	2300      	movs	r3, #0
 8012b86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012b88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012b8c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012b8e:	f107 0308 	add.w	r3, r7, #8
 8012b92:	4619      	mov	r1, r3
 8012b94:	6878      	ldr	r0, [r7, #4]
 8012b96:	f7ff ff2d 	bl	80129f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012b9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012b9e:	2112      	movs	r1, #18
 8012ba0:	6878      	ldr	r0, [r7, #4]
 8012ba2:	f000 fa19 	bl	8012fd8 <SDMMC_GetCmdResp1>
 8012ba6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012ba8:	69fb      	ldr	r3, [r7, #28]
}
 8012baa:	4618      	mov	r0, r3
 8012bac:	3720      	adds	r7, #32
 8012bae:	46bd      	mov	sp, r7
 8012bb0:	bd80      	pop	{r7, pc}

08012bb2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012bb2:	b580      	push	{r7, lr}
 8012bb4:	b088      	sub	sp, #32
 8012bb6:	af00      	add	r7, sp, #0
 8012bb8:	6078      	str	r0, [r7, #4]
 8012bba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012bbc:	683b      	ldr	r3, [r7, #0]
 8012bbe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8012bc0:	2318      	movs	r3, #24
 8012bc2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012bc4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012bc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012bca:	2300      	movs	r3, #0
 8012bcc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012bce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012bd2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012bd4:	f107 0308 	add.w	r3, r7, #8
 8012bd8:	4619      	mov	r1, r3
 8012bda:	6878      	ldr	r0, [r7, #4]
 8012bdc:	f7ff ff0a 	bl	80129f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012be0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012be4:	2118      	movs	r1, #24
 8012be6:	6878      	ldr	r0, [r7, #4]
 8012be8:	f000 f9f6 	bl	8012fd8 <SDMMC_GetCmdResp1>
 8012bec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012bee:	69fb      	ldr	r3, [r7, #28]
}
 8012bf0:	4618      	mov	r0, r3
 8012bf2:	3720      	adds	r7, #32
 8012bf4:	46bd      	mov	sp, r7
 8012bf6:	bd80      	pop	{r7, pc}

08012bf8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012bf8:	b580      	push	{r7, lr}
 8012bfa:	b088      	sub	sp, #32
 8012bfc:	af00      	add	r7, sp, #0
 8012bfe:	6078      	str	r0, [r7, #4]
 8012c00:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012c02:	683b      	ldr	r3, [r7, #0]
 8012c04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8012c06:	2319      	movs	r3, #25
 8012c08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012c0a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012c0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012c10:	2300      	movs	r3, #0
 8012c12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012c14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012c18:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012c1a:	f107 0308 	add.w	r3, r7, #8
 8012c1e:	4619      	mov	r1, r3
 8012c20:	6878      	ldr	r0, [r7, #4]
 8012c22:	f7ff fee7 	bl	80129f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012c26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012c2a:	2119      	movs	r1, #25
 8012c2c:	6878      	ldr	r0, [r7, #4]
 8012c2e:	f000 f9d3 	bl	8012fd8 <SDMMC_GetCmdResp1>
 8012c32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012c34:	69fb      	ldr	r3, [r7, #28]
}
 8012c36:	4618      	mov	r0, r3
 8012c38:	3720      	adds	r7, #32
 8012c3a:	46bd      	mov	sp, r7
 8012c3c:	bd80      	pop	{r7, pc}
	...

08012c40 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8012c40:	b580      	push	{r7, lr}
 8012c42:	b088      	sub	sp, #32
 8012c44:	af00      	add	r7, sp, #0
 8012c46:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8012c48:	2300      	movs	r3, #0
 8012c4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8012c4c:	230c      	movs	r3, #12
 8012c4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012c50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012c54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012c56:	2300      	movs	r3, #0
 8012c58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012c5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012c5e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	68db      	ldr	r3, [r3, #12]
 8012c64:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	68db      	ldr	r3, [r3, #12]
 8012c70:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012c78:	f107 0308 	add.w	r3, r7, #8
 8012c7c:	4619      	mov	r1, r3
 8012c7e:	6878      	ldr	r0, [r7, #4]
 8012c80:	f7ff feb8 	bl	80129f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8012c84:	4a0b      	ldr	r2, [pc, #44]	@ (8012cb4 <SDMMC_CmdStopTransfer+0x74>)
 8012c86:	210c      	movs	r1, #12
 8012c88:	6878      	ldr	r0, [r7, #4]
 8012c8a:	f000 f9a5 	bl	8012fd8 <SDMMC_GetCmdResp1>
 8012c8e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	68db      	ldr	r3, [r3, #12]
 8012c94:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8012c9c:	69fb      	ldr	r3, [r7, #28]
 8012c9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012ca2:	d101      	bne.n	8012ca8 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8012ca4:	2300      	movs	r3, #0
 8012ca6:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8012ca8:	69fb      	ldr	r3, [r7, #28]
}
 8012caa:	4618      	mov	r0, r3
 8012cac:	3720      	adds	r7, #32
 8012cae:	46bd      	mov	sp, r7
 8012cb0:	bd80      	pop	{r7, pc}
 8012cb2:	bf00      	nop
 8012cb4:	05f5e100 	.word	0x05f5e100

08012cb8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8012cb8:	b580      	push	{r7, lr}
 8012cba:	b088      	sub	sp, #32
 8012cbc:	af00      	add	r7, sp, #0
 8012cbe:	6078      	str	r0, [r7, #4]
 8012cc0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8012cc2:	683b      	ldr	r3, [r7, #0]
 8012cc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8012cc6:	2307      	movs	r3, #7
 8012cc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012cca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012cce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012cd0:	2300      	movs	r3, #0
 8012cd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012cd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012cd8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012cda:	f107 0308 	add.w	r3, r7, #8
 8012cde:	4619      	mov	r1, r3
 8012ce0:	6878      	ldr	r0, [r7, #4]
 8012ce2:	f7ff fe87 	bl	80129f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8012ce6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012cea:	2107      	movs	r1, #7
 8012cec:	6878      	ldr	r0, [r7, #4]
 8012cee:	f000 f973 	bl	8012fd8 <SDMMC_GetCmdResp1>
 8012cf2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012cf4:	69fb      	ldr	r3, [r7, #28]
}
 8012cf6:	4618      	mov	r0, r3
 8012cf8:	3720      	adds	r7, #32
 8012cfa:	46bd      	mov	sp, r7
 8012cfc:	bd80      	pop	{r7, pc}

08012cfe <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8012cfe:	b580      	push	{r7, lr}
 8012d00:	b088      	sub	sp, #32
 8012d02:	af00      	add	r7, sp, #0
 8012d04:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8012d06:	2300      	movs	r3, #0
 8012d08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8012d0a:	2300      	movs	r3, #0
 8012d0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8012d0e:	2300      	movs	r3, #0
 8012d10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012d12:	2300      	movs	r3, #0
 8012d14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012d16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012d1a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012d1c:	f107 0308 	add.w	r3, r7, #8
 8012d20:	4619      	mov	r1, r3
 8012d22:	6878      	ldr	r0, [r7, #4]
 8012d24:	f7ff fe66 	bl	80129f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8012d28:	6878      	ldr	r0, [r7, #4]
 8012d2a:	f000 fb97 	bl	801345c <SDMMC_GetCmdError>
 8012d2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012d30:	69fb      	ldr	r3, [r7, #28]
}
 8012d32:	4618      	mov	r0, r3
 8012d34:	3720      	adds	r7, #32
 8012d36:	46bd      	mov	sp, r7
 8012d38:	bd80      	pop	{r7, pc}

08012d3a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8012d3a:	b580      	push	{r7, lr}
 8012d3c:	b088      	sub	sp, #32
 8012d3e:	af00      	add	r7, sp, #0
 8012d40:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8012d42:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8012d46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8012d48:	2308      	movs	r3, #8
 8012d4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012d4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012d50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012d52:	2300      	movs	r3, #0
 8012d54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012d56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012d5a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012d5c:	f107 0308 	add.w	r3, r7, #8
 8012d60:	4619      	mov	r1, r3
 8012d62:	6878      	ldr	r0, [r7, #4]
 8012d64:	f7ff fe46 	bl	80129f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8012d68:	6878      	ldr	r0, [r7, #4]
 8012d6a:	f000 fb29 	bl	80133c0 <SDMMC_GetCmdResp7>
 8012d6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012d70:	69fb      	ldr	r3, [r7, #28]
}
 8012d72:	4618      	mov	r0, r3
 8012d74:	3720      	adds	r7, #32
 8012d76:	46bd      	mov	sp, r7
 8012d78:	bd80      	pop	{r7, pc}

08012d7a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012d7a:	b580      	push	{r7, lr}
 8012d7c:	b088      	sub	sp, #32
 8012d7e:	af00      	add	r7, sp, #0
 8012d80:	6078      	str	r0, [r7, #4]
 8012d82:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8012d84:	683b      	ldr	r3, [r7, #0]
 8012d86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8012d88:	2337      	movs	r3, #55	@ 0x37
 8012d8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012d8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012d90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012d92:	2300      	movs	r3, #0
 8012d94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012d96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012d9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012d9c:	f107 0308 	add.w	r3, r7, #8
 8012da0:	4619      	mov	r1, r3
 8012da2:	6878      	ldr	r0, [r7, #4]
 8012da4:	f7ff fe26 	bl	80129f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8012da8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012dac:	2137      	movs	r1, #55	@ 0x37
 8012dae:	6878      	ldr	r0, [r7, #4]
 8012db0:	f000 f912 	bl	8012fd8 <SDMMC_GetCmdResp1>
 8012db4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012db6:	69fb      	ldr	r3, [r7, #28]
}
 8012db8:	4618      	mov	r0, r3
 8012dba:	3720      	adds	r7, #32
 8012dbc:	46bd      	mov	sp, r7
 8012dbe:	bd80      	pop	{r7, pc}

08012dc0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012dc0:	b580      	push	{r7, lr}
 8012dc2:	b088      	sub	sp, #32
 8012dc4:	af00      	add	r7, sp, #0
 8012dc6:	6078      	str	r0, [r7, #4]
 8012dc8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8012dca:	683b      	ldr	r3, [r7, #0]
 8012dcc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8012dce:	2329      	movs	r3, #41	@ 0x29
 8012dd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012dd2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012dd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012dd8:	2300      	movs	r3, #0
 8012dda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012ddc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012de0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012de2:	f107 0308 	add.w	r3, r7, #8
 8012de6:	4619      	mov	r1, r3
 8012de8:	6878      	ldr	r0, [r7, #4]
 8012dea:	f7ff fe03 	bl	80129f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8012dee:	6878      	ldr	r0, [r7, #4]
 8012df0:	f000 fa2e 	bl	8013250 <SDMMC_GetCmdResp3>
 8012df4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012df6:	69fb      	ldr	r3, [r7, #28]
}
 8012df8:	4618      	mov	r0, r3
 8012dfa:	3720      	adds	r7, #32
 8012dfc:	46bd      	mov	sp, r7
 8012dfe:	bd80      	pop	{r7, pc}

08012e00 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8012e00:	b580      	push	{r7, lr}
 8012e02:	b088      	sub	sp, #32
 8012e04:	af00      	add	r7, sp, #0
 8012e06:	6078      	str	r0, [r7, #4]
 8012e08:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8012e0a:	683b      	ldr	r3, [r7, #0]
 8012e0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8012e0e:	2306      	movs	r3, #6
 8012e10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012e12:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012e16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012e18:	2300      	movs	r3, #0
 8012e1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012e1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012e20:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012e22:	f107 0308 	add.w	r3, r7, #8
 8012e26:	4619      	mov	r1, r3
 8012e28:	6878      	ldr	r0, [r7, #4]
 8012e2a:	f7ff fde3 	bl	80129f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8012e2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012e32:	2106      	movs	r1, #6
 8012e34:	6878      	ldr	r0, [r7, #4]
 8012e36:	f000 f8cf 	bl	8012fd8 <SDMMC_GetCmdResp1>
 8012e3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012e3c:	69fb      	ldr	r3, [r7, #28]
}
 8012e3e:	4618      	mov	r0, r3
 8012e40:	3720      	adds	r7, #32
 8012e42:	46bd      	mov	sp, r7
 8012e44:	bd80      	pop	{r7, pc}

08012e46 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8012e46:	b580      	push	{r7, lr}
 8012e48:	b088      	sub	sp, #32
 8012e4a:	af00      	add	r7, sp, #0
 8012e4c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8012e4e:	2300      	movs	r3, #0
 8012e50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8012e52:	2333      	movs	r3, #51	@ 0x33
 8012e54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012e56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012e5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012e5c:	2300      	movs	r3, #0
 8012e5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012e60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012e64:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012e66:	f107 0308 	add.w	r3, r7, #8
 8012e6a:	4619      	mov	r1, r3
 8012e6c:	6878      	ldr	r0, [r7, #4]
 8012e6e:	f7ff fdc1 	bl	80129f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8012e72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012e76:	2133      	movs	r1, #51	@ 0x33
 8012e78:	6878      	ldr	r0, [r7, #4]
 8012e7a:	f000 f8ad 	bl	8012fd8 <SDMMC_GetCmdResp1>
 8012e7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012e80:	69fb      	ldr	r3, [r7, #28]
}
 8012e82:	4618      	mov	r0, r3
 8012e84:	3720      	adds	r7, #32
 8012e86:	46bd      	mov	sp, r7
 8012e88:	bd80      	pop	{r7, pc}

08012e8a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8012e8a:	b580      	push	{r7, lr}
 8012e8c:	b088      	sub	sp, #32
 8012e8e:	af00      	add	r7, sp, #0
 8012e90:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8012e92:	2300      	movs	r3, #0
 8012e94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8012e96:	2302      	movs	r3, #2
 8012e98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012e9a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8012e9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012ea0:	2300      	movs	r3, #0
 8012ea2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012ea4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012ea8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012eaa:	f107 0308 	add.w	r3, r7, #8
 8012eae:	4619      	mov	r1, r3
 8012eb0:	6878      	ldr	r0, [r7, #4]
 8012eb2:	f7ff fd9f 	bl	80129f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012eb6:	6878      	ldr	r0, [r7, #4]
 8012eb8:	f000 f980 	bl	80131bc <SDMMC_GetCmdResp2>
 8012ebc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012ebe:	69fb      	ldr	r3, [r7, #28]
}
 8012ec0:	4618      	mov	r0, r3
 8012ec2:	3720      	adds	r7, #32
 8012ec4:	46bd      	mov	sp, r7
 8012ec6:	bd80      	pop	{r7, pc}

08012ec8 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012ec8:	b580      	push	{r7, lr}
 8012eca:	b088      	sub	sp, #32
 8012ecc:	af00      	add	r7, sp, #0
 8012ece:	6078      	str	r0, [r7, #4]
 8012ed0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8012ed2:	683b      	ldr	r3, [r7, #0]
 8012ed4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8012ed6:	2309      	movs	r3, #9
 8012ed8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012eda:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8012ede:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012ee0:	2300      	movs	r3, #0
 8012ee2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012ee4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012ee8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012eea:	f107 0308 	add.w	r3, r7, #8
 8012eee:	4619      	mov	r1, r3
 8012ef0:	6878      	ldr	r0, [r7, #4]
 8012ef2:	f7ff fd7f 	bl	80129f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012ef6:	6878      	ldr	r0, [r7, #4]
 8012ef8:	f000 f960 	bl	80131bc <SDMMC_GetCmdResp2>
 8012efc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012efe:	69fb      	ldr	r3, [r7, #28]
}
 8012f00:	4618      	mov	r0, r3
 8012f02:	3720      	adds	r7, #32
 8012f04:	46bd      	mov	sp, r7
 8012f06:	bd80      	pop	{r7, pc}

08012f08 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8012f08:	b580      	push	{r7, lr}
 8012f0a:	b088      	sub	sp, #32
 8012f0c:	af00      	add	r7, sp, #0
 8012f0e:	6078      	str	r0, [r7, #4]
 8012f10:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8012f12:	2300      	movs	r3, #0
 8012f14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8012f16:	2303      	movs	r3, #3
 8012f18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012f1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012f1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012f20:	2300      	movs	r3, #0
 8012f22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012f24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012f28:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012f2a:	f107 0308 	add.w	r3, r7, #8
 8012f2e:	4619      	mov	r1, r3
 8012f30:	6878      	ldr	r0, [r7, #4]
 8012f32:	f7ff fd5f 	bl	80129f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8012f36:	683a      	ldr	r2, [r7, #0]
 8012f38:	2103      	movs	r1, #3
 8012f3a:	6878      	ldr	r0, [r7, #4]
 8012f3c:	f000 f9c8 	bl	80132d0 <SDMMC_GetCmdResp6>
 8012f40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012f42:	69fb      	ldr	r3, [r7, #28]
}
 8012f44:	4618      	mov	r0, r3
 8012f46:	3720      	adds	r7, #32
 8012f48:	46bd      	mov	sp, r7
 8012f4a:	bd80      	pop	{r7, pc}

08012f4c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012f4c:	b580      	push	{r7, lr}
 8012f4e:	b088      	sub	sp, #32
 8012f50:	af00      	add	r7, sp, #0
 8012f52:	6078      	str	r0, [r7, #4]
 8012f54:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8012f56:	683b      	ldr	r3, [r7, #0]
 8012f58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8012f5a:	230d      	movs	r3, #13
 8012f5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012f5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012f62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012f64:	2300      	movs	r3, #0
 8012f66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012f68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012f6c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012f6e:	f107 0308 	add.w	r3, r7, #8
 8012f72:	4619      	mov	r1, r3
 8012f74:	6878      	ldr	r0, [r7, #4]
 8012f76:	f7ff fd3d 	bl	80129f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8012f7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012f7e:	210d      	movs	r1, #13
 8012f80:	6878      	ldr	r0, [r7, #4]
 8012f82:	f000 f829 	bl	8012fd8 <SDMMC_GetCmdResp1>
 8012f86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012f88:	69fb      	ldr	r3, [r7, #28]
}
 8012f8a:	4618      	mov	r0, r3
 8012f8c:	3720      	adds	r7, #32
 8012f8e:	46bd      	mov	sp, r7
 8012f90:	bd80      	pop	{r7, pc}

08012f92 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8012f92:	b580      	push	{r7, lr}
 8012f94:	b088      	sub	sp, #32
 8012f96:	af00      	add	r7, sp, #0
 8012f98:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8012f9a:	2300      	movs	r3, #0
 8012f9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8012f9e:	230d      	movs	r3, #13
 8012fa0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012fa2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012fa6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012fa8:	2300      	movs	r3, #0
 8012faa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012fac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012fb0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012fb2:	f107 0308 	add.w	r3, r7, #8
 8012fb6:	4619      	mov	r1, r3
 8012fb8:	6878      	ldr	r0, [r7, #4]
 8012fba:	f7ff fd1b 	bl	80129f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8012fbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012fc2:	210d      	movs	r1, #13
 8012fc4:	6878      	ldr	r0, [r7, #4]
 8012fc6:	f000 f807 	bl	8012fd8 <SDMMC_GetCmdResp1>
 8012fca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012fcc:	69fb      	ldr	r3, [r7, #28]
}
 8012fce:	4618      	mov	r0, r3
 8012fd0:	3720      	adds	r7, #32
 8012fd2:	46bd      	mov	sp, r7
 8012fd4:	bd80      	pop	{r7, pc}
	...

08012fd8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8012fd8:	b580      	push	{r7, lr}
 8012fda:	b088      	sub	sp, #32
 8012fdc:	af00      	add	r7, sp, #0
 8012fde:	60f8      	str	r0, [r7, #12]
 8012fe0:	460b      	mov	r3, r1
 8012fe2:	607a      	str	r2, [r7, #4]
 8012fe4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8012fe6:	4b70      	ldr	r3, [pc, #448]	@ (80131a8 <SDMMC_GetCmdResp1+0x1d0>)
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	4a70      	ldr	r2, [pc, #448]	@ (80131ac <SDMMC_GetCmdResp1+0x1d4>)
 8012fec:	fba2 2303 	umull	r2, r3, r2, r3
 8012ff0:	0a5a      	lsrs	r2, r3, #9
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	fb02 f303 	mul.w	r3, r2, r3
 8012ff8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012ffa:	69fb      	ldr	r3, [r7, #28]
 8012ffc:	1e5a      	subs	r2, r3, #1
 8012ffe:	61fa      	str	r2, [r7, #28]
 8013000:	2b00      	cmp	r3, #0
 8013002:	d102      	bne.n	801300a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013004:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8013008:	e0c9      	b.n	801319e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 801300a:	68fb      	ldr	r3, [r7, #12]
 801300c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801300e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8013010:	69ba      	ldr	r2, [r7, #24]
 8013012:	4b67      	ldr	r3, [pc, #412]	@ (80131b0 <SDMMC_GetCmdResp1+0x1d8>)
 8013014:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013016:	2b00      	cmp	r3, #0
 8013018:	d0ef      	beq.n	8012ffa <SDMMC_GetCmdResp1+0x22>
 801301a:	69bb      	ldr	r3, [r7, #24]
 801301c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8013020:	2b00      	cmp	r3, #0
 8013022:	d1ea      	bne.n	8012ffa <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013028:	f003 0304 	and.w	r3, r3, #4
 801302c:	2b00      	cmp	r3, #0
 801302e:	d004      	beq.n	801303a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	2204      	movs	r2, #4
 8013034:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013036:	2304      	movs	r3, #4
 8013038:	e0b1      	b.n	801319e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801303e:	f003 0301 	and.w	r3, r3, #1
 8013042:	2b00      	cmp	r3, #0
 8013044:	d004      	beq.n	8013050 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	2201      	movs	r2, #1
 801304a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801304c:	2301      	movs	r3, #1
 801304e:	e0a6      	b.n	801319e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	4a58      	ldr	r2, [pc, #352]	@ (80131b4 <SDMMC_GetCmdResp1+0x1dc>)
 8013054:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8013056:	68f8      	ldr	r0, [r7, #12]
 8013058:	f7ff fcf6 	bl	8012a48 <SDMMC_GetCommandResponse>
 801305c:	4603      	mov	r3, r0
 801305e:	461a      	mov	r2, r3
 8013060:	7afb      	ldrb	r3, [r7, #11]
 8013062:	4293      	cmp	r3, r2
 8013064:	d001      	beq.n	801306a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013066:	2301      	movs	r3, #1
 8013068:	e099      	b.n	801319e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801306a:	2100      	movs	r1, #0
 801306c:	68f8      	ldr	r0, [r7, #12]
 801306e:	f7ff fcf8 	bl	8012a62 <SDMMC_GetResponse>
 8013072:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8013074:	697a      	ldr	r2, [r7, #20]
 8013076:	4b50      	ldr	r3, [pc, #320]	@ (80131b8 <SDMMC_GetCmdResp1+0x1e0>)
 8013078:	4013      	ands	r3, r2
 801307a:	2b00      	cmp	r3, #0
 801307c:	d101      	bne.n	8013082 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 801307e:	2300      	movs	r3, #0
 8013080:	e08d      	b.n	801319e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8013082:	697b      	ldr	r3, [r7, #20]
 8013084:	2b00      	cmp	r3, #0
 8013086:	da02      	bge.n	801308e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8013088:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 801308c:	e087      	b.n	801319e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801308e:	697b      	ldr	r3, [r7, #20]
 8013090:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8013094:	2b00      	cmp	r3, #0
 8013096:	d001      	beq.n	801309c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8013098:	2340      	movs	r3, #64	@ 0x40
 801309a:	e080      	b.n	801319e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 801309c:	697b      	ldr	r3, [r7, #20]
 801309e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d001      	beq.n	80130aa <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80130a6:	2380      	movs	r3, #128	@ 0x80
 80130a8:	e079      	b.n	801319e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80130aa:	697b      	ldr	r3, [r7, #20]
 80130ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d002      	beq.n	80130ba <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80130b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80130b8:	e071      	b.n	801319e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80130ba:	697b      	ldr	r3, [r7, #20]
 80130bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d002      	beq.n	80130ca <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80130c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80130c8:	e069      	b.n	801319e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80130ca:	697b      	ldr	r3, [r7, #20]
 80130cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d002      	beq.n	80130da <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80130d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80130d8:	e061      	b.n	801319e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80130da:	697b      	ldr	r3, [r7, #20]
 80130dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d002      	beq.n	80130ea <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80130e4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80130e8:	e059      	b.n	801319e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80130ea:	697b      	ldr	r3, [r7, #20]
 80130ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d002      	beq.n	80130fa <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80130f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80130f8:	e051      	b.n	801319e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80130fa:	697b      	ldr	r3, [r7, #20]
 80130fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8013100:	2b00      	cmp	r3, #0
 8013102:	d002      	beq.n	801310a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013104:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8013108:	e049      	b.n	801319e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801310a:	697b      	ldr	r3, [r7, #20]
 801310c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8013110:	2b00      	cmp	r3, #0
 8013112:	d002      	beq.n	801311a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8013114:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8013118:	e041      	b.n	801319e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801311a:	697b      	ldr	r3, [r7, #20]
 801311c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8013120:	2b00      	cmp	r3, #0
 8013122:	d002      	beq.n	801312a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8013124:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013128:	e039      	b.n	801319e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801312a:	697b      	ldr	r3, [r7, #20]
 801312c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8013130:	2b00      	cmp	r3, #0
 8013132:	d002      	beq.n	801313a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8013134:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8013138:	e031      	b.n	801319e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801313a:	697b      	ldr	r3, [r7, #20]
 801313c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013140:	2b00      	cmp	r3, #0
 8013142:	d002      	beq.n	801314a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8013144:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8013148:	e029      	b.n	801319e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801314a:	697b      	ldr	r3, [r7, #20]
 801314c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8013150:	2b00      	cmp	r3, #0
 8013152:	d002      	beq.n	801315a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8013154:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8013158:	e021      	b.n	801319e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801315a:	697b      	ldr	r3, [r7, #20]
 801315c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8013160:	2b00      	cmp	r3, #0
 8013162:	d002      	beq.n	801316a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8013164:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8013168:	e019      	b.n	801319e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801316a:	697b      	ldr	r3, [r7, #20]
 801316c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8013170:	2b00      	cmp	r3, #0
 8013172:	d002      	beq.n	801317a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8013174:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8013178:	e011      	b.n	801319e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801317a:	697b      	ldr	r3, [r7, #20]
 801317c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8013180:	2b00      	cmp	r3, #0
 8013182:	d002      	beq.n	801318a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8013184:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8013188:	e009      	b.n	801319e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801318a:	697b      	ldr	r3, [r7, #20]
 801318c:	f003 0308 	and.w	r3, r3, #8
 8013190:	2b00      	cmp	r3, #0
 8013192:	d002      	beq.n	801319a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8013194:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8013198:	e001      	b.n	801319e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801319a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 801319e:	4618      	mov	r0, r3
 80131a0:	3720      	adds	r7, #32
 80131a2:	46bd      	mov	sp, r7
 80131a4:	bd80      	pop	{r7, pc}
 80131a6:	bf00      	nop
 80131a8:	24000024 	.word	0x24000024
 80131ac:	10624dd3 	.word	0x10624dd3
 80131b0:	00200045 	.word	0x00200045
 80131b4:	002000c5 	.word	0x002000c5
 80131b8:	fdffe008 	.word	0xfdffe008

080131bc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80131bc:	b480      	push	{r7}
 80131be:	b085      	sub	sp, #20
 80131c0:	af00      	add	r7, sp, #0
 80131c2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80131c4:	4b1f      	ldr	r3, [pc, #124]	@ (8013244 <SDMMC_GetCmdResp2+0x88>)
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	4a1f      	ldr	r2, [pc, #124]	@ (8013248 <SDMMC_GetCmdResp2+0x8c>)
 80131ca:	fba2 2303 	umull	r2, r3, r2, r3
 80131ce:	0a5b      	lsrs	r3, r3, #9
 80131d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80131d4:	fb02 f303 	mul.w	r3, r2, r3
 80131d8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	1e5a      	subs	r2, r3, #1
 80131de:	60fa      	str	r2, [r7, #12]
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d102      	bne.n	80131ea <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80131e4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80131e8:	e026      	b.n	8013238 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80131ee:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80131f0:	68bb      	ldr	r3, [r7, #8]
 80131f2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d0ef      	beq.n	80131da <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80131fa:	68bb      	ldr	r3, [r7, #8]
 80131fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013200:	2b00      	cmp	r3, #0
 8013202:	d1ea      	bne.n	80131da <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013208:	f003 0304 	and.w	r3, r3, #4
 801320c:	2b00      	cmp	r3, #0
 801320e:	d004      	beq.n	801321a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	2204      	movs	r2, #4
 8013214:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013216:	2304      	movs	r3, #4
 8013218:	e00e      	b.n	8013238 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801321e:	f003 0301 	and.w	r3, r3, #1
 8013222:	2b00      	cmp	r3, #0
 8013224:	d004      	beq.n	8013230 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	2201      	movs	r2, #1
 801322a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801322c:	2301      	movs	r3, #1
 801322e:	e003      	b.n	8013238 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	4a06      	ldr	r2, [pc, #24]	@ (801324c <SDMMC_GetCmdResp2+0x90>)
 8013234:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8013236:	2300      	movs	r3, #0
}
 8013238:	4618      	mov	r0, r3
 801323a:	3714      	adds	r7, #20
 801323c:	46bd      	mov	sp, r7
 801323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013242:	4770      	bx	lr
 8013244:	24000024 	.word	0x24000024
 8013248:	10624dd3 	.word	0x10624dd3
 801324c:	002000c5 	.word	0x002000c5

08013250 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8013250:	b480      	push	{r7}
 8013252:	b085      	sub	sp, #20
 8013254:	af00      	add	r7, sp, #0
 8013256:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013258:	4b1a      	ldr	r3, [pc, #104]	@ (80132c4 <SDMMC_GetCmdResp3+0x74>)
 801325a:	681b      	ldr	r3, [r3, #0]
 801325c:	4a1a      	ldr	r2, [pc, #104]	@ (80132c8 <SDMMC_GetCmdResp3+0x78>)
 801325e:	fba2 2303 	umull	r2, r3, r2, r3
 8013262:	0a5b      	lsrs	r3, r3, #9
 8013264:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013268:	fb02 f303 	mul.w	r3, r2, r3
 801326c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	1e5a      	subs	r2, r3, #1
 8013272:	60fa      	str	r2, [r7, #12]
 8013274:	2b00      	cmp	r3, #0
 8013276:	d102      	bne.n	801327e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013278:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801327c:	e01b      	b.n	80132b6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013282:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013284:	68bb      	ldr	r3, [r7, #8]
 8013286:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801328a:	2b00      	cmp	r3, #0
 801328c:	d0ef      	beq.n	801326e <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801328e:	68bb      	ldr	r3, [r7, #8]
 8013290:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013294:	2b00      	cmp	r3, #0
 8013296:	d1ea      	bne.n	801326e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801329c:	f003 0304 	and.w	r3, r3, #4
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d004      	beq.n	80132ae <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	2204      	movs	r2, #4
 80132a8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80132aa:	2304      	movs	r3, #4
 80132ac:	e003      	b.n	80132b6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	4a06      	ldr	r2, [pc, #24]	@ (80132cc <SDMMC_GetCmdResp3+0x7c>)
 80132b2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80132b4:	2300      	movs	r3, #0
}
 80132b6:	4618      	mov	r0, r3
 80132b8:	3714      	adds	r7, #20
 80132ba:	46bd      	mov	sp, r7
 80132bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132c0:	4770      	bx	lr
 80132c2:	bf00      	nop
 80132c4:	24000024 	.word	0x24000024
 80132c8:	10624dd3 	.word	0x10624dd3
 80132cc:	002000c5 	.word	0x002000c5

080132d0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80132d0:	b580      	push	{r7, lr}
 80132d2:	b088      	sub	sp, #32
 80132d4:	af00      	add	r7, sp, #0
 80132d6:	60f8      	str	r0, [r7, #12]
 80132d8:	460b      	mov	r3, r1
 80132da:	607a      	str	r2, [r7, #4]
 80132dc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80132de:	4b35      	ldr	r3, [pc, #212]	@ (80133b4 <SDMMC_GetCmdResp6+0xe4>)
 80132e0:	681b      	ldr	r3, [r3, #0]
 80132e2:	4a35      	ldr	r2, [pc, #212]	@ (80133b8 <SDMMC_GetCmdResp6+0xe8>)
 80132e4:	fba2 2303 	umull	r2, r3, r2, r3
 80132e8:	0a5b      	lsrs	r3, r3, #9
 80132ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80132ee:	fb02 f303 	mul.w	r3, r2, r3
 80132f2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80132f4:	69fb      	ldr	r3, [r7, #28]
 80132f6:	1e5a      	subs	r2, r3, #1
 80132f8:	61fa      	str	r2, [r7, #28]
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d102      	bne.n	8013304 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80132fe:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8013302:	e052      	b.n	80133aa <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013308:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801330a:	69bb      	ldr	r3, [r7, #24]
 801330c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8013310:	2b00      	cmp	r3, #0
 8013312:	d0ef      	beq.n	80132f4 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013314:	69bb      	ldr	r3, [r7, #24]
 8013316:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801331a:	2b00      	cmp	r3, #0
 801331c:	d1ea      	bne.n	80132f4 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013322:	f003 0304 	and.w	r3, r3, #4
 8013326:	2b00      	cmp	r3, #0
 8013328:	d004      	beq.n	8013334 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	2204      	movs	r2, #4
 801332e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013330:	2304      	movs	r3, #4
 8013332:	e03a      	b.n	80133aa <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013338:	f003 0301 	and.w	r3, r3, #1
 801333c:	2b00      	cmp	r3, #0
 801333e:	d004      	beq.n	801334a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	2201      	movs	r2, #1
 8013344:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013346:	2301      	movs	r3, #1
 8013348:	e02f      	b.n	80133aa <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801334a:	68f8      	ldr	r0, [r7, #12]
 801334c:	f7ff fb7c 	bl	8012a48 <SDMMC_GetCommandResponse>
 8013350:	4603      	mov	r3, r0
 8013352:	461a      	mov	r2, r3
 8013354:	7afb      	ldrb	r3, [r7, #11]
 8013356:	4293      	cmp	r3, r2
 8013358:	d001      	beq.n	801335e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801335a:	2301      	movs	r3, #1
 801335c:	e025      	b.n	80133aa <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	4a16      	ldr	r2, [pc, #88]	@ (80133bc <SDMMC_GetCmdResp6+0xec>)
 8013362:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8013364:	2100      	movs	r1, #0
 8013366:	68f8      	ldr	r0, [r7, #12]
 8013368:	f7ff fb7b 	bl	8012a62 <SDMMC_GetResponse>
 801336c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 801336e:	697b      	ldr	r3, [r7, #20]
 8013370:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8013374:	2b00      	cmp	r3, #0
 8013376:	d106      	bne.n	8013386 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8013378:	697b      	ldr	r3, [r7, #20]
 801337a:	0c1b      	lsrs	r3, r3, #16
 801337c:	b29a      	uxth	r2, r3
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8013382:	2300      	movs	r3, #0
 8013384:	e011      	b.n	80133aa <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8013386:	697b      	ldr	r3, [r7, #20]
 8013388:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801338c:	2b00      	cmp	r3, #0
 801338e:	d002      	beq.n	8013396 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013390:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8013394:	e009      	b.n	80133aa <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8013396:	697b      	ldr	r3, [r7, #20]
 8013398:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801339c:	2b00      	cmp	r3, #0
 801339e:	d002      	beq.n	80133a6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80133a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80133a4:	e001      	b.n	80133aa <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80133a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80133aa:	4618      	mov	r0, r3
 80133ac:	3720      	adds	r7, #32
 80133ae:	46bd      	mov	sp, r7
 80133b0:	bd80      	pop	{r7, pc}
 80133b2:	bf00      	nop
 80133b4:	24000024 	.word	0x24000024
 80133b8:	10624dd3 	.word	0x10624dd3
 80133bc:	002000c5 	.word	0x002000c5

080133c0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80133c0:	b480      	push	{r7}
 80133c2:	b085      	sub	sp, #20
 80133c4:	af00      	add	r7, sp, #0
 80133c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80133c8:	4b22      	ldr	r3, [pc, #136]	@ (8013454 <SDMMC_GetCmdResp7+0x94>)
 80133ca:	681b      	ldr	r3, [r3, #0]
 80133cc:	4a22      	ldr	r2, [pc, #136]	@ (8013458 <SDMMC_GetCmdResp7+0x98>)
 80133ce:	fba2 2303 	umull	r2, r3, r2, r3
 80133d2:	0a5b      	lsrs	r3, r3, #9
 80133d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80133d8:	fb02 f303 	mul.w	r3, r2, r3
 80133dc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	1e5a      	subs	r2, r3, #1
 80133e2:	60fa      	str	r2, [r7, #12]
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d102      	bne.n	80133ee <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80133e8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80133ec:	e02c      	b.n	8013448 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80133f2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80133f4:	68bb      	ldr	r3, [r7, #8]
 80133f6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d0ef      	beq.n	80133de <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80133fe:	68bb      	ldr	r3, [r7, #8]
 8013400:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013404:	2b00      	cmp	r3, #0
 8013406:	d1ea      	bne.n	80133de <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801340c:	f003 0304 	and.w	r3, r3, #4
 8013410:	2b00      	cmp	r3, #0
 8013412:	d004      	beq.n	801341e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	2204      	movs	r2, #4
 8013418:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801341a:	2304      	movs	r3, #4
 801341c:	e014      	b.n	8013448 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013422:	f003 0301 	and.w	r3, r3, #1
 8013426:	2b00      	cmp	r3, #0
 8013428:	d004      	beq.n	8013434 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	2201      	movs	r2, #1
 801342e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013430:	2301      	movs	r3, #1
 8013432:	e009      	b.n	8013448 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801343c:	2b00      	cmp	r3, #0
 801343e:	d002      	beq.n	8013446 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	2240      	movs	r2, #64	@ 0x40
 8013444:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8013446:	2300      	movs	r3, #0

}
 8013448:	4618      	mov	r0, r3
 801344a:	3714      	adds	r7, #20
 801344c:	46bd      	mov	sp, r7
 801344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013452:	4770      	bx	lr
 8013454:	24000024 	.word	0x24000024
 8013458:	10624dd3 	.word	0x10624dd3

0801345c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 801345c:	b480      	push	{r7}
 801345e:	b085      	sub	sp, #20
 8013460:	af00      	add	r7, sp, #0
 8013462:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013464:	4b11      	ldr	r3, [pc, #68]	@ (80134ac <SDMMC_GetCmdError+0x50>)
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	4a11      	ldr	r2, [pc, #68]	@ (80134b0 <SDMMC_GetCmdError+0x54>)
 801346a:	fba2 2303 	umull	r2, r3, r2, r3
 801346e:	0a5b      	lsrs	r3, r3, #9
 8013470:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013474:	fb02 f303 	mul.w	r3, r2, r3
 8013478:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	1e5a      	subs	r2, r3, #1
 801347e:	60fa      	str	r2, [r7, #12]
 8013480:	2b00      	cmp	r3, #0
 8013482:	d102      	bne.n	801348a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013484:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8013488:	e009      	b.n	801349e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801348e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013492:	2b00      	cmp	r3, #0
 8013494:	d0f1      	beq.n	801347a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	4a06      	ldr	r2, [pc, #24]	@ (80134b4 <SDMMC_GetCmdError+0x58>)
 801349a:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 801349c:	2300      	movs	r3, #0
}
 801349e:	4618      	mov	r0, r3
 80134a0:	3714      	adds	r7, #20
 80134a2:	46bd      	mov	sp, r7
 80134a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134a8:	4770      	bx	lr
 80134aa:	bf00      	nop
 80134ac:	24000024 	.word	0x24000024
 80134b0:	10624dd3 	.word	0x10624dd3
 80134b4:	002000c5 	.word	0x002000c5

080134b8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80134b8:	b580      	push	{r7, lr}
 80134ba:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80134bc:	4904      	ldr	r1, [pc, #16]	@ (80134d0 <MX_FATFS_Init+0x18>)
 80134be:	4805      	ldr	r0, [pc, #20]	@ (80134d4 <MX_FATFS_Init+0x1c>)
 80134c0:	f000 fa8e 	bl	80139e0 <FATFS_LinkDriver>
 80134c4:	4603      	mov	r3, r0
 80134c6:	461a      	mov	r2, r3
 80134c8:	4b03      	ldr	r3, [pc, #12]	@ (80134d8 <MX_FATFS_Init+0x20>)
 80134ca:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80134cc:	bf00      	nop
 80134ce:	bd80      	pop	{r7, pc}
 80134d0:	24000960 	.word	0x24000960
 80134d4:	080148c0 	.word	0x080148c0
 80134d8:	2400095c 	.word	0x2400095c

080134dc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80134dc:	b580      	push	{r7, lr}
 80134de:	b082      	sub	sp, #8
 80134e0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80134e2:	2300      	movs	r3, #0
 80134e4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80134e6:	f000 f885 	bl	80135f4 <BSP_SD_IsDetected>
 80134ea:	4603      	mov	r3, r0
 80134ec:	2b01      	cmp	r3, #1
 80134ee:	d001      	beq.n	80134f4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80134f0:	2302      	movs	r3, #2
 80134f2:	e012      	b.n	801351a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80134f4:	480b      	ldr	r0, [pc, #44]	@ (8013524 <BSP_SD_Init+0x48>)
 80134f6:	f7f9 ffb7 	bl	800d468 <HAL_SD_Init>
 80134fa:	4603      	mov	r3, r0
 80134fc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80134fe:	79fb      	ldrb	r3, [r7, #7]
 8013500:	2b00      	cmp	r3, #0
 8013502:	d109      	bne.n	8013518 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8013504:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8013508:	4806      	ldr	r0, [pc, #24]	@ (8013524 <BSP_SD_Init+0x48>)
 801350a:	f7fa fe6d 	bl	800e1e8 <HAL_SD_ConfigWideBusOperation>
 801350e:	4603      	mov	r3, r0
 8013510:	2b00      	cmp	r3, #0
 8013512:	d001      	beq.n	8013518 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8013514:	2301      	movs	r3, #1
 8013516:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8013518:	79fb      	ldrb	r3, [r7, #7]
}
 801351a:	4618      	mov	r0, r3
 801351c:	3708      	adds	r7, #8
 801351e:	46bd      	mov	sp, r7
 8013520:	bd80      	pop	{r7, pc}
 8013522:	bf00      	nop
 8013524:	240003e4 	.word	0x240003e4

08013528 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8013528:	b580      	push	{r7, lr}
 801352a:	b086      	sub	sp, #24
 801352c:	af00      	add	r7, sp, #0
 801352e:	60f8      	str	r0, [r7, #12]
 8013530:	60b9      	str	r1, [r7, #8]
 8013532:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8013534:	2300      	movs	r3, #0
 8013536:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	68ba      	ldr	r2, [r7, #8]
 801353c:	68f9      	ldr	r1, [r7, #12]
 801353e:	4806      	ldr	r0, [pc, #24]	@ (8013558 <BSP_SD_ReadBlocks_DMA+0x30>)
 8013540:	f7fa f8b2 	bl	800d6a8 <HAL_SD_ReadBlocks_DMA>
 8013544:	4603      	mov	r3, r0
 8013546:	2b00      	cmp	r3, #0
 8013548:	d001      	beq.n	801354e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801354a:	2301      	movs	r3, #1
 801354c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801354e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013550:	4618      	mov	r0, r3
 8013552:	3718      	adds	r7, #24
 8013554:	46bd      	mov	sp, r7
 8013556:	bd80      	pop	{r7, pc}
 8013558:	240003e4 	.word	0x240003e4

0801355c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 801355c:	b580      	push	{r7, lr}
 801355e:	b086      	sub	sp, #24
 8013560:	af00      	add	r7, sp, #0
 8013562:	60f8      	str	r0, [r7, #12]
 8013564:	60b9      	str	r1, [r7, #8]
 8013566:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8013568:	2300      	movs	r3, #0
 801356a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	68ba      	ldr	r2, [r7, #8]
 8013570:	68f9      	ldr	r1, [r7, #12]
 8013572:	4806      	ldr	r0, [pc, #24]	@ (801358c <BSP_SD_WriteBlocks_DMA+0x30>)
 8013574:	f7fa f940 	bl	800d7f8 <HAL_SD_WriteBlocks_DMA>
 8013578:	4603      	mov	r3, r0
 801357a:	2b00      	cmp	r3, #0
 801357c:	d001      	beq.n	8013582 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801357e:	2301      	movs	r3, #1
 8013580:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013582:	7dfb      	ldrb	r3, [r7, #23]
}
 8013584:	4618      	mov	r0, r3
 8013586:	3718      	adds	r7, #24
 8013588:	46bd      	mov	sp, r7
 801358a:	bd80      	pop	{r7, pc}
 801358c:	240003e4 	.word	0x240003e4

08013590 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8013590:	b580      	push	{r7, lr}
 8013592:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8013594:	4805      	ldr	r0, [pc, #20]	@ (80135ac <BSP_SD_GetCardState+0x1c>)
 8013596:	f7fa ff39 	bl	800e40c <HAL_SD_GetCardState>
 801359a:	4603      	mov	r3, r0
 801359c:	2b04      	cmp	r3, #4
 801359e:	bf14      	ite	ne
 80135a0:	2301      	movne	r3, #1
 80135a2:	2300      	moveq	r3, #0
 80135a4:	b2db      	uxtb	r3, r3
}
 80135a6:	4618      	mov	r0, r3
 80135a8:	bd80      	pop	{r7, pc}
 80135aa:	bf00      	nop
 80135ac:	240003e4 	.word	0x240003e4

080135b0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80135b0:	b580      	push	{r7, lr}
 80135b2:	b082      	sub	sp, #8
 80135b4:	af00      	add	r7, sp, #0
 80135b6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80135b8:	6879      	ldr	r1, [r7, #4]
 80135ba:	4803      	ldr	r0, [pc, #12]	@ (80135c8 <BSP_SD_GetCardInfo+0x18>)
 80135bc:	f7fa fde8 	bl	800e190 <HAL_SD_GetCardInfo>
}
 80135c0:	bf00      	nop
 80135c2:	3708      	adds	r7, #8
 80135c4:	46bd      	mov	sp, r7
 80135c6:	bd80      	pop	{r7, pc}
 80135c8:	240003e4 	.word	0x240003e4

080135cc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80135cc:	b580      	push	{r7, lr}
 80135ce:	b082      	sub	sp, #8
 80135d0:	af00      	add	r7, sp, #0
 80135d2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80135d4:	f000 f9a0 	bl	8013918 <BSP_SD_WriteCpltCallback>
}
 80135d8:	bf00      	nop
 80135da:	3708      	adds	r7, #8
 80135dc:	46bd      	mov	sp, r7
 80135de:	bd80      	pop	{r7, pc}

080135e0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80135e0:	b580      	push	{r7, lr}
 80135e2:	b082      	sub	sp, #8
 80135e4:	af00      	add	r7, sp, #0
 80135e6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80135e8:	f000 f9a2 	bl	8013930 <BSP_SD_ReadCpltCallback>
}
 80135ec:	bf00      	nop
 80135ee:	3708      	adds	r7, #8
 80135f0:	46bd      	mov	sp, r7
 80135f2:	bd80      	pop	{r7, pc}

080135f4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80135f4:	b580      	push	{r7, lr}
 80135f6:	b082      	sub	sp, #8
 80135f8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80135fa:	2301      	movs	r3, #1
 80135fc:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80135fe:	f000 f80b 	bl	8013618 <BSP_PlatformIsDetected>
 8013602:	4603      	mov	r3, r0
 8013604:	2b00      	cmp	r3, #0
 8013606:	d101      	bne.n	801360c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8013608:	2300      	movs	r3, #0
 801360a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 801360c:	79fb      	ldrb	r3, [r7, #7]
 801360e:	b2db      	uxtb	r3, r3
}
 8013610:	4618      	mov	r0, r3
 8013612:	3708      	adds	r7, #8
 8013614:	46bd      	mov	sp, r7
 8013616:	bd80      	pop	{r7, pc}

08013618 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8013618:	b580      	push	{r7, lr}
 801361a:	b082      	sub	sp, #8
 801361c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801361e:	2301      	movs	r3, #1
 8013620:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8013622:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8013626:	4806      	ldr	r0, [pc, #24]	@ (8013640 <BSP_PlatformIsDetected+0x28>)
 8013628:	f7f6 fb66 	bl	8009cf8 <HAL_GPIO_ReadPin>
 801362c:	4603      	mov	r3, r0
 801362e:	2b00      	cmp	r3, #0
 8013630:	d001      	beq.n	8013636 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8013632:	2300      	movs	r3, #0
 8013634:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8013636:	79fb      	ldrb	r3, [r7, #7]
}
 8013638:	4618      	mov	r0, r3
 801363a:	3708      	adds	r7, #8
 801363c:	46bd      	mov	sp, r7
 801363e:	bd80      	pop	{r7, pc}
 8013640:	58021400 	.word	0x58021400

08013644 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8013644:	b580      	push	{r7, lr}
 8013646:	b084      	sub	sp, #16
 8013648:	af00      	add	r7, sp, #0
 801364a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 801364c:	f7f0 f9cc 	bl	80039e8 <HAL_GetTick>
 8013650:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8013652:	e006      	b.n	8013662 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013654:	f7ff ff9c 	bl	8013590 <BSP_SD_GetCardState>
 8013658:	4603      	mov	r3, r0
 801365a:	2b00      	cmp	r3, #0
 801365c:	d101      	bne.n	8013662 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801365e:	2300      	movs	r3, #0
 8013660:	e009      	b.n	8013676 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8013662:	f7f0 f9c1 	bl	80039e8 <HAL_GetTick>
 8013666:	4602      	mov	r2, r0
 8013668:	68fb      	ldr	r3, [r7, #12]
 801366a:	1ad3      	subs	r3, r2, r3
 801366c:	687a      	ldr	r2, [r7, #4]
 801366e:	429a      	cmp	r2, r3
 8013670:	d8f0      	bhi.n	8013654 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8013672:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013676:	4618      	mov	r0, r3
 8013678:	3710      	adds	r7, #16
 801367a:	46bd      	mov	sp, r7
 801367c:	bd80      	pop	{r7, pc}
	...

08013680 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8013680:	b580      	push	{r7, lr}
 8013682:	b082      	sub	sp, #8
 8013684:	af00      	add	r7, sp, #0
 8013686:	4603      	mov	r3, r0
 8013688:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801368a:	4b0b      	ldr	r3, [pc, #44]	@ (80136b8 <SD_CheckStatus+0x38>)
 801368c:	2201      	movs	r2, #1
 801368e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8013690:	f7ff ff7e 	bl	8013590 <BSP_SD_GetCardState>
 8013694:	4603      	mov	r3, r0
 8013696:	2b00      	cmp	r3, #0
 8013698:	d107      	bne.n	80136aa <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801369a:	4b07      	ldr	r3, [pc, #28]	@ (80136b8 <SD_CheckStatus+0x38>)
 801369c:	781b      	ldrb	r3, [r3, #0]
 801369e:	b2db      	uxtb	r3, r3
 80136a0:	f023 0301 	bic.w	r3, r3, #1
 80136a4:	b2da      	uxtb	r2, r3
 80136a6:	4b04      	ldr	r3, [pc, #16]	@ (80136b8 <SD_CheckStatus+0x38>)
 80136a8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80136aa:	4b03      	ldr	r3, [pc, #12]	@ (80136b8 <SD_CheckStatus+0x38>)
 80136ac:	781b      	ldrb	r3, [r3, #0]
 80136ae:	b2db      	uxtb	r3, r3
}
 80136b0:	4618      	mov	r0, r3
 80136b2:	3708      	adds	r7, #8
 80136b4:	46bd      	mov	sp, r7
 80136b6:	bd80      	pop	{r7, pc}
 80136b8:	24000031 	.word	0x24000031

080136bc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80136bc:	b580      	push	{r7, lr}
 80136be:	b082      	sub	sp, #8
 80136c0:	af00      	add	r7, sp, #0
 80136c2:	4603      	mov	r3, r0
 80136c4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80136c6:	f7ff ff09 	bl	80134dc <BSP_SD_Init>
 80136ca:	4603      	mov	r3, r0
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d107      	bne.n	80136e0 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80136d0:	79fb      	ldrb	r3, [r7, #7]
 80136d2:	4618      	mov	r0, r3
 80136d4:	f7ff ffd4 	bl	8013680 <SD_CheckStatus>
 80136d8:	4603      	mov	r3, r0
 80136da:	461a      	mov	r2, r3
 80136dc:	4b04      	ldr	r3, [pc, #16]	@ (80136f0 <SD_initialize+0x34>)
 80136de:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80136e0:	4b03      	ldr	r3, [pc, #12]	@ (80136f0 <SD_initialize+0x34>)
 80136e2:	781b      	ldrb	r3, [r3, #0]
 80136e4:	b2db      	uxtb	r3, r3
}
 80136e6:	4618      	mov	r0, r3
 80136e8:	3708      	adds	r7, #8
 80136ea:	46bd      	mov	sp, r7
 80136ec:	bd80      	pop	{r7, pc}
 80136ee:	bf00      	nop
 80136f0:	24000031 	.word	0x24000031

080136f4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80136f4:	b580      	push	{r7, lr}
 80136f6:	b082      	sub	sp, #8
 80136f8:	af00      	add	r7, sp, #0
 80136fa:	4603      	mov	r3, r0
 80136fc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80136fe:	79fb      	ldrb	r3, [r7, #7]
 8013700:	4618      	mov	r0, r3
 8013702:	f7ff ffbd 	bl	8013680 <SD_CheckStatus>
 8013706:	4603      	mov	r3, r0
}
 8013708:	4618      	mov	r0, r3
 801370a:	3708      	adds	r7, #8
 801370c:	46bd      	mov	sp, r7
 801370e:	bd80      	pop	{r7, pc}

08013710 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8013710:	b580      	push	{r7, lr}
 8013712:	b086      	sub	sp, #24
 8013714:	af00      	add	r7, sp, #0
 8013716:	60b9      	str	r1, [r7, #8]
 8013718:	607a      	str	r2, [r7, #4]
 801371a:	603b      	str	r3, [r7, #0]
 801371c:	4603      	mov	r3, r0
 801371e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013720:	2301      	movs	r3, #1
 8013722:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8013724:	f247 5030 	movw	r0, #30000	@ 0x7530
 8013728:	f7ff ff8c 	bl	8013644 <SD_CheckStatusWithTimeout>
 801372c:	4603      	mov	r3, r0
 801372e:	2b00      	cmp	r3, #0
 8013730:	da01      	bge.n	8013736 <SD_read+0x26>
  {
    return res;
 8013732:	7dfb      	ldrb	r3, [r7, #23]
 8013734:	e03b      	b.n	80137ae <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8013736:	683a      	ldr	r2, [r7, #0]
 8013738:	6879      	ldr	r1, [r7, #4]
 801373a:	68b8      	ldr	r0, [r7, #8]
 801373c:	f7ff fef4 	bl	8013528 <BSP_SD_ReadBlocks_DMA>
 8013740:	4603      	mov	r3, r0
 8013742:	2b00      	cmp	r3, #0
 8013744:	d132      	bne.n	80137ac <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8013746:	4b1c      	ldr	r3, [pc, #112]	@ (80137b8 <SD_read+0xa8>)
 8013748:	2200      	movs	r2, #0
 801374a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 801374c:	f7f0 f94c 	bl	80039e8 <HAL_GetTick>
 8013750:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8013752:	bf00      	nop
 8013754:	4b18      	ldr	r3, [pc, #96]	@ (80137b8 <SD_read+0xa8>)
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	2b00      	cmp	r3, #0
 801375a:	d108      	bne.n	801376e <SD_read+0x5e>
 801375c:	f7f0 f944 	bl	80039e8 <HAL_GetTick>
 8013760:	4602      	mov	r2, r0
 8013762:	693b      	ldr	r3, [r7, #16]
 8013764:	1ad3      	subs	r3, r2, r3
 8013766:	f247 522f 	movw	r2, #29999	@ 0x752f
 801376a:	4293      	cmp	r3, r2
 801376c:	d9f2      	bls.n	8013754 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 801376e:	4b12      	ldr	r3, [pc, #72]	@ (80137b8 <SD_read+0xa8>)
 8013770:	681b      	ldr	r3, [r3, #0]
 8013772:	2b00      	cmp	r3, #0
 8013774:	d102      	bne.n	801377c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8013776:	2301      	movs	r3, #1
 8013778:	75fb      	strb	r3, [r7, #23]
 801377a:	e017      	b.n	80137ac <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 801377c:	4b0e      	ldr	r3, [pc, #56]	@ (80137b8 <SD_read+0xa8>)
 801377e:	2200      	movs	r2, #0
 8013780:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8013782:	f7f0 f931 	bl	80039e8 <HAL_GetTick>
 8013786:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8013788:	e007      	b.n	801379a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801378a:	f7ff ff01 	bl	8013590 <BSP_SD_GetCardState>
 801378e:	4603      	mov	r3, r0
 8013790:	2b00      	cmp	r3, #0
 8013792:	d102      	bne.n	801379a <SD_read+0x8a>
          {
            res = RES_OK;
 8013794:	2300      	movs	r3, #0
 8013796:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8013798:	e008      	b.n	80137ac <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801379a:	f7f0 f925 	bl	80039e8 <HAL_GetTick>
 801379e:	4602      	mov	r2, r0
 80137a0:	693b      	ldr	r3, [r7, #16]
 80137a2:	1ad3      	subs	r3, r2, r3
 80137a4:	f247 522f 	movw	r2, #29999	@ 0x752f
 80137a8:	4293      	cmp	r3, r2
 80137aa:	d9ee      	bls.n	801378a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80137ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80137ae:	4618      	mov	r0, r3
 80137b0:	3718      	adds	r7, #24
 80137b2:	46bd      	mov	sp, r7
 80137b4:	bd80      	pop	{r7, pc}
 80137b6:	bf00      	nop
 80137b8:	24000968 	.word	0x24000968

080137bc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80137bc:	b580      	push	{r7, lr}
 80137be:	b086      	sub	sp, #24
 80137c0:	af00      	add	r7, sp, #0
 80137c2:	60b9      	str	r1, [r7, #8]
 80137c4:	607a      	str	r2, [r7, #4]
 80137c6:	603b      	str	r3, [r7, #0]
 80137c8:	4603      	mov	r3, r0
 80137ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80137cc:	2301      	movs	r3, #1
 80137ce:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80137d0:	4b24      	ldr	r3, [pc, #144]	@ (8013864 <SD_write+0xa8>)
 80137d2:	2200      	movs	r2, #0
 80137d4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80137d6:	f247 5030 	movw	r0, #30000	@ 0x7530
 80137da:	f7ff ff33 	bl	8013644 <SD_CheckStatusWithTimeout>
 80137de:	4603      	mov	r3, r0
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	da01      	bge.n	80137e8 <SD_write+0x2c>
  {
    return res;
 80137e4:	7dfb      	ldrb	r3, [r7, #23]
 80137e6:	e038      	b.n	801385a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80137e8:	683a      	ldr	r2, [r7, #0]
 80137ea:	6879      	ldr	r1, [r7, #4]
 80137ec:	68b8      	ldr	r0, [r7, #8]
 80137ee:	f7ff feb5 	bl	801355c <BSP_SD_WriteBlocks_DMA>
 80137f2:	4603      	mov	r3, r0
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d12f      	bne.n	8013858 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80137f8:	f7f0 f8f6 	bl	80039e8 <HAL_GetTick>
 80137fc:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80137fe:	bf00      	nop
 8013800:	4b18      	ldr	r3, [pc, #96]	@ (8013864 <SD_write+0xa8>)
 8013802:	681b      	ldr	r3, [r3, #0]
 8013804:	2b00      	cmp	r3, #0
 8013806:	d108      	bne.n	801381a <SD_write+0x5e>
 8013808:	f7f0 f8ee 	bl	80039e8 <HAL_GetTick>
 801380c:	4602      	mov	r2, r0
 801380e:	693b      	ldr	r3, [r7, #16]
 8013810:	1ad3      	subs	r3, r2, r3
 8013812:	f247 522f 	movw	r2, #29999	@ 0x752f
 8013816:	4293      	cmp	r3, r2
 8013818:	d9f2      	bls.n	8013800 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 801381a:	4b12      	ldr	r3, [pc, #72]	@ (8013864 <SD_write+0xa8>)
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	2b00      	cmp	r3, #0
 8013820:	d102      	bne.n	8013828 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8013822:	2301      	movs	r3, #1
 8013824:	75fb      	strb	r3, [r7, #23]
 8013826:	e017      	b.n	8013858 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8013828:	4b0e      	ldr	r3, [pc, #56]	@ (8013864 <SD_write+0xa8>)
 801382a:	2200      	movs	r2, #0
 801382c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801382e:	f7f0 f8db 	bl	80039e8 <HAL_GetTick>
 8013832:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8013834:	e007      	b.n	8013846 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013836:	f7ff feab 	bl	8013590 <BSP_SD_GetCardState>
 801383a:	4603      	mov	r3, r0
 801383c:	2b00      	cmp	r3, #0
 801383e:	d102      	bne.n	8013846 <SD_write+0x8a>
          {
            res = RES_OK;
 8013840:	2300      	movs	r3, #0
 8013842:	75fb      	strb	r3, [r7, #23]
            break;
 8013844:	e008      	b.n	8013858 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8013846:	f7f0 f8cf 	bl	80039e8 <HAL_GetTick>
 801384a:	4602      	mov	r2, r0
 801384c:	693b      	ldr	r3, [r7, #16]
 801384e:	1ad3      	subs	r3, r2, r3
 8013850:	f247 522f 	movw	r2, #29999	@ 0x752f
 8013854:	4293      	cmp	r3, r2
 8013856:	d9ee      	bls.n	8013836 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8013858:	7dfb      	ldrb	r3, [r7, #23]
}
 801385a:	4618      	mov	r0, r3
 801385c:	3718      	adds	r7, #24
 801385e:	46bd      	mov	sp, r7
 8013860:	bd80      	pop	{r7, pc}
 8013862:	bf00      	nop
 8013864:	24000964 	.word	0x24000964

08013868 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8013868:	b580      	push	{r7, lr}
 801386a:	b08c      	sub	sp, #48	@ 0x30
 801386c:	af00      	add	r7, sp, #0
 801386e:	4603      	mov	r3, r0
 8013870:	603a      	str	r2, [r7, #0]
 8013872:	71fb      	strb	r3, [r7, #7]
 8013874:	460b      	mov	r3, r1
 8013876:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8013878:	2301      	movs	r3, #1
 801387a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801387e:	4b25      	ldr	r3, [pc, #148]	@ (8013914 <SD_ioctl+0xac>)
 8013880:	781b      	ldrb	r3, [r3, #0]
 8013882:	b2db      	uxtb	r3, r3
 8013884:	f003 0301 	and.w	r3, r3, #1
 8013888:	2b00      	cmp	r3, #0
 801388a:	d001      	beq.n	8013890 <SD_ioctl+0x28>
 801388c:	2303      	movs	r3, #3
 801388e:	e03c      	b.n	801390a <SD_ioctl+0xa2>

  switch (cmd)
 8013890:	79bb      	ldrb	r3, [r7, #6]
 8013892:	2b03      	cmp	r3, #3
 8013894:	d834      	bhi.n	8013900 <SD_ioctl+0x98>
 8013896:	a201      	add	r2, pc, #4	@ (adr r2, 801389c <SD_ioctl+0x34>)
 8013898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801389c:	080138ad 	.word	0x080138ad
 80138a0:	080138b5 	.word	0x080138b5
 80138a4:	080138cd 	.word	0x080138cd
 80138a8:	080138e7 	.word	0x080138e7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80138ac:	2300      	movs	r3, #0
 80138ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80138b2:	e028      	b.n	8013906 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80138b4:	f107 0308 	add.w	r3, r7, #8
 80138b8:	4618      	mov	r0, r3
 80138ba:	f7ff fe79 	bl	80135b0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80138be:	6a3a      	ldr	r2, [r7, #32]
 80138c0:	683b      	ldr	r3, [r7, #0]
 80138c2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80138c4:	2300      	movs	r3, #0
 80138c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80138ca:	e01c      	b.n	8013906 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80138cc:	f107 0308 	add.w	r3, r7, #8
 80138d0:	4618      	mov	r0, r3
 80138d2:	f7ff fe6d 	bl	80135b0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80138d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138d8:	b29a      	uxth	r2, r3
 80138da:	683b      	ldr	r3, [r7, #0]
 80138dc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80138de:	2300      	movs	r3, #0
 80138e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80138e4:	e00f      	b.n	8013906 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80138e6:	f107 0308 	add.w	r3, r7, #8
 80138ea:	4618      	mov	r0, r3
 80138ec:	f7ff fe60 	bl	80135b0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80138f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138f2:	0a5a      	lsrs	r2, r3, #9
 80138f4:	683b      	ldr	r3, [r7, #0]
 80138f6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80138f8:	2300      	movs	r3, #0
 80138fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80138fe:	e002      	b.n	8013906 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8013900:	2304      	movs	r3, #4
 8013902:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8013906:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801390a:	4618      	mov	r0, r3
 801390c:	3730      	adds	r7, #48	@ 0x30
 801390e:	46bd      	mov	sp, r7
 8013910:	bd80      	pop	{r7, pc}
 8013912:	bf00      	nop
 8013914:	24000031 	.word	0x24000031

08013918 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8013918:	b480      	push	{r7}
 801391a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 801391c:	4b03      	ldr	r3, [pc, #12]	@ (801392c <BSP_SD_WriteCpltCallback+0x14>)
 801391e:	2201      	movs	r2, #1
 8013920:	601a      	str	r2, [r3, #0]
}
 8013922:	bf00      	nop
 8013924:	46bd      	mov	sp, r7
 8013926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801392a:	4770      	bx	lr
 801392c:	24000964 	.word	0x24000964

08013930 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8013930:	b480      	push	{r7}
 8013932:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8013934:	4b03      	ldr	r3, [pc, #12]	@ (8013944 <BSP_SD_ReadCpltCallback+0x14>)
 8013936:	2201      	movs	r2, #1
 8013938:	601a      	str	r2, [r3, #0]
}
 801393a:	bf00      	nop
 801393c:	46bd      	mov	sp, r7
 801393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013942:	4770      	bx	lr
 8013944:	24000968 	.word	0x24000968

08013948 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8013948:	b480      	push	{r7}
 801394a:	b087      	sub	sp, #28
 801394c:	af00      	add	r7, sp, #0
 801394e:	60f8      	str	r0, [r7, #12]
 8013950:	60b9      	str	r1, [r7, #8]
 8013952:	4613      	mov	r3, r2
 8013954:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8013956:	2301      	movs	r3, #1
 8013958:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801395a:	2300      	movs	r3, #0
 801395c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801395e:	4b1f      	ldr	r3, [pc, #124]	@ (80139dc <FATFS_LinkDriverEx+0x94>)
 8013960:	7a5b      	ldrb	r3, [r3, #9]
 8013962:	b2db      	uxtb	r3, r3
 8013964:	2b00      	cmp	r3, #0
 8013966:	d131      	bne.n	80139cc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8013968:	4b1c      	ldr	r3, [pc, #112]	@ (80139dc <FATFS_LinkDriverEx+0x94>)
 801396a:	7a5b      	ldrb	r3, [r3, #9]
 801396c:	b2db      	uxtb	r3, r3
 801396e:	461a      	mov	r2, r3
 8013970:	4b1a      	ldr	r3, [pc, #104]	@ (80139dc <FATFS_LinkDriverEx+0x94>)
 8013972:	2100      	movs	r1, #0
 8013974:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8013976:	4b19      	ldr	r3, [pc, #100]	@ (80139dc <FATFS_LinkDriverEx+0x94>)
 8013978:	7a5b      	ldrb	r3, [r3, #9]
 801397a:	b2db      	uxtb	r3, r3
 801397c:	4a17      	ldr	r2, [pc, #92]	@ (80139dc <FATFS_LinkDriverEx+0x94>)
 801397e:	009b      	lsls	r3, r3, #2
 8013980:	4413      	add	r3, r2
 8013982:	68fa      	ldr	r2, [r7, #12]
 8013984:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8013986:	4b15      	ldr	r3, [pc, #84]	@ (80139dc <FATFS_LinkDriverEx+0x94>)
 8013988:	7a5b      	ldrb	r3, [r3, #9]
 801398a:	b2db      	uxtb	r3, r3
 801398c:	461a      	mov	r2, r3
 801398e:	4b13      	ldr	r3, [pc, #76]	@ (80139dc <FATFS_LinkDriverEx+0x94>)
 8013990:	4413      	add	r3, r2
 8013992:	79fa      	ldrb	r2, [r7, #7]
 8013994:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8013996:	4b11      	ldr	r3, [pc, #68]	@ (80139dc <FATFS_LinkDriverEx+0x94>)
 8013998:	7a5b      	ldrb	r3, [r3, #9]
 801399a:	b2db      	uxtb	r3, r3
 801399c:	1c5a      	adds	r2, r3, #1
 801399e:	b2d1      	uxtb	r1, r2
 80139a0:	4a0e      	ldr	r2, [pc, #56]	@ (80139dc <FATFS_LinkDriverEx+0x94>)
 80139a2:	7251      	strb	r1, [r2, #9]
 80139a4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80139a6:	7dbb      	ldrb	r3, [r7, #22]
 80139a8:	3330      	adds	r3, #48	@ 0x30
 80139aa:	b2da      	uxtb	r2, r3
 80139ac:	68bb      	ldr	r3, [r7, #8]
 80139ae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80139b0:	68bb      	ldr	r3, [r7, #8]
 80139b2:	3301      	adds	r3, #1
 80139b4:	223a      	movs	r2, #58	@ 0x3a
 80139b6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80139b8:	68bb      	ldr	r3, [r7, #8]
 80139ba:	3302      	adds	r3, #2
 80139bc:	222f      	movs	r2, #47	@ 0x2f
 80139be:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80139c0:	68bb      	ldr	r3, [r7, #8]
 80139c2:	3303      	adds	r3, #3
 80139c4:	2200      	movs	r2, #0
 80139c6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80139c8:	2300      	movs	r3, #0
 80139ca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80139cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80139ce:	4618      	mov	r0, r3
 80139d0:	371c      	adds	r7, #28
 80139d2:	46bd      	mov	sp, r7
 80139d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139d8:	4770      	bx	lr
 80139da:	bf00      	nop
 80139dc:	2400096c 	.word	0x2400096c

080139e0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80139e0:	b580      	push	{r7, lr}
 80139e2:	b082      	sub	sp, #8
 80139e4:	af00      	add	r7, sp, #0
 80139e6:	6078      	str	r0, [r7, #4]
 80139e8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80139ea:	2200      	movs	r2, #0
 80139ec:	6839      	ldr	r1, [r7, #0]
 80139ee:	6878      	ldr	r0, [r7, #4]
 80139f0:	f7ff ffaa 	bl	8013948 <FATFS_LinkDriverEx>
 80139f4:	4603      	mov	r3, r0
}
 80139f6:	4618      	mov	r0, r3
 80139f8:	3708      	adds	r7, #8
 80139fa:	46bd      	mov	sp, r7
 80139fc:	bd80      	pop	{r7, pc}
	...

08013a00 <sniprintf>:
 8013a00:	b40c      	push	{r2, r3}
 8013a02:	b530      	push	{r4, r5, lr}
 8013a04:	4b18      	ldr	r3, [pc, #96]	@ (8013a68 <sniprintf+0x68>)
 8013a06:	1e0c      	subs	r4, r1, #0
 8013a08:	681d      	ldr	r5, [r3, #0]
 8013a0a:	b09d      	sub	sp, #116	@ 0x74
 8013a0c:	da08      	bge.n	8013a20 <sniprintf+0x20>
 8013a0e:	238b      	movs	r3, #139	@ 0x8b
 8013a10:	602b      	str	r3, [r5, #0]
 8013a12:	f04f 30ff 	mov.w	r0, #4294967295
 8013a16:	b01d      	add	sp, #116	@ 0x74
 8013a18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013a1c:	b002      	add	sp, #8
 8013a1e:	4770      	bx	lr
 8013a20:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8013a24:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013a28:	f04f 0300 	mov.w	r3, #0
 8013a2c:	931b      	str	r3, [sp, #108]	@ 0x6c
 8013a2e:	bf14      	ite	ne
 8013a30:	f104 33ff 	addne.w	r3, r4, #4294967295
 8013a34:	4623      	moveq	r3, r4
 8013a36:	9304      	str	r3, [sp, #16]
 8013a38:	9307      	str	r3, [sp, #28]
 8013a3a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013a3e:	9002      	str	r0, [sp, #8]
 8013a40:	9006      	str	r0, [sp, #24]
 8013a42:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013a46:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8013a48:	ab21      	add	r3, sp, #132	@ 0x84
 8013a4a:	a902      	add	r1, sp, #8
 8013a4c:	4628      	mov	r0, r5
 8013a4e:	9301      	str	r3, [sp, #4]
 8013a50:	f000 f9c4 	bl	8013ddc <_svfiprintf_r>
 8013a54:	1c43      	adds	r3, r0, #1
 8013a56:	bfbc      	itt	lt
 8013a58:	238b      	movlt	r3, #139	@ 0x8b
 8013a5a:	602b      	strlt	r3, [r5, #0]
 8013a5c:	2c00      	cmp	r4, #0
 8013a5e:	d0da      	beq.n	8013a16 <sniprintf+0x16>
 8013a60:	9b02      	ldr	r3, [sp, #8]
 8013a62:	2200      	movs	r2, #0
 8013a64:	701a      	strb	r2, [r3, #0]
 8013a66:	e7d6      	b.n	8013a16 <sniprintf+0x16>
 8013a68:	24000034 	.word	0x24000034

08013a6c <siprintf>:
 8013a6c:	b40e      	push	{r1, r2, r3}
 8013a6e:	b510      	push	{r4, lr}
 8013a70:	b09d      	sub	sp, #116	@ 0x74
 8013a72:	ab1f      	add	r3, sp, #124	@ 0x7c
 8013a74:	9002      	str	r0, [sp, #8]
 8013a76:	9006      	str	r0, [sp, #24]
 8013a78:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013a7c:	480a      	ldr	r0, [pc, #40]	@ (8013aa8 <siprintf+0x3c>)
 8013a7e:	9107      	str	r1, [sp, #28]
 8013a80:	9104      	str	r1, [sp, #16]
 8013a82:	490a      	ldr	r1, [pc, #40]	@ (8013aac <siprintf+0x40>)
 8013a84:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a88:	9105      	str	r1, [sp, #20]
 8013a8a:	2400      	movs	r4, #0
 8013a8c:	a902      	add	r1, sp, #8
 8013a8e:	6800      	ldr	r0, [r0, #0]
 8013a90:	9301      	str	r3, [sp, #4]
 8013a92:	941b      	str	r4, [sp, #108]	@ 0x6c
 8013a94:	f000 f9a2 	bl	8013ddc <_svfiprintf_r>
 8013a98:	9b02      	ldr	r3, [sp, #8]
 8013a9a:	701c      	strb	r4, [r3, #0]
 8013a9c:	b01d      	add	sp, #116	@ 0x74
 8013a9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013aa2:	b003      	add	sp, #12
 8013aa4:	4770      	bx	lr
 8013aa6:	bf00      	nop
 8013aa8:	24000034 	.word	0x24000034
 8013aac:	ffff0208 	.word	0xffff0208

08013ab0 <memset>:
 8013ab0:	4402      	add	r2, r0
 8013ab2:	4603      	mov	r3, r0
 8013ab4:	4293      	cmp	r3, r2
 8013ab6:	d100      	bne.n	8013aba <memset+0xa>
 8013ab8:	4770      	bx	lr
 8013aba:	f803 1b01 	strb.w	r1, [r3], #1
 8013abe:	e7f9      	b.n	8013ab4 <memset+0x4>

08013ac0 <__errno>:
 8013ac0:	4b01      	ldr	r3, [pc, #4]	@ (8013ac8 <__errno+0x8>)
 8013ac2:	6818      	ldr	r0, [r3, #0]
 8013ac4:	4770      	bx	lr
 8013ac6:	bf00      	nop
 8013ac8:	24000034 	.word	0x24000034

08013acc <__libc_init_array>:
 8013acc:	b570      	push	{r4, r5, r6, lr}
 8013ace:	4d0d      	ldr	r5, [pc, #52]	@ (8013b04 <__libc_init_array+0x38>)
 8013ad0:	4c0d      	ldr	r4, [pc, #52]	@ (8013b08 <__libc_init_array+0x3c>)
 8013ad2:	1b64      	subs	r4, r4, r5
 8013ad4:	10a4      	asrs	r4, r4, #2
 8013ad6:	2600      	movs	r6, #0
 8013ad8:	42a6      	cmp	r6, r4
 8013ada:	d109      	bne.n	8013af0 <__libc_init_array+0x24>
 8013adc:	4d0b      	ldr	r5, [pc, #44]	@ (8013b0c <__libc_init_array+0x40>)
 8013ade:	4c0c      	ldr	r4, [pc, #48]	@ (8013b10 <__libc_init_array+0x44>)
 8013ae0:	f000 fc64 	bl	80143ac <_init>
 8013ae4:	1b64      	subs	r4, r4, r5
 8013ae6:	10a4      	asrs	r4, r4, #2
 8013ae8:	2600      	movs	r6, #0
 8013aea:	42a6      	cmp	r6, r4
 8013aec:	d105      	bne.n	8013afa <__libc_init_array+0x2e>
 8013aee:	bd70      	pop	{r4, r5, r6, pc}
 8013af0:	f855 3b04 	ldr.w	r3, [r5], #4
 8013af4:	4798      	blx	r3
 8013af6:	3601      	adds	r6, #1
 8013af8:	e7ee      	b.n	8013ad8 <__libc_init_array+0xc>
 8013afa:	f855 3b04 	ldr.w	r3, [r5], #4
 8013afe:	4798      	blx	r3
 8013b00:	3601      	adds	r6, #1
 8013b02:	e7f2      	b.n	8013aea <__libc_init_array+0x1e>
 8013b04:	08014910 	.word	0x08014910
 8013b08:	08014910 	.word	0x08014910
 8013b0c:	08014910 	.word	0x08014910
 8013b10:	08014914 	.word	0x08014914

08013b14 <__retarget_lock_acquire_recursive>:
 8013b14:	4770      	bx	lr

08013b16 <__retarget_lock_release_recursive>:
 8013b16:	4770      	bx	lr

08013b18 <memcpy>:
 8013b18:	440a      	add	r2, r1
 8013b1a:	4291      	cmp	r1, r2
 8013b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8013b20:	d100      	bne.n	8013b24 <memcpy+0xc>
 8013b22:	4770      	bx	lr
 8013b24:	b510      	push	{r4, lr}
 8013b26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013b2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013b2e:	4291      	cmp	r1, r2
 8013b30:	d1f9      	bne.n	8013b26 <memcpy+0xe>
 8013b32:	bd10      	pop	{r4, pc}

08013b34 <_free_r>:
 8013b34:	b538      	push	{r3, r4, r5, lr}
 8013b36:	4605      	mov	r5, r0
 8013b38:	2900      	cmp	r1, #0
 8013b3a:	d041      	beq.n	8013bc0 <_free_r+0x8c>
 8013b3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013b40:	1f0c      	subs	r4, r1, #4
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	bfb8      	it	lt
 8013b46:	18e4      	addlt	r4, r4, r3
 8013b48:	f000 f8e0 	bl	8013d0c <__malloc_lock>
 8013b4c:	4a1d      	ldr	r2, [pc, #116]	@ (8013bc4 <_free_r+0x90>)
 8013b4e:	6813      	ldr	r3, [r2, #0]
 8013b50:	b933      	cbnz	r3, 8013b60 <_free_r+0x2c>
 8013b52:	6063      	str	r3, [r4, #4]
 8013b54:	6014      	str	r4, [r2, #0]
 8013b56:	4628      	mov	r0, r5
 8013b58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013b5c:	f000 b8dc 	b.w	8013d18 <__malloc_unlock>
 8013b60:	42a3      	cmp	r3, r4
 8013b62:	d908      	bls.n	8013b76 <_free_r+0x42>
 8013b64:	6820      	ldr	r0, [r4, #0]
 8013b66:	1821      	adds	r1, r4, r0
 8013b68:	428b      	cmp	r3, r1
 8013b6a:	bf01      	itttt	eq
 8013b6c:	6819      	ldreq	r1, [r3, #0]
 8013b6e:	685b      	ldreq	r3, [r3, #4]
 8013b70:	1809      	addeq	r1, r1, r0
 8013b72:	6021      	streq	r1, [r4, #0]
 8013b74:	e7ed      	b.n	8013b52 <_free_r+0x1e>
 8013b76:	461a      	mov	r2, r3
 8013b78:	685b      	ldr	r3, [r3, #4]
 8013b7a:	b10b      	cbz	r3, 8013b80 <_free_r+0x4c>
 8013b7c:	42a3      	cmp	r3, r4
 8013b7e:	d9fa      	bls.n	8013b76 <_free_r+0x42>
 8013b80:	6811      	ldr	r1, [r2, #0]
 8013b82:	1850      	adds	r0, r2, r1
 8013b84:	42a0      	cmp	r0, r4
 8013b86:	d10b      	bne.n	8013ba0 <_free_r+0x6c>
 8013b88:	6820      	ldr	r0, [r4, #0]
 8013b8a:	4401      	add	r1, r0
 8013b8c:	1850      	adds	r0, r2, r1
 8013b8e:	4283      	cmp	r3, r0
 8013b90:	6011      	str	r1, [r2, #0]
 8013b92:	d1e0      	bne.n	8013b56 <_free_r+0x22>
 8013b94:	6818      	ldr	r0, [r3, #0]
 8013b96:	685b      	ldr	r3, [r3, #4]
 8013b98:	6053      	str	r3, [r2, #4]
 8013b9a:	4408      	add	r0, r1
 8013b9c:	6010      	str	r0, [r2, #0]
 8013b9e:	e7da      	b.n	8013b56 <_free_r+0x22>
 8013ba0:	d902      	bls.n	8013ba8 <_free_r+0x74>
 8013ba2:	230c      	movs	r3, #12
 8013ba4:	602b      	str	r3, [r5, #0]
 8013ba6:	e7d6      	b.n	8013b56 <_free_r+0x22>
 8013ba8:	6820      	ldr	r0, [r4, #0]
 8013baa:	1821      	adds	r1, r4, r0
 8013bac:	428b      	cmp	r3, r1
 8013bae:	bf04      	itt	eq
 8013bb0:	6819      	ldreq	r1, [r3, #0]
 8013bb2:	685b      	ldreq	r3, [r3, #4]
 8013bb4:	6063      	str	r3, [r4, #4]
 8013bb6:	bf04      	itt	eq
 8013bb8:	1809      	addeq	r1, r1, r0
 8013bba:	6021      	streq	r1, [r4, #0]
 8013bbc:	6054      	str	r4, [r2, #4]
 8013bbe:	e7ca      	b.n	8013b56 <_free_r+0x22>
 8013bc0:	bd38      	pop	{r3, r4, r5, pc}
 8013bc2:	bf00      	nop
 8013bc4:	24000abc 	.word	0x24000abc

08013bc8 <sbrk_aligned>:
 8013bc8:	b570      	push	{r4, r5, r6, lr}
 8013bca:	4e0f      	ldr	r6, [pc, #60]	@ (8013c08 <sbrk_aligned+0x40>)
 8013bcc:	460c      	mov	r4, r1
 8013bce:	6831      	ldr	r1, [r6, #0]
 8013bd0:	4605      	mov	r5, r0
 8013bd2:	b911      	cbnz	r1, 8013bda <sbrk_aligned+0x12>
 8013bd4:	f000 fba4 	bl	8014320 <_sbrk_r>
 8013bd8:	6030      	str	r0, [r6, #0]
 8013bda:	4621      	mov	r1, r4
 8013bdc:	4628      	mov	r0, r5
 8013bde:	f000 fb9f 	bl	8014320 <_sbrk_r>
 8013be2:	1c43      	adds	r3, r0, #1
 8013be4:	d103      	bne.n	8013bee <sbrk_aligned+0x26>
 8013be6:	f04f 34ff 	mov.w	r4, #4294967295
 8013bea:	4620      	mov	r0, r4
 8013bec:	bd70      	pop	{r4, r5, r6, pc}
 8013bee:	1cc4      	adds	r4, r0, #3
 8013bf0:	f024 0403 	bic.w	r4, r4, #3
 8013bf4:	42a0      	cmp	r0, r4
 8013bf6:	d0f8      	beq.n	8013bea <sbrk_aligned+0x22>
 8013bf8:	1a21      	subs	r1, r4, r0
 8013bfa:	4628      	mov	r0, r5
 8013bfc:	f000 fb90 	bl	8014320 <_sbrk_r>
 8013c00:	3001      	adds	r0, #1
 8013c02:	d1f2      	bne.n	8013bea <sbrk_aligned+0x22>
 8013c04:	e7ef      	b.n	8013be6 <sbrk_aligned+0x1e>
 8013c06:	bf00      	nop
 8013c08:	24000ab8 	.word	0x24000ab8

08013c0c <_malloc_r>:
 8013c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c10:	1ccd      	adds	r5, r1, #3
 8013c12:	f025 0503 	bic.w	r5, r5, #3
 8013c16:	3508      	adds	r5, #8
 8013c18:	2d0c      	cmp	r5, #12
 8013c1a:	bf38      	it	cc
 8013c1c:	250c      	movcc	r5, #12
 8013c1e:	2d00      	cmp	r5, #0
 8013c20:	4606      	mov	r6, r0
 8013c22:	db01      	blt.n	8013c28 <_malloc_r+0x1c>
 8013c24:	42a9      	cmp	r1, r5
 8013c26:	d904      	bls.n	8013c32 <_malloc_r+0x26>
 8013c28:	230c      	movs	r3, #12
 8013c2a:	6033      	str	r3, [r6, #0]
 8013c2c:	2000      	movs	r0, #0
 8013c2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013d08 <_malloc_r+0xfc>
 8013c36:	f000 f869 	bl	8013d0c <__malloc_lock>
 8013c3a:	f8d8 3000 	ldr.w	r3, [r8]
 8013c3e:	461c      	mov	r4, r3
 8013c40:	bb44      	cbnz	r4, 8013c94 <_malloc_r+0x88>
 8013c42:	4629      	mov	r1, r5
 8013c44:	4630      	mov	r0, r6
 8013c46:	f7ff ffbf 	bl	8013bc8 <sbrk_aligned>
 8013c4a:	1c43      	adds	r3, r0, #1
 8013c4c:	4604      	mov	r4, r0
 8013c4e:	d158      	bne.n	8013d02 <_malloc_r+0xf6>
 8013c50:	f8d8 4000 	ldr.w	r4, [r8]
 8013c54:	4627      	mov	r7, r4
 8013c56:	2f00      	cmp	r7, #0
 8013c58:	d143      	bne.n	8013ce2 <_malloc_r+0xd6>
 8013c5a:	2c00      	cmp	r4, #0
 8013c5c:	d04b      	beq.n	8013cf6 <_malloc_r+0xea>
 8013c5e:	6823      	ldr	r3, [r4, #0]
 8013c60:	4639      	mov	r1, r7
 8013c62:	4630      	mov	r0, r6
 8013c64:	eb04 0903 	add.w	r9, r4, r3
 8013c68:	f000 fb5a 	bl	8014320 <_sbrk_r>
 8013c6c:	4581      	cmp	r9, r0
 8013c6e:	d142      	bne.n	8013cf6 <_malloc_r+0xea>
 8013c70:	6821      	ldr	r1, [r4, #0]
 8013c72:	1a6d      	subs	r5, r5, r1
 8013c74:	4629      	mov	r1, r5
 8013c76:	4630      	mov	r0, r6
 8013c78:	f7ff ffa6 	bl	8013bc8 <sbrk_aligned>
 8013c7c:	3001      	adds	r0, #1
 8013c7e:	d03a      	beq.n	8013cf6 <_malloc_r+0xea>
 8013c80:	6823      	ldr	r3, [r4, #0]
 8013c82:	442b      	add	r3, r5
 8013c84:	6023      	str	r3, [r4, #0]
 8013c86:	f8d8 3000 	ldr.w	r3, [r8]
 8013c8a:	685a      	ldr	r2, [r3, #4]
 8013c8c:	bb62      	cbnz	r2, 8013ce8 <_malloc_r+0xdc>
 8013c8e:	f8c8 7000 	str.w	r7, [r8]
 8013c92:	e00f      	b.n	8013cb4 <_malloc_r+0xa8>
 8013c94:	6822      	ldr	r2, [r4, #0]
 8013c96:	1b52      	subs	r2, r2, r5
 8013c98:	d420      	bmi.n	8013cdc <_malloc_r+0xd0>
 8013c9a:	2a0b      	cmp	r2, #11
 8013c9c:	d917      	bls.n	8013cce <_malloc_r+0xc2>
 8013c9e:	1961      	adds	r1, r4, r5
 8013ca0:	42a3      	cmp	r3, r4
 8013ca2:	6025      	str	r5, [r4, #0]
 8013ca4:	bf18      	it	ne
 8013ca6:	6059      	strne	r1, [r3, #4]
 8013ca8:	6863      	ldr	r3, [r4, #4]
 8013caa:	bf08      	it	eq
 8013cac:	f8c8 1000 	streq.w	r1, [r8]
 8013cb0:	5162      	str	r2, [r4, r5]
 8013cb2:	604b      	str	r3, [r1, #4]
 8013cb4:	4630      	mov	r0, r6
 8013cb6:	f000 f82f 	bl	8013d18 <__malloc_unlock>
 8013cba:	f104 000b 	add.w	r0, r4, #11
 8013cbe:	1d23      	adds	r3, r4, #4
 8013cc0:	f020 0007 	bic.w	r0, r0, #7
 8013cc4:	1ac2      	subs	r2, r0, r3
 8013cc6:	bf1c      	itt	ne
 8013cc8:	1a1b      	subne	r3, r3, r0
 8013cca:	50a3      	strne	r3, [r4, r2]
 8013ccc:	e7af      	b.n	8013c2e <_malloc_r+0x22>
 8013cce:	6862      	ldr	r2, [r4, #4]
 8013cd0:	42a3      	cmp	r3, r4
 8013cd2:	bf0c      	ite	eq
 8013cd4:	f8c8 2000 	streq.w	r2, [r8]
 8013cd8:	605a      	strne	r2, [r3, #4]
 8013cda:	e7eb      	b.n	8013cb4 <_malloc_r+0xa8>
 8013cdc:	4623      	mov	r3, r4
 8013cde:	6864      	ldr	r4, [r4, #4]
 8013ce0:	e7ae      	b.n	8013c40 <_malloc_r+0x34>
 8013ce2:	463c      	mov	r4, r7
 8013ce4:	687f      	ldr	r7, [r7, #4]
 8013ce6:	e7b6      	b.n	8013c56 <_malloc_r+0x4a>
 8013ce8:	461a      	mov	r2, r3
 8013cea:	685b      	ldr	r3, [r3, #4]
 8013cec:	42a3      	cmp	r3, r4
 8013cee:	d1fb      	bne.n	8013ce8 <_malloc_r+0xdc>
 8013cf0:	2300      	movs	r3, #0
 8013cf2:	6053      	str	r3, [r2, #4]
 8013cf4:	e7de      	b.n	8013cb4 <_malloc_r+0xa8>
 8013cf6:	230c      	movs	r3, #12
 8013cf8:	6033      	str	r3, [r6, #0]
 8013cfa:	4630      	mov	r0, r6
 8013cfc:	f000 f80c 	bl	8013d18 <__malloc_unlock>
 8013d00:	e794      	b.n	8013c2c <_malloc_r+0x20>
 8013d02:	6005      	str	r5, [r0, #0]
 8013d04:	e7d6      	b.n	8013cb4 <_malloc_r+0xa8>
 8013d06:	bf00      	nop
 8013d08:	24000abc 	.word	0x24000abc

08013d0c <__malloc_lock>:
 8013d0c:	4801      	ldr	r0, [pc, #4]	@ (8013d14 <__malloc_lock+0x8>)
 8013d0e:	f7ff bf01 	b.w	8013b14 <__retarget_lock_acquire_recursive>
 8013d12:	bf00      	nop
 8013d14:	24000ab4 	.word	0x24000ab4

08013d18 <__malloc_unlock>:
 8013d18:	4801      	ldr	r0, [pc, #4]	@ (8013d20 <__malloc_unlock+0x8>)
 8013d1a:	f7ff befc 	b.w	8013b16 <__retarget_lock_release_recursive>
 8013d1e:	bf00      	nop
 8013d20:	24000ab4 	.word	0x24000ab4

08013d24 <__ssputs_r>:
 8013d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d28:	688e      	ldr	r6, [r1, #8]
 8013d2a:	461f      	mov	r7, r3
 8013d2c:	42be      	cmp	r6, r7
 8013d2e:	680b      	ldr	r3, [r1, #0]
 8013d30:	4682      	mov	sl, r0
 8013d32:	460c      	mov	r4, r1
 8013d34:	4690      	mov	r8, r2
 8013d36:	d82d      	bhi.n	8013d94 <__ssputs_r+0x70>
 8013d38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013d3c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013d40:	d026      	beq.n	8013d90 <__ssputs_r+0x6c>
 8013d42:	6965      	ldr	r5, [r4, #20]
 8013d44:	6909      	ldr	r1, [r1, #16]
 8013d46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013d4a:	eba3 0901 	sub.w	r9, r3, r1
 8013d4e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013d52:	1c7b      	adds	r3, r7, #1
 8013d54:	444b      	add	r3, r9
 8013d56:	106d      	asrs	r5, r5, #1
 8013d58:	429d      	cmp	r5, r3
 8013d5a:	bf38      	it	cc
 8013d5c:	461d      	movcc	r5, r3
 8013d5e:	0553      	lsls	r3, r2, #21
 8013d60:	d527      	bpl.n	8013db2 <__ssputs_r+0x8e>
 8013d62:	4629      	mov	r1, r5
 8013d64:	f7ff ff52 	bl	8013c0c <_malloc_r>
 8013d68:	4606      	mov	r6, r0
 8013d6a:	b360      	cbz	r0, 8013dc6 <__ssputs_r+0xa2>
 8013d6c:	6921      	ldr	r1, [r4, #16]
 8013d6e:	464a      	mov	r2, r9
 8013d70:	f7ff fed2 	bl	8013b18 <memcpy>
 8013d74:	89a3      	ldrh	r3, [r4, #12]
 8013d76:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8013d7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013d7e:	81a3      	strh	r3, [r4, #12]
 8013d80:	6126      	str	r6, [r4, #16]
 8013d82:	6165      	str	r5, [r4, #20]
 8013d84:	444e      	add	r6, r9
 8013d86:	eba5 0509 	sub.w	r5, r5, r9
 8013d8a:	6026      	str	r6, [r4, #0]
 8013d8c:	60a5      	str	r5, [r4, #8]
 8013d8e:	463e      	mov	r6, r7
 8013d90:	42be      	cmp	r6, r7
 8013d92:	d900      	bls.n	8013d96 <__ssputs_r+0x72>
 8013d94:	463e      	mov	r6, r7
 8013d96:	6820      	ldr	r0, [r4, #0]
 8013d98:	4632      	mov	r2, r6
 8013d9a:	4641      	mov	r1, r8
 8013d9c:	f000 faa6 	bl	80142ec <memmove>
 8013da0:	68a3      	ldr	r3, [r4, #8]
 8013da2:	1b9b      	subs	r3, r3, r6
 8013da4:	60a3      	str	r3, [r4, #8]
 8013da6:	6823      	ldr	r3, [r4, #0]
 8013da8:	4433      	add	r3, r6
 8013daa:	6023      	str	r3, [r4, #0]
 8013dac:	2000      	movs	r0, #0
 8013dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013db2:	462a      	mov	r2, r5
 8013db4:	f000 fac4 	bl	8014340 <_realloc_r>
 8013db8:	4606      	mov	r6, r0
 8013dba:	2800      	cmp	r0, #0
 8013dbc:	d1e0      	bne.n	8013d80 <__ssputs_r+0x5c>
 8013dbe:	6921      	ldr	r1, [r4, #16]
 8013dc0:	4650      	mov	r0, sl
 8013dc2:	f7ff feb7 	bl	8013b34 <_free_r>
 8013dc6:	230c      	movs	r3, #12
 8013dc8:	f8ca 3000 	str.w	r3, [sl]
 8013dcc:	89a3      	ldrh	r3, [r4, #12]
 8013dce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013dd2:	81a3      	strh	r3, [r4, #12]
 8013dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8013dd8:	e7e9      	b.n	8013dae <__ssputs_r+0x8a>
	...

08013ddc <_svfiprintf_r>:
 8013ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013de0:	4698      	mov	r8, r3
 8013de2:	898b      	ldrh	r3, [r1, #12]
 8013de4:	061b      	lsls	r3, r3, #24
 8013de6:	b09d      	sub	sp, #116	@ 0x74
 8013de8:	4607      	mov	r7, r0
 8013dea:	460d      	mov	r5, r1
 8013dec:	4614      	mov	r4, r2
 8013dee:	d510      	bpl.n	8013e12 <_svfiprintf_r+0x36>
 8013df0:	690b      	ldr	r3, [r1, #16]
 8013df2:	b973      	cbnz	r3, 8013e12 <_svfiprintf_r+0x36>
 8013df4:	2140      	movs	r1, #64	@ 0x40
 8013df6:	f7ff ff09 	bl	8013c0c <_malloc_r>
 8013dfa:	6028      	str	r0, [r5, #0]
 8013dfc:	6128      	str	r0, [r5, #16]
 8013dfe:	b930      	cbnz	r0, 8013e0e <_svfiprintf_r+0x32>
 8013e00:	230c      	movs	r3, #12
 8013e02:	603b      	str	r3, [r7, #0]
 8013e04:	f04f 30ff 	mov.w	r0, #4294967295
 8013e08:	b01d      	add	sp, #116	@ 0x74
 8013e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e0e:	2340      	movs	r3, #64	@ 0x40
 8013e10:	616b      	str	r3, [r5, #20]
 8013e12:	2300      	movs	r3, #0
 8013e14:	9309      	str	r3, [sp, #36]	@ 0x24
 8013e16:	2320      	movs	r3, #32
 8013e18:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013e1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8013e20:	2330      	movs	r3, #48	@ 0x30
 8013e22:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013fc0 <_svfiprintf_r+0x1e4>
 8013e26:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013e2a:	f04f 0901 	mov.w	r9, #1
 8013e2e:	4623      	mov	r3, r4
 8013e30:	469a      	mov	sl, r3
 8013e32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013e36:	b10a      	cbz	r2, 8013e3c <_svfiprintf_r+0x60>
 8013e38:	2a25      	cmp	r2, #37	@ 0x25
 8013e3a:	d1f9      	bne.n	8013e30 <_svfiprintf_r+0x54>
 8013e3c:	ebba 0b04 	subs.w	fp, sl, r4
 8013e40:	d00b      	beq.n	8013e5a <_svfiprintf_r+0x7e>
 8013e42:	465b      	mov	r3, fp
 8013e44:	4622      	mov	r2, r4
 8013e46:	4629      	mov	r1, r5
 8013e48:	4638      	mov	r0, r7
 8013e4a:	f7ff ff6b 	bl	8013d24 <__ssputs_r>
 8013e4e:	3001      	adds	r0, #1
 8013e50:	f000 80a7 	beq.w	8013fa2 <_svfiprintf_r+0x1c6>
 8013e54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013e56:	445a      	add	r2, fp
 8013e58:	9209      	str	r2, [sp, #36]	@ 0x24
 8013e5a:	f89a 3000 	ldrb.w	r3, [sl]
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	f000 809f 	beq.w	8013fa2 <_svfiprintf_r+0x1c6>
 8013e64:	2300      	movs	r3, #0
 8013e66:	f04f 32ff 	mov.w	r2, #4294967295
 8013e6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013e6e:	f10a 0a01 	add.w	sl, sl, #1
 8013e72:	9304      	str	r3, [sp, #16]
 8013e74:	9307      	str	r3, [sp, #28]
 8013e76:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013e7a:	931a      	str	r3, [sp, #104]	@ 0x68
 8013e7c:	4654      	mov	r4, sl
 8013e7e:	2205      	movs	r2, #5
 8013e80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e84:	484e      	ldr	r0, [pc, #312]	@ (8013fc0 <_svfiprintf_r+0x1e4>)
 8013e86:	f7ec fa4b 	bl	8000320 <memchr>
 8013e8a:	9a04      	ldr	r2, [sp, #16]
 8013e8c:	b9d8      	cbnz	r0, 8013ec6 <_svfiprintf_r+0xea>
 8013e8e:	06d0      	lsls	r0, r2, #27
 8013e90:	bf44      	itt	mi
 8013e92:	2320      	movmi	r3, #32
 8013e94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013e98:	0711      	lsls	r1, r2, #28
 8013e9a:	bf44      	itt	mi
 8013e9c:	232b      	movmi	r3, #43	@ 0x2b
 8013e9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013ea2:	f89a 3000 	ldrb.w	r3, [sl]
 8013ea6:	2b2a      	cmp	r3, #42	@ 0x2a
 8013ea8:	d015      	beq.n	8013ed6 <_svfiprintf_r+0xfa>
 8013eaa:	9a07      	ldr	r2, [sp, #28]
 8013eac:	4654      	mov	r4, sl
 8013eae:	2000      	movs	r0, #0
 8013eb0:	f04f 0c0a 	mov.w	ip, #10
 8013eb4:	4621      	mov	r1, r4
 8013eb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013eba:	3b30      	subs	r3, #48	@ 0x30
 8013ebc:	2b09      	cmp	r3, #9
 8013ebe:	d94b      	bls.n	8013f58 <_svfiprintf_r+0x17c>
 8013ec0:	b1b0      	cbz	r0, 8013ef0 <_svfiprintf_r+0x114>
 8013ec2:	9207      	str	r2, [sp, #28]
 8013ec4:	e014      	b.n	8013ef0 <_svfiprintf_r+0x114>
 8013ec6:	eba0 0308 	sub.w	r3, r0, r8
 8013eca:	fa09 f303 	lsl.w	r3, r9, r3
 8013ece:	4313      	orrs	r3, r2
 8013ed0:	9304      	str	r3, [sp, #16]
 8013ed2:	46a2      	mov	sl, r4
 8013ed4:	e7d2      	b.n	8013e7c <_svfiprintf_r+0xa0>
 8013ed6:	9b03      	ldr	r3, [sp, #12]
 8013ed8:	1d19      	adds	r1, r3, #4
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	9103      	str	r1, [sp, #12]
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	bfbb      	ittet	lt
 8013ee2:	425b      	neglt	r3, r3
 8013ee4:	f042 0202 	orrlt.w	r2, r2, #2
 8013ee8:	9307      	strge	r3, [sp, #28]
 8013eea:	9307      	strlt	r3, [sp, #28]
 8013eec:	bfb8      	it	lt
 8013eee:	9204      	strlt	r2, [sp, #16]
 8013ef0:	7823      	ldrb	r3, [r4, #0]
 8013ef2:	2b2e      	cmp	r3, #46	@ 0x2e
 8013ef4:	d10a      	bne.n	8013f0c <_svfiprintf_r+0x130>
 8013ef6:	7863      	ldrb	r3, [r4, #1]
 8013ef8:	2b2a      	cmp	r3, #42	@ 0x2a
 8013efa:	d132      	bne.n	8013f62 <_svfiprintf_r+0x186>
 8013efc:	9b03      	ldr	r3, [sp, #12]
 8013efe:	1d1a      	adds	r2, r3, #4
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	9203      	str	r2, [sp, #12]
 8013f04:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013f08:	3402      	adds	r4, #2
 8013f0a:	9305      	str	r3, [sp, #20]
 8013f0c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013fd0 <_svfiprintf_r+0x1f4>
 8013f10:	7821      	ldrb	r1, [r4, #0]
 8013f12:	2203      	movs	r2, #3
 8013f14:	4650      	mov	r0, sl
 8013f16:	f7ec fa03 	bl	8000320 <memchr>
 8013f1a:	b138      	cbz	r0, 8013f2c <_svfiprintf_r+0x150>
 8013f1c:	9b04      	ldr	r3, [sp, #16]
 8013f1e:	eba0 000a 	sub.w	r0, r0, sl
 8013f22:	2240      	movs	r2, #64	@ 0x40
 8013f24:	4082      	lsls	r2, r0
 8013f26:	4313      	orrs	r3, r2
 8013f28:	3401      	adds	r4, #1
 8013f2a:	9304      	str	r3, [sp, #16]
 8013f2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f30:	4824      	ldr	r0, [pc, #144]	@ (8013fc4 <_svfiprintf_r+0x1e8>)
 8013f32:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013f36:	2206      	movs	r2, #6
 8013f38:	f7ec f9f2 	bl	8000320 <memchr>
 8013f3c:	2800      	cmp	r0, #0
 8013f3e:	d036      	beq.n	8013fae <_svfiprintf_r+0x1d2>
 8013f40:	4b21      	ldr	r3, [pc, #132]	@ (8013fc8 <_svfiprintf_r+0x1ec>)
 8013f42:	bb1b      	cbnz	r3, 8013f8c <_svfiprintf_r+0x1b0>
 8013f44:	9b03      	ldr	r3, [sp, #12]
 8013f46:	3307      	adds	r3, #7
 8013f48:	f023 0307 	bic.w	r3, r3, #7
 8013f4c:	3308      	adds	r3, #8
 8013f4e:	9303      	str	r3, [sp, #12]
 8013f50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f52:	4433      	add	r3, r6
 8013f54:	9309      	str	r3, [sp, #36]	@ 0x24
 8013f56:	e76a      	b.n	8013e2e <_svfiprintf_r+0x52>
 8013f58:	fb0c 3202 	mla	r2, ip, r2, r3
 8013f5c:	460c      	mov	r4, r1
 8013f5e:	2001      	movs	r0, #1
 8013f60:	e7a8      	b.n	8013eb4 <_svfiprintf_r+0xd8>
 8013f62:	2300      	movs	r3, #0
 8013f64:	3401      	adds	r4, #1
 8013f66:	9305      	str	r3, [sp, #20]
 8013f68:	4619      	mov	r1, r3
 8013f6a:	f04f 0c0a 	mov.w	ip, #10
 8013f6e:	4620      	mov	r0, r4
 8013f70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013f74:	3a30      	subs	r2, #48	@ 0x30
 8013f76:	2a09      	cmp	r2, #9
 8013f78:	d903      	bls.n	8013f82 <_svfiprintf_r+0x1a6>
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d0c6      	beq.n	8013f0c <_svfiprintf_r+0x130>
 8013f7e:	9105      	str	r1, [sp, #20]
 8013f80:	e7c4      	b.n	8013f0c <_svfiprintf_r+0x130>
 8013f82:	fb0c 2101 	mla	r1, ip, r1, r2
 8013f86:	4604      	mov	r4, r0
 8013f88:	2301      	movs	r3, #1
 8013f8a:	e7f0      	b.n	8013f6e <_svfiprintf_r+0x192>
 8013f8c:	ab03      	add	r3, sp, #12
 8013f8e:	9300      	str	r3, [sp, #0]
 8013f90:	462a      	mov	r2, r5
 8013f92:	4b0e      	ldr	r3, [pc, #56]	@ (8013fcc <_svfiprintf_r+0x1f0>)
 8013f94:	a904      	add	r1, sp, #16
 8013f96:	4638      	mov	r0, r7
 8013f98:	f3af 8000 	nop.w
 8013f9c:	1c42      	adds	r2, r0, #1
 8013f9e:	4606      	mov	r6, r0
 8013fa0:	d1d6      	bne.n	8013f50 <_svfiprintf_r+0x174>
 8013fa2:	89ab      	ldrh	r3, [r5, #12]
 8013fa4:	065b      	lsls	r3, r3, #25
 8013fa6:	f53f af2d 	bmi.w	8013e04 <_svfiprintf_r+0x28>
 8013faa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013fac:	e72c      	b.n	8013e08 <_svfiprintf_r+0x2c>
 8013fae:	ab03      	add	r3, sp, #12
 8013fb0:	9300      	str	r3, [sp, #0]
 8013fb2:	462a      	mov	r2, r5
 8013fb4:	4b05      	ldr	r3, [pc, #20]	@ (8013fcc <_svfiprintf_r+0x1f0>)
 8013fb6:	a904      	add	r1, sp, #16
 8013fb8:	4638      	mov	r0, r7
 8013fba:	f000 f879 	bl	80140b0 <_printf_i>
 8013fbe:	e7ed      	b.n	8013f9c <_svfiprintf_r+0x1c0>
 8013fc0:	080148d4 	.word	0x080148d4
 8013fc4:	080148de 	.word	0x080148de
 8013fc8:	00000000 	.word	0x00000000
 8013fcc:	08013d25 	.word	0x08013d25
 8013fd0:	080148da 	.word	0x080148da

08013fd4 <_printf_common>:
 8013fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013fd8:	4616      	mov	r6, r2
 8013fda:	4698      	mov	r8, r3
 8013fdc:	688a      	ldr	r2, [r1, #8]
 8013fde:	690b      	ldr	r3, [r1, #16]
 8013fe0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013fe4:	4293      	cmp	r3, r2
 8013fe6:	bfb8      	it	lt
 8013fe8:	4613      	movlt	r3, r2
 8013fea:	6033      	str	r3, [r6, #0]
 8013fec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013ff0:	4607      	mov	r7, r0
 8013ff2:	460c      	mov	r4, r1
 8013ff4:	b10a      	cbz	r2, 8013ffa <_printf_common+0x26>
 8013ff6:	3301      	adds	r3, #1
 8013ff8:	6033      	str	r3, [r6, #0]
 8013ffa:	6823      	ldr	r3, [r4, #0]
 8013ffc:	0699      	lsls	r1, r3, #26
 8013ffe:	bf42      	ittt	mi
 8014000:	6833      	ldrmi	r3, [r6, #0]
 8014002:	3302      	addmi	r3, #2
 8014004:	6033      	strmi	r3, [r6, #0]
 8014006:	6825      	ldr	r5, [r4, #0]
 8014008:	f015 0506 	ands.w	r5, r5, #6
 801400c:	d106      	bne.n	801401c <_printf_common+0x48>
 801400e:	f104 0a19 	add.w	sl, r4, #25
 8014012:	68e3      	ldr	r3, [r4, #12]
 8014014:	6832      	ldr	r2, [r6, #0]
 8014016:	1a9b      	subs	r3, r3, r2
 8014018:	42ab      	cmp	r3, r5
 801401a:	dc26      	bgt.n	801406a <_printf_common+0x96>
 801401c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014020:	6822      	ldr	r2, [r4, #0]
 8014022:	3b00      	subs	r3, #0
 8014024:	bf18      	it	ne
 8014026:	2301      	movne	r3, #1
 8014028:	0692      	lsls	r2, r2, #26
 801402a:	d42b      	bmi.n	8014084 <_printf_common+0xb0>
 801402c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014030:	4641      	mov	r1, r8
 8014032:	4638      	mov	r0, r7
 8014034:	47c8      	blx	r9
 8014036:	3001      	adds	r0, #1
 8014038:	d01e      	beq.n	8014078 <_printf_common+0xa4>
 801403a:	6823      	ldr	r3, [r4, #0]
 801403c:	6922      	ldr	r2, [r4, #16]
 801403e:	f003 0306 	and.w	r3, r3, #6
 8014042:	2b04      	cmp	r3, #4
 8014044:	bf02      	ittt	eq
 8014046:	68e5      	ldreq	r5, [r4, #12]
 8014048:	6833      	ldreq	r3, [r6, #0]
 801404a:	1aed      	subeq	r5, r5, r3
 801404c:	68a3      	ldr	r3, [r4, #8]
 801404e:	bf0c      	ite	eq
 8014050:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014054:	2500      	movne	r5, #0
 8014056:	4293      	cmp	r3, r2
 8014058:	bfc4      	itt	gt
 801405a:	1a9b      	subgt	r3, r3, r2
 801405c:	18ed      	addgt	r5, r5, r3
 801405e:	2600      	movs	r6, #0
 8014060:	341a      	adds	r4, #26
 8014062:	42b5      	cmp	r5, r6
 8014064:	d11a      	bne.n	801409c <_printf_common+0xc8>
 8014066:	2000      	movs	r0, #0
 8014068:	e008      	b.n	801407c <_printf_common+0xa8>
 801406a:	2301      	movs	r3, #1
 801406c:	4652      	mov	r2, sl
 801406e:	4641      	mov	r1, r8
 8014070:	4638      	mov	r0, r7
 8014072:	47c8      	blx	r9
 8014074:	3001      	adds	r0, #1
 8014076:	d103      	bne.n	8014080 <_printf_common+0xac>
 8014078:	f04f 30ff 	mov.w	r0, #4294967295
 801407c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014080:	3501      	adds	r5, #1
 8014082:	e7c6      	b.n	8014012 <_printf_common+0x3e>
 8014084:	18e1      	adds	r1, r4, r3
 8014086:	1c5a      	adds	r2, r3, #1
 8014088:	2030      	movs	r0, #48	@ 0x30
 801408a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801408e:	4422      	add	r2, r4
 8014090:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8014094:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014098:	3302      	adds	r3, #2
 801409a:	e7c7      	b.n	801402c <_printf_common+0x58>
 801409c:	2301      	movs	r3, #1
 801409e:	4622      	mov	r2, r4
 80140a0:	4641      	mov	r1, r8
 80140a2:	4638      	mov	r0, r7
 80140a4:	47c8      	blx	r9
 80140a6:	3001      	adds	r0, #1
 80140a8:	d0e6      	beq.n	8014078 <_printf_common+0xa4>
 80140aa:	3601      	adds	r6, #1
 80140ac:	e7d9      	b.n	8014062 <_printf_common+0x8e>
	...

080140b0 <_printf_i>:
 80140b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80140b4:	7e0f      	ldrb	r7, [r1, #24]
 80140b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80140b8:	2f78      	cmp	r7, #120	@ 0x78
 80140ba:	4691      	mov	r9, r2
 80140bc:	4680      	mov	r8, r0
 80140be:	460c      	mov	r4, r1
 80140c0:	469a      	mov	sl, r3
 80140c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80140c6:	d807      	bhi.n	80140d8 <_printf_i+0x28>
 80140c8:	2f62      	cmp	r7, #98	@ 0x62
 80140ca:	d80a      	bhi.n	80140e2 <_printf_i+0x32>
 80140cc:	2f00      	cmp	r7, #0
 80140ce:	f000 80d1 	beq.w	8014274 <_printf_i+0x1c4>
 80140d2:	2f58      	cmp	r7, #88	@ 0x58
 80140d4:	f000 80b8 	beq.w	8014248 <_printf_i+0x198>
 80140d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80140dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80140e0:	e03a      	b.n	8014158 <_printf_i+0xa8>
 80140e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80140e6:	2b15      	cmp	r3, #21
 80140e8:	d8f6      	bhi.n	80140d8 <_printf_i+0x28>
 80140ea:	a101      	add	r1, pc, #4	@ (adr r1, 80140f0 <_printf_i+0x40>)
 80140ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80140f0:	08014149 	.word	0x08014149
 80140f4:	0801415d 	.word	0x0801415d
 80140f8:	080140d9 	.word	0x080140d9
 80140fc:	080140d9 	.word	0x080140d9
 8014100:	080140d9 	.word	0x080140d9
 8014104:	080140d9 	.word	0x080140d9
 8014108:	0801415d 	.word	0x0801415d
 801410c:	080140d9 	.word	0x080140d9
 8014110:	080140d9 	.word	0x080140d9
 8014114:	080140d9 	.word	0x080140d9
 8014118:	080140d9 	.word	0x080140d9
 801411c:	0801425b 	.word	0x0801425b
 8014120:	08014187 	.word	0x08014187
 8014124:	08014215 	.word	0x08014215
 8014128:	080140d9 	.word	0x080140d9
 801412c:	080140d9 	.word	0x080140d9
 8014130:	0801427d 	.word	0x0801427d
 8014134:	080140d9 	.word	0x080140d9
 8014138:	08014187 	.word	0x08014187
 801413c:	080140d9 	.word	0x080140d9
 8014140:	080140d9 	.word	0x080140d9
 8014144:	0801421d 	.word	0x0801421d
 8014148:	6833      	ldr	r3, [r6, #0]
 801414a:	1d1a      	adds	r2, r3, #4
 801414c:	681b      	ldr	r3, [r3, #0]
 801414e:	6032      	str	r2, [r6, #0]
 8014150:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014154:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014158:	2301      	movs	r3, #1
 801415a:	e09c      	b.n	8014296 <_printf_i+0x1e6>
 801415c:	6833      	ldr	r3, [r6, #0]
 801415e:	6820      	ldr	r0, [r4, #0]
 8014160:	1d19      	adds	r1, r3, #4
 8014162:	6031      	str	r1, [r6, #0]
 8014164:	0606      	lsls	r6, r0, #24
 8014166:	d501      	bpl.n	801416c <_printf_i+0xbc>
 8014168:	681d      	ldr	r5, [r3, #0]
 801416a:	e003      	b.n	8014174 <_printf_i+0xc4>
 801416c:	0645      	lsls	r5, r0, #25
 801416e:	d5fb      	bpl.n	8014168 <_printf_i+0xb8>
 8014170:	f9b3 5000 	ldrsh.w	r5, [r3]
 8014174:	2d00      	cmp	r5, #0
 8014176:	da03      	bge.n	8014180 <_printf_i+0xd0>
 8014178:	232d      	movs	r3, #45	@ 0x2d
 801417a:	426d      	negs	r5, r5
 801417c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014180:	4858      	ldr	r0, [pc, #352]	@ (80142e4 <_printf_i+0x234>)
 8014182:	230a      	movs	r3, #10
 8014184:	e011      	b.n	80141aa <_printf_i+0xfa>
 8014186:	6821      	ldr	r1, [r4, #0]
 8014188:	6833      	ldr	r3, [r6, #0]
 801418a:	0608      	lsls	r0, r1, #24
 801418c:	f853 5b04 	ldr.w	r5, [r3], #4
 8014190:	d402      	bmi.n	8014198 <_printf_i+0xe8>
 8014192:	0649      	lsls	r1, r1, #25
 8014194:	bf48      	it	mi
 8014196:	b2ad      	uxthmi	r5, r5
 8014198:	2f6f      	cmp	r7, #111	@ 0x6f
 801419a:	4852      	ldr	r0, [pc, #328]	@ (80142e4 <_printf_i+0x234>)
 801419c:	6033      	str	r3, [r6, #0]
 801419e:	bf14      	ite	ne
 80141a0:	230a      	movne	r3, #10
 80141a2:	2308      	moveq	r3, #8
 80141a4:	2100      	movs	r1, #0
 80141a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80141aa:	6866      	ldr	r6, [r4, #4]
 80141ac:	60a6      	str	r6, [r4, #8]
 80141ae:	2e00      	cmp	r6, #0
 80141b0:	db05      	blt.n	80141be <_printf_i+0x10e>
 80141b2:	6821      	ldr	r1, [r4, #0]
 80141b4:	432e      	orrs	r6, r5
 80141b6:	f021 0104 	bic.w	r1, r1, #4
 80141ba:	6021      	str	r1, [r4, #0]
 80141bc:	d04b      	beq.n	8014256 <_printf_i+0x1a6>
 80141be:	4616      	mov	r6, r2
 80141c0:	fbb5 f1f3 	udiv	r1, r5, r3
 80141c4:	fb03 5711 	mls	r7, r3, r1, r5
 80141c8:	5dc7      	ldrb	r7, [r0, r7]
 80141ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80141ce:	462f      	mov	r7, r5
 80141d0:	42bb      	cmp	r3, r7
 80141d2:	460d      	mov	r5, r1
 80141d4:	d9f4      	bls.n	80141c0 <_printf_i+0x110>
 80141d6:	2b08      	cmp	r3, #8
 80141d8:	d10b      	bne.n	80141f2 <_printf_i+0x142>
 80141da:	6823      	ldr	r3, [r4, #0]
 80141dc:	07df      	lsls	r7, r3, #31
 80141de:	d508      	bpl.n	80141f2 <_printf_i+0x142>
 80141e0:	6923      	ldr	r3, [r4, #16]
 80141e2:	6861      	ldr	r1, [r4, #4]
 80141e4:	4299      	cmp	r1, r3
 80141e6:	bfde      	ittt	le
 80141e8:	2330      	movle	r3, #48	@ 0x30
 80141ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 80141ee:	f106 36ff 	addle.w	r6, r6, #4294967295
 80141f2:	1b92      	subs	r2, r2, r6
 80141f4:	6122      	str	r2, [r4, #16]
 80141f6:	f8cd a000 	str.w	sl, [sp]
 80141fa:	464b      	mov	r3, r9
 80141fc:	aa03      	add	r2, sp, #12
 80141fe:	4621      	mov	r1, r4
 8014200:	4640      	mov	r0, r8
 8014202:	f7ff fee7 	bl	8013fd4 <_printf_common>
 8014206:	3001      	adds	r0, #1
 8014208:	d14a      	bne.n	80142a0 <_printf_i+0x1f0>
 801420a:	f04f 30ff 	mov.w	r0, #4294967295
 801420e:	b004      	add	sp, #16
 8014210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014214:	6823      	ldr	r3, [r4, #0]
 8014216:	f043 0320 	orr.w	r3, r3, #32
 801421a:	6023      	str	r3, [r4, #0]
 801421c:	4832      	ldr	r0, [pc, #200]	@ (80142e8 <_printf_i+0x238>)
 801421e:	2778      	movs	r7, #120	@ 0x78
 8014220:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8014224:	6823      	ldr	r3, [r4, #0]
 8014226:	6831      	ldr	r1, [r6, #0]
 8014228:	061f      	lsls	r7, r3, #24
 801422a:	f851 5b04 	ldr.w	r5, [r1], #4
 801422e:	d402      	bmi.n	8014236 <_printf_i+0x186>
 8014230:	065f      	lsls	r7, r3, #25
 8014232:	bf48      	it	mi
 8014234:	b2ad      	uxthmi	r5, r5
 8014236:	6031      	str	r1, [r6, #0]
 8014238:	07d9      	lsls	r1, r3, #31
 801423a:	bf44      	itt	mi
 801423c:	f043 0320 	orrmi.w	r3, r3, #32
 8014240:	6023      	strmi	r3, [r4, #0]
 8014242:	b11d      	cbz	r5, 801424c <_printf_i+0x19c>
 8014244:	2310      	movs	r3, #16
 8014246:	e7ad      	b.n	80141a4 <_printf_i+0xf4>
 8014248:	4826      	ldr	r0, [pc, #152]	@ (80142e4 <_printf_i+0x234>)
 801424a:	e7e9      	b.n	8014220 <_printf_i+0x170>
 801424c:	6823      	ldr	r3, [r4, #0]
 801424e:	f023 0320 	bic.w	r3, r3, #32
 8014252:	6023      	str	r3, [r4, #0]
 8014254:	e7f6      	b.n	8014244 <_printf_i+0x194>
 8014256:	4616      	mov	r6, r2
 8014258:	e7bd      	b.n	80141d6 <_printf_i+0x126>
 801425a:	6833      	ldr	r3, [r6, #0]
 801425c:	6825      	ldr	r5, [r4, #0]
 801425e:	6961      	ldr	r1, [r4, #20]
 8014260:	1d18      	adds	r0, r3, #4
 8014262:	6030      	str	r0, [r6, #0]
 8014264:	062e      	lsls	r6, r5, #24
 8014266:	681b      	ldr	r3, [r3, #0]
 8014268:	d501      	bpl.n	801426e <_printf_i+0x1be>
 801426a:	6019      	str	r1, [r3, #0]
 801426c:	e002      	b.n	8014274 <_printf_i+0x1c4>
 801426e:	0668      	lsls	r0, r5, #25
 8014270:	d5fb      	bpl.n	801426a <_printf_i+0x1ba>
 8014272:	8019      	strh	r1, [r3, #0]
 8014274:	2300      	movs	r3, #0
 8014276:	6123      	str	r3, [r4, #16]
 8014278:	4616      	mov	r6, r2
 801427a:	e7bc      	b.n	80141f6 <_printf_i+0x146>
 801427c:	6833      	ldr	r3, [r6, #0]
 801427e:	1d1a      	adds	r2, r3, #4
 8014280:	6032      	str	r2, [r6, #0]
 8014282:	681e      	ldr	r6, [r3, #0]
 8014284:	6862      	ldr	r2, [r4, #4]
 8014286:	2100      	movs	r1, #0
 8014288:	4630      	mov	r0, r6
 801428a:	f7ec f849 	bl	8000320 <memchr>
 801428e:	b108      	cbz	r0, 8014294 <_printf_i+0x1e4>
 8014290:	1b80      	subs	r0, r0, r6
 8014292:	6060      	str	r0, [r4, #4]
 8014294:	6863      	ldr	r3, [r4, #4]
 8014296:	6123      	str	r3, [r4, #16]
 8014298:	2300      	movs	r3, #0
 801429a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801429e:	e7aa      	b.n	80141f6 <_printf_i+0x146>
 80142a0:	6923      	ldr	r3, [r4, #16]
 80142a2:	4632      	mov	r2, r6
 80142a4:	4649      	mov	r1, r9
 80142a6:	4640      	mov	r0, r8
 80142a8:	47d0      	blx	sl
 80142aa:	3001      	adds	r0, #1
 80142ac:	d0ad      	beq.n	801420a <_printf_i+0x15a>
 80142ae:	6823      	ldr	r3, [r4, #0]
 80142b0:	079b      	lsls	r3, r3, #30
 80142b2:	d413      	bmi.n	80142dc <_printf_i+0x22c>
 80142b4:	68e0      	ldr	r0, [r4, #12]
 80142b6:	9b03      	ldr	r3, [sp, #12]
 80142b8:	4298      	cmp	r0, r3
 80142ba:	bfb8      	it	lt
 80142bc:	4618      	movlt	r0, r3
 80142be:	e7a6      	b.n	801420e <_printf_i+0x15e>
 80142c0:	2301      	movs	r3, #1
 80142c2:	4632      	mov	r2, r6
 80142c4:	4649      	mov	r1, r9
 80142c6:	4640      	mov	r0, r8
 80142c8:	47d0      	blx	sl
 80142ca:	3001      	adds	r0, #1
 80142cc:	d09d      	beq.n	801420a <_printf_i+0x15a>
 80142ce:	3501      	adds	r5, #1
 80142d0:	68e3      	ldr	r3, [r4, #12]
 80142d2:	9903      	ldr	r1, [sp, #12]
 80142d4:	1a5b      	subs	r3, r3, r1
 80142d6:	42ab      	cmp	r3, r5
 80142d8:	dcf2      	bgt.n	80142c0 <_printf_i+0x210>
 80142da:	e7eb      	b.n	80142b4 <_printf_i+0x204>
 80142dc:	2500      	movs	r5, #0
 80142de:	f104 0619 	add.w	r6, r4, #25
 80142e2:	e7f5      	b.n	80142d0 <_printf_i+0x220>
 80142e4:	080148e5 	.word	0x080148e5
 80142e8:	080148f6 	.word	0x080148f6

080142ec <memmove>:
 80142ec:	4288      	cmp	r0, r1
 80142ee:	b510      	push	{r4, lr}
 80142f0:	eb01 0402 	add.w	r4, r1, r2
 80142f4:	d902      	bls.n	80142fc <memmove+0x10>
 80142f6:	4284      	cmp	r4, r0
 80142f8:	4623      	mov	r3, r4
 80142fa:	d807      	bhi.n	801430c <memmove+0x20>
 80142fc:	1e43      	subs	r3, r0, #1
 80142fe:	42a1      	cmp	r1, r4
 8014300:	d008      	beq.n	8014314 <memmove+0x28>
 8014302:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014306:	f803 2f01 	strb.w	r2, [r3, #1]!
 801430a:	e7f8      	b.n	80142fe <memmove+0x12>
 801430c:	4402      	add	r2, r0
 801430e:	4601      	mov	r1, r0
 8014310:	428a      	cmp	r2, r1
 8014312:	d100      	bne.n	8014316 <memmove+0x2a>
 8014314:	bd10      	pop	{r4, pc}
 8014316:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801431a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801431e:	e7f7      	b.n	8014310 <memmove+0x24>

08014320 <_sbrk_r>:
 8014320:	b538      	push	{r3, r4, r5, lr}
 8014322:	4d06      	ldr	r5, [pc, #24]	@ (801433c <_sbrk_r+0x1c>)
 8014324:	2300      	movs	r3, #0
 8014326:	4604      	mov	r4, r0
 8014328:	4608      	mov	r0, r1
 801432a:	602b      	str	r3, [r5, #0]
 801432c:	f7ef f9fe 	bl	800372c <_sbrk>
 8014330:	1c43      	adds	r3, r0, #1
 8014332:	d102      	bne.n	801433a <_sbrk_r+0x1a>
 8014334:	682b      	ldr	r3, [r5, #0]
 8014336:	b103      	cbz	r3, 801433a <_sbrk_r+0x1a>
 8014338:	6023      	str	r3, [r4, #0]
 801433a:	bd38      	pop	{r3, r4, r5, pc}
 801433c:	24000ab0 	.word	0x24000ab0

08014340 <_realloc_r>:
 8014340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014344:	4607      	mov	r7, r0
 8014346:	4614      	mov	r4, r2
 8014348:	460d      	mov	r5, r1
 801434a:	b921      	cbnz	r1, 8014356 <_realloc_r+0x16>
 801434c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014350:	4611      	mov	r1, r2
 8014352:	f7ff bc5b 	b.w	8013c0c <_malloc_r>
 8014356:	b92a      	cbnz	r2, 8014364 <_realloc_r+0x24>
 8014358:	f7ff fbec 	bl	8013b34 <_free_r>
 801435c:	4625      	mov	r5, r4
 801435e:	4628      	mov	r0, r5
 8014360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014364:	f000 f81a 	bl	801439c <_malloc_usable_size_r>
 8014368:	4284      	cmp	r4, r0
 801436a:	4606      	mov	r6, r0
 801436c:	d802      	bhi.n	8014374 <_realloc_r+0x34>
 801436e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014372:	d8f4      	bhi.n	801435e <_realloc_r+0x1e>
 8014374:	4621      	mov	r1, r4
 8014376:	4638      	mov	r0, r7
 8014378:	f7ff fc48 	bl	8013c0c <_malloc_r>
 801437c:	4680      	mov	r8, r0
 801437e:	b908      	cbnz	r0, 8014384 <_realloc_r+0x44>
 8014380:	4645      	mov	r5, r8
 8014382:	e7ec      	b.n	801435e <_realloc_r+0x1e>
 8014384:	42b4      	cmp	r4, r6
 8014386:	4622      	mov	r2, r4
 8014388:	4629      	mov	r1, r5
 801438a:	bf28      	it	cs
 801438c:	4632      	movcs	r2, r6
 801438e:	f7ff fbc3 	bl	8013b18 <memcpy>
 8014392:	4629      	mov	r1, r5
 8014394:	4638      	mov	r0, r7
 8014396:	f7ff fbcd 	bl	8013b34 <_free_r>
 801439a:	e7f1      	b.n	8014380 <_realloc_r+0x40>

0801439c <_malloc_usable_size_r>:
 801439c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80143a0:	1f18      	subs	r0, r3, #4
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	bfbc      	itt	lt
 80143a6:	580b      	ldrlt	r3, [r1, r0]
 80143a8:	18c0      	addlt	r0, r0, r3
 80143aa:	4770      	bx	lr

080143ac <_init>:
 80143ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143ae:	bf00      	nop
 80143b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80143b2:	bc08      	pop	{r3}
 80143b4:	469e      	mov	lr, r3
 80143b6:	4770      	bx	lr

080143b8 <_fini>:
 80143b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143ba:	bf00      	nop
 80143bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80143be:	bc08      	pop	{r3}
 80143c0:	469e      	mov	lr, r3
 80143c2:	4770      	bx	lr
